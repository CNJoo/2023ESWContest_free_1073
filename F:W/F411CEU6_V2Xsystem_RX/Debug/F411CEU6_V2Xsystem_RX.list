
F411CEU6_V2Xsystem_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015d3c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000988  08015ee0  08015ee0  00025ee0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016868  08016868  00030230  2**0
                  CONTENTS
  4 .ARM          00000008  08016868  08016868  00026868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016870  08016870  00030230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000018  08016870  08016870  00026870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016888  08016888  00026888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  0801688c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000400  20000230  08016abc  00030230  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000630  08016abc  00030630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY
 12 .debug_info   000143a6  00000000  00000000  00030260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003057  00000000  00000000  00044606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  00047660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  00048748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a33c  00000000  00000000  000496c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015cd9  00000000  00000000  00063a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000958ae  00000000  00000000  000796dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cf  00000000  00000000  0010ef8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059f4  00000000  00000000  0010f05c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000030  00000000  00000000  00114ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000453  00000000  00000000  00114a50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <dw3000_driver>:
 80001a0:	12 03 ca de 0f ff ff ff 14 62 01 08 1c 62 01 08     .........b...b..
 80001b0:	50 61 01 08 14 61 01 08 07 00 06 00                 Pa...a......

080001bc <dw3700_driver>:
 80001bc:	13 03 ca de 0f ff ff ff 14 62 01 08 1c 62 01 08     .........b...b..
 80001cc:	90 62 01 08 54 62 01 08 07 00 06 00                 .b..Tb......

080001d8 <dw3720_driver>:
 80001d8:	14 03 ca de 0f ff ff ff 14 62 01 08 1c 62 01 08     .........b...b..
 80001e8:	a0 63 01 08 64 63 01 08 07 00 06 00                 .c..dc......

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000230 	.word	0x20000230
 8000210:	00000000 	.word	0x00000000
 8000214:	08015ec4 	.word	0x08015ec4

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000234 	.word	0x20000234
 8000230:	08015ec4 	.word	0x08015ec4
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_idiv0>:
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop

080002f4 <__aeabi_drsub>:
 80002f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f8:	e002      	b.n	8000300 <__adddf3>
 80002fa:	bf00      	nop

080002fc <__aeabi_dsub>:
 80002fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000300 <__adddf3>:
 8000300:	b530      	push	{r4, r5, lr}
 8000302:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000306:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800030a:	ea94 0f05 	teq	r4, r5
 800030e:	bf08      	it	eq
 8000310:	ea90 0f02 	teqeq	r0, r2
 8000314:	bf1f      	itttt	ne
 8000316:	ea54 0c00 	orrsne.w	ip, r4, r0
 800031a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000322:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000326:	f000 80e2 	beq.w	80004ee <__adddf3+0x1ee>
 800032a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000332:	bfb8      	it	lt
 8000334:	426d      	neglt	r5, r5
 8000336:	dd0c      	ble.n	8000352 <__adddf3+0x52>
 8000338:	442c      	add	r4, r5
 800033a:	ea80 0202 	eor.w	r2, r0, r2
 800033e:	ea81 0303 	eor.w	r3, r1, r3
 8000342:	ea82 0000 	eor.w	r0, r2, r0
 8000346:	ea83 0101 	eor.w	r1, r3, r1
 800034a:	ea80 0202 	eor.w	r2, r0, r2
 800034e:	ea81 0303 	eor.w	r3, r1, r3
 8000352:	2d36      	cmp	r5, #54	; 0x36
 8000354:	bf88      	it	hi
 8000356:	bd30      	pophi	{r4, r5, pc}
 8000358:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800035c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000360:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000364:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x70>
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000374:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000378:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800037c:	d002      	beq.n	8000384 <__adddf3+0x84>
 800037e:	4252      	negs	r2, r2
 8000380:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000384:	ea94 0f05 	teq	r4, r5
 8000388:	f000 80a7 	beq.w	80004da <__adddf3+0x1da>
 800038c:	f1a4 0401 	sub.w	r4, r4, #1
 8000390:	f1d5 0e20 	rsbs	lr, r5, #32
 8000394:	db0d      	blt.n	80003b2 <__adddf3+0xb2>
 8000396:	fa02 fc0e 	lsl.w	ip, r2, lr
 800039a:	fa22 f205 	lsr.w	r2, r2, r5
 800039e:	1880      	adds	r0, r0, r2
 80003a0:	f141 0100 	adc.w	r1, r1, #0
 80003a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a8:	1880      	adds	r0, r0, r2
 80003aa:	fa43 f305 	asr.w	r3, r3, r5
 80003ae:	4159      	adcs	r1, r3
 80003b0:	e00e      	b.n	80003d0 <__adddf3+0xd0>
 80003b2:	f1a5 0520 	sub.w	r5, r5, #32
 80003b6:	f10e 0e20 	add.w	lr, lr, #32
 80003ba:	2a01      	cmp	r2, #1
 80003bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003c0:	bf28      	it	cs
 80003c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	18c0      	adds	r0, r0, r3
 80003cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	d507      	bpl.n	80003e6 <__adddf3+0xe6>
 80003d6:	f04f 0e00 	mov.w	lr, #0
 80003da:	f1dc 0c00 	rsbs	ip, ip, #0
 80003de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ea:	d31b      	bcc.n	8000424 <__adddf3+0x124>
 80003ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003f0:	d30c      	bcc.n	800040c <__adddf3+0x10c>
 80003f2:	0849      	lsrs	r1, r1, #1
 80003f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003fc:	f104 0401 	add.w	r4, r4, #1
 8000400:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000404:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000408:	f080 809a 	bcs.w	8000540 <__adddf3+0x240>
 800040c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000410:	bf08      	it	eq
 8000412:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000416:	f150 0000 	adcs.w	r0, r0, #0
 800041a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041e:	ea41 0105 	orr.w	r1, r1, r5
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000428:	4140      	adcs	r0, r0
 800042a:	eb41 0101 	adc.w	r1, r1, r1
 800042e:	3c01      	subs	r4, #1
 8000430:	bf28      	it	cs
 8000432:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000436:	d2e9      	bcs.n	800040c <__adddf3+0x10c>
 8000438:	f091 0f00 	teq	r1, #0
 800043c:	bf04      	itt	eq
 800043e:	4601      	moveq	r1, r0
 8000440:	2000      	moveq	r0, #0
 8000442:	fab1 f381 	clz	r3, r1
 8000446:	bf08      	it	eq
 8000448:	3320      	addeq	r3, #32
 800044a:	f1a3 030b 	sub.w	r3, r3, #11
 800044e:	f1b3 0220 	subs.w	r2, r3, #32
 8000452:	da0c      	bge.n	800046e <__adddf3+0x16e>
 8000454:	320c      	adds	r2, #12
 8000456:	dd08      	ble.n	800046a <__adddf3+0x16a>
 8000458:	f102 0c14 	add.w	ip, r2, #20
 800045c:	f1c2 020c 	rsb	r2, r2, #12
 8000460:	fa01 f00c 	lsl.w	r0, r1, ip
 8000464:	fa21 f102 	lsr.w	r1, r1, r2
 8000468:	e00c      	b.n	8000484 <__adddf3+0x184>
 800046a:	f102 0214 	add.w	r2, r2, #20
 800046e:	bfd8      	it	le
 8000470:	f1c2 0c20 	rsble	ip, r2, #32
 8000474:	fa01 f102 	lsl.w	r1, r1, r2
 8000478:	fa20 fc0c 	lsr.w	ip, r0, ip
 800047c:	bfdc      	itt	le
 800047e:	ea41 010c 	orrle.w	r1, r1, ip
 8000482:	4090      	lslle	r0, r2
 8000484:	1ae4      	subs	r4, r4, r3
 8000486:	bfa2      	ittt	ge
 8000488:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800048c:	4329      	orrge	r1, r5
 800048e:	bd30      	popge	{r4, r5, pc}
 8000490:	ea6f 0404 	mvn.w	r4, r4
 8000494:	3c1f      	subs	r4, #31
 8000496:	da1c      	bge.n	80004d2 <__adddf3+0x1d2>
 8000498:	340c      	adds	r4, #12
 800049a:	dc0e      	bgt.n	80004ba <__adddf3+0x1ba>
 800049c:	f104 0414 	add.w	r4, r4, #20
 80004a0:	f1c4 0220 	rsb	r2, r4, #32
 80004a4:	fa20 f004 	lsr.w	r0, r0, r4
 80004a8:	fa01 f302 	lsl.w	r3, r1, r2
 80004ac:	ea40 0003 	orr.w	r0, r0, r3
 80004b0:	fa21 f304 	lsr.w	r3, r1, r4
 80004b4:	ea45 0103 	orr.w	r1, r5, r3
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	f1c4 040c 	rsb	r4, r4, #12
 80004be:	f1c4 0220 	rsb	r2, r4, #32
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 f304 	lsl.w	r3, r1, r4
 80004ca:	ea40 0003 	orr.w	r0, r0, r3
 80004ce:	4629      	mov	r1, r5
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	fa21 f004 	lsr.w	r0, r1, r4
 80004d6:	4629      	mov	r1, r5
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	f094 0f00 	teq	r4, #0
 80004de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004e2:	bf06      	itte	eq
 80004e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e8:	3401      	addeq	r4, #1
 80004ea:	3d01      	subne	r5, #1
 80004ec:	e74e      	b.n	800038c <__adddf3+0x8c>
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf18      	it	ne
 80004f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f8:	d029      	beq.n	800054e <__adddf3+0x24e>
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	d005      	beq.n	8000512 <__adddf3+0x212>
 8000506:	ea54 0c00 	orrs.w	ip, r4, r0
 800050a:	bf04      	itt	eq
 800050c:	4619      	moveq	r1, r3
 800050e:	4610      	moveq	r0, r2
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea91 0f03 	teq	r1, r3
 8000516:	bf1e      	ittt	ne
 8000518:	2100      	movne	r1, #0
 800051a:	2000      	movne	r0, #0
 800051c:	bd30      	popne	{r4, r5, pc}
 800051e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000522:	d105      	bne.n	8000530 <__adddf3+0x230>
 8000524:	0040      	lsls	r0, r0, #1
 8000526:	4149      	adcs	r1, r1
 8000528:	bf28      	it	cs
 800052a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052e:	bd30      	pop	{r4, r5, pc}
 8000530:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000534:	bf3c      	itt	cc
 8000536:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800053a:	bd30      	popcc	{r4, r5, pc}
 800053c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000540:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000544:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000548:	f04f 0000 	mov.w	r0, #0
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000552:	bf1a      	itte	ne
 8000554:	4619      	movne	r1, r3
 8000556:	4610      	movne	r0, r2
 8000558:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800055c:	bf1c      	itt	ne
 800055e:	460b      	movne	r3, r1
 8000560:	4602      	movne	r2, r0
 8000562:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000566:	bf06      	itte	eq
 8000568:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800056c:	ea91 0f03 	teqeq	r1, r3
 8000570:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	bf00      	nop

08000578 <__aeabi_ui2d>:
 8000578:	f090 0f00 	teq	r0, #0
 800057c:	bf04      	itt	eq
 800057e:	2100      	moveq	r1, #0
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000588:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058c:	f04f 0500 	mov.w	r5, #0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e750      	b.n	8000438 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_i2d>:
 8000598:	f090 0f00 	teq	r0, #0
 800059c:	bf04      	itt	eq
 800059e:	2100      	moveq	r1, #0
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005b0:	bf48      	it	mi
 80005b2:	4240      	negmi	r0, r0
 80005b4:	f04f 0100 	mov.w	r1, #0
 80005b8:	e73e      	b.n	8000438 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_f2d>:
 80005bc:	0042      	lsls	r2, r0, #1
 80005be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ca:	bf1f      	itttt	ne
 80005cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d8:	4770      	bxne	lr
 80005da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005de:	bf08      	it	eq
 80005e0:	4770      	bxeq	lr
 80005e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e6:	bf04      	itt	eq
 80005e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005fc:	e71c      	b.n	8000438 <__adddf3+0x138>
 80005fe:	bf00      	nop

08000600 <__aeabi_ul2d>:
 8000600:	ea50 0201 	orrs.w	r2, r0, r1
 8000604:	bf08      	it	eq
 8000606:	4770      	bxeq	lr
 8000608:	b530      	push	{r4, r5, lr}
 800060a:	f04f 0500 	mov.w	r5, #0
 800060e:	e00a      	b.n	8000626 <__aeabi_l2d+0x16>

08000610 <__aeabi_l2d>:
 8000610:	ea50 0201 	orrs.w	r2, r0, r1
 8000614:	bf08      	it	eq
 8000616:	4770      	bxeq	lr
 8000618:	b530      	push	{r4, r5, lr}
 800061a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061e:	d502      	bpl.n	8000626 <__aeabi_l2d+0x16>
 8000620:	4240      	negs	r0, r0
 8000622:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000626:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800062a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000632:	f43f aed8 	beq.w	80003e6 <__adddf3+0xe6>
 8000636:	f04f 0203 	mov.w	r2, #3
 800063a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063e:	bf18      	it	ne
 8000640:	3203      	addne	r2, #3
 8000642:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000646:	bf18      	it	ne
 8000648:	3203      	addne	r2, #3
 800064a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064e:	f1c2 0320 	rsb	r3, r2, #32
 8000652:	fa00 fc03 	lsl.w	ip, r0, r3
 8000656:	fa20 f002 	lsr.w	r0, r0, r2
 800065a:	fa01 fe03 	lsl.w	lr, r1, r3
 800065e:	ea40 000e 	orr.w	r0, r0, lr
 8000662:	fa21 f102 	lsr.w	r1, r1, r2
 8000666:	4414      	add	r4, r2
 8000668:	e6bd      	b.n	80003e6 <__adddf3+0xe6>
 800066a:	bf00      	nop

0800066c <__aeabi_dmul>:
 800066c:	b570      	push	{r4, r5, r6, lr}
 800066e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000672:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000676:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800067a:	bf1d      	ittte	ne
 800067c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000680:	ea94 0f0c 	teqne	r4, ip
 8000684:	ea95 0f0c 	teqne	r5, ip
 8000688:	f000 f8de 	bleq	8000848 <__aeabi_dmul+0x1dc>
 800068c:	442c      	add	r4, r5
 800068e:	ea81 0603 	eor.w	r6, r1, r3
 8000692:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000696:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800069a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069e:	bf18      	it	ne
 80006a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006ac:	d038      	beq.n	8000720 <__aeabi_dmul+0xb4>
 80006ae:	fba0 ce02 	umull	ip, lr, r0, r2
 80006b2:	f04f 0500 	mov.w	r5, #0
 80006b6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006ba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006be:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006c2:	f04f 0600 	mov.w	r6, #0
 80006c6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ca:	f09c 0f00 	teq	ip, #0
 80006ce:	bf18      	it	ne
 80006d0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006dc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006e0:	d204      	bcs.n	80006ec <__aeabi_dmul+0x80>
 80006e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e6:	416d      	adcs	r5, r5
 80006e8:	eb46 0606 	adc.w	r6, r6, r6
 80006ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000700:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000704:	bf88      	it	hi
 8000706:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800070a:	d81e      	bhi.n	800074a <__aeabi_dmul+0xde>
 800070c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000710:	bf08      	it	eq
 8000712:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000716:	f150 0000 	adcs.w	r0, r0, #0
 800071a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071e:	bd70      	pop	{r4, r5, r6, pc}
 8000720:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000724:	ea46 0101 	orr.w	r1, r6, r1
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000734:	bfc2      	ittt	gt
 8000736:	ebd4 050c 	rsbsgt	r5, r4, ip
 800073a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073e:	bd70      	popgt	{r4, r5, r6, pc}
 8000740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000744:	f04f 0e00 	mov.w	lr, #0
 8000748:	3c01      	subs	r4, #1
 800074a:	f300 80ab 	bgt.w	80008a4 <__aeabi_dmul+0x238>
 800074e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000752:	bfde      	ittt	le
 8000754:	2000      	movle	r0, #0
 8000756:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800075a:	bd70      	pople	{r4, r5, r6, pc}
 800075c:	f1c4 0400 	rsb	r4, r4, #0
 8000760:	3c20      	subs	r4, #32
 8000762:	da35      	bge.n	80007d0 <__aeabi_dmul+0x164>
 8000764:	340c      	adds	r4, #12
 8000766:	dc1b      	bgt.n	80007a0 <__aeabi_dmul+0x134>
 8000768:	f104 0414 	add.w	r4, r4, #20
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f305 	lsl.w	r3, r0, r5
 8000774:	fa20 f004 	lsr.w	r0, r0, r4
 8000778:	fa01 f205 	lsl.w	r2, r1, r5
 800077c:	ea40 0002 	orr.w	r0, r0, r2
 8000780:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000784:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	fa21 f604 	lsr.w	r6, r1, r4
 8000790:	eb42 0106 	adc.w	r1, r2, r6
 8000794:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000798:	bf08      	it	eq
 800079a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079e:	bd70      	pop	{r4, r5, r6, pc}
 80007a0:	f1c4 040c 	rsb	r4, r4, #12
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f304 	lsl.w	r3, r0, r4
 80007ac:	fa20 f005 	lsr.w	r0, r0, r5
 80007b0:	fa01 f204 	lsl.w	r2, r1, r4
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c0:	f141 0100 	adc.w	r1, r1, #0
 80007c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c8:	bf08      	it	eq
 80007ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ce:	bd70      	pop	{r4, r5, r6, pc}
 80007d0:	f1c4 0520 	rsb	r5, r4, #32
 80007d4:	fa00 f205 	lsl.w	r2, r0, r5
 80007d8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007dc:	fa20 f304 	lsr.w	r3, r0, r4
 80007e0:	fa01 f205 	lsl.w	r2, r1, r5
 80007e4:	ea43 0302 	orr.w	r3, r3, r2
 80007e8:	fa21 f004 	lsr.w	r0, r1, r4
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	fa21 f204 	lsr.w	r2, r1, r4
 80007f4:	ea20 0002 	bic.w	r0, r0, r2
 80007f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000800:	bf08      	it	eq
 8000802:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000806:	bd70      	pop	{r4, r5, r6, pc}
 8000808:	f094 0f00 	teq	r4, #0
 800080c:	d10f      	bne.n	800082e <__aeabi_dmul+0x1c2>
 800080e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000812:	0040      	lsls	r0, r0, #1
 8000814:	eb41 0101 	adc.w	r1, r1, r1
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	bf08      	it	eq
 800081e:	3c01      	subeq	r4, #1
 8000820:	d0f7      	beq.n	8000812 <__aeabi_dmul+0x1a6>
 8000822:	ea41 0106 	orr.w	r1, r1, r6
 8000826:	f095 0f00 	teq	r5, #0
 800082a:	bf18      	it	ne
 800082c:	4770      	bxne	lr
 800082e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000832:	0052      	lsls	r2, r2, #1
 8000834:	eb43 0303 	adc.w	r3, r3, r3
 8000838:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800083c:	bf08      	it	eq
 800083e:	3d01      	subeq	r5, #1
 8000840:	d0f7      	beq.n	8000832 <__aeabi_dmul+0x1c6>
 8000842:	ea43 0306 	orr.w	r3, r3, r6
 8000846:	4770      	bx	lr
 8000848:	ea94 0f0c 	teq	r4, ip
 800084c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000850:	bf18      	it	ne
 8000852:	ea95 0f0c 	teqne	r5, ip
 8000856:	d00c      	beq.n	8000872 <__aeabi_dmul+0x206>
 8000858:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800085c:	bf18      	it	ne
 800085e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000862:	d1d1      	bne.n	8000808 <__aeabi_dmul+0x19c>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000876:	bf06      	itte	eq
 8000878:	4610      	moveq	r0, r2
 800087a:	4619      	moveq	r1, r3
 800087c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000880:	d019      	beq.n	80008b6 <__aeabi_dmul+0x24a>
 8000882:	ea94 0f0c 	teq	r4, ip
 8000886:	d102      	bne.n	800088e <__aeabi_dmul+0x222>
 8000888:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800088c:	d113      	bne.n	80008b6 <__aeabi_dmul+0x24a>
 800088e:	ea95 0f0c 	teq	r5, ip
 8000892:	d105      	bne.n	80008a0 <__aeabi_dmul+0x234>
 8000894:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000898:	bf1c      	itt	ne
 800089a:	4610      	movne	r0, r2
 800089c:	4619      	movne	r1, r3
 800089e:	d10a      	bne.n	80008b6 <__aeabi_dmul+0x24a>
 80008a0:	ea81 0103 	eor.w	r1, r1, r3
 80008a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008b0:	f04f 0000 	mov.w	r0, #0
 80008b4:	bd70      	pop	{r4, r5, r6, pc}
 80008b6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008ba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008be:	bd70      	pop	{r4, r5, r6, pc}

080008c0 <__aeabi_ddiv>:
 80008c0:	b570      	push	{r4, r5, r6, lr}
 80008c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ce:	bf1d      	ittte	ne
 80008d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d4:	ea94 0f0c 	teqne	r4, ip
 80008d8:	ea95 0f0c 	teqne	r5, ip
 80008dc:	f000 f8a7 	bleq	8000a2e <__aeabi_ddiv+0x16e>
 80008e0:	eba4 0405 	sub.w	r4, r4, r5
 80008e4:	ea81 0e03 	eor.w	lr, r1, r3
 80008e8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008f0:	f000 8088 	beq.w	8000a04 <__aeabi_ddiv+0x144>
 80008f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008fc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000900:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000904:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000908:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800090c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000910:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000914:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000918:	429d      	cmp	r5, r3
 800091a:	bf08      	it	eq
 800091c:	4296      	cmpeq	r6, r2
 800091e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000922:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000926:	d202      	bcs.n	800092e <__aeabi_ddiv+0x6e>
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	1ab6      	subs	r6, r6, r2
 8000930:	eb65 0503 	sbc.w	r5, r5, r3
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000942:	ebb6 0e02 	subs.w	lr, r6, r2
 8000946:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094a:	bf22      	ittt	cs
 800094c:	1ab6      	subcs	r6, r6, r2
 800094e:	4675      	movcs	r5, lr
 8000950:	ea40 000c 	orrcs.w	r0, r0, ip
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	ea4f 0232 	mov.w	r2, r2, rrx
 800095a:	ebb6 0e02 	subs.w	lr, r6, r2
 800095e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000962:	bf22      	ittt	cs
 8000964:	1ab6      	subcs	r6, r6, r2
 8000966:	4675      	movcs	r5, lr
 8000968:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800096c:	085b      	lsrs	r3, r3, #1
 800096e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000972:	ebb6 0e02 	subs.w	lr, r6, r2
 8000976:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097a:	bf22      	ittt	cs
 800097c:	1ab6      	subcs	r6, r6, r2
 800097e:	4675      	movcs	r5, lr
 8000980:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000984:	085b      	lsrs	r3, r3, #1
 8000986:	ea4f 0232 	mov.w	r2, r2, rrx
 800098a:	ebb6 0e02 	subs.w	lr, r6, r2
 800098e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000992:	bf22      	ittt	cs
 8000994:	1ab6      	subcs	r6, r6, r2
 8000996:	4675      	movcs	r5, lr
 8000998:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800099c:	ea55 0e06 	orrs.w	lr, r5, r6
 80009a0:	d018      	beq.n	80009d4 <__aeabi_ddiv+0x114>
 80009a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009b2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009ba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009be:	d1c0      	bne.n	8000942 <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	d10b      	bne.n	80009de <__aeabi_ddiv+0x11e>
 80009c6:	ea41 0100 	orr.w	r1, r1, r0
 80009ca:	f04f 0000 	mov.w	r0, #0
 80009ce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009d2:	e7b6      	b.n	8000942 <__aeabi_ddiv+0x82>
 80009d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d8:	bf04      	itt	eq
 80009da:	4301      	orreq	r1, r0
 80009dc:	2000      	moveq	r0, #0
 80009de:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009e2:	bf88      	it	hi
 80009e4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e8:	f63f aeaf 	bhi.w	800074a <__aeabi_dmul+0xde>
 80009ec:	ebb5 0c03 	subs.w	ip, r5, r3
 80009f0:	bf04      	itt	eq
 80009f2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009fa:	f150 0000 	adcs.w	r0, r0, #0
 80009fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a02:	bd70      	pop	{r4, r5, r6, pc}
 8000a04:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a08:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a0c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a10:	bfc2      	ittt	gt
 8000a12:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a1a:	bd70      	popgt	{r4, r5, r6, pc}
 8000a1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a20:	f04f 0e00 	mov.w	lr, #0
 8000a24:	3c01      	subs	r4, #1
 8000a26:	e690      	b.n	800074a <__aeabi_dmul+0xde>
 8000a28:	ea45 0e06 	orr.w	lr, r5, r6
 8000a2c:	e68d      	b.n	800074a <__aeabi_dmul+0xde>
 8000a2e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a32:	ea94 0f0c 	teq	r4, ip
 8000a36:	bf08      	it	eq
 8000a38:	ea95 0f0c 	teqeq	r5, ip
 8000a3c:	f43f af3b 	beq.w	80008b6 <__aeabi_dmul+0x24a>
 8000a40:	ea94 0f0c 	teq	r4, ip
 8000a44:	d10a      	bne.n	8000a5c <__aeabi_ddiv+0x19c>
 8000a46:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a4a:	f47f af34 	bne.w	80008b6 <__aeabi_dmul+0x24a>
 8000a4e:	ea95 0f0c 	teq	r5, ip
 8000a52:	f47f af25 	bne.w	80008a0 <__aeabi_dmul+0x234>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e72c      	b.n	80008b6 <__aeabi_dmul+0x24a>
 8000a5c:	ea95 0f0c 	teq	r5, ip
 8000a60:	d106      	bne.n	8000a70 <__aeabi_ddiv+0x1b0>
 8000a62:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a66:	f43f aefd 	beq.w	8000864 <__aeabi_dmul+0x1f8>
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	e722      	b.n	80008b6 <__aeabi_dmul+0x24a>
 8000a70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a74:	bf18      	it	ne
 8000a76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a7a:	f47f aec5 	bne.w	8000808 <__aeabi_dmul+0x19c>
 8000a7e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a82:	f47f af0d 	bne.w	80008a0 <__aeabi_dmul+0x234>
 8000a86:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a8a:	f47f aeeb 	bne.w	8000864 <__aeabi_dmul+0x1f8>
 8000a8e:	e712      	b.n	80008b6 <__aeabi_dmul+0x24a>

08000a90 <__gedf2>:
 8000a90:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a94:	e006      	b.n	8000aa4 <__cmpdf2+0x4>
 8000a96:	bf00      	nop

08000a98 <__ledf2>:
 8000a98:	f04f 0c01 	mov.w	ip, #1
 8000a9c:	e002      	b.n	8000aa4 <__cmpdf2+0x4>
 8000a9e:	bf00      	nop

08000aa0 <__cmpdf2>:
 8000aa0:	f04f 0c01 	mov.w	ip, #1
 8000aa4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	bf18      	it	ne
 8000ab6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aba:	d01b      	beq.n	8000af4 <__cmpdf2+0x54>
 8000abc:	b001      	add	sp, #4
 8000abe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ac2:	bf0c      	ite	eq
 8000ac4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac8:	ea91 0f03 	teqne	r1, r3
 8000acc:	bf02      	ittt	eq
 8000ace:	ea90 0f02 	teqeq	r0, r2
 8000ad2:	2000      	moveq	r0, #0
 8000ad4:	4770      	bxeq	lr
 8000ad6:	f110 0f00 	cmn.w	r0, #0
 8000ada:	ea91 0f03 	teq	r1, r3
 8000ade:	bf58      	it	pl
 8000ae0:	4299      	cmppl	r1, r3
 8000ae2:	bf08      	it	eq
 8000ae4:	4290      	cmpeq	r0, r2
 8000ae6:	bf2c      	ite	cs
 8000ae8:	17d8      	asrcs	r0, r3, #31
 8000aea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aee:	f040 0001 	orr.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__cmpdf2+0x64>
 8000afe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b02:	d107      	bne.n	8000b14 <__cmpdf2+0x74>
 8000b04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b0c:	d1d6      	bne.n	8000abc <__cmpdf2+0x1c>
 8000b0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b12:	d0d3      	beq.n	8000abc <__cmpdf2+0x1c>
 8000b14:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_cdrcmple>:
 8000b1c:	4684      	mov	ip, r0
 8000b1e:	4610      	mov	r0, r2
 8000b20:	4662      	mov	r2, ip
 8000b22:	468c      	mov	ip, r1
 8000b24:	4619      	mov	r1, r3
 8000b26:	4663      	mov	r3, ip
 8000b28:	e000      	b.n	8000b2c <__aeabi_cdcmpeq>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_cdcmpeq>:
 8000b2c:	b501      	push	{r0, lr}
 8000b2e:	f7ff ffb7 	bl	8000aa0 <__cmpdf2>
 8000b32:	2800      	cmp	r0, #0
 8000b34:	bf48      	it	mi
 8000b36:	f110 0f00 	cmnmi.w	r0, #0
 8000b3a:	bd01      	pop	{r0, pc}

08000b3c <__aeabi_dcmpeq>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff fff4 	bl	8000b2c <__aeabi_cdcmpeq>
 8000b44:	bf0c      	ite	eq
 8000b46:	2001      	moveq	r0, #1
 8000b48:	2000      	movne	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmplt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffea 	bl	8000b2c <__aeabi_cdcmpeq>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmple>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffe0 	bl	8000b2c <__aeabi_cdcmpeq>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpge>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffce 	bl	8000b1c <__aeabi_cdrcmple>
 8000b80:	bf94      	ite	ls
 8000b82:	2001      	movls	r0, #1
 8000b84:	2000      	movhi	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpgt>:
 8000b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b90:	f7ff ffc4 	bl	8000b1c <__aeabi_cdrcmple>
 8000b94:	bf34      	ite	cc
 8000b96:	2001      	movcc	r0, #1
 8000b98:	2000      	movcs	r0, #0
 8000b9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_dcmpun>:
 8000ba0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d102      	bne.n	8000bb0 <__aeabi_dcmpun+0x10>
 8000baa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bae:	d10a      	bne.n	8000bc6 <__aeabi_dcmpun+0x26>
 8000bb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb8:	d102      	bne.n	8000bc0 <__aeabi_dcmpun+0x20>
 8000bba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_dcmpun+0x26>
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0001 	mov.w	r0, #1
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2iz>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd4:	d215      	bcs.n	8000c02 <__aeabi_d2iz+0x36>
 8000bd6:	d511      	bpl.n	8000bfc <__aeabi_d2iz+0x30>
 8000bd8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bdc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be0:	d912      	bls.n	8000c08 <__aeabi_d2iz+0x3c>
 8000be2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf6:	bf18      	it	ne
 8000bf8:	4240      	negne	r0, r0
 8000bfa:	4770      	bx	lr
 8000bfc:	f04f 0000 	mov.w	r0, #0
 8000c00:	4770      	bx	lr
 8000c02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c06:	d105      	bne.n	8000c14 <__aeabi_d2iz+0x48>
 8000c08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	bf08      	it	eq
 8000c0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c12:	4770      	bx	lr
 8000c14:	f04f 0000 	mov.w	r0, #0
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_d2f>:
 8000c1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c24:	bf24      	itt	cs
 8000c26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2e:	d90d      	bls.n	8000c4c <__aeabi_d2f+0x30>
 8000c30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c44:	bf08      	it	eq
 8000c46:	f020 0001 	biceq.w	r0, r0, #1
 8000c4a:	4770      	bx	lr
 8000c4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c50:	d121      	bne.n	8000c96 <__aeabi_d2f+0x7a>
 8000c52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c56:	bfbc      	itt	lt
 8000c58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	4770      	bxlt	lr
 8000c5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c66:	f1c2 0218 	rsb	r2, r2, #24
 8000c6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c72:	fa20 f002 	lsr.w	r0, r0, r2
 8000c76:	bf18      	it	ne
 8000c78:	f040 0001 	orrne.w	r0, r0, #1
 8000c7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c88:	ea40 000c 	orr.w	r0, r0, ip
 8000c8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c94:	e7cc      	b.n	8000c30 <__aeabi_d2f+0x14>
 8000c96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c9a:	d107      	bne.n	8000cac <__aeabi_d2f+0x90>
 8000c9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ca0:	bf1e      	ittt	ne
 8000ca2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000caa:	4770      	bxne	lr
 8000cac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <__aeabi_uldivmod>:
 8000cbc:	b953      	cbnz	r3, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cbe:	b94a      	cbnz	r2, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cc0:	2900      	cmp	r1, #0
 8000cc2:	bf08      	it	eq
 8000cc4:	2800      	cmpeq	r0, #0
 8000cc6:	bf1c      	itt	ne
 8000cc8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ccc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cd0:	f7ff bb0e 	b.w	80002f0 <__aeabi_idiv0>
 8000cd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cdc:	f000 f806 	bl	8000cec <__udivmoddi4>
 8000ce0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce8:	b004      	add	sp, #16
 8000cea:	4770      	bx	lr

08000cec <__udivmoddi4>:
 8000cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf0:	9d08      	ldr	r5, [sp, #32]
 8000cf2:	4604      	mov	r4, r0
 8000cf4:	468e      	mov	lr, r1
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d14d      	bne.n	8000d96 <__udivmoddi4+0xaa>
 8000cfa:	428a      	cmp	r2, r1
 8000cfc:	4694      	mov	ip, r2
 8000cfe:	d969      	bls.n	8000dd4 <__udivmoddi4+0xe8>
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	b152      	cbz	r2, 8000d1c <__udivmoddi4+0x30>
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	f1c2 0120 	rsb	r1, r2, #32
 8000d0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000d12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d16:	ea41 0e03 	orr.w	lr, r1, r3
 8000d1a:	4094      	lsls	r4, r2
 8000d1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d20:	0c21      	lsrs	r1, r4, #16
 8000d22:	fbbe f6f8 	udiv	r6, lr, r8
 8000d26:	fa1f f78c 	uxth.w	r7, ip
 8000d2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000d2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d32:	fb06 f107 	mul.w	r1, r6, r7
 8000d36:	4299      	cmp	r1, r3
 8000d38:	d90a      	bls.n	8000d50 <__udivmoddi4+0x64>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d42:	f080 811f 	bcs.w	8000f84 <__udivmoddi4+0x298>
 8000d46:	4299      	cmp	r1, r3
 8000d48:	f240 811c 	bls.w	8000f84 <__udivmoddi4+0x298>
 8000d4c:	3e02      	subs	r6, #2
 8000d4e:	4463      	add	r3, ip
 8000d50:	1a5b      	subs	r3, r3, r1
 8000d52:	b2a4      	uxth	r4, r4
 8000d54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d58:	fb08 3310 	mls	r3, r8, r0, r3
 8000d5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d60:	fb00 f707 	mul.w	r7, r0, r7
 8000d64:	42a7      	cmp	r7, r4
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x92>
 8000d68:	eb1c 0404 	adds.w	r4, ip, r4
 8000d6c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d70:	f080 810a 	bcs.w	8000f88 <__udivmoddi4+0x29c>
 8000d74:	42a7      	cmp	r7, r4
 8000d76:	f240 8107 	bls.w	8000f88 <__udivmoddi4+0x29c>
 8000d7a:	4464      	add	r4, ip
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d82:	1be4      	subs	r4, r4, r7
 8000d84:	2600      	movs	r6, #0
 8000d86:	b11d      	cbz	r5, 8000d90 <__udivmoddi4+0xa4>
 8000d88:	40d4      	lsrs	r4, r2
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d909      	bls.n	8000dae <__udivmoddi4+0xc2>
 8000d9a:	2d00      	cmp	r5, #0
 8000d9c:	f000 80ef 	beq.w	8000f7e <__udivmoddi4+0x292>
 8000da0:	2600      	movs	r6, #0
 8000da2:	e9c5 0100 	strd	r0, r1, [r5]
 8000da6:	4630      	mov	r0, r6
 8000da8:	4631      	mov	r1, r6
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	fab3 f683 	clz	r6, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d14a      	bne.n	8000e4c <__udivmoddi4+0x160>
 8000db6:	428b      	cmp	r3, r1
 8000db8:	d302      	bcc.n	8000dc0 <__udivmoddi4+0xd4>
 8000dba:	4282      	cmp	r2, r0
 8000dbc:	f200 80f9 	bhi.w	8000fb2 <__udivmoddi4+0x2c6>
 8000dc0:	1a84      	subs	r4, r0, r2
 8000dc2:	eb61 0303 	sbc.w	r3, r1, r3
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	469e      	mov	lr, r3
 8000dca:	2d00      	cmp	r5, #0
 8000dcc:	d0e0      	beq.n	8000d90 <__udivmoddi4+0xa4>
 8000dce:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dd2:	e7dd      	b.n	8000d90 <__udivmoddi4+0xa4>
 8000dd4:	b902      	cbnz	r2, 8000dd8 <__udivmoddi4+0xec>
 8000dd6:	deff      	udf	#255	; 0xff
 8000dd8:	fab2 f282 	clz	r2, r2
 8000ddc:	2a00      	cmp	r2, #0
 8000dde:	f040 8092 	bne.w	8000f06 <__udivmoddi4+0x21a>
 8000de2:	eba1 010c 	sub.w	r1, r1, ip
 8000de6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dea:	fa1f fe8c 	uxth.w	lr, ip
 8000dee:	2601      	movs	r6, #1
 8000df0:	0c20      	lsrs	r0, r4, #16
 8000df2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000df6:	fb07 1113 	mls	r1, r7, r3, r1
 8000dfa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfe:	fb0e f003 	mul.w	r0, lr, r3
 8000e02:	4288      	cmp	r0, r1
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x12c>
 8000e06:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0x12a>
 8000e10:	4288      	cmp	r0, r1
 8000e12:	f200 80cb 	bhi.w	8000fac <__udivmoddi4+0x2c0>
 8000e16:	4643      	mov	r3, r8
 8000e18:	1a09      	subs	r1, r1, r0
 8000e1a:	b2a4      	uxth	r4, r4
 8000e1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e20:	fb07 1110 	mls	r1, r7, r0, r1
 8000e24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e28:	fb0e fe00 	mul.w	lr, lr, r0
 8000e2c:	45a6      	cmp	lr, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x156>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x154>
 8000e3a:	45a6      	cmp	lr, r4
 8000e3c:	f200 80bb 	bhi.w	8000fb6 <__udivmoddi4+0x2ca>
 8000e40:	4608      	mov	r0, r1
 8000e42:	eba4 040e 	sub.w	r4, r4, lr
 8000e46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e4a:	e79c      	b.n	8000d86 <__udivmoddi4+0x9a>
 8000e4c:	f1c6 0720 	rsb	r7, r6, #32
 8000e50:	40b3      	lsls	r3, r6
 8000e52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000e5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e62:	431c      	orrs	r4, r3
 8000e64:	40f9      	lsrs	r1, r7
 8000e66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000e6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e72:	0c20      	lsrs	r0, r4, #16
 8000e74:	fa1f fe8c 	uxth.w	lr, ip
 8000e78:	fb09 1118 	mls	r1, r9, r8, r1
 8000e7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e80:	fb08 f00e 	mul.w	r0, r8, lr
 8000e84:	4288      	cmp	r0, r1
 8000e86:	fa02 f206 	lsl.w	r2, r2, r6
 8000e8a:	d90b      	bls.n	8000ea4 <__udivmoddi4+0x1b8>
 8000e8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e90:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e94:	f080 8088 	bcs.w	8000fa8 <__udivmoddi4+0x2bc>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f240 8085 	bls.w	8000fa8 <__udivmoddi4+0x2bc>
 8000e9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea2:	4461      	add	r1, ip
 8000ea4:	1a09      	subs	r1, r1, r0
 8000ea6:	b2a4      	uxth	r4, r4
 8000ea8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eac:	fb09 1110 	mls	r1, r9, r0, r1
 8000eb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb8:	458e      	cmp	lr, r1
 8000eba:	d908      	bls.n	8000ece <__udivmoddi4+0x1e2>
 8000ebc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ec4:	d26c      	bcs.n	8000fa0 <__udivmoddi4+0x2b4>
 8000ec6:	458e      	cmp	lr, r1
 8000ec8:	d96a      	bls.n	8000fa0 <__udivmoddi4+0x2b4>
 8000eca:	3802      	subs	r0, #2
 8000ecc:	4461      	add	r1, ip
 8000ece:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ed2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ed6:	eba1 010e 	sub.w	r1, r1, lr
 8000eda:	42a1      	cmp	r1, r4
 8000edc:	46c8      	mov	r8, r9
 8000ede:	46a6      	mov	lr, r4
 8000ee0:	d356      	bcc.n	8000f90 <__udivmoddi4+0x2a4>
 8000ee2:	d053      	beq.n	8000f8c <__udivmoddi4+0x2a0>
 8000ee4:	b15d      	cbz	r5, 8000efe <__udivmoddi4+0x212>
 8000ee6:	ebb3 0208 	subs.w	r2, r3, r8
 8000eea:	eb61 010e 	sbc.w	r1, r1, lr
 8000eee:	fa01 f707 	lsl.w	r7, r1, r7
 8000ef2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ef6:	40f1      	lsrs	r1, r6
 8000ef8:	431f      	orrs	r7, r3
 8000efa:	e9c5 7100 	strd	r7, r1, [r5]
 8000efe:	2600      	movs	r6, #0
 8000f00:	4631      	mov	r1, r6
 8000f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f06:	f1c2 0320 	rsb	r3, r2, #32
 8000f0a:	40d8      	lsrs	r0, r3
 8000f0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f10:	fa21 f303 	lsr.w	r3, r1, r3
 8000f14:	4091      	lsls	r1, r2
 8000f16:	4301      	orrs	r1, r0
 8000f18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f1c:	fa1f fe8c 	uxth.w	lr, ip
 8000f20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f24:	fb07 3610 	mls	r6, r7, r0, r3
 8000f28:	0c0b      	lsrs	r3, r1, #16
 8000f2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000f32:	429e      	cmp	r6, r3
 8000f34:	fa04 f402 	lsl.w	r4, r4, r2
 8000f38:	d908      	bls.n	8000f4c <__udivmoddi4+0x260>
 8000f3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f42:	d22f      	bcs.n	8000fa4 <__udivmoddi4+0x2b8>
 8000f44:	429e      	cmp	r6, r3
 8000f46:	d92d      	bls.n	8000fa4 <__udivmoddi4+0x2b8>
 8000f48:	3802      	subs	r0, #2
 8000f4a:	4463      	add	r3, ip
 8000f4c:	1b9b      	subs	r3, r3, r6
 8000f4e:	b289      	uxth	r1, r1
 8000f50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f54:	fb07 3316 	mls	r3, r7, r6, r3
 8000f58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000f60:	428b      	cmp	r3, r1
 8000f62:	d908      	bls.n	8000f76 <__udivmoddi4+0x28a>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f6c:	d216      	bcs.n	8000f9c <__udivmoddi4+0x2b0>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d914      	bls.n	8000f9c <__udivmoddi4+0x2b0>
 8000f72:	3e02      	subs	r6, #2
 8000f74:	4461      	add	r1, ip
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f7c:	e738      	b.n	8000df0 <__udivmoddi4+0x104>
 8000f7e:	462e      	mov	r6, r5
 8000f80:	4628      	mov	r0, r5
 8000f82:	e705      	b.n	8000d90 <__udivmoddi4+0xa4>
 8000f84:	4606      	mov	r6, r0
 8000f86:	e6e3      	b.n	8000d50 <__udivmoddi4+0x64>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6f8      	b.n	8000d7e <__udivmoddi4+0x92>
 8000f8c:	454b      	cmp	r3, r9
 8000f8e:	d2a9      	bcs.n	8000ee4 <__udivmoddi4+0x1f8>
 8000f90:	ebb9 0802 	subs.w	r8, r9, r2
 8000f94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f98:	3801      	subs	r0, #1
 8000f9a:	e7a3      	b.n	8000ee4 <__udivmoddi4+0x1f8>
 8000f9c:	4646      	mov	r6, r8
 8000f9e:	e7ea      	b.n	8000f76 <__udivmoddi4+0x28a>
 8000fa0:	4620      	mov	r0, r4
 8000fa2:	e794      	b.n	8000ece <__udivmoddi4+0x1e2>
 8000fa4:	4640      	mov	r0, r8
 8000fa6:	e7d1      	b.n	8000f4c <__udivmoddi4+0x260>
 8000fa8:	46d0      	mov	r8, sl
 8000faa:	e77b      	b.n	8000ea4 <__udivmoddi4+0x1b8>
 8000fac:	3b02      	subs	r3, #2
 8000fae:	4461      	add	r1, ip
 8000fb0:	e732      	b.n	8000e18 <__udivmoddi4+0x12c>
 8000fb2:	4630      	mov	r0, r6
 8000fb4:	e709      	b.n	8000dca <__udivmoddi4+0xde>
 8000fb6:	4464      	add	r4, ip
 8000fb8:	3802      	subs	r0, #2
 8000fba:	e742      	b.n	8000e42 <__udivmoddi4+0x156>
 8000fbc:	0000      	movs	r0, r0
	...

08000fc0 <UWB_pdoa>:
uint8_t pdoa_message_data[40]; // Will hold the data to send to the virtual COM
//static uint8_t rx_buffer[FRAME_LEN_MAX];
/**
 * Application entry point.
 */
int UWB_pdoa(void){
 8000fc0:	b5b0      	push	{r4, r5, r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af04      	add	r7, sp, #16

    uint32_t dev_id;
    uint16_t frame_len;

    unsigned char car_f = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	73fb      	strb	r3, [r7, #15]
    unsigned char tli_f = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	73bb      	strb	r3, [r7, #14]

    /* Sends application name to test_run_info function. */

    port_set_dw_ic_spi_fastrate();
 8000fce:	f000 fdb1 	bl	8001b34 <port_set_dw_ic_spi_fastrate>

    /* Reset DW IC */
    reset_DWIC(); /* Target specific drive of RSTn line into DW IC low for a period. */
 8000fd2:	f000 fd2f 	bl	8001a34 <reset_DWIC>

    Sleep(2); // Time needed for DW3000 to start up (transition from INIT_RC to IDLE_RC
 8000fd6:	2002      	movs	r0, #2
 8000fd8:	f000 fd00 	bl	80019dc <Sleep>

    /* Probe for the correct device driver. */
    dwt_probe((struct dwt_probe_s *)&dw3000_probe_interf);
 8000fdc:	4890      	ldr	r0, [pc, #576]	; (8001220 <UWB_pdoa+0x260>)
 8000fde:	f004 fa2d 	bl	800543c <dwt_probe>

    dev_id = dwt_readdevid();
 8000fe2:	f004 fa77 	bl	80054d4 <dwt_readdevid>
 8000fe6:	60b8      	str	r0, [r7, #8]


    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */ { };
 8000fe8:	bf00      	nop
 8000fea:	f004 fb7f 	bl	80056ec <dwt_checkidlerc>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d0fa      	beq.n	8000fea <UWB_pdoa+0x2a>

    if (dwt_initialise(DWT_DW_IDLE) == DWT_ERROR)
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f004 fa8d 	bl	8005514 <dwt_initialise>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001000:	d103      	bne.n	800100a <UWB_pdoa+0x4a>
    {
        test_run_info((unsigned char *)"INIT FAILED");
 8001002:	4888      	ldr	r0, [pc, #544]	; (8001224 <UWB_pdoa+0x264>)
 8001004:	f000 fe64 	bl	8001cd0 <test_run_info>
        while (1) { };
 8001008:	e7fe      	b.n	8001008 <UWB_pdoa+0x48>
    }

    /* Configure DW3000. */
    /* if the dwt_configure returns DWT_ERROR either the PLL or RX calibration has failed the host should reset the device */
    if (dwt_configure(&config_PDOA))
 800100a:	4887      	ldr	r0, [pc, #540]	; (8001228 <UWB_pdoa+0x268>)
 800100c:	f004 fa8e 	bl	800552c <dwt_configure>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <UWB_pdoa+0x5e>
    {
        test_run_info((unsigned char *)"CONFIG FAILED     ");
 8001016:	4885      	ldr	r0, [pc, #532]	; (800122c <UWB_pdoa+0x26c>)
 8001018:	f000 fe5a 	bl	8001cd0 <test_run_info>
        while (1) { };
 800101c:	e7fe      	b.n	800101c <UWB_pdoa+0x5c>
    }

    /* Register RX call-back. */
    dwt_setcallbacks(NULL, *rx_ok_cb, *rx_err_cb, *rx_err_cb, NULL, NULL, NULL);
 800101e:	2300      	movs	r3, #0
 8001020:	9302      	str	r3, [sp, #8]
 8001022:	2300      	movs	r3, #0
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	2300      	movs	r3, #0
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	4b81      	ldr	r3, [pc, #516]	; (8001230 <UWB_pdoa+0x270>)
 800102c:	4a80      	ldr	r2, [pc, #512]	; (8001230 <UWB_pdoa+0x270>)
 800102e:	4981      	ldr	r1, [pc, #516]	; (8001234 <UWB_pdoa+0x274>)
 8001030:	2000      	movs	r0, #0
 8001032:	f004 fb49 	bl	80056c8 <dwt_setcallbacks>

    /* Enable wanted interrupts (RX good frames and RX errors). */
    dwt_setinterrupt(DWT_INT_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_ERR, 0, DWT_ENABLE_INT);
 8001036:	2201      	movs	r2, #1
 8001038:	2100      	movs	r1, #0
 800103a:	487f      	ldr	r0, [pc, #508]	; (8001238 <UWB_pdoa+0x278>)
 800103c:	f004 fb74 	bl	8005728 <dwt_setinterrupt>

    /*Clearing the SPI ready interrupt*/
    dwt_writesysstatuslo(DWT_INT_RCINIT_BIT_MASK | DWT_INT_SPIRDY_BIT_MASK);
 8001040:	f04f 70c0 	mov.w	r0, #25165824	; 0x1800000
 8001044:	f004 fbe6 	bl	8005814 <dwt_writesysstatuslo>

    /* Install DW IC IRQ handler. */
    port_set_dwic_isr(dwt_isr);
 8001048:	487c      	ldr	r0, [pc, #496]	; (800123c <UWB_pdoa+0x27c>)
 800104a:	f000 fdc1 	bl	8001bd0 <port_set_dwic_isr>

    /* Activate reception immediately. See NOTE 1 below. */
    dwt_rxenable(DWT_START_RX_IMMEDIATE);
 800104e:	2000      	movs	r0, #0
 8001050:	f004 fb1c 	bl	800568c <dwt_rxenable>

    dwt_setleds(DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK);
 8001054:	2003      	movs	r0, #3
 8001056:	f004 fbcb 	bl	80057f0 <dwt_setleds>
    /*loop forever receiving frames*/

    while (!(tli_f && car_f)){
 800105a:	e0cb      	b.n	80011f4 <UWB_pdoa+0x234>

    	int goodSts = 0; /* Used for checking STS quality in received signal */
 800105c:	2300      	movs	r3, #0
 800105e:	607b      	str	r3, [r7, #4]
    	int16_t stsQual; /* This will contain STS quality index */

    	    // Checking STS quality and STS status. See note 4
    	if (((goodSts = dwt_readstsquality(&stsQual)) >= 0)){
 8001060:	463b      	mov	r3, r7
 8001062:	4618      	mov	r0, r3
 8001064:	f004 fbb6 	bl	80057d4 <dwt_readstsquality>
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	db05      	blt.n	800107c <UWB_pdoa+0xbc>
    	        pdoa_val = dwt_readpdoa();
 8001070:	f004 fad8 	bl	8005624 <dwt_readpdoa>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	4b71      	ldr	r3, [pc, #452]	; (8001240 <UWB_pdoa+0x280>)
 800107a:	801a      	strh	r2, [r3, #0]
    	    }

    	memset(rx_buffer2, 0, sizeof(rx_buffer2)); //meg_rx
 800107c:	227f      	movs	r2, #127	; 0x7f
 800107e:	2100      	movs	r1, #0
 8001080:	4870      	ldr	r0, [pc, #448]	; (8001244 <UWB_pdoa+0x284>)
 8001082:	f012 ff4f 	bl	8013f24 <memset>
    	dwt_rxenable(DWT_START_RX_IMMEDIATE);
 8001086:	2000      	movs	r0, #0
 8001088:	f004 fb00 	bl	800568c <dwt_rxenable>
    	frame_len = dwt_getframelength();
 800108c:	f004 fbf8 	bl	8005880 <dwt_getframelength>
 8001090:	4603      	mov	r3, r0
 8001092:	807b      	strh	r3, [r7, #2]

    	if (frame_len <= FRAME_LEN_MAX){
 8001094:	887b      	ldrh	r3, [r7, #2]
 8001096:	2b7f      	cmp	r3, #127	; 0x7f
 8001098:	d807      	bhi.n	80010aa <UWB_pdoa+0xea>

    		dwt_readrxdata(rx_buffer2, frame_len - FCS_LEN, 0); /* No need to read the FCS/CRC. */
 800109a:	887b      	ldrh	r3, [r7, #2]
 800109c:	3b02      	subs	r3, #2
 800109e:	b29b      	uxth	r3, r3
 80010a0:	2200      	movs	r2, #0
 80010a2:	4619      	mov	r1, r3
 80010a4:	4867      	ldr	r0, [pc, #412]	; (8001244 <UWB_pdoa+0x284>)
 80010a6:	f004 fb73 	bl	8005790 <dwt_readrxdata>
		}

		/* Clear good RX frame event in the DW IC status register. */
		dwt_writesysstatuslo(DWT_INT_RXFCG_BIT_MASK);
 80010aa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80010ae:	f004 fbb1 	bl	8005814 <dwt_writesysstatuslo>



        if ((last_pdoa_val != pdoa_val)&&(pdoa_val != 0)){
 80010b2:	4b65      	ldr	r3, [pc, #404]	; (8001248 <UWB_pdoa+0x288>)
 80010b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010b8:	4b61      	ldr	r3, [pc, #388]	; (8001240 <UWB_pdoa+0x280>)
 80010ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010be:	429a      	cmp	r2, r3
 80010c0:	f000 8098 	beq.w	80011f4 <UWB_pdoa+0x234>
 80010c4:	4b5e      	ldr	r3, [pc, #376]	; (8001240 <UWB_pdoa+0x280>)
 80010c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f000 8092 	beq.w	80011f4 <UWB_pdoa+0x234>

    		last_pdoa_val = pdoa_val;
 80010d0:	4b5b      	ldr	r3, [pc, #364]	; (8001240 <UWB_pdoa+0x280>)
 80010d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010d6:	4b5c      	ldr	r3, [pc, #368]	; (8001248 <UWB_pdoa+0x288>)
 80010d8:	801a      	strh	r2, [r3, #0]

    		pdoa_deg  = ((float)last_pdoa_val / (1 << 11)) * 180 / M_PI;
 80010da:	4b5b      	ldr	r3, [pc, #364]	; (8001248 <UWB_pdoa+0x288>)
 80010dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e0:	ee07 3a90 	vmov	s15, r3
 80010e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010e8:	eddf 6a58 	vldr	s13, [pc, #352]	; 800124c <UWB_pdoa+0x28c>
 80010ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010f0:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8001250 <UWB_pdoa+0x290>
 80010f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010f8:	ee17 0a90 	vmov	r0, s15
 80010fc:	f7ff fa5e 	bl	80005bc <__aeabi_f2d>
 8001100:	a343      	add	r3, pc, #268	; (adr r3, 8001210 <UWB_pdoa+0x250>)
 8001102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001106:	f7ff fbdb 	bl	80008c0 <__aeabi_ddiv>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4610      	mov	r0, r2
 8001110:	4619      	mov	r1, r3
 8001112:	f7ff fd83 	bl	8000c1c <__aeabi_d2f>
 8001116:	4603      	mov	r3, r0
 8001118:	4a4e      	ldr	r2, [pc, #312]	; (8001254 <UWB_pdoa+0x294>)
 800111a:	6013      	str	r3, [r2, #0]
    		pdoa_deg = fmod(pdoa_deg - pdoa_interval_shift + 540.0f, 360.0f) + pdoa_interval_shift - 180.0f;
 800111c:	4b4d      	ldr	r3, [pc, #308]	; (8001254 <UWB_pdoa+0x294>)
 800111e:	edd3 7a00 	vldr	s15, [r3]
 8001122:	eebb 7a06 	vmov.f32	s14, #182	; 0xc1b00000 -22.0
 8001126:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800112a:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001258 <UWB_pdoa+0x298>
 800112e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001132:	ee17 0a90 	vmov	r0, s15
 8001136:	f7ff fa41 	bl	80005bc <__aeabi_f2d>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	ed9f 1b36 	vldr	d1, [pc, #216]	; 8001218 <UWB_pdoa+0x258>
 8001142:	ec43 2b10 	vmov	d0, r2, r3
 8001146:	f014 fe49 	bl	8015ddc <fmod>
 800114a:	ec55 4b10 	vmov	r4, r5, d0
 800114e:	4b43      	ldr	r3, [pc, #268]	; (800125c <UWB_pdoa+0x29c>)
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fa33 	bl	80005bc <__aeabi_f2d>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4620      	mov	r0, r4
 800115c:	4629      	mov	r1, r5
 800115e:	f7ff f8cf 	bl	8000300 <__adddf3>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4610      	mov	r0, r2
 8001168:	4619      	mov	r1, r3
 800116a:	f04f 0200 	mov.w	r2, #0
 800116e:	4b3c      	ldr	r3, [pc, #240]	; (8001260 <UWB_pdoa+0x2a0>)
 8001170:	f7ff f8c4 	bl	80002fc <__aeabi_dsub>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4610      	mov	r0, r2
 800117a:	4619      	mov	r1, r3
 800117c:	f7ff fd4e 	bl	8000c1c <__aeabi_d2f>
 8001180:	4603      	mov	r3, r0
 8001182:	4a34      	ldr	r2, [pc, #208]	; (8001254 <UWB_pdoa+0x294>)
 8001184:	6013      	str	r3, [r2, #0]


            if (rx_buffer2[2] == 'T' && tli_f == 0){
 8001186:	4b2f      	ldr	r3, [pc, #188]	; (8001244 <UWB_pdoa+0x284>)
 8001188:	789b      	ldrb	r3, [r3, #2]
 800118a:	2b54      	cmp	r3, #84	; 0x54
 800118c:	d11a      	bne.n	80011c4 <UWB_pdoa+0x204>
 800118e:	7bbb      	ldrb	r3, [r7, #14]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d117      	bne.n	80011c4 <UWB_pdoa+0x204>
            	sprintf((char *)&data_rx.T_pdoa, "%d", (int)pdoa_deg);
 8001194:	4b2f      	ldr	r3, [pc, #188]	; (8001254 <UWB_pdoa+0x294>)
 8001196:	edd3 7a00 	vldr	s15, [r3]
 800119a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800119e:	ee17 2a90 	vmov	r2, s15
 80011a2:	4930      	ldr	r1, [pc, #192]	; (8001264 <UWB_pdoa+0x2a4>)
 80011a4:	4830      	ldr	r0, [pc, #192]	; (8001268 <UWB_pdoa+0x2a8>)
 80011a6:	f014 fb07 	bl	80157b8 <siprintf>
            	data_rx.T_data[0] = (unsigned char)rx_buffer2[9];
 80011aa:	4b26      	ldr	r3, [pc, #152]	; (8001244 <UWB_pdoa+0x284>)
 80011ac:	7a5a      	ldrb	r2, [r3, #9]
 80011ae:	4b2f      	ldr	r3, [pc, #188]	; (800126c <UWB_pdoa+0x2ac>)
 80011b0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
            	data_rx.T_time[0] = (unsigned char)rx_buffer2[8];
 80011b4:	4b23      	ldr	r3, [pc, #140]	; (8001244 <UWB_pdoa+0x284>)
 80011b6:	7a1a      	ldrb	r2, [r3, #8]
 80011b8:	4b2c      	ldr	r3, [pc, #176]	; (800126c <UWB_pdoa+0x2ac>)
 80011ba:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
            	tli_f = 1;
 80011be:	2301      	movs	r3, #1
 80011c0:	73bb      	strb	r3, [r7, #14]
 80011c2:	e017      	b.n	80011f4 <UWB_pdoa+0x234>

//            	test_run_info((unsigned char *)&rx_buffer2 + 9);
            }
            else if (rx_buffer2[2] == 'D' &&car_f == 0){
 80011c4:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <UWB_pdoa+0x284>)
 80011c6:	789b      	ldrb	r3, [r3, #2]
 80011c8:	2b44      	cmp	r3, #68	; 0x44
 80011ca:	d113      	bne.n	80011f4 <UWB_pdoa+0x234>
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d110      	bne.n	80011f4 <UWB_pdoa+0x234>
            	data_rx.C_pdoa_f = pdoa_deg;
 80011d2:	4b20      	ldr	r3, [pc, #128]	; (8001254 <UWB_pdoa+0x294>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a25      	ldr	r2, [pc, #148]	; (800126c <UWB_pdoa+0x2ac>)
 80011d8:	6153      	str	r3, [r2, #20]
            	sprintf((char *)&data_rx.C_pdoa, "%d", (int)pdoa_deg);
 80011da:	4b1e      	ldr	r3, [pc, #120]	; (8001254 <UWB_pdoa+0x294>)
 80011dc:	edd3 7a00 	vldr	s15, [r3]
 80011e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e4:	ee17 2a90 	vmov	r2, s15
 80011e8:	491e      	ldr	r1, [pc, #120]	; (8001264 <UWB_pdoa+0x2a4>)
 80011ea:	4821      	ldr	r0, [pc, #132]	; (8001270 <UWB_pdoa+0x2b0>)
 80011ec:	f014 fae4 	bl	80157b8 <siprintf>
            	car_f = 1;
 80011f0:	2301      	movs	r3, #1
 80011f2:	73fb      	strb	r3, [r7, #15]
    while (!(tli_f && car_f)){
 80011f4:	7bbb      	ldrb	r3, [r7, #14]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f43f af30 	beq.w	800105c <UWB_pdoa+0x9c>
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f43f af2c 	beq.w	800105c <UWB_pdoa+0x9c>
            }
        }
    }
    return DWT_SUCCESS;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bdb0      	pop	{r4, r5, r7, pc}
 800120e:	bf00      	nop
 8001210:	54442d18 	.word	0x54442d18
 8001214:	400921fb 	.word	0x400921fb
 8001218:	00000000 	.word	0x00000000
 800121c:	40768000 	.word	0x40768000
 8001220:	08015ff0 	.word	0x08015ff0
 8001224:	08015ee0 	.word	0x08015ee0
 8001228:	20000000 	.word	0x20000000
 800122c:	08015eec 	.word	0x08015eec
 8001230:	080012b1 	.word	0x080012b1
 8001234:	08001275 	.word	0x08001275
 8001238:	3405d000 	.word	0x3405d000
 800123c:	08005715 	.word	0x08005715
 8001240:	2000000e 	.word	0x2000000e
 8001244:	20000288 	.word	0x20000288
 8001248:	20000308 	.word	0x20000308
 800124c:	45000000 	.word	0x45000000
 8001250:	43340000 	.word	0x43340000
 8001254:	20000284 	.word	0x20000284
 8001258:	44070000 	.word	0x44070000
 800125c:	c1b00000 	.word	0xc1b00000
 8001260:	40668000 	.word	0x40668000
 8001264:	08015f00 	.word	0x08015f00
 8001268:	20000277 	.word	0x20000277
 800126c:	2000024c 	.word	0x2000024c
 8001270:	20000258 	.word	0x20000258

08001274 <rx_ok_cb>:
 *
 * @param  cb_data  callback data
 *
 * @return  none
 */
static void rx_ok_cb(const dwt_cb_data_t *cb_data){
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]


    int goodSts = 0; /* Used for checking STS quality in received signal */
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
    int16_t stsQual; /* This will contain STS quality index */

    (void)cb_data;
    // Checking STS quality and STS status. See note 4
    if (((goodSts = dwt_readstsquality(&stsQual)) >= 0))
 8001280:	f107 030a 	add.w	r3, r7, #10
 8001284:	4618      	mov	r0, r3
 8001286:	f004 faa5 	bl	80057d4 <dwt_readstsquality>
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2b00      	cmp	r3, #0
 8001290:	db05      	blt.n	800129e <rx_ok_cb+0x2a>
    {
        pdoa_val = dwt_readpdoa();
 8001292:	f004 f9c7 	bl	8005624 <dwt_readpdoa>
 8001296:	4603      	mov	r3, r0
 8001298:	461a      	mov	r2, r3
 800129a:	4b04      	ldr	r3, [pc, #16]	; (80012ac <rx_ok_cb+0x38>)
 800129c:	801a      	strh	r2, [r3, #0]
    }

    dwt_rxenable(DWT_START_RX_IMMEDIATE);
 800129e:	2000      	movs	r0, #0
 80012a0:	f004 f9f4 	bl	800568c <dwt_rxenable>
}
 80012a4:	bf00      	nop
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	2000000e 	.word	0x2000000e

080012b0 <rx_err_cb>:
 * @param  cb_data  callback data
 *
 * @return  none
 */
static void rx_err_cb(const dwt_cb_data_t *cb_data)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
    (void)cb_data;
    dwt_rxenable(DWT_START_RX_IMMEDIATE);
 80012b8:	2000      	movs	r0, #0
 80012ba:	f004 f9e7 	bl	800568c <dwt_rxenable>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <ss_twr_initiator_RX>:
 *
 * @param  none
 *
 * @return none
 */
int ss_twr_initiator_RX(uint8_t *data, float *dist_data){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	; 0x28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]


    /* Configure SPI rate, DW3000 supports up to 36 MHz */
    port_set_dw_ic_spi_fastrate();
 80012d2:	f000 fc2f 	bl	8001b34 <port_set_dw_ic_spi_fastrate>

    /* Reset and initialize DW chip. */
    reset_DWIC(); /* Target specific drive of RSTn line into DW3000 low for a period. */
 80012d6:	f000 fbad 	bl	8001a34 <reset_DWIC>

    Sleep(2); // Time needed for DW3000 to start up (transition from INIT_RC to IDLE_RC, or could wait for SPIRDY event)
 80012da:	2002      	movs	r0, #2
 80012dc:	f000 fb7e 	bl	80019dc <Sleep>

    /* Probe for the correct device driver. */
    dwt_probe((struct dwt_probe_s *)&dw3000_probe_interf);
 80012e0:	487f      	ldr	r0, [pc, #508]	; (80014e0 <ss_twr_initiator_RX+0x218>)
 80012e2:	f004 f8ab 	bl	800543c <dwt_probe>

    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */ { };
 80012e6:	bf00      	nop
 80012e8:	f004 fa00 	bl	80056ec <dwt_checkidlerc>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0fa      	beq.n	80012e8 <ss_twr_initiator_RX+0x20>
    if (dwt_initialise(DWT_DW_INIT) == DWT_ERROR)
 80012f2:	2000      	movs	r0, #0
 80012f4:	f004 f90e 	bl	8005514 <dwt_initialise>
 80012f8:	4603      	mov	r3, r0
 80012fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012fe:	d103      	bne.n	8001308 <ss_twr_initiator_RX+0x40>
    {
        test_run_info((unsigned char *)"INIT FAILED     ");
 8001300:	4878      	ldr	r0, [pc, #480]	; (80014e4 <ss_twr_initiator_RX+0x21c>)
 8001302:	f000 fce5 	bl	8001cd0 <test_run_info>
        while (1) { };
 8001306:	e7fe      	b.n	8001306 <ss_twr_initiator_RX+0x3e>
    }

    /* Enabling LEDs here for debug so that for each TX the D1 LED will flash on DW3000 red eval-shield boards. */
    dwt_setleds(DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK);
 8001308:	2003      	movs	r0, #3
 800130a:	f004 fa71 	bl	80057f0 <dwt_setleds>

    /* Configure DW IC. See NOTE 13 below. */
    /* if the dwt_configure returns DWT_ERROR either the PLL or RX calibration has failed the host should reset the device */
    if (dwt_configure(&config))
 800130e:	4876      	ldr	r0, [pc, #472]	; (80014e8 <ss_twr_initiator_RX+0x220>)
 8001310:	f004 f90c 	bl	800552c <dwt_configure>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <ss_twr_initiator_RX+0x5a>
    {
        test_run_info((unsigned char *)"CONFIG FAILED     ");
 800131a:	4874      	ldr	r0, [pc, #464]	; (80014ec <ss_twr_initiator_RX+0x224>)
 800131c:	f000 fcd8 	bl	8001cd0 <test_run_info>
        while (1) { };
 8001320:	e7fe      	b.n	8001320 <ss_twr_initiator_RX+0x58>
    }

    /* Configure the TX spectrum parameters (power, PG delay and PG count) */
    dwt_configuretxrf(&txconfig_options);
 8001322:	4873      	ldr	r0, [pc, #460]	; (80014f0 <ss_twr_initiator_RX+0x228>)
 8001324:	f004 f90e 	bl	8005544 <dwt_configuretxrf>

    /* Apply default antenna delay value. See NOTE 2 below. */
    dwt_setrxantennadelay(RX_ANT_DLY);
 8001328:	f244 0001 	movw	r0, #16385	; 0x4001
 800132c:	f004 f916 	bl	800555c <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
 8001330:	f244 0001 	movw	r0, #16385	; 0x4001
 8001334:	f004 f924 	bl	8005580 <dwt_settxantennadelay>

    /* Set expected response's delay and timeout. See NOTE 1 and 5 below.
     * As this example only handles one incoming frame with always the same delay and timeout, those values can be set here once for all. */
    dwt_setrxaftertxdelay(POLL_TX_TO_RESP_RX_DLY_UUS);
 8001338:	20f0      	movs	r0, #240	; 0xf0
 800133a:	f004 fa17 	bl	800576c <dwt_setrxaftertxdelay>
    dwt_setrxtimeout(RESP_RX_TIMEOUT_UUS);
 800133e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001342:	f004 f9af 	bl	80056a4 <dwt_setrxtimeout>

    /* Next can enable TX/RX states output on GPIOs 5 and 6 to help debug, and also TX/RX LEDs
     * Note, in real low power applications the LEDs should not be used. */
    dwt_setlnapamode(DWT_LNA_ENABLE | DWT_PA_ENABLE);
 8001346:	2003      	movs	r0, #3
 8001348:	f004 f8d6 	bl	80054f8 <dwt_setlnapamode>

    /* Loop forever initiating ranging exchanges. */
    while (1)
    {
        /* Write frame data to DW IC and prepare transmission. See NOTE 7 below. */
        tx_poll_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 800134c:	4b69      	ldr	r3, [pc, #420]	; (80014f4 <ss_twr_initiator_RX+0x22c>)
 800134e:	781a      	ldrb	r2, [r3, #0]
 8001350:	4b69      	ldr	r3, [pc, #420]	; (80014f8 <ss_twr_initiator_RX+0x230>)
 8001352:	709a      	strb	r2, [r3, #2]
        dwt_writesysstatuslo(DWT_INT_TXFRS_BIT_MASK);
 8001354:	2080      	movs	r0, #128	; 0x80
 8001356:	f004 fa5d 	bl	8005814 <dwt_writesysstatuslo>
        dwt_writetxdata(sizeof(tx_poll_msg), tx_poll_msg, 0); /* Zero offset in TX buffer. */
 800135a:	2200      	movs	r2, #0
 800135c:	4966      	ldr	r1, [pc, #408]	; (80014f8 <ss_twr_initiator_RX+0x230>)
 800135e:	200c      	movs	r0, #12
 8001360:	f004 f920 	bl	80055a4 <dwt_writetxdata>
        dwt_writetxfctrl(sizeof(tx_poll_msg), 0, 1);          /* Zero offset in TX buffer, ranging. */
 8001364:	2201      	movs	r2, #1
 8001366:	2100      	movs	r1, #0
 8001368:	200c      	movs	r0, #12
 800136a:	f004 f929 	bl	80055c0 <dwt_writetxfctrl>

        /* Start transmission, indicating that a response is expected so that reception is enabled automatically after the frame is sent and the delay
         * set by dwt_setrxaftertxdelay() has elapsed. */
        dwt_starttx(DWT_START_TX_IMMEDIATE | DWT_RESPONSE_EXPECTED);
 800136e:	2002      	movs	r0, #2
 8001370:	f004 f934 	bl	80055dc <dwt_starttx>

        /* We assume that the transmission is achieved correctly, poll for reception of a frame or error/timeout. See NOTE 8 below. */
        waitforsysstatus(&status_reg, NULL, (DWT_INT_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR), 0);
 8001374:	2300      	movs	r3, #0
 8001376:	4a61      	ldr	r2, [pc, #388]	; (80014fc <ss_twr_initiator_RX+0x234>)
 8001378:	2100      	movs	r1, #0
 800137a:	4861      	ldr	r0, [pc, #388]	; (8001500 <ss_twr_initiator_RX+0x238>)
 800137c:	f000 fc66 	bl	8001c4c <waitforsysstatus>

        /* Increment frame sequence number after transmission of the poll message (modulo 256). */
        frame_seq_nb++;
 8001380:	4b5c      	ldr	r3, [pc, #368]	; (80014f4 <ss_twr_initiator_RX+0x22c>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	3301      	adds	r3, #1
 8001386:	b2da      	uxtb	r2, r3
 8001388:	4b5a      	ldr	r3, [pc, #360]	; (80014f4 <ss_twr_initiator_RX+0x22c>)
 800138a:	701a      	strb	r2, [r3, #0]

        if (status_reg & DWT_INT_RXFCG_BIT_MASK)
 800138c:	4b5c      	ldr	r3, [pc, #368]	; (8001500 <ss_twr_initiator_RX+0x238>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 8090 	beq.w	80014ba <ss_twr_initiator_RX+0x1f2>
        {
            uint16_t frame_len;

            /* Clear good RX frame event in the DW IC status register. */
            dwt_writesysstatuslo(DWT_INT_RXFCG_BIT_MASK);
 800139a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800139e:	f004 fa39 	bl	8005814 <dwt_writesysstatuslo>

            /* A frame has been received, read it into the local buffer. */
            frame_len = dwt_getframelength();
 80013a2:	f004 fa6d 	bl	8005880 <dwt_getframelength>
 80013a6:	4603      	mov	r3, r0
 80013a8:	84fb      	strh	r3, [r7, #38]	; 0x26
            if (frame_len <= sizeof(rx_buffer))
 80013aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013ac:	2b14      	cmp	r3, #20
 80013ae:	f200 8087 	bhi.w	80014c0 <ss_twr_initiator_RX+0x1f8>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 80013b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013b4:	2200      	movs	r2, #0
 80013b6:	4619      	mov	r1, r3
 80013b8:	4852      	ldr	r0, [pc, #328]	; (8001504 <ss_twr_initiator_RX+0x23c>)
 80013ba:	f004 f9e9 	bl	8005790 <dwt_readrxdata>

                /* Check that the frame is the expected response from the companion "SS TWR responder" example.
                 * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
                rx_buffer[ALL_MSG_SN_IDX] = 0;
 80013be:	4b51      	ldr	r3, [pc, #324]	; (8001504 <ss_twr_initiator_RX+0x23c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	709a      	strb	r2, [r3, #2]
                if (memcmp(rx_buffer, rx_resp_msg, ALL_MSG_COMMON_LEN) == 0)
 80013c4:	220a      	movs	r2, #10
 80013c6:	4950      	ldr	r1, [pc, #320]	; (8001508 <ss_twr_initiator_RX+0x240>)
 80013c8:	484e      	ldr	r0, [pc, #312]	; (8001504 <ss_twr_initiator_RX+0x23c>)
 80013ca:	f012 fd73 	bl	8013eb4 <memcmp>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d175      	bne.n	80014c0 <ss_twr_initiator_RX+0x1f8>
                    uint32_t poll_tx_ts, resp_rx_ts, poll_rx_ts, resp_tx_ts;
                    int32_t rtd_init, rtd_resp;
                    float clockOffsetRatio;

                    /* Retrieve poll transmission and response reception timestamps. See NOTE 9 below. */
                    poll_tx_ts = dwt_readtxtimestamplo32();
 80013d4:	f004 f914 	bl	8005600 <dwt_readtxtimestamplo32>
 80013d8:	6238      	str	r0, [r7, #32]
                    resp_rx_ts = dwt_readrxtimestamplo32();
 80013da:	f004 f937 	bl	800564c <dwt_readrxtimestamplo32>
 80013de:	61f8      	str	r0, [r7, #28]

                    /* Read carrier integrator value and calculate clock offset ratio. See NOTE 11 below. */
                    clockOffsetRatio = ((float)dwt_readclockoffset()) / (uint32_t)(1 << 26);
 80013e0:	f004 f9e4 	bl	80057ac <dwt_readclockoffset>
 80013e4:	4603      	mov	r3, r0
 80013e6:	ee07 3a90 	vmov	s15, r3
 80013ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ee:	eddf 6a47 	vldr	s13, [pc, #284]	; 800150c <ss_twr_initiator_RX+0x244>
 80013f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013f6:	edc7 7a06 	vstr	s15, [r7, #24]

                    /* Get timestamps embedded in response message. */
                    resp_msg_get_ts(&rx_buffer[RESP_MSG_POLL_RX_TS_IDX], &poll_rx_ts);
 80013fa:	f107 030c 	add.w	r3, r7, #12
 80013fe:	4619      	mov	r1, r3
 8001400:	4843      	ldr	r0, [pc, #268]	; (8001510 <ss_twr_initiator_RX+0x248>)
 8001402:	f000 fbfd 	bl	8001c00 <resp_msg_get_ts>
                    resp_msg_get_ts(&rx_buffer[RESP_MSG_RESP_TX_TS_IDX], &resp_tx_ts);
 8001406:	f107 0308 	add.w	r3, r7, #8
 800140a:	4619      	mov	r1, r3
 800140c:	4841      	ldr	r0, [pc, #260]	; (8001514 <ss_twr_initiator_RX+0x24c>)
 800140e:	f000 fbf7 	bl	8001c00 <resp_msg_get_ts>

                    /* Compute time of flight and distance, using clock offset ratio to correct for differing local and remote clock rates */
                    rtd_init = resp_rx_ts - poll_tx_ts;
 8001412:	69fa      	ldr	r2, [r7, #28]
 8001414:	6a3b      	ldr	r3, [r7, #32]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	617b      	str	r3, [r7, #20]
                    rtd_resp = resp_tx_ts - poll_rx_ts;
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	613b      	str	r3, [r7, #16]

                    tof = ((rtd_init - rtd_resp * (1 - clockOffsetRatio)) / 2.0) * DWT_TIME_UNITS;
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	ee07 3a90 	vmov	s15, r3
 8001428:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	ee07 3a90 	vmov	s15, r3
 8001432:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001436:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800143a:	edd7 7a06 	vldr	s15, [r7, #24]
 800143e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001442:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001446:	ee77 7a67 	vsub.f32	s15, s14, s15
 800144a:	ee17 0a90 	vmov	r0, s15
 800144e:	f7ff f8b5 	bl	80005bc <__aeabi_f2d>
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800145a:	f7ff fa31 	bl	80008c0 <__aeabi_ddiv>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	a31a      	add	r3, pc, #104	; (adr r3, 80014d0 <ss_twr_initiator_RX+0x208>)
 8001468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146c:	f7ff f8fe 	bl	800066c <__aeabi_dmul>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4928      	ldr	r1, [pc, #160]	; (8001518 <ss_twr_initiator_RX+0x250>)
 8001476:	e9c1 2300 	strd	r2, r3, [r1]
                    distance = tof * SPEED_OF_LIGHT;
 800147a:	4b27      	ldr	r3, [pc, #156]	; (8001518 <ss_twr_initiator_RX+0x250>)
 800147c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001480:	a315      	add	r3, pc, #84	; (adr r3, 80014d8 <ss_twr_initiator_RX+0x210>)
 8001482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001486:	f7ff f8f1 	bl	800066c <__aeabi_dmul>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	4923      	ldr	r1, [pc, #140]	; (800151c <ss_twr_initiator_RX+0x254>)
 8001490:	e9c1 2300 	strd	r2, r3, [r1]
                    /* Display computed distance on LCD. */
                    //snprintf(dist_str, sizeof(dist_str), "DIST: %3.2f m", distance);

                    *dist_data = distance;
 8001494:	4b21      	ldr	r3, [pc, #132]	; (800151c <ss_twr_initiator_RX+0x254>)
 8001496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149a:	4610      	mov	r0, r2
 800149c:	4619      	mov	r1, r3
 800149e:	f7ff fbbd 	bl	8000c1c <__aeabi_d2f>
 80014a2:	4602      	mov	r2, r0
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	601a      	str	r2, [r3, #0]
                    sprintf((char *)data, "%3.2f",distance);
 80014a8:	4b1c      	ldr	r3, [pc, #112]	; (800151c <ss_twr_initiator_RX+0x254>)
 80014aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ae:	491c      	ldr	r1, [pc, #112]	; (8001520 <ss_twr_initiator_RX+0x258>)
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f014 f981 	bl	80157b8 <siprintf>

                    return 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e006      	b.n	80014c8 <ss_twr_initiator_RX+0x200>
            }
        }
        else
        {
            /* Clear RX error/timeout events in the DW IC status register. */
            dwt_writesysstatuslo(SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 80014ba:	481a      	ldr	r0, [pc, #104]	; (8001524 <ss_twr_initiator_RX+0x25c>)
 80014bc:	f004 f9aa 	bl	8005814 <dwt_writesysstatuslo>
        }

        /* Execute a delay between ranging exchanges. */
        Sleep(RNG_DELAY_MS);
 80014c0:	2064      	movs	r0, #100	; 0x64
 80014c2:	f000 fa8b 	bl	80019dc <Sleep>
        tx_poll_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 80014c6:	e741      	b.n	800134c <ss_twr_initiator_RX+0x84>
    }
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3728      	adds	r7, #40	; 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	3bce48fa 	.word	0x3bce48fa
 80014d4:	3db13518 	.word	0x3db13518
 80014d8:	13000000 	.word	0x13000000
 80014dc:	41b1dd19 	.word	0x41b1dd19
 80014e0:	08015ff0 	.word	0x08015ff0
 80014e4:	08015f04 	.word	0x08015f04
 80014e8:	20000010 	.word	0x20000010
 80014ec:	08015f18 	.word	0x08015f18
 80014f0:	20000040 	.word	0x20000040
 80014f4:	2000030a 	.word	0x2000030a
 80014f8:	20000020 	.word	0x20000020
 80014fc:	3427d000 	.word	0x3427d000
 8001500:	20000320 	.word	0x20000320
 8001504:	2000030c 	.word	0x2000030c
 8001508:	2000002c 	.word	0x2000002c
 800150c:	4c800000 	.word	0x4c800000
 8001510:	20000316 	.word	0x20000316
 8001514:	2000031a 	.word	0x2000031a
 8001518:	20000328 	.word	0x20000328
 800151c:	20000330 	.word	0x20000330
 8001520:	08015f2c 	.word	0x08015f2c
 8001524:	34279000 	.word	0x34279000

08001528 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
    decaIrqStatus_t s = port_GetEXT_IRQStatus();
 800152e:	f000 fb35 	bl	8001b9c <port_GetEXT_IRQStatus>
 8001532:	4603      	mov	r3, r0
 8001534:	607b      	str	r3, [r7, #4]

    if (s)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <decamutexon+0x18>
    {
        port_DisableEXT_IRQ(); // disable the external interrupt line
 800153c:	f000 fb0a 	bl	8001b54 <port_DisableEXT_IRQ>
    }
    return s; // return state before disable, value is used to re-enable in decamutexoff call
 8001540:	687b      	ldr	r3, [r7, #4]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s) // put a function here that re-enables the interrupt at the end of the critical section
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
    if (s)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <decamutexoff+0x12>
    { // need to check the port state as we can't use level sensitive interrupt on the STM ARM
        port_EnableEXT_IRQ();
 8001558:	f000 fb0e 	bl	8001b78 <port_EnableEXT_IRQ>
    }
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <deca_sleep>:
#include <deca_device_api.h>
#include <port.h>

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_sleep(unsigned int time_ms)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
    Sleep(time_ms);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 fa35 	bl	80019dc <Sleep>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <deca_usleep>:

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_usleep(unsigned long time_us)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
    usleep(time_us);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f000 fa0e 	bl	80019a4 <usleep>
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <writetospiwithcrc>:
 * Low level abstract function to write to the SPI when SPI CRC mode is used
 * Takes two separate byte buffers for write header and write data, and a CRC8 byte which is written last
 * returns 0 for success, or -1 for error
 */
int writetospiwithcrc(uint16_t headerLength, const uint8_t *headerBuffer, uint16_t bodyLength, const uint8_t *bodyBuffer, uint8_t crc8)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60b9      	str	r1, [r7, #8]
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	4603      	mov	r3, r0
 800159c:	81fb      	strh	r3, [r7, #14]
 800159e:	4613      	mov	r3, r2
 80015a0:	81bb      	strh	r3, [r7, #12]
#ifdef DWT_ENABLE_CRC
    decaIrqStatus_t stat;
    stat = decamutexon();
 80015a2:	f7ff ffc1 	bl	8001528 <decamutexon>
 80015a6:	6178      	str	r0, [r7, #20]
    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 80015a8:	bf00      	nop
 80015aa:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <writetospiwithcrc+0x90>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f002 f9f5 	bl	800399e <HAL_SPI_GetState>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d1f7      	bne.n	80015aa <writetospiwithcrc+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, SPI_CS_state); /**< Put chip select line low */
 80015ba:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <writetospiwithcrc+0x94>)
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	4a1a      	ldr	r2, [pc, #104]	; (8001628 <writetospiwithcrc+0x98>)
 80015c0:	7812      	ldrb	r2, [r2, #0]
 80015c2:	4619      	mov	r1, r3
 80015c4:	4819      	ldr	r0, [pc, #100]	; (800162c <writetospiwithcrc+0x9c>)
 80015c6:	f001 fbb3 	bl	8002d30 <HAL_GPIO_WritePin>


    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)headerBuffer, headerLength, 10);    /* Send header in polling mode */
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <writetospiwithcrc+0x90>)
 80015cc:	6818      	ldr	r0, [r3, #0]
 80015ce:	89fa      	ldrh	r2, [r7, #14]
 80015d0:	230a      	movs	r3, #10
 80015d2:	68b9      	ldr	r1, [r7, #8]
 80015d4:	f002 f8a7 	bl	8003726 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)bodyBuffer, bodyLength, 10);        /* Send data in polling mode */
 80015d8:	4b11      	ldr	r3, [pc, #68]	; (8001620 <writetospiwithcrc+0x90>)
 80015da:	6818      	ldr	r0, [r3, #0]
 80015dc:	89ba      	ldrh	r2, [r7, #12]
 80015de:	230a      	movs	r3, #10
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	f002 f8a0 	bl	8003726 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)&crc8, 1, 10);      /* Send data in polling mode */
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <writetospiwithcrc+0x90>)
 80015e8:	6818      	ldr	r0, [r3, #0]
 80015ea:	230a      	movs	r3, #10
 80015ec:	2201      	movs	r2, #1
 80015ee:	f107 0120 	add.w	r1, r7, #32
 80015f2:	f002 f898 	bl	8003726 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi,(GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 80015f6:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <writetospiwithcrc+0x94>)
 80015f8:	8819      	ldrh	r1, [r3, #0]
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <writetospiwithcrc+0x98>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	bf0c      	ite	eq
 8001602:	2301      	moveq	r3, #1
 8001604:	2300      	movne	r3, #0
 8001606:	b2db      	uxtb	r3, r3
 8001608:	461a      	mov	r2, r3
 800160a:	4808      	ldr	r0, [pc, #32]	; (800162c <writetospiwithcrc+0x9c>)
 800160c:	f001 fb90 	bl	8002d30 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8001610:	6978      	ldr	r0, [r7, #20]
 8001612:	f7ff ff9a 	bl	800154a <decamutexoff>
#endif //DWT_ENABLE_CRC
    return 0;
 8001616:	2300      	movs	r3, #0
} // end writetospiwithcrc()
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000048 	.word	0x20000048
 8001624:	2000004c 	.word	0x2000004c
 8001628:	20000420 	.word	0x20000420
 800162c:	40020000 	.word	0x40020000

08001630 <writetospi>:
 * Low level abstract function to write to the SPI
 * Takes two separate byte buffers for write header and write data
 * returns 0 for success, or -1 for error
 */
int writetospi(uint16_t headerLength, const uint8_t *headerBuffer, uint16_t bodyLength, const uint8_t *bodyBuffer)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	4603      	mov	r3, r0
 800163c:	81fb      	strh	r3, [r7, #14]
 800163e:	4613      	mov	r3, r2
 8001640:	81bb      	strh	r3, [r7, #12]
    decaIrqStatus_t stat;
    stat = decamutexon();
 8001642:	f7ff ff71 	bl	8001528 <decamutexon>
 8001646:	6178      	str	r0, [r7, #20]

    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 8001648:	bf00      	nop
 800164a:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <writetospi+0x8c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f002 f9a5 	bl	800399e <HAL_SPI_GetState>
 8001654:	4603      	mov	r3, r0
 8001656:	2b01      	cmp	r3, #1
 8001658:	d1f7      	bne.n	800164a <writetospi+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, SPI_CS_state); /**< Put chip select line low */
 800165a:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <writetospi+0x90>)
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	4a19      	ldr	r2, [pc, #100]	; (80016c4 <writetospi+0x94>)
 8001660:	7812      	ldrb	r2, [r2, #0]
 8001662:	4619      	mov	r1, r3
 8001664:	4818      	ldr	r0, [pc, #96]	; (80016c8 <writetospi+0x98>)
 8001666:	f001 fb63 	bl	8002d30 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)headerBuffer, headerLength, HAL_MAX_DELAY); /* Send header in polling mode */
 800166a:	4b14      	ldr	r3, [pc, #80]	; (80016bc <writetospi+0x8c>)
 800166c:	6818      	ldr	r0, [r3, #0]
 800166e:	89fa      	ldrh	r2, [r7, #14]
 8001670:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	f002 f856 	bl	8003726 <HAL_SPI_Transmit>

    if(bodyLength != 0)
 800167a:	89bb      	ldrh	r3, [r7, #12]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d007      	beq.n	8001690 <writetospi+0x60>
    {
        HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)bodyBuffer,   bodyLength, HAL_MAX_DELAY);     /* Send data in polling mode */
 8001680:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <writetospi+0x8c>)
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	89ba      	ldrh	r2, [r7, #12]
 8001686:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	f002 f84b 	bl	8003726 <HAL_SPI_Transmit>
    }

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, (GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <writetospi+0x90>)
 8001692:	8819      	ldrh	r1, [r3, #0]
 8001694:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <writetospi+0x94>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	bf0c      	ite	eq
 800169c:	2301      	moveq	r3, #1
 800169e:	2300      	movne	r3, #0
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	461a      	mov	r2, r3
 80016a4:	4808      	ldr	r0, [pc, #32]	; (80016c8 <writetospi+0x98>)
 80016a6:	f001 fb43 	bl	8002d30 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80016aa:	6978      	ldr	r0, [r7, #20]
 80016ac:	f7ff ff4d 	bl	800154a <decamutexoff>

    return 0;
 80016b0:	2300      	movs	r3, #0
} // end writetospi()
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000048 	.word	0x20000048
 80016c0:	2000004c 	.word	0x2000004c
 80016c4:	20000420 	.word	0x20000420
 80016c8:	40020000 	.word	0x40020000

080016cc <readfromspi>:
 * returns the offset into read buffer where first byte of read data may be found,
 * or returns -1 if there was an error
 */
//#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength, uint8_t *headerBuffer, uint16_t readlength, uint8_t *readBuffer)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	4603      	mov	r3, r0
 80016d8:	81fb      	strh	r3, [r7, #14]
 80016da:	4613      	mov	r3, r2
 80016dc:	81bb      	strh	r3, [r7, #12]

    decaIrqStatus_t stat;
    stat = decamutexon();
 80016de:	f7ff ff23 	bl	8001528 <decamutexon>
 80016e2:	6178      	str	r0, [r7, #20]

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 80016e4:	bf00      	nop
 80016e6:	4b2e      	ldr	r3, [pc, #184]	; (80017a0 <readfromspi+0xd4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f002 f957 	bl	800399e <HAL_SPI_GetState>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d1f7      	bne.n	80016e6 <readfromspi+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, SPI_CS_state); /**< Put chip select line low */
 80016f6:	4b2b      	ldr	r3, [pc, #172]	; (80017a4 <readfromspi+0xd8>)
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	4a2b      	ldr	r2, [pc, #172]	; (80017a8 <readfromspi+0xdc>)
 80016fc:	7812      	ldrb	r2, [r2, #0]
 80016fe:	4619      	mov	r1, r3
 8001700:	482a      	ldr	r0, [pc, #168]	; (80017ac <readfromspi+0xe0>)
 8001702:	f001 fb15 	bl	8002d30 <HAL_GPIO_WritePin>

    /* Send header */
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t*)headerBuffer, headerLength, HAL_MAX_DELAY); //No timeout
 8001706:	4b26      	ldr	r3, [pc, #152]	; (80017a0 <readfromspi+0xd4>)
 8001708:	6818      	ldr	r0, [r3, #0]
 800170a:	89fa      	ldrh	r2, [r7, #14]
 800170c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001710:	68b9      	ldr	r1, [r7, #8]
 8001712:	f002 f808 	bl	8003726 <HAL_SPI_Transmit>

    while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_TXE) == RESET)//Verify that the transmit was ended
 8001716:	bf00      	nop
 8001718:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <readfromspi+0xd4>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b02      	cmp	r3, #2
 8001726:	d1f7      	bne.n	8001718 <readfromspi+0x4c>
    {
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while (readlength-- > 0)
 8001728:	e01f      	b.n	800176a <readfromspi+0x9e>
    {
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_TXE) == RESET)
 800172a:	bf00      	nop
 800172c:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <readfromspi+0xd4>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b02      	cmp	r3, #2
 800173a:	d1f7      	bne.n	800172c <readfromspi+0x60>
        {
        }

        hcurrent_active_spi->Instance->DR=0;
 800173c:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <readfromspi+0xd4>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2200      	movs	r2, #0
 8001744:	60da      	str	r2, [r3, #12]
        /* set output to 0 (MOSI), this is necessary for
        e.g. when waking up DW3000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_RXNE) == RESET)
 8001746:	bf00      	nop
 8001748:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <readfromspi+0xd4>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	2b01      	cmp	r3, #1
 8001756:	d1f7      	bne.n	8001748 <readfromspi+0x7c>
        {
        }

        (*readBuffer++) = hcurrent_active_spi->Instance->DR;  //copy data read form (MISO)
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <readfromspi+0xd4>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68d9      	ldr	r1, [r3, #12]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	1c5a      	adds	r2, r3, #1
 8001764:	607a      	str	r2, [r7, #4]
 8001766:	b2ca      	uxtb	r2, r1
 8001768:	701a      	strb	r2, [r3, #0]
    while (readlength-- > 0)
 800176a:	89bb      	ldrh	r3, [r7, #12]
 800176c:	1e5a      	subs	r2, r3, #1
 800176e:	81ba      	strh	r2, [r7, #12]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1da      	bne.n	800172a <readfromspi+0x5e>
    }


    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, (GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <readfromspi+0xd8>)
 8001776:	8819      	ldrh	r1, [r3, #0]
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <readfromspi+0xdc>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	bf0c      	ite	eq
 8001780:	2301      	moveq	r3, #1
 8001782:	2300      	movne	r3, #0
 8001784:	b2db      	uxtb	r3, r3
 8001786:	461a      	mov	r2, r3
 8001788:	4808      	ldr	r0, [pc, #32]	; (80017ac <readfromspi+0xe0>)
 800178a:	f001 fad1 	bl	8002d30 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 800178e:	6978      	ldr	r0, [r7, #20]
 8001790:	f7ff fedb 	bl	800154a <decamutexoff>

    return 0;
 8001794:	2300      	movs	r3, #0
} // end readfromspi()
 8001796:	4618      	mov	r0, r3
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000048 	.word	0x20000048
 80017a4:	2000004c 	.word	0x2000004c
 80017a8:	20000420 	.word	0x20000420
 80017ac:	40020000 	.word	0x40020000

080017b0 <get_XY_cood>:


//extern struct data data_rx;


int get_XY_cood(float pdoa, float dist, uint8_t *X_data, uint8_t *Y_data){
 80017b0:	b5b0      	push	{r4, r5, r7, lr}
 80017b2:	b08c      	sub	sp, #48	; 0x30
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	ed87 0a03 	vstr	s0, [r7, #12]
 80017ba:	edc7 0a02 	vstr	s1, [r7, #8]
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]

    float	r_m, x_m, y_m, l_m, d_m;
    double	p_diff_m; /* Path difference between the ports (m). */


	l_m = L_M_5;
 80017c2:	4b51      	ldr	r3, [pc, #324]	; (8001908 <get_XY_cood+0x158>)
 80017c4:	62bb      	str	r3, [r7, #40]	; 0x28
	d_m = D_M_5;
 80017c6:	4b51      	ldr	r3, [pc, #324]	; (800190c <get_XY_cood+0x15c>)
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24

    r_m = (dist-0.2) / 100.0f;
 80017ca:	68b8      	ldr	r0, [r7, #8]
 80017cc:	f7fe fef6 	bl	80005bc <__aeabi_f2d>
 80017d0:	a34b      	add	r3, pc, #300	; (adr r3, 8001900 <get_XY_cood+0x150>)
 80017d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d6:	f7fe fd91 	bl	80002fc <__aeabi_dsub>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	4b4a      	ldr	r3, [pc, #296]	; (8001910 <get_XY_cood+0x160>)
 80017e8:	f7ff f86a 	bl	80008c0 <__aeabi_ddiv>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	f7ff fa12 	bl	8000c1c <__aeabi_d2f>
 80017f8:	4603      	mov	r3, r0
 80017fa:	623b      	str	r3, [r7, #32]

	p_diff_m = (pdoa / 360.0f * l_m);
 80017fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001800:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001914 <get_XY_cood+0x164>
 8001804:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001808:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800180c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001810:	ee17 0a90 	vmov	r0, s15
 8001814:	f7fe fed2 	bl	80005bc <__aeabi_f2d>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    /* x and y from path difference and range */
    x_m = p_diff_m  / d_m * r_m;
 8001820:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001822:	f7fe fecb 	bl	80005bc <__aeabi_f2d>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800182e:	f7ff f847 	bl	80008c0 <__aeabi_ddiv>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4614      	mov	r4, r2
 8001838:	461d      	mov	r5, r3
 800183a:	6a38      	ldr	r0, [r7, #32]
 800183c:	f7fe febe 	bl	80005bc <__aeabi_f2d>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4620      	mov	r0, r4
 8001846:	4629      	mov	r1, r5
 8001848:	f7fe ff10 	bl	800066c <__aeabi_dmul>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4610      	mov	r0, r2
 8001852:	4619      	mov	r1, r3
 8001854:	f7ff f9e2 	bl	8000c1c <__aeabi_d2f>
 8001858:	4603      	mov	r3, r0
 800185a:	617b      	str	r3, [r7, #20]

    if (fabs(x_m) < r_m){
 800185c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001860:	eef0 7ae7 	vabs.f32	s15, s15
 8001864:	ed97 7a08 	vldr	s14, [r7, #32]
 8001868:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800186c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001870:	dd1c      	ble.n	80018ac <get_XY_cood+0xfc>
    	y_m = sqrt(r_m*r_m - x_m*x_m);
 8001872:	edd7 7a08 	vldr	s15, [r7, #32]
 8001876:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800187a:	edd7 7a05 	vldr	s15, [r7, #20]
 800187e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001882:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001886:	ee17 0a90 	vmov	r0, s15
 800188a:	f7fe fe97 	bl	80005bc <__aeabi_f2d>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	ec43 2b10 	vmov	d0, r2, r3
 8001896:	f014 facf 	bl	8015e38 <sqrt>
 800189a:	ec53 2b10 	vmov	r2, r3, d0
 800189e:	4610      	mov	r0, r2
 80018a0:	4619      	mov	r1, r3
 80018a2:	f7ff f9bb 	bl	8000c1c <__aeabi_d2f>
 80018a6:	4603      	mov	r3, r0
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018aa:	e002      	b.n	80018b2 <get_XY_cood+0x102>
    }
    else{
    	y_m = 0.0f;
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* m -> cm */

    sprintf((char *)X_data, "%3.2f", (x_m * 100.0f));
 80018b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80018b6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001918 <get_XY_cood+0x168>
 80018ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018be:	ee17 0a90 	vmov	r0, s15
 80018c2:	f7fe fe7b 	bl	80005bc <__aeabi_f2d>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4914      	ldr	r1, [pc, #80]	; (800191c <get_XY_cood+0x16c>)
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f013 ff73 	bl	80157b8 <siprintf>
    sprintf((char *)Y_data, "%3.2f", y_m * 100.0f);
 80018d2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80018d6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001918 <get_XY_cood+0x168>
 80018da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018de:	ee17 0a90 	vmov	r0, s15
 80018e2:	f7fe fe6b 	bl	80005bc <__aeabi_f2d>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	490c      	ldr	r1, [pc, #48]	; (800191c <get_XY_cood+0x16c>)
 80018ec:	6838      	ldr	r0, [r7, #0]
 80018ee:	f013 ff63 	bl	80157b8 <siprintf>

	return 0;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3730      	adds	r7, #48	; 0x30
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bdb0      	pop	{r4, r5, r7, pc}
 80018fc:	f3af 8000 	nop.w
 8001900:	9999999a 	.word	0x9999999a
 8001904:	3fc99999 	.word	0x3fc99999
 8001908:	3d3d2950 	.word	0x3d3d2950
 800190c:	3cba9710 	.word	0x3cba9710
 8001910:	40590000 	.word	0x40590000
 8001914:	43b40000 	.word	0x43b40000
 8001918:	42c80000 	.word	0x42c80000
 800191c:	08015f34 	.word	0x08015f34

08001920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	2b00      	cmp	r3, #0
 8001930:	db0b      	blt.n	800194a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	f003 021f 	and.w	r2, r3, #31
 8001938:	4907      	ldr	r1, [pc, #28]	; (8001958 <__NVIC_EnableIRQ+0x38>)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	095b      	lsrs	r3, r3, #5
 8001940:	2001      	movs	r0, #1
 8001942:	fa00 f202 	lsl.w	r2, r0, r2
 8001946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000e100 	.word	0xe000e100

0800195c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	2b00      	cmp	r3, #0
 800196c:	db12      	blt.n	8001994 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	f003 021f 	and.w	r2, r3, #31
 8001974:	490a      	ldr	r1, [pc, #40]	; (80019a0 <__NVIC_DisableIRQ+0x44>)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	095b      	lsrs	r3, r3, #5
 800197c:	2001      	movs	r0, #1
 800197e:	fa00 f202 	lsl.w	r2, r0, r2
 8001982:	3320      	adds	r3, #32
 8001984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001988:	f3bf 8f4f 	dsb	sy
}
 800198c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800198e:	f3bf 8f6f 	isb	sy
}
 8001992:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000e100 	.word	0xe000e100

080019a4 <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize("O0")
int usleep(useconds_t usec)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
    unsigned int i;

    usec *= 12;
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	4613      	mov	r3, r2
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	4413      	add	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	607b      	str	r3, [r7, #4]
    for (i = 0; i < usec; i++)
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	e003      	b.n	80019c6 <usleep+0x22>
    {
        __NOP();
 80019be:	bf00      	nop
    for (i = 0; i < usec; i++)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	3301      	adds	r3, #1
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d3f7      	bcc.n	80019be <usleep+0x1a>
    }
    return 0;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <Sleep>:

/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void Sleep(uint32_t x)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 feb7 	bl	8002758 <HAL_Delay>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <EXTI_GetITEnStatus>:
 * @brief  Checks whether the specified IRQn line is enabled or not.
 * @param  IRQn: specifies the IRQn line to check.
 * @return "0" when IRQn is "not enabled" and !0 otherwise
 */
ITStatus EXTI_GetITEnStatus(IRQn_Type IRQn)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
    return ((NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) == (uint32_t)RESET) ? (RESET) : (SET);
 80019fe:	4a0c      	ldr	r2, [pc, #48]	; (8001a30 <EXTI_GetITEnStatus+0x3c>)
 8001a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a04:	095b      	lsrs	r3, r3, #5
 8001a06:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	f003 031f 	and.w	r3, r3, #31
 8001a10:	fa22 f303 	lsr.w	r3, r2, r3
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	bf14      	ite	ne
 8001a1c:	2301      	movne	r3, #1
 8001a1e:	2300      	moveq	r3, #0
 8001a20:	b2db      	uxtb	r3, r3
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000e100 	.word	0xe000e100

08001a34 <reset_DWIC>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW IC by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DWIC(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RESET_Pin;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001a3e:	2311      	movs	r3, #17
 8001a40:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8001a46:	1d3b      	adds	r3, r7, #4
 8001a48:	4619      	mov	r1, r3
 8001a4a:	480a      	ldr	r0, [pc, #40]	; (8001a74 <reset_DWIC+0x40>)
 8001a4c:	f000 ffec 	bl	8002a28 <HAL_GPIO_Init>

    // drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2101      	movs	r1, #1
 8001a54:	4807      	ldr	r0, [pc, #28]	; (8001a74 <reset_DWIC+0x40>)
 8001a56:	f001 f96b 	bl	8002d30 <HAL_GPIO_WritePin>

    usleep(1);
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	f7ff ffa2 	bl	80019a4 <usleep>

    // put the pin back to output open-drain (not active)
    setup_DWICRSTnIRQ(0);
 8001a60:	2000      	movs	r0, #0
 8001a62:	f000 f809 	bl	8001a78 <setup_DWICRSTnIRQ>
    Sleep(2);
 8001a66:	2002      	movs	r0, #2
 8001a68:	f7ff ffb8 	bl	80019dc <Sleep>
}
 8001a6c:	bf00      	nop
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40020400 	.word	0x40020400

08001a78 <setup_DWICRSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DWICRSTnIRQ(int enable)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b088      	sub	sp, #32
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if (enable)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d015      	beq.n	8001ab2 <setup_DWICRSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 8001a86:	2301      	movs	r3, #1
 8001a88:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a8e:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8001a94:	f107 030c 	add.w	r3, r7, #12
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4813      	ldr	r0, [pc, #76]	; (8001ae8 <setup_DWICRSTnIRQ+0x70>)
 8001a9c:	f000 ffc4 	bl	8002a28 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn); // pin #0 -> EXTI #0
 8001aa0:	2006      	movs	r0, #6
 8001aa2:	f000 ff98 	bl	80029d6 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2105      	movs	r1, #5
 8001aaa:	2006      	movs	r0, #6
 8001aac:	f000 ff77 	bl	800299e <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
    }
}
 8001ab0:	e015      	b.n	8001ade <setup_DWICRSTnIRQ+0x66>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn); // pin #0 -> EXTI #0
 8001ab2:	2006      	movs	r0, #6
 8001ab4:	f000 ff9d 	bl	80029f2 <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001abc:	2311      	movs	r3, #17
 8001abe:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8001ac8:	f107 030c 	add.w	r3, r7, #12
 8001acc:	4619      	mov	r1, r3
 8001ace:	4806      	ldr	r0, [pc, #24]	; (8001ae8 <setup_DWICRSTnIRQ+0x70>)
 8001ad0:	f000 ffaa 	bl	8002a28 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	4803      	ldr	r0, [pc, #12]	; (8001ae8 <setup_DWICRSTnIRQ+0x70>)
 8001ada:	f001 f929 	bl	8002d30 <HAL_GPIO_WritePin>
}
 8001ade:	bf00      	nop
 8001ae0:	3720      	adds	r7, #32
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40020400 	.word	0x40020400

08001aec <wakeup_device_with_io>:
 *
 * output -None
 *
 */
void wakeup_device_with_io(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
    SET_WAKEUP_PIN_IO_HIGH;
 8001af0:	2201      	movs	r2, #1
 8001af2:	2102      	movs	r1, #2
 8001af4:	4806      	ldr	r0, [pc, #24]	; (8001b10 <wakeup_device_with_io+0x24>)
 8001af6:	f001 f91b 	bl	8002d30 <HAL_GPIO_WritePin>
    WAIT_200uSEC;
 8001afa:	2001      	movs	r0, #1
 8001afc:	f7ff ff6e 	bl	80019dc <Sleep>
    SET_WAKEUP_PIN_IO_LOW;
 8001b00:	2200      	movs	r2, #0
 8001b02:	2102      	movs	r1, #2
 8001b04:	4802      	ldr	r0, [pc, #8]	; (8001b10 <wakeup_device_with_io+0x24>)
 8001b06:	f001 f913 	bl	8002d30 <HAL_GPIO_WritePin>
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40020400 	.word	0x40020400

08001b14 <port_set_dw_ic_spi_slowrate>:
/* @fn      port_set_dw_ic_spi_slowrate
 * @brief   set 4.5MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw_ic_spi_slowrate(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
    hcurrent_active_spi->Init.BaudRatePrescaler=SPI_BAUDRATEPRESCALER_16;
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <port_set_dw_ic_spi_slowrate+0x1c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2218      	movs	r2, #24
 8001b1e:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(hcurrent_active_spi);
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <port_set_dw_ic_spi_slowrate+0x1c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f001 fd75 	bl	8003614 <HAL_SPI_Init>
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000048 	.word	0x20000048

08001b34 <port_set_dw_ic_spi_fastrate>:
/* @fn      port_set_dw_ic_spi_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw_ic_spi_fastrate(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
    hcurrent_active_spi->Init.BaudRatePrescaler=SPI_BAUDRATEPRESCALER_2;
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <port_set_dw_ic_spi_fastrate+0x1c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(hcurrent_active_spi);
 8001b40:	4b03      	ldr	r3, [pc, #12]	; (8001b50 <port_set_dw_ic_spi_fastrate+0x1c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f001 fd65 	bl	8003614 <HAL_SPI_Init>
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000048 	.word	0x20000048

08001b54 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
    if(SPI_1 == host_spi)
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <port_DisableEXT_IRQ+0x20>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d103      	bne.n	8001b68 <port_DisableEXT_IRQ+0x14>
    {
        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8001b60:	2028      	movs	r0, #40	; 0x28
 8001b62:	f7ff fefb 	bl	800195c <__NVIC_DisableIRQ>
    else
    {
        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn2);
    }

}
 8001b66:	e002      	b.n	8001b6e <port_DisableEXT_IRQ+0x1a>
        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn2);
 8001b68:	2017      	movs	r0, #23
 8001b6a:	f7ff fef7 	bl	800195c <__NVIC_DisableIRQ>
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000421 	.word	0x20000421

08001b78 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
    if(SPI_1 == host_spi)
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <port_EnableEXT_IRQ+0x20>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d103      	bne.n	8001b8c <port_EnableEXT_IRQ+0x14>
    {
        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 8001b84:	2028      	movs	r0, #40	; 0x28
 8001b86:	f7ff fecb 	bl	8001920 <__NVIC_EnableIRQ>
    }
    else
    {
        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn2);
    }
}
 8001b8a:	e002      	b.n	8001b92 <port_EnableEXT_IRQ+0x1a>
        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn2);
 8001b8c:	2017      	movs	r0, #23
 8001b8e:	f7ff fec7 	bl	8001920 <__NVIC_EnableIRQ>
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000421 	.word	0x20000421

08001b9c <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
    uint32_t status;

    if(SPI_1 == host_spi)
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <port_GetEXT_IRQStatus+0x30>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d105      	bne.n	8001bb6 <port_GetEXT_IRQStatus+0x1a>
    {
        status = EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 8001baa:	2028      	movs	r0, #40	; 0x28
 8001bac:	f7ff ff22 	bl	80019f4 <EXTI_GetITEnStatus>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	e004      	b.n	8001bc0 <port_GetEXT_IRQStatus+0x24>
    }
    else
    {
        status = EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn2);
 8001bb6:	2017      	movs	r0, #23
 8001bb8:	f7ff ff1c 	bl	80019f4 <EXTI_GetITEnStatus>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	607b      	str	r3, [r7, #4]
    }
    return status;
 8001bc0:	687b      	ldr	r3, [r7, #4]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000421 	.word	0x20000421

08001bd0 <port_set_dwic_isr>:
// * @param deca_isr function pointer to DW IC interrupt handler to install
// *
// * @return none
// */
void port_set_dwic_isr(port_dwic_isr_t dwic_isr)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
    /* Check DW IC IRQ activation status. */
    ITStatus en = port_GetEXT_IRQStatus();
 8001bd8:	f7ff ffe0 	bl	8001b9c <port_GetEXT_IRQStatus>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	73fb      	strb	r3, [r7, #15]

    /* If needed, deactivate DW IC IRQ during the installation of the new handler. */
    port_DisableEXT_IRQ();
 8001be0:	f7ff ffb8 	bl	8001b54 <port_DisableEXT_IRQ>

    port_dwic_isr = dwic_isr;
 8001be4:	4a05      	ldr	r2, [pc, #20]	; (8001bfc <port_set_dwic_isr+0x2c>)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6013      	str	r3, [r2, #0]

    if (!en)
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <port_set_dwic_isr+0x24>
    {
        port_EnableEXT_IRQ();
 8001bf0:	f7ff ffc2 	bl	8001b78 <port_EnableEXT_IRQ>
    }
}
 8001bf4:	bf00      	nop
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20000338 	.word	0x20000338

08001c00 <resp_msg_get_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
void resp_msg_get_ts(uint8_t *ts_field, uint32_t *ts)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
    int i;
    *ts = 0;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
    for (i = 0; i < RESP_MSG_TS_LEN; i++)
 8001c10:	2300      	movs	r3, #0
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	e010      	b.n	8001c38 <resp_msg_get_ts+0x38>
    {
        *ts += (uint32_t)ts_field[i] << (i * 8);
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6879      	ldr	r1, [r7, #4]
 8001c1e:	440b      	add	r3, r1
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	4619      	mov	r1, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2c:	441a      	add	r2, r3
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	601a      	str	r2, [r3, #0]
    for (i = 0; i < RESP_MSG_TS_LEN; i++)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	3301      	adds	r3, #1
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	ddeb      	ble.n	8001c16 <resp_msg_get_ts+0x16>
    }
}
 8001c3e:	bf00      	nop
 8001c40:	bf00      	nop
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <waitforsysstatus>:
 *               0 - The function will not wait for any bits in the system status register (lower 32 bits).
 *
 * return None
 */
void waitforsysstatus(uint32_t *lo_result, uint32_t *hi_result, uint32_t lo_mask, uint32_t hi_mask)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
 8001c58:	603b      	str	r3, [r7, #0]
    uint32_t lo_result_tmp = 0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
    uint32_t hi_result_tmp = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]

    // If a mask has been passed into the function for the system status register (lower 32-bits)
    if (lo_mask)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d014      	beq.n	8001c92 <waitforsysstatus+0x46>
    {
        while (!((lo_result_tmp = dwt_readsysstatuslo()) & (lo_mask)))
 8001c68:	e00a      	b.n	8001c80 <waitforsysstatus+0x34>
        {
            // If a mask value is set for the system status register (higher 32-bits)
            if (hi_mask)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d007      	beq.n	8001c80 <waitforsysstatus+0x34>
            {
                // If mask value for the system status register (higher 32-bits) is found
                if ((hi_result_tmp = dwt_readsysstatushi()) & hi_mask)
 8001c70:	f003 fdf4 	bl	800585c <dwt_readsysstatushi>
 8001c74:	6138      	str	r0, [r7, #16]
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d115      	bne.n	8001cac <waitforsysstatus+0x60>
        while (!((lo_result_tmp = dwt_readsysstatuslo()) & (lo_mask)))
 8001c80:	f003 fdda 	bl	8005838 <dwt_readsysstatuslo>
 8001c84:	6178      	str	r0, [r7, #20]
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0ec      	beq.n	8001c6a <waitforsysstatus+0x1e>
 8001c90:	e00d      	b.n	8001cae <waitforsysstatus+0x62>
                }
            }
        }
    }
    // if only a mask value for the system status register (higher 32-bits) is set
    else if (hi_mask)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00a      	beq.n	8001cae <waitforsysstatus+0x62>
    {
        while (!((hi_result_tmp = dwt_readsysstatushi()) & (hi_mask))) { };
 8001c98:	bf00      	nop
 8001c9a:	f003 fddf 	bl	800585c <dwt_readsysstatushi>
 8001c9e:	6138      	str	r0, [r7, #16]
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f7      	beq.n	8001c9a <waitforsysstatus+0x4e>
 8001caa:	e000      	b.n	8001cae <waitforsysstatus+0x62>
                    break;
 8001cac:	bf00      	nop
    }

    if (lo_result != NULL)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d002      	beq.n	8001cba <waitforsysstatus+0x6e>
    {
        *lo_result = lo_result_tmp;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	601a      	str	r2, [r3, #0]
    }

    if (hi_result != NULL)
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d002      	beq.n	8001cc6 <waitforsysstatus+0x7a>
    {
        *hi_result = hi_result_tmp;
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	601a      	str	r2, [r3, #0]
    }
}
 8001cc6:	bf00      	nop
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <test_run_info>:

extern struct data data_rx;
extern int unit_test_main(void);


void test_run_info(unsigned char *data){
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]

	uint16_t data_length = strlen((const char *)data);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7fe fb01 	bl	80002e0 <strlen>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart1, data, data_length, 1000);
 8001ce2:	89fa      	ldrh	r2, [r7, #14]
 8001ce4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	4803      	ldr	r0, [pc, #12]	; (8001cf8 <test_run_info+0x28>)
 8001cec:	f002 fed1 	bl	8004a92 <HAL_UART_Transmit>
}
 8001cf0:	bf00      	nop
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	200003dc 	.word	0x200003dc

08001cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d00:	f000 fcb8 	bl	8002674 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d04:	f000 f87a 	bl	8001dfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d08:	f000 f9fa 	bl	8002100 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001d0c:	f000 f8e0 	bl	8001ed0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001d10:	f000 f9cc 	bl	80020ac <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001d14:	f000 f912 	bl	8001f3c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE BEGIN 2 */
  port_DisableEXT_IRQ();
 8001d18:	f7ff ff1c 	bl	8001b54 <port_DisableEXT_IRQ>
  setup_DWICRSTnIRQ(0);
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	f7ff feab 	bl	8001a78 <setup_DWICRSTnIRQ>

  HAL_GPIO_WritePin(GPIOB,  GPIO_PIN_13, GPIO_PIN_RESET);
 8001d22:	2200      	movs	r2, #0
 8001d24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d28:	4823      	ldr	r0, [pc, #140]	; (8001db8 <main+0xbc>)
 8001d2a:	f001 f801 	bl	8002d30 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){

	  UWB_pdoa();
 8001d2e:	f7ff f947 	bl	8000fc0 <UWB_pdoa>

	  test_run_info((unsigned char *)"[type:Tli, PDoA : ");
 8001d32:	4822      	ldr	r0, [pc, #136]	; (8001dbc <main+0xc0>)
 8001d34:	f7ff ffcc 	bl	8001cd0 <test_run_info>
	  test_run_info((unsigned char *)&data_rx.T_pdoa);
 8001d38:	4821      	ldr	r0, [pc, #132]	; (8001dc0 <main+0xc4>)
 8001d3a:	f7ff ffc9 	bl	8001cd0 <test_run_info>
	  test_run_info((unsigned char *)", data : ");
 8001d3e:	4821      	ldr	r0, [pc, #132]	; (8001dc4 <main+0xc8>)
 8001d40:	f7ff ffc6 	bl	8001cd0 <test_run_info>
	  test_run_info((unsigned char *)&data_rx.T_data);
 8001d44:	4820      	ldr	r0, [pc, #128]	; (8001dc8 <main+0xcc>)
 8001d46:	f7ff ffc3 	bl	8001cd0 <test_run_info>
	  test_run_info((unsigned char *)", Time : ");
 8001d4a:	4820      	ldr	r0, [pc, #128]	; (8001dcc <main+0xd0>)
 8001d4c:	f7ff ffc0 	bl	8001cd0 <test_run_info>
	  test_run_info((unsigned char *)&data_rx.T_time);
 8001d50:	481f      	ldr	r0, [pc, #124]	; (8001dd0 <main+0xd4>)
 8001d52:	f7ff ffbd 	bl	8001cd0 <test_run_info>
	  test_run_info((unsigned char *)"]\n");
 8001d56:	481f      	ldr	r0, [pc, #124]	; (8001dd4 <main+0xd8>)
 8001d58:	f7ff ffba 	bl	8001cd0 <test_run_info>

	  ss_twr_initiator_RX(data_rx.C_dist, &data_rx.C_dist_f);
 8001d5c:	491e      	ldr	r1, [pc, #120]	; (8001dd8 <main+0xdc>)
 8001d5e:	481f      	ldr	r0, [pc, #124]	; (8001ddc <main+0xe0>)
 8001d60:	f7ff fab2 	bl	80012c8 <ss_twr_initiator_RX>

	  test_run_info((unsigned char *)"[type:car, PDoA : ");
 8001d64:	481e      	ldr	r0, [pc, #120]	; (8001de0 <main+0xe4>)
 8001d66:	f7ff ffb3 	bl	8001cd0 <test_run_info>
	  test_run_info((unsigned char *)&data_rx.C_pdoa);
 8001d6a:	481e      	ldr	r0, [pc, #120]	; (8001de4 <main+0xe8>)
 8001d6c:	f7ff ffb0 	bl	8001cd0 <test_run_info>
	  test_run_info((unsigned char *)", DIST : ");
 8001d70:	481d      	ldr	r0, [pc, #116]	; (8001de8 <main+0xec>)
 8001d72:	f7ff ffad 	bl	8001cd0 <test_run_info>
	  test_run_info((unsigned char *)&data_rx.C_dist);
 8001d76:	4819      	ldr	r0, [pc, #100]	; (8001ddc <main+0xe0>)
 8001d78:	f7ff ffaa 	bl	8001cd0 <test_run_info>


	  get_XY_cood(data_rx.C_pdoa_f, data_rx.C_dist_f, data_rx.C_x, data_rx.C_y);
 8001d7c:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <main+0xe0>)
 8001d7e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d82:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <main+0xe0>)
 8001d84:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d88:	4918      	ldr	r1, [pc, #96]	; (8001dec <main+0xf0>)
 8001d8a:	4819      	ldr	r0, [pc, #100]	; (8001df0 <main+0xf4>)
 8001d8c:	eef0 0a47 	vmov.f32	s1, s14
 8001d90:	eeb0 0a67 	vmov.f32	s0, s15
 8001d94:	f7ff fd0c 	bl	80017b0 <get_XY_cood>

	  test_run_info((unsigned char *)", X : ");
 8001d98:	4816      	ldr	r0, [pc, #88]	; (8001df4 <main+0xf8>)
 8001d9a:	f7ff ff99 	bl	8001cd0 <test_run_info>
	  test_run_info((unsigned char *)&data_rx.C_x);
 8001d9e:	4814      	ldr	r0, [pc, #80]	; (8001df0 <main+0xf4>)
 8001da0:	f7ff ff96 	bl	8001cd0 <test_run_info>

	  test_run_info((unsigned char *)", Y : ");
 8001da4:	4814      	ldr	r0, [pc, #80]	; (8001df8 <main+0xfc>)
 8001da6:	f7ff ff93 	bl	8001cd0 <test_run_info>
	  test_run_info((unsigned char *)&data_rx.C_y);
 8001daa:	4810      	ldr	r0, [pc, #64]	; (8001dec <main+0xf0>)
 8001dac:	f7ff ff90 	bl	8001cd0 <test_run_info>

	  test_run_info((unsigned char *)"]\n");
 8001db0:	4808      	ldr	r0, [pc, #32]	; (8001dd4 <main+0xd8>)
 8001db2:	f7ff ff8d 	bl	8001cd0 <test_run_info>
	  UWB_pdoa();
 8001db6:	e7ba      	b.n	8001d2e <main+0x32>
 8001db8:	40020400 	.word	0x40020400
 8001dbc:	08015f7c 	.word	0x08015f7c
 8001dc0:	20000277 	.word	0x20000277
 8001dc4:	08015f90 	.word	0x08015f90
 8001dc8:	2000027d 	.word	0x2000027d
 8001dcc:	08015f9c 	.word	0x08015f9c
 8001dd0:	2000027f 	.word	0x2000027f
 8001dd4:	08015fa8 	.word	0x08015fa8
 8001dd8:	20000254 	.word	0x20000254
 8001ddc:	2000024c 	.word	0x2000024c
 8001de0:	08015fac 	.word	0x08015fac
 8001de4:	20000258 	.word	0x20000258
 8001de8:	08015fc0 	.word	0x08015fc0
 8001dec:	2000026b 	.word	0x2000026b
 8001df0:	20000265 	.word	0x20000265
 8001df4:	08015fcc 	.word	0x08015fcc
 8001df8:	08015fd4 	.word	0x08015fd4

08001dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b094      	sub	sp, #80	; 0x50
 8001e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e02:	f107 0320 	add.w	r3, r7, #32
 8001e06:	2230      	movs	r2, #48	; 0x30
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f012 f88a 	bl	8013f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e10:	f107 030c 	add.w	r3, r7, #12
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e20:	2300      	movs	r3, #0
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	4b28      	ldr	r3, [pc, #160]	; (8001ec8 <SystemClock_Config+0xcc>)
 8001e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e28:	4a27      	ldr	r2, [pc, #156]	; (8001ec8 <SystemClock_Config+0xcc>)
 8001e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e30:	4b25      	ldr	r3, [pc, #148]	; (8001ec8 <SystemClock_Config+0xcc>)
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	607b      	str	r3, [r7, #4]
 8001e40:	4b22      	ldr	r3, [pc, #136]	; (8001ecc <SystemClock_Config+0xd0>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a21      	ldr	r2, [pc, #132]	; (8001ecc <SystemClock_Config+0xd0>)
 8001e46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	4b1f      	ldr	r3, [pc, #124]	; (8001ecc <SystemClock_Config+0xd0>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e54:	607b      	str	r3, [r7, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e62:	2302      	movs	r3, #2
 8001e64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 20;
 8001e6c:	2314      	movs	r3, #20
 8001e6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001e70:	23a0      	movs	r3, #160	; 0xa0
 8001e72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001e74:	2304      	movs	r3, #4
 8001e76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e78:	2304      	movs	r3, #4
 8001e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e7c:	f107 0320 	add.w	r3, r7, #32
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 ff6f 	bl	8002d64 <HAL_RCC_OscConfig>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e8c:	f000 f9e4 	bl	8002258 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e90:	230f      	movs	r3, #15
 8001e92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e94:	2302      	movs	r3, #2
 8001e96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ea0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ea2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ea6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ea8:	f107 030c 	add.w	r3, r7, #12
 8001eac:	2101      	movs	r1, #1
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f001 f9d0 	bl	8003254 <HAL_RCC_ClockConfig>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001eba:	f000 f9cd 	bl	8002258 <Error_Handler>
  }
}
 8001ebe:	bf00      	nop
 8001ec0:	3750      	adds	r7, #80	; 0x50
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40007000 	.word	0x40007000

08001ed0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ed4:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001ed6:	4a18      	ldr	r2, [pc, #96]	; (8001f38 <MX_SPI1_Init+0x68>)
 8001ed8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001eda:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001edc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ee0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ee2:	4b14      	ldr	r3, [pc, #80]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eee:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001efa:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001efc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001f02:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001f04:	2210      	movs	r2, #16
 8001f06:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f08:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f14:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001f1c:	220a      	movs	r2, #10
 8001f1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f20:	4804      	ldr	r0, [pc, #16]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001f22:	f001 fb77 	bl	8003614 <HAL_SPI_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f2c:	f000 f994 	bl	8002258 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	2000033c 	.word	0x2000033c
 8001f38:	40013000 	.word	0x40013000

08001f3c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b09a      	sub	sp, #104	; 0x68
 8001f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	605a      	str	r2, [r3, #4]
 8001f4c:	609a      	str	r2, [r3, #8]
 8001f4e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001f50:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f60:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f6a:	f107 0320 	add.w	r3, r7, #32
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	609a      	str	r2, [r3, #8]
 8001f76:	60da      	str	r2, [r3, #12]
 8001f78:	611a      	str	r2, [r3, #16]
 8001f7a:	615a      	str	r2, [r3, #20]
 8001f7c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f7e:	463b      	mov	r3, r7
 8001f80:	2220      	movs	r2, #32
 8001f82:	2100      	movs	r1, #0
 8001f84:	4618      	mov	r0, r3
 8001f86:	f011 ffcd 	bl	8013f24 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f8a:	4b46      	ldr	r3, [pc, #280]	; (80020a4 <MX_TIM1_Init+0x168>)
 8001f8c:	4a46      	ldr	r2, [pc, #280]	; (80020a8 <MX_TIM1_Init+0x16c>)
 8001f8e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f90:	4b44      	ldr	r3, [pc, #272]	; (80020a4 <MX_TIM1_Init+0x168>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f96:	4b43      	ldr	r3, [pc, #268]	; (80020a4 <MX_TIM1_Init+0x168>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f9c:	4b41      	ldr	r3, [pc, #260]	; (80020a4 <MX_TIM1_Init+0x168>)
 8001f9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fa2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001fa4:	4b3f      	ldr	r3, [pc, #252]	; (80020a4 <MX_TIM1_Init+0x168>)
 8001fa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001faa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fac:	4b3d      	ldr	r3, [pc, #244]	; (80020a4 <MX_TIM1_Init+0x168>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fb2:	4b3c      	ldr	r3, [pc, #240]	; (80020a4 <MX_TIM1_Init+0x168>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fb8:	483a      	ldr	r0, [pc, #232]	; (80020a4 <MX_TIM1_Init+0x168>)
 8001fba:	f001 fdc9 	bl	8003b50 <HAL_TIM_Base_Init>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001fc4:	f000 f948 	bl	8002258 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fcc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4833      	ldr	r0, [pc, #204]	; (80020a4 <MX_TIM1_Init+0x168>)
 8001fd6:	f001 ffc7 	bl	8003f68 <HAL_TIM_ConfigClockSource>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001fe0:	f000 f93a 	bl	8002258 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001fe4:	482f      	ldr	r0, [pc, #188]	; (80020a4 <MX_TIM1_Init+0x168>)
 8001fe6:	f001 fe02 	bl	8003bee <HAL_TIM_OC_Init>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8001ff0:	f000 f932 	bl	8002258 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001ff4:	2306      	movs	r3, #6
 8001ff6:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001ffc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002000:	4619      	mov	r1, r3
 8002002:	4828      	ldr	r0, [pc, #160]	; (80020a4 <MX_TIM1_Init+0x168>)
 8002004:	f002 f877 	bl	80040f6 <HAL_TIM_SlaveConfigSynchro>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800200e:	f000 f923 	bl	8002258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002012:	2300      	movs	r3, #0
 8002014:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002016:	2300      	movs	r3, #0
 8002018:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800201a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800201e:	4619      	mov	r1, r3
 8002020:	4820      	ldr	r0, [pc, #128]	; (80020a4 <MX_TIM1_Init+0x168>)
 8002022:	f002 fc15 	bl	8004850 <HAL_TIMEx_MasterConfigSynchronization>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 800202c:	f000 f914 	bl	8002258 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002030:	2300      	movs	r3, #0
 8002032:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002038:	2300      	movs	r3, #0
 800203a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800203c:	2300      	movs	r3, #0
 800203e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002040:	2300      	movs	r3, #0
 8002042:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002044:	2300      	movs	r3, #0
 8002046:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002048:	2300      	movs	r3, #0
 800204a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800204c:	f107 0320 	add.w	r3, r7, #32
 8002050:	2200      	movs	r2, #0
 8002052:	4619      	mov	r1, r3
 8002054:	4813      	ldr	r0, [pc, #76]	; (80020a4 <MX_TIM1_Init+0x168>)
 8002056:	f001 ff2b 	bl	8003eb0 <HAL_TIM_OC_ConfigChannel>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002060:	f000 f8fa 	bl	8002258 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002064:	2300      	movs	r3, #0
 8002066:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002068:	2300      	movs	r3, #0
 800206a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800206c:	2300      	movs	r3, #0
 800206e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002074:	2300      	movs	r3, #0
 8002076:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002078:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800207c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002082:	463b      	mov	r3, r7
 8002084:	4619      	mov	r1, r3
 8002086:	4807      	ldr	r0, [pc, #28]	; (80020a4 <MX_TIM1_Init+0x168>)
 8002088:	f002 fc50 	bl	800492c <HAL_TIMEx_ConfigBreakDeadTime>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8002092:	f000 f8e1 	bl	8002258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002096:	4803      	ldr	r0, [pc, #12]	; (80020a4 <MX_TIM1_Init+0x168>)
 8002098:	f000 f97c 	bl	8002394 <HAL_TIM_MspPostInit>

}
 800209c:	bf00      	nop
 800209e:	3768      	adds	r7, #104	; 0x68
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20000394 	.word	0x20000394
 80020a8:	40010000 	.word	0x40010000

080020ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <MX_USART1_UART_Init+0x4c>)
 80020b2:	4a12      	ldr	r2, [pc, #72]	; (80020fc <MX_USART1_UART_Init+0x50>)
 80020b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020b6:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <MX_USART1_UART_Init+0x4c>)
 80020b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <MX_USART1_UART_Init+0x4c>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <MX_USART1_UART_Init+0x4c>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020ca:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <MX_USART1_UART_Init+0x4c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020d0:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <MX_USART1_UART_Init+0x4c>)
 80020d2:	220c      	movs	r2, #12
 80020d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020d6:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <MX_USART1_UART_Init+0x4c>)
 80020d8:	2200      	movs	r2, #0
 80020da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <MX_USART1_UART_Init+0x4c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020e2:	4805      	ldr	r0, [pc, #20]	; (80020f8 <MX_USART1_UART_Init+0x4c>)
 80020e4:	f002 fc88 	bl	80049f8 <HAL_UART_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80020ee:	f000 f8b3 	bl	8002258 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200003dc 	.word	0x200003dc
 80020fc:	40011000 	.word	0x40011000

08002100 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08a      	sub	sp, #40	; 0x28
 8002104:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002106:	f107 0314 	add.w	r3, r7, #20
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	605a      	str	r2, [r3, #4]
 8002110:	609a      	str	r2, [r3, #8]
 8002112:	60da      	str	r2, [r3, #12]
 8002114:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	613b      	str	r3, [r7, #16]
 800211a:	4b4b      	ldr	r3, [pc, #300]	; (8002248 <MX_GPIO_Init+0x148>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	4a4a      	ldr	r2, [pc, #296]	; (8002248 <MX_GPIO_Init+0x148>)
 8002120:	f043 0304 	orr.w	r3, r3, #4
 8002124:	6313      	str	r3, [r2, #48]	; 0x30
 8002126:	4b48      	ldr	r3, [pc, #288]	; (8002248 <MX_GPIO_Init+0x148>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	f003 0304 	and.w	r3, r3, #4
 800212e:	613b      	str	r3, [r7, #16]
 8002130:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	4b44      	ldr	r3, [pc, #272]	; (8002248 <MX_GPIO_Init+0x148>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	4a43      	ldr	r2, [pc, #268]	; (8002248 <MX_GPIO_Init+0x148>)
 800213c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002140:	6313      	str	r3, [r2, #48]	; 0x30
 8002142:	4b41      	ldr	r3, [pc, #260]	; (8002248 <MX_GPIO_Init+0x148>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	4b3d      	ldr	r3, [pc, #244]	; (8002248 <MX_GPIO_Init+0x148>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	4a3c      	ldr	r2, [pc, #240]	; (8002248 <MX_GPIO_Init+0x148>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6313      	str	r3, [r2, #48]	; 0x30
 800215e:	4b3a      	ldr	r3, [pc, #232]	; (8002248 <MX_GPIO_Init+0x148>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	60bb      	str	r3, [r7, #8]
 8002168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	607b      	str	r3, [r7, #4]
 800216e:	4b36      	ldr	r3, [pc, #216]	; (8002248 <MX_GPIO_Init+0x148>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	4a35      	ldr	r2, [pc, #212]	; (8002248 <MX_GPIO_Init+0x148>)
 8002174:	f043 0302 	orr.w	r3, r3, #2
 8002178:	6313      	str	r3, [r2, #48]	; 0x30
 800217a:	4b33      	ldr	r3, [pc, #204]	; (8002248 <MX_GPIO_Init+0x148>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	607b      	str	r3, [r7, #4]
 8002184:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_S_GPIO_Port, LED_S_Pin, GPIO_PIN_RESET);
 8002186:	2200      	movs	r2, #0
 8002188:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800218c:	482f      	ldr	r0, [pc, #188]	; (800224c <MX_GPIO_Init+0x14c>)
 800218e:	f000 fdcf 	bl	8002d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET);
 8002192:	2200      	movs	r2, #0
 8002194:	2110      	movs	r1, #16
 8002196:	482e      	ldr	r0, [pc, #184]	; (8002250 <MX_GPIO_Init+0x150>)
 8002198:	f000 fdca 	bl	8002d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DW_RESET_Pin|DW_NSS1_WAKEUP_Pin, GPIO_PIN_RESET);
 800219c:	2200      	movs	r2, #0
 800219e:	2103      	movs	r1, #3
 80021a0:	482c      	ldr	r0, [pc, #176]	; (8002254 <MX_GPIO_Init+0x154>)
 80021a2:	f000 fdc5 	bl	8002d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_r_Pin|LED_y_Pin|LED_g_Pin, GPIO_PIN_SET);
 80021a6:	2201      	movs	r2, #1
 80021a8:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80021ac:	4829      	ldr	r0, [pc, #164]	; (8002254 <MX_GPIO_Init+0x154>)
 80021ae:	f000 fdbf 	bl	8002d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_S_Pin */
  GPIO_InitStruct.Pin = LED_S_Pin;
 80021b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b8:	2301      	movs	r3, #1
 80021ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c0:	2300      	movs	r3, #0
 80021c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_S_GPIO_Port, &GPIO_InitStruct);
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	4619      	mov	r1, r3
 80021ca:	4820      	ldr	r0, [pc, #128]	; (800224c <MX_GPIO_Init+0x14c>)
 80021cc:	f000 fc2c 	bl	8002a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : DW_IRQ2_Pin DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQ2_Pin|DW_IRQn_Pin;
 80021d0:	2306      	movs	r3, #6
 80021d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021d4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021de:	f107 0314 	add.w	r3, r7, #20
 80021e2:	4619      	mov	r1, r3
 80021e4:	481a      	ldr	r0, [pc, #104]	; (8002250 <MX_GPIO_Init+0x150>)
 80021e6:	f000 fc1f 	bl	8002a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_NSS_Pin */
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 80021ea:	2310      	movs	r3, #16
 80021ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ee:	2301      	movs	r3, #1
 80021f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f6:	2300      	movs	r3, #0
 80021f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 80021fa:	f107 0314 	add.w	r3, r7, #20
 80021fe:	4619      	mov	r1, r3
 8002200:	4813      	ldr	r0, [pc, #76]	; (8002250 <MX_GPIO_Init+0x150>)
 8002202:	f000 fc11 	bl	8002a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : DW_RESET_Pin DW_NSS1_WAKEUP_Pin */
  GPIO_InitStruct.Pin = DW_RESET_Pin|DW_NSS1_WAKEUP_Pin;
 8002206:	2303      	movs	r3, #3
 8002208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800220a:	2301      	movs	r3, #1
 800220c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002212:	2300      	movs	r3, #0
 8002214:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002216:	f107 0314 	add.w	r3, r7, #20
 800221a:	4619      	mov	r1, r3
 800221c:	480d      	ldr	r0, [pc, #52]	; (8002254 <MX_GPIO_Init+0x154>)
 800221e:	f000 fc03 	bl	8002a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_r_Pin LED_y_Pin LED_g_Pin */
  GPIO_InitStruct.Pin = LED_r_Pin|LED_y_Pin|LED_g_Pin;
 8002222:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002228:	2301      	movs	r3, #1
 800222a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800222c:	2301      	movs	r3, #1
 800222e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002230:	2300      	movs	r3, #0
 8002232:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002234:	f107 0314 	add.w	r3, r7, #20
 8002238:	4619      	mov	r1, r3
 800223a:	4806      	ldr	r0, [pc, #24]	; (8002254 <MX_GPIO_Init+0x154>)
 800223c:	f000 fbf4 	bl	8002a28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002240:	bf00      	nop
 8002242:	3728      	adds	r7, #40	; 0x28
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40023800 	.word	0x40023800
 800224c:	40020800 	.word	0x40020800
 8002250:	40020000 	.word	0x40020000
 8002254:	40020400 	.word	0x40020400

08002258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800225c:	b672      	cpsid	i
}
 800225e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002260:	e7fe      	b.n	8002260 <Error_Handler+0x8>
	...

08002264 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	607b      	str	r3, [r7, #4]
 800226e:	4b10      	ldr	r3, [pc, #64]	; (80022b0 <HAL_MspInit+0x4c>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	4a0f      	ldr	r2, [pc, #60]	; (80022b0 <HAL_MspInit+0x4c>)
 8002274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002278:	6453      	str	r3, [r2, #68]	; 0x44
 800227a:	4b0d      	ldr	r3, [pc, #52]	; (80022b0 <HAL_MspInit+0x4c>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002282:	607b      	str	r3, [r7, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	603b      	str	r3, [r7, #0]
 800228a:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <HAL_MspInit+0x4c>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	4a08      	ldr	r2, [pc, #32]	; (80022b0 <HAL_MspInit+0x4c>)
 8002290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002294:	6413      	str	r3, [r2, #64]	; 0x40
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_MspInit+0x4c>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229e:	603b      	str	r3, [r7, #0]
 80022a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800

080022b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08a      	sub	sp, #40	; 0x28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a19      	ldr	r2, [pc, #100]	; (8002338 <HAL_SPI_MspInit+0x84>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d12b      	bne.n	800232e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	4b18      	ldr	r3, [pc, #96]	; (800233c <HAL_SPI_MspInit+0x88>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	4a17      	ldr	r2, [pc, #92]	; (800233c <HAL_SPI_MspInit+0x88>)
 80022e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022e4:	6453      	str	r3, [r2, #68]	; 0x44
 80022e6:	4b15      	ldr	r3, [pc, #84]	; (800233c <HAL_SPI_MspInit+0x88>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	4b11      	ldr	r3, [pc, #68]	; (800233c <HAL_SPI_MspInit+0x88>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	4a10      	ldr	r2, [pc, #64]	; (800233c <HAL_SPI_MspInit+0x88>)
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	6313      	str	r3, [r2, #48]	; 0x30
 8002302:	4b0e      	ldr	r3, [pc, #56]	; (800233c <HAL_SPI_MspInit+0x88>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800230e:	23e0      	movs	r3, #224	; 0xe0
 8002310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002312:	2302      	movs	r3, #2
 8002314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231a:	2303      	movs	r3, #3
 800231c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800231e:	2305      	movs	r3, #5
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002322:	f107 0314 	add.w	r3, r7, #20
 8002326:	4619      	mov	r1, r3
 8002328:	4805      	ldr	r0, [pc, #20]	; (8002340 <HAL_SPI_MspInit+0x8c>)
 800232a:	f000 fb7d 	bl	8002a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800232e:	bf00      	nop
 8002330:	3728      	adds	r7, #40	; 0x28
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40013000 	.word	0x40013000
 800233c:	40023800 	.word	0x40023800
 8002340:	40020000 	.word	0x40020000

08002344 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a0e      	ldr	r2, [pc, #56]	; (800238c <HAL_TIM_Base_MspInit+0x48>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d115      	bne.n	8002382 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <HAL_TIM_Base_MspInit+0x4c>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	4a0c      	ldr	r2, [pc, #48]	; (8002390 <HAL_TIM_Base_MspInit+0x4c>)
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	6453      	str	r3, [r2, #68]	; 0x44
 8002366:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <HAL_TIM_Base_MspInit+0x4c>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002372:	2200      	movs	r2, #0
 8002374:	2105      	movs	r1, #5
 8002376:	201b      	movs	r0, #27
 8002378:	f000 fb11 	bl	800299e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800237c:	201b      	movs	r0, #27
 800237e:	f000 fb2a 	bl	80029d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002382:	bf00      	nop
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40010000 	.word	0x40010000
 8002390:	40023800 	.word	0x40023800

08002394 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239c:	f107 030c 	add.w	r3, r7, #12
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a12      	ldr	r2, [pc, #72]	; (80023fc <HAL_TIM_MspPostInit+0x68>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d11e      	bne.n	80023f4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	4b11      	ldr	r3, [pc, #68]	; (8002400 <HAL_TIM_MspPostInit+0x6c>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a10      	ldr	r2, [pc, #64]	; (8002400 <HAL_TIM_MspPostInit+0x6c>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <HAL_TIM_MspPostInit+0x6c>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	60bb      	str	r3, [r7, #8]
 80023d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d8:	2302      	movs	r3, #2
 80023da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e0:	2300      	movs	r3, #0
 80023e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023e4:	2301      	movs	r3, #1
 80023e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e8:	f107 030c 	add.w	r3, r7, #12
 80023ec:	4619      	mov	r1, r3
 80023ee:	4805      	ldr	r0, [pc, #20]	; (8002404 <HAL_TIM_MspPostInit+0x70>)
 80023f0:	f000 fb1a 	bl	8002a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80023f4:	bf00      	nop
 80023f6:	3720      	adds	r7, #32
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40010000 	.word	0x40010000
 8002400:	40023800 	.word	0x40023800
 8002404:	40020000 	.word	0x40020000

08002408 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08a      	sub	sp, #40	; 0x28
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002410:	f107 0314 	add.w	r3, r7, #20
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a19      	ldr	r2, [pc, #100]	; (800248c <HAL_UART_MspInit+0x84>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d12b      	bne.n	8002482 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
 800242e:	4b18      	ldr	r3, [pc, #96]	; (8002490 <HAL_UART_MspInit+0x88>)
 8002430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002432:	4a17      	ldr	r2, [pc, #92]	; (8002490 <HAL_UART_MspInit+0x88>)
 8002434:	f043 0310 	orr.w	r3, r3, #16
 8002438:	6453      	str	r3, [r2, #68]	; 0x44
 800243a:	4b15      	ldr	r3, [pc, #84]	; (8002490 <HAL_UART_MspInit+0x88>)
 800243c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243e:	f003 0310 	and.w	r3, r3, #16
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	4b11      	ldr	r3, [pc, #68]	; (8002490 <HAL_UART_MspInit+0x88>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	4a10      	ldr	r2, [pc, #64]	; (8002490 <HAL_UART_MspInit+0x88>)
 8002450:	f043 0302 	orr.w	r3, r3, #2
 8002454:	6313      	str	r3, [r2, #48]	; 0x30
 8002456:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <HAL_UART_MspInit+0x88>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002462:	23c0      	movs	r3, #192	; 0xc0
 8002464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002466:	2302      	movs	r3, #2
 8002468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800246e:	2303      	movs	r3, #3
 8002470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002472:	2307      	movs	r3, #7
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002476:	f107 0314 	add.w	r3, r7, #20
 800247a:	4619      	mov	r1, r3
 800247c:	4805      	ldr	r0, [pc, #20]	; (8002494 <HAL_UART_MspInit+0x8c>)
 800247e:	f000 fad3 	bl	8002a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002482:	bf00      	nop
 8002484:	3728      	adds	r7, #40	; 0x28
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40011000 	.word	0x40011000
 8002490:	40023800 	.word	0x40023800
 8002494:	40020400 	.word	0x40020400

08002498 <SVC_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024a6:	b480      	push	{r7}
 80024a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024b8:	bf00      	nop
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024c6:	f000 f927 	bl	8002718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
	...

080024d0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024d4:	4802      	ldr	r0, [pc, #8]	; (80024e0 <TIM1_CC_IRQHandler+0x10>)
 80024d6:	f001 fbe3 	bl	8003ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000394 	.word	0x20000394

080024e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  return 1;
 80024e8:	2301      	movs	r3, #1
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <_kill>:

int _kill(int pid, int sig)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024fe:	f011 fa15 	bl	801392c <__errno>
 8002502:	4603      	mov	r3, r0
 8002504:	2216      	movs	r2, #22
 8002506:	601a      	str	r2, [r3, #0]
  return -1;
 8002508:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800250c:	4618      	mov	r0, r3
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <_exit>:

void _exit (int status)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800251c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f7ff ffe7 	bl	80024f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002526:	e7fe      	b.n	8002526 <_exit+0x12>

08002528 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002534:	4618      	mov	r0, r3
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002550:	605a      	str	r2, [r3, #4]
  return 0;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <_isatty>:

int _isatty(int file)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002568:	2301      	movs	r3, #1
}
 800256a:	4618      	mov	r0, r3
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002576:	b480      	push	{r7}
 8002578:	b085      	sub	sp, #20
 800257a:	af00      	add	r7, sp, #0
 800257c:	60f8      	str	r0, [r7, #12]
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002598:	4a14      	ldr	r2, [pc, #80]	; (80025ec <_sbrk+0x5c>)
 800259a:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <_sbrk+0x60>)
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025a4:	4b13      	ldr	r3, [pc, #76]	; (80025f4 <_sbrk+0x64>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d102      	bne.n	80025b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <_sbrk+0x64>)
 80025ae:	4a12      	ldr	r2, [pc, #72]	; (80025f8 <_sbrk+0x68>)
 80025b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025b2:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <_sbrk+0x64>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4413      	add	r3, r2
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d207      	bcs.n	80025d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025c0:	f011 f9b4 	bl	801392c <__errno>
 80025c4:	4603      	mov	r3, r0
 80025c6:	220c      	movs	r2, #12
 80025c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025ce:	e009      	b.n	80025e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025d0:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <_sbrk+0x64>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025d6:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <_sbrk+0x64>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4413      	add	r3, r2
 80025de:	4a05      	ldr	r2, [pc, #20]	; (80025f4 <_sbrk+0x64>)
 80025e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025e2:	68fb      	ldr	r3, [r7, #12]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20020000 	.word	0x20020000
 80025f0:	00000400 	.word	0x00000400
 80025f4:	20000424 	.word	0x20000424
 80025f8:	20000630 	.word	0x20000630

080025fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002600:	4b06      	ldr	r3, [pc, #24]	; (800261c <SystemInit+0x20>)
 8002602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002606:	4a05      	ldr	r2, [pc, #20]	; (800261c <SystemInit+0x20>)
 8002608:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800260c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002610:	bf00      	nop
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002620:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002658 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002624:	480d      	ldr	r0, [pc, #52]	; (800265c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002626:	490e      	ldr	r1, [pc, #56]	; (8002660 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002628:	4a0e      	ldr	r2, [pc, #56]	; (8002664 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800262a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800262c:	e002      	b.n	8002634 <LoopCopyDataInit>

0800262e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800262e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002632:	3304      	adds	r3, #4

08002634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002638:	d3f9      	bcc.n	800262e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800263a:	4a0b      	ldr	r2, [pc, #44]	; (8002668 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800263c:	4c0b      	ldr	r4, [pc, #44]	; (800266c <LoopFillZerobss+0x26>)
  movs r3, #0
 800263e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002640:	e001      	b.n	8002646 <LoopFillZerobss>

08002642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002644:	3204      	adds	r2, #4

08002646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002648:	d3fb      	bcc.n	8002642 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800264a:	f7ff ffd7 	bl	80025fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800264e:	f011 fb63 	bl	8013d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002652:	f7ff fb53 	bl	8001cfc <main>
  bx  lr    
 8002656:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002658:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800265c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002660:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 8002664:	0801688c 	.word	0x0801688c
  ldr r2, =_sbss
 8002668:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 800266c:	20000630 	.word	0x20000630

08002670 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002670:	e7fe      	b.n	8002670 <ADC_IRQHandler>
	...

08002674 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002678:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <HAL_Init+0x40>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a0d      	ldr	r2, [pc, #52]	; (80026b4 <HAL_Init+0x40>)
 800267e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002682:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <HAL_Init+0x40>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a0a      	ldr	r2, [pc, #40]	; (80026b4 <HAL_Init+0x40>)
 800268a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800268e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002690:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <HAL_Init+0x40>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a07      	ldr	r2, [pc, #28]	; (80026b4 <HAL_Init+0x40>)
 8002696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800269a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800269c:	2003      	movs	r0, #3
 800269e:	f000 f973 	bl	8002988 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026a2:	2000      	movs	r0, #0
 80026a4:	f000 f808 	bl	80026b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026a8:	f7ff fddc 	bl	8002264 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40023c00 	.word	0x40023c00

080026b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026c0:	4b12      	ldr	r3, [pc, #72]	; (800270c <HAL_InitTick+0x54>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4b12      	ldr	r3, [pc, #72]	; (8002710 <HAL_InitTick+0x58>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	4619      	mov	r1, r3
 80026ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80026d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 f999 	bl	8002a0e <HAL_SYSTICK_Config>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e00e      	b.n	8002704 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b0f      	cmp	r3, #15
 80026ea:	d80a      	bhi.n	8002702 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026ec:	2200      	movs	r2, #0
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026f4:	f000 f953 	bl	800299e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026f8:	4a06      	ldr	r2, [pc, #24]	; (8002714 <HAL_InitTick+0x5c>)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
 8002700:	e000      	b.n	8002704 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
}
 8002704:	4618      	mov	r0, r3
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	20000050 	.word	0x20000050
 8002710:	20000058 	.word	0x20000058
 8002714:	20000054 	.word	0x20000054

08002718 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800271c:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_IncTick+0x20>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	461a      	mov	r2, r3
 8002722:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_IncTick+0x24>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4413      	add	r3, r2
 8002728:	4a04      	ldr	r2, [pc, #16]	; (800273c <HAL_IncTick+0x24>)
 800272a:	6013      	str	r3, [r2, #0]
}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	20000058 	.word	0x20000058
 800273c:	20000428 	.word	0x20000428

08002740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  return uwTick;
 8002744:	4b03      	ldr	r3, [pc, #12]	; (8002754 <HAL_GetTick+0x14>)
 8002746:	681b      	ldr	r3, [r3, #0]
}
 8002748:	4618      	mov	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	20000428 	.word	0x20000428

08002758 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002760:	f7ff ffee 	bl	8002740 <HAL_GetTick>
 8002764:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002770:	d005      	beq.n	800277e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002772:	4b0a      	ldr	r3, [pc, #40]	; (800279c <HAL_Delay+0x44>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	461a      	mov	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	4413      	add	r3, r2
 800277c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800277e:	bf00      	nop
 8002780:	f7ff ffde 	bl	8002740 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	429a      	cmp	r2, r3
 800278e:	d8f7      	bhi.n	8002780 <HAL_Delay+0x28>
  {
  }
}
 8002790:	bf00      	nop
 8002792:	bf00      	nop
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000058 	.word	0x20000058

080027a0 <__NVIC_SetPriorityGrouping>:
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027b0:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <__NVIC_SetPriorityGrouping+0x44>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027bc:	4013      	ands	r3, r2
 80027be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027d2:	4a04      	ldr	r2, [pc, #16]	; (80027e4 <__NVIC_SetPriorityGrouping+0x44>)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	60d3      	str	r3, [r2, #12]
}
 80027d8:	bf00      	nop
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <__NVIC_GetPriorityGrouping>:
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027ec:	4b04      	ldr	r3, [pc, #16]	; (8002800 <__NVIC_GetPriorityGrouping+0x18>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	0a1b      	lsrs	r3, r3, #8
 80027f2:	f003 0307 	and.w	r3, r3, #7
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <__NVIC_EnableIRQ>:
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800280e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002812:	2b00      	cmp	r3, #0
 8002814:	db0b      	blt.n	800282e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	f003 021f 	and.w	r2, r3, #31
 800281c:	4907      	ldr	r1, [pc, #28]	; (800283c <__NVIC_EnableIRQ+0x38>)
 800281e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002822:	095b      	lsrs	r3, r3, #5
 8002824:	2001      	movs	r0, #1
 8002826:	fa00 f202 	lsl.w	r2, r0, r2
 800282a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	e000e100 	.word	0xe000e100

08002840 <__NVIC_DisableIRQ>:
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	2b00      	cmp	r3, #0
 8002850:	db12      	blt.n	8002878 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	f003 021f 	and.w	r2, r3, #31
 8002858:	490a      	ldr	r1, [pc, #40]	; (8002884 <__NVIC_DisableIRQ+0x44>)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	095b      	lsrs	r3, r3, #5
 8002860:	2001      	movs	r0, #1
 8002862:	fa00 f202 	lsl.w	r2, r0, r2
 8002866:	3320      	adds	r3, #32
 8002868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800286c:	f3bf 8f4f 	dsb	sy
}
 8002870:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002872:	f3bf 8f6f 	isb	sy
}
 8002876:	bf00      	nop
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	e000e100 	.word	0xe000e100

08002888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	6039      	str	r1, [r7, #0]
 8002892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002898:	2b00      	cmp	r3, #0
 800289a:	db0a      	blt.n	80028b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	490c      	ldr	r1, [pc, #48]	; (80028d4 <__NVIC_SetPriority+0x4c>)
 80028a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a6:	0112      	lsls	r2, r2, #4
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	440b      	add	r3, r1
 80028ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028b0:	e00a      	b.n	80028c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	4908      	ldr	r1, [pc, #32]	; (80028d8 <__NVIC_SetPriority+0x50>)
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	3b04      	subs	r3, #4
 80028c0:	0112      	lsls	r2, r2, #4
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	440b      	add	r3, r1
 80028c6:	761a      	strb	r2, [r3, #24]
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	e000e100 	.word	0xe000e100
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028dc:	b480      	push	{r7}
 80028de:	b089      	sub	sp, #36	; 0x24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f1c3 0307 	rsb	r3, r3, #7
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	bf28      	it	cs
 80028fa:	2304      	movcs	r3, #4
 80028fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	3304      	adds	r3, #4
 8002902:	2b06      	cmp	r3, #6
 8002904:	d902      	bls.n	800290c <NVIC_EncodePriority+0x30>
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	3b03      	subs	r3, #3
 800290a:	e000      	b.n	800290e <NVIC_EncodePriority+0x32>
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002910:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43da      	mvns	r2, r3
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	401a      	ands	r2, r3
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002924:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	fa01 f303 	lsl.w	r3, r1, r3
 800292e:	43d9      	mvns	r1, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002934:	4313      	orrs	r3, r2
         );
}
 8002936:	4618      	mov	r0, r3
 8002938:	3724      	adds	r7, #36	; 0x24
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
	...

08002944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3b01      	subs	r3, #1
 8002950:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002954:	d301      	bcc.n	800295a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002956:	2301      	movs	r3, #1
 8002958:	e00f      	b.n	800297a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800295a:	4a0a      	ldr	r2, [pc, #40]	; (8002984 <SysTick_Config+0x40>)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3b01      	subs	r3, #1
 8002960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002962:	210f      	movs	r1, #15
 8002964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002968:	f7ff ff8e 	bl	8002888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800296c:	4b05      	ldr	r3, [pc, #20]	; (8002984 <SysTick_Config+0x40>)
 800296e:	2200      	movs	r2, #0
 8002970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002972:	4b04      	ldr	r3, [pc, #16]	; (8002984 <SysTick_Config+0x40>)
 8002974:	2207      	movs	r2, #7
 8002976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	e000e010 	.word	0xe000e010

08002988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f7ff ff05 	bl	80027a0 <__NVIC_SetPriorityGrouping>
}
 8002996:	bf00      	nop
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800299e:	b580      	push	{r7, lr}
 80029a0:	b086      	sub	sp, #24
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	4603      	mov	r3, r0
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	607a      	str	r2, [r7, #4]
 80029aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029b0:	f7ff ff1a 	bl	80027e8 <__NVIC_GetPriorityGrouping>
 80029b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	68b9      	ldr	r1, [r7, #8]
 80029ba:	6978      	ldr	r0, [r7, #20]
 80029bc:	f7ff ff8e 	bl	80028dc <NVIC_EncodePriority>
 80029c0:	4602      	mov	r2, r0
 80029c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029c6:	4611      	mov	r1, r2
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff ff5d 	bl	8002888 <__NVIC_SetPriority>
}
 80029ce:	bf00      	nop
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b082      	sub	sp, #8
 80029da:	af00      	add	r7, sp, #0
 80029dc:	4603      	mov	r3, r0
 80029de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff ff0d 	bl	8002804 <__NVIC_EnableIRQ>
}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	4603      	mov	r3, r0
 80029fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80029fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff ff1d 	bl	8002840 <__NVIC_DisableIRQ>
}
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff ff94 	bl	8002944 <SysTick_Config>
 8002a1c:	4603      	mov	r3, r0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
	...

08002a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b089      	sub	sp, #36	; 0x24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61fb      	str	r3, [r7, #28]
 8002a42:	e159      	b.n	8002cf8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a44:	2201      	movs	r2, #1
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	4013      	ands	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	f040 8148 	bne.w	8002cf2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d005      	beq.n	8002a7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d130      	bne.n	8002adc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	2203      	movs	r2, #3
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	091b      	lsrs	r3, r3, #4
 8002ac6:	f003 0201 	and.w	r2, r3, #1
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 0303 	and.w	r3, r3, #3
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	d017      	beq.n	8002b18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	2203      	movs	r2, #3
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f003 0303 	and.w	r3, r3, #3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d123      	bne.n	8002b6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	08da      	lsrs	r2, r3, #3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3208      	adds	r2, #8
 8002b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	220f      	movs	r2, #15
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	43db      	mvns	r3, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4013      	ands	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	691a      	ldr	r2, [r3, #16]
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	08da      	lsrs	r2, r3, #3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3208      	adds	r2, #8
 8002b66:	69b9      	ldr	r1, [r7, #24]
 8002b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	2203      	movs	r2, #3
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4013      	ands	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f003 0203 	and.w	r2, r3, #3
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 80a2 	beq.w	8002cf2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	4b57      	ldr	r3, [pc, #348]	; (8002d10 <HAL_GPIO_Init+0x2e8>)
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb6:	4a56      	ldr	r2, [pc, #344]	; (8002d10 <HAL_GPIO_Init+0x2e8>)
 8002bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8002bbe:	4b54      	ldr	r3, [pc, #336]	; (8002d10 <HAL_GPIO_Init+0x2e8>)
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bca:	4a52      	ldr	r2, [pc, #328]	; (8002d14 <HAL_GPIO_Init+0x2ec>)
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	089b      	lsrs	r3, r3, #2
 8002bd0:	3302      	adds	r3, #2
 8002bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	f003 0303 	and.w	r3, r3, #3
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	220f      	movs	r2, #15
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	43db      	mvns	r3, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4013      	ands	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a49      	ldr	r2, [pc, #292]	; (8002d18 <HAL_GPIO_Init+0x2f0>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d019      	beq.n	8002c2a <HAL_GPIO_Init+0x202>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a48      	ldr	r2, [pc, #288]	; (8002d1c <HAL_GPIO_Init+0x2f4>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d013      	beq.n	8002c26 <HAL_GPIO_Init+0x1fe>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a47      	ldr	r2, [pc, #284]	; (8002d20 <HAL_GPIO_Init+0x2f8>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d00d      	beq.n	8002c22 <HAL_GPIO_Init+0x1fa>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a46      	ldr	r2, [pc, #280]	; (8002d24 <HAL_GPIO_Init+0x2fc>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d007      	beq.n	8002c1e <HAL_GPIO_Init+0x1f6>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a45      	ldr	r2, [pc, #276]	; (8002d28 <HAL_GPIO_Init+0x300>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d101      	bne.n	8002c1a <HAL_GPIO_Init+0x1f2>
 8002c16:	2304      	movs	r3, #4
 8002c18:	e008      	b.n	8002c2c <HAL_GPIO_Init+0x204>
 8002c1a:	2307      	movs	r3, #7
 8002c1c:	e006      	b.n	8002c2c <HAL_GPIO_Init+0x204>
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e004      	b.n	8002c2c <HAL_GPIO_Init+0x204>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e002      	b.n	8002c2c <HAL_GPIO_Init+0x204>
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <HAL_GPIO_Init+0x204>
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	69fa      	ldr	r2, [r7, #28]
 8002c2e:	f002 0203 	and.w	r2, r2, #3
 8002c32:	0092      	lsls	r2, r2, #2
 8002c34:	4093      	lsls	r3, r2
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c3c:	4935      	ldr	r1, [pc, #212]	; (8002d14 <HAL_GPIO_Init+0x2ec>)
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	089b      	lsrs	r3, r3, #2
 8002c42:	3302      	adds	r3, #2
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c4a:	4b38      	ldr	r3, [pc, #224]	; (8002d2c <HAL_GPIO_Init+0x304>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	43db      	mvns	r3, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4013      	ands	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c6e:	4a2f      	ldr	r2, [pc, #188]	; (8002d2c <HAL_GPIO_Init+0x304>)
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c74:	4b2d      	ldr	r3, [pc, #180]	; (8002d2c <HAL_GPIO_Init+0x304>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c98:	4a24      	ldr	r2, [pc, #144]	; (8002d2c <HAL_GPIO_Init+0x304>)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c9e:	4b23      	ldr	r3, [pc, #140]	; (8002d2c <HAL_GPIO_Init+0x304>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4013      	ands	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cc2:	4a1a      	ldr	r2, [pc, #104]	; (8002d2c <HAL_GPIO_Init+0x304>)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cc8:	4b18      	ldr	r3, [pc, #96]	; (8002d2c <HAL_GPIO_Init+0x304>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cec:	4a0f      	ldr	r2, [pc, #60]	; (8002d2c <HAL_GPIO_Init+0x304>)
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	61fb      	str	r3, [r7, #28]
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	2b0f      	cmp	r3, #15
 8002cfc:	f67f aea2 	bls.w	8002a44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d00:	bf00      	nop
 8002d02:	bf00      	nop
 8002d04:	3724      	adds	r7, #36	; 0x24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	40023800 	.word	0x40023800
 8002d14:	40013800 	.word	0x40013800
 8002d18:	40020000 	.word	0x40020000
 8002d1c:	40020400 	.word	0x40020400
 8002d20:	40020800 	.word	0x40020800
 8002d24:	40020c00 	.word	0x40020c00
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	40013c00 	.word	0x40013c00

08002d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	807b      	strh	r3, [r7, #2]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d40:	787b      	ldrb	r3, [r7, #1]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d46:	887a      	ldrh	r2, [r7, #2]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d4c:	e003      	b.n	8002d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d4e:	887b      	ldrh	r3, [r7, #2]
 8002d50:	041a      	lsls	r2, r3, #16
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	619a      	str	r2, [r3, #24]
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
	...

08002d64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e267      	b.n	8003246 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d075      	beq.n	8002e6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d82:	4b88      	ldr	r3, [pc, #544]	; (8002fa4 <HAL_RCC_OscConfig+0x240>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 030c 	and.w	r3, r3, #12
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d00c      	beq.n	8002da8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d8e:	4b85      	ldr	r3, [pc, #532]	; (8002fa4 <HAL_RCC_OscConfig+0x240>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	d112      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d9a:	4b82      	ldr	r3, [pc, #520]	; (8002fa4 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002da2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002da6:	d10b      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da8:	4b7e      	ldr	r3, [pc, #504]	; (8002fa4 <HAL_RCC_OscConfig+0x240>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d05b      	beq.n	8002e6c <HAL_RCC_OscConfig+0x108>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d157      	bne.n	8002e6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e242      	b.n	8003246 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc8:	d106      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x74>
 8002dca:	4b76      	ldr	r3, [pc, #472]	; (8002fa4 <HAL_RCC_OscConfig+0x240>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a75      	ldr	r2, [pc, #468]	; (8002fa4 <HAL_RCC_OscConfig+0x240>)
 8002dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	e01d      	b.n	8002e14 <HAL_RCC_OscConfig+0xb0>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002de0:	d10c      	bne.n	8002dfc <HAL_RCC_OscConfig+0x98>
 8002de2:	4b70      	ldr	r3, [pc, #448]	; (8002fa4 <HAL_RCC_OscConfig+0x240>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a6f      	ldr	r2, [pc, #444]	; (8002fa4 <HAL_RCC_OscConfig+0x240>)
 8002de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	4b6d      	ldr	r3, [pc, #436]	; (8002fa4 <HAL_RCC_OscConfig+0x240>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a6c      	ldr	r2, [pc, #432]	; (8002fa4 <HAL_RCC_OscConfig+0x240>)
 8002df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	e00b      	b.n	8002e14 <HAL_RCC_OscConfig+0xb0>
 8002dfc:	4b69      	ldr	r3, [pc, #420]	; (8002fa4 <HAL_RCC_OscConfig+0x240>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a68      	ldr	r2, [pc, #416]	; (8002fa4 <HAL_RCC_OscConfig+0x240>)
 8002e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e06:	6013      	str	r3, [r2, #0]
 8002e08:	4b66      	ldr	r3, [pc, #408]	; (8002fa4 <HAL_RCC_OscConfig+0x240>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a65      	ldr	r2, [pc, #404]	; (8002fa4 <HAL_RCC_OscConfig+0x240>)
 8002e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d013      	beq.n	8002e44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1c:	f7ff fc90 	bl	8002740 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e24:	f7ff fc8c 	bl	8002740 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b64      	cmp	r3, #100	; 0x64
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e207      	b.n	8003246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e36:	4b5b      	ldr	r3, [pc, #364]	; (8002fa4 <HAL_RCC_OscConfig+0x240>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f0      	beq.n	8002e24 <HAL_RCC_OscConfig+0xc0>
 8002e42:	e014      	b.n	8002e6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e44:	f7ff fc7c 	bl	8002740 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e4c:	f7ff fc78 	bl	8002740 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b64      	cmp	r3, #100	; 0x64
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e1f3      	b.n	8003246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e5e:	4b51      	ldr	r3, [pc, #324]	; (8002fa4 <HAL_RCC_OscConfig+0x240>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0xe8>
 8002e6a:	e000      	b.n	8002e6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d063      	beq.n	8002f42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e7a:	4b4a      	ldr	r3, [pc, #296]	; (8002fa4 <HAL_RCC_OscConfig+0x240>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 030c 	and.w	r3, r3, #12
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00b      	beq.n	8002e9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e86:	4b47      	ldr	r3, [pc, #284]	; (8002fa4 <HAL_RCC_OscConfig+0x240>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e8e:	2b08      	cmp	r3, #8
 8002e90:	d11c      	bne.n	8002ecc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e92:	4b44      	ldr	r3, [pc, #272]	; (8002fa4 <HAL_RCC_OscConfig+0x240>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d116      	bne.n	8002ecc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e9e:	4b41      	ldr	r3, [pc, #260]	; (8002fa4 <HAL_RCC_OscConfig+0x240>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d005      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x152>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d001      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e1c7      	b.n	8003246 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb6:	4b3b      	ldr	r3, [pc, #236]	; (8002fa4 <HAL_RCC_OscConfig+0x240>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	4937      	ldr	r1, [pc, #220]	; (8002fa4 <HAL_RCC_OscConfig+0x240>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eca:	e03a      	b.n	8002f42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d020      	beq.n	8002f16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed4:	4b34      	ldr	r3, [pc, #208]	; (8002fa8 <HAL_RCC_OscConfig+0x244>)
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eda:	f7ff fc31 	bl	8002740 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ee2:	f7ff fc2d 	bl	8002740 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e1a8      	b.n	8003246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef4:	4b2b      	ldr	r3, [pc, #172]	; (8002fa4 <HAL_RCC_OscConfig+0x240>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0f0      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f00:	4b28      	ldr	r3, [pc, #160]	; (8002fa4 <HAL_RCC_OscConfig+0x240>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	4925      	ldr	r1, [pc, #148]	; (8002fa4 <HAL_RCC_OscConfig+0x240>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	600b      	str	r3, [r1, #0]
 8002f14:	e015      	b.n	8002f42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f16:	4b24      	ldr	r3, [pc, #144]	; (8002fa8 <HAL_RCC_OscConfig+0x244>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1c:	f7ff fc10 	bl	8002740 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f24:	f7ff fc0c 	bl	8002740 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e187      	b.n	8003246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f36:	4b1b      	ldr	r3, [pc, #108]	; (8002fa4 <HAL_RCC_OscConfig+0x240>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f0      	bne.n	8002f24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0308 	and.w	r3, r3, #8
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d036      	beq.n	8002fbc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d016      	beq.n	8002f84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f56:	4b15      	ldr	r3, [pc, #84]	; (8002fac <HAL_RCC_OscConfig+0x248>)
 8002f58:	2201      	movs	r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f5c:	f7ff fbf0 	bl	8002740 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f64:	f7ff fbec 	bl	8002740 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e167      	b.n	8003246 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f76:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <HAL_RCC_OscConfig+0x240>)
 8002f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0f0      	beq.n	8002f64 <HAL_RCC_OscConfig+0x200>
 8002f82:	e01b      	b.n	8002fbc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f84:	4b09      	ldr	r3, [pc, #36]	; (8002fac <HAL_RCC_OscConfig+0x248>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f8a:	f7ff fbd9 	bl	8002740 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f90:	e00e      	b.n	8002fb0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f92:	f7ff fbd5 	bl	8002740 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d907      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e150      	b.n	8003246 <HAL_RCC_OscConfig+0x4e2>
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	42470000 	.word	0x42470000
 8002fac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb0:	4b88      	ldr	r3, [pc, #544]	; (80031d4 <HAL_RCC_OscConfig+0x470>)
 8002fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1ea      	bne.n	8002f92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 8097 	beq.w	80030f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fce:	4b81      	ldr	r3, [pc, #516]	; (80031d4 <HAL_RCC_OscConfig+0x470>)
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10f      	bne.n	8002ffa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60bb      	str	r3, [r7, #8]
 8002fde:	4b7d      	ldr	r3, [pc, #500]	; (80031d4 <HAL_RCC_OscConfig+0x470>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	4a7c      	ldr	r2, [pc, #496]	; (80031d4 <HAL_RCC_OscConfig+0x470>)
 8002fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fea:	4b7a      	ldr	r3, [pc, #488]	; (80031d4 <HAL_RCC_OscConfig+0x470>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff2:	60bb      	str	r3, [r7, #8]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffa:	4b77      	ldr	r3, [pc, #476]	; (80031d8 <HAL_RCC_OscConfig+0x474>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003002:	2b00      	cmp	r3, #0
 8003004:	d118      	bne.n	8003038 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003006:	4b74      	ldr	r3, [pc, #464]	; (80031d8 <HAL_RCC_OscConfig+0x474>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a73      	ldr	r2, [pc, #460]	; (80031d8 <HAL_RCC_OscConfig+0x474>)
 800300c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003010:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003012:	f7ff fb95 	bl	8002740 <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003018:	e008      	b.n	800302c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800301a:	f7ff fb91 	bl	8002740 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e10c      	b.n	8003246 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302c:	4b6a      	ldr	r3, [pc, #424]	; (80031d8 <HAL_RCC_OscConfig+0x474>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0f0      	beq.n	800301a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d106      	bne.n	800304e <HAL_RCC_OscConfig+0x2ea>
 8003040:	4b64      	ldr	r3, [pc, #400]	; (80031d4 <HAL_RCC_OscConfig+0x470>)
 8003042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003044:	4a63      	ldr	r2, [pc, #396]	; (80031d4 <HAL_RCC_OscConfig+0x470>)
 8003046:	f043 0301 	orr.w	r3, r3, #1
 800304a:	6713      	str	r3, [r2, #112]	; 0x70
 800304c:	e01c      	b.n	8003088 <HAL_RCC_OscConfig+0x324>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2b05      	cmp	r3, #5
 8003054:	d10c      	bne.n	8003070 <HAL_RCC_OscConfig+0x30c>
 8003056:	4b5f      	ldr	r3, [pc, #380]	; (80031d4 <HAL_RCC_OscConfig+0x470>)
 8003058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305a:	4a5e      	ldr	r2, [pc, #376]	; (80031d4 <HAL_RCC_OscConfig+0x470>)
 800305c:	f043 0304 	orr.w	r3, r3, #4
 8003060:	6713      	str	r3, [r2, #112]	; 0x70
 8003062:	4b5c      	ldr	r3, [pc, #368]	; (80031d4 <HAL_RCC_OscConfig+0x470>)
 8003064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003066:	4a5b      	ldr	r2, [pc, #364]	; (80031d4 <HAL_RCC_OscConfig+0x470>)
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	6713      	str	r3, [r2, #112]	; 0x70
 800306e:	e00b      	b.n	8003088 <HAL_RCC_OscConfig+0x324>
 8003070:	4b58      	ldr	r3, [pc, #352]	; (80031d4 <HAL_RCC_OscConfig+0x470>)
 8003072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003074:	4a57      	ldr	r2, [pc, #348]	; (80031d4 <HAL_RCC_OscConfig+0x470>)
 8003076:	f023 0301 	bic.w	r3, r3, #1
 800307a:	6713      	str	r3, [r2, #112]	; 0x70
 800307c:	4b55      	ldr	r3, [pc, #340]	; (80031d4 <HAL_RCC_OscConfig+0x470>)
 800307e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003080:	4a54      	ldr	r2, [pc, #336]	; (80031d4 <HAL_RCC_OscConfig+0x470>)
 8003082:	f023 0304 	bic.w	r3, r3, #4
 8003086:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d015      	beq.n	80030bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003090:	f7ff fb56 	bl	8002740 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003096:	e00a      	b.n	80030ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003098:	f7ff fb52 	bl	8002740 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e0cb      	b.n	8003246 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ae:	4b49      	ldr	r3, [pc, #292]	; (80031d4 <HAL_RCC_OscConfig+0x470>)
 80030b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0ee      	beq.n	8003098 <HAL_RCC_OscConfig+0x334>
 80030ba:	e014      	b.n	80030e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030bc:	f7ff fb40 	bl	8002740 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c2:	e00a      	b.n	80030da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030c4:	f7ff fb3c 	bl	8002740 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e0b5      	b.n	8003246 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030da:	4b3e      	ldr	r3, [pc, #248]	; (80031d4 <HAL_RCC_OscConfig+0x470>)
 80030dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1ee      	bne.n	80030c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030e6:	7dfb      	ldrb	r3, [r7, #23]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d105      	bne.n	80030f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ec:	4b39      	ldr	r3, [pc, #228]	; (80031d4 <HAL_RCC_OscConfig+0x470>)
 80030ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f0:	4a38      	ldr	r2, [pc, #224]	; (80031d4 <HAL_RCC_OscConfig+0x470>)
 80030f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 80a1 	beq.w	8003244 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003102:	4b34      	ldr	r3, [pc, #208]	; (80031d4 <HAL_RCC_OscConfig+0x470>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 030c 	and.w	r3, r3, #12
 800310a:	2b08      	cmp	r3, #8
 800310c:	d05c      	beq.n	80031c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	2b02      	cmp	r3, #2
 8003114:	d141      	bne.n	800319a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003116:	4b31      	ldr	r3, [pc, #196]	; (80031dc <HAL_RCC_OscConfig+0x478>)
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311c:	f7ff fb10 	bl	8002740 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003124:	f7ff fb0c 	bl	8002740 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e087      	b.n	8003246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003136:	4b27      	ldr	r3, [pc, #156]	; (80031d4 <HAL_RCC_OscConfig+0x470>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1f0      	bne.n	8003124 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69da      	ldr	r2, [r3, #28]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	019b      	lsls	r3, r3, #6
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003158:	085b      	lsrs	r3, r3, #1
 800315a:	3b01      	subs	r3, #1
 800315c:	041b      	lsls	r3, r3, #16
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003164:	061b      	lsls	r3, r3, #24
 8003166:	491b      	ldr	r1, [pc, #108]	; (80031d4 <HAL_RCC_OscConfig+0x470>)
 8003168:	4313      	orrs	r3, r2
 800316a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800316c:	4b1b      	ldr	r3, [pc, #108]	; (80031dc <HAL_RCC_OscConfig+0x478>)
 800316e:	2201      	movs	r2, #1
 8003170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003172:	f7ff fae5 	bl	8002740 <HAL_GetTick>
 8003176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003178:	e008      	b.n	800318c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800317a:	f7ff fae1 	bl	8002740 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e05c      	b.n	8003246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800318c:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <HAL_RCC_OscConfig+0x470>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0f0      	beq.n	800317a <HAL_RCC_OscConfig+0x416>
 8003198:	e054      	b.n	8003244 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800319a:	4b10      	ldr	r3, [pc, #64]	; (80031dc <HAL_RCC_OscConfig+0x478>)
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a0:	f7ff face 	bl	8002740 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031a8:	f7ff faca 	bl	8002740 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e045      	b.n	8003246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ba:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <HAL_RCC_OscConfig+0x470>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1f0      	bne.n	80031a8 <HAL_RCC_OscConfig+0x444>
 80031c6:	e03d      	b.n	8003244 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d107      	bne.n	80031e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e038      	b.n	8003246 <HAL_RCC_OscConfig+0x4e2>
 80031d4:	40023800 	.word	0x40023800
 80031d8:	40007000 	.word	0x40007000
 80031dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031e0:	4b1b      	ldr	r3, [pc, #108]	; (8003250 <HAL_RCC_OscConfig+0x4ec>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d028      	beq.n	8003240 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d121      	bne.n	8003240 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003206:	429a      	cmp	r2, r3
 8003208:	d11a      	bne.n	8003240 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003210:	4013      	ands	r3, r2
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003216:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003218:	4293      	cmp	r3, r2
 800321a:	d111      	bne.n	8003240 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003226:	085b      	lsrs	r3, r3, #1
 8003228:	3b01      	subs	r3, #1
 800322a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800322c:	429a      	cmp	r2, r3
 800322e:	d107      	bne.n	8003240 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800323c:	429a      	cmp	r2, r3
 800323e:	d001      	beq.n	8003244 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e000      	b.n	8003246 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3718      	adds	r7, #24
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	40023800 	.word	0x40023800

08003254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e0cc      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003268:	4b68      	ldr	r3, [pc, #416]	; (800340c <HAL_RCC_ClockConfig+0x1b8>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d90c      	bls.n	8003290 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003276:	4b65      	ldr	r3, [pc, #404]	; (800340c <HAL_RCC_ClockConfig+0x1b8>)
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800327e:	4b63      	ldr	r3, [pc, #396]	; (800340c <HAL_RCC_ClockConfig+0x1b8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d001      	beq.n	8003290 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e0b8      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d020      	beq.n	80032de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a8:	4b59      	ldr	r3, [pc, #356]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	4a58      	ldr	r2, [pc, #352]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0308 	and.w	r3, r3, #8
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d005      	beq.n	80032cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032c0:	4b53      	ldr	r3, [pc, #332]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	4a52      	ldr	r2, [pc, #328]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032cc:	4b50      	ldr	r3, [pc, #320]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	494d      	ldr	r1, [pc, #308]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d044      	beq.n	8003374 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d107      	bne.n	8003302 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f2:	4b47      	ldr	r3, [pc, #284]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d119      	bne.n	8003332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e07f      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b02      	cmp	r3, #2
 8003308:	d003      	beq.n	8003312 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800330e:	2b03      	cmp	r3, #3
 8003310:	d107      	bne.n	8003322 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003312:	4b3f      	ldr	r3, [pc, #252]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d109      	bne.n	8003332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e06f      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003322:	4b3b      	ldr	r3, [pc, #236]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e067      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003332:	4b37      	ldr	r3, [pc, #220]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f023 0203 	bic.w	r2, r3, #3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	4934      	ldr	r1, [pc, #208]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 8003340:	4313      	orrs	r3, r2
 8003342:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003344:	f7ff f9fc 	bl	8002740 <HAL_GetTick>
 8003348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334a:	e00a      	b.n	8003362 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800334c:	f7ff f9f8 	bl	8002740 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f241 3288 	movw	r2, #5000	; 0x1388
 800335a:	4293      	cmp	r3, r2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e04f      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003362:	4b2b      	ldr	r3, [pc, #172]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 020c 	and.w	r2, r3, #12
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	429a      	cmp	r2, r3
 8003372:	d1eb      	bne.n	800334c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003374:	4b25      	ldr	r3, [pc, #148]	; (800340c <HAL_RCC_ClockConfig+0x1b8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d20c      	bcs.n	800339c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003382:	4b22      	ldr	r3, [pc, #136]	; (800340c <HAL_RCC_ClockConfig+0x1b8>)
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800338a:	4b20      	ldr	r3, [pc, #128]	; (800340c <HAL_RCC_ClockConfig+0x1b8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d001      	beq.n	800339c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e032      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d008      	beq.n	80033ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a8:	4b19      	ldr	r3, [pc, #100]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	4916      	ldr	r1, [pc, #88]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d009      	beq.n	80033da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033c6:	4b12      	ldr	r3, [pc, #72]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	490e      	ldr	r1, [pc, #56]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033da:	f000 f821 	bl	8003420 <HAL_RCC_GetSysClockFreq>
 80033de:	4602      	mov	r2, r0
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	091b      	lsrs	r3, r3, #4
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	490a      	ldr	r1, [pc, #40]	; (8003414 <HAL_RCC_ClockConfig+0x1c0>)
 80033ec:	5ccb      	ldrb	r3, [r1, r3]
 80033ee:	fa22 f303 	lsr.w	r3, r2, r3
 80033f2:	4a09      	ldr	r2, [pc, #36]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80033f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033f6:	4b09      	ldr	r3, [pc, #36]	; (800341c <HAL_RCC_ClockConfig+0x1c8>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff f95c 	bl	80026b8 <HAL_InitTick>

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40023c00 	.word	0x40023c00
 8003410:	40023800 	.word	0x40023800
 8003414:	08015ffc 	.word	0x08015ffc
 8003418:	20000050 	.word	0x20000050
 800341c:	20000054 	.word	0x20000054

08003420 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003424:	b090      	sub	sp, #64	; 0x40
 8003426:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	637b      	str	r3, [r7, #52]	; 0x34
 800342c:	2300      	movs	r3, #0
 800342e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003430:	2300      	movs	r3, #0
 8003432:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003438:	4b59      	ldr	r3, [pc, #356]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f003 030c 	and.w	r3, r3, #12
 8003440:	2b08      	cmp	r3, #8
 8003442:	d00d      	beq.n	8003460 <HAL_RCC_GetSysClockFreq+0x40>
 8003444:	2b08      	cmp	r3, #8
 8003446:	f200 80a1 	bhi.w	800358c <HAL_RCC_GetSysClockFreq+0x16c>
 800344a:	2b00      	cmp	r3, #0
 800344c:	d002      	beq.n	8003454 <HAL_RCC_GetSysClockFreq+0x34>
 800344e:	2b04      	cmp	r3, #4
 8003450:	d003      	beq.n	800345a <HAL_RCC_GetSysClockFreq+0x3a>
 8003452:	e09b      	b.n	800358c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003454:	4b53      	ldr	r3, [pc, #332]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003456:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003458:	e09b      	b.n	8003592 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800345a:	4b53      	ldr	r3, [pc, #332]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800345c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800345e:	e098      	b.n	8003592 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003460:	4b4f      	ldr	r3, [pc, #316]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003468:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800346a:	4b4d      	ldr	r3, [pc, #308]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d028      	beq.n	80034c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003476:	4b4a      	ldr	r3, [pc, #296]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	099b      	lsrs	r3, r3, #6
 800347c:	2200      	movs	r2, #0
 800347e:	623b      	str	r3, [r7, #32]
 8003480:	627a      	str	r2, [r7, #36]	; 0x24
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003488:	2100      	movs	r1, #0
 800348a:	4b47      	ldr	r3, [pc, #284]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800348c:	fb03 f201 	mul.w	r2, r3, r1
 8003490:	2300      	movs	r3, #0
 8003492:	fb00 f303 	mul.w	r3, r0, r3
 8003496:	4413      	add	r3, r2
 8003498:	4a43      	ldr	r2, [pc, #268]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800349a:	fba0 1202 	umull	r1, r2, r0, r2
 800349e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034a0:	460a      	mov	r2, r1
 80034a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80034a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034a6:	4413      	add	r3, r2
 80034a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ac:	2200      	movs	r2, #0
 80034ae:	61bb      	str	r3, [r7, #24]
 80034b0:	61fa      	str	r2, [r7, #28]
 80034b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80034ba:	f7fd fbff 	bl	8000cbc <__aeabi_uldivmod>
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	4613      	mov	r3, r2
 80034c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034c6:	e053      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034c8:	4b35      	ldr	r3, [pc, #212]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	099b      	lsrs	r3, r3, #6
 80034ce:	2200      	movs	r2, #0
 80034d0:	613b      	str	r3, [r7, #16]
 80034d2:	617a      	str	r2, [r7, #20]
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80034da:	f04f 0b00 	mov.w	fp, #0
 80034de:	4652      	mov	r2, sl
 80034e0:	465b      	mov	r3, fp
 80034e2:	f04f 0000 	mov.w	r0, #0
 80034e6:	f04f 0100 	mov.w	r1, #0
 80034ea:	0159      	lsls	r1, r3, #5
 80034ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034f0:	0150      	lsls	r0, r2, #5
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	ebb2 080a 	subs.w	r8, r2, sl
 80034fa:	eb63 090b 	sbc.w	r9, r3, fp
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800350a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800350e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003512:	ebb2 0408 	subs.w	r4, r2, r8
 8003516:	eb63 0509 	sbc.w	r5, r3, r9
 800351a:	f04f 0200 	mov.w	r2, #0
 800351e:	f04f 0300 	mov.w	r3, #0
 8003522:	00eb      	lsls	r3, r5, #3
 8003524:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003528:	00e2      	lsls	r2, r4, #3
 800352a:	4614      	mov	r4, r2
 800352c:	461d      	mov	r5, r3
 800352e:	eb14 030a 	adds.w	r3, r4, sl
 8003532:	603b      	str	r3, [r7, #0]
 8003534:	eb45 030b 	adc.w	r3, r5, fp
 8003538:	607b      	str	r3, [r7, #4]
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003546:	4629      	mov	r1, r5
 8003548:	028b      	lsls	r3, r1, #10
 800354a:	4621      	mov	r1, r4
 800354c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003550:	4621      	mov	r1, r4
 8003552:	028a      	lsls	r2, r1, #10
 8003554:	4610      	mov	r0, r2
 8003556:	4619      	mov	r1, r3
 8003558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800355a:	2200      	movs	r2, #0
 800355c:	60bb      	str	r3, [r7, #8]
 800355e:	60fa      	str	r2, [r7, #12]
 8003560:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003564:	f7fd fbaa 	bl	8000cbc <__aeabi_uldivmod>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	4613      	mov	r3, r2
 800356e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003570:	4b0b      	ldr	r3, [pc, #44]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	0c1b      	lsrs	r3, r3, #16
 8003576:	f003 0303 	and.w	r3, r3, #3
 800357a:	3301      	adds	r3, #1
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003580:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003584:	fbb2 f3f3 	udiv	r3, r2, r3
 8003588:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800358a:	e002      	b.n	8003592 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800358c:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800358e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003590:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003594:	4618      	mov	r0, r3
 8003596:	3740      	adds	r7, #64	; 0x40
 8003598:	46bd      	mov	sp, r7
 800359a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800359e:	bf00      	nop
 80035a0:	40023800 	.word	0x40023800
 80035a4:	00f42400 	.word	0x00f42400
 80035a8:	017d7840 	.word	0x017d7840

080035ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035b0:	4b03      	ldr	r3, [pc, #12]	; (80035c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80035b2:	681b      	ldr	r3, [r3, #0]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	20000050 	.word	0x20000050

080035c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035c8:	f7ff fff0 	bl	80035ac <HAL_RCC_GetHCLKFreq>
 80035cc:	4602      	mov	r2, r0
 80035ce:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	0a9b      	lsrs	r3, r3, #10
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	4903      	ldr	r1, [pc, #12]	; (80035e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035da:	5ccb      	ldrb	r3, [r1, r3]
 80035dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40023800 	.word	0x40023800
 80035e8:	0801600c 	.word	0x0801600c

080035ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035f0:	f7ff ffdc 	bl	80035ac <HAL_RCC_GetHCLKFreq>
 80035f4:	4602      	mov	r2, r0
 80035f6:	4b05      	ldr	r3, [pc, #20]	; (800360c <HAL_RCC_GetPCLK2Freq+0x20>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	0b5b      	lsrs	r3, r3, #13
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	4903      	ldr	r1, [pc, #12]	; (8003610 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003602:	5ccb      	ldrb	r3, [r1, r3]
 8003604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003608:	4618      	mov	r0, r3
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40023800 	.word	0x40023800
 8003610:	0801600c 	.word	0x0801600c

08003614 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e07b      	b.n	800371e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	2b00      	cmp	r3, #0
 800362c:	d108      	bne.n	8003640 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003636:	d009      	beq.n	800364c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	61da      	str	r2, [r3, #28]
 800363e:	e005      	b.n	800364c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7fe fe24 	bl	80022b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003682:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003694:	431a      	orrs	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	431a      	orrs	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036bc:	431a      	orrs	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d0:	ea42 0103 	orr.w	r1, r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	0c1b      	lsrs	r3, r3, #16
 80036ea:	f003 0104 	and.w	r1, r3, #4
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	f003 0210 	and.w	r2, r3, #16
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	69da      	ldr	r2, [r3, #28]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800370c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b088      	sub	sp, #32
 800372a:	af00      	add	r7, sp, #0
 800372c:	60f8      	str	r0, [r7, #12]
 800372e:	60b9      	str	r1, [r7, #8]
 8003730:	603b      	str	r3, [r7, #0]
 8003732:	4613      	mov	r3, r2
 8003734:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003736:	2300      	movs	r3, #0
 8003738:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003740:	2b01      	cmp	r3, #1
 8003742:	d101      	bne.n	8003748 <HAL_SPI_Transmit+0x22>
 8003744:	2302      	movs	r3, #2
 8003746:	e126      	b.n	8003996 <HAL_SPI_Transmit+0x270>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003750:	f7fe fff6 	bl	8002740 <HAL_GetTick>
 8003754:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003756:	88fb      	ldrh	r3, [r7, #6]
 8003758:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b01      	cmp	r3, #1
 8003764:	d002      	beq.n	800376c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003766:	2302      	movs	r3, #2
 8003768:	77fb      	strb	r3, [r7, #31]
    goto error;
 800376a:	e10b      	b.n	8003984 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d002      	beq.n	8003778 <HAL_SPI_Transmit+0x52>
 8003772:	88fb      	ldrh	r3, [r7, #6]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d102      	bne.n	800377e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800377c:	e102      	b.n	8003984 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2203      	movs	r2, #3
 8003782:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	88fa      	ldrh	r2, [r7, #6]
 8003796:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	88fa      	ldrh	r2, [r7, #6]
 800379c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037c4:	d10f      	bne.n	80037e6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f0:	2b40      	cmp	r3, #64	; 0x40
 80037f2:	d007      	beq.n	8003804 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003802:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800380c:	d14b      	bne.n	80038a6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d002      	beq.n	800381c <HAL_SPI_Transmit+0xf6>
 8003816:	8afb      	ldrh	r3, [r7, #22]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d13e      	bne.n	800389a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003820:	881a      	ldrh	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382c:	1c9a      	adds	r2, r3, #2
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003836:	b29b      	uxth	r3, r3
 8003838:	3b01      	subs	r3, #1
 800383a:	b29a      	uxth	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003840:	e02b      	b.n	800389a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b02      	cmp	r3, #2
 800384e:	d112      	bne.n	8003876 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003854:	881a      	ldrh	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003860:	1c9a      	adds	r2, r3, #2
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800386a:	b29b      	uxth	r3, r3
 800386c:	3b01      	subs	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	86da      	strh	r2, [r3, #54]	; 0x36
 8003874:	e011      	b.n	800389a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003876:	f7fe ff63 	bl	8002740 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	d803      	bhi.n	800388e <HAL_SPI_Transmit+0x168>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800388c:	d102      	bne.n	8003894 <HAL_SPI_Transmit+0x16e>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d102      	bne.n	800389a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003898:	e074      	b.n	8003984 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800389e:	b29b      	uxth	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1ce      	bne.n	8003842 <HAL_SPI_Transmit+0x11c>
 80038a4:	e04c      	b.n	8003940 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d002      	beq.n	80038b4 <HAL_SPI_Transmit+0x18e>
 80038ae:	8afb      	ldrh	r3, [r7, #22]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d140      	bne.n	8003936 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	330c      	adds	r3, #12
 80038be:	7812      	ldrb	r2, [r2, #0]
 80038c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c6:	1c5a      	adds	r2, r3, #1
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	3b01      	subs	r3, #1
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80038da:	e02c      	b.n	8003936 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d113      	bne.n	8003912 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	330c      	adds	r3, #12
 80038f4:	7812      	ldrb	r2, [r2, #0]
 80038f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fc:	1c5a      	adds	r2, r3, #1
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003906:	b29b      	uxth	r3, r3
 8003908:	3b01      	subs	r3, #1
 800390a:	b29a      	uxth	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003910:	e011      	b.n	8003936 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003912:	f7fe ff15 	bl	8002740 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	429a      	cmp	r2, r3
 8003920:	d803      	bhi.n	800392a <HAL_SPI_Transmit+0x204>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003928:	d102      	bne.n	8003930 <HAL_SPI_Transmit+0x20a>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d102      	bne.n	8003936 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003934:	e026      	b.n	8003984 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800393a:	b29b      	uxth	r3, r3
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1cd      	bne.n	80038dc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	6839      	ldr	r1, [r7, #0]
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 f8c1 	bl	8003acc <SPI_EndRxTxTransaction>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2220      	movs	r2, #32
 8003954:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10a      	bne.n	8003974 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800395e:	2300      	movs	r3, #0
 8003960:	613b      	str	r3, [r7, #16]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	613b      	str	r3, [r7, #16]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	613b      	str	r3, [r7, #16]
 8003972:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	77fb      	strb	r3, [r7, #31]
 8003980:	e000      	b.n	8003984 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003982:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003994:	7ffb      	ldrb	r3, [r7, #31]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3720      	adds	r7, #32
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800399e:	b480      	push	{r7}
 80039a0:	b083      	sub	sp, #12
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039ac:	b2db      	uxtb	r3, r3
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
	...

080039bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b088      	sub	sp, #32
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	603b      	str	r3, [r7, #0]
 80039c8:	4613      	mov	r3, r2
 80039ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039cc:	f7fe feb8 	bl	8002740 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d4:	1a9b      	subs	r3, r3, r2
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	4413      	add	r3, r2
 80039da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039dc:	f7fe feb0 	bl	8002740 <HAL_GetTick>
 80039e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039e2:	4b39      	ldr	r3, [pc, #228]	; (8003ac8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	015b      	lsls	r3, r3, #5
 80039e8:	0d1b      	lsrs	r3, r3, #20
 80039ea:	69fa      	ldr	r2, [r7, #28]
 80039ec:	fb02 f303 	mul.w	r3, r2, r3
 80039f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039f2:	e054      	b.n	8003a9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039fa:	d050      	beq.n	8003a9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039fc:	f7fe fea0 	bl	8002740 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	69fa      	ldr	r2, [r7, #28]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d902      	bls.n	8003a12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d13d      	bne.n	8003a8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a2a:	d111      	bne.n	8003a50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a34:	d004      	beq.n	8003a40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a3e:	d107      	bne.n	8003a50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a58:	d10f      	bne.n	8003a7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e017      	b.n	8003abe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	bf0c      	ite	eq
 8003aae:	2301      	moveq	r3, #1
 8003ab0:	2300      	movne	r3, #0
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	79fb      	ldrb	r3, [r7, #7]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d19b      	bne.n	80039f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3720      	adds	r7, #32
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20000050 	.word	0x20000050

08003acc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003ad8:	4b1b      	ldr	r3, [pc, #108]	; (8003b48 <SPI_EndRxTxTransaction+0x7c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a1b      	ldr	r2, [pc, #108]	; (8003b4c <SPI_EndRxTxTransaction+0x80>)
 8003ade:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae2:	0d5b      	lsrs	r3, r3, #21
 8003ae4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ae8:	fb02 f303 	mul.w	r3, r2, r3
 8003aec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003af6:	d112      	bne.n	8003b1e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2200      	movs	r2, #0
 8003b00:	2180      	movs	r1, #128	; 0x80
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f7ff ff5a 	bl	80039bc <SPI_WaitFlagStateUntilTimeout>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d016      	beq.n	8003b3c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b12:	f043 0220 	orr.w	r2, r3, #32
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e00f      	b.n	8003b3e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00a      	beq.n	8003b3a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b34:	2b80      	cmp	r3, #128	; 0x80
 8003b36:	d0f2      	beq.n	8003b1e <SPI_EndRxTxTransaction+0x52>
 8003b38:	e000      	b.n	8003b3c <SPI_EndRxTxTransaction+0x70>
        break;
 8003b3a:	bf00      	nop
  }

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	20000050 	.word	0x20000050
 8003b4c:	165e9f81 	.word	0x165e9f81

08003b50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e041      	b.n	8003be6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d106      	bne.n	8003b7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7fe fbe4 	bl	8002344 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4610      	mov	r0, r2
 8003b90:	f000 fb26 	bl	80041e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b082      	sub	sp, #8
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e041      	b.n	8003c84 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d106      	bne.n	8003c1a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 f839 	bl	8003c8c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	f000 fad7 	bl	80041e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d122      	bne.n	8003cfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d11b      	bne.n	8003cfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f06f 0202 	mvn.w	r2, #2
 8003ccc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	f003 0303 	and.w	r3, r3, #3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 fa5d 	bl	80041a2 <HAL_TIM_IC_CaptureCallback>
 8003ce8:	e005      	b.n	8003cf6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 fa4f 	bl	800418e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 fa60 	bl	80041b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	f003 0304 	and.w	r3, r3, #4
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d122      	bne.n	8003d50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b04      	cmp	r3, #4
 8003d16:	d11b      	bne.n	8003d50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f06f 0204 	mvn.w	r2, #4
 8003d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2202      	movs	r2, #2
 8003d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 fa33 	bl	80041a2 <HAL_TIM_IC_CaptureCallback>
 8003d3c:	e005      	b.n	8003d4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 fa25 	bl	800418e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 fa36 	bl	80041b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b08      	cmp	r3, #8
 8003d5c:	d122      	bne.n	8003da4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f003 0308 	and.w	r3, r3, #8
 8003d68:	2b08      	cmp	r3, #8
 8003d6a:	d11b      	bne.n	8003da4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f06f 0208 	mvn.w	r2, #8
 8003d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2204      	movs	r2, #4
 8003d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fa09 	bl	80041a2 <HAL_TIM_IC_CaptureCallback>
 8003d90:	e005      	b.n	8003d9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f9fb 	bl	800418e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 fa0c 	bl	80041b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	f003 0310 	and.w	r3, r3, #16
 8003dae:	2b10      	cmp	r3, #16
 8003db0:	d122      	bne.n	8003df8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f003 0310 	and.w	r3, r3, #16
 8003dbc:	2b10      	cmp	r3, #16
 8003dbe:	d11b      	bne.n	8003df8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f06f 0210 	mvn.w	r2, #16
 8003dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2208      	movs	r2, #8
 8003dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f9df 	bl	80041a2 <HAL_TIM_IC_CaptureCallback>
 8003de4:	e005      	b.n	8003df2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f9d1 	bl	800418e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f9e2 	bl	80041b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d10e      	bne.n	8003e24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d107      	bne.n	8003e24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f06f 0201 	mvn.w	r2, #1
 8003e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f9ab 	bl	800417a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e2e:	2b80      	cmp	r3, #128	; 0x80
 8003e30:	d10e      	bne.n	8003e50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3c:	2b80      	cmp	r3, #128	; 0x80
 8003e3e:	d107      	bne.n	8003e50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 fdca 	bl	80049e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5a:	2b40      	cmp	r3, #64	; 0x40
 8003e5c:	d10e      	bne.n	8003e7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e68:	2b40      	cmp	r3, #64	; 0x40
 8003e6a:	d107      	bne.n	8003e7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f9a7 	bl	80041ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	f003 0320 	and.w	r3, r3, #32
 8003e86:	2b20      	cmp	r3, #32
 8003e88:	d10e      	bne.n	8003ea8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f003 0320 	and.w	r3, r3, #32
 8003e94:	2b20      	cmp	r3, #32
 8003e96:	d107      	bne.n	8003ea8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f06f 0220 	mvn.w	r2, #32
 8003ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 fd94 	bl	80049d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ea8:	bf00      	nop
 8003eaa:	3708      	adds	r7, #8
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d101      	bne.n	8003ece <HAL_TIM_OC_ConfigChannel+0x1e>
 8003eca:	2302      	movs	r3, #2
 8003ecc:	e048      	b.n	8003f60 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b0c      	cmp	r3, #12
 8003eda:	d839      	bhi.n	8003f50 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003edc:	a201      	add	r2, pc, #4	; (adr r2, 8003ee4 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee2:	bf00      	nop
 8003ee4:	08003f19 	.word	0x08003f19
 8003ee8:	08003f51 	.word	0x08003f51
 8003eec:	08003f51 	.word	0x08003f51
 8003ef0:	08003f51 	.word	0x08003f51
 8003ef4:	08003f27 	.word	0x08003f27
 8003ef8:	08003f51 	.word	0x08003f51
 8003efc:	08003f51 	.word	0x08003f51
 8003f00:	08003f51 	.word	0x08003f51
 8003f04:	08003f35 	.word	0x08003f35
 8003f08:	08003f51 	.word	0x08003f51
 8003f0c:	08003f51 	.word	0x08003f51
 8003f10:	08003f51 	.word	0x08003f51
 8003f14:	08003f43 	.word	0x08003f43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68b9      	ldr	r1, [r7, #8]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 f9de 	bl	80042e0 <TIM_OC1_SetConfig>
      break;
 8003f24:	e017      	b.n	8003f56 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68b9      	ldr	r1, [r7, #8]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 fa3d 	bl	80043ac <TIM_OC2_SetConfig>
      break;
 8003f32:	e010      	b.n	8003f56 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68b9      	ldr	r1, [r7, #8]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 faa2 	bl	8004484 <TIM_OC3_SetConfig>
      break;
 8003f40:	e009      	b.n	8003f56 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68b9      	ldr	r1, [r7, #8]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 fb05 	bl	8004558 <TIM_OC4_SetConfig>
      break;
 8003f4e:	e002      	b.n	8003f56 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	75fb      	strb	r3, [r7, #23]
      break;
 8003f54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3718      	adds	r7, #24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d101      	bne.n	8003f84 <HAL_TIM_ConfigClockSource+0x1c>
 8003f80:	2302      	movs	r3, #2
 8003f82:	e0b4      	b.n	80040ee <HAL_TIM_ConfigClockSource+0x186>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003faa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fbc:	d03e      	beq.n	800403c <HAL_TIM_ConfigClockSource+0xd4>
 8003fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc2:	f200 8087 	bhi.w	80040d4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fca:	f000 8086 	beq.w	80040da <HAL_TIM_ConfigClockSource+0x172>
 8003fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd2:	d87f      	bhi.n	80040d4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fd4:	2b70      	cmp	r3, #112	; 0x70
 8003fd6:	d01a      	beq.n	800400e <HAL_TIM_ConfigClockSource+0xa6>
 8003fd8:	2b70      	cmp	r3, #112	; 0x70
 8003fda:	d87b      	bhi.n	80040d4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fdc:	2b60      	cmp	r3, #96	; 0x60
 8003fde:	d050      	beq.n	8004082 <HAL_TIM_ConfigClockSource+0x11a>
 8003fe0:	2b60      	cmp	r3, #96	; 0x60
 8003fe2:	d877      	bhi.n	80040d4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe4:	2b50      	cmp	r3, #80	; 0x50
 8003fe6:	d03c      	beq.n	8004062 <HAL_TIM_ConfigClockSource+0xfa>
 8003fe8:	2b50      	cmp	r3, #80	; 0x50
 8003fea:	d873      	bhi.n	80040d4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fec:	2b40      	cmp	r3, #64	; 0x40
 8003fee:	d058      	beq.n	80040a2 <HAL_TIM_ConfigClockSource+0x13a>
 8003ff0:	2b40      	cmp	r3, #64	; 0x40
 8003ff2:	d86f      	bhi.n	80040d4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ff4:	2b30      	cmp	r3, #48	; 0x30
 8003ff6:	d064      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0x15a>
 8003ff8:	2b30      	cmp	r3, #48	; 0x30
 8003ffa:	d86b      	bhi.n	80040d4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ffc:	2b20      	cmp	r3, #32
 8003ffe:	d060      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004000:	2b20      	cmp	r3, #32
 8004002:	d867      	bhi.n	80040d4 <HAL_TIM_ConfigClockSource+0x16c>
 8004004:	2b00      	cmp	r3, #0
 8004006:	d05c      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004008:	2b10      	cmp	r3, #16
 800400a:	d05a      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0x15a>
 800400c:	e062      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6818      	ldr	r0, [r3, #0]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	6899      	ldr	r1, [r3, #8]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f000 fbf6 	bl	800480e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004030:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	609a      	str	r2, [r3, #8]
      break;
 800403a:	e04f      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6818      	ldr	r0, [r3, #0]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	6899      	ldr	r1, [r3, #8]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f000 fbdf 	bl	800480e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800405e:	609a      	str	r2, [r3, #8]
      break;
 8004060:	e03c      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6818      	ldr	r0, [r3, #0]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	6859      	ldr	r1, [r3, #4]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	461a      	mov	r2, r3
 8004070:	f000 fb53 	bl	800471a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2150      	movs	r1, #80	; 0x50
 800407a:	4618      	mov	r0, r3
 800407c:	f000 fbac 	bl	80047d8 <TIM_ITRx_SetConfig>
      break;
 8004080:	e02c      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6818      	ldr	r0, [r3, #0]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	6859      	ldr	r1, [r3, #4]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	461a      	mov	r2, r3
 8004090:	f000 fb72 	bl	8004778 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2160      	movs	r1, #96	; 0x60
 800409a:	4618      	mov	r0, r3
 800409c:	f000 fb9c 	bl	80047d8 <TIM_ITRx_SetConfig>
      break;
 80040a0:	e01c      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	6859      	ldr	r1, [r3, #4]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	461a      	mov	r2, r3
 80040b0:	f000 fb33 	bl	800471a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2140      	movs	r1, #64	; 0x40
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 fb8c 	bl	80047d8 <TIM_ITRx_SetConfig>
      break;
 80040c0:	e00c      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4619      	mov	r1, r3
 80040cc:	4610      	mov	r0, r2
 80040ce:	f000 fb83 	bl	80047d8 <TIM_ITRx_SetConfig>
      break;
 80040d2:	e003      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	73fb      	strb	r3, [r7, #15]
      break;
 80040d8:	e000      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b082      	sub	sp, #8
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
 80040fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004106:	2b01      	cmp	r3, #1
 8004108:	d101      	bne.n	800410e <HAL_TIM_SlaveConfigSynchro+0x18>
 800410a:	2302      	movs	r3, #2
 800410c:	e031      	b.n	8004172 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2202      	movs	r2, #2
 800411a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800411e:	6839      	ldr	r1, [r7, #0]
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 fa69 	bl	80045f8 <TIM_SlaveTimer_SetConfig>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d009      	beq.n	8004140 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e018      	b.n	8004172 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68da      	ldr	r2, [r3, #12]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800414e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800415e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004182:	bf00      	nop
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004196:	bf00      	nop
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b083      	sub	sp, #12
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
	...

080041e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a34      	ldr	r2, [pc, #208]	; (80042c4 <TIM_Base_SetConfig+0xe4>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d00f      	beq.n	8004218 <TIM_Base_SetConfig+0x38>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041fe:	d00b      	beq.n	8004218 <TIM_Base_SetConfig+0x38>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a31      	ldr	r2, [pc, #196]	; (80042c8 <TIM_Base_SetConfig+0xe8>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d007      	beq.n	8004218 <TIM_Base_SetConfig+0x38>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a30      	ldr	r2, [pc, #192]	; (80042cc <TIM_Base_SetConfig+0xec>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d003      	beq.n	8004218 <TIM_Base_SetConfig+0x38>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a2f      	ldr	r2, [pc, #188]	; (80042d0 <TIM_Base_SetConfig+0xf0>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d108      	bne.n	800422a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800421e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	4313      	orrs	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a25      	ldr	r2, [pc, #148]	; (80042c4 <TIM_Base_SetConfig+0xe4>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d01b      	beq.n	800426a <TIM_Base_SetConfig+0x8a>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004238:	d017      	beq.n	800426a <TIM_Base_SetConfig+0x8a>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a22      	ldr	r2, [pc, #136]	; (80042c8 <TIM_Base_SetConfig+0xe8>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d013      	beq.n	800426a <TIM_Base_SetConfig+0x8a>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a21      	ldr	r2, [pc, #132]	; (80042cc <TIM_Base_SetConfig+0xec>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d00f      	beq.n	800426a <TIM_Base_SetConfig+0x8a>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a20      	ldr	r2, [pc, #128]	; (80042d0 <TIM_Base_SetConfig+0xf0>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d00b      	beq.n	800426a <TIM_Base_SetConfig+0x8a>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a1f      	ldr	r2, [pc, #124]	; (80042d4 <TIM_Base_SetConfig+0xf4>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d007      	beq.n	800426a <TIM_Base_SetConfig+0x8a>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a1e      	ldr	r2, [pc, #120]	; (80042d8 <TIM_Base_SetConfig+0xf8>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d003      	beq.n	800426a <TIM_Base_SetConfig+0x8a>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a1d      	ldr	r2, [pc, #116]	; (80042dc <TIM_Base_SetConfig+0xfc>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d108      	bne.n	800427c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004270:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	4313      	orrs	r3, r2
 800427a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	4313      	orrs	r3, r2
 8004288:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a08      	ldr	r2, [pc, #32]	; (80042c4 <TIM_Base_SetConfig+0xe4>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d103      	bne.n	80042b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	615a      	str	r2, [r3, #20]
}
 80042b6:	bf00      	nop
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	40010000 	.word	0x40010000
 80042c8:	40000400 	.word	0x40000400
 80042cc:	40000800 	.word	0x40000800
 80042d0:	40000c00 	.word	0x40000c00
 80042d4:	40014000 	.word	0x40014000
 80042d8:	40014400 	.word	0x40014400
 80042dc:	40014800 	.word	0x40014800

080042e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b087      	sub	sp, #28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	f023 0201 	bic.w	r2, r3, #1
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f023 0303 	bic.w	r3, r3, #3
 8004316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	4313      	orrs	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f023 0302 	bic.w	r3, r3, #2
 8004328:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	4313      	orrs	r3, r2
 8004332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a1c      	ldr	r2, [pc, #112]	; (80043a8 <TIM_OC1_SetConfig+0xc8>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d10c      	bne.n	8004356 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	f023 0308 	bic.w	r3, r3, #8
 8004342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	4313      	orrs	r3, r2
 800434c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f023 0304 	bic.w	r3, r3, #4
 8004354:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a13      	ldr	r2, [pc, #76]	; (80043a8 <TIM_OC1_SetConfig+0xc8>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d111      	bne.n	8004382 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004364:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800436c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	4313      	orrs	r3, r2
 8004376:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	4313      	orrs	r3, r2
 8004380:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	621a      	str	r2, [r3, #32]
}
 800439c:	bf00      	nop
 800439e:	371c      	adds	r7, #28
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	40010000 	.word	0x40010000

080043ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	f023 0210 	bic.w	r2, r3, #16
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	021b      	lsls	r3, r3, #8
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	f023 0320 	bic.w	r3, r3, #32
 80043f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	4313      	orrs	r3, r2
 8004402:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a1e      	ldr	r2, [pc, #120]	; (8004480 <TIM_OC2_SetConfig+0xd4>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d10d      	bne.n	8004428 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	011b      	lsls	r3, r3, #4
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	4313      	orrs	r3, r2
 800441e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004426:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a15      	ldr	r2, [pc, #84]	; (8004480 <TIM_OC2_SetConfig+0xd4>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d113      	bne.n	8004458 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004436:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800443e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	4313      	orrs	r3, r2
 800444a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	621a      	str	r2, [r3, #32]
}
 8004472:	bf00      	nop
 8004474:	371c      	adds	r7, #28
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	40010000 	.word	0x40010000

08004484 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004484:	b480      	push	{r7}
 8004486:	b087      	sub	sp, #28
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f023 0303 	bic.w	r3, r3, #3
 80044ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	021b      	lsls	r3, r3, #8
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a1d      	ldr	r2, [pc, #116]	; (8004554 <TIM_OC3_SetConfig+0xd0>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d10d      	bne.n	80044fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	021b      	lsls	r3, r3, #8
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a14      	ldr	r2, [pc, #80]	; (8004554 <TIM_OC3_SetConfig+0xd0>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d113      	bne.n	800452e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800450c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004514:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	011b      	lsls	r3, r3, #4
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	4313      	orrs	r3, r2
 8004520:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	4313      	orrs	r3, r2
 800452c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	621a      	str	r2, [r3, #32]
}
 8004548:	bf00      	nop
 800454a:	371c      	adds	r7, #28
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	40010000 	.word	0x40010000

08004558 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004558:	b480      	push	{r7}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800458e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	021b      	lsls	r3, r3, #8
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	4313      	orrs	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	031b      	lsls	r3, r3, #12
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a10      	ldr	r2, [pc, #64]	; (80045f4 <TIM_OC4_SetConfig+0x9c>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d109      	bne.n	80045cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	019b      	lsls	r3, r3, #6
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	621a      	str	r2, [r3, #32]
}
 80045e6:	bf00      	nop
 80045e8:	371c      	adds	r7, #28
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	40010000 	.word	0x40010000

080045f8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004602:	2300      	movs	r3, #0
 8004604:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004614:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4313      	orrs	r3, r2
 800461e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	f023 0307 	bic.w	r3, r3, #7
 8004626:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	4313      	orrs	r3, r2
 8004630:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	2b70      	cmp	r3, #112	; 0x70
 8004640:	d01a      	beq.n	8004678 <TIM_SlaveTimer_SetConfig+0x80>
 8004642:	2b70      	cmp	r3, #112	; 0x70
 8004644:	d860      	bhi.n	8004708 <TIM_SlaveTimer_SetConfig+0x110>
 8004646:	2b60      	cmp	r3, #96	; 0x60
 8004648:	d054      	beq.n	80046f4 <TIM_SlaveTimer_SetConfig+0xfc>
 800464a:	2b60      	cmp	r3, #96	; 0x60
 800464c:	d85c      	bhi.n	8004708 <TIM_SlaveTimer_SetConfig+0x110>
 800464e:	2b50      	cmp	r3, #80	; 0x50
 8004650:	d046      	beq.n	80046e0 <TIM_SlaveTimer_SetConfig+0xe8>
 8004652:	2b50      	cmp	r3, #80	; 0x50
 8004654:	d858      	bhi.n	8004708 <TIM_SlaveTimer_SetConfig+0x110>
 8004656:	2b40      	cmp	r3, #64	; 0x40
 8004658:	d019      	beq.n	800468e <TIM_SlaveTimer_SetConfig+0x96>
 800465a:	2b40      	cmp	r3, #64	; 0x40
 800465c:	d854      	bhi.n	8004708 <TIM_SlaveTimer_SetConfig+0x110>
 800465e:	2b30      	cmp	r3, #48	; 0x30
 8004660:	d055      	beq.n	800470e <TIM_SlaveTimer_SetConfig+0x116>
 8004662:	2b30      	cmp	r3, #48	; 0x30
 8004664:	d850      	bhi.n	8004708 <TIM_SlaveTimer_SetConfig+0x110>
 8004666:	2b20      	cmp	r3, #32
 8004668:	d051      	beq.n	800470e <TIM_SlaveTimer_SetConfig+0x116>
 800466a:	2b20      	cmp	r3, #32
 800466c:	d84c      	bhi.n	8004708 <TIM_SlaveTimer_SetConfig+0x110>
 800466e:	2b00      	cmp	r3, #0
 8004670:	d04d      	beq.n	800470e <TIM_SlaveTimer_SetConfig+0x116>
 8004672:	2b10      	cmp	r3, #16
 8004674:	d04b      	beq.n	800470e <TIM_SlaveTimer_SetConfig+0x116>
 8004676:	e047      	b.n	8004708 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6818      	ldr	r0, [r3, #0]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	68d9      	ldr	r1, [r3, #12]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	f000 f8c1 	bl	800480e <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800468c:	e040      	b.n	8004710 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2b05      	cmp	r3, #5
 8004694:	d101      	bne.n	800469a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e03b      	b.n	8004712 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6a1a      	ldr	r2, [r3, #32]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0201 	bic.w	r2, r2, #1
 80046b0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046c0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	011b      	lsls	r3, r3, #4
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	621a      	str	r2, [r3, #32]
      break;
 80046de:	e017      	b.n	8004710 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6818      	ldr	r0, [r3, #0]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	6899      	ldr	r1, [r3, #8]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	461a      	mov	r2, r3
 80046ee:	f000 f814 	bl	800471a <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80046f2:	e00d      	b.n	8004710 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6818      	ldr	r0, [r3, #0]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	6899      	ldr	r1, [r3, #8]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	461a      	mov	r2, r3
 8004702:	f000 f839 	bl	8004778 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004706:	e003      	b.n	8004710 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	75fb      	strb	r3, [r7, #23]
      break;
 800470c:	e000      	b.n	8004710 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800470e:	bf00      	nop
  }

  return status;
 8004710:	7dfb      	ldrb	r3, [r7, #23]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3718      	adds	r7, #24
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800471a:	b480      	push	{r7}
 800471c:	b087      	sub	sp, #28
 800471e:	af00      	add	r7, sp, #0
 8004720:	60f8      	str	r0, [r7, #12]
 8004722:	60b9      	str	r1, [r7, #8]
 8004724:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	f023 0201 	bic.w	r2, r3, #1
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004744:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	011b      	lsls	r3, r3, #4
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	4313      	orrs	r3, r2
 800474e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f023 030a 	bic.w	r3, r3, #10
 8004756:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	4313      	orrs	r3, r2
 800475e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	621a      	str	r2, [r3, #32]
}
 800476c:	bf00      	nop
 800476e:	371c      	adds	r7, #28
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004778:	b480      	push	{r7}
 800477a:	b087      	sub	sp, #28
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	f023 0210 	bic.w	r2, r3, #16
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	031b      	lsls	r3, r3, #12
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	011b      	lsls	r3, r3, #4
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	4313      	orrs	r3, r2
 80047be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	621a      	str	r2, [r3, #32]
}
 80047cc:	bf00      	nop
 80047ce:	371c      	adds	r7, #28
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	f043 0307 	orr.w	r3, r3, #7
 80047fa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	609a      	str	r2, [r3, #8]
}
 8004802:	bf00      	nop
 8004804:	3714      	adds	r7, #20
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800480e:	b480      	push	{r7}
 8004810:	b087      	sub	sp, #28
 8004812:	af00      	add	r7, sp, #0
 8004814:	60f8      	str	r0, [r7, #12]
 8004816:	60b9      	str	r1, [r7, #8]
 8004818:	607a      	str	r2, [r7, #4]
 800481a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004828:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	021a      	lsls	r2, r3, #8
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	431a      	orrs	r2, r3
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	4313      	orrs	r3, r2
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	4313      	orrs	r3, r2
 800483a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	609a      	str	r2, [r3, #8]
}
 8004842:	bf00      	nop
 8004844:	371c      	adds	r7, #28
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
	...

08004850 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004860:	2b01      	cmp	r3, #1
 8004862:	d101      	bne.n	8004868 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004864:	2302      	movs	r3, #2
 8004866:	e050      	b.n	800490a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800488e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	4313      	orrs	r3, r2
 8004898:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a1c      	ldr	r2, [pc, #112]	; (8004918 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d018      	beq.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b4:	d013      	beq.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a18      	ldr	r2, [pc, #96]	; (800491c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d00e      	beq.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a16      	ldr	r2, [pc, #88]	; (8004920 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d009      	beq.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a15      	ldr	r2, [pc, #84]	; (8004924 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d004      	beq.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a13      	ldr	r2, [pc, #76]	; (8004928 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d10c      	bne.n	80048f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	40010000 	.word	0x40010000
 800491c:	40000400 	.word	0x40000400
 8004920:	40000800 	.word	0x40000800
 8004924:	40000c00 	.word	0x40000c00
 8004928:	40014000 	.word	0x40014000

0800492c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004940:	2b01      	cmp	r3, #1
 8004942:	d101      	bne.n	8004948 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004944:	2302      	movs	r3, #2
 8004946:	e03d      	b.n	80049c4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	4313      	orrs	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	4313      	orrs	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4313      	orrs	r3, r2
 8004986:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	4313      	orrs	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e03f      	b.n	8004a8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d106      	bne.n	8004a24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7fd fcf2 	bl	8002408 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2224      	movs	r2, #36	; 0x24
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68da      	ldr	r2, [r3, #12]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f929 	bl	8004c94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	691a      	ldr	r2, [r3, #16]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	695a      	ldr	r2, [r3, #20]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68da      	ldr	r2, [r3, #12]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2220      	movs	r2, #32
 8004a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b08a      	sub	sp, #40	; 0x28
 8004a96:	af02      	add	r7, sp, #8
 8004a98:	60f8      	str	r0, [r7, #12]
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	603b      	str	r3, [r7, #0]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b20      	cmp	r3, #32
 8004ab0:	d17c      	bne.n	8004bac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d002      	beq.n	8004abe <HAL_UART_Transmit+0x2c>
 8004ab8:	88fb      	ldrh	r3, [r7, #6]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e075      	b.n	8004bae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d101      	bne.n	8004ad0 <HAL_UART_Transmit+0x3e>
 8004acc:	2302      	movs	r3, #2
 8004ace:	e06e      	b.n	8004bae <HAL_UART_Transmit+0x11c>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2221      	movs	r2, #33	; 0x21
 8004ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ae6:	f7fd fe2b 	bl	8002740 <HAL_GetTick>
 8004aea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	88fa      	ldrh	r2, [r7, #6]
 8004af0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	88fa      	ldrh	r2, [r7, #6]
 8004af6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b00:	d108      	bne.n	8004b14 <HAL_UART_Transmit+0x82>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d104      	bne.n	8004b14 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	61bb      	str	r3, [r7, #24]
 8004b12:	e003      	b.n	8004b1c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004b24:	e02a      	b.n	8004b7c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	2180      	movs	r1, #128	; 0x80
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f000 f840 	bl	8004bb6 <UART_WaitOnFlagUntilTimeout>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e036      	b.n	8004bae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10b      	bne.n	8004b5e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	3302      	adds	r3, #2
 8004b5a:	61bb      	str	r3, [r7, #24]
 8004b5c:	e007      	b.n	8004b6e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	781a      	ldrb	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1cf      	bne.n	8004b26 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	2140      	movs	r1, #64	; 0x40
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f000 f810 	bl	8004bb6 <UART_WaitOnFlagUntilTimeout>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e006      	b.n	8004bae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	e000      	b.n	8004bae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004bac:	2302      	movs	r3, #2
  }
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3720      	adds	r7, #32
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b090      	sub	sp, #64	; 0x40
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	60f8      	str	r0, [r7, #12]
 8004bbe:	60b9      	str	r1, [r7, #8]
 8004bc0:	603b      	str	r3, [r7, #0]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bc6:	e050      	b.n	8004c6a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bce:	d04c      	beq.n	8004c6a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004bd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d007      	beq.n	8004be6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bd6:	f7fd fdb3 	bl	8002740 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d241      	bcs.n	8004c6a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	330c      	adds	r3, #12
 8004bec:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf0:	e853 3f00 	ldrex	r3, [r3]
 8004bf4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	330c      	adds	r3, #12
 8004c04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c06:	637a      	str	r2, [r7, #52]	; 0x34
 8004c08:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c0e:	e841 2300 	strex	r3, r2, [r1]
 8004c12:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1e5      	bne.n	8004be6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	3314      	adds	r3, #20
 8004c20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	e853 3f00 	ldrex	r3, [r3]
 8004c28:	613b      	str	r3, [r7, #16]
   return(result);
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	f023 0301 	bic.w	r3, r3, #1
 8004c30:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3314      	adds	r3, #20
 8004c38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c3a:	623a      	str	r2, [r7, #32]
 8004c3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3e:	69f9      	ldr	r1, [r7, #28]
 8004c40:	6a3a      	ldr	r2, [r7, #32]
 8004c42:	e841 2300 	strex	r3, r2, [r1]
 8004c46:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1e5      	bne.n	8004c1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2220      	movs	r2, #32
 8004c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e00f      	b.n	8004c8a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	4013      	ands	r3, r2
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	bf0c      	ite	eq
 8004c7a:	2301      	moveq	r3, #1
 8004c7c:	2300      	movne	r3, #0
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	461a      	mov	r2, r3
 8004c82:	79fb      	ldrb	r3, [r7, #7]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d09f      	beq.n	8004bc8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3740      	adds	r7, #64	; 0x40
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
	...

08004c94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c98:	b0c0      	sub	sp, #256	; 0x100
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb0:	68d9      	ldr	r1, [r3, #12]
 8004cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	ea40 0301 	orr.w	r3, r0, r1
 8004cbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004cec:	f021 010c 	bic.w	r1, r1, #12
 8004cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004cfa:	430b      	orrs	r3, r1
 8004cfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0e:	6999      	ldr	r1, [r3, #24]
 8004d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	ea40 0301 	orr.w	r3, r0, r1
 8004d1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	4b8f      	ldr	r3, [pc, #572]	; (8004f60 <UART_SetConfig+0x2cc>)
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d005      	beq.n	8004d34 <UART_SetConfig+0xa0>
 8004d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	4b8d      	ldr	r3, [pc, #564]	; (8004f64 <UART_SetConfig+0x2d0>)
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d104      	bne.n	8004d3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d34:	f7fe fc5a 	bl	80035ec <HAL_RCC_GetPCLK2Freq>
 8004d38:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d3c:	e003      	b.n	8004d46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d3e:	f7fe fc41 	bl	80035c4 <HAL_RCC_GetPCLK1Freq>
 8004d42:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d50:	f040 810c 	bne.w	8004f6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d5e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d66:	4622      	mov	r2, r4
 8004d68:	462b      	mov	r3, r5
 8004d6a:	1891      	adds	r1, r2, r2
 8004d6c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d6e:	415b      	adcs	r3, r3
 8004d70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d76:	4621      	mov	r1, r4
 8004d78:	eb12 0801 	adds.w	r8, r2, r1
 8004d7c:	4629      	mov	r1, r5
 8004d7e:	eb43 0901 	adc.w	r9, r3, r1
 8004d82:	f04f 0200 	mov.w	r2, #0
 8004d86:	f04f 0300 	mov.w	r3, #0
 8004d8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d96:	4690      	mov	r8, r2
 8004d98:	4699      	mov	r9, r3
 8004d9a:	4623      	mov	r3, r4
 8004d9c:	eb18 0303 	adds.w	r3, r8, r3
 8004da0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004da4:	462b      	mov	r3, r5
 8004da6:	eb49 0303 	adc.w	r3, r9, r3
 8004daa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004dba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004dbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	18db      	adds	r3, r3, r3
 8004dc6:	653b      	str	r3, [r7, #80]	; 0x50
 8004dc8:	4613      	mov	r3, r2
 8004dca:	eb42 0303 	adc.w	r3, r2, r3
 8004dce:	657b      	str	r3, [r7, #84]	; 0x54
 8004dd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004dd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004dd8:	f7fb ff70 	bl	8000cbc <__aeabi_uldivmod>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	460b      	mov	r3, r1
 8004de0:	4b61      	ldr	r3, [pc, #388]	; (8004f68 <UART_SetConfig+0x2d4>)
 8004de2:	fba3 2302 	umull	r2, r3, r3, r2
 8004de6:	095b      	lsrs	r3, r3, #5
 8004de8:	011c      	lsls	r4, r3, #4
 8004dea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dee:	2200      	movs	r2, #0
 8004df0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004df4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004df8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004dfc:	4642      	mov	r2, r8
 8004dfe:	464b      	mov	r3, r9
 8004e00:	1891      	adds	r1, r2, r2
 8004e02:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e04:	415b      	adcs	r3, r3
 8004e06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e0c:	4641      	mov	r1, r8
 8004e0e:	eb12 0a01 	adds.w	sl, r2, r1
 8004e12:	4649      	mov	r1, r9
 8004e14:	eb43 0b01 	adc.w	fp, r3, r1
 8004e18:	f04f 0200 	mov.w	r2, #0
 8004e1c:	f04f 0300 	mov.w	r3, #0
 8004e20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e2c:	4692      	mov	sl, r2
 8004e2e:	469b      	mov	fp, r3
 8004e30:	4643      	mov	r3, r8
 8004e32:	eb1a 0303 	adds.w	r3, sl, r3
 8004e36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e3a:	464b      	mov	r3, r9
 8004e3c:	eb4b 0303 	adc.w	r3, fp, r3
 8004e40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e50:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e58:	460b      	mov	r3, r1
 8004e5a:	18db      	adds	r3, r3, r3
 8004e5c:	643b      	str	r3, [r7, #64]	; 0x40
 8004e5e:	4613      	mov	r3, r2
 8004e60:	eb42 0303 	adc.w	r3, r2, r3
 8004e64:	647b      	str	r3, [r7, #68]	; 0x44
 8004e66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004e6e:	f7fb ff25 	bl	8000cbc <__aeabi_uldivmod>
 8004e72:	4602      	mov	r2, r0
 8004e74:	460b      	mov	r3, r1
 8004e76:	4611      	mov	r1, r2
 8004e78:	4b3b      	ldr	r3, [pc, #236]	; (8004f68 <UART_SetConfig+0x2d4>)
 8004e7a:	fba3 2301 	umull	r2, r3, r3, r1
 8004e7e:	095b      	lsrs	r3, r3, #5
 8004e80:	2264      	movs	r2, #100	; 0x64
 8004e82:	fb02 f303 	mul.w	r3, r2, r3
 8004e86:	1acb      	subs	r3, r1, r3
 8004e88:	00db      	lsls	r3, r3, #3
 8004e8a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e8e:	4b36      	ldr	r3, [pc, #216]	; (8004f68 <UART_SetConfig+0x2d4>)
 8004e90:	fba3 2302 	umull	r2, r3, r3, r2
 8004e94:	095b      	lsrs	r3, r3, #5
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e9c:	441c      	add	r4, r3
 8004e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ea8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004eac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004eb0:	4642      	mov	r2, r8
 8004eb2:	464b      	mov	r3, r9
 8004eb4:	1891      	adds	r1, r2, r2
 8004eb6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004eb8:	415b      	adcs	r3, r3
 8004eba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ebc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ec0:	4641      	mov	r1, r8
 8004ec2:	1851      	adds	r1, r2, r1
 8004ec4:	6339      	str	r1, [r7, #48]	; 0x30
 8004ec6:	4649      	mov	r1, r9
 8004ec8:	414b      	adcs	r3, r1
 8004eca:	637b      	str	r3, [r7, #52]	; 0x34
 8004ecc:	f04f 0200 	mov.w	r2, #0
 8004ed0:	f04f 0300 	mov.w	r3, #0
 8004ed4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ed8:	4659      	mov	r1, fp
 8004eda:	00cb      	lsls	r3, r1, #3
 8004edc:	4651      	mov	r1, sl
 8004ede:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ee2:	4651      	mov	r1, sl
 8004ee4:	00ca      	lsls	r2, r1, #3
 8004ee6:	4610      	mov	r0, r2
 8004ee8:	4619      	mov	r1, r3
 8004eea:	4603      	mov	r3, r0
 8004eec:	4642      	mov	r2, r8
 8004eee:	189b      	adds	r3, r3, r2
 8004ef0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ef4:	464b      	mov	r3, r9
 8004ef6:	460a      	mov	r2, r1
 8004ef8:	eb42 0303 	adc.w	r3, r2, r3
 8004efc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f0c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f14:	460b      	mov	r3, r1
 8004f16:	18db      	adds	r3, r3, r3
 8004f18:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	eb42 0303 	adc.w	r3, r2, r3
 8004f20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f2a:	f7fb fec7 	bl	8000cbc <__aeabi_uldivmod>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	460b      	mov	r3, r1
 8004f32:	4b0d      	ldr	r3, [pc, #52]	; (8004f68 <UART_SetConfig+0x2d4>)
 8004f34:	fba3 1302 	umull	r1, r3, r3, r2
 8004f38:	095b      	lsrs	r3, r3, #5
 8004f3a:	2164      	movs	r1, #100	; 0x64
 8004f3c:	fb01 f303 	mul.w	r3, r1, r3
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	3332      	adds	r3, #50	; 0x32
 8004f46:	4a08      	ldr	r2, [pc, #32]	; (8004f68 <UART_SetConfig+0x2d4>)
 8004f48:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4c:	095b      	lsrs	r3, r3, #5
 8004f4e:	f003 0207 	and.w	r2, r3, #7
 8004f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4422      	add	r2, r4
 8004f5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f5c:	e105      	b.n	800516a <UART_SetConfig+0x4d6>
 8004f5e:	bf00      	nop
 8004f60:	40011000 	.word	0x40011000
 8004f64:	40011400 	.word	0x40011400
 8004f68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f70:	2200      	movs	r2, #0
 8004f72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f76:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004f7e:	4642      	mov	r2, r8
 8004f80:	464b      	mov	r3, r9
 8004f82:	1891      	adds	r1, r2, r2
 8004f84:	6239      	str	r1, [r7, #32]
 8004f86:	415b      	adcs	r3, r3
 8004f88:	627b      	str	r3, [r7, #36]	; 0x24
 8004f8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f8e:	4641      	mov	r1, r8
 8004f90:	1854      	adds	r4, r2, r1
 8004f92:	4649      	mov	r1, r9
 8004f94:	eb43 0501 	adc.w	r5, r3, r1
 8004f98:	f04f 0200 	mov.w	r2, #0
 8004f9c:	f04f 0300 	mov.w	r3, #0
 8004fa0:	00eb      	lsls	r3, r5, #3
 8004fa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fa6:	00e2      	lsls	r2, r4, #3
 8004fa8:	4614      	mov	r4, r2
 8004faa:	461d      	mov	r5, r3
 8004fac:	4643      	mov	r3, r8
 8004fae:	18e3      	adds	r3, r4, r3
 8004fb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fb4:	464b      	mov	r3, r9
 8004fb6:	eb45 0303 	adc.w	r3, r5, r3
 8004fba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004fca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004fce:	f04f 0200 	mov.w	r2, #0
 8004fd2:	f04f 0300 	mov.w	r3, #0
 8004fd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004fda:	4629      	mov	r1, r5
 8004fdc:	008b      	lsls	r3, r1, #2
 8004fde:	4621      	mov	r1, r4
 8004fe0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fe4:	4621      	mov	r1, r4
 8004fe6:	008a      	lsls	r2, r1, #2
 8004fe8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004fec:	f7fb fe66 	bl	8000cbc <__aeabi_uldivmod>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4b60      	ldr	r3, [pc, #384]	; (8005178 <UART_SetConfig+0x4e4>)
 8004ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8004ffa:	095b      	lsrs	r3, r3, #5
 8004ffc:	011c      	lsls	r4, r3, #4
 8004ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005002:	2200      	movs	r2, #0
 8005004:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005008:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800500c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005010:	4642      	mov	r2, r8
 8005012:	464b      	mov	r3, r9
 8005014:	1891      	adds	r1, r2, r2
 8005016:	61b9      	str	r1, [r7, #24]
 8005018:	415b      	adcs	r3, r3
 800501a:	61fb      	str	r3, [r7, #28]
 800501c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005020:	4641      	mov	r1, r8
 8005022:	1851      	adds	r1, r2, r1
 8005024:	6139      	str	r1, [r7, #16]
 8005026:	4649      	mov	r1, r9
 8005028:	414b      	adcs	r3, r1
 800502a:	617b      	str	r3, [r7, #20]
 800502c:	f04f 0200 	mov.w	r2, #0
 8005030:	f04f 0300 	mov.w	r3, #0
 8005034:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005038:	4659      	mov	r1, fp
 800503a:	00cb      	lsls	r3, r1, #3
 800503c:	4651      	mov	r1, sl
 800503e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005042:	4651      	mov	r1, sl
 8005044:	00ca      	lsls	r2, r1, #3
 8005046:	4610      	mov	r0, r2
 8005048:	4619      	mov	r1, r3
 800504a:	4603      	mov	r3, r0
 800504c:	4642      	mov	r2, r8
 800504e:	189b      	adds	r3, r3, r2
 8005050:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005054:	464b      	mov	r3, r9
 8005056:	460a      	mov	r2, r1
 8005058:	eb42 0303 	adc.w	r3, r2, r3
 800505c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	67bb      	str	r3, [r7, #120]	; 0x78
 800506a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800506c:	f04f 0200 	mov.w	r2, #0
 8005070:	f04f 0300 	mov.w	r3, #0
 8005074:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005078:	4649      	mov	r1, r9
 800507a:	008b      	lsls	r3, r1, #2
 800507c:	4641      	mov	r1, r8
 800507e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005082:	4641      	mov	r1, r8
 8005084:	008a      	lsls	r2, r1, #2
 8005086:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800508a:	f7fb fe17 	bl	8000cbc <__aeabi_uldivmod>
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	4b39      	ldr	r3, [pc, #228]	; (8005178 <UART_SetConfig+0x4e4>)
 8005094:	fba3 1302 	umull	r1, r3, r3, r2
 8005098:	095b      	lsrs	r3, r3, #5
 800509a:	2164      	movs	r1, #100	; 0x64
 800509c:	fb01 f303 	mul.w	r3, r1, r3
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	3332      	adds	r3, #50	; 0x32
 80050a6:	4a34      	ldr	r2, [pc, #208]	; (8005178 <UART_SetConfig+0x4e4>)
 80050a8:	fba2 2303 	umull	r2, r3, r2, r3
 80050ac:	095b      	lsrs	r3, r3, #5
 80050ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050b2:	441c      	add	r4, r3
 80050b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050b8:	2200      	movs	r2, #0
 80050ba:	673b      	str	r3, [r7, #112]	; 0x70
 80050bc:	677a      	str	r2, [r7, #116]	; 0x74
 80050be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80050c2:	4642      	mov	r2, r8
 80050c4:	464b      	mov	r3, r9
 80050c6:	1891      	adds	r1, r2, r2
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	415b      	adcs	r3, r3
 80050cc:	60fb      	str	r3, [r7, #12]
 80050ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050d2:	4641      	mov	r1, r8
 80050d4:	1851      	adds	r1, r2, r1
 80050d6:	6039      	str	r1, [r7, #0]
 80050d8:	4649      	mov	r1, r9
 80050da:	414b      	adcs	r3, r1
 80050dc:	607b      	str	r3, [r7, #4]
 80050de:	f04f 0200 	mov.w	r2, #0
 80050e2:	f04f 0300 	mov.w	r3, #0
 80050e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80050ea:	4659      	mov	r1, fp
 80050ec:	00cb      	lsls	r3, r1, #3
 80050ee:	4651      	mov	r1, sl
 80050f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050f4:	4651      	mov	r1, sl
 80050f6:	00ca      	lsls	r2, r1, #3
 80050f8:	4610      	mov	r0, r2
 80050fa:	4619      	mov	r1, r3
 80050fc:	4603      	mov	r3, r0
 80050fe:	4642      	mov	r2, r8
 8005100:	189b      	adds	r3, r3, r2
 8005102:	66bb      	str	r3, [r7, #104]	; 0x68
 8005104:	464b      	mov	r3, r9
 8005106:	460a      	mov	r2, r1
 8005108:	eb42 0303 	adc.w	r3, r2, r3
 800510c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800510e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	663b      	str	r3, [r7, #96]	; 0x60
 8005118:	667a      	str	r2, [r7, #100]	; 0x64
 800511a:	f04f 0200 	mov.w	r2, #0
 800511e:	f04f 0300 	mov.w	r3, #0
 8005122:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005126:	4649      	mov	r1, r9
 8005128:	008b      	lsls	r3, r1, #2
 800512a:	4641      	mov	r1, r8
 800512c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005130:	4641      	mov	r1, r8
 8005132:	008a      	lsls	r2, r1, #2
 8005134:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005138:	f7fb fdc0 	bl	8000cbc <__aeabi_uldivmod>
 800513c:	4602      	mov	r2, r0
 800513e:	460b      	mov	r3, r1
 8005140:	4b0d      	ldr	r3, [pc, #52]	; (8005178 <UART_SetConfig+0x4e4>)
 8005142:	fba3 1302 	umull	r1, r3, r3, r2
 8005146:	095b      	lsrs	r3, r3, #5
 8005148:	2164      	movs	r1, #100	; 0x64
 800514a:	fb01 f303 	mul.w	r3, r1, r3
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	011b      	lsls	r3, r3, #4
 8005152:	3332      	adds	r3, #50	; 0x32
 8005154:	4a08      	ldr	r2, [pc, #32]	; (8005178 <UART_SetConfig+0x4e4>)
 8005156:	fba2 2303 	umull	r2, r3, r2, r3
 800515a:	095b      	lsrs	r3, r3, #5
 800515c:	f003 020f 	and.w	r2, r3, #15
 8005160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4422      	add	r2, r4
 8005168:	609a      	str	r2, [r3, #8]
}
 800516a:	bf00      	nop
 800516c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005170:	46bd      	mov	sp, r7
 8005172:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005176:	bf00      	nop
 8005178:	51eb851f 	.word	0x51eb851f

0800517c <interface_tx_frame>:
 800517c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005180:	b085      	sub	sp, #20
 8005182:	4605      	mov	r5, r0
 8005184:	461c      	mov	r4, r3
 8005186:	6883      	ldr	r3, [r0, #8]
 8005188:	695e      	ldr	r6, [r3, #20]
 800518a:	b1e2      	cbz	r2, 80051c6 <interface_tx_frame+0x4a>
 800518c:	9102      	str	r1, [sp, #8]
 800518e:	fa1f f882 	uxth.w	r8, r2
 8005192:	f8ad 800c 	strh.w	r8, [sp, #12]
 8005196:	f04f 0900 	mov.w	r9, #0
 800519a:	f8ad 900e 	strh.w	r9, [sp, #14]
 800519e:	6b77      	ldr	r7, [r6, #52]	; 0x34
 80051a0:	ab02      	add	r3, sp, #8
 80051a2:	464a      	mov	r2, r9
 80051a4:	2120      	movs	r1, #32
 80051a6:	47b8      	blx	r7
 80051a8:	f8ad 8000 	strh.w	r8, [sp]
 80051ac:	f8ad 9002 	strh.w	r9, [sp, #2]
 80051b0:	68e3      	ldr	r3, [r4, #12]
 80051b2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80051b6:	f88d 3004 	strb.w	r3, [sp, #4]
 80051ba:	6b77      	ldr	r7, [r6, #52]	; 0x34
 80051bc:	466b      	mov	r3, sp
 80051be:	464a      	mov	r2, r9
 80051c0:	2137      	movs	r1, #55	; 0x37
 80051c2:	4628      	mov	r0, r5
 80051c4:	47b8      	blx	r7
 80051c6:	68e3      	ldr	r3, [r4, #12]
 80051c8:	f013 0f1d 	tst.w	r3, #29
 80051cc:	d005      	beq.n	80051da <interface_tx_frame+0x5e>
 80051ce:	6b77      	ldr	r7, [r6, #52]	; 0x34
 80051d0:	4623      	mov	r3, r4
 80051d2:	2200      	movs	r2, #0
 80051d4:	2105      	movs	r1, #5
 80051d6:	4628      	mov	r0, r5
 80051d8:	47b8      	blx	r7
 80051da:	6863      	ldr	r3, [r4, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	db0c      	blt.n	80051fa <interface_tx_frame+0x7e>
 80051e0:	6b77      	ldr	r7, [r6, #52]	; 0x34
 80051e2:	1d23      	adds	r3, r4, #4
 80051e4:	2200      	movs	r2, #0
 80051e6:	2110      	movs	r1, #16
 80051e8:	4628      	mov	r0, r5
 80051ea:	47b8      	blx	r7
 80051ec:	6b77      	ldr	r7, [r6, #52]	; 0x34
 80051ee:	f104 0308 	add.w	r3, r4, #8
 80051f2:	2200      	movs	r2, #0
 80051f4:	2151      	movs	r1, #81	; 0x51
 80051f6:	4628      	mov	r0, r5
 80051f8:	47b8      	blx	r7
 80051fa:	6b76      	ldr	r6, [r6, #52]	; 0x34
 80051fc:	f104 030c 	add.w	r3, r4, #12
 8005200:	2200      	movs	r2, #0
 8005202:	2104      	movs	r1, #4
 8005204:	4628      	mov	r0, r5
 8005206:	47b0      	blx	r6
 8005208:	b005      	add	sp, #20
 800520a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800520e <interface_get_timestamp>:
 800520e:	b530      	push	{r4, r5, lr}
 8005210:	b083      	sub	sp, #12
 8005212:	ab02      	add	r3, sp, #8
 8005214:	2400      	movs	r4, #0
 8005216:	2500      	movs	r5, #0
 8005218:	e963 4502 	strd	r4, r5, [r3, #-8]!
 800521c:	6882      	ldr	r2, [r0, #8]
 800521e:	6952      	ldr	r2, [r2, #20]
 8005220:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8005222:	2200      	movs	r2, #0
 8005224:	215f      	movs	r1, #95	; 0x5f
 8005226:	47a0      	blx	r4
 8005228:	e9dd 0100 	ldrd	r0, r1, [sp]
 800522c:	b003      	add	sp, #12
 800522e:	bd30      	pop	{r4, r5, pc}

08005230 <interface_rx_disable>:
 8005230:	b510      	push	{r4, lr}
 8005232:	6883      	ldr	r3, [r0, #8]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8005238:	2300      	movs	r3, #0
 800523a:	461a      	mov	r2, r3
 800523c:	2103      	movs	r1, #3
 800523e:	47a0      	blx	r4
 8005240:	bd10      	pop	{r4, pc}
	...

08005244 <interface_rx_enable>:
 8005244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005248:	b084      	sub	sp, #16
 800524a:	4604      	mov	r4, r0
 800524c:	6883      	ldr	r3, [r0, #8]
 800524e:	695d      	ldr	r5, [r3, #20]
 8005250:	f8d1 a008 	ldr.w	sl, [r1, #8]
 8005254:	680b      	ldr	r3, [r1, #0]
 8005256:	9303      	str	r3, [sp, #12]
 8005258:	684a      	ldr	r2, [r1, #4]
 800525a:	ab04      	add	r3, sp, #16
 800525c:	f843 2d08 	str.w	r2, [r3, #-8]!
 8005260:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 8005262:	2200      	movs	r2, #0
 8005264:	214f      	movs	r1, #79	; 0x4f
 8005266:	47b8      	blx	r7
 8005268:	4607      	mov	r7, r0
 800526a:	b118      	cbz	r0, 8005274 <interface_rx_enable+0x30>
 800526c:	4638      	mov	r0, r7
 800526e:	b004      	add	sp, #16
 8005270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005274:	68a3      	ldr	r3, [r4, #8]
 8005276:	695a      	ldr	r2, [r3, #20]
 8005278:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 800527c:	2b00      	cmp	r3, #0
 800527e:	db3c      	blt.n	80052fa <interface_rx_enable+0xb6>
 8005280:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8005282:	ab01      	add	r3, sp, #4
 8005284:	2200      	movs	r2, #0
 8005286:	2157      	movs	r1, #87	; 0x57
 8005288:	4620      	mov	r0, r4
 800528a:	47b8      	blx	r7
 800528c:	bba8      	cbnz	r0, 80052fa <interface_rx_enable+0xb6>
 800528e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8005292:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005296:	041b      	lsls	r3, r3, #16
 8005298:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800529c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80052a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80052aa:	f1ba 0f00 	cmp.w	sl, #0
 80052ae:	d131      	bne.n	8005314 <interface_rx_enable+0xd0>
 80052b0:	f503 3378 	add.w	r3, r3, #253952	; 0x3e000
 80052b4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80052b8:	9303      	str	r3, [sp, #12]
 80052ba:	f04f 0a01 	mov.w	sl, #1
 80052be:	68a3      	ldr	r3, [r4, #8]
 80052c0:	695f      	ldr	r7, [r3, #20]
 80052c2:	f10d 0302 	add.w	r3, sp, #2
 80052c6:	2200      	movs	r2, #0
 80052c8:	217b      	movs	r1, #123	; 0x7b
 80052ca:	4620      	mov	r0, r4
 80052cc:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 80052ce:	47b0      	blx	r6
 80052d0:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d04e      	beq.n	8005376 <interface_rx_enable+0x132>
 80052d8:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 80052dc:	2201      	movs	r2, #1
 80052de:	fa02 f303 	lsl.w	r3, r2, r3
 80052e2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80052e6:	ea22 0203 	bic.w	r2, r2, r3
 80052ea:	ab04      	add	r3, sp, #16
 80052ec:	f823 2d0e 	strh.w	r2, [r3, #-14]!
 80052f0:	6b7f      	ldr	r7, [r7, #52]	; 0x34
 80052f2:	2200      	movs	r2, #0
 80052f4:	216b      	movs	r1, #107	; 0x6b
 80052f6:	4620      	mov	r0, r4
 80052f8:	47b8      	blx	r7
 80052fa:	f1ba 0f00 	cmp.w	sl, #0
 80052fe:	d14a      	bne.n	8005396 <interface_rx_enable+0x152>
 8005300:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8005302:	2300      	movs	r3, #0
 8005304:	461a      	mov	r2, r3
 8005306:	211f      	movs	r1, #31
 8005308:	4620      	mov	r0, r4
 800530a:	47a8      	blx	r5
 800530c:	4607      	mov	r7, r0
 800530e:	2800      	cmp	r0, #0
 8005310:	d150      	bne.n	80053b4 <interface_rx_enable+0x170>
 8005312:	e7ab      	b.n	800526c <interface_rx_enable+0x28>
 8005314:	9a03      	ldr	r2, [sp, #12]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	4698      	mov	r8, r3
 800531a:	ea4f 79e3 	mov.w	r9, r3, asr #31
 800531e:	ea4f 1249 	mov.w	r2, r9, lsl #5
 8005322:	0158      	lsls	r0, r3, #5
 8005324:	ea42 61d3 	orr.w	r1, r2, r3, lsr #27
 8005328:	1ac0      	subs	r0, r0, r3
 800532a:	eb61 0109 	sbc.w	r1, r1, r9
 800532e:	024b      	lsls	r3, r1, #9
 8005330:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8005334:	0242      	lsls	r2, r0, #9
 8005336:	eb12 0008 	adds.w	r0, r2, r8
 800533a:	eb43 0109 	adc.w	r1, r3, r9
 800533e:	018b      	lsls	r3, r1, #6
 8005340:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005344:	0182      	lsls	r2, r0, #6
 8005346:	1a12      	subs	r2, r2, r0
 8005348:	eb63 0301 	sbc.w	r3, r3, r1
 800534c:	4616      	mov	r6, r2
 800534e:	461f      	mov	r7, r3
 8005350:	4a31      	ldr	r2, [pc, #196]	; (8005418 <interface_rx_enable+0x1d4>)
 8005352:	2300      	movs	r3, #0
 8005354:	eb16 0008 	adds.w	r0, r6, r8
 8005358:	eb47 0109 	adc.w	r1, r7, r9
 800535c:	f7fb fcae 	bl	8000cbc <__aeabi_uldivmod>
 8005360:	f5b0 7f7f 	cmp.w	r0, #1020	; 0x3fc
 8005364:	ddab      	ble.n	80052be <interface_rx_enable+0x7a>
 8005366:	68a3      	ldr	r3, [r4, #8]
 8005368:	695f      	ldr	r7, [r3, #20]
 800536a:	f5b0 707f 	subs.w	r0, r0, #1020	; 0x3fc
 800536e:	d0a8      	beq.n	80052c2 <interface_rx_enable+0x7e>
 8005370:	f7fc f903 	bl	800157a <deca_usleep>
 8005374:	e7a5      	b.n	80052c2 <interface_rx_enable+0x7e>
 8005376:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 800537a:	2201      	movs	r2, #1
 800537c:	409a      	lsls	r2, r3
 800537e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005382:	431a      	orrs	r2, r3
 8005384:	ab04      	add	r3, sp, #16
 8005386:	f823 2d0e 	strh.w	r2, [r3, #-14]!
 800538a:	6b7f      	ldr	r7, [r7, #52]	; 0x34
 800538c:	2200      	movs	r2, #0
 800538e:	216b      	movs	r1, #107	; 0x6b
 8005390:	4620      	mov	r0, r4
 8005392:	47b8      	blx	r7
 8005394:	e7b1      	b.n	80052fa <interface_rx_enable+0xb6>
 8005396:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8005398:	ab03      	add	r3, sp, #12
 800539a:	2200      	movs	r2, #0
 800539c:	2105      	movs	r1, #5
 800539e:	4620      	mov	r0, r4
 80053a0:	47b0      	blx	r6
 80053a2:	4607      	mov	r7, r0
 80053a4:	b930      	cbnz	r0, 80053b4 <interface_rx_enable+0x170>
 80053a6:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 80053a8:	2300      	movs	r3, #0
 80053aa:	2201      	movs	r2, #1
 80053ac:	211f      	movs	r1, #31
 80053ae:	4620      	mov	r0, r4
 80053b0:	47a8      	blx	r5
 80053b2:	4607      	mov	r7, r0
 80053b4:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f6ff af57 	blt.w	800526c <interface_rx_enable+0x28>
 80053be:	68a3      	ldr	r3, [r4, #8]
 80053c0:	695d      	ldr	r5, [r3, #20]
 80053c2:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 80053c4:	ab01      	add	r3, sp, #4
 80053c6:	2200      	movs	r2, #0
 80053c8:	217b      	movs	r1, #123	; 0x7b
 80053ca:	4620      	mov	r0, r4
 80053cc:	47b0      	blx	r6
 80053ce:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 80053d2:	b18b      	cbz	r3, 80053f8 <interface_rx_enable+0x1b4>
 80053d4:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 80053d8:	2201      	movs	r2, #1
 80053da:	fa02 f303 	lsl.w	r3, r2, r3
 80053de:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80053e2:	ea22 0203 	bic.w	r2, r2, r3
 80053e6:	ab04      	add	r3, sp, #16
 80053e8:	f823 2d0c 	strh.w	r2, [r3, #-12]!
 80053ec:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 80053ee:	2200      	movs	r2, #0
 80053f0:	216b      	movs	r1, #107	; 0x6b
 80053f2:	4620      	mov	r0, r4
 80053f4:	47a8      	blx	r5
 80053f6:	e739      	b.n	800526c <interface_rx_enable+0x28>
 80053f8:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 80053fc:	2201      	movs	r2, #1
 80053fe:	409a      	lsls	r2, r3
 8005400:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005404:	431a      	orrs	r2, r3
 8005406:	ab04      	add	r3, sp, #16
 8005408:	f823 2d0c 	strh.w	r2, [r3, #-12]!
 800540c:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800540e:	2200      	movs	r2, #0
 8005410:	216b      	movs	r1, #107	; 0x6b
 8005412:	4620      	mov	r0, r4
 8005414:	47a8      	blx	r5
 8005416:	e729      	b.n	800526c <interface_rx_enable+0x28>
 8005418:	0ee09800 	.word	0x0ee09800

0800541c <interface_read_rx_frame>:
 800541c:	b510      	push	{r4, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	9100      	str	r1, [sp, #0]
 8005422:	f8ad 2004 	strh.w	r2, [sp, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f8ad 2006 	strh.w	r2, [sp, #6]
 800542c:	6883      	ldr	r3, [r0, #8]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8005432:	466b      	mov	r3, sp
 8005434:	2121      	movs	r1, #33	; 0x21
 8005436:	47a0      	blx	r4
 8005438:	b002      	add	sp, #8
 800543a:	bd10      	pop	{r4, pc}

0800543c <dwt_probe>:
 800543c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800543e:	b083      	sub	sp, #12
 8005440:	6803      	ldr	r3, [r0, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d037      	beq.n	80054b6 <dwt_probe+0x7a>
 8005446:	4a1f      	ldr	r2, [pc, #124]	; (80054c4 <dwt_probe+0x88>)
 8005448:	6013      	str	r3, [r2, #0]
 800544a:	4b1e      	ldr	r3, [pc, #120]	; (80054c4 <dwt_probe+0x88>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6842      	ldr	r2, [r0, #4]
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	6882      	ldr	r2, [r0, #8]
 8005454:	605a      	str	r2, [r3, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f88d 2003 	strb.w	r2, [sp, #3]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681c      	ldr	r4, [r3, #0]
 8005460:	ab01      	add	r3, sp, #4
 8005462:	2204      	movs	r2, #4
 8005464:	f10d 0103 	add.w	r1, sp, #3
 8005468:	2001      	movs	r0, #1
 800546a:	47a0      	blx	r4
 800546c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005470:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8005474:	0409      	lsls	r1, r1, #16
 8005476:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
 800547a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800547e:	4319      	orrs	r1, r3
 8005480:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005484:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8005488:	4a0f      	ldr	r2, [pc, #60]	; (80054c8 <dwt_probe+0x8c>)
 800548a:	4b10      	ldr	r3, [pc, #64]	; (80054cc <dwt_probe+0x90>)
 800548c:	429a      	cmp	r2, r3
 800548e:	d216      	bcs.n	80054be <dwt_probe+0x82>
 8005490:	4b0c      	ldr	r3, [pc, #48]	; (80054c4 <dwt_probe+0x88>)
 8005492:	681f      	ldr	r7, [r3, #0]
 8005494:	4613      	mov	r3, r2
 8005496:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800549a:	2600      	movs	r6, #0
 800549c:	4d0b      	ldr	r5, [pc, #44]	; (80054cc <dwt_probe+0x90>)
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	404a      	eors	r2, r1
 80054a2:	685c      	ldr	r4, [r3, #4]
 80054a4:	4222      	tst	r2, r4
 80054a6:	bf04      	itt	eq
 80054a8:	60bb      	streq	r3, [r7, #8]
 80054aa:	4630      	moveq	r0, r6
 80054ac:	331c      	adds	r3, #28
 80054ae:	42ab      	cmp	r3, r5
 80054b0:	d3f5      	bcc.n	800549e <dwt_probe+0x62>
 80054b2:	b003      	add	sp, #12
 80054b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054b6:	4b03      	ldr	r3, [pc, #12]	; (80054c4 <dwt_probe+0x88>)
 80054b8:	4a05      	ldr	r2, [pc, #20]	; (80054d0 <dwt_probe+0x94>)
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	e7c5      	b.n	800544a <dwt_probe+0xe>
 80054be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054c2:	e7f6      	b.n	80054b2 <dwt_probe+0x76>
 80054c4:	2000042c 	.word	0x2000042c
 80054c8:	080001a0 	.word	0x080001a0
 80054cc:	080001f4 	.word	0x080001f4
 80054d0:	20000430 	.word	0x20000430

080054d4 <dwt_readdevid>:
 80054d4:	b510      	push	{r4, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	2100      	movs	r1, #0
 80054da:	ab02      	add	r3, sp, #8
 80054dc:	f843 1d04 	str.w	r1, [r3, #-4]!
 80054e0:	4a04      	ldr	r2, [pc, #16]	; (80054f4 <dwt_readdevid+0x20>)
 80054e2:	6810      	ldr	r0, [r2, #0]
 80054e4:	6882      	ldr	r2, [r0, #8]
 80054e6:	6912      	ldr	r2, [r2, #16]
 80054e8:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80054ea:	460a      	mov	r2, r1
 80054ec:	47a0      	blx	r4
 80054ee:	9801      	ldr	r0, [sp, #4]
 80054f0:	b002      	add	sp, #8
 80054f2:	bd10      	pop	{r4, pc}
 80054f4:	2000042c 	.word	0x2000042c

080054f8 <dwt_setlnapamode>:
 80054f8:	b538      	push	{r3, r4, r5, lr}
 80054fa:	4b05      	ldr	r3, [pc, #20]	; (8005510 <dwt_setlnapamode+0x18>)
 80054fc:	681c      	ldr	r4, [r3, #0]
 80054fe:	68a3      	ldr	r3, [r4, #8]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8005504:	2300      	movs	r3, #0
 8005506:	4602      	mov	r2, r0
 8005508:	2113      	movs	r1, #19
 800550a:	4620      	mov	r0, r4
 800550c:	47a8      	blx	r5
 800550e:	bd38      	pop	{r3, r4, r5, pc}
 8005510:	2000042c 	.word	0x2000042c

08005514 <dwt_initialise>:
 8005514:	b508      	push	{r3, lr}
 8005516:	4b04      	ldr	r3, [pc, #16]	; (8005528 <dwt_initialise+0x14>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	689a      	ldr	r2, [r3, #8]
 800551c:	6912      	ldr	r2, [r2, #16]
 800551e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005520:	4601      	mov	r1, r0
 8005522:	4618      	mov	r0, r3
 8005524:	4790      	blx	r2
 8005526:	bd08      	pop	{r3, pc}
 8005528:	2000042c 	.word	0x2000042c

0800552c <dwt_configure>:
 800552c:	b508      	push	{r3, lr}
 800552e:	4b04      	ldr	r3, [pc, #16]	; (8005540 <dwt_configure+0x14>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689a      	ldr	r2, [r3, #8]
 8005534:	6912      	ldr	r2, [r2, #16]
 8005536:	6812      	ldr	r2, [r2, #0]
 8005538:	4601      	mov	r1, r0
 800553a:	4618      	mov	r0, r3
 800553c:	4790      	blx	r2
 800553e:	bd08      	pop	{r3, pc}
 8005540:	2000042c 	.word	0x2000042c

08005544 <dwt_configuretxrf>:
 8005544:	b508      	push	{r3, lr}
 8005546:	4b04      	ldr	r3, [pc, #16]	; (8005558 <dwt_configuretxrf+0x14>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	6912      	ldr	r2, [r2, #16]
 800554e:	6992      	ldr	r2, [r2, #24]
 8005550:	4601      	mov	r1, r0
 8005552:	4618      	mov	r0, r3
 8005554:	4790      	blx	r2
 8005556:	bd08      	pop	{r3, pc}
 8005558:	2000042c 	.word	0x2000042c

0800555c <dwt_setrxantennadelay>:
 800555c:	b510      	push	{r4, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	ab02      	add	r3, sp, #8
 8005562:	f823 0d02 	strh.w	r0, [r3, #-2]!
 8005566:	4a05      	ldr	r2, [pc, #20]	; (800557c <dwt_setrxantennadelay+0x20>)
 8005568:	6810      	ldr	r0, [r2, #0]
 800556a:	6882      	ldr	r2, [r0, #8]
 800556c:	6912      	ldr	r2, [r2, #16]
 800556e:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8005570:	2200      	movs	r2, #0
 8005572:	211b      	movs	r1, #27
 8005574:	47a0      	blx	r4
 8005576:	b002      	add	sp, #8
 8005578:	bd10      	pop	{r4, pc}
 800557a:	bf00      	nop
 800557c:	2000042c 	.word	0x2000042c

08005580 <dwt_settxantennadelay>:
 8005580:	b510      	push	{r4, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	ab02      	add	r3, sp, #8
 8005586:	f823 0d02 	strh.w	r0, [r3, #-2]!
 800558a:	4a05      	ldr	r2, [pc, #20]	; (80055a0 <dwt_settxantennadelay+0x20>)
 800558c:	6810      	ldr	r0, [r2, #0]
 800558e:	6882      	ldr	r2, [r0, #8]
 8005590:	6912      	ldr	r2, [r2, #16]
 8005592:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8005594:	2200      	movs	r2, #0
 8005596:	211d      	movs	r1, #29
 8005598:	47a0      	blx	r4
 800559a:	b002      	add	sp, #8
 800559c:	bd10      	pop	{r4, pc}
 800559e:	bf00      	nop
 80055a0:	2000042c 	.word	0x2000042c

080055a4 <dwt_writetxdata>:
 80055a4:	b538      	push	{r3, r4, r5, lr}
 80055a6:	4b05      	ldr	r3, [pc, #20]	; (80055bc <dwt_writetxdata+0x18>)
 80055a8:	681c      	ldr	r4, [r3, #0]
 80055aa:	68a3      	ldr	r3, [r4, #8]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	685d      	ldr	r5, [r3, #4]
 80055b0:	4613      	mov	r3, r2
 80055b2:	460a      	mov	r2, r1
 80055b4:	4601      	mov	r1, r0
 80055b6:	4620      	mov	r0, r4
 80055b8:	47a8      	blx	r5
 80055ba:	bd38      	pop	{r3, r4, r5, pc}
 80055bc:	2000042c 	.word	0x2000042c

080055c0 <dwt_writetxfctrl>:
 80055c0:	b538      	push	{r3, r4, r5, lr}
 80055c2:	4b05      	ldr	r3, [pc, #20]	; (80055d8 <dwt_writetxfctrl+0x18>)
 80055c4:	681c      	ldr	r4, [r3, #0]
 80055c6:	68a3      	ldr	r3, [r4, #8]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	689d      	ldr	r5, [r3, #8]
 80055cc:	4613      	mov	r3, r2
 80055ce:	460a      	mov	r2, r1
 80055d0:	4601      	mov	r1, r0
 80055d2:	4620      	mov	r0, r4
 80055d4:	47a8      	blx	r5
 80055d6:	bd38      	pop	{r3, r4, r5, pc}
 80055d8:	2000042c 	.word	0x2000042c

080055dc <dwt_starttx>:
 80055dc:	b510      	push	{r4, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	ab02      	add	r3, sp, #8
 80055e2:	f803 0d01 	strb.w	r0, [r3, #-1]!
 80055e6:	4a05      	ldr	r2, [pc, #20]	; (80055fc <dwt_starttx+0x20>)
 80055e8:	6810      	ldr	r0, [r2, #0]
 80055ea:	6882      	ldr	r2, [r0, #8]
 80055ec:	6912      	ldr	r2, [r2, #16]
 80055ee:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80055f0:	2200      	movs	r2, #0
 80055f2:	2104      	movs	r1, #4
 80055f4:	47a0      	blx	r4
 80055f6:	b002      	add	sp, #8
 80055f8:	bd10      	pop	{r4, pc}
 80055fa:	bf00      	nop
 80055fc:	2000042c 	.word	0x2000042c

08005600 <dwt_readtxtimestamplo32>:
 8005600:	b510      	push	{r4, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	2200      	movs	r2, #0
 8005606:	ab02      	add	r3, sp, #8
 8005608:	f843 2d04 	str.w	r2, [r3, #-4]!
 800560c:	4904      	ldr	r1, [pc, #16]	; (8005620 <dwt_readtxtimestamplo32+0x20>)
 800560e:	6808      	ldr	r0, [r1, #0]
 8005610:	6881      	ldr	r1, [r0, #8]
 8005612:	6909      	ldr	r1, [r1, #16]
 8005614:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8005616:	2131      	movs	r1, #49	; 0x31
 8005618:	47a0      	blx	r4
 800561a:	9801      	ldr	r0, [sp, #4]
 800561c:	b002      	add	sp, #8
 800561e:	bd10      	pop	{r4, pc}
 8005620:	2000042c 	.word	0x2000042c

08005624 <dwt_readpdoa>:
 8005624:	b510      	push	{r4, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	2200      	movs	r2, #0
 800562a:	ab02      	add	r3, sp, #8
 800562c:	f823 2d02 	strh.w	r2, [r3, #-2]!
 8005630:	4905      	ldr	r1, [pc, #20]	; (8005648 <dwt_readpdoa+0x24>)
 8005632:	6808      	ldr	r0, [r1, #0]
 8005634:	6881      	ldr	r1, [r0, #8]
 8005636:	6909      	ldr	r1, [r1, #16]
 8005638:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800563a:	2133      	movs	r1, #51	; 0x33
 800563c:	47a0      	blx	r4
 800563e:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 8005642:	b002      	add	sp, #8
 8005644:	bd10      	pop	{r4, pc}
 8005646:	bf00      	nop
 8005648:	2000042c 	.word	0x2000042c

0800564c <dwt_readrxtimestamplo32>:
 800564c:	b510      	push	{r4, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	2200      	movs	r2, #0
 8005652:	ab02      	add	r3, sp, #8
 8005654:	f843 2d04 	str.w	r2, [r3, #-4]!
 8005658:	4904      	ldr	r1, [pc, #16]	; (800566c <dwt_readrxtimestamplo32+0x20>)
 800565a:	6808      	ldr	r0, [r1, #0]
 800565c:	6881      	ldr	r1, [r0, #8]
 800565e:	6909      	ldr	r1, [r1, #16]
 8005660:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8005662:	2163      	movs	r1, #99	; 0x63
 8005664:	47a0      	blx	r4
 8005666:	9801      	ldr	r0, [sp, #4]
 8005668:	b002      	add	sp, #8
 800566a:	bd10      	pop	{r4, pc}
 800566c:	2000042c 	.word	0x2000042c

08005670 <dwt_forcetrxoff>:
 8005670:	b510      	push	{r4, lr}
 8005672:	4b05      	ldr	r3, [pc, #20]	; (8005688 <dwt_forcetrxoff+0x18>)
 8005674:	6818      	ldr	r0, [r3, #0]
 8005676:	6883      	ldr	r3, [r0, #8]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800567c:	2300      	movs	r3, #0
 800567e:	461a      	mov	r2, r3
 8005680:	2103      	movs	r1, #3
 8005682:	47a0      	blx	r4
 8005684:	bd10      	pop	{r4, pc}
 8005686:	bf00      	nop
 8005688:	2000042c 	.word	0x2000042c

0800568c <dwt_rxenable>:
 800568c:	b508      	push	{r3, lr}
 800568e:	4b04      	ldr	r3, [pc, #16]	; (80056a0 <dwt_rxenable+0x14>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	689a      	ldr	r2, [r3, #8]
 8005694:	6912      	ldr	r2, [r2, #16]
 8005696:	6a12      	ldr	r2, [r2, #32]
 8005698:	4601      	mov	r1, r0
 800569a:	4618      	mov	r0, r3
 800569c:	4790      	blx	r2
 800569e:	bd08      	pop	{r3, pc}
 80056a0:	2000042c 	.word	0x2000042c

080056a4 <dwt_setrxtimeout>:
 80056a4:	b510      	push	{r4, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	ab02      	add	r3, sp, #8
 80056aa:	f843 0d04 	str.w	r0, [r3, #-4]!
 80056ae:	4a05      	ldr	r2, [pc, #20]	; (80056c4 <dwt_setrxtimeout+0x20>)
 80056b0:	6810      	ldr	r0, [r2, #0]
 80056b2:	6882      	ldr	r2, [r0, #8]
 80056b4:	6912      	ldr	r2, [r2, #16]
 80056b6:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80056b8:	2200      	movs	r2, #0
 80056ba:	2151      	movs	r1, #81	; 0x51
 80056bc:	47a0      	blx	r4
 80056be:	b002      	add	sp, #8
 80056c0:	bd10      	pop	{r4, pc}
 80056c2:	bf00      	nop
 80056c4:	2000042c 	.word	0x2000042c

080056c8 <dwt_setcallbacks>:
 80056c8:	b410      	push	{r4}
 80056ca:	4c07      	ldr	r4, [pc, #28]	; (80056e8 <dwt_setcallbacks+0x20>)
 80056cc:	6824      	ldr	r4, [r4, #0]
 80056ce:	6120      	str	r0, [r4, #16]
 80056d0:	6161      	str	r1, [r4, #20]
 80056d2:	61a2      	str	r2, [r4, #24]
 80056d4:	61e3      	str	r3, [r4, #28]
 80056d6:	9b01      	ldr	r3, [sp, #4]
 80056d8:	6223      	str	r3, [r4, #32]
 80056da:	9b02      	ldr	r3, [sp, #8]
 80056dc:	6263      	str	r3, [r4, #36]	; 0x24
 80056de:	9b03      	ldr	r3, [sp, #12]
 80056e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80056e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	2000042c 	.word	0x2000042c

080056ec <dwt_checkidlerc>:
 80056ec:	b510      	push	{r4, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	2200      	movs	r2, #0
 80056f2:	ab02      	add	r3, sp, #8
 80056f4:	f803 2d01 	strb.w	r2, [r3, #-1]!
 80056f8:	4905      	ldr	r1, [pc, #20]	; (8005710 <dwt_checkidlerc+0x24>)
 80056fa:	6808      	ldr	r0, [r1, #0]
 80056fc:	6881      	ldr	r1, [r0, #8]
 80056fe:	6909      	ldr	r1, [r1, #16]
 8005700:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8005702:	2158      	movs	r1, #88	; 0x58
 8005704:	47a0      	blx	r4
 8005706:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800570a:	b002      	add	sp, #8
 800570c:	bd10      	pop	{r4, pc}
 800570e:	bf00      	nop
 8005710:	2000042c 	.word	0x2000042c

08005714 <dwt_isr>:
 8005714:	b508      	push	{r3, lr}
 8005716:	4b03      	ldr	r3, [pc, #12]	; (8005724 <dwt_isr+0x10>)
 8005718:	6818      	ldr	r0, [r3, #0]
 800571a:	6883      	ldr	r3, [r0, #8]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005720:	4798      	blx	r3
 8005722:	bd08      	pop	{r3, pc}
 8005724:	2000042c 	.word	0x2000042c

08005728 <dwt_setinterrupt>:
 8005728:	b538      	push	{r3, r4, r5, lr}
 800572a:	4b05      	ldr	r3, [pc, #20]	; (8005740 <dwt_setinterrupt+0x18>)
 800572c:	681c      	ldr	r4, [r3, #0]
 800572e:	68a3      	ldr	r3, [r4, #8]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	69dd      	ldr	r5, [r3, #28]
 8005734:	4613      	mov	r3, r2
 8005736:	460a      	mov	r2, r1
 8005738:	4601      	mov	r1, r0
 800573a:	4620      	mov	r0, r4
 800573c:	47a8      	blx	r5
 800573e:	bd38      	pop	{r3, r4, r5, pc}
 8005740:	2000042c 	.word	0x2000042c

08005744 <dwt_generatecrc8>:
 8005744:	2900      	cmp	r1, #0
 8005746:	dd0d      	ble.n	8005764 <dwt_generatecrc8+0x20>
 8005748:	b410      	push	{r4}
 800574a:	1e43      	subs	r3, r0, #1
 800574c:	4419      	add	r1, r3
 800574e:	4610      	mov	r0, r2
 8005750:	4c05      	ldr	r4, [pc, #20]	; (8005768 <dwt_generatecrc8+0x24>)
 8005752:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8005756:	4050      	eors	r0, r2
 8005758:	5c20      	ldrb	r0, [r4, r0]
 800575a:	428b      	cmp	r3, r1
 800575c:	d1f9      	bne.n	8005752 <dwt_generatecrc8+0xe>
 800575e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	4610      	mov	r0, r2
 8005766:	4770      	bx	lr
 8005768:	08016014 	.word	0x08016014

0800576c <dwt_setrxaftertxdelay>:
 800576c:	b510      	push	{r4, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	ab02      	add	r3, sp, #8
 8005772:	f843 0d04 	str.w	r0, [r3, #-4]!
 8005776:	4a05      	ldr	r2, [pc, #20]	; (800578c <dwt_setrxaftertxdelay+0x20>)
 8005778:	6810      	ldr	r0, [r2, #0]
 800577a:	6882      	ldr	r2, [r0, #8]
 800577c:	6912      	ldr	r2, [r2, #16]
 800577e:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8005780:	2200      	movs	r2, #0
 8005782:	2110      	movs	r1, #16
 8005784:	47a0      	blx	r4
 8005786:	b002      	add	sp, #8
 8005788:	bd10      	pop	{r4, pc}
 800578a:	bf00      	nop
 800578c:	2000042c 	.word	0x2000042c

08005790 <dwt_readrxdata>:
 8005790:	b538      	push	{r3, r4, r5, lr}
 8005792:	4b05      	ldr	r3, [pc, #20]	; (80057a8 <dwt_readrxdata+0x18>)
 8005794:	681c      	ldr	r4, [r3, #0]
 8005796:	68a3      	ldr	r3, [r4, #8]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	68dd      	ldr	r5, [r3, #12]
 800579c:	4613      	mov	r3, r2
 800579e:	460a      	mov	r2, r1
 80057a0:	4601      	mov	r1, r0
 80057a2:	4620      	mov	r0, r4
 80057a4:	47a8      	blx	r5
 80057a6:	bd38      	pop	{r3, r4, r5, pc}
 80057a8:	2000042c 	.word	0x2000042c

080057ac <dwt_readclockoffset>:
 80057ac:	b510      	push	{r4, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	2200      	movs	r2, #0
 80057b2:	ab02      	add	r3, sp, #8
 80057b4:	f823 2d02 	strh.w	r2, [r3, #-2]!
 80057b8:	4905      	ldr	r1, [pc, #20]	; (80057d0 <dwt_readclockoffset+0x24>)
 80057ba:	6808      	ldr	r0, [r1, #0]
 80057bc:	6881      	ldr	r1, [r0, #8]
 80057be:	6909      	ldr	r1, [r1, #16]
 80057c0:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80057c2:	212c      	movs	r1, #44	; 0x2c
 80057c4:	47a0      	blx	r4
 80057c6:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 80057ca:	b002      	add	sp, #8
 80057cc:	bd10      	pop	{r4, pc}
 80057ce:	bf00      	nop
 80057d0:	2000042c 	.word	0x2000042c

080057d4 <dwt_readstsquality>:
 80057d4:	b538      	push	{r3, r4, r5, lr}
 80057d6:	4b05      	ldr	r3, [pc, #20]	; (80057ec <dwt_readstsquality+0x18>)
 80057d8:	681c      	ldr	r4, [r3, #0]
 80057da:	68a3      	ldr	r3, [r4, #8]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80057e0:	4603      	mov	r3, r0
 80057e2:	2200      	movs	r2, #0
 80057e4:	214b      	movs	r1, #75	; 0x4b
 80057e6:	4620      	mov	r0, r4
 80057e8:	47a8      	blx	r5
 80057ea:	bd38      	pop	{r3, r4, r5, pc}
 80057ec:	2000042c 	.word	0x2000042c

080057f0 <dwt_setleds>:
 80057f0:	b510      	push	{r4, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	ab02      	add	r3, sp, #8
 80057f6:	f803 0d01 	strb.w	r0, [r3, #-1]!
 80057fa:	4a05      	ldr	r2, [pc, #20]	; (8005810 <dwt_setleds+0x20>)
 80057fc:	6810      	ldr	r0, [r2, #0]
 80057fe:	6882      	ldr	r2, [r0, #8]
 8005800:	6912      	ldr	r2, [r2, #16]
 8005802:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8005804:	2200      	movs	r2, #0
 8005806:	2155      	movs	r1, #85	; 0x55
 8005808:	47a0      	blx	r4
 800580a:	b002      	add	sp, #8
 800580c:	bd10      	pop	{r4, pc}
 800580e:	bf00      	nop
 8005810:	2000042c 	.word	0x2000042c

08005814 <dwt_writesysstatuslo>:
 8005814:	b510      	push	{r4, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	ab02      	add	r3, sp, #8
 800581a:	f843 0d04 	str.w	r0, [r3, #-4]!
 800581e:	4a05      	ldr	r2, [pc, #20]	; (8005834 <dwt_writesysstatuslo+0x20>)
 8005820:	6810      	ldr	r0, [r2, #0]
 8005822:	6882      	ldr	r2, [r0, #8]
 8005824:	6912      	ldr	r2, [r2, #16]
 8005826:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8005828:	2200      	movs	r2, #0
 800582a:	2174      	movs	r1, #116	; 0x74
 800582c:	47a0      	blx	r4
 800582e:	b002      	add	sp, #8
 8005830:	bd10      	pop	{r4, pc}
 8005832:	bf00      	nop
 8005834:	2000042c 	.word	0x2000042c

08005838 <dwt_readsysstatuslo>:
 8005838:	b510      	push	{r4, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	2200      	movs	r2, #0
 800583e:	ab02      	add	r3, sp, #8
 8005840:	f843 2d04 	str.w	r2, [r3, #-4]!
 8005844:	4904      	ldr	r1, [pc, #16]	; (8005858 <dwt_readsysstatuslo+0x20>)
 8005846:	6808      	ldr	r0, [r1, #0]
 8005848:	6881      	ldr	r1, [r0, #8]
 800584a:	6909      	ldr	r1, [r1, #16]
 800584c:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800584e:	2176      	movs	r1, #118	; 0x76
 8005850:	47a0      	blx	r4
 8005852:	9801      	ldr	r0, [sp, #4]
 8005854:	b002      	add	sp, #8
 8005856:	bd10      	pop	{r4, pc}
 8005858:	2000042c 	.word	0x2000042c

0800585c <dwt_readsysstatushi>:
 800585c:	b510      	push	{r4, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	2200      	movs	r2, #0
 8005862:	ab02      	add	r3, sp, #8
 8005864:	f843 2d04 	str.w	r2, [r3, #-4]!
 8005868:	4904      	ldr	r1, [pc, #16]	; (800587c <dwt_readsysstatushi+0x20>)
 800586a:	6808      	ldr	r0, [r1, #0]
 800586c:	6881      	ldr	r1, [r0, #8]
 800586e:	6909      	ldr	r1, [r1, #16]
 8005870:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8005872:	2177      	movs	r1, #119	; 0x77
 8005874:	47a0      	blx	r4
 8005876:	9801      	ldr	r0, [sp, #4]
 8005878:	b002      	add	sp, #8
 800587a:	bd10      	pop	{r4, pc}
 800587c:	2000042c 	.word	0x2000042c

08005880 <dwt_getframelength>:
 8005880:	b510      	push	{r4, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	2200      	movs	r2, #0
 8005886:	ab02      	add	r3, sp, #8
 8005888:	f823 2d02 	strh.w	r2, [r3, #-2]!
 800588c:	4905      	ldr	r1, [pc, #20]	; (80058a4 <dwt_getframelength+0x24>)
 800588e:	6808      	ldr	r0, [r1, #0]
 8005890:	6881      	ldr	r1, [r0, #8]
 8005892:	6909      	ldr	r1, [r1, #16]
 8005894:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8005896:	217a      	movs	r1, #122	; 0x7a
 8005898:	47a0      	blx	r4
 800589a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800589e:	b002      	add	sp, #8
 80058a0:	bd10      	pop	{r4, pc}
 80058a2:	bf00      	nop
 80058a4:	2000042c 	.word	0x2000042c

080058a8 <dwt_dbg_fn>:
 80058a8:	2998      	cmp	r1, #152	; 0x98
 80058aa:	4802      	ldr	r0, [pc, #8]	; (80058b4 <dwt_dbg_fn+0xc>)
 80058ac:	bf18      	it	ne
 80058ae:	2000      	movne	r0, #0
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	0801620c 	.word	0x0801620c

080058b8 <_deinit>:
 80058b8:	4770      	bx	lr

080058ba <dwt_xfer3xxx>:
 80058ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	4605      	mov	r5, r0
 80058c2:	460e      	mov	r6, r1
 80058c4:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80058c8:	1990      	adds	r0, r2, r6
 80058ca:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80058ce:	4432      	add	r2, r6
 80058d0:	f3c2 4204 	ubfx	r2, r2, #16, #5
 80058d4:	0084      	lsls	r4, r0, #2
 80058d6:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
 80058da:	ea41 0204 	orr.w	r2, r1, r4
 80058de:	0a12      	lsrs	r2, r2, #8
 80058e0:	f88d 200c 	strb.w	r2, [sp, #12]
 80058e4:	f001 0703 	and.w	r7, r1, #3
 80058e8:	433c      	orrs	r4, r7
 80058ea:	f88d 400d 	strb.w	r4, [sp, #13]
 80058ee:	461f      	mov	r7, r3
 80058f0:	b973      	cbnz	r3, 8005910 <dwt_xfer3xxx+0x56>
 80058f2:	2900      	cmp	r1, #0
 80058f4:	d05c      	beq.n	80059b0 <dwt_xfer3xxx+0xf6>
 80058f6:	0073      	lsls	r3, r6, #1
 80058f8:	f063 037e 	orn	r3, r3, #126	; 0x7e
 80058fc:	f88d 300c 	strb.w	r3, [sp, #12]
 8005900:	2401      	movs	r4, #1
 8005902:	2900      	cmp	r1, #0
 8005904:	d02f      	beq.n	8005966 <dwt_xfer3xxx+0xac>
 8005906:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 800590a:	2903      	cmp	r1, #3
 800590c:	d90a      	bls.n	8005924 <dwt_xfer3xxx+0x6a>
 800590e:	e7fe      	b.n	800590e <dwt_xfer3xxx+0x54>
 8005910:	2800      	cmp	r0, #0
 8005912:	d14f      	bne.n	80059b4 <dwt_xfer3xxx+0xfa>
 8005914:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005918:	d003      	beq.n	8005922 <dwt_xfer3xxx+0x68>
 800591a:	2900      	cmp	r1, #0
 800591c:	d14a      	bne.n	80059b4 <dwt_xfer3xxx+0xfa>
 800591e:	2401      	movs	r4, #1
 8005920:	e021      	b.n	8005966 <dwt_xfer3xxx+0xac>
 8005922:	2401      	movs	r4, #1
 8005924:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005926:	7d9b      	ldrb	r3, [r3, #22]
 8005928:	b94b      	cbnz	r3, 800593e <dwt_xfer3xxx+0x84>
 800592a:	682b      	ldr	r3, [r5, #0]
 800592c:	685d      	ldr	r5, [r3, #4]
 800592e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005930:	463a      	mov	r2, r7
 8005932:	a903      	add	r1, sp, #12
 8005934:	4620      	mov	r0, r4
 8005936:	47a8      	blx	r5
 8005938:	b004      	add	sp, #16
 800593a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800593e:	2200      	movs	r2, #0
 8005940:	4621      	mov	r1, r4
 8005942:	a803      	add	r0, sp, #12
 8005944:	f7ff fefe 	bl	8005744 <dwt_generatecrc8>
 8005948:	4602      	mov	r2, r0
 800594a:	4639      	mov	r1, r7
 800594c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800594e:	f7ff fef9 	bl	8005744 <dwt_generatecrc8>
 8005952:	682b      	ldr	r3, [r5, #0]
 8005954:	9000      	str	r0, [sp, #0]
 8005956:	689d      	ldr	r5, [r3, #8]
 8005958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800595a:	463a      	mov	r2, r7
 800595c:	a903      	add	r1, sp, #12
 800595e:	4620      	mov	r0, r4
 8005960:	47a8      	blx	r5
 8005962:	e7e9      	b.n	8005938 <dwt_xfer3xxx+0x7e>
 8005964:	2401      	movs	r4, #1
 8005966:	682b      	ldr	r3, [r5, #0]
 8005968:	f8d3 8000 	ldr.w	r8, [r3]
 800596c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800596e:	463a      	mov	r2, r7
 8005970:	a903      	add	r1, sp, #12
 8005972:	4620      	mov	r0, r4
 8005974:	47c0      	blx	r8
 8005976:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005978:	7d9b      	ldrb	r3, [r3, #22]
 800597a:	2b02      	cmp	r3, #2
 800597c:	d1dc      	bne.n	8005938 <dwt_xfer3xxx+0x7e>
 800597e:	2e18      	cmp	r6, #24
 8005980:	d0da      	beq.n	8005938 <dwt_xfer3xxx+0x7e>
 8005982:	2200      	movs	r2, #0
 8005984:	4621      	mov	r1, r4
 8005986:	a803      	add	r0, sp, #12
 8005988:	f7ff fedc 	bl	8005744 <dwt_generatecrc8>
 800598c:	4602      	mov	r2, r0
 800598e:	4639      	mov	r1, r7
 8005990:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005992:	f7ff fed7 	bl	8005744 <dwt_generatecrc8>
 8005996:	4604      	mov	r4, r0
 8005998:	2200      	movs	r2, #0
 800599a:	2118      	movs	r1, #24
 800599c:	4628      	mov	r0, r5
 800599e:	f000 f841 	bl	8005a24 <dwt_read8bitoffsetreg>
 80059a2:	4284      	cmp	r4, r0
 80059a4:	d0c8      	beq.n	8005938 <dwt_xfer3xxx+0x7e>
 80059a6:	68eb      	ldr	r3, [r5, #12]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d0c5      	beq.n	8005938 <dwt_xfer3xxx+0x7e>
 80059ac:	4798      	blx	r3
 80059ae:	e7c3      	b.n	8005938 <dwt_xfer3xxx+0x7e>
 80059b0:	2800      	cmp	r0, #0
 80059b2:	d0d7      	beq.n	8005964 <dwt_xfer3xxx+0xaa>
 80059b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059b8:	f88d 200c 	strb.w	r2, [sp, #12]
 80059bc:	2402      	movs	r4, #2
 80059be:	e7a0      	b.n	8005902 <dwt_xfer3xxx+0x48>

080059c0 <dwt_readfromdevice>:
 80059c0:	b510      	push	{r4, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	2400      	movs	r4, #0
 80059c6:	9401      	str	r4, [sp, #4]
 80059c8:	9c04      	ldr	r4, [sp, #16]
 80059ca:	9400      	str	r4, [sp, #0]
 80059cc:	f7ff ff75 	bl	80058ba <dwt_xfer3xxx>
 80059d0:	b002      	add	sp, #8
 80059d2:	bd10      	pop	{r4, pc}

080059d4 <dwt_read32bitoffsetreg>:
 80059d4:	b500      	push	{lr}
 80059d6:	b085      	sub	sp, #20
 80059d8:	ab03      	add	r3, sp, #12
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	2304      	movs	r3, #4
 80059de:	b292      	uxth	r2, r2
 80059e0:	f7ff ffee 	bl	80059c0 <dwt_readfromdevice>
 80059e4:	f10d 030f 	add.w	r3, sp, #15
 80059e8:	f10d 010b 	add.w	r1, sp, #11
 80059ec:	2000      	movs	r0, #0
 80059ee:	f813 2901 	ldrb.w	r2, [r3], #-1
 80059f2:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 80059f6:	428b      	cmp	r3, r1
 80059f8:	d1f9      	bne.n	80059ee <dwt_read32bitoffsetreg+0x1a>
 80059fa:	b005      	add	sp, #20
 80059fc:	f85d fb04 	ldr.w	pc, [sp], #4

08005a00 <dwt_read16bitoffsetreg>:
 8005a00:	b500      	push	{lr}
 8005a02:	b085      	sub	sp, #20
 8005a04:	ab03      	add	r3, sp, #12
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	2302      	movs	r3, #2
 8005a0a:	b292      	uxth	r2, r2
 8005a0c:	f7ff ffd8 	bl	80059c0 <dwt_readfromdevice>
 8005a10:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8005a14:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8005a18:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8005a1c:	b280      	uxth	r0, r0
 8005a1e:	b005      	add	sp, #20
 8005a20:	f85d fb04 	ldr.w	pc, [sp], #4

08005a24 <dwt_read8bitoffsetreg>:
 8005a24:	b500      	push	{lr}
 8005a26:	b085      	sub	sp, #20
 8005a28:	f10d 030f 	add.w	r3, sp, #15
 8005a2c:	9300      	str	r3, [sp, #0]
 8005a2e:	2301      	movs	r3, #1
 8005a30:	b292      	uxth	r2, r2
 8005a32:	f7ff ffc5 	bl	80059c0 <dwt_readfromdevice>
 8005a36:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8005a3a:	b005      	add	sp, #20
 8005a3c:	f85d fb04 	ldr.w	pc, [sp], #4

08005a40 <ull_readdiagnostics>:
 8005a40:	b530      	push	{r4, r5, lr}
 8005a42:	b0bd      	sub	sp, #244	; 0xf4
 8005a44:	4605      	mov	r5, r0
 8005a46:	460c      	mov	r4, r1
 8005a48:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005a4a:	7bda      	ldrb	r2, [r3, #15]
 8005a4c:	2a01      	cmp	r2, #1
 8005a4e:	d01c      	beq.n	8005a8a <ull_readdiagnostics+0x4a>
 8005a50:	2a03      	cmp	r2, #3
 8005a52:	f040 81d4 	bne.w	8005dfe <ull_readdiagnostics+0x3be>
 8005a56:	7e1b      	ldrb	r3, [r3, #24]
 8005a58:	f013 0f08 	tst.w	r3, #8
 8005a5c:	d10c      	bne.n	8005a78 <ull_readdiagnostics+0x38>
 8005a5e:	f013 0f04 	tst.w	r3, #4
 8005a62:	ab02      	add	r3, sp, #8
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	bf14      	ite	ne
 8005a68:	2338      	movne	r3, #56	; 0x38
 8005a6a:	2320      	moveq	r3, #32
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8005a72:	f7ff ffa5 	bl	80059c0 <dwt_readfromdevice>
 8005a76:	e019      	b.n	8005aac <ull_readdiagnostics+0x6c>
 8005a78:	ab02      	add	r3, sp, #8
 8005a7a:	9300      	str	r3, [sp, #0]
 8005a7c:	23e8      	movs	r3, #232	; 0xe8
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8005a84:	f7ff ff9c 	bl	80059c0 <dwt_readfromdevice>
 8005a88:	e010      	b.n	8005aac <ull_readdiagnostics+0x6c>
 8005a8a:	7e1b      	ldrb	r3, [r3, #24]
 8005a8c:	f013 0f08 	tst.w	r3, #8
 8005a90:	f040 81ac 	bne.w	8005dec <ull_readdiagnostics+0x3ac>
 8005a94:	f013 0f04 	tst.w	r3, #4
 8005a98:	ab02      	add	r3, sp, #8
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	bf14      	ite	ne
 8005a9e:	2338      	movne	r3, #56	; 0x38
 8005aa0:	2320      	moveq	r3, #32
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8005aa8:	f7ff ff8a 	bl	80059c0 <dwt_readfromdevice>
 8005aac:	f10d 0217 	add.w	r2, sp, #23
 8005ab0:	f104 031a 	add.w	r3, r4, #26
 8005ab4:	f104 0020 	add.w	r0, r4, #32
 8005ab8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8005abc:	f803 1b01 	strb.w	r1, [r3], #1
 8005ac0:	4283      	cmp	r3, r0
 8005ac2:	d1f9      	bne.n	8005ab8 <ull_readdiagnostics+0x78>
 8005ac4:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8005ac8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8005acc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005ad0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ad4:	8463      	strh	r3, [r4, #34]	; 0x22
 8005ad6:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8005ada:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8005ade:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005ae2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005ae6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005aea:	bf1c      	itt	ne
 8005aec:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 8005af0:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 8005af4:	8423      	strh	r3, [r4, #32]
 8005af6:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 8005afa:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8005afe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005b02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b06:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005b08:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005b0a:	7e1b      	ldrb	r3, [r3, #24]
 8005b0c:	f013 0f02 	tst.w	r3, #2
 8005b10:	f040 816a 	bne.w	8005de8 <ull_readdiagnostics+0x3a8>
 8005b14:	aa0a      	add	r2, sp, #40	; 0x28
 8005b16:	1e63      	subs	r3, r4, #1
 8005b18:	1d20      	adds	r0, r4, #4
 8005b1a:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005b1e:	f803 1f01 	strb.w	r1, [r3, #1]!
 8005b22:	79d1      	ldrb	r1, [r2, #7]
 8005b24:	7219      	strb	r1, [r3, #8]
 8005b26:	7bd1      	ldrb	r1, [r2, #15]
 8005b28:	7459      	strb	r1, [r3, #17]
 8005b2a:	4283      	cmp	r3, r0
 8005b2c:	d1f5      	bne.n	8005b1a <ull_readdiagnostics+0xda>
 8005b2e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8005b32:	7163      	strb	r3, [r4, #5]
 8005b34:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8005b38:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8005b3c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005b40:	80e3      	strh	r3, [r4, #6]
 8005b42:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8005b46:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8005b4a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005b4e:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8005b52:	f8a4 300d 	strh.w	r3, [r4, #13]
 8005b56:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8005b5a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8005b5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005b62:	f8a4 300f 	strh.w	r3, [r4, #15]
 8005b66:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8005b6a:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8005b6e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005b72:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8005b76:	82e3      	strh	r3, [r4, #22]
 8005b78:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 8005b7c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8005b80:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005b84:	8323      	strh	r3, [r4, #24]
 8005b86:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005b88:	7e1b      	ldrb	r3, [r3, #24]
 8005b8a:	f013 0f04 	tst.w	r3, #4
 8005b8e:	f040 812b 	bne.w	8005de8 <ull_readdiagnostics+0x3a8>
 8005b92:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 8005b96:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8005b9a:	041b      	lsls	r3, r3, #16
 8005b9c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005ba0:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8005baa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005bae:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8005bb2:	6263      	str	r3, [r4, #36]	; 0x24
 8005bb4:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 8005bb8:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 8005bbc:	041b      	lsls	r3, r3, #16
 8005bbe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005bc2:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 8005bcc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005bd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005bd6:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 8005bda:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8005bde:	041b      	lsls	r3, r3, #16
 8005be0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005be4:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8005be8:	4313      	orrs	r3, r2
 8005bea:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8005bee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005bf2:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8005bf6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005bf8:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 8005bfc:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 8005c00:	041b      	lsls	r3, r3, #16
 8005c02:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005c06:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 8005c10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005c14:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005c18:	6323      	str	r3, [r4, #48]	; 0x30
 8005c1a:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 8005c1e:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 8005c22:	041b      	lsls	r3, r3, #16
 8005c24:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005c28:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 8005c32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005c36:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005c3a:	6363      	str	r3, [r4, #52]	; 0x34
 8005c3c:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 8005c40:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 8005c44:	041b      	lsls	r3, r3, #16
 8005c46:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005c4a:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 8005c54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005c58:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005c5c:	63a3      	str	r3, [r4, #56]	; 0x38
 8005c5e:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 8005c62:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8005c66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005c6a:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8005c6c:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 8005c70:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8005c74:	041b      	lsls	r3, r3, #16
 8005c76:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005c7a:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 8005c84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005c88:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005c8c:	6423      	str	r3, [r4, #64]	; 0x40
 8005c8e:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
 8005c92:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 8005c96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005c9a:	6463      	str	r3, [r4, #68]	; 0x44
 8005c9c:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 8005ca0:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8005ca4:	041b      	lsls	r3, r3, #16
 8005ca6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005caa:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 8005cb4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005cb8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005cbc:	64a3      	str	r3, [r4, #72]	; 0x48
 8005cbe:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8005cc2:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8005cc6:	041b      	lsls	r3, r3, #16
 8005cc8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005ccc:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
 8005cd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005cda:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005cde:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005ce0:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 8005ce4:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
 8005ce8:	041b      	lsls	r3, r3, #16
 8005cea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005cee:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 8005cf8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005cfc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005d00:	6523      	str	r3, [r4, #80]	; 0x50
 8005d02:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 8005d06:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8005d0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005d0e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005d12:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8005d16:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 8005d1a:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8005d1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005d22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d26:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8005d2a:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 8005d2e:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 8005d32:	041b      	lsls	r3, r3, #16
 8005d34:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005d38:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 8005d42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005d46:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005d4a:	65a3      	str	r3, [r4, #88]	; 0x58
 8005d4c:	f89d 20c1 	ldrb.w	r2, [sp, #193]	; 0xc1
 8005d50:	f89d 30c0 	ldrb.w	r3, [sp, #192]	; 0xc0
 8005d54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005d58:	65e3      	str	r3, [r4, #92]	; 0x5c
 8005d5a:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
 8005d5e:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
 8005d62:	041b      	lsls	r3, r3, #16
 8005d64:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005d68:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
 8005d72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005d76:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005d7a:	6623      	str	r3, [r4, #96]	; 0x60
 8005d7c:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
 8005d80:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 8005d84:	041b      	lsls	r3, r3, #16
 8005d86:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005d8a:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 8005d94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005d98:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005d9c:	6663      	str	r3, [r4, #100]	; 0x64
 8005d9e:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
 8005da2:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
 8005da6:	041b      	lsls	r3, r3, #16
 8005da8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005dac:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 8005db0:	4313      	orrs	r3, r2
 8005db2:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 8005db6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005dba:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005dbe:	66a3      	str	r3, [r4, #104]	; 0x68
 8005dc0:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 8005dc4:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8005dc8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005dcc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005dd0:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 8005dd4:	f89d 20ed 	ldrb.w	r2, [sp, #237]	; 0xed
 8005dd8:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 8005ddc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005de4:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 8005de8:	b03d      	add	sp, #244	; 0xf4
 8005dea:	bd30      	pop	{r4, r5, pc}
 8005dec:	ab02      	add	r3, sp, #8
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	23e8      	movs	r3, #232	; 0xe8
 8005df2:	2200      	movs	r2, #0
 8005df4:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8005df8:	f7ff fde2 	bl	80059c0 <dwt_readfromdevice>
 8005dfc:	e656      	b.n	8005aac <ull_readdiagnostics+0x6c>
 8005dfe:	7e1b      	ldrb	r3, [r3, #24]
 8005e00:	f013 0f01 	tst.w	r3, #1
 8005e04:	f000 819f 	beq.w	8006146 <ull_readdiagnostics+0x706>
 8005e08:	ab02      	add	r3, sp, #8
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	236c      	movs	r3, #108	; 0x6c
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8005e14:	f7ff fdd4 	bl	80059c0 <dwt_readfromdevice>
 8005e18:	ab1d      	add	r3, sp, #116	; 0x74
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	236c      	movs	r3, #108	; 0x6c
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 8005e24:	4628      	mov	r0, r5
 8005e26:	f7ff fdcb 	bl	80059c0 <dwt_readfromdevice>
 8005e2a:	aa02      	add	r2, sp, #8
 8005e2c:	1e63      	subs	r3, r4, #1
 8005e2e:	1d20      	adds	r0, r4, #4
 8005e30:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005e34:	f803 1f01 	strb.w	r1, [r3, #1]!
 8005e38:	79d1      	ldrb	r1, [r2, #7]
 8005e3a:	7219      	strb	r1, [r3, #8]
 8005e3c:	7bd1      	ldrb	r1, [r2, #15]
 8005e3e:	7459      	strb	r1, [r3, #17]
 8005e40:	7dd1      	ldrb	r1, [r2, #23]
 8005e42:	7699      	strb	r1, [r3, #26]
 8005e44:	4283      	cmp	r3, r0
 8005e46:	d1f3      	bne.n	8005e30 <ull_readdiagnostics+0x3f0>
 8005e48:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8005e4c:	77e3      	strb	r3, [r4, #31]
 8005e4e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005e52:	7163      	strb	r3, [r4, #5]
 8005e54:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8005e58:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8005e5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e60:	80e3      	strh	r3, [r4, #6]
 8005e62:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8005e66:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8005e6a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8005e6e:	f3c2 12cf 	ubfx	r2, r2, #7, #16
 8005e72:	f8a4 200d 	strh.w	r2, [r4, #13]
 8005e76:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8005e7a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8005e7e:	f8a4 200f 	strh.w	r2, [r4, #15]
 8005e82:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8005e86:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e8a:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8005e8e:	82e3      	strh	r3, [r4, #22]
 8005e90:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8005e94:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8005e98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e9c:	8323      	strh	r3, [r4, #24]
 8005e9e:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8005ea2:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8005ea6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005eaa:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005eae:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005eb2:	bf1c      	itt	ne
 8005eb4:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 8005eb8:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 8005ebc:	8423      	strh	r3, [r4, #32]
 8005ebe:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 8005ec2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8005ec6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005eca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ece:	8463      	strh	r3, [r4, #34]	; 0x22
 8005ed0:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8005ed4:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8005ed8:	041b      	lsls	r3, r3, #16
 8005eda:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005ede:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 8005ee8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005eec:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8005ef0:	6263      	str	r3, [r4, #36]	; 0x24
 8005ef2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005ef4:	7e1b      	ldrb	r3, [r3, #24]
 8005ef6:	f013 0f01 	tst.w	r3, #1
 8005efa:	f43f af75 	beq.w	8005de8 <ull_readdiagnostics+0x3a8>
 8005efe:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 8005f02:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8005f06:	041b      	lsls	r3, r3, #16
 8005f08:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005f0c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8005f10:	4313      	orrs	r3, r2
 8005f12:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8005f16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005f1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f1e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f20:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8005f24:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8005f28:	041b      	lsls	r3, r3, #16
 8005f2a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005f2e:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 8005f32:	4313      	orrs	r3, r2
 8005f34:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 8005f38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005f3c:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8005f40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f42:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 8005f46:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8005f4a:	041b      	lsls	r3, r3, #16
 8005f4c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005f50:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8005f54:	4313      	orrs	r3, r2
 8005f56:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8005f5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005f5e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005f62:	6323      	str	r3, [r4, #48]	; 0x30
 8005f64:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8005f68:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8005f6c:	041b      	lsls	r3, r3, #16
 8005f6e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005f72:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8005f76:	4313      	orrs	r3, r2
 8005f78:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 8005f7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005f80:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005f84:	6363      	str	r3, [r4, #52]	; 0x34
 8005f86:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 8005f8a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8005f8e:	041b      	lsls	r3, r3, #16
 8005f90:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005f94:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8005f9e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005fa2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005fa6:	63a3      	str	r3, [r4, #56]	; 0x38
 8005fa8:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 8005fac:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8005fb0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005fb4:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8005fb6:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 8005fba:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8005fbe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005fc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fc6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005fc8:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 8005fcc:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 8005fd0:	041b      	lsls	r3, r3, #16
 8005fd2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005fd6:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 8005fe0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005fe4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005fe8:	6423      	str	r3, [r4, #64]	; 0x40
 8005fea:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 8005fee:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 8005ff2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005ff6:	6463      	str	r3, [r4, #68]	; 0x44
 8005ff8:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
 8005ffc:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 8006000:	041b      	lsls	r3, r3, #16
 8006002:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006006:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 800600a:	4313      	orrs	r3, r2
 800600c:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 8006010:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006014:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006018:	64a3      	str	r3, [r4, #72]	; 0x48
 800601a:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 800601e:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 8006022:	041b      	lsls	r3, r3, #16
 8006024:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006028:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 800602c:	4313      	orrs	r3, r2
 800602e:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
 8006032:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006036:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800603a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800603c:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 8006040:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8006044:	041b      	lsls	r3, r3, #16
 8006046:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800604a:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 800604e:	4313      	orrs	r3, r2
 8006050:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 8006054:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006058:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800605c:	6523      	str	r3, [r4, #80]	; 0x50
 800605e:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 8006062:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8006066:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800606a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800606e:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8006072:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 8006076:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 800607a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800607e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006082:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8006086:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 800608a:	f89d 30ae 	ldrb.w	r3, [sp, #174]	; 0xae
 800608e:	041b      	lsls	r3, r3, #16
 8006090:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006094:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 8006098:	4313      	orrs	r3, r2
 800609a:	f89d 20ad 	ldrb.w	r2, [sp, #173]	; 0xad
 800609e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80060a2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80060a6:	65a3      	str	r3, [r4, #88]	; 0x58
 80060a8:	f89d 20b1 	ldrb.w	r2, [sp, #177]	; 0xb1
 80060ac:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 80060b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80060b4:	65e3      	str	r3, [r4, #92]	; 0x5c
 80060b6:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 80060ba:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
 80060be:	041b      	lsls	r3, r3, #16
 80060c0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80060c4:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 80060c8:	4313      	orrs	r3, r2
 80060ca:	f89d 20b5 	ldrb.w	r2, [sp, #181]	; 0xb5
 80060ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80060d2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80060d6:	6623      	str	r3, [r4, #96]	; 0x60
 80060d8:	f89d 20bb 	ldrb.w	r2, [sp, #187]	; 0xbb
 80060dc:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
 80060e0:	041b      	lsls	r3, r3, #16
 80060e2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80060e6:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 80060ea:	4313      	orrs	r3, r2
 80060ec:	f89d 20b9 	ldrb.w	r2, [sp, #185]	; 0xb9
 80060f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80060f4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80060f8:	6663      	str	r3, [r4, #100]	; 0x64
 80060fa:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 80060fe:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 8006102:	041b      	lsls	r3, r3, #16
 8006104:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006108:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 800610c:	4313      	orrs	r3, r2
 800610e:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 8006112:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006116:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800611a:	66a3      	str	r3, [r4, #104]	; 0x68
 800611c:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 8006120:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8006124:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006128:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800612c:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 8006130:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 8006134:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8006138:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800613c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006140:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 8006144:	e650      	b.n	8005de8 <ull_readdiagnostics+0x3a8>
 8006146:	ab02      	add	r3, sp, #8
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	2328      	movs	r3, #40	; 0x28
 800614c:	2200      	movs	r2, #0
 800614e:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8006152:	f7ff fc35 	bl	80059c0 <dwt_readfromdevice>
 8006156:	e668      	b.n	8005e2a <ull_readdiagnostics+0x3ea>

08006158 <ull_readrxtimestamp>:
 8006158:	b500      	push	{lr}
 800615a:	b083      	sub	sp, #12
 800615c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800615e:	7bdb      	ldrb	r3, [r3, #15]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d00b      	beq.n	800617c <ull_readrxtimestamp+0x24>
 8006164:	2b03      	cmp	r3, #3
 8006166:	d110      	bne.n	800618a <ull_readrxtimestamp+0x32>
 8006168:	9100      	str	r1, [sp, #0]
 800616a:	2305      	movs	r3, #5
 800616c:	2204      	movs	r2, #4
 800616e:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8006172:	f7ff fc25 	bl	80059c0 <dwt_readfromdevice>
 8006176:	b003      	add	sp, #12
 8006178:	f85d fb04 	ldr.w	pc, [sp], #4
 800617c:	9100      	str	r1, [sp, #0]
 800617e:	2305      	movs	r3, #5
 8006180:	2200      	movs	r2, #0
 8006182:	4905      	ldr	r1, [pc, #20]	; (8006198 <ull_readrxtimestamp+0x40>)
 8006184:	f7ff fc1c 	bl	80059c0 <dwt_readfromdevice>
 8006188:	e7f5      	b.n	8006176 <ull_readrxtimestamp+0x1e>
 800618a:	9100      	str	r1, [sp, #0]
 800618c:	2305      	movs	r3, #5
 800618e:	2200      	movs	r2, #0
 8006190:	2164      	movs	r1, #100	; 0x64
 8006192:	f7ff fc15 	bl	80059c0 <dwt_readfromdevice>
 8006196:	e7ee      	b.n	8006176 <ull_readrxtimestamp+0x1e>
 8006198:	00180004 	.word	0x00180004

0800619c <dwt_writetodevice>:
 800619c:	b510      	push	{r4, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 80061a4:	9401      	str	r4, [sp, #4]
 80061a6:	9c04      	ldr	r4, [sp, #16]
 80061a8:	9400      	str	r4, [sp, #0]
 80061aa:	f7ff fb86 	bl	80058ba <dwt_xfer3xxx>
 80061ae:	b002      	add	sp, #8
 80061b0:	bd10      	pop	{r4, pc}

080061b2 <dwt_write8bitoffsetreg>:
 80061b2:	b510      	push	{r4, lr}
 80061b4:	b084      	sub	sp, #16
 80061b6:	ac04      	add	r4, sp, #16
 80061b8:	f804 3d01 	strb.w	r3, [r4, #-1]!
 80061bc:	9400      	str	r4, [sp, #0]
 80061be:	2301      	movs	r3, #1
 80061c0:	b292      	uxth	r2, r2
 80061c2:	f7ff ffeb 	bl	800619c <dwt_writetodevice>
 80061c6:	b004      	add	sp, #16
 80061c8:	bd10      	pop	{r4, pc}
	...

080061cc <ull_getframelength>:
 80061cc:	b510      	push	{r4, lr}
 80061ce:	4604      	mov	r4, r0
 80061d0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80061d2:	7bdb      	ldrb	r3, [r3, #15]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d013      	beq.n	8006200 <ull_getframelength+0x34>
 80061d8:	2b03      	cmp	r3, #3
 80061da:	d11d      	bne.n	8006218 <ull_getframelength+0x4c>
 80061dc:	23f0      	movs	r3, #240	; 0xf0
 80061de:	2200      	movs	r2, #0
 80061e0:	4912      	ldr	r1, [pc, #72]	; (800622c <ull_getframelength+0x60>)
 80061e2:	f7ff ffe6 	bl	80061b2 <dwt_write8bitoffsetreg>
 80061e6:	2200      	movs	r2, #0
 80061e8:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80061ec:	4620      	mov	r0, r4
 80061ee:	f7ff fc07 	bl	8005a00 <dwt_read16bitoffsetreg>
 80061f2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80061f4:	7b1a      	ldrb	r2, [r3, #12]
 80061f6:	b1a2      	cbz	r2, 8006222 <ull_getframelength+0x56>
 80061f8:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80061fc:	8458      	strh	r0, [r3, #34]	; 0x22
 80061fe:	bd10      	pop	{r4, pc}
 8006200:	230f      	movs	r3, #15
 8006202:	2200      	movs	r2, #0
 8006204:	4909      	ldr	r1, [pc, #36]	; (800622c <ull_getframelength+0x60>)
 8006206:	f7ff ffd4 	bl	80061b2 <dwt_write8bitoffsetreg>
 800620a:	2200      	movs	r2, #0
 800620c:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8006210:	4620      	mov	r0, r4
 8006212:	f7ff fbf5 	bl	8005a00 <dwt_read16bitoffsetreg>
 8006216:	e7ec      	b.n	80061f2 <ull_getframelength+0x26>
 8006218:	2200      	movs	r2, #0
 800621a:	214c      	movs	r1, #76	; 0x4c
 800621c:	f7ff fbf0 	bl	8005a00 <dwt_read16bitoffsetreg>
 8006220:	e7e7      	b.n	80061f2 <ull_getframelength+0x26>
 8006222:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8006226:	8458      	strh	r0, [r3, #34]	; 0x22
 8006228:	e7e9      	b.n	80061fe <ull_getframelength+0x32>
 800622a:	bf00      	nop
 800622c:	00010024 	.word	0x00010024

08006230 <ull_configeventcounters>:
 8006230:	b538      	push	{r3, r4, r5, lr}
 8006232:	4605      	mov	r5, r0
 8006234:	460c      	mov	r4, r1
 8006236:	2302      	movs	r3, #2
 8006238:	2200      	movs	r2, #0
 800623a:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800623e:	f7ff ffb8 	bl	80061b2 <dwt_write8bitoffsetreg>
 8006242:	b904      	cbnz	r4, 8006246 <ull_configeventcounters+0x16>
 8006244:	bd38      	pop	{r3, r4, r5, pc}
 8006246:	2301      	movs	r3, #1
 8006248:	2200      	movs	r2, #0
 800624a:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800624e:	4628      	mov	r0, r5
 8006250:	f7ff ffaf 	bl	80061b2 <dwt_write8bitoffsetreg>
 8006254:	e7f6      	b.n	8006244 <ull_configeventcounters+0x14>

08006256 <dwt_write16bitoffsetreg>:
 8006256:	b500      	push	{lr}
 8006258:	b085      	sub	sp, #20
 800625a:	f88d 300c 	strb.w	r3, [sp, #12]
 800625e:	0a1b      	lsrs	r3, r3, #8
 8006260:	f88d 300d 	strb.w	r3, [sp, #13]
 8006264:	ab03      	add	r3, sp, #12
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	2302      	movs	r3, #2
 800626a:	b292      	uxth	r2, r2
 800626c:	f7ff ff96 	bl	800619c <dwt_writetodevice>
 8006270:	b005      	add	sp, #20
 8006272:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006278 <ull_clearaonconfig>:
 8006278:	b538      	push	{r3, r4, r5, lr}
 800627a:	4604      	mov	r4, r0
 800627c:	2300      	movs	r3, #0
 800627e:	461a      	mov	r2, r3
 8006280:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 8006284:	f7ff ffe7 	bl	8006256 <dwt_write16bitoffsetreg>
 8006288:	2300      	movs	r3, #0
 800628a:	461a      	mov	r2, r3
 800628c:	4908      	ldr	r1, [pc, #32]	; (80062b0 <ull_clearaonconfig+0x38>)
 800628e:	4620      	mov	r0, r4
 8006290:	f7ff ff8f 	bl	80061b2 <dwt_write8bitoffsetreg>
 8006294:	4d07      	ldr	r5, [pc, #28]	; (80062b4 <ull_clearaonconfig+0x3c>)
 8006296:	2300      	movs	r3, #0
 8006298:	461a      	mov	r2, r3
 800629a:	4629      	mov	r1, r5
 800629c:	4620      	mov	r0, r4
 800629e:	f7ff ff88 	bl	80061b2 <dwt_write8bitoffsetreg>
 80062a2:	2302      	movs	r3, #2
 80062a4:	2200      	movs	r2, #0
 80062a6:	4629      	mov	r1, r5
 80062a8:	4620      	mov	r0, r4
 80062aa:	f7ff ff82 	bl	80061b2 <dwt_write8bitoffsetreg>
 80062ae:	bd38      	pop	{r3, r4, r5, pc}
 80062b0:	000a0014 	.word	0x000a0014
 80062b4:	000a0004 	.word	0x000a0004

080062b8 <ull_force_clocks>:
 80062b8:	b508      	push	{r3, lr}
 80062ba:	2901      	cmp	r1, #1
 80062bc:	d002      	beq.n	80062c4 <ull_force_clocks+0xc>
 80062be:	2905      	cmp	r1, #5
 80062c0:	d007      	beq.n	80062d2 <ull_force_clocks+0x1a>
 80062c2:	bd08      	pop	{r3, pc}
 80062c4:	f641 0322 	movw	r3, #6178	; 0x1822
 80062c8:	2200      	movs	r2, #0
 80062ca:	4905      	ldr	r1, [pc, #20]	; (80062e0 <ull_force_clocks+0x28>)
 80062cc:	f7ff ffc3 	bl	8006256 <dwt_write16bitoffsetreg>
 80062d0:	e7f7      	b.n	80062c2 <ull_force_clocks+0xa>
 80062d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062d6:	2200      	movs	r2, #0
 80062d8:	4901      	ldr	r1, [pc, #4]	; (80062e0 <ull_force_clocks+0x28>)
 80062da:	f7ff ffbc 	bl	8006256 <dwt_write16bitoffsetreg>
 80062de:	e7f0      	b.n	80062c2 <ull_force_clocks+0xa>
 80062e0:	00110004 	.word	0x00110004

080062e4 <__dwt_otp_write_wdata_id_reg>:
 80062e4:	b538      	push	{r3, r4, r5, lr}
 80062e6:	4605      	mov	r5, r0
 80062e8:	460c      	mov	r4, r1
 80062ea:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	2200      	movs	r2, #0
 80062f2:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 80062f6:	f7ff ffae 	bl	8006256 <dwt_write16bitoffsetreg>
 80062fa:	b2a3      	uxth	r3, r4
 80062fc:	2200      	movs	r2, #0
 80062fe:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8006302:	4628      	mov	r0, r5
 8006304:	f7ff ffa7 	bl	8006256 <dwt_write16bitoffsetreg>
 8006308:	bd38      	pop	{r3, r4, r5, pc}
	...

0800630c <_dwt_otpread>:
 800630c:	b570      	push	{r4, r5, r6, lr}
 800630e:	4604      	mov	r4, r0
 8006310:	460e      	mov	r6, r1
 8006312:	4d0c      	ldr	r5, [pc, #48]	; (8006344 <_dwt_otpread+0x38>)
 8006314:	2301      	movs	r3, #1
 8006316:	2200      	movs	r2, #0
 8006318:	4629      	mov	r1, r5
 800631a:	f7ff ff9c 	bl	8006256 <dwt_write16bitoffsetreg>
 800631e:	4633      	mov	r3, r6
 8006320:	2200      	movs	r2, #0
 8006322:	4909      	ldr	r1, [pc, #36]	; (8006348 <_dwt_otpread+0x3c>)
 8006324:	4620      	mov	r0, r4
 8006326:	f7ff ff96 	bl	8006256 <dwt_write16bitoffsetreg>
 800632a:	2302      	movs	r3, #2
 800632c:	2200      	movs	r2, #0
 800632e:	4629      	mov	r1, r5
 8006330:	4620      	mov	r0, r4
 8006332:	f7ff ff90 	bl	8006256 <dwt_write16bitoffsetreg>
 8006336:	2200      	movs	r2, #0
 8006338:	4904      	ldr	r1, [pc, #16]	; (800634c <_dwt_otpread+0x40>)
 800633a:	4620      	mov	r0, r4
 800633c:	f7ff fb4a 	bl	80059d4 <dwt_read32bitoffsetreg>
 8006340:	bd70      	pop	{r4, r5, r6, pc}
 8006342:	bf00      	nop
 8006344:	000b0008 	.word	0x000b0008
 8006348:	000b0004 	.word	0x000b0004
 800634c:	000b0010 	.word	0x000b0010

08006350 <ull_aon_read>:
 8006350:	b538      	push	{r3, r4, r5, lr}
 8006352:	4604      	mov	r4, r0
 8006354:	460b      	mov	r3, r1
 8006356:	2200      	movs	r2, #0
 8006358:	490a      	ldr	r1, [pc, #40]	; (8006384 <ull_aon_read+0x34>)
 800635a:	f7ff ff7c 	bl	8006256 <dwt_write16bitoffsetreg>
 800635e:	4d0a      	ldr	r5, [pc, #40]	; (8006388 <ull_aon_read+0x38>)
 8006360:	2388      	movs	r3, #136	; 0x88
 8006362:	2200      	movs	r2, #0
 8006364:	4629      	mov	r1, r5
 8006366:	4620      	mov	r0, r4
 8006368:	f7ff ff23 	bl	80061b2 <dwt_write8bitoffsetreg>
 800636c:	2300      	movs	r3, #0
 800636e:	461a      	mov	r2, r3
 8006370:	4629      	mov	r1, r5
 8006372:	4620      	mov	r0, r4
 8006374:	f7ff ff1d 	bl	80061b2 <dwt_write8bitoffsetreg>
 8006378:	2200      	movs	r2, #0
 800637a:	4904      	ldr	r1, [pc, #16]	; (800638c <ull_aon_read+0x3c>)
 800637c:	4620      	mov	r0, r4
 800637e:	f7ff fb51 	bl	8005a24 <dwt_read8bitoffsetreg>
 8006382:	bd38      	pop	{r3, r4, r5, pc}
 8006384:	000a000c 	.word	0x000a000c
 8006388:	000a0004 	.word	0x000a0004
 800638c:	000a0008 	.word	0x000a0008

08006390 <ull_aon_write>:
 8006390:	b570      	push	{r4, r5, r6, lr}
 8006392:	4604      	mov	r4, r0
 8006394:	460b      	mov	r3, r1
 8006396:	4615      	mov	r5, r2
 8006398:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800639c:	bf34      	ite	cc
 800639e:	2600      	movcc	r6, #0
 80063a0:	2620      	movcs	r6, #32
 80063a2:	2200      	movs	r2, #0
 80063a4:	490b      	ldr	r1, [pc, #44]	; (80063d4 <ull_aon_write+0x44>)
 80063a6:	f7ff ff56 	bl	8006256 <dwt_write16bitoffsetreg>
 80063aa:	462b      	mov	r3, r5
 80063ac:	2200      	movs	r2, #0
 80063ae:	490a      	ldr	r1, [pc, #40]	; (80063d8 <ull_aon_write+0x48>)
 80063b0:	4620      	mov	r0, r4
 80063b2:	f7ff fefe 	bl	80061b2 <dwt_write8bitoffsetreg>
 80063b6:	4d09      	ldr	r5, [pc, #36]	; (80063dc <ull_aon_write+0x4c>)
 80063b8:	f046 0390 	orr.w	r3, r6, #144	; 0x90
 80063bc:	2200      	movs	r2, #0
 80063be:	4629      	mov	r1, r5
 80063c0:	4620      	mov	r0, r4
 80063c2:	f7ff fef6 	bl	80061b2 <dwt_write8bitoffsetreg>
 80063c6:	2300      	movs	r3, #0
 80063c8:	461a      	mov	r2, r3
 80063ca:	4629      	mov	r1, r5
 80063cc:	4620      	mov	r0, r4
 80063ce:	f7ff fef0 	bl	80061b2 <dwt_write8bitoffsetreg>
 80063d2:	bd70      	pop	{r4, r5, r6, pc}
 80063d4:	000a000c 	.word	0x000a000c
 80063d8:	000a0010 	.word	0x000a0010
 80063dc:	000a0004 	.word	0x000a0004

080063e0 <ull_configuresleep>:
 80063e0:	b570      	push	{r4, r5, r6, lr}
 80063e2:	4604      	mov	r4, r0
 80063e4:	460d      	mov	r5, r1
 80063e6:	4616      	mov	r6, r2
 80063e8:	2200      	movs	r2, #0
 80063ea:	f240 110b 	movw	r1, #267	; 0x10b
 80063ee:	f7ff ffcf 	bl	8006390 <ull_aon_write>
 80063f2:	f44f 7182 	mov.w	r1, #260	; 0x104
 80063f6:	4620      	mov	r0, r4
 80063f8:	f7ff ffaa 	bl	8006350 <ull_aon_read>
 80063fc:	f000 021f 	and.w	r2, r0, #31
 8006400:	f44f 7182 	mov.w	r1, #260	; 0x104
 8006404:	4620      	mov	r0, r4
 8006406:	f7ff ffc3 	bl	8006390 <ull_aon_write>
 800640a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800640c:	8a5a      	ldrh	r2, [r3, #18]
 800640e:	4315      	orrs	r5, r2
 8006410:	825d      	strh	r5, [r3, #18]
 8006412:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006414:	8a5b      	ldrh	r3, [r3, #18]
 8006416:	2200      	movs	r2, #0
 8006418:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800641c:	4620      	mov	r0, r4
 800641e:	f7ff ff1a 	bl	8006256 <dwt_write16bitoffsetreg>
 8006422:	4633      	mov	r3, r6
 8006424:	2200      	movs	r2, #0
 8006426:	4902      	ldr	r1, [pc, #8]	; (8006430 <ull_configuresleep+0x50>)
 8006428:	4620      	mov	r0, r4
 800642a:	f7ff fec2 	bl	80061b2 <dwt_write8bitoffsetreg>
 800642e:	bd70      	pop	{r4, r5, r6, pc}
 8006430:	000a0014 	.word	0x000a0014

08006434 <ull_signal_rx_buff_free>:
 8006434:	b510      	push	{r4, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	4604      	mov	r4, r0
 800643a:	2200      	movs	r2, #0
 800643c:	9200      	str	r2, [sp, #0]
 800643e:	4613      	mov	r3, r2
 8006440:	2113      	movs	r1, #19
 8006442:	f7ff feab 	bl	800619c <dwt_writetodevice>
 8006446:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006448:	7bda      	ldrb	r2, [r3, #15]
 800644a:	2a03      	cmp	r2, #3
 800644c:	bf0c      	ite	eq
 800644e:	2201      	moveq	r2, #1
 8006450:	2203      	movne	r2, #3
 8006452:	73da      	strb	r2, [r3, #15]
 8006454:	b002      	add	sp, #8
 8006456:	bd10      	pop	{r4, pc}

08006458 <dwt_write32bitoffsetreg>:
 8006458:	b510      	push	{r4, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	f88d 300c 	strb.w	r3, [sp, #12]
 8006460:	0a1c      	lsrs	r4, r3, #8
 8006462:	f88d 400d 	strb.w	r4, [sp, #13]
 8006466:	0c1c      	lsrs	r4, r3, #16
 8006468:	f88d 400e 	strb.w	r4, [sp, #14]
 800646c:	0e1b      	lsrs	r3, r3, #24
 800646e:	f88d 300f 	strb.w	r3, [sp, #15]
 8006472:	ab03      	add	r3, sp, #12
 8006474:	9300      	str	r3, [sp, #0]
 8006476:	2304      	movs	r3, #4
 8006478:	b292      	uxth	r2, r2
 800647a:	f7ff fe8f 	bl	800619c <dwt_writetodevice>
 800647e:	b004      	add	sp, #16
 8006480:	bd10      	pop	{r4, pc}
	...

08006484 <ull_isr>:
 8006484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006486:	4604      	mov	r4, r0
 8006488:	2200      	movs	r2, #0
 800648a:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 800648e:	f7ff fac9 	bl	8005a24 <dwt_read8bitoffsetreg>
 8006492:	4605      	mov	r5, r0
 8006494:	2200      	movs	r2, #0
 8006496:	2144      	movs	r1, #68	; 0x44
 8006498:	4620      	mov	r0, r4
 800649a:	f7ff fa9b 	bl	80059d4 <dwt_read32bitoffsetreg>
 800649e:	4606      	mov	r6, r0
 80064a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80064a2:	2200      	movs	r2, #0
 80064a4:	845a      	strh	r2, [r3, #34]	; 0x22
 80064a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80064aa:	61da      	str	r2, [r3, #28]
 80064ac:	841a      	strh	r2, [r3, #32]
 80064ae:	629a      	str	r2, [r3, #40]	; 0x28
 80064b0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80064b2:	629c      	str	r4, [r3, #40]	; 0x28
 80064b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80064b6:	61d8      	str	r0, [r3, #28]
 80064b8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80064ba:	7dd3      	ldrb	r3, [r2, #23]
 80064bc:	f003 0303 	and.w	r3, r3, #3
 80064c0:	2b03      	cmp	r3, #3
 80064c2:	d079      	beq.n	80065b8 <ull_isr+0x134>
 80064c4:	f416 6f80 	tst.w	r6, #1024	; 0x400
 80064c8:	d005      	beq.n	80064d6 <ull_isr+0x52>
 80064ca:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80064ce:	f043 0304 	orr.w	r3, r3, #4
 80064d2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80064d6:	f015 0f80 	tst.w	r5, #128	; 0x80
 80064da:	d174      	bne.n	80065c6 <ull_isr+0x142>
 80064dc:	f015 0f01 	tst.w	r5, #1
 80064e0:	f040 80a3 	bne.w	800662a <ull_isr+0x1a6>
 80064e4:	f015 0f40 	tst.w	r5, #64	; 0x40
 80064e8:	d00b      	beq.n	8006502 <ull_isr+0x7e>
 80064ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064ec:	b113      	cbz	r3, 80064f4 <ull_isr+0x70>
 80064ee:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80064f0:	301c      	adds	r0, #28
 80064f2:	4798      	blx	r3
 80064f4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80064f8:	2202      	movs	r2, #2
 80064fa:	2144      	movs	r1, #68	; 0x44
 80064fc:	4620      	mov	r0, r4
 80064fe:	f7ff feaa 	bl	8006256 <dwt_write16bitoffsetreg>
 8006502:	f015 0f08 	tst.w	r5, #8
 8006506:	f000 80ea 	beq.w	80066de <ull_isr+0x25a>
 800650a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800650c:	2200      	movs	r2, #0
 800650e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006512:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006514:	7bdb      	ldrb	r3, [r3, #15]
 8006516:	2b00      	cmp	r3, #0
 8006518:	f040 8095 	bne.w	8006646 <ull_isr+0x1c2>
 800651c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800651e:	61de      	str	r6, [r3, #28]
 8006520:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 8006524:	f000 80a9 	beq.w	800667a <ull_isr+0x1f6>
 8006528:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800652a:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800652e:	f043 0308 	orr.w	r3, r3, #8
 8006532:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8006536:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 800653a:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 800653e:	d008      	beq.n	8006552 <ull_isr+0xce>
 8006540:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006542:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8006546:	f043 0310 	orr.w	r3, r3, #16
 800654a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800654e:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 8006552:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8006556:	d006      	beq.n	8006566 <ull_isr+0xe2>
 8006558:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800655a:	7dd3      	ldrb	r3, [r2, #23]
 800655c:	f003 0303 	and.w	r3, r3, #3
 8006560:	2b03      	cmp	r3, #3
 8006562:	f000 8096 	beq.w	8006692 <ull_isr+0x20e>
 8006566:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800656a:	f040 809e 	bne.w	80066aa <ull_isr+0x226>
 800656e:	f447 43de 	orr.w	r3, r7, #28416	; 0x6f00
 8006572:	2200      	movs	r2, #0
 8006574:	2144      	movs	r1, #68	; 0x44
 8006576:	4620      	mov	r0, r4
 8006578:	f7ff ff6e 	bl	8006458 <dwt_write32bitoffsetreg>
 800657c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800657e:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8006580:	2b00      	cmp	r3, #0
 8006582:	f040 80a1 	bne.w	80066c8 <ull_isr+0x244>
 8006586:	7dc3      	ldrb	r3, [r0, #23]
 8006588:	f003 0303 	and.w	r3, r3, #3
 800658c:	2b03      	cmp	r3, #3
 800658e:	f000 809b 	beq.w	80066c8 <ull_isr+0x244>
 8006592:	69c3      	ldr	r3, [r0, #28]
 8006594:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006598:	61c3      	str	r3, [r0, #28]
 800659a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800659c:	69d3      	ldr	r3, [r2, #28]
 800659e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80065a2:	61d3      	str	r3, [r2, #28]
 80065a4:	69e3      	ldr	r3, [r4, #28]
 80065a6:	b113      	cbz	r3, 80065ae <ull_isr+0x12a>
 80065a8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80065aa:	301c      	adds	r0, #28
 80065ac:	4798      	blx	r3
 80065ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80065b6:	e08b      	b.n	80066d0 <ull_isr+0x24c>
 80065b8:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80065bc:	bf1c      	itt	ne
 80065be:	f045 0508 	orrne.w	r5, r5, #8
 80065c2:	b2ed      	uxtbne	r5, r5
 80065c4:	e77e      	b.n	80064c4 <ull_isr+0x40>
 80065c6:	6d27      	ldr	r7, [r4, #80]	; 0x50
 80065c8:	2200      	movs	r2, #0
 80065ca:	2148      	movs	r1, #72	; 0x48
 80065cc:	4620      	mov	r0, r4
 80065ce:	f7ff fa17 	bl	8005a00 <dwt_read16bitoffsetreg>
 80065d2:	8438      	strh	r0, [r7, #32]
 80065d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80065d6:	7d9a      	ldrb	r2, [r3, #22]
 80065d8:	b11a      	cbz	r2, 80065e2 <ull_isr+0x15e>
 80065da:	69da      	ldr	r2, [r3, #28]
 80065dc:	f012 0f04 	tst.w	r2, #4
 80065e0:	d103      	bne.n	80065ea <ull_isr+0x166>
 80065e2:	8c1b      	ldrh	r3, [r3, #32]
 80065e4:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80065e8:	b18b      	cbz	r3, 800660e <ull_isr+0x18a>
 80065ea:	2304      	movs	r3, #4
 80065ec:	2200      	movs	r2, #0
 80065ee:	2144      	movs	r1, #68	; 0x44
 80065f0:	4620      	mov	r0, r4
 80065f2:	f7ff fdde 	bl	80061b2 <dwt_write8bitoffsetreg>
 80065f6:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 80065fa:	2200      	movs	r2, #0
 80065fc:	2148      	movs	r1, #72	; 0x48
 80065fe:	4620      	mov	r0, r4
 8006600:	f7ff fe29 	bl	8006256 <dwt_write16bitoffsetreg>
 8006604:	6a23      	ldr	r3, [r4, #32]
 8006606:	b113      	cbz	r3, 800660e <ull_isr+0x18a>
 8006608:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800660a:	301c      	adds	r0, #28
 800660c:	4798      	blx	r3
 800660e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006610:	8c1b      	ldrh	r3, [r3, #32]
 8006612:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006616:	f43f af61 	beq.w	80064dc <ull_isr+0x58>
 800661a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800661e:	2200      	movs	r2, #0
 8006620:	2148      	movs	r1, #72	; 0x48
 8006622:	4620      	mov	r0, r4
 8006624:	f7ff fe17 	bl	8006256 <dwt_write16bitoffsetreg>
 8006628:	e758      	b.n	80064dc <ull_isr+0x58>
 800662a:	23f8      	movs	r3, #248	; 0xf8
 800662c:	2200      	movs	r2, #0
 800662e:	2144      	movs	r1, #68	; 0x44
 8006630:	4620      	mov	r0, r4
 8006632:	f7ff fdbe 	bl	80061b2 <dwt_write8bitoffsetreg>
 8006636:	6923      	ldr	r3, [r4, #16]
 8006638:	2b00      	cmp	r3, #0
 800663a:	f43f af53 	beq.w	80064e4 <ull_isr+0x60>
 800663e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006640:	301c      	adds	r0, #28
 8006642:	4798      	blx	r3
 8006644:	e74e      	b.n	80064e4 <ull_isr+0x60>
 8006646:	493b      	ldr	r1, [pc, #236]	; (8006734 <ull_isr+0x2b0>)
 8006648:	4620      	mov	r0, r4
 800664a:	f7ff f9eb 	bl	8005a24 <dwt_read8bitoffsetreg>
 800664e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006650:	7bdb      	ldrb	r3, [r3, #15]
 8006652:	2b03      	cmp	r3, #3
 8006654:	bf08      	it	eq
 8006656:	f3c0 1007 	ubfxeq	r0, r0, #4, #8
 800665a:	f010 0f01 	tst.w	r0, #1
 800665e:	bf18      	it	ne
 8006660:	f446 4680 	orrne.w	r6, r6, #16384	; 0x4000
 8006664:	f010 0f02 	tst.w	r0, #2
 8006668:	bf18      	it	ne
 800666a:	f446 5600 	orrne.w	r6, r6, #8192	; 0x2000
 800666e:	f010 0f04 	tst.w	r0, #4
 8006672:	bf18      	it	ne
 8006674:	f446 6680 	orrne.w	r6, r6, #1024	; 0x400
 8006678:	e750      	b.n	800651c <ull_isr+0x98>
 800667a:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800667e:	bf1f      	itttt	ne
 8006680:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 8006682:	f892 3024 	ldrbne.w	r3, [r2, #36]	; 0x24
 8006686:	f043 0304 	orrne.w	r3, r3, #4
 800668a:	f882 3024 	strbne.w	r3, [r2, #36]	; 0x24
 800668e:	2700      	movs	r7, #0
 8006690:	e753      	b.n	800653a <ull_isr+0xb6>
 8006692:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8006696:	f043 0302 	orr.w	r3, r3, #2
 800669a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800669e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80066a0:	2200      	movs	r2, #0
 80066a2:	845a      	strh	r2, [r3, #34]	; 0x22
 80066a4:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 80066a8:	e761      	b.n	800656e <ull_isr+0xea>
 80066aa:	4620      	mov	r0, r4
 80066ac:	f7ff fd8e 	bl	80061cc <ull_getframelength>
 80066b0:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80066b4:	f43f af5b 	beq.w	800656e <ull_isr+0xea>
 80066b8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80066ba:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80066be:	f043 0301 	orr.w	r3, r3, #1
 80066c2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80066c6:	e752      	b.n	800656e <ull_isr+0xea>
 80066c8:	6963      	ldr	r3, [r4, #20]
 80066ca:	b10b      	cbz	r3, 80066d0 <ull_isr+0x24c>
 80066cc:	301c      	adds	r0, #28
 80066ce:	4798      	blx	r3
 80066d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80066d2:	7bdb      	ldrb	r3, [r3, #15]
 80066d4:	b953      	cbnz	r3, 80066ec <ull_isr+0x268>
 80066d6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80066de:	f015 0f10 	tst.w	r5, #16
 80066e2:	d107      	bne.n	80066f4 <ull_isr+0x270>
 80066e4:	f015 0f20 	tst.w	r5, #32
 80066e8:	d114      	bne.n	8006714 <ull_isr+0x290>
 80066ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066ec:	4620      	mov	r0, r4
 80066ee:	f7ff fea1 	bl	8006434 <ull_signal_rx_buff_free>
 80066f2:	e7f0      	b.n	80066d6 <ull_isr+0x252>
 80066f4:	4b10      	ldr	r3, [pc, #64]	; (8006738 <ull_isr+0x2b4>)
 80066f6:	2200      	movs	r2, #0
 80066f8:	2144      	movs	r1, #68	; 0x44
 80066fa:	4620      	mov	r0, r4
 80066fc:	f7ff feac 	bl	8006458 <dwt_write32bitoffsetreg>
 8006700:	69e3      	ldr	r3, [r4, #28]
 8006702:	b113      	cbz	r3, 800670a <ull_isr+0x286>
 8006704:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006706:	301c      	adds	r0, #28
 8006708:	4798      	blx	r3
 800670a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800670c:	2200      	movs	r2, #0
 800670e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006712:	e7e7      	b.n	80066e4 <ull_isr+0x260>
 8006714:	4b09      	ldr	r3, [pc, #36]	; (800673c <ull_isr+0x2b8>)
 8006716:	2200      	movs	r2, #0
 8006718:	2144      	movs	r1, #68	; 0x44
 800671a:	4620      	mov	r0, r4
 800671c:	f7ff fe9c 	bl	8006458 <dwt_write32bitoffsetreg>
 8006720:	69a3      	ldr	r3, [r4, #24]
 8006722:	b113      	cbz	r3, 800672a <ull_isr+0x2a6>
 8006724:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006726:	301c      	adds	r0, #28
 8006728:	4798      	blx	r3
 800672a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800672c:	2200      	movs	r2, #0
 800672e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006732:	e7da      	b.n	80066ea <ull_isr+0x266>
 8006734:	00010024 	.word	0x00010024
 8006738:	34059400 	.word	0x34059400
 800673c:	10220400 	.word	0x10220400

08006740 <_dwt_adjust_delaytime>:
 8006740:	b538      	push	{r3, r4, r5, lr}
 8006742:	4604      	mov	r4, r0
 8006744:	b989      	cbnz	r1, 800676a <_dwt_adjust_delaytime+0x2a>
 8006746:	2200      	movs	r2, #0
 8006748:	212c      	movs	r1, #44	; 0x2c
 800674a:	f7ff f943 	bl	80059d4 <dwt_read32bitoffsetreg>
 800674e:	4605      	mov	r5, r0
 8006750:	2201      	movs	r2, #1
 8006752:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8006756:	4620      	mov	r0, r4
 8006758:	f7ff f964 	bl	8005a24 <dwt_read8bitoffsetreg>
 800675c:	1a2b      	subs	r3, r5, r0
 800675e:	2200      	movs	r2, #0
 8006760:	212c      	movs	r1, #44	; 0x2c
 8006762:	4620      	mov	r0, r4
 8006764:	f7ff fe78 	bl	8006458 <dwt_write32bitoffsetreg>
 8006768:	bd38      	pop	{r3, r4, r5, pc}
 800676a:	2200      	movs	r2, #0
 800676c:	212c      	movs	r1, #44	; 0x2c
 800676e:	f7ff f931 	bl	80059d4 <dwt_read32bitoffsetreg>
 8006772:	4605      	mov	r5, r0
 8006774:	2201      	movs	r2, #1
 8006776:	4905      	ldr	r1, [pc, #20]	; (800678c <_dwt_adjust_delaytime+0x4c>)
 8006778:	4620      	mov	r0, r4
 800677a:	f7ff f953 	bl	8005a24 <dwt_read8bitoffsetreg>
 800677e:	1a2b      	subs	r3, r5, r0
 8006780:	2200      	movs	r2, #0
 8006782:	212c      	movs	r1, #44	; 0x2c
 8006784:	4620      	mov	r0, r4
 8006786:	f7ff fe67 	bl	8006458 <dwt_write32bitoffsetreg>
 800678a:	e7ed      	b.n	8006768 <_dwt_adjust_delaytime+0x28>
 800678c:	00010004 	.word	0x00010004

08006790 <ull_setrxaftertxdelay>:
 8006790:	b570      	push	{r4, r5, r6, lr}
 8006792:	4606      	mov	r6, r0
 8006794:	460c      	mov	r4, r1
 8006796:	4d08      	ldr	r5, [pc, #32]	; (80067b8 <ull_setrxaftertxdelay+0x28>)
 8006798:	2200      	movs	r2, #0
 800679a:	4629      	mov	r1, r5
 800679c:	f7ff f91a 	bl	80059d4 <dwt_read32bitoffsetreg>
 80067a0:	0d00      	lsrs	r0, r0, #20
 80067a2:	0500      	lsls	r0, r0, #20
 80067a4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80067a8:	4303      	orrs	r3, r0
 80067aa:	2200      	movs	r2, #0
 80067ac:	4629      	mov	r1, r5
 80067ae:	4630      	mov	r0, r6
 80067b0:	f7ff fe52 	bl	8006458 <dwt_write32bitoffsetreg>
 80067b4:	bd70      	pop	{r4, r5, r6, pc}
 80067b6:	bf00      	nop
 80067b8:	00010008 	.word	0x00010008

080067bc <ull_setlnapamode>:
 80067bc:	b538      	push	{r3, r4, r5, lr}
 80067be:	4605      	mov	r5, r0
 80067c0:	460c      	mov	r4, r1
 80067c2:	2200      	movs	r2, #0
 80067c4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80067c8:	f7ff f904 	bl	80059d4 <dwt_read32bitoffsetreg>
 80067cc:	4b0b      	ldr	r3, [pc, #44]	; (80067fc <ull_setlnapamode+0x40>)
 80067ce:	4003      	ands	r3, r0
 80067d0:	f014 0f01 	tst.w	r4, #1
 80067d4:	bf18      	it	ne
 80067d6:	f443 2380 	orrne.w	r3, r3, #262144	; 0x40000
 80067da:	f014 0f02 	tst.w	r4, #2
 80067de:	bf18      	it	ne
 80067e0:	f443 4310 	orrne.w	r3, r3, #36864	; 0x9000
 80067e4:	f014 0f04 	tst.w	r4, #4
 80067e8:	bf18      	it	ne
 80067ea:	f043 0312 	orrne.w	r3, r3, #18
 80067ee:	2200      	movs	r2, #0
 80067f0:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80067f4:	4628      	mov	r0, r5
 80067f6:	f7ff fe2f 	bl	8006458 <dwt_write32bitoffsetreg>
 80067fa:	bd38      	pop	{r3, r4, r5, pc}
 80067fc:	ffe00fc0 	.word	0xffe00fc0

08006800 <ull_configurestskey>:
 8006800:	b538      	push	{r3, r4, r5, lr}
 8006802:	4605      	mov	r5, r0
 8006804:	460c      	mov	r4, r1
 8006806:	680b      	ldr	r3, [r1, #0]
 8006808:	2200      	movs	r2, #0
 800680a:	490b      	ldr	r1, [pc, #44]	; (8006838 <ull_configurestskey+0x38>)
 800680c:	f7ff fe24 	bl	8006458 <dwt_write32bitoffsetreg>
 8006810:	6863      	ldr	r3, [r4, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	4909      	ldr	r1, [pc, #36]	; (800683c <ull_configurestskey+0x3c>)
 8006816:	4628      	mov	r0, r5
 8006818:	f7ff fe1e 	bl	8006458 <dwt_write32bitoffsetreg>
 800681c:	68a3      	ldr	r3, [r4, #8]
 800681e:	2200      	movs	r2, #0
 8006820:	4907      	ldr	r1, [pc, #28]	; (8006840 <ull_configurestskey+0x40>)
 8006822:	4628      	mov	r0, r5
 8006824:	f7ff fe18 	bl	8006458 <dwt_write32bitoffsetreg>
 8006828:	68e3      	ldr	r3, [r4, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	4905      	ldr	r1, [pc, #20]	; (8006844 <ull_configurestskey+0x44>)
 800682e:	4628      	mov	r0, r5
 8006830:	f7ff fe12 	bl	8006458 <dwt_write32bitoffsetreg>
 8006834:	bd38      	pop	{r3, r4, r5, pc}
 8006836:	bf00      	nop
 8006838:	0002000c 	.word	0x0002000c
 800683c:	00020010 	.word	0x00020010
 8006840:	00020014 	.word	0x00020014
 8006844:	00020018 	.word	0x00020018

08006848 <ull_configurestsiv>:
 8006848:	b538      	push	{r3, r4, r5, lr}
 800684a:	4605      	mov	r5, r0
 800684c:	460c      	mov	r4, r1
 800684e:	680b      	ldr	r3, [r1, #0]
 8006850:	2200      	movs	r2, #0
 8006852:	490b      	ldr	r1, [pc, #44]	; (8006880 <ull_configurestsiv+0x38>)
 8006854:	f7ff fe00 	bl	8006458 <dwt_write32bitoffsetreg>
 8006858:	6863      	ldr	r3, [r4, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	4909      	ldr	r1, [pc, #36]	; (8006884 <ull_configurestsiv+0x3c>)
 800685e:	4628      	mov	r0, r5
 8006860:	f7ff fdfa 	bl	8006458 <dwt_write32bitoffsetreg>
 8006864:	68a3      	ldr	r3, [r4, #8]
 8006866:	2200      	movs	r2, #0
 8006868:	4907      	ldr	r1, [pc, #28]	; (8006888 <ull_configurestsiv+0x40>)
 800686a:	4628      	mov	r0, r5
 800686c:	f7ff fdf4 	bl	8006458 <dwt_write32bitoffsetreg>
 8006870:	68e3      	ldr	r3, [r4, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	4905      	ldr	r1, [pc, #20]	; (800688c <ull_configurestsiv+0x44>)
 8006876:	4628      	mov	r0, r5
 8006878:	f7ff fdee 	bl	8006458 <dwt_write32bitoffsetreg>
 800687c:	bd38      	pop	{r3, r4, r5, pc}
 800687e:	bf00      	nop
 8006880:	0002001c 	.word	0x0002001c
 8006884:	00020020 	.word	0x00020020
 8006888:	00020024 	.word	0x00020024
 800688c:	00020028 	.word	0x00020028

08006890 <ull_configmrxlut>:
 8006890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006894:	4604      	mov	r4, r0
 8006896:	2905      	cmp	r1, #5
 8006898:	d040      	beq.n	800691c <ull_configmrxlut+0x8c>
 800689a:	4d26      	ldr	r5, [pc, #152]	; (8006934 <ull_configmrxlut+0xa4>)
 800689c:	462e      	mov	r6, r5
 800689e:	4f26      	ldr	r7, [pc, #152]	; (8006938 <ull_configmrxlut+0xa8>)
 80068a0:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 800697c <ull_configmrxlut+0xec>
 80068a4:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8006980 <ull_configmrxlut+0xf0>
 80068a8:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006984 <ull_configmrxlut+0xf4>
 80068ac:	4b23      	ldr	r3, [pc, #140]	; (800693c <ull_configmrxlut+0xac>)
 80068ae:	2200      	movs	r2, #0
 80068b0:	4923      	ldr	r1, [pc, #140]	; (8006940 <ull_configmrxlut+0xb0>)
 80068b2:	4620      	mov	r0, r4
 80068b4:	f7ff fdd0 	bl	8006458 <dwt_write32bitoffsetreg>
 80068b8:	4653      	mov	r3, sl
 80068ba:	2200      	movs	r2, #0
 80068bc:	4921      	ldr	r1, [pc, #132]	; (8006944 <ull_configmrxlut+0xb4>)
 80068be:	4620      	mov	r0, r4
 80068c0:	f7ff fdca 	bl	8006458 <dwt_write32bitoffsetreg>
 80068c4:	464b      	mov	r3, r9
 80068c6:	2200      	movs	r2, #0
 80068c8:	491f      	ldr	r1, [pc, #124]	; (8006948 <ull_configmrxlut+0xb8>)
 80068ca:	4620      	mov	r0, r4
 80068cc:	f7ff fdc4 	bl	8006458 <dwt_write32bitoffsetreg>
 80068d0:	4643      	mov	r3, r8
 80068d2:	2200      	movs	r2, #0
 80068d4:	491d      	ldr	r1, [pc, #116]	; (800694c <ull_configmrxlut+0xbc>)
 80068d6:	4620      	mov	r0, r4
 80068d8:	f7ff fdbe 	bl	8006458 <dwt_write32bitoffsetreg>
 80068dc:	463b      	mov	r3, r7
 80068de:	2200      	movs	r2, #0
 80068e0:	491b      	ldr	r1, [pc, #108]	; (8006950 <ull_configmrxlut+0xc0>)
 80068e2:	4620      	mov	r0, r4
 80068e4:	f7ff fdb8 	bl	8006458 <dwt_write32bitoffsetreg>
 80068e8:	4633      	mov	r3, r6
 80068ea:	2200      	movs	r2, #0
 80068ec:	4919      	ldr	r1, [pc, #100]	; (8006954 <ull_configmrxlut+0xc4>)
 80068ee:	4620      	mov	r0, r4
 80068f0:	f7ff fdb2 	bl	8006458 <dwt_write32bitoffsetreg>
 80068f4:	462b      	mov	r3, r5
 80068f6:	2200      	movs	r2, #0
 80068f8:	4917      	ldr	r1, [pc, #92]	; (8006958 <ull_configmrxlut+0xc8>)
 80068fa:	4620      	mov	r0, r4
 80068fc:	f7ff fdac 	bl	8006458 <dwt_write32bitoffsetreg>
 8006900:	4b16      	ldr	r3, [pc, #88]	; (800695c <ull_configmrxlut+0xcc>)
 8006902:	2200      	movs	r2, #0
 8006904:	4916      	ldr	r1, [pc, #88]	; (8006960 <ull_configmrxlut+0xd0>)
 8006906:	4620      	mov	r0, r4
 8006908:	f7ff fda6 	bl	8006458 <dwt_write32bitoffsetreg>
 800690c:	4b15      	ldr	r3, [pc, #84]	; (8006964 <ull_configmrxlut+0xd4>)
 800690e:	2200      	movs	r2, #0
 8006910:	4915      	ldr	r1, [pc, #84]	; (8006968 <ull_configmrxlut+0xd8>)
 8006912:	4620      	mov	r0, r4
 8006914:	f7ff fda0 	bl	8006458 <dwt_write32bitoffsetreg>
 8006918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800691c:	4d13      	ldr	r5, [pc, #76]	; (800696c <ull_configmrxlut+0xdc>)
 800691e:	4e14      	ldr	r6, [pc, #80]	; (8006970 <ull_configmrxlut+0xe0>)
 8006920:	4f14      	ldr	r7, [pc, #80]	; (8006974 <ull_configmrxlut+0xe4>)
 8006922:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8006988 <ull_configmrxlut+0xf8>
 8006926:	f8df 9064 	ldr.w	r9, [pc, #100]	; 800698c <ull_configmrxlut+0xfc>
 800692a:	f8df a064 	ldr.w	sl, [pc, #100]	; 8006990 <ull_configmrxlut+0x100>
 800692e:	4b12      	ldr	r3, [pc, #72]	; (8006978 <ull_configmrxlut+0xe8>)
 8006930:	e7bd      	b.n	80068ae <ull_configmrxlut+0x1e>
 8006932:	bf00      	nop
 8006934:	0002afb5 	.word	0x0002afb5
 8006938:	0002af7d 	.word	0x0002af7d
 800693c:	0002a8fe 	.word	0x0002a8fe
 8006940:	00030038 	.word	0x00030038
 8006944:	0003003c 	.word	0x0003003c
 8006948:	00030040 	.word	0x00030040
 800694c:	00030044 	.word	0x00030044
 8006950:	00030048 	.word	0x00030048
 8006954:	0003004c 	.word	0x0003004c
 8006958:	00030050 	.word	0x00030050
 800695c:	10000240 	.word	0x10000240
 8006960:	0003001c 	.word	0x0003001c
 8006964:	1b6da489 	.word	0x1b6da489
 8006968:	00030020 	.word	0x00030020
 800696c:	0001cff5 	.word	0x0001cff5
 8006970:	0001cfb5 	.word	0x0001cfb5
 8006974:	0001cf36 	.word	0x0001cf36
 8006978:	0001c0fd 	.word	0x0001c0fd
 800697c:	0002af3e 	.word	0x0002af3e
 8006980:	0002a5fe 	.word	0x0002a5fe
 8006984:	0002ac36 	.word	0x0002ac36
 8006988:	0001c77e 	.word	0x0001c77e
 800698c:	0001c6be 	.word	0x0001c6be
 8006990:	0001c43e 	.word	0x0001c43e

08006994 <ull_disable_rftx_blocks>:
 8006994:	b508      	push	{r3, lr}
 8006996:	2300      	movs	r3, #0
 8006998:	461a      	mov	r2, r3
 800699a:	4902      	ldr	r1, [pc, #8]	; (80069a4 <ull_disable_rftx_blocks+0x10>)
 800699c:	f7ff fd5c 	bl	8006458 <dwt_write32bitoffsetreg>
 80069a0:	bd08      	pop	{r3, pc}
 80069a2:	bf00      	nop
 80069a4:	00070004 	.word	0x00070004

080069a8 <ull_disable_rf_tx>:
 80069a8:	b538      	push	{r3, r4, r5, lr}
 80069aa:	4604      	mov	r4, r0
 80069ac:	460d      	mov	r5, r1
 80069ae:	2300      	movs	r3, #0
 80069b0:	461a      	mov	r2, r3
 80069b2:	490a      	ldr	r1, [pc, #40]	; (80069dc <ull_disable_rf_tx+0x34>)
 80069b4:	f7ff fd50 	bl	8006458 <dwt_write32bitoffsetreg>
 80069b8:	2300      	movs	r3, #0
 80069ba:	461a      	mov	r2, r3
 80069bc:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 80069c0:	4620      	mov	r0, r4
 80069c2:	f7ff fd49 	bl	8006458 <dwt_write32bitoffsetreg>
 80069c6:	b905      	cbnz	r5, 80069ca <ull_disable_rf_tx+0x22>
 80069c8:	bd38      	pop	{r3, r4, r5, pc}
 80069ca:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 80069ce:	2200      	movs	r2, #0
 80069d0:	4903      	ldr	r1, [pc, #12]	; (80069e0 <ull_disable_rf_tx+0x38>)
 80069d2:	4620      	mov	r0, r4
 80069d4:	f7ff fd40 	bl	8006458 <dwt_write32bitoffsetreg>
 80069d8:	e7f6      	b.n	80069c8 <ull_disable_rf_tx+0x20>
 80069da:	bf00      	nop
 80069dc:	00070048 	.word	0x00070048
 80069e0:	00070014 	.word	0x00070014

080069e4 <ull_readrxdata>:
 80069e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069e6:	b083      	sub	sp, #12
 80069e8:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80069ea:	7be4      	ldrb	r4, [r4, #15]
 80069ec:	2c03      	cmp	r4, #3
 80069ee:	bf0c      	ite	eq
 80069f0:	f44f 1c98 	moveq.w	ip, #1245184	; 0x130000
 80069f4:	f44f 1c90 	movne.w	ip, #1179648	; 0x120000
 80069f8:	189c      	adds	r4, r3, r2
 80069fa:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80069fe:	da19      	bge.n	8006a34 <ull_readrxdata+0x50>
 8006a00:	461d      	mov	r5, r3
 8006a02:	4616      	mov	r6, r2
 8006a04:	460f      	mov	r7, r1
 8006a06:	4604      	mov	r4, r0
 8006a08:	2b7f      	cmp	r3, #127	; 0x7f
 8006a0a:	d915      	bls.n	8006a38 <ull_readrxdata+0x54>
 8006a0c:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8006a10:	2200      	movs	r2, #0
 8006a12:	490d      	ldr	r1, [pc, #52]	; (8006a48 <ull_readrxdata+0x64>)
 8006a14:	f7ff fd20 	bl	8006458 <dwt_write32bitoffsetreg>
 8006a18:	462b      	mov	r3, r5
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	490b      	ldr	r1, [pc, #44]	; (8006a4c <ull_readrxdata+0x68>)
 8006a1e:	4620      	mov	r0, r4
 8006a20:	f7ff fd1a 	bl	8006458 <dwt_write32bitoffsetreg>
 8006a24:	9700      	str	r7, [sp, #0]
 8006a26:	4633      	mov	r3, r6
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8006a2e:	4620      	mov	r0, r4
 8006a30:	f7fe ffc6 	bl	80059c0 <dwt_readfromdevice>
 8006a34:	b003      	add	sp, #12
 8006a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a38:	9100      	str	r1, [sp, #0]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	462a      	mov	r2, r5
 8006a3e:	4661      	mov	r1, ip
 8006a40:	f7fe ffbe 	bl	80059c0 <dwt_readfromdevice>
 8006a44:	e7f6      	b.n	8006a34 <ull_readrxdata+0x50>
 8006a46:	bf00      	nop
 8006a48:	001f0004 	.word	0x001f0004
 8006a4c:	001f0008 	.word	0x001f0008

08006a50 <ull_rxenable>:
 8006a50:	b530      	push	{r4, r5, lr}
 8006a52:	b083      	sub	sp, #12
 8006a54:	4605      	mov	r5, r0
 8006a56:	460c      	mov	r4, r1
 8006a58:	b171      	cbz	r1, 8006a78 <ull_rxenable+0x28>
 8006a5a:	f021 0302 	bic.w	r3, r1, #2
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	2b0f      	cmp	r3, #15
 8006a62:	d856      	bhi.n	8006b12 <ull_rxenable+0xc2>
 8006a64:	e8df f003 	tbb	[pc, r3]
 8006a68:	21555510 	.word	0x21555510
 8006a6c:	28555555 	.word	0x28555555
 8006a70:	55555555 	.word	0x55555555
 8006a74:	33555555 	.word	0x33555555
 8006a78:	2200      	movs	r2, #0
 8006a7a:	9200      	str	r2, [sp, #0]
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	2102      	movs	r1, #2
 8006a80:	f7ff fb8c 	bl	800619c <dwt_writetodevice>
 8006a84:	4620      	mov	r0, r4
 8006a86:	e00e      	b.n	8006aa6 <ull_rxenable+0x56>
 8006a88:	2200      	movs	r2, #0
 8006a8a:	9200      	str	r2, [sp, #0]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	2104      	movs	r1, #4
 8006a90:	f7ff fb84 	bl	800619c <dwt_writetodevice>
 8006a94:	2203      	movs	r2, #3
 8006a96:	2144      	movs	r1, #68	; 0x44
 8006a98:	4628      	mov	r0, r5
 8006a9a:	f7fe ffc3 	bl	8005a24 <dwt_read8bitoffsetreg>
 8006a9e:	f010 0f08 	tst.w	r0, #8
 8006aa2:	d11f      	bne.n	8006ae4 <ull_rxenable+0x94>
 8006aa4:	2000      	movs	r0, #0
 8006aa6:	b003      	add	sp, #12
 8006aa8:	bd30      	pop	{r4, r5, pc}
 8006aaa:	2200      	movs	r2, #0
 8006aac:	9200      	str	r2, [sp, #0]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	210a      	movs	r1, #10
 8006ab2:	f7ff fb73 	bl	800619c <dwt_writetodevice>
 8006ab6:	e7ed      	b.n	8006a94 <ull_rxenable+0x44>
 8006ab8:	2100      	movs	r1, #0
 8006aba:	f7ff fe41 	bl	8006740 <_dwt_adjust_delaytime>
 8006abe:	2200      	movs	r2, #0
 8006ac0:	9200      	str	r2, [sp, #0]
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	2108      	movs	r1, #8
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	f7ff fb68 	bl	800619c <dwt_writetodevice>
 8006acc:	e7e2      	b.n	8006a94 <ull_rxenable+0x44>
 8006ace:	2101      	movs	r1, #1
 8006ad0:	f7ff fe36 	bl	8006740 <_dwt_adjust_delaytime>
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	9200      	str	r2, [sp, #0]
 8006ad8:	4613      	mov	r3, r2
 8006ada:	2106      	movs	r1, #6
 8006adc:	4628      	mov	r0, r5
 8006ade:	f7ff fb5d 	bl	800619c <dwt_writetodevice>
 8006ae2:	e7d7      	b.n	8006a94 <ull_rxenable+0x44>
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	9100      	str	r1, [sp, #0]
 8006ae8:	460b      	mov	r3, r1
 8006aea:	460a      	mov	r2, r1
 8006aec:	4628      	mov	r0, r5
 8006aee:	f7ff fb55 	bl	800619c <dwt_writetodevice>
 8006af2:	f014 0f02 	tst.w	r4, #2
 8006af6:	d002      	beq.n	8006afe <ull_rxenable+0xae>
 8006af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006afc:	e7d3      	b.n	8006aa6 <ull_rxenable+0x56>
 8006afe:	2200      	movs	r2, #0
 8006b00:	9200      	str	r2, [sp, #0]
 8006b02:	4613      	mov	r3, r2
 8006b04:	2102      	movs	r1, #2
 8006b06:	4628      	mov	r0, r5
 8006b08:	f7ff fb48 	bl	800619c <dwt_writetodevice>
 8006b0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b10:	e7c9      	b.n	8006aa6 <ull_rxenable+0x56>
 8006b12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b16:	e7c6      	b.n	8006aa6 <ull_rxenable+0x56>

08006b18 <ull_writetxdata>:
 8006b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	185c      	adds	r4, r3, r1
 8006b1e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8006b22:	da24      	bge.n	8006b6e <ull_writetxdata+0x56>
 8006b24:	461c      	mov	r4, r3
 8006b26:	4617      	mov	r7, r2
 8006b28:	460e      	mov	r6, r1
 8006b2a:	4605      	mov	r5, r0
 8006b2c:	2b7f      	cmp	r3, #127	; 0x7f
 8006b2e:	d915      	bls.n	8006b5c <ull_writetxdata+0x44>
 8006b30:	2314      	movs	r3, #20
 8006b32:	2200      	movs	r2, #0
 8006b34:	490f      	ldr	r1, [pc, #60]	; (8006b74 <ull_writetxdata+0x5c>)
 8006b36:	f7ff fc8f 	bl	8006458 <dwt_write32bitoffsetreg>
 8006b3a:	4623      	mov	r3, r4
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	490e      	ldr	r1, [pc, #56]	; (8006b78 <ull_writetxdata+0x60>)
 8006b40:	4628      	mov	r0, r5
 8006b42:	f7ff fc89 	bl	8006458 <dwt_write32bitoffsetreg>
 8006b46:	9700      	str	r7, [sp, #0]
 8006b48:	4633      	mov	r3, r6
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8006b50:	4628      	mov	r0, r5
 8006b52:	f7ff fb23 	bl	800619c <dwt_writetodevice>
 8006b56:	2000      	movs	r0, #0
 8006b58:	b003      	add	sp, #12
 8006b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b5c:	9200      	str	r2, [sp, #0]
 8006b5e:	460b      	mov	r3, r1
 8006b60:	4622      	mov	r2, r4
 8006b62:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 8006b66:	f7ff fb19 	bl	800619c <dwt_writetodevice>
 8006b6a:	2000      	movs	r0, #0
 8006b6c:	e7f4      	b.n	8006b58 <ull_writetxdata+0x40>
 8006b6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b72:	e7f1      	b.n	8006b58 <ull_writetxdata+0x40>
 8006b74:	001f0004 	.word	0x001f0004
 8006b78:	001f0008 	.word	0x001f0008

08006b7c <dwt_modify32bitoffsetreg>:
 8006b7c:	b530      	push	{r4, r5, lr}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	9c08      	ldr	r4, [sp, #32]
 8006b82:	f88d 3008 	strb.w	r3, [sp, #8]
 8006b86:	0a1d      	lsrs	r5, r3, #8
 8006b88:	f88d 5009 	strb.w	r5, [sp, #9]
 8006b8c:	0c1d      	lsrs	r5, r3, #16
 8006b8e:	f88d 500a 	strb.w	r5, [sp, #10]
 8006b92:	0e1b      	lsrs	r3, r3, #24
 8006b94:	f88d 300b 	strb.w	r3, [sp, #11]
 8006b98:	f88d 400c 	strb.w	r4, [sp, #12]
 8006b9c:	0a23      	lsrs	r3, r4, #8
 8006b9e:	f88d 300d 	strb.w	r3, [sp, #13]
 8006ba2:	0c23      	lsrs	r3, r4, #16
 8006ba4:	f88d 300e 	strb.w	r3, [sp, #14]
 8006ba8:	0e24      	lsrs	r4, r4, #24
 8006baa:	f88d 400f 	strb.w	r4, [sp, #15]
 8006bae:	f248 0303 	movw	r3, #32771	; 0x8003
 8006bb2:	9301      	str	r3, [sp, #4]
 8006bb4:	ab02      	add	r3, sp, #8
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	2308      	movs	r3, #8
 8006bba:	b292      	uxth	r2, r2
 8006bbc:	f7fe fe7d 	bl	80058ba <dwt_xfer3xxx>
 8006bc0:	b005      	add	sp, #20
 8006bc2:	bd30      	pop	{r4, r5, pc}

08006bc4 <_dwt_kick_dgc_on_wakeup>:
 8006bc4:	b500      	push	{lr}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	2905      	cmp	r1, #5
 8006bca:	d004      	beq.n	8006bd6 <_dwt_kick_dgc_on_wakeup+0x12>
 8006bcc:	2909      	cmp	r1, #9
 8006bce:	d00b      	beq.n	8006be8 <_dwt_kick_dgc_on_wakeup+0x24>
 8006bd0:	b003      	add	sp, #12
 8006bd2:	f85d fb04 	ldr.w	pc, [sp], #4
 8006bd6:	2340      	movs	r3, #64	; 0x40
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	f46f 5300 	mvn.w	r3, #8192	; 0x2000
 8006bde:	2200      	movs	r2, #0
 8006be0:	4906      	ldr	r1, [pc, #24]	; (8006bfc <_dwt_kick_dgc_on_wakeup+0x38>)
 8006be2:	f7ff ffcb 	bl	8006b7c <dwt_modify32bitoffsetreg>
 8006be6:	e7f3      	b.n	8006bd0 <_dwt_kick_dgc_on_wakeup+0xc>
 8006be8:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	f46f 5300 	mvn.w	r3, #8192	; 0x2000
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	4901      	ldr	r1, [pc, #4]	; (8006bfc <_dwt_kick_dgc_on_wakeup+0x38>)
 8006bf6:	f7ff ffc1 	bl	8006b7c <dwt_modify32bitoffsetreg>
 8006bfa:	e7e9      	b.n	8006bd0 <_dwt_kick_dgc_on_wakeup+0xc>
 8006bfc:	000b0008 	.word	0x000b0008

08006c00 <ull_enable_rf_tx>:
 8006c00:	b570      	push	{r4, r5, r6, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	4604      	mov	r4, r0
 8006c06:	460e      	mov	r6, r1
 8006c08:	4d13      	ldr	r5, [pc, #76]	; (8006c58 <ull_enable_rf_tx+0x58>)
 8006c0a:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c14:	2200      	movs	r2, #0
 8006c16:	4629      	mov	r1, r5
 8006c18:	f7ff ffb0 	bl	8006b7c <dwt_modify32bitoffsetreg>
 8006c1c:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 8006c20:	9300      	str	r3, [sp, #0]
 8006c22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c26:	2200      	movs	r2, #0
 8006c28:	4629      	mov	r1, r5
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	f7ff ffa6 	bl	8006b7c <dwt_modify32bitoffsetreg>
 8006c30:	4b0a      	ldr	r3, [pc, #40]	; (8006c5c <ull_enable_rf_tx+0x5c>)
 8006c32:	9300      	str	r3, [sp, #0]
 8006c34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8006c3e:	4620      	mov	r0, r4
 8006c40:	f7ff ff9c 	bl	8006b7c <dwt_modify32bitoffsetreg>
 8006c44:	b90e      	cbnz	r6, 8006c4a <ull_enable_rf_tx+0x4a>
 8006c46:	b002      	add	sp, #8
 8006c48:	bd70      	pop	{r4, r5, r6, pc}
 8006c4a:	4b05      	ldr	r3, [pc, #20]	; (8006c60 <ull_enable_rf_tx+0x60>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	4905      	ldr	r1, [pc, #20]	; (8006c64 <ull_enable_rf_tx+0x64>)
 8006c50:	4620      	mov	r0, r4
 8006c52:	f7ff fc01 	bl	8006458 <dwt_write32bitoffsetreg>
 8006c56:	e7f6      	b.n	8006c46 <ull_enable_rf_tx+0x46>
 8006c58:	00070048 	.word	0x00070048
 8006c5c:	02003c00 	.word	0x02003c00
 8006c60:	01011100 	.word	0x01011100
 8006c64:	00070014 	.word	0x00070014

08006c68 <ull_enable_rftx_blocks>:
 8006c68:	b500      	push	{lr}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	4b05      	ldr	r3, [pc, #20]	; (8006c84 <ull_enable_rftx_blocks+0x1c>)
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c74:	2200      	movs	r2, #0
 8006c76:	4904      	ldr	r1, [pc, #16]	; (8006c88 <ull_enable_rftx_blocks+0x20>)
 8006c78:	f7ff ff80 	bl	8006b7c <dwt_modify32bitoffsetreg>
 8006c7c:	b003      	add	sp, #12
 8006c7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c82:	bf00      	nop
 8006c84:	02003c00 	.word	0x02003c00
 8006c88:	00070004 	.word	0x00070004

08006c8c <_dwt_otpprogword32>:
 8006c8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c90:	b083      	sub	sp, #12
 8006c92:	4604      	mov	r4, r0
 8006c94:	460d      	mov	r5, r1
 8006c96:	4617      	mov	r7, r2
 8006c98:	4e56      	ldr	r6, [pc, #344]	; (8006df4 <_dwt_otpprogword32+0x168>)
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	4631      	mov	r1, r6
 8006c9e:	f7fe fe99 	bl	80059d4 <dwt_read32bitoffsetreg>
 8006ca2:	4681      	mov	r9, r0
 8006ca4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8006ca8:	9300      	str	r3, [sp, #0]
 8006caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cae:	2200      	movs	r2, #0
 8006cb0:	4631      	mov	r1, r6
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	f7ff ff62 	bl	8006b7c <dwt_modify32bitoffsetreg>
 8006cb8:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8006df8 <_dwt_otpprogword32+0x16c>
 8006cbc:	2318      	movs	r3, #24
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	4641      	mov	r1, r8
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f7ff fac7 	bl	8006256 <dwt_write16bitoffsetreg>
 8006cc8:	2125      	movs	r1, #37	; 0x25
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f7ff fb0a 	bl	80062e4 <__dwt_otp_write_wdata_id_reg>
 8006cd0:	2102      	movs	r1, #2
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	f7ff fb06 	bl	80062e4 <__dwt_otp_write_wdata_id_reg>
 8006cd8:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 8006cdc:	4620      	mov	r0, r4
 8006cde:	f7ff fb01 	bl	80062e4 <__dwt_otp_write_wdata_id_reg>
 8006ce2:	b2f9      	uxtb	r1, r7
 8006ce4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006ce8:	4620      	mov	r0, r4
 8006cea:	f7ff fafb 	bl	80062e4 <__dwt_otp_write_wdata_id_reg>
 8006cee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	f7ff faf6 	bl	80062e4 <__dwt_otp_write_wdata_id_reg>
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	f7ff faf2 	bl	80062e4 <__dwt_otp_write_wdata_id_reg>
 8006d00:	2102      	movs	r1, #2
 8006d02:	4620      	mov	r0, r4
 8006d04:	f7ff faee 	bl	80062e4 <__dwt_otp_write_wdata_id_reg>
 8006d08:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	f7ff fae9 	bl	80062e4 <__dwt_otp_write_wdata_id_reg>
 8006d12:	b2e9      	uxtb	r1, r5
 8006d14:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006d18:	4620      	mov	r0, r4
 8006d1a:	f7ff fae3 	bl	80062e4 <__dwt_otp_write_wdata_id_reg>
 8006d1e:	f3c5 2107 	ubfx	r1, r5, #8, #8
 8006d22:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006d26:	4620      	mov	r0, r4
 8006d28:	f7ff fadc 	bl	80062e4 <__dwt_otp_write_wdata_id_reg>
 8006d2c:	f3c5 4107 	ubfx	r1, r5, #16, #8
 8006d30:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006d34:	4620      	mov	r0, r4
 8006d36:	f7ff fad5 	bl	80062e4 <__dwt_otp_write_wdata_id_reg>
 8006d3a:	0e29      	lsrs	r1, r5, #24
 8006d3c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006d40:	4620      	mov	r0, r4
 8006d42:	f7ff facf 	bl	80062e4 <__dwt_otp_write_wdata_id_reg>
 8006d46:	2100      	movs	r1, #0
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f7ff facb 	bl	80062e4 <__dwt_otp_write_wdata_id_reg>
 8006d4e:	213a      	movs	r1, #58	; 0x3a
 8006d50:	4620      	mov	r0, r4
 8006d52:	f7ff fac7 	bl	80062e4 <__dwt_otp_write_wdata_id_reg>
 8006d56:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	f7ff fac2 	bl	80062e4 <__dwt_otp_write_wdata_id_reg>
 8006d60:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8006d64:	4620      	mov	r0, r4
 8006d66:	f7ff fabd 	bl	80062e4 <__dwt_otp_write_wdata_id_reg>
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	f7ff fab9 	bl	80062e4 <__dwt_otp_write_wdata_id_reg>
 8006d72:	213a      	movs	r1, #58	; 0x3a
 8006d74:	4620      	mov	r0, r4
 8006d76:	f7ff fab5 	bl	80062e4 <__dwt_otp_write_wdata_id_reg>
 8006d7a:	f240 1101 	movw	r1, #257	; 0x101
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f7ff fab0 	bl	80062e4 <__dwt_otp_write_wdata_id_reg>
 8006d84:	2302      	movs	r3, #2
 8006d86:	2200      	movs	r2, #0
 8006d88:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	f7ff fa62 	bl	8006256 <dwt_write16bitoffsetreg>
 8006d92:	2300      	movs	r3, #0
 8006d94:	461a      	mov	r2, r3
 8006d96:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f7ff fa5b 	bl	8006256 <dwt_write16bitoffsetreg>
 8006da0:	2002      	movs	r0, #2
 8006da2:	f7fa fbdf 	bl	8001564 <deca_sleep>
 8006da6:	213a      	movs	r1, #58	; 0x3a
 8006da8:	4620      	mov	r0, r4
 8006daa:	f7ff fa9b 	bl	80062e4 <__dwt_otp_write_wdata_id_reg>
 8006dae:	f44f 7181 	mov.w	r1, #258	; 0x102
 8006db2:	4620      	mov	r0, r4
 8006db4:	f7ff fa96 	bl	80062e4 <__dwt_otp_write_wdata_id_reg>
 8006db8:	2302      	movs	r3, #2
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	f7ff fa48 	bl	8006256 <dwt_write16bitoffsetreg>
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	461a      	mov	r2, r3
 8006dca:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8006dce:	4620      	mov	r0, r4
 8006dd0:	f7ff fa41 	bl	8006256 <dwt_write16bitoffsetreg>
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	4641      	mov	r1, r8
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f7ff fa3b 	bl	8006256 <dwt_write16bitoffsetreg>
 8006de0:	464b      	mov	r3, r9
 8006de2:	2200      	movs	r2, #0
 8006de4:	4631      	mov	r1, r6
 8006de6:	4620      	mov	r0, r4
 8006de8:	f7ff fb36 	bl	8006458 <dwt_write32bitoffsetreg>
 8006dec:	b003      	add	sp, #12
 8006dee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006df2:	bf00      	nop
 8006df4:	00070044 	.word	0x00070044
 8006df8:	000b0008 	.word	0x000b0008

08006dfc <ull_setgpiomode>:
 8006dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	2400      	movs	r4, #0
 8006e02:	4623      	mov	r3, r4
 8006e04:	2601      	movs	r6, #1
 8006e06:	2707      	movs	r7, #7
 8006e08:	e002      	b.n	8006e10 <ull_setgpiomode+0x14>
 8006e0a:	3401      	adds	r4, #1
 8006e0c:	2c09      	cmp	r4, #9
 8006e0e:	d009      	beq.n	8006e24 <ull_setgpiomode+0x28>
 8006e10:	fa06 f504 	lsl.w	r5, r6, r4
 8006e14:	420d      	tst	r5, r1
 8006e16:	d0f8      	beq.n	8006e0a <ull_setgpiomode+0xe>
 8006e18:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8006e1c:	fa07 f505 	lsl.w	r5, r7, r5
 8006e20:	432b      	orrs	r3, r5
 8006e22:	e7f2      	b.n	8006e0a <ull_setgpiomode+0xe>
 8006e24:	401a      	ands	r2, r3
 8006e26:	9200      	str	r2, [sp, #0]
 8006e28:	43db      	mvns	r3, r3
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8006e30:	f7ff fea4 	bl	8006b7c <dwt_modify32bitoffsetreg>
 8006e34:	b003      	add	sp, #12
 8006e36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006e38 <ull_setinterrupt>:
 8006e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e3c:	b082      	sub	sp, #8
 8006e3e:	4604      	mov	r4, r0
 8006e40:	4688      	mov	r8, r1
 8006e42:	4617      	mov	r7, r2
 8006e44:	461d      	mov	r5, r3
 8006e46:	f7fa fb6f 	bl	8001528 <decamutexon>
 8006e4a:	4606      	mov	r6, r0
 8006e4c:	2d02      	cmp	r5, #2
 8006e4e:	d02d      	beq.n	8006eac <ull_setinterrupt+0x74>
 8006e50:	2d01      	cmp	r5, #1
 8006e52:	d038      	beq.n	8006ec6 <ull_setinterrupt+0x8e>
 8006e54:	2500      	movs	r5, #0
 8006e56:	9500      	str	r5, [sp, #0]
 8006e58:	ea6f 0308 	mvn.w	r3, r8
 8006e5c:	462a      	mov	r2, r5
 8006e5e:	213c      	movs	r1, #60	; 0x3c
 8006e60:	4620      	mov	r0, r4
 8006e62:	f7ff fe8b 	bl	8006b7c <dwt_modify32bitoffsetreg>
 8006e66:	9500      	str	r5, [sp, #0]
 8006e68:	43fb      	mvns	r3, r7
 8006e6a:	462a      	mov	r2, r5
 8006e6c:	2140      	movs	r1, #64	; 0x40
 8006e6e:	4620      	mov	r0, r4
 8006e70:	f7ff fe84 	bl	8006b7c <dwt_modify32bitoffsetreg>
 8006e74:	2200      	movs	r2, #0
 8006e76:	213c      	movs	r1, #60	; 0x3c
 8006e78:	4620      	mov	r0, r4
 8006e7a:	f7fe fdab 	bl	80059d4 <dwt_read32bitoffsetreg>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2200      	movs	r2, #0
 8006e82:	2144      	movs	r1, #68	; 0x44
 8006e84:	4620      	mov	r0, r4
 8006e86:	f7ff fae7 	bl	8006458 <dwt_write32bitoffsetreg>
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	2140      	movs	r1, #64	; 0x40
 8006e8e:	4620      	mov	r0, r4
 8006e90:	f7fe fda0 	bl	80059d4 <dwt_read32bitoffsetreg>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2200      	movs	r2, #0
 8006e98:	2148      	movs	r1, #72	; 0x48
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	f7ff fadc 	bl	8006458 <dwt_write32bitoffsetreg>
 8006ea0:	4630      	mov	r0, r6
 8006ea2:	f7fa fb52 	bl	800154a <decamutexoff>
 8006ea6:	b002      	add	sp, #8
 8006ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006eac:	4643      	mov	r3, r8
 8006eae:	2200      	movs	r2, #0
 8006eb0:	213c      	movs	r1, #60	; 0x3c
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	f7ff fad0 	bl	8006458 <dwt_write32bitoffsetreg>
 8006eb8:	463b      	mov	r3, r7
 8006eba:	2200      	movs	r2, #0
 8006ebc:	2140      	movs	r1, #64	; 0x40
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	f7ff faca 	bl	8006458 <dwt_write32bitoffsetreg>
 8006ec4:	e7d6      	b.n	8006e74 <ull_setinterrupt+0x3c>
 8006ec6:	f8cd 8000 	str.w	r8, [sp]
 8006eca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ece:	2200      	movs	r2, #0
 8006ed0:	213c      	movs	r1, #60	; 0x3c
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	f7ff fe52 	bl	8006b7c <dwt_modify32bitoffsetreg>
 8006ed8:	9700      	str	r7, [sp, #0]
 8006eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ede:	2200      	movs	r2, #0
 8006ee0:	2140      	movs	r1, #64	; 0x40
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	f7ff fe4a 	bl	8006b7c <dwt_modify32bitoffsetreg>
 8006ee8:	e7c4      	b.n	8006e74 <ull_setinterrupt+0x3c>
	...

08006eec <ull_writetxfctrl>:
 8006eec:	b510      	push	{r4, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	4604      	mov	r4, r0
 8006ef2:	2a7f      	cmp	r2, #127	; 0x7f
 8006ef4:	d912      	bls.n	8006f1c <ull_writetxfctrl+0x30>
 8006ef6:	3280      	adds	r2, #128	; 0x80
 8006ef8:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 8006efc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006f00:	9100      	str	r1, [sp, #0]
 8006f02:	4b0c      	ldr	r3, [pc, #48]	; (8006f34 <ull_writetxfctrl+0x48>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	2124      	movs	r1, #36	; 0x24
 8006f08:	f7ff fe38 	bl	8006b7c <dwt_modify32bitoffsetreg>
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8006f12:	4620      	mov	r0, r4
 8006f14:	f7fe fd86 	bl	8005a24 <dwt_read8bitoffsetreg>
 8006f18:	b002      	add	sp, #8
 8006f1a:	bd10      	pop	{r4, pc}
 8006f1c:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 8006f20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006f24:	9100      	str	r1, [sp, #0]
 8006f26:	4b03      	ldr	r3, [pc, #12]	; (8006f34 <ull_writetxfctrl+0x48>)
 8006f28:	2200      	movs	r2, #0
 8006f2a:	2124      	movs	r1, #36	; 0x24
 8006f2c:	f7ff fe26 	bl	8006b7c <dwt_modify32bitoffsetreg>
 8006f30:	e7f2      	b.n	8006f18 <ull_writetxfctrl+0x2c>
 8006f32:	bf00      	nop
 8006f34:	fc00f400 	.word	0xfc00f400

08006f38 <prs_sys_status_and_or>:
 8006f38:	b500      	push	{lr}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	9200      	str	r2, [sp, #0]
 8006f3e:	460b      	mov	r3, r1
 8006f40:	2200      	movs	r2, #0
 8006f42:	2144      	movs	r1, #68	; 0x44
 8006f44:	f7ff fe1a 	bl	8006b7c <dwt_modify32bitoffsetreg>
 8006f48:	2000      	movs	r0, #0
 8006f4a:	b003      	add	sp, #12
 8006f4c:	f85d fb04 	ldr.w	pc, [sp], #4

08006f50 <dwt_modify8bitoffsetreg>:
 8006f50:	b500      	push	{lr}
 8006f52:	b085      	sub	sp, #20
 8006f54:	f88d 300c 	strb.w	r3, [sp, #12]
 8006f58:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8006f5c:	f88d 300d 	strb.w	r3, [sp, #13]
 8006f60:	f248 0301 	movw	r3, #32769	; 0x8001
 8006f64:	9301      	str	r3, [sp, #4]
 8006f66:	ab03      	add	r3, sp, #12
 8006f68:	9300      	str	r3, [sp, #0]
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	b292      	uxth	r2, r2
 8006f6e:	f7fe fca4 	bl	80058ba <dwt_xfer3xxx>
 8006f72:	b005      	add	sp, #20
 8006f74:	f85d fb04 	ldr.w	pc, [sp], #4

08006f78 <ull_configciadiag>:
 8006f78:	b530      	push	{r4, r5, lr}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	4604      	mov	r4, r0
 8006f7e:	460d      	mov	r5, r1
 8006f80:	f011 0f01 	tst.w	r1, #1
 8006f84:	d015      	beq.n	8006fb2 <ull_configciadiag+0x3a>
 8006f86:	2300      	movs	r3, #0
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	23ef      	movs	r3, #239	; 0xef
 8006f8c:	2202      	movs	r2, #2
 8006f8e:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8006f92:	f7ff ffdd 	bl	8006f50 <dwt_modify8bitoffsetreg>
 8006f96:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006f98:	761d      	strb	r5, [r3, #24]
 8006f9a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006f9c:	7e1b      	ldrb	r3, [r3, #24]
 8006f9e:	085b      	lsrs	r3, r3, #1
 8006fa0:	d010      	beq.n	8006fc4 <ull_configciadiag+0x4c>
 8006fa2:	086b      	lsrs	r3, r5, #1
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	490e      	ldr	r1, [pc, #56]	; (8006fe0 <ull_configciadiag+0x68>)
 8006fa8:	4620      	mov	r0, r4
 8006faa:	f7ff f902 	bl	80061b2 <dwt_write8bitoffsetreg>
 8006fae:	b003      	add	sp, #12
 8006fb0:	bd30      	pop	{r4, r5, pc}
 8006fb2:	2310      	movs	r3, #16
 8006fb4:	9300      	str	r3, [sp, #0]
 8006fb6:	23ff      	movs	r3, #255	; 0xff
 8006fb8:	2202      	movs	r2, #2
 8006fba:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8006fbe:	f7ff ffc7 	bl	8006f50 <dwt_modify8bitoffsetreg>
 8006fc2:	e7e8      	b.n	8006f96 <ull_configciadiag+0x1e>
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	9300      	str	r3, [sp, #0]
 8006fc8:	23ff      	movs	r3, #255	; 0xff
 8006fca:	2200      	movs	r2, #0
 8006fcc:	4904      	ldr	r1, [pc, #16]	; (8006fe0 <ull_configciadiag+0x68>)
 8006fce:	4620      	mov	r0, r4
 8006fd0:	f7ff ffbe 	bl	8006f50 <dwt_modify8bitoffsetreg>
 8006fd4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006fd6:	7e13      	ldrb	r3, [r2, #24]
 8006fd8:	f043 0302 	orr.w	r3, r3, #2
 8006fdc:	7613      	strb	r3, [r2, #24]
 8006fde:	e7e6      	b.n	8006fae <ull_configciadiag+0x36>
 8006fe0:	00010028 	.word	0x00010028

08006fe4 <ull_calcbandwidthadj>:
 8006fe4:	b570      	push	{r4, r5, r6, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	4604      	mov	r4, r0
 8006fea:	460d      	mov	r5, r1
 8006fec:	2101      	movs	r1, #1
 8006fee:	f7ff f963 	bl	80062b8 <ull_force_clocks>
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	f7ff fe03 	bl	8006c00 <ull_enable_rf_tx>
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	f7ff fe34 	bl	8006c68 <ull_enable_rftx_blocks>
 8007000:	f3c5 030b 	ubfx	r3, r5, #0, #12
 8007004:	2200      	movs	r2, #0
 8007006:	4915      	ldr	r1, [pc, #84]	; (800705c <ull_calcbandwidthadj+0x78>)
 8007008:	4620      	mov	r0, r4
 800700a:	f7ff f924 	bl	8006256 <dwt_write16bitoffsetreg>
 800700e:	2303      	movs	r3, #3
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	23ff      	movs	r3, #255	; 0xff
 8007014:	2200      	movs	r2, #0
 8007016:	4912      	ldr	r1, [pc, #72]	; (8007060 <ull_calcbandwidthadj+0x7c>)
 8007018:	4620      	mov	r0, r4
 800701a:	f7ff ff99 	bl	8006f50 <dwt_modify8bitoffsetreg>
 800701e:	4e10      	ldr	r6, [pc, #64]	; (8007060 <ull_calcbandwidthadj+0x7c>)
 8007020:	2500      	movs	r5, #0
 8007022:	462a      	mov	r2, r5
 8007024:	4631      	mov	r1, r6
 8007026:	4620      	mov	r0, r4
 8007028:	f7fe fcfc 	bl	8005a24 <dwt_read8bitoffsetreg>
 800702c:	f010 0f01 	tst.w	r0, #1
 8007030:	d1f7      	bne.n	8007022 <ull_calcbandwidthadj+0x3e>
 8007032:	4620      	mov	r0, r4
 8007034:	f7ff fcae 	bl	8006994 <ull_disable_rftx_blocks>
 8007038:	2100      	movs	r1, #0
 800703a:	4620      	mov	r0, r4
 800703c:	f7ff fcb4 	bl	80069a8 <ull_disable_rf_tx>
 8007040:	2105      	movs	r1, #5
 8007042:	4620      	mov	r0, r4
 8007044:	f7ff f938 	bl	80062b8 <ull_force_clocks>
 8007048:	2200      	movs	r2, #0
 800704a:	4906      	ldr	r1, [pc, #24]	; (8007064 <ull_calcbandwidthadj+0x80>)
 800704c:	4620      	mov	r0, r4
 800704e:	f7fe fce9 	bl	8005a24 <dwt_read8bitoffsetreg>
 8007052:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8007056:	b002      	add	sp, #8
 8007058:	bd70      	pop	{r4, r5, r6, pc}
 800705a:	bf00      	nop
 800705c:	0008001c 	.word	0x0008001c
 8007060:	00080010 	.word	0x00080010
 8007064:	0007001c 	.word	0x0007001c

08007068 <ull_configuretxrf>:
 8007068:	b538      	push	{r3, r4, r5, lr}
 800706a:	4605      	mov	r5, r0
 800706c:	460c      	mov	r4, r1
 800706e:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 8007072:	b149      	cbz	r1, 8007088 <ull_configuretxrf+0x20>
 8007074:	f7ff ffb6 	bl	8006fe4 <ull_calcbandwidthadj>
 8007078:	f8d4 3001 	ldr.w	r3, [r4, #1]
 800707c:	2200      	movs	r2, #0
 800707e:	4905      	ldr	r1, [pc, #20]	; (8007094 <ull_configuretxrf+0x2c>)
 8007080:	4628      	mov	r0, r5
 8007082:	f7ff f9e9 	bl	8006458 <dwt_write32bitoffsetreg>
 8007086:	bd38      	pop	{r3, r4, r5, pc}
 8007088:	7823      	ldrb	r3, [r4, #0]
 800708a:	2200      	movs	r2, #0
 800708c:	4902      	ldr	r1, [pc, #8]	; (8007098 <ull_configuretxrf+0x30>)
 800708e:	f7ff f890 	bl	80061b2 <dwt_write8bitoffsetreg>
 8007092:	e7f1      	b.n	8007078 <ull_configuretxrf+0x10>
 8007094:	0001000c 	.word	0x0001000c
 8007098:	0007001c 	.word	0x0007001c

0800709c <ull_repeated_frames>:
 800709c:	b530      	push	{r4, r5, lr}
 800709e:	b083      	sub	sp, #12
 80070a0:	4604      	mov	r4, r0
 80070a2:	460d      	mov	r5, r1
 80070a4:	2310      	movs	r3, #16
 80070a6:	9300      	str	r3, [sp, #0]
 80070a8:	23ff      	movs	r3, #255	; 0xff
 80070aa:	2200      	movs	r2, #0
 80070ac:	4906      	ldr	r1, [pc, #24]	; (80070c8 <ull_repeated_frames+0x2c>)
 80070ae:	f7ff ff4f 	bl	8006f50 <dwt_modify8bitoffsetreg>
 80070b2:	462b      	mov	r3, r5
 80070b4:	2d02      	cmp	r5, #2
 80070b6:	bf38      	it	cc
 80070b8:	2302      	movcc	r3, #2
 80070ba:	2200      	movs	r2, #0
 80070bc:	212c      	movs	r1, #44	; 0x2c
 80070be:	4620      	mov	r0, r4
 80070c0:	f7ff f9ca 	bl	8006458 <dwt_write32bitoffsetreg>
 80070c4:	b003      	add	sp, #12
 80070c6:	bd30      	pop	{r4, r5, pc}
 80070c8:	000f0024 	.word	0x000f0024

080070cc <ull_setdwstate>:
 80070cc:	b530      	push	{r4, r5, lr}
 80070ce:	b083      	sub	sp, #12
 80070d0:	4604      	mov	r4, r0
 80070d2:	2901      	cmp	r1, #1
 80070d4:	d01d      	beq.n	8007112 <ull_setdwstate+0x46>
 80070d6:	2902      	cmp	r1, #2
 80070d8:	d030      	beq.n	800713c <ull_setdwstate+0x70>
 80070da:	2301      	movs	r3, #1
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	23ff      	movs	r3, #255	; 0xff
 80070e0:	2200      	movs	r2, #0
 80070e2:	4926      	ldr	r1, [pc, #152]	; (800717c <ull_setdwstate+0xb0>)
 80070e4:	f7ff ff34 	bl	8006f50 <dwt_modify8bitoffsetreg>
 80070e8:	4d25      	ldr	r5, [pc, #148]	; (8007180 <ull_setdwstate+0xb4>)
 80070ea:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80070ee:	9300      	str	r3, [sp, #0]
 80070f0:	f46f 7380 	mvn.w	r3, #256	; 0x100
 80070f4:	2200      	movs	r2, #0
 80070f6:	4629      	mov	r1, r5
 80070f8:	4620      	mov	r0, r4
 80070fa:	f7ff fd3f 	bl	8006b7c <dwt_modify32bitoffsetreg>
 80070fe:	2300      	movs	r3, #0
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	237f      	movs	r3, #127	; 0x7f
 8007104:	2202      	movs	r2, #2
 8007106:	4629      	mov	r1, r5
 8007108:	4620      	mov	r0, r4
 800710a:	f7ff ff21 	bl	8006f50 <dwt_modify8bitoffsetreg>
 800710e:	b003      	add	sp, #12
 8007110:	bd30      	pop	{r4, r5, pc}
 8007112:	2105      	movs	r1, #5
 8007114:	f7ff f8d0 	bl	80062b8 <ull_force_clocks>
 8007118:	f44f 7381 	mov.w	r3, #258	; 0x102
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007122:	2200      	movs	r2, #0
 8007124:	4917      	ldr	r1, [pc, #92]	; (8007184 <ull_setdwstate+0xb8>)
 8007126:	4620      	mov	r0, r4
 8007128:	f7ff fd28 	bl	8006b7c <dwt_modify32bitoffsetreg>
 800712c:	2201      	movs	r2, #1
 800712e:	9200      	str	r2, [sp, #0]
 8007130:	23ff      	movs	r3, #255	; 0xff
 8007132:	4913      	ldr	r1, [pc, #76]	; (8007180 <ull_setdwstate+0xb4>)
 8007134:	4620      	mov	r0, r4
 8007136:	f7ff ff0b 	bl	8006f50 <dwt_modify8bitoffsetreg>
 800713a:	e7e8      	b.n	800710e <ull_setdwstate+0x42>
 800713c:	2303      	movs	r3, #3
 800713e:	9300      	str	r3, [sp, #0]
 8007140:	23ff      	movs	r3, #255	; 0xff
 8007142:	2200      	movs	r2, #0
 8007144:	490d      	ldr	r1, [pc, #52]	; (800717c <ull_setdwstate+0xb0>)
 8007146:	f7ff ff03 	bl	8006f50 <dwt_modify8bitoffsetreg>
 800714a:	4d0d      	ldr	r5, [pc, #52]	; (8007180 <ull_setdwstate+0xb4>)
 800714c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007150:	9300      	str	r3, [sp, #0]
 8007152:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8007156:	2200      	movs	r2, #0
 8007158:	4629      	mov	r1, r5
 800715a:	4620      	mov	r0, r4
 800715c:	f7ff fd0e 	bl	8006b7c <dwt_modify32bitoffsetreg>
 8007160:	2300      	movs	r3, #0
 8007162:	9300      	str	r3, [sp, #0]
 8007164:	237f      	movs	r3, #127	; 0x7f
 8007166:	2202      	movs	r2, #2
 8007168:	4629      	mov	r1, r5
 800716a:	4620      	mov	r0, r4
 800716c:	f7ff fef0 	bl	8006f50 <dwt_modify8bitoffsetreg>
 8007170:	2105      	movs	r1, #5
 8007172:	4620      	mov	r0, r4
 8007174:	f7ff f8a0 	bl	80062b8 <ull_force_clocks>
 8007178:	e7c9      	b.n	800710e <ull_setdwstate+0x42>
 800717a:	bf00      	nop
 800717c:	00110004 	.word	0x00110004
 8007180:	00110008 	.word	0x00110008
 8007184:	00090008 	.word	0x00090008

08007188 <ull_configureframefilter>:
 8007188:	b530      	push	{r4, r5, lr}
 800718a:	b083      	sub	sp, #12
 800718c:	4605      	mov	r5, r0
 800718e:	2902      	cmp	r1, #2
 8007190:	d00e      	beq.n	80071b0 <ull_configureframefilter+0x28>
 8007192:	2400      	movs	r4, #0
 8007194:	9400      	str	r4, [sp, #0]
 8007196:	23fe      	movs	r3, #254	; 0xfe
 8007198:	4622      	mov	r2, r4
 800719a:	2110      	movs	r1, #16
 800719c:	f7ff fed8 	bl	8006f50 <dwt_modify8bitoffsetreg>
 80071a0:	4623      	mov	r3, r4
 80071a2:	4622      	mov	r2, r4
 80071a4:	2114      	movs	r1, #20
 80071a6:	4628      	mov	r0, r5
 80071a8:	f7ff f855 	bl	8006256 <dwt_write16bitoffsetreg>
 80071ac:	b003      	add	sp, #12
 80071ae:	bd30      	pop	{r4, r5, pc}
 80071b0:	4614      	mov	r4, r2
 80071b2:	2301      	movs	r3, #1
 80071b4:	9300      	str	r3, [sp, #0]
 80071b6:	23ff      	movs	r3, #255	; 0xff
 80071b8:	2200      	movs	r2, #0
 80071ba:	2110      	movs	r1, #16
 80071bc:	f7ff fec8 	bl	8006f50 <dwt_modify8bitoffsetreg>
 80071c0:	4623      	mov	r3, r4
 80071c2:	2200      	movs	r2, #0
 80071c4:	2114      	movs	r1, #20
 80071c6:	4628      	mov	r0, r5
 80071c8:	f7ff f845 	bl	8006256 <dwt_write16bitoffsetreg>
 80071cc:	e7ee      	b.n	80071ac <ull_configureframefilter+0x24>
	...

080071d0 <ull_run_pgfcal>:
 80071d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071d4:	b082      	sub	sp, #8
 80071d6:	4605      	mov	r5, r0
 80071d8:	4c29      	ldr	r4, [pc, #164]	; (8007280 <ull_run_pgfcal+0xb0>)
 80071da:	4b2a      	ldr	r3, [pc, #168]	; (8007284 <ull_run_pgfcal+0xb4>)
 80071dc:	2200      	movs	r2, #0
 80071de:	4621      	mov	r1, r4
 80071e0:	f7ff f93a 	bl	8006458 <dwt_write32bitoffsetreg>
 80071e4:	2310      	movs	r3, #16
 80071e6:	9300      	str	r3, [sp, #0]
 80071e8:	23ff      	movs	r3, #255	; 0xff
 80071ea:	2200      	movs	r2, #0
 80071ec:	4621      	mov	r1, r4
 80071ee:	4628      	mov	r0, r5
 80071f0:	f7ff feae 	bl	8006f50 <dwt_modify8bitoffsetreg>
 80071f4:	2403      	movs	r4, #3
 80071f6:	f04f 0814 	mov.w	r8, #20
 80071fa:	4f23      	ldr	r7, [pc, #140]	; (8007288 <ull_run_pgfcal+0xb8>)
 80071fc:	2600      	movs	r6, #0
 80071fe:	4640      	mov	r0, r8
 8007200:	f7fa f9bb 	bl	800157a <deca_usleep>
 8007204:	4632      	mov	r2, r6
 8007206:	4639      	mov	r1, r7
 8007208:	4628      	mov	r0, r5
 800720a:	f7fe fc0b 	bl	8005a24 <dwt_read8bitoffsetreg>
 800720e:	2801      	cmp	r0, #1
 8007210:	d034      	beq.n	800727c <ull_run_pgfcal+0xac>
 8007212:	1e63      	subs	r3, r4, #1
 8007214:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8007218:	d1f1      	bne.n	80071fe <ull_run_pgfcal+0x2e>
 800721a:	f06f 0402 	mvn.w	r4, #2
 800721e:	4e18      	ldr	r6, [pc, #96]	; (8007280 <ull_run_pgfcal+0xb0>)
 8007220:	2300      	movs	r3, #0
 8007222:	461a      	mov	r2, r3
 8007224:	4631      	mov	r1, r6
 8007226:	4628      	mov	r0, r5
 8007228:	f7fe ffc3 	bl	80061b2 <dwt_write8bitoffsetreg>
 800722c:	2301      	movs	r3, #1
 800722e:	2200      	movs	r2, #0
 8007230:	4915      	ldr	r1, [pc, #84]	; (8007288 <ull_run_pgfcal+0xb8>)
 8007232:	4628      	mov	r0, r5
 8007234:	f7fe ffbd 	bl	80061b2 <dwt_write8bitoffsetreg>
 8007238:	2301      	movs	r3, #1
 800723a:	9300      	str	r3, [sp, #0]
 800723c:	23ff      	movs	r3, #255	; 0xff
 800723e:	2202      	movs	r2, #2
 8007240:	4631      	mov	r1, r6
 8007242:	4628      	mov	r0, r5
 8007244:	f7ff fe84 	bl	8006f50 <dwt_modify8bitoffsetreg>
 8007248:	2200      	movs	r2, #0
 800724a:	4910      	ldr	r1, [pc, #64]	; (800728c <ull_run_pgfcal+0xbc>)
 800724c:	4628      	mov	r0, r5
 800724e:	f7fe fbc1 	bl	80059d4 <dwt_read32bitoffsetreg>
 8007252:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8007256:	4298      	cmp	r0, r3
 8007258:	bf08      	it	eq
 800725a:	f06f 0403 	mvneq.w	r4, #3
 800725e:	2200      	movs	r2, #0
 8007260:	490b      	ldr	r1, [pc, #44]	; (8007290 <ull_run_pgfcal+0xc0>)
 8007262:	4628      	mov	r0, r5
 8007264:	f7fe fbb6 	bl	80059d4 <dwt_read32bitoffsetreg>
 8007268:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800726c:	4298      	cmp	r0, r3
 800726e:	bf14      	ite	ne
 8007270:	4620      	movne	r0, r4
 8007272:	f06f 0004 	mvneq.w	r0, #4
 8007276:	b002      	add	sp, #8
 8007278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800727c:	2400      	movs	r4, #0
 800727e:	e7ce      	b.n	800721e <ull_run_pgfcal+0x4e>
 8007280:	0004000c 	.word	0x0004000c
 8007284:	00020001 	.word	0x00020001
 8007288:	00040020 	.word	0x00040020
 800728c:	00040014 	.word	0x00040014
 8007290:	0004001c 	.word	0x0004001c

08007294 <prs_ack_enable>:
 8007294:	b500      	push	{lr}
 8007296:	b083      	sub	sp, #12
 8007298:	2900      	cmp	r1, #0
 800729a:	bf0b      	itete	eq
 800729c:	23ff      	moveq	r3, #255	; 0xff
 800729e:	23f7      	movne	r3, #247	; 0xf7
 80072a0:	2200      	moveq	r2, #0
 80072a2:	2208      	movne	r2, #8
 80072a4:	9200      	str	r2, [sp, #0]
 80072a6:	2201      	movs	r2, #1
 80072a8:	2110      	movs	r1, #16
 80072aa:	f7ff fe51 	bl	8006f50 <dwt_modify8bitoffsetreg>
 80072ae:	b003      	add	sp, #12
 80072b0:	f85d fb04 	ldr.w	pc, [sp], #4

080072b4 <dwt_modify16bitoffsetreg>:
 80072b4:	b510      	push	{r4, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 80072bc:	f88d 300c 	strb.w	r3, [sp, #12]
 80072c0:	0a1b      	lsrs	r3, r3, #8
 80072c2:	f88d 300d 	strb.w	r3, [sp, #13]
 80072c6:	f88d 400e 	strb.w	r4, [sp, #14]
 80072ca:	0a24      	lsrs	r4, r4, #8
 80072cc:	f88d 400f 	strb.w	r4, [sp, #15]
 80072d0:	f248 0302 	movw	r3, #32770	; 0x8002
 80072d4:	9301      	str	r3, [sp, #4]
 80072d6:	ab03      	add	r3, sp, #12
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	2304      	movs	r3, #4
 80072dc:	b292      	uxth	r2, r2
 80072de:	f7fe faec 	bl	80058ba <dwt_xfer3xxx>
 80072e2:	b004      	add	sp, #16
 80072e4:	bd10      	pop	{r4, pc}
	...

080072e8 <_dwt_prog_ldo_and_bias_tune>:
 80072e8:	b510      	push	{r4, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	4604      	mov	r4, r0
 80072ee:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80072f2:	9300      	str	r3, [sp, #0]
 80072f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80072f8:	2200      	movs	r2, #0
 80072fa:	4907      	ldr	r1, [pc, #28]	; (8007318 <_dwt_prog_ldo_and_bias_tune+0x30>)
 80072fc:	f7ff ffda 	bl	80072b4 <dwt_modify16bitoffsetreg>
 8007300:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007302:	7a1b      	ldrb	r3, [r3, #8]
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800730a:	2200      	movs	r2, #0
 800730c:	4903      	ldr	r1, [pc, #12]	; (800731c <_dwt_prog_ldo_and_bias_tune+0x34>)
 800730e:	4620      	mov	r0, r4
 8007310:	f7ff ffd0 	bl	80072b4 <dwt_modify16bitoffsetreg>
 8007314:	b002      	add	sp, #8
 8007316:	bd10      	pop	{r4, pc}
 8007318:	000b0008 	.word	0x000b0008
 800731c:	0011001f 	.word	0x0011001f

08007320 <ull_setleds>:
 8007320:	b530      	push	{r4, r5, lr}
 8007322:	b083      	sub	sp, #12
 8007324:	4604      	mov	r4, r0
 8007326:	f011 0f01 	tst.w	r1, #1
 800732a:	d01f      	beq.n	800736c <ull_setleds+0x4c>
 800732c:	460d      	mov	r5, r1
 800732e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8007332:	9300      	str	r3, [sp, #0]
 8007334:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 8007338:	2200      	movs	r2, #0
 800733a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800733e:	f7ff fc1d 	bl	8006b7c <dwt_modify32bitoffsetreg>
 8007342:	f44f 0304 	mov.w	r3, #8650752	; 0x840000
 8007346:	9300      	str	r3, [sp, #0]
 8007348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800734c:	2200      	movs	r2, #0
 800734e:	4918      	ldr	r1, [pc, #96]	; (80073b0 <ull_setleds+0x90>)
 8007350:	4620      	mov	r0, r4
 8007352:	f7ff fc13 	bl	8006b7c <dwt_modify32bitoffsetreg>
 8007356:	f015 0f02 	tst.w	r5, #2
 800735a:	d11a      	bne.n	8007392 <ull_setleds+0x72>
 800735c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007360:	2200      	movs	r2, #0
 8007362:	4914      	ldr	r1, [pc, #80]	; (80073b4 <ull_setleds+0x94>)
 8007364:	4620      	mov	r0, r4
 8007366:	f7ff f877 	bl	8006458 <dwt_write32bitoffsetreg>
 800736a:	e010      	b.n	800738e <ull_setleds+0x6e>
 800736c:	2500      	movs	r5, #0
 800736e:	9500      	str	r5, [sp, #0]
 8007370:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 8007374:	462a      	mov	r2, r5
 8007376:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800737a:	f7ff fbff 	bl	8006b7c <dwt_modify32bitoffsetreg>
 800737e:	9500      	str	r5, [sp, #0]
 8007380:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8007384:	462a      	mov	r2, r5
 8007386:	490b      	ldr	r1, [pc, #44]	; (80073b4 <ull_setleds+0x94>)
 8007388:	4620      	mov	r0, r4
 800738a:	f7ff ff93 	bl	80072b4 <dwt_modify16bitoffsetreg>
 800738e:	b003      	add	sp, #12
 8007390:	bd30      	pop	{r4, r5, pc}
 8007392:	4d08      	ldr	r5, [pc, #32]	; (80073b4 <ull_setleds+0x94>)
 8007394:	4b08      	ldr	r3, [pc, #32]	; (80073b8 <ull_setleds+0x98>)
 8007396:	2200      	movs	r2, #0
 8007398:	4629      	mov	r1, r5
 800739a:	4620      	mov	r0, r4
 800739c:	f7ff f85c 	bl	8006458 <dwt_write32bitoffsetreg>
 80073a0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80073a4:	2200      	movs	r2, #0
 80073a6:	4629      	mov	r1, r5
 80073a8:	4620      	mov	r0, r4
 80073aa:	f7ff f855 	bl	8006458 <dwt_write32bitoffsetreg>
 80073ae:	e7ee      	b.n	800738e <ull_setleds+0x6e>
 80073b0:	00110004 	.word	0x00110004
 80073b4:	00110016 	.word	0x00110016
 80073b8:	000f0110 	.word	0x000f0110

080073bc <ull_pgf_cal>:
 80073bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073be:	b083      	sub	sp, #12
 80073c0:	4604      	mov	r4, r0
 80073c2:	2901      	cmp	r1, #1
 80073c4:	d009      	beq.n	80073da <ull_pgf_cal+0x1e>
 80073c6:	2014      	movs	r0, #20
 80073c8:	f7fa f8d7 	bl	800157a <deca_usleep>
 80073cc:	4620      	mov	r0, r4
 80073ce:	f7ff feff 	bl	80071d0 <ull_run_pgfcal>
 80073d2:	4605      	mov	r5, r0
 80073d4:	4628      	mov	r0, r5
 80073d6:	b003      	add	sp, #12
 80073d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073da:	4e0f      	ldr	r6, [pc, #60]	; (8007418 <ull_pgf_cal+0x5c>)
 80073dc:	2200      	movs	r2, #0
 80073de:	4631      	mov	r1, r6
 80073e0:	f7fe fb0e 	bl	8005a00 <dwt_read16bitoffsetreg>
 80073e4:	4607      	mov	r7, r0
 80073e6:	f240 1305 	movw	r3, #261	; 0x105
 80073ea:	9300      	str	r3, [sp, #0]
 80073ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80073f0:	2200      	movs	r2, #0
 80073f2:	4631      	mov	r1, r6
 80073f4:	4620      	mov	r0, r4
 80073f6:	f7ff ff5d 	bl	80072b4 <dwt_modify16bitoffsetreg>
 80073fa:	2014      	movs	r0, #20
 80073fc:	f7fa f8bd 	bl	800157a <deca_usleep>
 8007400:	4620      	mov	r0, r4
 8007402:	f7ff fee5 	bl	80071d0 <ull_run_pgfcal>
 8007406:	4605      	mov	r5, r0
 8007408:	2200      	movs	r2, #0
 800740a:	9200      	str	r2, [sp, #0]
 800740c:	463b      	mov	r3, r7
 800740e:	4631      	mov	r1, r6
 8007410:	4620      	mov	r0, r4
 8007412:	f7ff ff4f 	bl	80072b4 <dwt_modify16bitoffsetreg>
 8007416:	e7dd      	b.n	80073d4 <ull_pgf_cal+0x18>
 8007418:	00070048 	.word	0x00070048

0800741c <ull_setgpiovalue>:
 800741c:	b500      	push	{lr}
 800741e:	b083      	sub	sp, #12
 8007420:	2a01      	cmp	r2, #1
 8007422:	d009      	beq.n	8007438 <ull_setgpiovalue+0x1c>
 8007424:	43cb      	mvns	r3, r1
 8007426:	2200      	movs	r2, #0
 8007428:	9200      	str	r2, [sp, #0]
 800742a:	b29b      	uxth	r3, r3
 800742c:	4906      	ldr	r1, [pc, #24]	; (8007448 <ull_setgpiovalue+0x2c>)
 800742e:	f7ff ff41 	bl	80072b4 <dwt_modify16bitoffsetreg>
 8007432:	b003      	add	sp, #12
 8007434:	f85d fb04 	ldr.w	pc, [sp], #4
 8007438:	9100      	str	r1, [sp, #0]
 800743a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800743e:	2200      	movs	r2, #0
 8007440:	4901      	ldr	r1, [pc, #4]	; (8007448 <ull_setgpiovalue+0x2c>)
 8007442:	f7ff ff37 	bl	80072b4 <dwt_modify16bitoffsetreg>
 8007446:	e7f4      	b.n	8007432 <ull_setgpiovalue+0x16>
 8007448:	0005000c 	.word	0x0005000c

0800744c <ull_readaccdata>:
 800744c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800744e:	b083      	sub	sp, #12
 8007450:	4604      	mov	r4, r0
 8007452:	460f      	mov	r7, r1
 8007454:	4616      	mov	r6, r2
 8007456:	461d      	mov	r5, r3
 8007458:	f248 0340 	movw	r3, #32832	; 0x8040
 800745c:	9300      	str	r3, [sp, #0]
 800745e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007462:	2200      	movs	r2, #0
 8007464:	4918      	ldr	r1, [pc, #96]	; (80074c8 <ull_readaccdata+0x7c>)
 8007466:	f7ff ff25 	bl	80072b4 <dwt_modify16bitoffsetreg>
 800746a:	19aa      	adds	r2, r5, r6
 800746c:	f243 0301 	movw	r3, #12289	; 0x3001
 8007470:	429a      	cmp	r2, r3
 8007472:	dc15      	bgt.n	80074a0 <ull_readaccdata+0x54>
 8007474:	2d7f      	cmp	r5, #127	; 0x7f
 8007476:	d91d      	bls.n	80074b4 <ull_readaccdata+0x68>
 8007478:	2315      	movs	r3, #21
 800747a:	2200      	movs	r2, #0
 800747c:	4913      	ldr	r1, [pc, #76]	; (80074cc <ull_readaccdata+0x80>)
 800747e:	4620      	mov	r0, r4
 8007480:	f7fe ffea 	bl	8006458 <dwt_write32bitoffsetreg>
 8007484:	462b      	mov	r3, r5
 8007486:	2200      	movs	r2, #0
 8007488:	4911      	ldr	r1, [pc, #68]	; (80074d0 <ull_readaccdata+0x84>)
 800748a:	4620      	mov	r0, r4
 800748c:	f7fe ffe4 	bl	8006458 <dwt_write32bitoffsetreg>
 8007490:	9700      	str	r7, [sp, #0]
 8007492:	4633      	mov	r3, r6
 8007494:	2200      	movs	r2, #0
 8007496:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800749a:	4620      	mov	r0, r4
 800749c:	f7fe fa90 	bl	80059c0 <dwt_readfromdevice>
 80074a0:	2200      	movs	r2, #0
 80074a2:	9200      	str	r2, [sp, #0]
 80074a4:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 80074a8:	4907      	ldr	r1, [pc, #28]	; (80074c8 <ull_readaccdata+0x7c>)
 80074aa:	4620      	mov	r0, r4
 80074ac:	f7ff ff02 	bl	80072b4 <dwt_modify16bitoffsetreg>
 80074b0:	b003      	add	sp, #12
 80074b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074b4:	9700      	str	r7, [sp, #0]
 80074b6:	4633      	mov	r3, r6
 80074b8:	462a      	mov	r2, r5
 80074ba:	f44f 11a8 	mov.w	r1, #1376256	; 0x150000
 80074be:	4620      	mov	r0, r4
 80074c0:	f7fe fa7e 	bl	80059c0 <dwt_readfromdevice>
 80074c4:	e7ec      	b.n	80074a0 <ull_readaccdata+0x54>
 80074c6:	bf00      	nop
 80074c8:	00110004 	.word	0x00110004
 80074cc:	001f0004 	.word	0x001f0004
 80074d0:	001f0008 	.word	0x001f0008

080074d4 <ull_repeated_cw>:
 80074d4:	b570      	push	{r4, r5, r6, lr}
 80074d6:	4606      	mov	r6, r0
 80074d8:	460c      	mov	r4, r1
 80074da:	4615      	mov	r5, r2
 80074dc:	4b0e      	ldr	r3, [pc, #56]	; (8007518 <ull_repeated_cw+0x44>)
 80074de:	2202      	movs	r2, #2
 80074e0:	490e      	ldr	r1, [pc, #56]	; (800751c <ull_repeated_cw+0x48>)
 80074e2:	f7fe ffb9 	bl	8006458 <dwt_write32bitoffsetreg>
 80074e6:	2d0f      	cmp	r5, #15
 80074e8:	bfa8      	it	ge
 80074ea:	250f      	movge	r5, #15
 80074ec:	1e63      	subs	r3, r4, #1
 80074ee:	2b03      	cmp	r3, #3
 80074f0:	bf28      	it	cs
 80074f2:	2404      	movcs	r4, #4
 80074f4:	2310      	movs	r3, #16
 80074f6:	4123      	asrs	r3, r4
 80074f8:	2200      	movs	r2, #0
 80074fa:	4909      	ldr	r1, [pc, #36]	; (8007520 <ull_repeated_cw+0x4c>)
 80074fc:	4630      	mov	r0, r6
 80074fe:	f7fe ffab 	bl	8006458 <dwt_write32bitoffsetreg>
 8007502:	1e63      	subs	r3, r4, #1
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	fa05 f303 	lsl.w	r3, r5, r3
 800750a:	2200      	movs	r2, #0
 800750c:	4905      	ldr	r1, [pc, #20]	; (8007524 <ull_repeated_cw+0x50>)
 800750e:	4630      	mov	r0, r6
 8007510:	f7fe ffa2 	bl	8006458 <dwt_write32bitoffsetreg>
 8007514:	bd70      	pop	{r4, r5, r6, pc}
 8007516:	bf00      	nop
 8007518:	00d20874 	.word	0x00d20874
 800751c:	00110010 	.word	0x00110010
 8007520:	00070028 	.word	0x00070028
 8007524:	00080018 	.word	0x00080018

08007528 <ull_configure>:
 8007528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800752c:	b083      	sub	sp, #12
 800752e:	4604      	mov	r4, r0
 8007530:	460d      	mov	r5, r1
 8007532:	f891 9000 	ldrb.w	r9, [r1]
 8007536:	790b      	ldrb	r3, [r1, #4]
 8007538:	2b18      	cmp	r3, #24
 800753a:	d814      	bhi.n	8007566 <ull_configure+0x3e>
 800753c:	78cf      	ldrb	r7, [r1, #3]
 800753e:	2f18      	cmp	r7, #24
 8007540:	bf94      	ite	ls
 8007542:	2700      	movls	r7, #0
 8007544:	2701      	movhi	r7, #1
 8007546:	b2ff      	uxtb	r7, r7
 8007548:	79eb      	ldrb	r3, [r5, #7]
 800754a:	2b01      	cmp	r3, #1
 800754c:	bf0c      	ite	eq
 800754e:	2110      	moveq	r1, #16
 8007550:	2100      	movne	r1, #0
 8007552:	786b      	ldrb	r3, [r5, #1]
 8007554:	3b01      	subs	r3, #1
 8007556:	2b06      	cmp	r3, #6
 8007558:	d810      	bhi.n	800757c <ull_configure+0x54>
 800755a:	e8df f003 	tbb	[pc, r3]
 800755e:	0f06      	.short	0x0f06
 8007560:	0f0c120f 	.word	0x0f0c120f
 8007564:	09          	.byte	0x09
 8007565:	00          	.byte	0x00
 8007566:	2701      	movs	r7, #1
 8007568:	e7ed      	b.n	8007546 <ull_configure+0x1e>
 800756a:	f04f 0a40 	mov.w	sl, #64	; 0x40
 800756e:	e00a      	b.n	8007586 <ull_configure+0x5e>
 8007570:	f04f 0a48 	mov.w	sl, #72	; 0x48
 8007574:	e007      	b.n	8007586 <ull_configure+0x5e>
 8007576:	f04f 0a80 	mov.w	sl, #128	; 0x80
 800757a:	e004      	b.n	8007586 <ull_configure+0x5e>
 800757c:	f44f 7a80 	mov.w	sl, #256	; 0x100
 8007580:	e001      	b.n	8007586 <ull_configure+0x5e>
 8007582:	f04f 0a20 	mov.w	sl, #32
 8007586:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8007588:	8a53      	ldrh	r3, [r2, #18]
 800758a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800758e:	8253      	strh	r3, [r2, #18]
 8007590:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007592:	79ea      	ldrb	r2, [r5, #7]
 8007594:	731a      	strb	r2, [r3, #12]
 8007596:	7b2e      	ldrb	r6, [r5, #12]
 8007598:	1cb3      	adds	r3, r6, #2
 800759a:	2601      	movs	r6, #1
 800759c:	409e      	lsls	r6, r3
 800759e:	fa1f f886 	uxth.w	r8, r6
 80075a2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80075a4:	4bc7      	ldr	r3, [pc, #796]	; (80078c4 <ull_configure+0x39c>)
 80075a6:	fb03 f308 	mul.w	r3, r3, r8
 80075aa:	0bdb      	lsrs	r3, r3, #15
 80075ac:	8293      	strh	r3, [r2, #20]
 80075ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80075b0:	7aea      	ldrb	r2, [r5, #11]
 80075b2:	75da      	strb	r2, [r3, #23]
 80075b4:	7a2b      	ldrb	r3, [r5, #8]
 80075b6:	015b      	lsls	r3, r3, #5
 80075b8:	f003 0320 	and.w	r3, r3, #32
 80075bc:	7b6a      	ldrb	r2, [r5, #13]
 80075be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075c2:	7aea      	ldrb	r2, [r5, #11]
 80075c4:	0312      	lsls	r2, r2, #12
 80075c6:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 80075ca:	4313      	orrs	r3, r2
 80075cc:	430b      	orrs	r3, r1
 80075ce:	9300      	str	r3, [sp, #0]
 80075d0:	4bbd      	ldr	r3, [pc, #756]	; (80078c8 <ull_configure+0x3a0>)
 80075d2:	2200      	movs	r2, #0
 80075d4:	2110      	movs	r1, #16
 80075d6:	4620      	mov	r0, r4
 80075d8:	f7ff fad0 	bl	8006b7c <dwt_modify32bitoffsetreg>
 80075dc:	2f00      	cmp	r7, #0
 80075de:	f040 80f6 	bne.w	80077ce <ull_configure+0x2a6>
 80075e2:	7aeb      	ldrb	r3, [r5, #11]
 80075e4:	b1f3      	cbz	r3, 8007624 <ull_configure+0xfc>
 80075e6:	7b6b      	ldrb	r3, [r5, #13]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	f240 811c 	bls.w	8007826 <ull_configure+0x2fe>
 80075ee:	7b2a      	ldrb	r2, [r5, #12]
 80075f0:	4bb6      	ldr	r3, [pc, #728]	; (80078cc <ull_configure+0x3a4>)
 80075f2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80075f6:	0112      	lsls	r2, r2, #4
 80075f8:	0ad3      	lsrs	r3, r2, #11
 80075fa:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80075fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007602:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8007606:	bf28      	it	cs
 8007608:	3301      	addcs	r3, #1
 800760a:	b29b      	uxth	r3, r3
 800760c:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
 8007610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	f64f 7380 	movw	r3, #65408	; 0xff80
 800761a:	2202      	movs	r2, #2
 800761c:	49ac      	ldr	r1, [pc, #688]	; (80078d0 <ull_configure+0x3a8>)
 800761e:	4620      	mov	r0, r4
 8007620:	f7ff fe48 	bl	80072b4 <dwt_modify16bitoffsetreg>
 8007624:	2394      	movs	r3, #148	; 0x94
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	4baa      	ldr	r3, [pc, #680]	; (80078d4 <ull_configure+0x3ac>)
 800762a:	2200      	movs	r2, #0
 800762c:	49aa      	ldr	r1, [pc, #680]	; (80078d8 <ull_configure+0x3b0>)
 800762e:	4620      	mov	r0, r4
 8007630:	f7ff faa4 	bl	8006b7c <dwt_modify32bitoffsetreg>
 8007634:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8007638:	f340 8108 	ble.w	800784c <ull_configure+0x324>
 800763c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800763e:	8a53      	ldrh	r3, [r2, #18]
 8007640:	f043 0320 	orr.w	r3, r3, #32
 8007644:	8253      	strh	r3, [r2, #18]
 8007646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	f24e 73ff 	movw	r3, #59391	; 0xe7ff
 8007650:	2200      	movs	r2, #0
 8007652:	49a2      	ldr	r1, [pc, #648]	; (80078dc <ull_configure+0x3b4>)
 8007654:	4620      	mov	r0, r4
 8007656:	f7ff fe2d 	bl	80072b4 <dwt_modify16bitoffsetreg>
 800765a:	7b6b      	ldrb	r3, [r5, #13]
 800765c:	2b01      	cmp	r3, #1
 800765e:	f000 8100 	beq.w	8007862 <ull_configure+0x33a>
 8007662:	78ab      	ldrb	r3, [r5, #2]
 8007664:	f043 0310 	orr.w	r3, r3, #16
 8007668:	9300      	str	r3, [sp, #0]
 800766a:	23fc      	movs	r3, #252	; 0xfc
 800766c:	2200      	movs	r2, #0
 800766e:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8007672:	4620      	mov	r0, r4
 8007674:	f7ff fc6c 	bl	8006f50 <dwt_modify8bitoffsetreg>
 8007678:	1e73      	subs	r3, r6, #1
 800767a:	b2db      	uxtb	r3, r3
 800767c:	2200      	movs	r2, #0
 800767e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8007682:	4620      	mov	r0, r4
 8007684:	f7fe fd95 	bl	80061b2 <dwt_write8bitoffsetreg>
 8007688:	786b      	ldrb	r3, [r5, #1]
 800768a:	2b07      	cmp	r3, #7
 800768c:	bf0c      	ite	eq
 800768e:	2308      	moveq	r3, #8
 8007690:	2300      	movne	r3, #0
 8007692:	2201      	movs	r2, #1
 8007694:	2128      	movs	r1, #40	; 0x28
 8007696:	4620      	mov	r0, r4
 8007698:	f7fe fd8b 	bl	80061b2 <dwt_write8bitoffsetreg>
 800769c:	4b90      	ldr	r3, [pc, #576]	; (80078e0 <ull_configure+0x3b8>)
 800769e:	2200      	movs	r2, #0
 80076a0:	4990      	ldr	r1, [pc, #576]	; (80078e4 <ull_configure+0x3bc>)
 80076a2:	4620      	mov	r0, r4
 80076a4:	f7fe fed8 	bl	8006458 <dwt_write32bitoffsetreg>
 80076a8:	2200      	movs	r2, #0
 80076aa:	498f      	ldr	r1, [pc, #572]	; (80078e8 <ull_configure+0x3c0>)
 80076ac:	4620      	mov	r0, r4
 80076ae:	f7fe f991 	bl	80059d4 <dwt_read32bitoffsetreg>
 80076b2:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 80076b6:	f020 001f 	bic.w	r0, r0, #31
 80076ba:	f1b9 0f09 	cmp.w	r9, #9
 80076be:	bf08      	it	eq
 80076c0:	f040 0001 	orreq.w	r0, r0, #1
 80076c4:	792a      	ldrb	r2, [r5, #4]
 80076c6:	0212      	lsls	r2, r2, #8
 80076c8:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 80076cc:	78eb      	ldrb	r3, [r5, #3]
 80076ce:	00db      	lsls	r3, r3, #3
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	431a      	orrs	r2, r3
 80076d4:	796b      	ldrb	r3, [r5, #5]
 80076d6:	005b      	lsls	r3, r3, #1
 80076d8:	f003 0306 	and.w	r3, r3, #6
 80076dc:	4313      	orrs	r3, r2
 80076de:	4303      	orrs	r3, r0
 80076e0:	2200      	movs	r2, #0
 80076e2:	4981      	ldr	r1, [pc, #516]	; (80078e8 <ull_configure+0x3c0>)
 80076e4:	4620      	mov	r0, r4
 80076e6:	f7fe feb7 	bl	8006458 <dwt_write32bitoffsetreg>
 80076ea:	79aa      	ldrb	r2, [r5, #6]
 80076ec:	786b      	ldrb	r3, [r5, #1]
 80076ee:	031b      	lsls	r3, r3, #12
 80076f0:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	f46f 4374 	mvn.w	r3, #62464	; 0xf400
 80076fa:	2200      	movs	r2, #0
 80076fc:	2124      	movs	r1, #36	; 0x24
 80076fe:	4620      	mov	r0, r4
 8007700:	f7ff fa3c 	bl	8006b7c <dwt_modify32bitoffsetreg>
 8007704:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 8007708:	b923      	cbnz	r3, 8007714 <ull_configure+0x1ec>
 800770a:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800770e:	726b      	strb	r3, [r5, #9]
 8007710:	2300      	movs	r3, #0
 8007712:	72ab      	strb	r3, [r5, #10]
 8007714:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 8007718:	2202      	movs	r2, #2
 800771a:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800771e:	4620      	mov	r0, r4
 8007720:	f7fe fd99 	bl	8006256 <dwt_write16bitoffsetreg>
 8007724:	2202      	movs	r2, #2
 8007726:	4971      	ldr	r1, [pc, #452]	; (80078ec <ull_configure+0x3c4>)
 8007728:	4620      	mov	r0, r4
 800772a:	f7fe f97b 	bl	8005a24 <dwt_read8bitoffsetreg>
 800772e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007730:	7c1b      	ldrb	r3, [r3, #16]
 8007732:	454b      	cmp	r3, r9
 8007734:	f000 809f 	beq.w	8007876 <ull_configure+0x34e>
 8007738:	2803      	cmp	r0, #3
 800773a:	f000 80a0 	beq.w	800787e <ull_configure+0x356>
 800773e:	f1b9 0f09 	cmp.w	r9, #9
 8007742:	f000 80a1 	beq.w	8007888 <ull_configure+0x360>
 8007746:	4b6a      	ldr	r3, [pc, #424]	; (80078f0 <ull_configure+0x3c8>)
 8007748:	2200      	movs	r2, #0
 800774a:	496a      	ldr	r1, [pc, #424]	; (80078f4 <ull_configure+0x3cc>)
 800774c:	4620      	mov	r0, r4
 800774e:	f7fe fe83 	bl	8006458 <dwt_write32bitoffsetreg>
 8007752:	f641 733c 	movw	r3, #7996	; 0x1f3c
 8007756:	2200      	movs	r2, #0
 8007758:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 800775c:	4620      	mov	r0, r4
 800775e:	f7fe fd7a 	bl	8006256 <dwt_write16bitoffsetreg>
 8007762:	2314      	movs	r3, #20
 8007764:	2201      	movs	r2, #1
 8007766:	4964      	ldr	r1, [pc, #400]	; (80078f8 <ull_configure+0x3d0>)
 8007768:	4620      	mov	r0, r4
 800776a:	f7fe fd22 	bl	80061b2 <dwt_write8bitoffsetreg>
 800776e:	230e      	movs	r3, #14
 8007770:	2202      	movs	r2, #2
 8007772:	4962      	ldr	r1, [pc, #392]	; (80078fc <ull_configure+0x3d4>)
 8007774:	4620      	mov	r0, r4
 8007776:	f7fe fd1c 	bl	80061b2 <dwt_write8bitoffsetreg>
 800777a:	2381      	movs	r3, #129	; 0x81
 800777c:	2200      	movs	r2, #0
 800777e:	4960      	ldr	r1, [pc, #384]	; (8007900 <ull_configure+0x3d8>)
 8007780:	4620      	mov	r0, r4
 8007782:	f7fe fd16 	bl	80061b2 <dwt_write8bitoffsetreg>
 8007786:	2302      	movs	r3, #2
 8007788:	2200      	movs	r2, #0
 800778a:	2144      	movs	r1, #68	; 0x44
 800778c:	4620      	mov	r0, r4
 800778e:	f7fe fd10 	bl	80061b2 <dwt_write8bitoffsetreg>
 8007792:	2101      	movs	r1, #1
 8007794:	4620      	mov	r0, r4
 8007796:	f7ff fc99 	bl	80070cc <ull_setdwstate>
 800779a:	f04f 0b32 	mov.w	fp, #50	; 0x32
 800779e:	f04f 0814 	mov.w	r8, #20
 80077a2:	2700      	movs	r7, #0
 80077a4:	2644      	movs	r6, #68	; 0x44
 80077a6:	4640      	mov	r0, r8
 80077a8:	f7f9 fee7 	bl	800157a <deca_usleep>
 80077ac:	463a      	mov	r2, r7
 80077ae:	4631      	mov	r1, r6
 80077b0:	4620      	mov	r0, r4
 80077b2:	f7fe f937 	bl	8005a24 <dwt_read8bitoffsetreg>
 80077b6:	f010 0f02 	tst.w	r0, #2
 80077ba:	f040 80ab 	bne.w	8007914 <ull_configure+0x3ec>
 80077be:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80077c2:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 80077c6:	d1ee      	bne.n	80077a6 <ull_configure+0x27e>
 80077c8:	f06f 0001 	mvn.w	r0, #1
 80077cc:	e0cf      	b.n	800796e <ull_configure+0x446>
 80077ce:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80077d0:	8a53      	ldrh	r3, [r2, #18]
 80077d2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80077d6:	8253      	strh	r3, [r2, #18]
 80077d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80077dc:	9300      	str	r3, [sp, #0]
 80077de:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 80077e2:	2200      	movs	r2, #0
 80077e4:	493d      	ldr	r1, [pc, #244]	; (80078dc <ull_configure+0x3b4>)
 80077e6:	4620      	mov	r0, r4
 80077e8:	f7ff f9c8 	bl	8006b7c <dwt_modify32bitoffsetreg>
 80077ec:	f240 3306 	movw	r3, #774	; 0x306
 80077f0:	2200      	movs	r2, #0
 80077f2:	4944      	ldr	r1, [pc, #272]	; (8007904 <ull_configure+0x3dc>)
 80077f4:	4620      	mov	r0, r4
 80077f6:	f7fe fe2f 	bl	8006458 <dwt_write32bitoffsetreg>
 80077fa:	2300      	movs	r3, #0
 80077fc:	461a      	mov	r2, r3
 80077fe:	f04f 110e 	mov.w	r1, #917518	; 0xe000e
 8007802:	4620      	mov	r0, r4
 8007804:	f7fe fe28 	bl	8006458 <dwt_write32bitoffsetreg>
 8007808:	4b3f      	ldr	r3, [pc, #252]	; (8007908 <ull_configure+0x3e0>)
 800780a:	2200      	movs	r2, #0
 800780c:	4930      	ldr	r1, [pc, #192]	; (80078d0 <ull_configure+0x3a8>)
 800780e:	4620      	mov	r0, r4
 8007810:	f7fe fe22 	bl	8006458 <dwt_write32bitoffsetreg>
 8007814:	239d      	movs	r3, #157	; 0x9d
 8007816:	9300      	str	r3, [sp, #0]
 8007818:	4b2e      	ldr	r3, [pc, #184]	; (80078d4 <ull_configure+0x3ac>)
 800781a:	2200      	movs	r2, #0
 800781c:	492e      	ldr	r1, [pc, #184]	; (80078d8 <ull_configure+0x3b0>)
 800781e:	4620      	mov	r0, r4
 8007820:	f7ff f9ac 	bl	8006b7c <dwt_modify32bitoffsetreg>
 8007824:	e719      	b.n	800765a <ull_configure+0x132>
 8007826:	7b2a      	ldrb	r2, [r5, #12]
 8007828:	4b28      	ldr	r3, [pc, #160]	; (80078cc <ull_configure+0x3a4>)
 800782a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800782e:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 8007832:	fb02 f203 	mul.w	r2, r2, r3
 8007836:	0c93      	lsrs	r3, r2, #18
 8007838:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 800783c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007840:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8007844:	bf28      	it	cs
 8007846:	3301      	addcs	r3, #1
 8007848:	b29b      	uxth	r3, r3
 800784a:	e6df      	b.n	800760c <ull_configure+0xe4>
 800784c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007850:	9300      	str	r3, [sp, #0]
 8007852:	f24e 73ff 	movw	r3, #59391	; 0xe7ff
 8007856:	2200      	movs	r2, #0
 8007858:	4920      	ldr	r1, [pc, #128]	; (80078dc <ull_configure+0x3b4>)
 800785a:	4620      	mov	r0, r4
 800785c:	f7ff fd2a 	bl	80072b4 <dwt_modify16bitoffsetreg>
 8007860:	e6fb      	b.n	800765a <ull_configure+0x132>
 8007862:	78ab      	ldrb	r3, [r5, #2]
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	23ec      	movs	r3, #236	; 0xec
 8007868:	2200      	movs	r2, #0
 800786a:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800786e:	4620      	mov	r0, r4
 8007870:	f7ff fb6e 	bl	8006f50 <dwt_modify8bitoffsetreg>
 8007874:	e700      	b.n	8007678 <ull_configure+0x150>
 8007876:	2803      	cmp	r0, #3
 8007878:	f47f af61 	bne.w	800773e <ull_configure+0x216>
 800787c:	e04d      	b.n	800791a <ull_configure+0x3f2>
 800787e:	2102      	movs	r1, #2
 8007880:	4620      	mov	r0, r4
 8007882:	f7ff fc23 	bl	80070cc <ull_setdwstate>
 8007886:	e75a      	b.n	800773e <ull_configure+0x216>
 8007888:	4b20      	ldr	r3, [pc, #128]	; (800790c <ull_configure+0x3e4>)
 800788a:	2200      	movs	r2, #0
 800788c:	4919      	ldr	r1, [pc, #100]	; (80078f4 <ull_configure+0x3cc>)
 800788e:	4620      	mov	r0, r4
 8007890:	f7fe fde2 	bl	8006458 <dwt_write32bitoffsetreg>
 8007894:	f640 733c 	movw	r3, #3900	; 0xf3c
 8007898:	2200      	movs	r2, #0
 800789a:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 800789e:	4620      	mov	r0, r4
 80078a0:	f7fe fcd9 	bl	8006256 <dwt_write16bitoffsetreg>
 80078a4:	e75d      	b.n	8007762 <ull_configure+0x23a>
 80078a6:	fa4f f189 	sxtb.w	r1, r9
 80078aa:	4620      	mov	r0, r4
 80078ac:	f7ff f98a 	bl	8006bc4 <_dwt_kick_dgc_on_wakeup>
 80078b0:	e040      	b.n	8007934 <ull_configure+0x40c>
 80078b2:	2200      	movs	r2, #0
 80078b4:	9200      	str	r2, [sp, #0]
 80078b6:	23fe      	movs	r3, #254	; 0xfe
 80078b8:	4915      	ldr	r1, [pc, #84]	; (8007910 <ull_configure+0x3e8>)
 80078ba:	4620      	mov	r0, r4
 80078bc:	f7ff fb48 	bl	8006f50 <dwt_modify8bitoffsetreg>
 80078c0:	e042      	b.n	8007948 <ull_configure+0x420>
 80078c2:	bf00      	nop
 80078c4:	00026668 	.word	0x00026668
 80078c8:	fffc4fcf 	.word	0xfffc4fcf
 80078cc:	08016244 	.word	0x08016244
 80078d0:	000e0012 	.word	0x000e0012
 80078d4:	bfffff00 	.word	0xbfffff00
 80078d8:	000e0016 	.word	0x000e0016
 80078dc:	000b0008 	.word	0x000b0008
 80078e0:	af5f35cc 	.word	0xaf5f35cc
 80078e4:	0006000c 	.word	0x0006000c
 80078e8:	00010014 	.word	0x00010014
 80078ec:	000f0030 	.word	0x000f0030
 80078f0:	1c071134 	.word	0x1c071134
 80078f4:	0007001c 	.word	0x0007001c
 80078f8:	00070050 	.word	0x00070050
 80078fc:	00070018 	.word	0x00070018
 8007900:	00090008 	.word	0x00090008
 8007904:	000e000c 	.word	0x000e000c
 8007908:	000c5a0a 	.word	0x000c5a0a
 800790c:	1c010034 	.word	0x1c010034
 8007910:	00030018 	.word	0x00030018
 8007914:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007916:	f883 9010 	strb.w	r9, [r3, #16]
 800791a:	792b      	ldrb	r3, [r5, #4]
 800791c:	3b09      	subs	r3, #9
 800791e:	b2db      	uxtb	r3, r3
 8007920:	2b0f      	cmp	r3, #15
 8007922:	d8c6      	bhi.n	80078b2 <ull_configure+0x38a>
 8007924:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007926:	7a5b      	ldrb	r3, [r3, #9]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d0bc      	beq.n	80078a6 <ull_configure+0x37e>
 800792c:	4649      	mov	r1, r9
 800792e:	4620      	mov	r0, r4
 8007930:	f7fe ffae 	bl	8006890 <ull_configmrxlut>
 8007934:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8007938:	9300      	str	r3, [sp, #0]
 800793a:	f248 13ff 	movw	r3, #33279	; 0x81ff
 800793e:	2200      	movs	r2, #0
 8007940:	490c      	ldr	r1, [pc, #48]	; (8007974 <ull_configure+0x44c>)
 8007942:	4620      	mov	r0, r4
 8007944:	f7ff fcb6 	bl	80072b4 <dwt_modify16bitoffsetreg>
 8007948:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 800794c:	bfcc      	ite	gt
 800794e:	f04f 5300 	movgt.w	r3, #536870912	; 0x20000000
 8007952:	f04f 53a0 	movle.w	r3, #335544320	; 0x14000000
 8007956:	9300      	str	r3, [sp, #0]
 8007958:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800795c:	2200      	movs	r2, #0
 800795e:	4906      	ldr	r1, [pc, #24]	; (8007978 <ull_configure+0x450>)
 8007960:	4620      	mov	r0, r4
 8007962:	f7ff f90b 	bl	8006b7c <dwt_modify32bitoffsetreg>
 8007966:	2101      	movs	r1, #1
 8007968:	4620      	mov	r0, r4
 800796a:	f7ff fd27 	bl	80073bc <ull_pgf_cal>
 800796e:	b003      	add	sp, #12
 8007970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007974:	00030018 	.word	0x00030018
 8007978:	00060010 	.word	0x00060010

0800797c <dwt_ioctl>:
 800797c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007980:	b091      	sub	sp, #68	; 0x44
 8007982:	4606      	mov	r6, r0
 8007984:	4615      	mov	r5, r2
 8007986:	461c      	mov	r4, r3
 8007988:	299c      	cmp	r1, #156	; 0x9c
 800798a:	f200 809f 	bhi.w	8007acc <dwt_ioctl+0x150>
 800798e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007992:	0a6d      	.short	0x0a6d
 8007994:	00a30a78 	.word	0x00a30a78
 8007998:	00be00a7 	.word	0x00be00a7
 800799c:	018e0148 	.word	0x018e0148
 80079a0:	0152016b 	.word	0x0152016b
 80079a4:	01a9019e 	.word	0x01a9019e
 80079a8:	01b901b1 	.word	0x01b901b1
 80079ac:	01c901c1 	.word	0x01c901c1
 80079b0:	01d501d1 	.word	0x01d501d1
 80079b4:	026e01dd 	.word	0x026e01dd
 80079b8:	0281027c 	.word	0x0281027c
 80079bc:	0290028b 	.word	0x0290028b
 80079c0:	029e0295 	.word	0x029e0295
 80079c4:	030902a3 	.word	0x030902a3
 80079c8:	0326031b 	.word	0x0326031b
 80079cc:	033b0331 	.word	0x033b0331
 80079d0:	03690373 	.word	0x03690373
 80079d4:	0345035f 	.word	0x0345035f
 80079d8:	03c10352 	.word	0x03c10352
 80079dc:	022b01f8 	.word	0x022b01f8
 80079e0:	02410239 	.word	0x02410239
 80079e4:	09960255 	.word	0x09960255
 80079e8:	0382099b 	.word	0x0382099b
 80079ec:	03e303df 	.word	0x03e303df
 80079f0:	03f103ec 	.word	0x03f103ec
 80079f4:	040503fb 	.word	0x040503fb
 80079f8:	0437040d 	.word	0x0437040d
 80079fc:	044e0443 	.word	0x044e0443
 8007a00:	04590378 	.word	0x04590378
 8007a04:	04740462 	.word	0x04740462
 8007a08:	049e048d 	.word	0x049e048d
 8007a0c:	04ea04e0 	.word	0x04ea04e0
 8007a10:	051a050b 	.word	0x051a050b
 8007a14:	05230535 	.word	0x05230535
 8007a18:	05970551 	.word	0x05970551
 8007a1c:	05cf05af 	.word	0x05cf05af
 8007a20:	05f805e4 	.word	0x05f805e4
 8007a24:	061d0601 	.word	0x061d0601
 8007a28:	0773060a 	.word	0x0773060a
 8007a2c:	07ed079f 	.word	0x07ed079f
 8007a30:	07fe07f3 	.word	0x07fe07f3
 8007a34:	08370817 	.word	0x08370817
 8007a38:	084b0841 	.word	0x084b0841
 8007a3c:	08820879 	.word	0x08820879
 8007a40:	08910888 	.word	0x08910888
 8007a44:	08ab089e 	.word	0x08ab089e
 8007a48:	08be08b5 	.word	0x08be08b5
 8007a4c:	08d208c7 	.word	0x08d208c7
 8007a50:	08e308dd 	.word	0x08e308dd
 8007a54:	09110906 	.word	0x09110906
 8007a58:	0945091c 	.word	0x0945091c
 8007a5c:	09720967 	.word	0x09720967
 8007a60:	09a1098b 	.word	0x09a1098b
 8007a64:	0a200a16 	.word	0x0a200a16
 8007a68:	0a800a2b 	.word	0x0a800a2b
 8007a6c:	0a620a35 	.word	0x0a620a35
 8007a70:	09df0791 	.word	0x09df0791
 8007a74:	0aee0a00 	.word	0x0aee0a00
 8007a78:	0a8d0ae3 	.word	0x0a8d0ae3
 8007a7c:	0aa30a98 	.word	0x0aa30a98
 8007a80:	0ab90aae 	.word	0x0ab90aae
 8007a84:	0acf0ac4 	.word	0x0acf0ac4
 8007a88:	0bd80ad8 	.word	0x0bd80ad8
 8007a8c:	0c4d0c12 	.word	0x0c4d0c12
 8007a90:	0d290c70 	.word	0x0d290c70
 8007a94:	0b190d3e 	.word	0x0b190d3e
 8007a98:	009d009d 	.word	0x009d009d
 8007a9c:	009d009d 	.word	0x009d009d
 8007aa0:	009d009d 	.word	0x009d009d
 8007aa4:	009d009d 	.word	0x009d009d
 8007aa8:	009d009d 	.word	0x009d009d
 8007aac:	009d009d 	.word	0x009d009d
 8007ab0:	009d009d 	.word	0x009d009d
 8007ab4:	009d009d 	.word	0x009d009d
 8007ab8:	009d009d 	.word	0x009d009d
 8007abc:	0c87009d 	.word	0x0c87009d
 8007ac0:	0dce0ca5 	.word	0x0dce0ca5
 8007ac4:	0ce40cef 	.word	0x0ce40cef
 8007ac8:	0cfa0d03 	.word	0x0cfa0d03
 8007acc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	b011      	add	sp, #68	; 0x44
 8007ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad8:	6843      	ldr	r3, [r0, #4]
 8007ada:	4798      	blx	r3
 8007adc:	2500      	movs	r5, #0
 8007ade:	e7f7      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007ae0:	2202      	movs	r2, #2
 8007ae2:	49b7      	ldr	r1, [pc, #732]	; (8007dc0 <dwt_ioctl+0x444>)
 8007ae4:	f7fd ff9e 	bl	8005a24 <dwt_read8bitoffsetreg>
 8007ae8:	2803      	cmp	r0, #3
 8007aea:	d801      	bhi.n	8007af0 <dwt_ioctl+0x174>
 8007aec:	2500      	movs	r5, #0
 8007aee:	e7ef      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007af0:	f7f9 fd1a 	bl	8001528 <decamutexon>
 8007af4:	4604      	mov	r4, r0
 8007af6:	2500      	movs	r5, #0
 8007af8:	9500      	str	r5, [sp, #0]
 8007afa:	462b      	mov	r3, r5
 8007afc:	462a      	mov	r2, r5
 8007afe:	4629      	mov	r1, r5
 8007b00:	4630      	mov	r0, r6
 8007b02:	f7fe fb4b 	bl	800619c <dwt_writetodevice>
 8007b06:	4620      	mov	r0, r4
 8007b08:	f7f9 fd1f 	bl	800154a <decamutexoff>
 8007b0c:	e7e0      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007b0e:	2c00      	cmp	r4, #0
 8007b10:	f001 8510 	beq.w	8009534 <dwt_ioctl+0x1bb8>
 8007b14:	7824      	ldrb	r4, [r4, #0]
 8007b16:	f014 0f1d 	tst.w	r4, #29
 8007b1a:	d065      	beq.n	8007be8 <dwt_ioctl+0x26c>
 8007b1c:	f014 0f01 	tst.w	r4, #1
 8007b20:	d026      	beq.n	8007b70 <dwt_ioctl+0x1f4>
 8007b22:	f014 0f02 	tst.w	r4, #2
 8007b26:	f04f 0200 	mov.w	r2, #0
 8007b2a:	9200      	str	r2, [sp, #0]
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	bf14      	ite	ne
 8007b30:	210d      	movne	r1, #13
 8007b32:	2103      	moveq	r1, #3
 8007b34:	f7fe fb32 	bl	800619c <dwt_writetodevice>
 8007b38:	2203      	movs	r2, #3
 8007b3a:	2144      	movs	r1, #68	; 0x44
 8007b3c:	4630      	mov	r0, r6
 8007b3e:	f7fd ff71 	bl	8005a24 <dwt_read8bitoffsetreg>
 8007b42:	f010 0f08 	tst.w	r0, #8
 8007b46:	d145      	bne.n	8007bd4 <dwt_ioctl+0x258>
 8007b48:	2200      	movs	r2, #0
 8007b4a:	499d      	ldr	r1, [pc, #628]	; (8007dc0 <dwt_ioctl+0x444>)
 8007b4c:	4630      	mov	r0, r6
 8007b4e:	f7fd ff41 	bl	80059d4 <dwt_read32bitoffsetreg>
 8007b52:	f5b0 2f50 	cmp.w	r0, #851968	; 0xd0000
 8007b56:	bf18      	it	ne
 8007b58:	2500      	movne	r5, #0
 8007b5a:	d1b9      	bne.n	8007ad0 <dwt_ioctl+0x154>
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	9100      	str	r1, [sp, #0]
 8007b60:	460b      	mov	r3, r1
 8007b62:	460a      	mov	r2, r1
 8007b64:	4630      	mov	r0, r6
 8007b66:	f7fe fb19 	bl	800619c <dwt_writetodevice>
 8007b6a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007b6e:	e7af      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007b70:	f014 0f08 	tst.w	r4, #8
 8007b74:	d10e      	bne.n	8007b94 <dwt_ioctl+0x218>
 8007b76:	f014 0f10 	tst.w	r4, #16
 8007b7a:	d11b      	bne.n	8007bb4 <dwt_ioctl+0x238>
 8007b7c:	f014 0f02 	tst.w	r4, #2
 8007b80:	f04f 0200 	mov.w	r2, #0
 8007b84:	9200      	str	r2, [sp, #0]
 8007b86:	4613      	mov	r3, r2
 8007b88:	bf14      	ite	ne
 8007b8a:	2110      	movne	r1, #16
 8007b8c:	2109      	moveq	r1, #9
 8007b8e:	f7fe fb05 	bl	800619c <dwt_writetodevice>
 8007b92:	e7d1      	b.n	8007b38 <dwt_ioctl+0x1bc>
 8007b94:	2100      	movs	r1, #0
 8007b96:	f7fe fdd3 	bl	8006740 <_dwt_adjust_delaytime>
 8007b9a:	f014 0f02 	tst.w	r4, #2
 8007b9e:	f04f 0200 	mov.w	r2, #0
 8007ba2:	9200      	str	r2, [sp, #0]
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	bf14      	ite	ne
 8007ba8:	210f      	movne	r1, #15
 8007baa:	2107      	moveq	r1, #7
 8007bac:	4630      	mov	r0, r6
 8007bae:	f7fe faf5 	bl	800619c <dwt_writetodevice>
 8007bb2:	e7c1      	b.n	8007b38 <dwt_ioctl+0x1bc>
 8007bb4:	2101      	movs	r1, #1
 8007bb6:	f7fe fdc3 	bl	8006740 <_dwt_adjust_delaytime>
 8007bba:	f014 0f02 	tst.w	r4, #2
 8007bbe:	f04f 0200 	mov.w	r2, #0
 8007bc2:	9200      	str	r2, [sp, #0]
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	bf14      	ite	ne
 8007bc8:	210e      	movne	r1, #14
 8007bca:	2105      	moveq	r1, #5
 8007bcc:	4630      	mov	r0, r6
 8007bce:	f7fe fae5 	bl	800619c <dwt_writetodevice>
 8007bd2:	e7b1      	b.n	8007b38 <dwt_ioctl+0x1bc>
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	9100      	str	r1, [sp, #0]
 8007bd8:	460b      	mov	r3, r1
 8007bda:	460a      	mov	r2, r1
 8007bdc:	4630      	mov	r0, r6
 8007bde:	f7fe fadd 	bl	800619c <dwt_writetodevice>
 8007be2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007be6:	e773      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007be8:	f014 0f20 	tst.w	r4, #32
 8007bec:	d00c      	beq.n	8007c08 <dwt_ioctl+0x28c>
 8007bee:	f014 0f02 	tst.w	r4, #2
 8007bf2:	f04f 0500 	mov.w	r5, #0
 8007bf6:	9500      	str	r5, [sp, #0]
 8007bf8:	462b      	mov	r3, r5
 8007bfa:	462a      	mov	r2, r5
 8007bfc:	bf14      	ite	ne
 8007bfe:	2111      	movne	r1, #17
 8007c00:	210b      	moveq	r1, #11
 8007c02:	f7fe facb 	bl	800619c <dwt_writetodevice>
 8007c06:	e763      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007c08:	f014 0f02 	tst.w	r4, #2
 8007c0c:	f04f 0500 	mov.w	r5, #0
 8007c10:	9500      	str	r5, [sp, #0]
 8007c12:	462b      	mov	r3, r5
 8007c14:	462a      	mov	r2, r5
 8007c16:	bf14      	ite	ne
 8007c18:	210c      	movne	r1, #12
 8007c1a:	2101      	moveq	r1, #1
 8007c1c:	f7fe fabe 	bl	800619c <dwt_writetodevice>
 8007c20:	e756      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007c22:	2c00      	cmp	r4, #0
 8007c24:	f001 8489 	beq.w	800953a <dwt_ioctl+0x1bbe>
 8007c28:	6823      	ldr	r3, [r4, #0]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	212c      	movs	r1, #44	; 0x2c
 8007c2e:	f7fe fc13 	bl	8006458 <dwt_write32bitoffsetreg>
 8007c32:	2500      	movs	r5, #0
 8007c34:	e74c      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007c36:	6823      	ldr	r3, [r4, #0]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	4962      	ldr	r1, [pc, #392]	; (8007dc4 <dwt_ioctl+0x448>)
 8007c3c:	f7fe fc0c 	bl	8006458 <dwt_write32bitoffsetreg>
 8007c40:	6863      	ldr	r3, [r4, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	4960      	ldr	r1, [pc, #384]	; (8007dc8 <dwt_ioctl+0x44c>)
 8007c46:	4630      	mov	r0, r6
 8007c48:	f7fe fc06 	bl	8006458 <dwt_write32bitoffsetreg>
 8007c4c:	68a3      	ldr	r3, [r4, #8]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	495e      	ldr	r1, [pc, #376]	; (8007dcc <dwt_ioctl+0x450>)
 8007c52:	4630      	mov	r0, r6
 8007c54:	f7fe fc00 	bl	8006458 <dwt_write32bitoffsetreg>
 8007c58:	68e3      	ldr	r3, [r4, #12]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	495c      	ldr	r1, [pc, #368]	; (8007dd0 <dwt_ioctl+0x454>)
 8007c5e:	4630      	mov	r0, r6
 8007c60:	f7fe fbfa 	bl	8006458 <dwt_write32bitoffsetreg>
 8007c64:	2500      	movs	r5, #0
 8007c66:	e733      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007c68:	2c00      	cmp	r4, #0
 8007c6a:	f001 8469 	beq.w	8009540 <dwt_ioctl+0x1bc4>
 8007c6e:	8823      	ldrh	r3, [r4, #0]
 8007c70:	6865      	ldr	r5, [r4, #4]
 8007c72:	2d03      	cmp	r5, #3
 8007c74:	f201 8467 	bhi.w	8009546 <dwt_ioctl+0x1bca>
 8007c78:	e8df f005 	tbb	[pc, r5]
 8007c7c:	130d0702 	.word	0x130d0702
 8007c80:	2200      	movs	r2, #0
 8007c82:	4954      	ldr	r1, [pc, #336]	; (8007dd4 <dwt_ioctl+0x458>)
 8007c84:	f7fe fae7 	bl	8006256 <dwt_write16bitoffsetreg>
 8007c88:	e722      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	4951      	ldr	r1, [pc, #324]	; (8007dd4 <dwt_ioctl+0x458>)
 8007c8e:	f7fe fae2 	bl	8006256 <dwt_write16bitoffsetreg>
 8007c92:	2500      	movs	r5, #0
 8007c94:	e71c      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007c96:	2200      	movs	r2, #0
 8007c98:	494f      	ldr	r1, [pc, #316]	; (8007dd8 <dwt_ioctl+0x45c>)
 8007c9a:	f7fe fadc 	bl	8006256 <dwt_write16bitoffsetreg>
 8007c9e:	2500      	movs	r5, #0
 8007ca0:	e716      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007ca2:	2202      	movs	r2, #2
 8007ca4:	494c      	ldr	r1, [pc, #304]	; (8007dd8 <dwt_ioctl+0x45c>)
 8007ca6:	f7fe fad6 	bl	8006256 <dwt_write16bitoffsetreg>
 8007caa:	2500      	movs	r5, #0
 8007cac:	e710      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007cae:	2c00      	cmp	r4, #0
 8007cb0:	f001 844c 	beq.w	800954c <dwt_ioctl+0x1bd0>
 8007cb4:	7823      	ldrb	r3, [r4, #0]
 8007cb6:	005b      	lsls	r3, r3, #1
 8007cb8:	f003 0306 	and.w	r3, r3, #6
 8007cbc:	9300      	str	r3, [sp, #0]
 8007cbe:	f06f 0306 	mvn.w	r3, #6
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	4945      	ldr	r1, [pc, #276]	; (8007ddc <dwt_ioctl+0x460>)
 8007cc6:	f7fe ff59 	bl	8006b7c <dwt_modify32bitoffsetreg>
 8007cca:	2500      	movs	r5, #0
 8007ccc:	e700      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007cce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007cd8:	2200      	movs	r2, #0
 8007cda:	4941      	ldr	r1, [pc, #260]	; (8007de0 <dwt_ioctl+0x464>)
 8007cdc:	f7fe ff4e 	bl	8006b7c <dwt_modify32bitoffsetreg>
 8007ce0:	2500      	movs	r5, #0
 8007ce2:	e6f5      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007ce4:	2c00      	cmp	r4, #0
 8007ce6:	f001 8434 	beq.w	8009552 <dwt_ioctl+0x1bd6>
 8007cea:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007cec:	7b5b      	ldrb	r3, [r3, #13]
 8007cee:	7023      	strb	r3, [r4, #0]
 8007cf0:	2500      	movs	r5, #0
 8007cf2:	e6ed      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007cf4:	2c00      	cmp	r4, #0
 8007cf6:	f001 842f 	beq.w	8009558 <dwt_ioctl+0x1bdc>
 8007cfa:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007cfc:	7a9b      	ldrb	r3, [r3, #10]
 8007cfe:	7023      	strb	r3, [r4, #0]
 8007d00:	2500      	movs	r5, #0
 8007d02:	e6e5      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007d04:	2c00      	cmp	r4, #0
 8007d06:	f001 842a 	beq.w	800955e <dwt_ioctl+0x1be2>
 8007d0a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007d0c:	7adb      	ldrb	r3, [r3, #11]
 8007d0e:	7023      	strb	r3, [r4, #0]
 8007d10:	2500      	movs	r5, #0
 8007d12:	e6dd      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007d14:	2c00      	cmp	r4, #0
 8007d16:	f001 8425 	beq.w	8009564 <dwt_ioctl+0x1be8>
 8007d1a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	6023      	str	r3, [r4, #0]
 8007d20:	2500      	movs	r5, #0
 8007d22:	e6d5      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007d24:	2c00      	cmp	r4, #0
 8007d26:	f001 8420 	beq.w	800956a <dwt_ioctl+0x1bee>
 8007d2a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	6023      	str	r3, [r4, #0]
 8007d30:	2500      	movs	r5, #0
 8007d32:	e6cd      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007d34:	f7fe fb7e 	bl	8006434 <ull_signal_rx_buff_free>
 8007d38:	2500      	movs	r5, #0
 8007d3a:	e6c9      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007d3c:	2c00      	cmp	r4, #0
 8007d3e:	f001 8417 	beq.w	8009570 <dwt_ioctl+0x1bf4>
 8007d42:	6821      	ldr	r1, [r4, #0]
 8007d44:	f7fe fd24 	bl	8006790 <ull_setrxaftertxdelay>
 8007d48:	2500      	movs	r5, #0
 8007d4a:	e6c1      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007d4c:	2c00      	cmp	r4, #0
 8007d4e:	f001 8412 	beq.w	8009576 <dwt_ioctl+0x1bfa>
 8007d52:	7825      	ldrb	r5, [r4, #0]
 8007d54:	b15d      	cbz	r5, 8007d6e <dwt_ioctl+0x3f2>
 8007d56:	6864      	ldr	r4, [r4, #4]
 8007d58:	2340      	movs	r3, #64	; 0x40
 8007d5a:	9300      	str	r3, [sp, #0]
 8007d5c:	23ff      	movs	r3, #255	; 0xff
 8007d5e:	2200      	movs	r2, #0
 8007d60:	2110      	movs	r1, #16
 8007d62:	f7ff f8f5 	bl	8006f50 <dwt_modify8bitoffsetreg>
 8007d66:	2d02      	cmp	r5, #2
 8007d68:	d107      	bne.n	8007d7a <dwt_ioctl+0x3fe>
 8007d6a:	60f4      	str	r4, [r6, #12]
 8007d6c:	e005      	b.n	8007d7a <dwt_ioctl+0x3fe>
 8007d6e:	2200      	movs	r2, #0
 8007d70:	9200      	str	r2, [sp, #0]
 8007d72:	23bf      	movs	r3, #191	; 0xbf
 8007d74:	2110      	movs	r1, #16
 8007d76:	f7ff f8eb 	bl	8006f50 <dwt_modify8bitoffsetreg>
 8007d7a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8007d7c:	759d      	strb	r5, [r3, #22]
 8007d7e:	2500      	movs	r5, #0
 8007d80:	e6a6      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007d82:	2c00      	cmp	r4, #0
 8007d84:	f001 83fa 	beq.w	800957c <dwt_ioctl+0x1c00>
 8007d88:	6865      	ldr	r5, [r4, #4]
 8007d8a:	7823      	ldrb	r3, [r4, #0]
 8007d8c:	2203      	movs	r2, #3
 8007d8e:	4915      	ldr	r1, [pc, #84]	; (8007de4 <dwt_ioctl+0x468>)
 8007d90:	f7fe fa0f 	bl	80061b2 <dwt_write8bitoffsetreg>
 8007d94:	b945      	cbnz	r5, 8007da8 <dwt_ioctl+0x42c>
 8007d96:	2200      	movs	r2, #0
 8007d98:	9200      	str	r2, [sp, #0]
 8007d9a:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8007d9e:	2110      	movs	r1, #16
 8007da0:	4630      	mov	r0, r6
 8007da2:	f7ff fa87 	bl	80072b4 <dwt_modify16bitoffsetreg>
 8007da6:	e693      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007da8:	f44f 2381 	mov.w	r3, #264192	; 0x40800
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007db2:	2200      	movs	r2, #0
 8007db4:	2110      	movs	r1, #16
 8007db6:	4630      	mov	r0, r6
 8007db8:	f7fe fee0 	bl	8006b7c <dwt_modify32bitoffsetreg>
 8007dbc:	2500      	movs	r5, #0
 8007dbe:	e687      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007dc0:	000f0030 	.word	0x000f0030
 8007dc4:	00010054 	.word	0x00010054
 8007dc8:	00010058 	.word	0x00010058
 8007dcc:	0001005c 	.word	0x0001005c
 8007dd0:	00010060 	.word	0x00010060
 8007dd4:	00010018 	.word	0x00010018
 8007dd8:	0001001c 	.word	0x0001001c
 8007ddc:	00010014 	.word	0x00010014
 8007de0:	00110004 	.word	0x00110004
 8007de4:	00010008 	.word	0x00010008
 8007de8:	2200      	movs	r2, #0
 8007dea:	4611      	mov	r1, r2
 8007dec:	f7fd fdf2 	bl	80059d4 <dwt_read32bitoffsetreg>
 8007df0:	68b2      	ldr	r2, [r6, #8]
 8007df2:	6813      	ldr	r3, [r2, #0]
 8007df4:	4043      	eors	r3, r0
 8007df6:	6852      	ldr	r2, [r2, #4]
 8007df8:	4213      	tst	r3, r2
 8007dfa:	bf14      	ite	ne
 8007dfc:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8007e00:	2500      	moveq	r5, #0
 8007e02:	e665      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007e04:	2c00      	cmp	r4, #0
 8007e06:	f001 83bc 	beq.w	8009582 <dwt_ioctl+0x1c06>
 8007e0a:	7821      	ldrb	r1, [r4, #0]
 8007e0c:	f7ff f8b4 	bl	8006f78 <ull_configciadiag>
 8007e10:	2500      	movs	r5, #0
 8007e12:	e65d      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007e14:	b93a      	cbnz	r2, 8007e26 <dwt_ioctl+0x4aa>
 8007e16:	2200      	movs	r2, #0
 8007e18:	9200      	str	r2, [sp, #0]
 8007e1a:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8007e1e:	49ae      	ldr	r1, [pc, #696]	; (80080d8 <dwt_ioctl+0x75c>)
 8007e20:	f7ff fa48 	bl	80072b4 <dwt_modify16bitoffsetreg>
 8007e24:	e654      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007e26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e2a:	9300      	str	r3, [sp, #0]
 8007e2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007e30:	2200      	movs	r2, #0
 8007e32:	49a9      	ldr	r1, [pc, #676]	; (80080d8 <dwt_ioctl+0x75c>)
 8007e34:	f7ff fa3e 	bl	80072b4 <dwt_modify16bitoffsetreg>
 8007e38:	2500      	movs	r5, #0
 8007e3a:	e649      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007e3c:	f002 0201 	and.w	r2, r2, #1
 8007e40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007e44:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8007e48:	2a00      	cmp	r2, #0
 8007e4a:	bf08      	it	eq
 8007e4c:	460b      	moveq	r3, r1
 8007e4e:	02d2      	lsls	r2, r2, #11
 8007e50:	f015 0f02 	tst.w	r5, #2
 8007e54:	bf12      	itee	ne
 8007e56:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8007e5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e5e:	b29b      	uxtheq	r3, r3
 8007e60:	9200      	str	r2, [sp, #0]
 8007e62:	2200      	movs	r2, #0
 8007e64:	499c      	ldr	r1, [pc, #624]	; (80080d8 <dwt_ioctl+0x75c>)
 8007e66:	f7ff fa25 	bl	80072b4 <dwt_modify16bitoffsetreg>
 8007e6a:	2500      	movs	r5, #0
 8007e6c:	e630      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007e6e:	b92a      	cbnz	r2, 8007e7c <dwt_ioctl+0x500>
 8007e70:	4b9a      	ldr	r3, [pc, #616]	; (80080dc <dwt_ioctl+0x760>)
 8007e72:	2202      	movs	r2, #2
 8007e74:	499a      	ldr	r1, [pc, #616]	; (80080e0 <dwt_ioctl+0x764>)
 8007e76:	f7fe faef 	bl	8006458 <dwt_write32bitoffsetreg>
 8007e7a:	e629      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007e7c:	4b99      	ldr	r3, [pc, #612]	; (80080e4 <dwt_ioctl+0x768>)
 8007e7e:	2202      	movs	r2, #2
 8007e80:	4997      	ldr	r1, [pc, #604]	; (80080e0 <dwt_ioctl+0x764>)
 8007e82:	f7fe fae9 	bl	8006458 <dwt_write32bitoffsetreg>
 8007e86:	2500      	movs	r5, #0
 8007e88:	e622      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007e8a:	4611      	mov	r1, r2
 8007e8c:	f7fe fc96 	bl	80067bc <ull_setlnapamode>
 8007e90:	2500      	movs	r5, #0
 8007e92:	e61d      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007e94:	2c00      	cmp	r4, #0
 8007e96:	f001 8377 	beq.w	8009588 <dwt_ioctl+0x1c0c>
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	4992      	ldr	r1, [pc, #584]	; (80080e8 <dwt_ioctl+0x76c>)
 8007e9e:	f7fd fdc1 	bl	8005a24 <dwt_read8bitoffsetreg>
 8007ea2:	7020      	strb	r0, [r4, #0]
 8007ea4:	2500      	movs	r5, #0
 8007ea6:	e613      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007ea8:	4621      	mov	r1, r4
 8007eaa:	f7fe fca9 	bl	8006800 <ull_configurestskey>
 8007eae:	2500      	movs	r5, #0
 8007eb0:	e60e      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007eb2:	4621      	mov	r1, r4
 8007eb4:	f7fe fcc8 	bl	8006848 <ull_configurestsiv>
 8007eb8:	2500      	movs	r5, #0
 8007eba:	e609      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	9300      	str	r3, [sp, #0]
 8007ec0:	23ff      	movs	r3, #255	; 0xff
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	4989      	ldr	r1, [pc, #548]	; (80080ec <dwt_ioctl+0x770>)
 8007ec6:	f7ff f843 	bl	8006f50 <dwt_modify8bitoffsetreg>
 8007eca:	2500      	movs	r5, #0
 8007ecc:	e600      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007ece:	4611      	mov	r1, r2
 8007ed0:	f7fe fcde 	bl	8006890 <ull_configmrxlut>
 8007ed4:	2500      	movs	r5, #0
 8007ed6:	e5fb      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007ed8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007eda:	7a1b      	ldrb	r3, [r3, #8]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d137      	bne.n	8007f50 <dwt_ioctl+0x5d4>
 8007ee0:	2314      	movs	r3, #20
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	4982      	ldr	r1, [pc, #520]	; (80080f0 <dwt_ioctl+0x774>)
 8007ee6:	4630      	mov	r0, r6
 8007ee8:	f7fe f963 	bl	80061b2 <dwt_write8bitoffsetreg>
 8007eec:	2318      	movs	r3, #24
 8007eee:	2200      	movs	r2, #0
 8007ef0:	4980      	ldr	r1, [pc, #512]	; (80080f4 <dwt_ioctl+0x778>)
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	f7fe fab0 	bl	8006458 <dwt_write32bitoffsetreg>
 8007ef8:	23e8      	movs	r3, #232	; 0xe8
 8007efa:	2200      	movs	r2, #0
 8007efc:	497e      	ldr	r1, [pc, #504]	; (80080f8 <dwt_ioctl+0x77c>)
 8007efe:	4630      	mov	r0, r6
 8007f00:	f7fe faaa 	bl	8006458 <dwt_write32bitoffsetreg>
 8007f04:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8007f06:	8a5b      	ldrh	r3, [r3, #18]
 8007f08:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007f0c:	2b20      	cmp	r3, #32
 8007f0e:	d022      	beq.n	8007f56 <dwt_ioctl+0x5da>
 8007f10:	2b60      	cmp	r3, #96	; 0x60
 8007f12:	d02b      	beq.n	8007f6c <dwt_ioctl+0x5f0>
 8007f14:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8007f16:	7e1b      	ldrb	r3, [r3, #24]
 8007f18:	085b      	lsrs	r3, r3, #1
 8007f1a:	d032      	beq.n	8007f82 <dwt_ioctl+0x606>
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	4977      	ldr	r1, [pc, #476]	; (80080fc <dwt_ioctl+0x780>)
 8007f20:	4630      	mov	r0, r6
 8007f22:	f7fd fd6d 	bl	8005a00 <dwt_read16bitoffsetreg>
 8007f26:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 8007f2a:	3b09      	subs	r3, #9
 8007f2c:	2b0f      	cmp	r3, #15
 8007f2e:	f201 832e 	bhi.w	800958e <dwt_ioctl+0x1c12>
 8007f32:	f000 0001 	and.w	r0, r0, #1
 8007f36:	2800      	cmp	r0, #0
 8007f38:	bf0c      	ite	eq
 8007f3a:	2105      	moveq	r1, #5
 8007f3c:	2109      	movne	r1, #9
 8007f3e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8007f40:	7a5b      	ldrb	r3, [r3, #9]
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d029      	beq.n	8007f9a <dwt_ioctl+0x61e>
 8007f46:	4630      	mov	r0, r6
 8007f48:	f7fe fca2 	bl	8006890 <ull_configmrxlut>
 8007f4c:	2500      	movs	r5, #0
 8007f4e:	e5bf      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007f50:	f7ff f9ca 	bl	80072e8 <_dwt_prog_ldo_and_bias_tune>
 8007f54:	e7c4      	b.n	8007ee0 <dwt_ioctl+0x564>
 8007f56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f5a:	9300      	str	r3, [sp, #0]
 8007f5c:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 8007f60:	2200      	movs	r2, #0
 8007f62:	4967      	ldr	r1, [pc, #412]	; (8008100 <dwt_ioctl+0x784>)
 8007f64:	4630      	mov	r0, r6
 8007f66:	f7fe fe09 	bl	8006b7c <dwt_modify32bitoffsetreg>
 8007f6a:	e7d3      	b.n	8007f14 <dwt_ioctl+0x598>
 8007f6c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007f70:	9300      	str	r3, [sp, #0]
 8007f72:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 8007f76:	2200      	movs	r2, #0
 8007f78:	4961      	ldr	r1, [pc, #388]	; (8008100 <dwt_ioctl+0x784>)
 8007f7a:	4630      	mov	r0, r6
 8007f7c:	f7fe fdfe 	bl	8006b7c <dwt_modify32bitoffsetreg>
 8007f80:	e7c8      	b.n	8007f14 <dwt_ioctl+0x598>
 8007f82:	2301      	movs	r3, #1
 8007f84:	2200      	movs	r2, #0
 8007f86:	495f      	ldr	r1, [pc, #380]	; (8008104 <dwt_ioctl+0x788>)
 8007f88:	4630      	mov	r0, r6
 8007f8a:	f7fe f912 	bl	80061b2 <dwt_write8bitoffsetreg>
 8007f8e:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8007f90:	7e13      	ldrb	r3, [r2, #24]
 8007f92:	f043 0302 	orr.w	r3, r3, #2
 8007f96:	7613      	strb	r3, [r2, #24]
 8007f98:	e7c0      	b.n	8007f1c <dwt_ioctl+0x5a0>
 8007f9a:	4630      	mov	r0, r6
 8007f9c:	f7fe fe12 	bl	8006bc4 <_dwt_kick_dgc_on_wakeup>
 8007fa0:	2500      	movs	r5, #0
 8007fa2:	e595      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007fa4:	2c00      	cmp	r4, #0
 8007fa6:	f001 82f5 	beq.w	8009594 <dwt_ioctl+0x1c18>
 8007faa:	7823      	ldrb	r3, [r4, #0]
 8007fac:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8007fae:	75d3      	strb	r3, [r2, #23]
 8007fb0:	031b      	lsls	r3, r3, #12
 8007fb2:	f403 4330 	and.w	r3, r3, #45056	; 0xb000
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	f644 73ff 	movw	r3, #20479	; 0x4fff
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	2110      	movs	r1, #16
 8007fc0:	f7ff f978 	bl	80072b4 <dwt_modify16bitoffsetreg>
 8007fc4:	2500      	movs	r5, #0
 8007fc6:	e583      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007fc8:	2c00      	cmp	r4, #0
 8007fca:	f001 82e6 	beq.w	800959a <dwt_ioctl+0x1c1e>
 8007fce:	8823      	ldrh	r3, [r4, #0]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8007fd6:	f7fe f93e 	bl	8006256 <dwt_write16bitoffsetreg>
 8007fda:	2500      	movs	r5, #0
 8007fdc:	e578      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007fde:	2c00      	cmp	r4, #0
 8007fe0:	f001 82de 	beq.w	80095a0 <dwt_ioctl+0x1c24>
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8007fea:	f7fd fd09 	bl	8005a00 <dwt_read16bitoffsetreg>
 8007fee:	8020      	strh	r0, [r4, #0]
 8007ff0:	2500      	movs	r5, #0
 8007ff2:	e56d      	b.n	8007ad0 <dwt_ioctl+0x154>
 8007ff4:	2c00      	cmp	r4, #0
 8007ff6:	f001 82d6 	beq.w	80095a6 <dwt_ioctl+0x1c2a>
 8007ffa:	8823      	ldrh	r3, [r4, #0]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	4942      	ldr	r1, [pc, #264]	; (8008108 <dwt_ioctl+0x78c>)
 8008000:	f7fe f929 	bl	8006256 <dwt_write16bitoffsetreg>
 8008004:	2500      	movs	r5, #0
 8008006:	e563      	b.n	8007ad0 <dwt_ioctl+0x154>
 8008008:	2c00      	cmp	r4, #0
 800800a:	f001 82cf 	beq.w	80095ac <dwt_ioctl+0x1c30>
 800800e:	2200      	movs	r2, #0
 8008010:	493d      	ldr	r1, [pc, #244]	; (8008108 <dwt_ioctl+0x78c>)
 8008012:	f7fd fcf5 	bl	8005a00 <dwt_read16bitoffsetreg>
 8008016:	8020      	strh	r0, [r4, #0]
 8008018:	2500      	movs	r5, #0
 800801a:	e559      	b.n	8007ad0 <dwt_ioctl+0x154>
 800801c:	2c00      	cmp	r4, #0
 800801e:	f001 82c8 	beq.w	80095b2 <dwt_ioctl+0x1c36>
 8008022:	88a3      	ldrh	r3, [r4, #4]
 8008024:	88e2      	ldrh	r2, [r4, #6]
 8008026:	6821      	ldr	r1, [r4, #0]
 8008028:	9100      	str	r1, [sp, #0]
 800802a:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800802e:	f7fe f8b5 	bl	800619c <dwt_writetodevice>
 8008032:	2500      	movs	r5, #0
 8008034:	e54c      	b.n	8007ad0 <dwt_ioctl+0x154>
 8008036:	2c00      	cmp	r4, #0
 8008038:	f001 82be 	beq.w	80095b8 <dwt_ioctl+0x1c3c>
 800803c:	88a3      	ldrh	r3, [r4, #4]
 800803e:	88e2      	ldrh	r2, [r4, #6]
 8008040:	6821      	ldr	r1, [r4, #0]
 8008042:	9100      	str	r1, [sp, #0]
 8008044:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 8008048:	f7fd fcba 	bl	80059c0 <dwt_readfromdevice>
 800804c:	2500      	movs	r5, #0
 800804e:	e53f      	b.n	8007ad0 <dwt_ioctl+0x154>
 8008050:	2c00      	cmp	r4, #0
 8008052:	f001 82b4 	beq.w	80095be <dwt_ioctl+0x1c42>
 8008056:	88e3      	ldrh	r3, [r4, #6]
 8008058:	88a2      	ldrh	r2, [r4, #4]
 800805a:	6821      	ldr	r1, [r4, #0]
 800805c:	f7fe fcc2 	bl	80069e4 <ull_readrxdata>
 8008060:	2500      	movs	r5, #0
 8008062:	e535      	b.n	8007ad0 <dwt_ioctl+0x154>
 8008064:	2c00      	cmp	r4, #0
 8008066:	f001 82ad 	beq.w	80095c4 <dwt_ioctl+0x1c48>
 800806a:	88e3      	ldrh	r3, [r4, #6]
 800806c:	6822      	ldr	r2, [r4, #0]
 800806e:	88a1      	ldrh	r1, [r4, #4]
 8008070:	f7fe fd52 	bl	8006b18 <ull_writetxdata>
 8008074:	2500      	movs	r5, #0
 8008076:	e52b      	b.n	8007ad0 <dwt_ioctl+0x154>
 8008078:	4611      	mov	r1, r2
 800807a:	f7fe fce9 	bl	8006a50 <ull_rxenable>
 800807e:	2500      	movs	r5, #0
 8008080:	e526      	b.n	8007ad0 <dwt_ioctl+0x154>
 8008082:	2c00      	cmp	r4, #0
 8008084:	f001 82a1 	beq.w	80095ca <dwt_ioctl+0x1c4e>
 8008088:	7923      	ldrb	r3, [r4, #4]
 800808a:	8862      	ldrh	r2, [r4, #2]
 800808c:	8821      	ldrh	r1, [r4, #0]
 800808e:	f7fe ff2d 	bl	8006eec <ull_writetxfctrl>
 8008092:	2500      	movs	r5, #0
 8008094:	e51c      	b.n	8007ad0 <dwt_ioctl+0x154>
 8008096:	2c00      	cmp	r4, #0
 8008098:	f001 829a 	beq.w	80095d0 <dwt_ioctl+0x1c54>
 800809c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800809e:	7bdb      	ldrb	r3, [r3, #15]
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d00c      	beq.n	80080be <dwt_ioctl+0x742>
 80080a4:	2b03      	cmp	r3, #3
 80080a6:	d110      	bne.n	80080ca <dwt_ioctl+0x74e>
 80080a8:	220c      	movs	r2, #12
 80080aa:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80080ae:	f7fd fca7 	bl	8005a00 <dwt_read16bitoffsetreg>
 80080b2:	b200      	sxth	r0, r0
 80080b4:	f340 030c 	sbfx	r3, r0, #0, #13
 80080b8:	8023      	strh	r3, [r4, #0]
 80080ba:	2500      	movs	r5, #0
 80080bc:	e508      	b.n	8007ad0 <dwt_ioctl+0x154>
 80080be:	2200      	movs	r2, #0
 80080c0:	4912      	ldr	r1, [pc, #72]	; (800810c <dwt_ioctl+0x790>)
 80080c2:	f7fd fc9d 	bl	8005a00 <dwt_read16bitoffsetreg>
 80080c6:	b200      	sxth	r0, r0
 80080c8:	e7f4      	b.n	80080b4 <dwt_ioctl+0x738>
 80080ca:	2200      	movs	r2, #0
 80080cc:	4910      	ldr	r1, [pc, #64]	; (8008110 <dwt_ioctl+0x794>)
 80080ce:	f7fd fc97 	bl	8005a00 <dwt_read16bitoffsetreg>
 80080d2:	b200      	sxth	r0, r0
 80080d4:	e7ee      	b.n	80080b4 <dwt_ioctl+0x738>
 80080d6:	bf00      	nop
 80080d8:	00110008 	.word	0x00110008
 80080dc:	00d20874 	.word	0x00d20874
 80080e0:	00110010 	.word	0x00110010
 80080e4:	04d28874 	.word	0x04d28874
 80080e8:	0007001c 	.word	0x0007001c
 80080ec:	00020004 	.word	0x00020004
 80080f0:	00070050 	.word	0x00070050
 80080f4:	001f000c 	.word	0x001f000c
 80080f8:	001f0010 	.word	0x001f0010
 80080fc:	00010014 	.word	0x00010014
 8008100:	000b0008 	.word	0x000b0008
 8008104:	00010028 	.word	0x00010028
 8008108:	00010004 	.word	0x00010004
 800810c:	0018000c 	.word	0x0018000c
 8008110:	000c0020 	.word	0x000c0020
 8008114:	2c00      	cmp	r4, #0
 8008116:	f001 825e 	beq.w	80095d6 <dwt_ioctl+0x1c5a>
 800811a:	ab0c      	add	r3, sp, #48	; 0x30
 800811c:	9300      	str	r3, [sp, #0]
 800811e:	2303      	movs	r3, #3
 8008120:	2200      	movs	r2, #0
 8008122:	49bb      	ldr	r1, [pc, #748]	; (8008410 <dwt_ioctl+0xa94>)
 8008124:	f7fd fc4c 	bl	80059c0 <dwt_readfromdevice>
 8008128:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800812c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8008130:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8008134:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8008138:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800813c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008140:	bf1c      	itt	ne
 8008142:	ea6f 3303 	mvnne.w	r3, r3, lsl #12
 8008146:	ea6f 3313 	mvnne.w	r3, r3, lsr #12
 800814a:	6023      	str	r3, [r4, #0]
 800814c:	2500      	movs	r5, #0
 800814e:	e4bf      	b.n	8007ad0 <dwt_ioctl+0x154>
 8008150:	f7fe f892 	bl	8006278 <ull_clearaonconfig>
 8008154:	2500      	movs	r5, #0
 8008156:	e4bb      	b.n	8007ad0 <dwt_ioctl+0x154>
 8008158:	2c00      	cmp	r4, #0
 800815a:	f001 823f 	beq.w	80095dc <dwt_ioctl+0x1c60>
 800815e:	8861      	ldrh	r1, [r4, #2]
 8008160:	f7fe ff40 	bl	8006fe4 <ull_calcbandwidthadj>
 8008164:	7020      	strb	r0, [r4, #0]
 8008166:	2500      	movs	r5, #0
 8008168:	e4b2      	b.n	8007ad0 <dwt_ioctl+0x154>
 800816a:	4621      	mov	r1, r4
 800816c:	f7fd fc68 	bl	8005a40 <ull_readdiagnostics>
 8008170:	2500      	movs	r5, #0
 8008172:	e4ad      	b.n	8007ad0 <dwt_ioctl+0x154>
 8008174:	2c00      	cmp	r4, #0
 8008176:	f001 8234 	beq.w	80095e2 <dwt_ioctl+0x1c66>
 800817a:	2201      	movs	r2, #1
 800817c:	2174      	movs	r1, #116	; 0x74
 800817e:	f7fd fc29 	bl	80059d4 <dwt_read32bitoffsetreg>
 8008182:	6020      	str	r0, [r4, #0]
 8008184:	2500      	movs	r5, #0
 8008186:	e4a3      	b.n	8007ad0 <dwt_ioctl+0x154>
 8008188:	2c00      	cmp	r4, #0
 800818a:	f001 822d 	beq.w	80095e8 <dwt_ioctl+0x1c6c>
 800818e:	2200      	movs	r2, #0
 8008190:	2174      	movs	r1, #116	; 0x74
 8008192:	f7fd fc1f 	bl	80059d4 <dwt_read32bitoffsetreg>
 8008196:	6020      	str	r0, [r4, #0]
 8008198:	2500      	movs	r5, #0
 800819a:	e499      	b.n	8007ad0 <dwt_ioctl+0x154>
 800819c:	9400      	str	r4, [sp, #0]
 800819e:	2305      	movs	r3, #5
 80081a0:	2200      	movs	r2, #0
 80081a2:	2174      	movs	r1, #116	; 0x74
 80081a4:	f7fd fc0c 	bl	80059c0 <dwt_readfromdevice>
 80081a8:	2500      	movs	r5, #0
 80081aa:	e491      	b.n	8007ad0 <dwt_ioctl+0x154>
 80081ac:	2c00      	cmp	r4, #0
 80081ae:	f001 821e 	beq.w	80095ee <dwt_ioctl+0x1c72>
 80081b2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80081b4:	7bdb      	ldrb	r3, [r3, #15]
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d014      	beq.n	80081e4 <dwt_ioctl+0x868>
 80081ba:	2b03      	cmp	r3, #3
 80081bc:	d119      	bne.n	80081f2 <dwt_ioctl+0x876>
 80081be:	2216      	movs	r2, #22
 80081c0:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80081c4:	f7fd fc1c 	bl	8005a00 <dwt_read16bitoffsetreg>
 80081c8:	f3c0 000d 	ubfx	r0, r0, #0, #14
 80081cc:	b283      	uxth	r3, r0
 80081ce:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80081d2:	d004      	beq.n	80081de <dwt_ioctl+0x862>
 80081d4:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 80081d8:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 80081dc:	b218      	sxth	r0, r3
 80081de:	8020      	strh	r0, [r4, #0]
 80081e0:	2500      	movs	r5, #0
 80081e2:	e475      	b.n	8007ad0 <dwt_ioctl+0x154>
 80081e4:	2202      	movs	r2, #2
 80081e6:	498b      	ldr	r1, [pc, #556]	; (8008414 <dwt_ioctl+0xa98>)
 80081e8:	f7fd fc0a 	bl	8005a00 <dwt_read16bitoffsetreg>
 80081ec:	f3c0 000d 	ubfx	r0, r0, #0, #14
 80081f0:	e7ec      	b.n	80081cc <dwt_ioctl+0x850>
 80081f2:	2202      	movs	r2, #2
 80081f4:	4988      	ldr	r1, [pc, #544]	; (8008418 <dwt_ioctl+0xa9c>)
 80081f6:	f7fd fc03 	bl	8005a00 <dwt_read16bitoffsetreg>
 80081fa:	f3c0 000d 	ubfx	r0, r0, #0, #14
 80081fe:	e7e5      	b.n	80081cc <dwt_ioctl+0x850>
 8008200:	9400      	str	r4, [sp, #0]
 8008202:	2306      	movs	r3, #6
 8008204:	2200      	movs	r2, #0
 8008206:	4985      	ldr	r1, [pc, #532]	; (800841c <dwt_ioctl+0xaa0>)
 8008208:	f7fd fbda 	bl	80059c0 <dwt_readfromdevice>
 800820c:	7963      	ldrb	r3, [r4, #5]
 800820e:	f003 0301 	and.w	r3, r3, #1
 8008212:	7163      	strb	r3, [r4, #5]
 8008214:	2500      	movs	r5, #0
 8008216:	e45b      	b.n	8007ad0 <dwt_ioctl+0x154>
 8008218:	2c00      	cmp	r4, #0
 800821a:	f001 81eb 	beq.w	80095f4 <dwt_ioctl+0x1c78>
 800821e:	2201      	movs	r2, #1
 8008220:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8008224:	f7fd fbfe 	bl	8005a24 <dwt_read8bitoffsetreg>
 8008228:	7020      	strb	r0, [r4, #0]
 800822a:	2500      	movs	r5, #0
 800822c:	e450      	b.n	8007ad0 <dwt_ioctl+0x154>
 800822e:	2c00      	cmp	r4, #0
 8008230:	f001 81e3 	beq.w	80095fa <dwt_ioctl+0x1c7e>
 8008234:	2200      	movs	r2, #0
 8008236:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800823a:	f7fd fbf3 	bl	8005a24 <dwt_read8bitoffsetreg>
 800823e:	7020      	strb	r0, [r4, #0]
 8008240:	2500      	movs	r5, #0
 8008242:	e445      	b.n	8007ad0 <dwt_ioctl+0x154>
 8008244:	2c00      	cmp	r4, #0
 8008246:	f001 81db 	beq.w	8009600 <dwt_ioctl+0x1c84>
 800824a:	88a2      	ldrh	r2, [r4, #4]
 800824c:	6821      	ldr	r1, [r4, #0]
 800824e:	f7fe fd1d 	bl	8006c8c <_dwt_otpprogword32>
 8008252:	2500      	movs	r5, #0
 8008254:	e43c      	b.n	8007ad0 <dwt_ioctl+0x154>
 8008256:	2c00      	cmp	r4, #0
 8008258:	f001 81d5 	beq.w	8009606 <dwt_ioctl+0x1c8a>
 800825c:	6825      	ldr	r5, [r4, #0]
 800825e:	88a4      	ldrh	r4, [r4, #4]
 8008260:	4622      	mov	r2, r4
 8008262:	4629      	mov	r1, r5
 8008264:	f7fe fd12 	bl	8006c8c <_dwt_otpprogword32>
 8008268:	4621      	mov	r1, r4
 800826a:	4630      	mov	r0, r6
 800826c:	f7fe f84e 	bl	800630c <_dwt_otpread>
 8008270:	1a2d      	subs	r5, r5, r0
 8008272:	bf18      	it	ne
 8008274:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8008278:	e42a      	b.n	8007ad0 <dwt_ioctl+0x154>
 800827a:	2a02      	cmp	r2, #2
 800827c:	d00e      	beq.n	800829c <dwt_ioctl+0x920>
 800827e:	4c68      	ldr	r4, [pc, #416]	; (8008420 <dwt_ioctl+0xaa4>)
 8008280:	2300      	movs	r3, #0
 8008282:	461a      	mov	r2, r3
 8008284:	4621      	mov	r1, r4
 8008286:	4630      	mov	r0, r6
 8008288:	f7fd ff93 	bl	80061b2 <dwt_write8bitoffsetreg>
 800828c:	2302      	movs	r3, #2
 800828e:	2200      	movs	r2, #0
 8008290:	4621      	mov	r1, r4
 8008292:	4630      	mov	r0, r6
 8008294:	f7fd ff8d 	bl	80061b2 <dwt_write8bitoffsetreg>
 8008298:	2500      	movs	r5, #0
 800829a:	e419      	b.n	8007ad0 <dwt_ioctl+0x154>
 800829c:	2300      	movs	r3, #0
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	23fe      	movs	r3, #254	; 0xfe
 80082a2:	2201      	movs	r2, #1
 80082a4:	495f      	ldr	r1, [pc, #380]	; (8008424 <dwt_ioctl+0xaa8>)
 80082a6:	f7fe fe53 	bl	8006f50 <dwt_modify8bitoffsetreg>
 80082aa:	e7e8      	b.n	800827e <dwt_ioctl+0x902>
 80082ac:	2c00      	cmp	r4, #0
 80082ae:	f001 81ad 	beq.w	800960c <dwt_ioctl+0x1c90>
 80082b2:	8824      	ldrh	r4, [r4, #0]
 80082b4:	b2e2      	uxtb	r2, r4
 80082b6:	f44f 7181 	mov.w	r1, #258	; 0x102
 80082ba:	f7fe f869 	bl	8006390 <ull_aon_write>
 80082be:	0a22      	lsrs	r2, r4, #8
 80082c0:	f240 1103 	movw	r1, #259	; 0x103
 80082c4:	4630      	mov	r0, r6
 80082c6:	f7fe f863 	bl	8006390 <ull_aon_write>
 80082ca:	2500      	movs	r5, #0
 80082cc:	e400      	b.n	8007ad0 <dwt_ioctl+0x154>
 80082ce:	2c00      	cmp	r4, #0
 80082d0:	f001 819f 	beq.w	8009612 <dwt_ioctl+0x1c96>
 80082d4:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8008430 <dwt_ioctl+0xab4>
 80082d8:	2310      	movs	r3, #16
 80082da:	9300      	str	r3, [sp, #0]
 80082dc:	23ff      	movs	r3, #255	; 0xff
 80082de:	2200      	movs	r2, #0
 80082e0:	4641      	mov	r1, r8
 80082e2:	f7fe fe35 	bl	8006f50 <dwt_modify8bitoffsetreg>
 80082e6:	f44f 7182 	mov.w	r1, #260	; 0x104
 80082ea:	4630      	mov	r0, r6
 80082ec:	f7fe f830 	bl	8006350 <ull_aon_read>
 80082f0:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 80082f4:	462a      	mov	r2, r5
 80082f6:	f44f 7182 	mov.w	r1, #260	; 0x104
 80082fa:	4630      	mov	r0, r6
 80082fc:	f7fe f848 	bl	8006390 <ull_aon_write>
 8008300:	f045 0204 	orr.w	r2, r5, #4
 8008304:	f44f 7182 	mov.w	r1, #260	; 0x104
 8008308:	4630      	mov	r0, r6
 800830a:	f7fe f841 	bl	8006390 <ull_aon_write>
 800830e:	2002      	movs	r0, #2
 8008310:	f7f9 f928 	bl	8001564 <deca_sleep>
 8008314:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8008318:	4630      	mov	r0, r6
 800831a:	f7fe f819 	bl	8006350 <ull_aon_read>
 800831e:	4607      	mov	r7, r0
 8008320:	f240 110f 	movw	r1, #271	; 0x10f
 8008324:	4630      	mov	r0, r6
 8008326:	f7fe f813 	bl	8006350 <ull_aon_read>
 800832a:	4681      	mov	r9, r0
 800832c:	462a      	mov	r2, r5
 800832e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8008332:	4630      	mov	r0, r6
 8008334:	f7fe f82c 	bl	8006390 <ull_aon_write>
 8008338:	2500      	movs	r5, #0
 800833a:	9500      	str	r5, [sp, #0]
 800833c:	23ef      	movs	r3, #239	; 0xef
 800833e:	462a      	mov	r2, r5
 8008340:	4641      	mov	r1, r8
 8008342:	4630      	mov	r0, r6
 8008344:	f7fe fe04 	bl	8006f50 <dwt_modify8bitoffsetreg>
 8008348:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 800834c:	8027      	strh	r7, [r4, #0]
 800834e:	f7ff bbbf 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008352:	2c00      	cmp	r4, #0
 8008354:	f001 8160 	beq.w	8009618 <dwt_ioctl+0x1c9c>
 8008358:	78a2      	ldrb	r2, [r4, #2]
 800835a:	8821      	ldrh	r1, [r4, #0]
 800835c:	f7fe f840 	bl	80063e0 <ull_configuresleep>
 8008360:	2500      	movs	r5, #0
 8008362:	f7ff bbb5 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008366:	f7fd ff87 	bl	8006278 <ull_clearaonconfig>
 800836a:	2001      	movs	r0, #1
 800836c:	f7f9 f8fa 	bl	8001564 <deca_sleep>
 8008370:	2303      	movs	r3, #3
 8008372:	9300      	str	r3, [sp, #0]
 8008374:	23ff      	movs	r3, #255	; 0xff
 8008376:	2200      	movs	r2, #0
 8008378:	492b      	ldr	r1, [pc, #172]	; (8008428 <dwt_ioctl+0xaac>)
 800837a:	4630      	mov	r0, r6
 800837c:	f7fe fde8 	bl	8006f50 <dwt_modify8bitoffsetreg>
 8008380:	2300      	movs	r3, #0
 8008382:	461a      	mov	r2, r3
 8008384:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
 8008388:	4630      	mov	r0, r6
 800838a:	f7fd ff12 	bl	80061b2 <dwt_write8bitoffsetreg>
 800838e:	2001      	movs	r0, #1
 8008390:	f7f9 f8e8 	bl	8001564 <deca_sleep>
 8008394:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8008396:	2500      	movs	r5, #0
 8008398:	73dd      	strb	r5, [r3, #15]
 800839a:	2202      	movs	r2, #2
 800839c:	825a      	strh	r2, [r3, #18]
 800839e:	759d      	strb	r5, [r3, #22]
 80083a0:	75dd      	strb	r5, [r3, #23]
 80083a2:	741d      	strb	r5, [r3, #16]
 80083a4:	f7ff bb94 	b.w	8007ad0 <dwt_ioctl+0x154>
 80083a8:	2c00      	cmp	r4, #0
 80083aa:	f001 8138 	beq.w	800961e <dwt_ioctl+0x1ca2>
 80083ae:	7823      	ldrb	r3, [r4, #0]
 80083b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083b4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80083b6:	7393      	strb	r3, [r2, #14]
 80083b8:	2200      	movs	r2, #0
 80083ba:	491c      	ldr	r1, [pc, #112]	; (800842c <dwt_ioctl+0xab0>)
 80083bc:	f7fd fef9 	bl	80061b2 <dwt_write8bitoffsetreg>
 80083c0:	2500      	movs	r5, #0
 80083c2:	f7ff bb85 	b.w	8007ad0 <dwt_ioctl+0x154>
 80083c6:	2c00      	cmp	r4, #0
 80083c8:	f001 812c 	beq.w	8009624 <dwt_ioctl+0x1ca8>
 80083cc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80083ce:	7b9b      	ldrb	r3, [r3, #14]
 80083d0:	7023      	strb	r3, [r4, #0]
 80083d2:	2500      	movs	r5, #0
 80083d4:	f7ff bb7c 	b.w	8007ad0 <dwt_ioctl+0x154>
 80083d8:	2101      	movs	r1, #1
 80083da:	f7fe fc11 	bl	8006c00 <ull_enable_rf_tx>
 80083de:	4630      	mov	r0, r6
 80083e0:	f7fe fc42 	bl	8006c68 <ull_enable_rftx_blocks>
 80083e4:	2101      	movs	r1, #1
 80083e6:	4630      	mov	r0, r6
 80083e8:	f7fd ff66 	bl	80062b8 <ull_force_clocks>
 80083ec:	220f      	movs	r2, #15
 80083ee:	2101      	movs	r1, #1
 80083f0:	4630      	mov	r0, r6
 80083f2:	f7ff f86f 	bl	80074d4 <ull_repeated_cw>
 80083f6:	2500      	movs	r5, #0
 80083f8:	f7ff bb6a 	b.w	8007ad0 <dwt_ioctl+0x154>
 80083fc:	2c00      	cmp	r4, #0
 80083fe:	f001 8114 	beq.w	800962a <dwt_ioctl+0x1cae>
 8008402:	6862      	ldr	r2, [r4, #4]
 8008404:	6821      	ldr	r1, [r4, #0]
 8008406:	f7ff f865 	bl	80074d4 <ull_repeated_cw>
 800840a:	2500      	movs	r5, #0
 800840c:	f7ff bb60 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008410:	00060029 	.word	0x00060029
 8008414:	00180014 	.word	0x00180014
 8008418:	000c001c 	.word	0x000c001c
 800841c:	000c0018 	.word	0x000c0018
 8008420:	000a0004 	.word	0x000a0004
 8008424:	00110008 	.word	0x00110008
 8008428:	00110004 	.word	0x00110004
 800842c:	00090014 	.word	0x00090014
 8008430:	00070048 	.word	0x00070048
 8008434:	2c00      	cmp	r4, #0
 8008436:	f001 80fb 	beq.w	8009630 <dwt_ioctl+0x1cb4>
 800843a:	4dd6      	ldr	r5, [pc, #856]	; (8008794 <dwt_ioctl+0xe18>)
 800843c:	2200      	movs	r2, #0
 800843e:	4629      	mov	r1, r5
 8008440:	f7fd faf0 	bl	8005a24 <dwt_read8bitoffsetreg>
 8008444:	4680      	mov	r8, r0
 8008446:	2302      	movs	r3, #2
 8008448:	9300      	str	r3, [sp, #0]
 800844a:	23ff      	movs	r3, #255	; 0xff
 800844c:	2200      	movs	r2, #0
 800844e:	4629      	mov	r1, r5
 8008450:	4630      	mov	r0, r6
 8008452:	f7fe fd7d 	bl	8006f50 <dwt_modify8bitoffsetreg>
 8008456:	2304      	movs	r3, #4
 8008458:	2200      	movs	r2, #0
 800845a:	49cf      	ldr	r1, [pc, #828]	; (8008798 <dwt_ioctl+0xe1c>)
 800845c:	4630      	mov	r0, r6
 800845e:	f7fd fea8 	bl	80061b2 <dwt_write8bitoffsetreg>
 8008462:	2301      	movs	r3, #1
 8008464:	2200      	movs	r2, #0
 8008466:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800846a:	4630      	mov	r0, r6
 800846c:	f7fd fea1 	bl	80061b2 <dwt_write8bitoffsetreg>
 8008470:	4fca      	ldr	r7, [pc, #808]	; (800879c <dwt_ioctl+0xe20>)
 8008472:	2500      	movs	r5, #0
 8008474:	462a      	mov	r2, r5
 8008476:	4639      	mov	r1, r7
 8008478:	4630      	mov	r0, r6
 800847a:	f7fd fad3 	bl	8005a24 <dwt_read8bitoffsetreg>
 800847e:	f010 0f01 	tst.w	r0, #1
 8008482:	d0f7      	beq.n	8008474 <dwt_ioctl+0xaf8>
 8008484:	2200      	movs	r2, #0
 8008486:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800848a:	4630      	mov	r0, r6
 800848c:	f7fd fab8 	bl	8005a00 <dwt_read16bitoffsetreg>
 8008490:	4605      	mov	r5, r0
 8008492:	2300      	movs	r3, #0
 8008494:	461a      	mov	r2, r3
 8008496:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800849a:	4630      	mov	r0, r6
 800849c:	f7fd fe89 	bl	80061b2 <dwt_write8bitoffsetreg>
 80084a0:	2300      	movs	r3, #0
 80084a2:	461a      	mov	r2, r3
 80084a4:	49bc      	ldr	r1, [pc, #752]	; (8008798 <dwt_ioctl+0xe1c>)
 80084a6:	4630      	mov	r0, r6
 80084a8:	f7fd fe83 	bl	80061b2 <dwt_write8bitoffsetreg>
 80084ac:	4643      	mov	r3, r8
 80084ae:	2200      	movs	r2, #0
 80084b0:	49b8      	ldr	r1, [pc, #736]	; (8008794 <dwt_ioctl+0xe18>)
 80084b2:	4630      	mov	r0, r6
 80084b4:	f7fd fe7d 	bl	80061b2 <dwt_write8bitoffsetreg>
 80084b8:	8025      	strh	r5, [r4, #0]
 80084ba:	2500      	movs	r5, #0
 80084bc:	f7ff bb08 	b.w	8007ad0 <dwt_ioctl+0x154>
 80084c0:	2c00      	cmp	r4, #0
 80084c2:	f001 80b8 	beq.w	8009636 <dwt_ioctl+0x1cba>
 80084c6:	7923      	ldrb	r3, [r4, #4]
 80084c8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80084ca:	7ad2      	ldrb	r2, [r2, #11]
 80084cc:	1a9b      	subs	r3, r3, r2
 80084ce:	ee07 3a90 	vmov	s15, r3
 80084d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80084d6:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 80087a0 <dwt_ioctl+0xe24>
 80084da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80084de:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 80084e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80084e6:	edc4 7a00 	vstr	s15, [r4]
 80084ea:	2500      	movs	r5, #0
 80084ec:	f7ff baf0 	b.w	8007ad0 <dwt_ioctl+0x154>
 80084f0:	2c00      	cmp	r4, #0
 80084f2:	f001 80a3 	beq.w	800963c <dwt_ioctl+0x1cc0>
 80084f6:	7923      	ldrb	r3, [r4, #4]
 80084f8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80084fa:	7a92      	ldrb	r2, [r2, #10]
 80084fc:	1a9b      	subs	r3, r3, r2
 80084fe:	ee07 3a90 	vmov	s15, r3
 8008502:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008506:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 80087a4 <dwt_ioctl+0xe28>
 800850a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800850e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8008512:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008516:	eddf 6aa4 	vldr	s13, [pc, #656]	; 80087a8 <dwt_ioctl+0xe2c>
 800851a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800851e:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8008522:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008526:	edc4 7a00 	vstr	s15, [r4]
 800852a:	2500      	movs	r5, #0
 800852c:	f7ff bad0 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008530:	2c00      	cmp	r4, #0
 8008532:	f001 8086 	beq.w	8009642 <dwt_ioctl+0x1cc6>
 8008536:	6824      	ldr	r4, [r4, #0]
 8008538:	2101      	movs	r1, #1
 800853a:	f7fe fb61 	bl	8006c00 <ull_enable_rf_tx>
 800853e:	4630      	mov	r0, r6
 8008540:	f7fe fb92 	bl	8006c68 <ull_enable_rftx_blocks>
 8008544:	2101      	movs	r1, #1
 8008546:	4630      	mov	r0, r6
 8008548:	f7fd feb6 	bl	80062b8 <ull_force_clocks>
 800854c:	4621      	mov	r1, r4
 800854e:	4630      	mov	r0, r6
 8008550:	f7fe fda4 	bl	800709c <ull_repeated_frames>
 8008554:	2500      	movs	r5, #0
 8008556:	f7ff babb 	b.w	8007ad0 <dwt_ioctl+0x154>
 800855a:	2500      	movs	r5, #0
 800855c:	9500      	str	r5, [sp, #0]
 800855e:	23ef      	movs	r3, #239	; 0xef
 8008560:	462a      	mov	r2, r5
 8008562:	4992      	ldr	r1, [pc, #584]	; (80087ac <dwt_ioctl+0xe30>)
 8008564:	f7fe fcf4 	bl	8006f50 <dwt_modify8bitoffsetreg>
 8008568:	2105      	movs	r1, #5
 800856a:	4630      	mov	r0, r6
 800856c:	f7fd fea4 	bl	80062b8 <ull_force_clocks>
 8008570:	2101      	movs	r1, #1
 8008572:	4630      	mov	r0, r6
 8008574:	f7fe fa18 	bl	80069a8 <ull_disable_rf_tx>
 8008578:	4630      	mov	r0, r6
 800857a:	f7fe fa0b 	bl	8006994 <ull_disable_rftx_blocks>
 800857e:	f7ff baa7 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008582:	2500      	movs	r5, #0
 8008584:	9500      	str	r5, [sp, #0]
 8008586:	23ef      	movs	r3, #239	; 0xef
 8008588:	462a      	mov	r2, r5
 800858a:	4988      	ldr	r1, [pc, #544]	; (80087ac <dwt_ioctl+0xe30>)
 800858c:	f7fe fce0 	bl	8006f50 <dwt_modify8bitoffsetreg>
 8008590:	f7ff ba9e 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008594:	2c00      	cmp	r4, #0
 8008596:	f001 8057 	beq.w	8009648 <dwt_ioctl+0x1ccc>
 800859a:	6821      	ldr	r1, [r4, #0]
 800859c:	f7fe fd7e 	bl	800709c <ull_repeated_frames>
 80085a0:	2500      	movs	r5, #0
 80085a2:	f7ff ba95 	b.w	8007ad0 <dwt_ioctl+0x154>
 80085a6:	2200      	movs	r2, #0
 80085a8:	4981      	ldr	r1, [pc, #516]	; (80087b0 <dwt_ioctl+0xe34>)
 80085aa:	f7fd fa29 	bl	8005a00 <dwt_read16bitoffsetreg>
 80085ae:	f3c0 050b 	ubfx	r5, r0, #0, #12
 80085b2:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80085b6:	bf18      	it	ne
 80085b8:	f445 4570 	orrne.w	r5, r5, #61440	; 0xf000
 80085bc:	b22d      	sxth	r5, r5
 80085be:	8025      	strh	r5, [r4, #0]
 80085c0:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80085c2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80085c6:	1aed      	subs	r5, r5, r3
 80085c8:	f7ff ba82 	b.w	8007ad0 <dwt_ioctl+0x154>
 80085cc:	2c00      	cmp	r4, #0
 80085ce:	f001 806d 	beq.w	80096ac <dwt_ioctl+0x1d30>
 80085d2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80085d6:	7a23      	ldrb	r3, [r4, #8]
 80085d8:	f899 2013 	ldrb.w	r2, [r9, #19]
 80085dc:	2aff      	cmp	r2, #255	; 0xff
 80085de:	f000 813f 	beq.w	8008860 <dwt_ioctl+0xee4>
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d136      	bne.n	8008654 <dwt_ioctl+0xcd8>
 80085e6:	f8d9 3000 	ldr.w	r3, [r9]
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	230c      	movs	r3, #12
 80085ee:	2200      	movs	r2, #0
 80085f0:	4970      	ldr	r1, [pc, #448]	; (80087b4 <dwt_ioctl+0xe38>)
 80085f2:	f7fd fdd3 	bl	800619c <dwt_writetodevice>
 80085f6:	f899 300c 	ldrb.w	r3, [r9, #12]
 80085fa:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 80085fe:	18d1      	adds	r1, r2, r3
 8008600:	f899 2012 	ldrb.w	r2, [r9, #18]
 8008604:	2a00      	cmp	r2, #0
 8008606:	d15f      	bne.n	80086c8 <dwt_ioctl+0xd4c>
 8008608:	f899 0010 	ldrb.w	r0, [r9, #16]
 800860c:	2800      	cmp	r0, #0
 800860e:	bf0b      	itete	eq
 8008610:	227f      	moveq	r2, #127	; 0x7f
 8008612:	f44f 6280 	movne.w	r2, #1024	; 0x400
 8008616:	f44f 15b0 	moveq.w	r5, #1441792	; 0x160000
 800861a:	f44f 15a0 	movne.w	r5, #1310720	; 0x140000
 800861e:	f899 0013 	ldrb.w	r0, [r9, #19]
 8008622:	1a12      	subs	r2, r2, r0
 8008624:	3a02      	subs	r2, #2
 8008626:	4291      	cmp	r1, r2
 8008628:	f200 8120 	bhi.w	800886c <dwt_ioctl+0xef0>
 800862c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8008630:	9200      	str	r2, [sp, #0]
 8008632:	2200      	movs	r2, #0
 8008634:	4629      	mov	r1, r5
 8008636:	4630      	mov	r0, r6
 8008638:	f7fd fdb0 	bl	800619c <dwt_writetodevice>
 800863c:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8008640:	f899 200c 	ldrb.w	r2, [r9, #12]
 8008644:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8008648:	9100      	str	r1, [sp, #0]
 800864a:	4629      	mov	r1, r5
 800864c:	4630      	mov	r0, r6
 800864e:	f7fd fda5 	bl	800619c <dwt_writetodevice>
 8008652:	e04a      	b.n	80086ea <dwt_ioctl+0xd6e>
 8008654:	f8d9 3000 	ldr.w	r3, [r9]
 8008658:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 800865c:	7a9a      	ldrb	r2, [r3, #10]
 800865e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 8008662:	7a5a      	ldrb	r2, [r3, #9]
 8008664:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 8008668:	7a1a      	ldrb	r2, [r3, #8]
 800866a:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
 800866e:	79da      	ldrb	r2, [r3, #7]
 8008670:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 8008674:	799a      	ldrb	r2, [r3, #6]
 8008676:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 800867a:	795a      	ldrb	r2, [r3, #5]
 800867c:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
 8008680:	791a      	ldrb	r2, [r3, #4]
 8008682:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 8008686:	78da      	ldrb	r2, [r3, #3]
 8008688:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
 800868c:	789a      	ldrb	r2, [r3, #2]
 800868e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 8008692:	785a      	ldrb	r2, [r3, #1]
 8008694:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 8008698:	781a      	ldrb	r2, [r3, #0]
 800869a:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800869e:	2200      	movs	r2, #0
 80086a0:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 80086a4:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 80086a8:	0a09      	lsrs	r1, r1, #8
 80086aa:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
 80086ae:	7b19      	ldrb	r1, [r3, #12]
 80086b0:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
 80086b4:	7adb      	ldrb	r3, [r3, #11]
 80086b6:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 80086ba:	ab0c      	add	r3, sp, #48	; 0x30
 80086bc:	9300      	str	r3, [sp, #0]
 80086be:	2310      	movs	r3, #16
 80086c0:	493c      	ldr	r1, [pc, #240]	; (80087b4 <dwt_ioctl+0xe38>)
 80086c2:	f7fd fd6b 	bl	800619c <dwt_writetodevice>
 80086c6:	e796      	b.n	80085f6 <dwt_ioctl+0xc7a>
 80086c8:	2a01      	cmp	r2, #1
 80086ca:	f040 80cc 	bne.w	8008866 <dwt_ioctl+0xeea>
 80086ce:	f899 3011 	ldrb.w	r3, [r9, #17]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80086d8:	bf08      	it	eq
 80086da:	237f      	moveq	r3, #127	; 0x7f
 80086dc:	f899 2013 	ldrb.w	r2, [r9, #19]
 80086e0:	1a9b      	subs	r3, r3, r2
 80086e2:	3b02      	subs	r3, #2
 80086e4:	4299      	cmp	r1, r3
 80086e6:	f200 80c4 	bhi.w	8008872 <dwt_ioctl+0xef6>
 80086ea:	f899 2010 	ldrb.w	r2, [r9, #16]
 80086ee:	1e53      	subs	r3, r2, #1
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d940      	bls.n	8008778 <dwt_ioctl+0xdfc>
 80086f6:	f899 3011 	ldrb.w	r3, [r9, #17]
 80086fa:	1e59      	subs	r1, r3, #1
 80086fc:	b2c9      	uxtb	r1, r1
 80086fe:	2901      	cmp	r1, #1
 8008700:	d964      	bls.n	80087cc <dwt_ioctl+0xe50>
 8008702:	2b04      	cmp	r3, #4
 8008704:	d069      	beq.n	80087da <dwt_ioctl+0xe5e>
 8008706:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 800870a:	2200      	movs	r2, #0
 800870c:	492a      	ldr	r1, [pc, #168]	; (80087b8 <dwt_ioctl+0xe3c>)
 800870e:	4630      	mov	r0, r6
 8008710:	f7fd fea2 	bl	8006458 <dwt_write32bitoffsetreg>
 8008714:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8008718:	4a28      	ldr	r2, [pc, #160]	; (80087bc <dwt_ioctl+0xe40>)
 800871a:	ea02 12c3 	and.w	r2, r2, r3, lsl #7
 800871e:	f899 300c 	ldrb.w	r3, [r9, #12]
 8008722:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008726:	4313      	orrs	r3, r2
 8008728:	2200      	movs	r2, #0
 800872a:	4925      	ldr	r1, [pc, #148]	; (80087c0 <dwt_ioctl+0xe44>)
 800872c:	4630      	mov	r0, r6
 800872e:	f7fd fe93 	bl	8006458 <dwt_write32bitoffsetreg>
 8008732:	2301      	movs	r3, #1
 8008734:	2200      	movs	r2, #0
 8008736:	4923      	ldr	r1, [pc, #140]	; (80087c4 <dwt_ioctl+0xe48>)
 8008738:	4630      	mov	r0, r6
 800873a:	f7fd fd3a 	bl	80061b2 <dwt_write8bitoffsetreg>
 800873e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80087c8 <dwt_ioctl+0xe4c>
 8008742:	2700      	movs	r7, #0
 8008744:	463a      	mov	r2, r7
 8008746:	4641      	mov	r1, r8
 8008748:	4630      	mov	r0, r6
 800874a:	f7fd f96b 	bl	8005a24 <dwt_read8bitoffsetreg>
 800874e:	f010 0f05 	tst.w	r0, #5
 8008752:	d0f7      	beq.n	8008744 <dwt_ioctl+0xdc8>
 8008754:	4605      	mov	r5, r0
 8008756:	4603      	mov	r3, r0
 8008758:	2200      	movs	r2, #0
 800875a:	491b      	ldr	r1, [pc, #108]	; (80087c8 <dwt_ioctl+0xe4c>)
 800875c:	4630      	mov	r0, r6
 800875e:	f7fd fd28 	bl	80061b2 <dwt_write8bitoffsetreg>
 8008762:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8008766:	f025 0330 	bic.w	r3, r5, #48	; 0x30
 800876a:	2b01      	cmp	r3, #1
 800876c:	d042      	beq.n	80087f4 <dwt_ioctl+0xe78>
 800876e:	b26b      	sxtb	r3, r5
 8008770:	7023      	strb	r3, [r4, #0]
 8008772:	2500      	movs	r5, #0
 8008774:	f7ff b9ac 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008778:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800877a:	7bdb      	ldrb	r3, [r3, #15]
 800877c:	2b03      	cmp	r3, #3
 800877e:	f001 802e 	beq.w	80097de <dwt_ioctl+0x1e62>
 8008782:	f899 3011 	ldrb.w	r3, [r9, #17]
 8008786:	1e5a      	subs	r2, r3, #1
 8008788:	b2d2      	uxtb	r2, r2
 800878a:	2a01      	cmp	r2, #1
 800878c:	d92c      	bls.n	80087e8 <dwt_ioctl+0xe6c>
 800878e:	2201      	movs	r2, #1
 8008790:	e7b7      	b.n	8008702 <dwt_ioctl+0xd86>
 8008792:	bf00      	nop
 8008794:	00070048 	.word	0x00070048
 8008798:	00070034 	.word	0x00070034
 800879c:	00080004 	.word	0x00080004
 80087a0:	3f866666 	.word	0x3f866666
 80087a4:	3ecccccd 	.word	0x3ecccccd
 80087a8:	437f0000 	.word	0x437f0000
 80087ac:	000f0024 	.word	0x000f0024
 80087b0:	00020008 	.word	0x00020008
 80087b4:	00010034 	.word	0x00010034
 80087b8:	00010044 	.word	0x00010044
 80087bc:	0001ff80 	.word	0x0001ff80
 80087c0:	00010048 	.word	0x00010048
 80087c4:	0001004c 	.word	0x0001004c
 80087c8:	00010050 	.word	0x00010050
 80087cc:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80087ce:	7bdb      	ldrb	r3, [r3, #15]
 80087d0:	2b03      	cmp	r3, #3
 80087d2:	bf0c      	ite	eq
 80087d4:	2302      	moveq	r3, #2
 80087d6:	2301      	movne	r3, #1
 80087d8:	e795      	b.n	8008706 <dwt_ioctl+0xd8a>
 80087da:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 80087de:	2910      	cmp	r1, #16
 80087e0:	d991      	bls.n	8008706 <dwt_ioctl+0xd8a>
 80087e2:	f06f 0303 	mvn.w	r3, #3
 80087e6:	e7c3      	b.n	8008770 <dwt_ioctl+0xdf4>
 80087e8:	2201      	movs	r2, #1
 80087ea:	4613      	mov	r3, r2
 80087ec:	e78b      	b.n	8008706 <dwt_ioctl+0xd8a>
 80087ee:	2202      	movs	r2, #2
 80087f0:	4613      	mov	r3, r2
 80087f2:	e788      	b.n	8008706 <dwt_ioctl+0xd8a>
 80087f4:	f899 3012 	ldrb.w	r3, [r9, #18]
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d1b8      	bne.n	800876e <dwt_ioctl+0xdf2>
 80087fc:	f899 2011 	ldrb.w	r2, [r9, #17]
 8008800:	1e53      	subs	r3, r2, #1
 8008802:	b2db      	uxtb	r3, r3
 8008804:	2b01      	cmp	r3, #1
 8008806:	d91b      	bls.n	8008840 <dwt_ioctl+0xec4>
 8008808:	2a03      	cmp	r2, #3
 800880a:	bf0c      	ite	eq
 800880c:	f44f 17a0 	moveq.w	r7, #1310720	; 0x140000
 8008810:	f44f 17b0 	movne.w	r7, #1441792	; 0x160000
 8008814:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8008818:	b112      	cbz	r2, 8008820 <dwt_ioctl+0xea4>
 800881a:	f899 300c 	ldrb.w	r3, [r9, #12]
 800881e:	b9c3      	cbnz	r3, 8008852 <dwt_ioctl+0xed6>
 8008820:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8008824:	2900      	cmp	r1, #0
 8008826:	d0a2      	beq.n	800876e <dwt_ioctl+0xdf2>
 8008828:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d09e      	beq.n	800876e <dwt_ioctl+0xdf2>
 8008830:	f899 200c 	ldrb.w	r2, [r9, #12]
 8008834:	9100      	str	r1, [sp, #0]
 8008836:	4639      	mov	r1, r7
 8008838:	4630      	mov	r0, r6
 800883a:	f7fd f8c1 	bl	80059c0 <dwt_readfromdevice>
 800883e:	e796      	b.n	800876e <dwt_ioctl+0xdf2>
 8008840:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8008842:	7bdb      	ldrb	r3, [r3, #15]
 8008844:	2b03      	cmp	r3, #3
 8008846:	bf0c      	ite	eq
 8008848:	f44f 1798 	moveq.w	r7, #1245184	; 0x130000
 800884c:	f44f 1790 	movne.w	r7, #1179648	; 0x120000
 8008850:	e7e0      	b.n	8008814 <dwt_ioctl+0xe98>
 8008852:	9200      	str	r2, [sp, #0]
 8008854:	2200      	movs	r2, #0
 8008856:	4639      	mov	r1, r7
 8008858:	4630      	mov	r0, r6
 800885a:	f7fd f8b1 	bl	80059c0 <dwt_readfromdevice>
 800885e:	e7df      	b.n	8008820 <dwt_ioctl+0xea4>
 8008860:	f06f 0302 	mvn.w	r3, #2
 8008864:	e784      	b.n	8008770 <dwt_ioctl+0xdf4>
 8008866:	f06f 0301 	mvn.w	r3, #1
 800886a:	e781      	b.n	8008770 <dwt_ioctl+0xdf4>
 800886c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008870:	e77e      	b.n	8008770 <dwt_ioctl+0xdf4>
 8008872:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008876:	e77b      	b.n	8008770 <dwt_ioctl+0xdf4>
 8008878:	7a23      	ldrb	r3, [r4, #8]
 800887a:	79e1      	ldrb	r1, [r4, #7]
 800887c:	79a2      	ldrb	r2, [r4, #6]
 800887e:	00d2      	lsls	r2, r2, #3
 8008880:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8008884:	4313      	orrs	r3, r2
 8008886:	7962      	ldrb	r2, [r4, #5]
 8008888:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800888c:	7922      	ldrb	r2, [r4, #4]
 800888e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8008892:	78e2      	ldrb	r2, [r4, #3]
 8008894:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008898:	78a2      	ldrb	r2, [r4, #2]
 800889a:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 800889e:	7862      	ldrb	r2, [r4, #1]
 80088a0:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	2200      	movs	r2, #0
 80088a8:	49cd      	ldr	r1, [pc, #820]	; (8008be0 <dwt_ioctl+0x1264>)
 80088aa:	f7fd fcd4 	bl	8006256 <dwt_write16bitoffsetreg>
 80088ae:	2500      	movs	r5, #0
 80088b0:	f7ff b90e 	b.w	8007ad0 <dwt_ioctl+0x154>
 80088b4:	2c00      	cmp	r4, #0
 80088b6:	f000 86fc 	beq.w	80096b2 <dwt_ioctl+0x1d36>
 80088ba:	7863      	ldrb	r3, [r4, #1]
 80088bc:	b133      	cbz	r3, 80088cc <dwt_ioctl+0xf50>
 80088be:	085b      	lsrs	r3, r3, #1
 80088c0:	3b01      	subs	r3, #1
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	7023      	strb	r3, [r4, #0]
 80088c6:	2500      	movs	r5, #0
 80088c8:	f7ff b902 	b.w	8007ad0 <dwt_ioctl+0x154>
 80088cc:	2300      	movs	r3, #0
 80088ce:	e7f9      	b.n	80088c4 <dwt_ioctl+0xf48>
 80088d0:	2200      	movs	r2, #0
 80088d2:	49c4      	ldr	r1, [pc, #784]	; (8008be4 <dwt_ioctl+0x1268>)
 80088d4:	f7fd f87e 	bl	80059d4 <dwt_read32bitoffsetreg>
 80088d8:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80088dc:	8023      	strh	r3, [r4, #0]
 80088de:	f3c0 400b 	ubfx	r0, r0, #16, #12
 80088e2:	8060      	strh	r0, [r4, #2]
 80088e4:	2200      	movs	r2, #0
 80088e6:	49c0      	ldr	r1, [pc, #768]	; (8008be8 <dwt_ioctl+0x126c>)
 80088e8:	4630      	mov	r0, r6
 80088ea:	f7fd f873 	bl	80059d4 <dwt_read32bitoffsetreg>
 80088ee:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80088f2:	80a3      	strh	r3, [r4, #4]
 80088f4:	f3c0 400b 	ubfx	r0, r0, #16, #12
 80088f8:	80e0      	strh	r0, [r4, #6]
 80088fa:	2200      	movs	r2, #0
 80088fc:	49bb      	ldr	r1, [pc, #748]	; (8008bec <dwt_ioctl+0x1270>)
 80088fe:	4630      	mov	r0, r6
 8008900:	f7fd f868 	bl	80059d4 <dwt_read32bitoffsetreg>
 8008904:	7220      	strb	r0, [r4, #8]
 8008906:	0c00      	lsrs	r0, r0, #16
 8008908:	7260      	strb	r0, [r4, #9]
 800890a:	2200      	movs	r2, #0
 800890c:	49b8      	ldr	r1, [pc, #736]	; (8008bf0 <dwt_ioctl+0x1274>)
 800890e:	4630      	mov	r0, r6
 8008910:	f7fd f860 	bl	80059d4 <dwt_read32bitoffsetreg>
 8008914:	f3c0 430b 	ubfx	r3, r0, #16, #12
 8008918:	81a3      	strh	r3, [r4, #12]
 800891a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800891e:	8160      	strh	r0, [r4, #10]
 8008920:	2200      	movs	r2, #0
 8008922:	49b4      	ldr	r1, [pc, #720]	; (8008bf4 <dwt_ioctl+0x1278>)
 8008924:	4630      	mov	r0, r6
 8008926:	f7fd f855 	bl	80059d4 <dwt_read32bitoffsetreg>
 800892a:	f3c0 430b 	ubfx	r3, r0, #16, #12
 800892e:	f8a4 300f 	strh.w	r3, [r4, #15]
 8008932:	73a0      	strb	r0, [r4, #14]
 8008934:	2200      	movs	r2, #0
 8008936:	49b0      	ldr	r1, [pc, #704]	; (8008bf8 <dwt_ioctl+0x127c>)
 8008938:	4630      	mov	r0, r6
 800893a:	f7fd f84b 	bl	80059d4 <dwt_read32bitoffsetreg>
 800893e:	7460      	strb	r0, [r4, #17]
 8008940:	0c00      	lsrs	r0, r0, #16
 8008942:	74a0      	strb	r0, [r4, #18]
 8008944:	2200      	movs	r2, #0
 8008946:	49ad      	ldr	r1, [pc, #692]	; (8008bfc <dwt_ioctl+0x1280>)
 8008948:	4630      	mov	r0, r6
 800894a:	f7fd f843 	bl	80059d4 <dwt_read32bitoffsetreg>
 800894e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8008952:	f8a4 0013 	strh.w	r0, [r4, #19]
 8008956:	2500      	movs	r5, #0
 8008958:	7565      	strb	r5, [r4, #21]
 800895a:	75a5      	strb	r5, [r4, #22]
 800895c:	462a      	mov	r2, r5
 800895e:	49a8      	ldr	r1, [pc, #672]	; (8008c00 <dwt_ioctl+0x1284>)
 8008960:	4630      	mov	r0, r6
 8008962:	f7fd f85f 	bl	8005a24 <dwt_read8bitoffsetreg>
 8008966:	75e0      	strb	r0, [r4, #23]
 8008968:	f7ff b8b2 	b.w	8007ad0 <dwt_ioctl+0x154>
 800896c:	4611      	mov	r1, r2
 800896e:	f7fd fc5f 	bl	8006230 <ull_configeventcounters>
 8008972:	2500      	movs	r5, #0
 8008974:	f7ff b8ac 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008978:	2c00      	cmp	r4, #0
 800897a:	f000 869d 	beq.w	80096b8 <dwt_ioctl+0x1d3c>
 800897e:	8823      	ldrh	r3, [r4, #0]
 8008980:	2200      	movs	r2, #0
 8008982:	49a0      	ldr	r1, [pc, #640]	; (8008c04 <dwt_ioctl+0x1288>)
 8008984:	f7fd fc67 	bl	8006256 <dwt_write16bitoffsetreg>
 8008988:	2500      	movs	r5, #0
 800898a:	f7ff b8a1 	b.w	8007ad0 <dwt_ioctl+0x154>
 800898e:	2c00      	cmp	r4, #0
 8008990:	f000 8695 	beq.w	80096be <dwt_ioctl+0x1d42>
 8008994:	6825      	ldr	r5, [r4, #0]
 8008996:	b935      	cbnz	r5, 80089a6 <dwt_ioctl+0x102a>
 8008998:	2300      	movs	r3, #0
 800899a:	461a      	mov	r2, r3
 800899c:	499a      	ldr	r1, [pc, #616]	; (8008c08 <dwt_ioctl+0x128c>)
 800899e:	f7fd fc5a 	bl	8006256 <dwt_write16bitoffsetreg>
 80089a2:	f7ff b895 	b.w	8007ad0 <dwt_ioctl+0x154>
 80089a6:	7962      	ldrb	r2, [r4, #5]
 80089a8:	7923      	ldrb	r3, [r4, #4]
 80089aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80089ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80089b2:	2200      	movs	r2, #0
 80089b4:	4994      	ldr	r1, [pc, #592]	; (8008c08 <dwt_ioctl+0x128c>)
 80089b6:	f7fd fc4e 	bl	8006256 <dwt_write16bitoffsetreg>
 80089ba:	2500      	movs	r5, #0
 80089bc:	f7ff b888 	b.w	8007ad0 <dwt_ioctl+0x154>
 80089c0:	2c00      	cmp	r4, #0
 80089c2:	f000 867f 	beq.w	80096c4 <dwt_ioctl+0x1d48>
 80089c6:	6823      	ldr	r3, [r4, #0]
 80089c8:	b94b      	cbnz	r3, 80089de <dwt_ioctl+0x1062>
 80089ca:	2500      	movs	r5, #0
 80089cc:	9500      	str	r5, [sp, #0]
 80089ce:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 80089d2:	462a      	mov	r2, r5
 80089d4:	2110      	movs	r1, #16
 80089d6:	f7fe fc6d 	bl	80072b4 <dwt_modify16bitoffsetreg>
 80089da:	f7ff b879 	b.w	8007ad0 <dwt_ioctl+0x154>
 80089de:	2200      	movs	r2, #0
 80089e0:	2134      	movs	r1, #52	; 0x34
 80089e2:	f7fd fd39 	bl	8006458 <dwt_write32bitoffsetreg>
 80089e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80089f0:	2200      	movs	r2, #0
 80089f2:	2110      	movs	r1, #16
 80089f4:	4630      	mov	r0, r6
 80089f6:	f7fe fc5d 	bl	80072b4 <dwt_modify16bitoffsetreg>
 80089fa:	2500      	movs	r5, #0
 80089fc:	f7ff b868 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008a00:	2c00      	cmp	r4, #0
 8008a02:	f000 8662 	beq.w	80096ca <dwt_ioctl+0x1d4e>
 8008a06:	8861      	ldrh	r1, [r4, #2]
 8008a08:	f7fd fca2 	bl	8006350 <ull_aon_read>
 8008a0c:	7020      	strb	r0, [r4, #0]
 8008a0e:	2500      	movs	r5, #0
 8008a10:	f7ff b85e 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008a14:	2c00      	cmp	r4, #0
 8008a16:	f000 865b 	beq.w	80096d0 <dwt_ioctl+0x1d54>
 8008a1a:	78a2      	ldrb	r2, [r4, #2]
 8008a1c:	8821      	ldrh	r1, [r4, #0]
 8008a1e:	f7fd fcb7 	bl	8006390 <ull_aon_write>
 8008a22:	2500      	movs	r5, #0
 8008a24:	f7ff b854 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008a28:	4b78      	ldr	r3, [pc, #480]	; (8008c0c <dwt_ioctl+0x1290>)
 8008a2a:	4a79      	ldr	r2, [pc, #484]	; (8008c10 <dwt_ioctl+0x1294>)
 8008a2c:	2d01      	cmp	r5, #1
 8008a2e:	bf18      	it	ne
 8008a30:	4613      	movne	r3, r2
 8008a32:	2d01      	cmp	r5, #1
 8008a34:	4977      	ldr	r1, [pc, #476]	; (8008c14 <dwt_ioctl+0x1298>)
 8008a36:	bf18      	it	ne
 8008a38:	f04f 110c 	movne.w	r1, #786444	; 0xc000c
 8008a3c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8008a3e:	7bd2      	ldrb	r2, [r2, #15]
 8008a40:	2a01      	cmp	r2, #1
 8008a42:	d012      	beq.n	8008a6a <dwt_ioctl+0x10ee>
 8008a44:	2a03      	cmp	r2, #3
 8008a46:	d117      	bne.n	8008a78 <dwt_ioctl+0x10fc>
 8008a48:	f5a2 12c0 	sub.w	r2, r2, #1572864	; 0x180000
 8008a4c:	3a01      	subs	r2, #1
 8008a4e:	441a      	add	r2, r3
 8008a50:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8008a54:	f7fc ffd4 	bl	8005a00 <dwt_read16bitoffsetreg>
 8008a58:	09c0      	lsrs	r0, r0, #7
 8008a5a:	8020      	strh	r0, [r4, #0]
 8008a5c:	8825      	ldrh	r5, [r4, #0]
 8008a5e:	3500      	adds	r5, #0
 8008a60:	bf18      	it	ne
 8008a62:	2501      	movne	r5, #1
 8008a64:	426d      	negs	r5, r5
 8008a66:	f7ff b833 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008a6a:	2202      	movs	r2, #2
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	f7fc ffc7 	bl	8005a00 <dwt_read16bitoffsetreg>
 8008a72:	09c0      	lsrs	r0, r0, #7
 8008a74:	8020      	strh	r0, [r4, #0]
 8008a76:	e7f1      	b.n	8008a5c <dwt_ioctl+0x10e0>
 8008a78:	2202      	movs	r2, #2
 8008a7a:	f7fc ffc1 	bl	8005a00 <dwt_read16bitoffsetreg>
 8008a7e:	09c0      	lsrs	r0, r0, #7
 8008a80:	8020      	strh	r0, [r4, #0]
 8008a82:	e7eb      	b.n	8008a5c <dwt_ioctl+0x10e0>
 8008a84:	2c00      	cmp	r4, #0
 8008a86:	f000 8626 	beq.w	80096d6 <dwt_ioctl+0x1d5a>
 8008a8a:	7821      	ldrb	r1, [r4, #0]
 8008a8c:	f7fe fc48 	bl	8007320 <ull_setleds>
 8008a90:	2500      	movs	r5, #0
 8008a92:	f7ff b81d 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008a96:	4611      	mov	r1, r2
 8008a98:	f7fe fb18 	bl	80070cc <ull_setdwstate>
 8008a9c:	2500      	movs	r5, #0
 8008a9e:	f7ff b817 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008aa2:	9400      	str	r4, [sp, #0]
 8008aa4:	2304      	movs	r3, #4
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	211c      	movs	r1, #28
 8008aaa:	f7fc ff89 	bl	80059c0 <dwt_readfromdevice>
 8008aae:	2500      	movs	r5, #0
 8008ab0:	f7ff b80e 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008ab4:	2c00      	cmp	r4, #0
 8008ab6:	f000 8611 	beq.w	80096dc <dwt_ioctl+0x1d60>
 8008aba:	2202      	movs	r2, #2
 8008abc:	2144      	movs	r1, #68	; 0x44
 8008abe:	f7fc ff9f 	bl	8005a00 <dwt_read16bitoffsetreg>
 8008ac2:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8008ac6:	7020      	strb	r0, [r4, #0]
 8008ac8:	2500      	movs	r5, #0
 8008aca:	f7ff b801 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008ace:	2c00      	cmp	r4, #0
 8008ad0:	f000 8607 	beq.w	80096e2 <dwt_ioctl+0x1d66>
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	2144      	movs	r1, #68	; 0x44
 8008ad8:	f7fc ffa4 	bl	8005a24 <dwt_read8bitoffsetreg>
 8008adc:	f000 0001 	and.w	r0, r0, #1
 8008ae0:	7020      	strb	r0, [r4, #0]
 8008ae2:	2500      	movs	r5, #0
 8008ae4:	f7fe bff4 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008ae8:	2c00      	cmp	r4, #0
 8008aea:	f000 85fd 	beq.w	80096e8 <dwt_ioctl+0x1d6c>
 8008aee:	8862      	ldrh	r2, [r4, #2]
 8008af0:	8821      	ldrh	r1, [r4, #0]
 8008af2:	f7fe fb49 	bl	8007188 <ull_configureframefilter>
 8008af6:	2500      	movs	r5, #0
 8008af8:	f7fe bfea 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008afc:	9400      	str	r4, [sp, #0]
 8008afe:	2308      	movs	r3, #8
 8008b00:	2200      	movs	r2, #0
 8008b02:	2104      	movs	r1, #4
 8008b04:	f7fd fb4a 	bl	800619c <dwt_writetodevice>
 8008b08:	2500      	movs	r5, #0
 8008b0a:	f7fe bfe1 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008b0e:	9400      	str	r4, [sp, #0]
 8008b10:	2308      	movs	r3, #8
 8008b12:	2200      	movs	r2, #0
 8008b14:	2104      	movs	r1, #4
 8008b16:	f7fc ff53 	bl	80059c0 <dwt_readfromdevice>
 8008b1a:	2500      	movs	r5, #0
 8008b1c:	f7fe bfd8 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008b20:	2c00      	cmp	r4, #0
 8008b22:	f000 85e4 	beq.w	80096ee <dwt_ioctl+0x1d72>
 8008b26:	8823      	ldrh	r3, [r4, #0]
 8008b28:	2202      	movs	r2, #2
 8008b2a:	210c      	movs	r1, #12
 8008b2c:	f7fd fb93 	bl	8006256 <dwt_write16bitoffsetreg>
 8008b30:	2500      	movs	r5, #0
 8008b32:	f7fe bfcd 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008b36:	2c00      	cmp	r4, #0
 8008b38:	f000 85dc 	beq.w	80096f4 <dwt_ioctl+0x1d78>
 8008b3c:	8823      	ldrh	r3, [r4, #0]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	210c      	movs	r1, #12
 8008b42:	f7fd fb88 	bl	8006256 <dwt_write16bitoffsetreg>
 8008b46:	2500      	movs	r5, #0
 8008b48:	f7fe bfc2 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008b4c:	4621      	mov	r1, r4
 8008b4e:	f7fd fb03 	bl	8006158 <ull_readrxtimestamp>
 8008b52:	2500      	movs	r5, #0
 8008b54:	f7fe bfbc 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008b58:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008b5a:	7bdb      	ldrb	r3, [r3, #15]
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d00b      	beq.n	8008b78 <dwt_ioctl+0x11fc>
 8008b60:	2b03      	cmp	r3, #3
 8008b62:	d112      	bne.n	8008b8a <dwt_ioctl+0x120e>
 8008b64:	9400      	str	r4, [sp, #0]
 8008b66:	2305      	movs	r3, #5
 8008b68:	2220      	movs	r2, #32
 8008b6a:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8008b6e:	f7fc ff27 	bl	80059c0 <dwt_readfromdevice>
 8008b72:	2500      	movs	r5, #0
 8008b74:	f7fe bfac 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008b78:	9400      	str	r4, [sp, #0]
 8008b7a:	2305      	movs	r3, #5
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	4926      	ldr	r1, [pc, #152]	; (8008c18 <dwt_ioctl+0x129c>)
 8008b80:	f7fc ff1e 	bl	80059c0 <dwt_readfromdevice>
 8008b84:	2500      	movs	r5, #0
 8008b86:	f7fe bfa3 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008b8a:	9400      	str	r4, [sp, #0]
 8008b8c:	2305      	movs	r3, #5
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8008b94:	f7fc ff14 	bl	80059c0 <dwt_readfromdevice>
 8008b98:	2500      	movs	r5, #0
 8008b9a:	f7fe bf99 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008b9e:	2500      	movs	r5, #0
 8008ba0:	f804 5b01 	strb.w	r5, [r4], #1
 8008ba4:	9400      	str	r4, [sp, #0]
 8008ba6:	2304      	movs	r3, #4
 8008ba8:	462a      	mov	r2, r5
 8008baa:	2170      	movs	r1, #112	; 0x70
 8008bac:	f7fc ff08 	bl	80059c0 <dwt_readfromdevice>
 8008bb0:	f7fe bf8e 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008bb4:	2c00      	cmp	r4, #0
 8008bb6:	f000 85a0 	beq.w	80096fa <dwt_ioctl+0x1d7e>
 8008bba:	2201      	movs	r2, #1
 8008bbc:	2164      	movs	r1, #100	; 0x64
 8008bbe:	f7fc ff09 	bl	80059d4 <dwt_read32bitoffsetreg>
 8008bc2:	6020      	str	r0, [r4, #0]
 8008bc4:	2500      	movs	r5, #0
 8008bc6:	f7fe bf83 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008bca:	2c00      	cmp	r4, #0
 8008bcc:	f000 8598 	beq.w	8009700 <dwt_ioctl+0x1d84>
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	2164      	movs	r1, #100	; 0x64
 8008bd4:	f7fc fefe 	bl	80059d4 <dwt_read32bitoffsetreg>
 8008bd8:	6020      	str	r0, [r4, #0]
 8008bda:	2500      	movs	r5, #0
 8008bdc:	f7fe bf78 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008be0:	00010030 	.word	0x00010030
 8008be4:	000f0004 	.word	0x000f0004
 8008be8:	000f0008 	.word	0x000f0008
 8008bec:	000f000c 	.word	0x000f000c
 8008bf0:	000f0010 	.word	0x000f0010
 8008bf4:	000f0014 	.word	0x000f0014
 8008bf8:	000f0018 	.word	0x000f0018
 8008bfc:	000f001c 	.word	0x000f001c
 8008c00:	000f0028 	.word	0x000f0028
 8008c04:	00060004 	.word	0x00060004
 8008c08:	0011001a 	.word	0x0011001a
 8008c0c:	00180034 	.word	0x00180034
 8008c10:	0018002c 	.word	0x0018002c
 8008c14:	000c0014 	.word	0x000c0014
 8008c18:	00180020 	.word	0x00180020
 8008c1c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008c1e:	7bdb      	ldrb	r3, [r3, #15]
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d00b      	beq.n	8008c3c <dwt_ioctl+0x12c0>
 8008c24:	2b03      	cmp	r3, #3
 8008c26:	d112      	bne.n	8008c4e <dwt_ioctl+0x12d2>
 8008c28:	9400      	str	r4, [sp, #0]
 8008c2a:	2305      	movs	r3, #5
 8008c2c:	2228      	movs	r2, #40	; 0x28
 8008c2e:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8008c32:	f7fc fec5 	bl	80059c0 <dwt_readfromdevice>
 8008c36:	2500      	movs	r5, #0
 8008c38:	f7fe bf4a 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008c3c:	9400      	str	r4, [sp, #0]
 8008c3e:	2305      	movs	r3, #5
 8008c40:	2200      	movs	r2, #0
 8008c42:	49d3      	ldr	r1, [pc, #844]	; (8008f90 <dwt_ioctl+0x1614>)
 8008c44:	f7fc febc 	bl	80059c0 <dwt_readfromdevice>
 8008c48:	2500      	movs	r5, #0
 8008c4a:	f7fe bf41 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008c4e:	9400      	str	r4, [sp, #0]
 8008c50:	2305      	movs	r3, #5
 8008c52:	2200      	movs	r2, #0
 8008c54:	49cf      	ldr	r1, [pc, #828]	; (8008f94 <dwt_ioctl+0x1618>)
 8008c56:	f7fc feb3 	bl	80059c0 <dwt_readfromdevice>
 8008c5a:	2500      	movs	r5, #0
 8008c5c:	f7fe bf38 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008c60:	2c00      	cmp	r4, #0
 8008c62:	f000 8550 	beq.w	8009706 <dwt_ioctl+0x1d8a>
 8008c66:	2200      	movs	r2, #0
 8008c68:	211c      	movs	r1, #28
 8008c6a:	f7fc feb3 	bl	80059d4 <dwt_read32bitoffsetreg>
 8008c6e:	6020      	str	r0, [r4, #0]
 8008c70:	2500      	movs	r5, #0
 8008c72:	f7fe bf2d 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008c76:	2c00      	cmp	r4, #0
 8008c78:	f000 8548 	beq.w	800970c <dwt_ioctl+0x1d90>
 8008c7c:	8825      	ldrh	r5, [r4, #0]
 8008c7e:	6867      	ldr	r7, [r4, #4]
 8008c80:	7a23      	ldrb	r3, [r4, #8]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	f000 8545 	beq.w	8009712 <dwt_ioctl+0x1d96>
 8008c88:	463c      	mov	r4, r7
 8008c8a:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8008c8e:	4629      	mov	r1, r5
 8008c90:	4630      	mov	r0, r6
 8008c92:	f7fd fb3b 	bl	800630c <_dwt_otpread>
 8008c96:	f844 0b04 	str.w	r0, [r4], #4
 8008c9a:	3501      	adds	r5, #1
 8008c9c:	b2ad      	uxth	r5, r5
 8008c9e:	42bc      	cmp	r4, r7
 8008ca0:	d1f5      	bne.n	8008c8e <dwt_ioctl+0x1312>
 8008ca2:	2500      	movs	r5, #0
 8008ca4:	f7fe bf14 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008ca8:	2c00      	cmp	r4, #0
 8008caa:	f000 8535 	beq.w	8009718 <dwt_ioctl+0x1d9c>
 8008cae:	7823      	ldrb	r3, [r4, #0]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	2128      	movs	r1, #40	; 0x28
 8008cb4:	f7fd fa7d 	bl	80061b2 <dwt_write8bitoffsetreg>
 8008cb8:	2500      	movs	r5, #0
 8008cba:	f7fe bf09 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008cbe:	f7fe fa87 	bl	80071d0 <ull_run_pgfcal>
 8008cc2:	4605      	mov	r5, r0
 8008cc4:	f7fe bf04 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008cc8:	4611      	mov	r1, r2
 8008cca:	f7fe fb77 	bl	80073bc <ull_pgf_cal>
 8008cce:	4605      	mov	r5, r0
 8008cd0:	f7fe befe 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008cd4:	2c00      	cmp	r4, #0
 8008cd6:	f000 8522 	beq.w	800971e <dwt_ioctl+0x1da2>
 8008cda:	78a5      	ldrb	r5, [r4, #2]
 8008cdc:	2101      	movs	r1, #1
 8008cde:	f7fd faeb 	bl	80062b8 <ull_force_clocks>
 8008ce2:	2100      	movs	r1, #0
 8008ce4:	4630      	mov	r0, r6
 8008ce6:	f7fd ff8b 	bl	8006c00 <ull_enable_rf_tx>
 8008cea:	4630      	mov	r0, r6
 8008cec:	f7fd ffbc 	bl	8006c68 <ull_enable_rftx_blocks>
 8008cf0:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	49a8      	ldr	r1, [pc, #672]	; (8008f98 <dwt_ioctl+0x161c>)
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	f7fd fa5a 	bl	80061b2 <dwt_write8bitoffsetreg>
 8008cfe:	2301      	movs	r3, #1
 8008d00:	9300      	str	r3, [sp, #0]
 8008d02:	23ff      	movs	r3, #255	; 0xff
 8008d04:	2200      	movs	r2, #0
 8008d06:	49a5      	ldr	r1, [pc, #660]	; (8008f9c <dwt_ioctl+0x1620>)
 8008d08:	4630      	mov	r0, r6
 8008d0a:	f7fe f921 	bl	8006f50 <dwt_modify8bitoffsetreg>
 8008d0e:	4fa3      	ldr	r7, [pc, #652]	; (8008f9c <dwt_ioctl+0x1620>)
 8008d10:	2500      	movs	r5, #0
 8008d12:	462a      	mov	r2, r5
 8008d14:	4639      	mov	r1, r7
 8008d16:	4630      	mov	r0, r6
 8008d18:	f7fc fe84 	bl	8005a24 <dwt_read8bitoffsetreg>
 8008d1c:	f010 0f01 	tst.w	r0, #1
 8008d20:	d1f7      	bne.n	8008d12 <dwt_ioctl+0x1396>
 8008d22:	2200      	movs	r2, #0
 8008d24:	499e      	ldr	r1, [pc, #632]	; (8008fa0 <dwt_ioctl+0x1624>)
 8008d26:	4630      	mov	r0, r6
 8008d28:	f7fc fe6a 	bl	8005a00 <dwt_read16bitoffsetreg>
 8008d2c:	4605      	mov	r5, r0
 8008d2e:	4630      	mov	r0, r6
 8008d30:	f7fd fe30 	bl	8006994 <ull_disable_rftx_blocks>
 8008d34:	2100      	movs	r1, #0
 8008d36:	4630      	mov	r0, r6
 8008d38:	f7fd fe36 	bl	80069a8 <ull_disable_rf_tx>
 8008d3c:	2105      	movs	r1, #5
 8008d3e:	4630      	mov	r0, r6
 8008d40:	f7fd faba 	bl	80062b8 <ull_force_clocks>
 8008d44:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8008d48:	8025      	strh	r5, [r4, #0]
 8008d4a:	2500      	movs	r5, #0
 8008d4c:	f7fe bec0 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008d50:	2102      	movs	r1, #2
 8008d52:	f7fe f9bb 	bl	80070cc <ull_setdwstate>
 8008d56:	2101      	movs	r1, #1
 8008d58:	4630      	mov	r0, r6
 8008d5a:	f7fe f9b7 	bl	80070cc <ull_setdwstate>
 8008d5e:	2432      	movs	r4, #50	; 0x32
 8008d60:	f04f 0814 	mov.w	r8, #20
 8008d64:	2700      	movs	r7, #0
 8008d66:	2544      	movs	r5, #68	; 0x44
 8008d68:	4640      	mov	r0, r8
 8008d6a:	f7f8 fc06 	bl	800157a <deca_usleep>
 8008d6e:	463a      	mov	r2, r7
 8008d70:	4629      	mov	r1, r5
 8008d72:	4630      	mov	r0, r6
 8008d74:	f7fc fe56 	bl	8005a24 <dwt_read8bitoffsetreg>
 8008d78:	f010 0f02 	tst.w	r0, #2
 8008d7c:	d105      	bne.n	8008d8a <dwt_ioctl+0x140e>
 8008d7e:	1e63      	subs	r3, r4, #1
 8008d80:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8008d84:	d1f0      	bne.n	8008d68 <dwt_ioctl+0x13ec>
 8008d86:	2501      	movs	r5, #1
 8008d88:	e000      	b.n	8008d8c <dwt_ioctl+0x1410>
 8008d8a:	2500      	movs	r5, #0
 8008d8c:	426d      	negs	r5, r5
 8008d8e:	f7fe be9f 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008d92:	2c00      	cmp	r4, #0
 8008d94:	f000 84c6 	beq.w	8009724 <dwt_ioctl+0x1da8>
 8008d98:	7823      	ldrb	r3, [r4, #0]
 8008d9a:	031b      	lsls	r3, r3, #12
 8008d9c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008da0:	7862      	ldrb	r2, [r4, #1]
 8008da2:	2a01      	cmp	r2, #1
 8008da4:	bf08      	it	eq
 8008da6:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	f46f 43e2 	mvn.w	r3, #28928	; 0x7100
 8008db0:	2200      	movs	r2, #0
 8008db2:	497c      	ldr	r1, [pc, #496]	; (8008fa4 <dwt_ioctl+0x1628>)
 8008db4:	f7fd fee2 	bl	8006b7c <dwt_modify32bitoffsetreg>
 8008db8:	2500      	movs	r5, #0
 8008dba:	f7fe be89 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008dbe:	2c00      	cmp	r4, #0
 8008dc0:	f000 84b3 	beq.w	800972a <dwt_ioctl+0x1dae>
 8008dc4:	6862      	ldr	r2, [r4, #4]
 8008dc6:	6821      	ldr	r1, [r4, #0]
 8008dc8:	f7fe f818 	bl	8006dfc <ull_setgpiomode>
 8008dcc:	2500      	movs	r5, #0
 8008dce:	f7fe be7f 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008dd2:	2c00      	cmp	r4, #0
 8008dd4:	f000 84ac 	beq.w	8009730 <dwt_ioctl+0x1db4>
 8008dd8:	8823      	ldrh	r3, [r4, #0]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	4972      	ldr	r1, [pc, #456]	; (8008fa8 <dwt_ioctl+0x162c>)
 8008dde:	f7fd fa3a 	bl	8006256 <dwt_write16bitoffsetreg>
 8008de2:	2500      	movs	r5, #0
 8008de4:	f7fe be74 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008de8:	2c00      	cmp	r4, #0
 8008dea:	f000 84a4 	beq.w	8009736 <dwt_ioctl+0x1dba>
 8008dee:	6862      	ldr	r2, [r4, #4]
 8008df0:	8821      	ldrh	r1, [r4, #0]
 8008df2:	f7fe fb13 	bl	800741c <ull_setgpiovalue>
 8008df6:	2500      	movs	r5, #0
 8008df8:	f7fe be6a 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008dfc:	2c00      	cmp	r4, #0
 8008dfe:	f000 849d 	beq.w	800973c <dwt_ioctl+0x1dc0>
 8008e02:	7865      	ldrb	r5, [r4, #1]
 8008e04:	7823      	ldrb	r3, [r4, #0]
 8008e06:	b18b      	cbz	r3, 8008e2c <dwt_ioctl+0x14b0>
 8008e08:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	73da      	strb	r2, [r3, #15]
 8008e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e12:	2208      	movs	r2, #8
 8008e14:	b1e5      	cbz	r5, 8008e50 <dwt_ioctl+0x14d4>
 8008e16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e1a:	9200      	str	r2, [sp, #0]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	2110      	movs	r1, #16
 8008e20:	4630      	mov	r0, r6
 8008e22:	f7fd feab 	bl	8006b7c <dwt_modify32bitoffsetreg>
 8008e26:	2500      	movs	r5, #0
 8008e28:	f7fe be52 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008e2c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008e2e:	2201      	movs	r2, #1
 8008e30:	73da      	strb	r2, [r3, #15]
 8008e32:	2318      	movs	r3, #24
 8008e34:	2200      	movs	r2, #0
 8008e36:	495d      	ldr	r1, [pc, #372]	; (8008fac <dwt_ioctl+0x1630>)
 8008e38:	f7fd fb0e 	bl	8006458 <dwt_write32bitoffsetreg>
 8008e3c:	23e8      	movs	r3, #232	; 0xe8
 8008e3e:	2200      	movs	r2, #0
 8008e40:	495b      	ldr	r1, [pc, #364]	; (8008fb0 <dwt_ioctl+0x1634>)
 8008e42:	4630      	mov	r0, r6
 8008e44:	f7fd fb08 	bl	8006458 <dwt_write32bitoffsetreg>
 8008e48:	f06f 0308 	mvn.w	r3, #8
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	e7e1      	b.n	8008e14 <dwt_ioctl+0x1498>
 8008e50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008e54:	e7e1      	b.n	8008e1a <dwt_ioctl+0x149e>
 8008e56:	2c00      	cmp	r4, #0
 8008e58:	f000 8473 	beq.w	8009742 <dwt_ioctl+0x1dc6>
 8008e5c:	6823      	ldr	r3, [r4, #0]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	2130      	movs	r1, #48	; 0x30
 8008e62:	f7fd faf9 	bl	8006458 <dwt_write32bitoffsetreg>
 8008e66:	2500      	movs	r5, #0
 8008e68:	f7fe be32 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008e6c:	2c00      	cmp	r4, #0
 8008e6e:	f000 846b 	beq.w	8009748 <dwt_ioctl+0x1dcc>
 8008e72:	2200      	movs	r2, #0
 8008e74:	4629      	mov	r1, r5
 8008e76:	f7fc fdad 	bl	80059d4 <dwt_read32bitoffsetreg>
 8008e7a:	6020      	str	r0, [r4, #0]
 8008e7c:	2500      	movs	r5, #0
 8008e7e:	f7fe be27 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008e82:	4623      	mov	r3, r4
 8008e84:	2200      	movs	r2, #0
 8008e86:	4629      	mov	r1, r5
 8008e88:	f7fd fae6 	bl	8006458 <dwt_write32bitoffsetreg>
 8008e8c:	2500      	movs	r5, #0
 8008e8e:	f7fe be1f 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008e92:	2c00      	cmp	r4, #0
 8008e94:	f000 845b 	beq.w	800974e <dwt_ioctl+0x1dd2>
 8008e98:	2203      	movs	r2, #3
 8008e9a:	4946      	ldr	r1, [pc, #280]	; (8008fb4 <dwt_ioctl+0x1638>)
 8008e9c:	f7fc fdc2 	bl	8005a24 <dwt_read8bitoffsetreg>
 8008ea0:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8008ea4:	7020      	strb	r0, [r4, #0]
 8008ea6:	2500      	movs	r5, #0
 8008ea8:	f7fe be12 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008eac:	2c00      	cmp	r4, #0
 8008eae:	f000 8451 	beq.w	8009754 <dwt_ioctl+0x1dd8>
 8008eb2:	6823      	ldr	r3, [r4, #0]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	2144      	movs	r1, #68	; 0x44
 8008eb8:	f7fd face 	bl	8006458 <dwt_write32bitoffsetreg>
 8008ebc:	2500      	movs	r5, #0
 8008ebe:	f7fe be07 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008ec2:	2c00      	cmp	r4, #0
 8008ec4:	f000 8449 	beq.w	800975a <dwt_ioctl+0x1dde>
 8008ec8:	8823      	ldrh	r3, [r4, #0]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	2148      	movs	r1, #72	; 0x48
 8008ece:	f7fd f9c2 	bl	8006256 <dwt_write16bitoffsetreg>
 8008ed2:	2500      	movs	r5, #0
 8008ed4:	f7fe bdfc 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008ed8:	2c00      	cmp	r4, #0
 8008eda:	f000 8441 	beq.w	8009760 <dwt_ioctl+0x1de4>
 8008ede:	2200      	movs	r2, #0
 8008ee0:	2144      	movs	r1, #68	; 0x44
 8008ee2:	f7fc fd77 	bl	80059d4 <dwt_read32bitoffsetreg>
 8008ee6:	6020      	str	r0, [r4, #0]
 8008ee8:	2500      	movs	r5, #0
 8008eea:	f7fe bdf1 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008eee:	2c00      	cmp	r4, #0
 8008ef0:	f000 8439 	beq.w	8009766 <dwt_ioctl+0x1dea>
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	2148      	movs	r1, #72	; 0x48
 8008ef8:	f7fc fd82 	bl	8005a00 <dwt_read16bitoffsetreg>
 8008efc:	6020      	str	r0, [r4, #0]
 8008efe:	2500      	movs	r5, #0
 8008f00:	f7fe bde6 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008f04:	2c00      	cmp	r4, #0
 8008f06:	f000 8431 	beq.w	800976c <dwt_ioctl+0x1df0>
 8008f0a:	7823      	ldrb	r3, [r4, #0]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	492a      	ldr	r1, [pc, #168]	; (8008fb8 <dwt_ioctl+0x163c>)
 8008f10:	f7fd f94f 	bl	80061b2 <dwt_write8bitoffsetreg>
 8008f14:	2500      	movs	r5, #0
 8008f16:	f7fe bddb 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008f1a:	2c00      	cmp	r4, #0
 8008f1c:	f000 8429 	beq.w	8009772 <dwt_ioctl+0x1df6>
 8008f20:	2200      	movs	r2, #0
 8008f22:	2144      	movs	r1, #68	; 0x44
 8008f24:	f7fc fd7e 	bl	8005a24 <dwt_read8bitoffsetreg>
 8008f28:	7020      	strb	r0, [r4, #0]
 8008f2a:	2500      	movs	r5, #0
 8008f2c:	f7fe bdd0 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008f30:	2c00      	cmp	r4, #0
 8008f32:	f000 8421 	beq.w	8009778 <dwt_ioctl+0x1dfc>
 8008f36:	f7fd f949 	bl	80061cc <ull_getframelength>
 8008f3a:	6020      	str	r0, [r4, #0]
 8008f3c:	2500      	movs	r5, #0
 8008f3e:	f7fe bdc7 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008f42:	2c00      	cmp	r4, #0
 8008f44:	f000 841b 	beq.w	800977e <dwt_ioctl+0x1e02>
 8008f48:	2200      	movs	r2, #0
 8008f4a:	491c      	ldr	r1, [pc, #112]	; (8008fbc <dwt_ioctl+0x1640>)
 8008f4c:	f7fc fd58 	bl	8005a00 <dwt_read16bitoffsetreg>
 8008f50:	8020      	strh	r0, [r4, #0]
 8008f52:	2500      	movs	r5, #0
 8008f54:	f7fe bdbc 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008f58:	2c00      	cmp	r4, #0
 8008f5a:	f000 8413 	beq.w	8009784 <dwt_ioctl+0x1e08>
 8008f5e:	2200      	movs	r2, #0
 8008f60:	4917      	ldr	r1, [pc, #92]	; (8008fc0 <dwt_ioctl+0x1644>)
 8008f62:	f7fc fd37 	bl	80059d4 <dwt_read32bitoffsetreg>
 8008f66:	6020      	str	r0, [r4, #0]
 8008f68:	2500      	movs	r5, #0
 8008f6a:	f7fe bdb1 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008f6e:	2c00      	cmp	r4, #0
 8008f70:	f000 840b 	beq.w	800978a <dwt_ioctl+0x1e0e>
 8008f74:	8823      	ldrh	r3, [r4, #0]
 8008f76:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008f7a:	9300      	str	r3, [sp, #0]
 8008f7c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8008f80:	2200      	movs	r2, #0
 8008f82:	490f      	ldr	r1, [pc, #60]	; (8008fc0 <dwt_ioctl+0x1644>)
 8008f84:	f7fe f996 	bl	80072b4 <dwt_modify16bitoffsetreg>
 8008f88:	2500      	movs	r5, #0
 8008f8a:	f7fe bda1 	b.w	8007ad0 <dwt_ioctl+0x154>
 8008f8e:	bf00      	nop
 8008f90:	00180028 	.word	0x00180028
 8008f94:	000c0008 	.word	0x000c0008
 8008f98:	0007001c 	.word	0x0007001c
 8008f9c:	00080010 	.word	0x00080010
 8008fa0:	00080014 	.word	0x00080014
 8008fa4:	00070014 	.word	0x00070014
 8008fa8:	00050008 	.word	0x00050008
 8008fac:	001f000c 	.word	0x001f000c
 8008fb0:	001f0010 	.word	0x001f0010
 8008fb4:	00030060 	.word	0x00030060
 8008fb8:	00010024 	.word	0x00010024
 8008fbc:	0005002c 	.word	0x0005002c
 8008fc0:	000e001a 	.word	0x000e001a
 8008fc4:	2c00      	cmp	r4, #0
 8008fc6:	f000 83e3 	beq.w	8009790 <dwt_ioctl+0x1e14>
 8008fca:	88a7      	ldrh	r7, [r4, #4]
 8008fcc:	68a3      	ldr	r3, [r4, #8]
 8008fce:	9309      	str	r3, [sp, #36]	; 0x24
 8008fd0:	7b21      	ldrb	r1, [r4, #12]
 8008fd2:	9106      	str	r1, [sp, #24]
 8008fd4:	6922      	ldr	r2, [r4, #16]
 8008fd6:	9204      	str	r2, [sp, #16]
 8008fd8:	6962      	ldr	r2, [r4, #20]
 8008fda:	9205      	str	r2, [sp, #20]
 8008fdc:	f003 0203 	and.w	r2, r3, #3
 8008fe0:	f3c3 0085 	ubfx	r0, r3, #2, #6
 8008fe4:	2905      	cmp	r1, #5
 8008fe6:	d142      	bne.n	800906e <dwt_ioctl+0x16f2>
 8008fe8:	f5b7 7fb1 	cmp.w	r7, #354	; 0x162
 8008fec:	bf28      	it	cs
 8008fee:	f44f 77b1 	movcs.w	r7, #354	; 0x162
 8008ff2:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 80092d4 <dwt_ioctl+0x1958>
 8008ff6:	2f04      	cmp	r7, #4
 8008ff8:	d805      	bhi.n	8009006 <dwt_ioctl+0x168a>
 8008ffa:	eb09 0300 	add.w	r3, r9, r0
 8008ffe:	785b      	ldrb	r3, [r3, #1]
 8009000:	3b05      	subs	r3, #5
 8009002:	429f      	cmp	r7, r3
 8009004:	db3b      	blt.n	800907e <dwt_ioctl+0x1702>
 8009006:	2a01      	cmp	r2, #1
 8009008:	d877      	bhi.n	80090fa <dwt_ioctl+0x177e>
 800900a:	4bae      	ldr	r3, [pc, #696]	; (80092c4 <dwt_ioctl+0x1948>)
 800900c:	5c99      	ldrb	r1, [r3, r2]
 800900e:	463e      	mov	r6, r7
 8009010:	42b9      	cmp	r1, r7
 8009012:	da74      	bge.n	80090fe <dwt_ioctl+0x1782>
 8009014:	1c55      	adds	r5, r2, #1
 8009016:	fa53 f585 	uxtab	r5, r3, r5
 800901a:	2300      	movs	r3, #0
 800901c:	440b      	add	r3, r1
 800901e:	b29b      	uxth	r3, r3
 8009020:	3201      	adds	r2, #1
 8009022:	b2d2      	uxtb	r2, r2
 8009024:	2a02      	cmp	r2, #2
 8009026:	d005      	beq.n	8009034 <dwt_ioctl+0x16b8>
 8009028:	f815 1b01 	ldrb.w	r1, [r5], #1
 800902c:	eba6 0c03 	sub.w	ip, r6, r3
 8009030:	4561      	cmp	r1, ip
 8009032:	dbf3      	blt.n	800901c <dwt_ioctl+0x16a0>
 8009034:	429f      	cmp	r7, r3
 8009036:	bf08      	it	eq
 8009038:	9003      	streq	r0, [sp, #12]
 800903a:	d064      	beq.n	8009106 <dwt_ioctl+0x178a>
 800903c:	f107 0805 	add.w	r8, r7, #5
 8009040:	fa1f f888 	uxth.w	r8, r8
 8009044:	2580      	movs	r5, #128	; 0x80
 8009046:	2100      	movs	r1, #0
 8009048:	9107      	str	r1, [sp, #28]
 800904a:	9103      	str	r1, [sp, #12]
 800904c:	9108      	str	r1, [sp, #32]
 800904e:	460e      	mov	r6, r1
 8009050:	f04f 0b05 	mov.w	fp, #5
 8009054:	46be      	mov	lr, r7
 8009056:	455f      	cmp	r7, fp
 8009058:	bf38      	it	cc
 800905a:	46de      	movcc	lr, fp
 800905c:	f1ae 0e05 	sub.w	lr, lr, #5
 8009060:	fa1f fe8e 	uxth.w	lr, lr
 8009064:	f8df a25c 	ldr.w	sl, [pc, #604]	; 80092c4 <dwt_ioctl+0x1948>
 8009068:	46bc      	mov	ip, r7
 800906a:	460f      	mov	r7, r1
 800906c:	e3dd      	b.n	800982a <dwt_ioctl+0x1eae>
 800906e:	f240 1331 	movw	r3, #305	; 0x131
 8009072:	429f      	cmp	r7, r3
 8009074:	bf28      	it	cs
 8009076:	461f      	movcs	r7, r3
 8009078:	f8df 925c 	ldr.w	r9, [pc, #604]	; 80092d8 <dwt_ioctl+0x195c>
 800907c:	e7bb      	b.n	8008ff6 <dwt_ioctl+0x167a>
 800907e:	2300      	movs	r3, #0
 8009080:	9a05      	ldr	r2, [sp, #20]
 8009082:	8013      	strh	r3, [r2, #0]
 8009084:	9a04      	ldr	r2, [sp, #16]
 8009086:	4611      	mov	r1, r2
 8009088:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800908a:	600a      	str	r2, [r1, #0]
 800908c:	e04a      	b.n	8009124 <dwt_ioctl+0x17a8>
 800908e:	2300      	movs	r3, #0
 8009090:	9a05      	ldr	r2, [sp, #20]
 8009092:	8013      	strh	r3, [r2, #0]
 8009094:	9b04      	ldr	r3, [sp, #16]
 8009096:	461a      	mov	r2, r3
 8009098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800909a:	6013      	str	r3, [r2, #0]
 800909c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80090a0:	e040      	b.n	8009124 <dwt_ioctl+0x17a8>
 80090a2:	fa1f fb81 	uxth.w	fp, r1
 80090a6:	9207      	str	r2, [sp, #28]
 80090a8:	9003      	str	r0, [sp, #12]
 80090aa:	9308      	str	r3, [sp, #32]
 80090ac:	2701      	movs	r7, #1
 80090ae:	e3cd      	b.n	800984c <dwt_ioctl+0x1ed0>
 80090b0:	2f00      	cmp	r7, #0
 80090b2:	f040 83a1 	bne.w	80097f8 <dwt_ioctl+0x1e7c>
 80090b6:	4598      	cmp	r8, r3
 80090b8:	f200 83a3 	bhi.w	8009802 <dwt_ioctl+0x1e86>
 80090bc:	2e00      	cmp	r6, #0
 80090be:	d038      	beq.n	8009132 <dwt_ioctl+0x17b6>
 80090c0:	283f      	cmp	r0, #63	; 0x3f
 80090c2:	f000 83c8 	beq.w	8009856 <dwt_ioctl+0x1eda>
 80090c6:	2700      	movs	r7, #0
 80090c8:	f819 1000 	ldrb.w	r1, [r9, r0]
 80090cc:	1a5b      	subs	r3, r3, r1
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	1e46      	subs	r6, r0, #1
 80090d2:	f006 003f 	and.w	r0, r6, #63	; 0x3f
 80090d6:	f016 063f 	ands.w	r6, r6, #63	; 0x3f
 80090da:	bf18      	it	ne
 80090dc:	2601      	movne	r6, #1
 80090de:	e39c      	b.n	800981a <dwt_ioctl+0x1e9e>
 80090e0:	9906      	ldr	r1, [sp, #24]
 80090e2:	2909      	cmp	r1, #9
 80090e4:	f040 83bd 	bne.w	8009862 <dwt_ioctl+0x1ee6>
 80090e8:	213f      	movs	r1, #63	; 0x3f
 80090ea:	9103      	str	r1, [sp, #12]
 80090ec:	e00b      	b.n	8009106 <dwt_ioctl+0x178a>
 80090ee:	b2b3      	uxth	r3, r6
 80090f0:	3201      	adds	r2, #1
 80090f2:	b2d2      	uxtb	r2, r2
 80090f4:	213f      	movs	r1, #63	; 0x3f
 80090f6:	9103      	str	r1, [sp, #12]
 80090f8:	e005      	b.n	8009106 <dwt_ioctl+0x178a>
 80090fa:	2300      	movs	r3, #0
 80090fc:	e79a      	b.n	8009034 <dwt_ioctl+0x16b8>
 80090fe:	2300      	movs	r3, #0
 8009100:	e798      	b.n	8009034 <dwt_ioctl+0x16b8>
 8009102:	9003      	str	r0, [sp, #12]
 8009104:	4663      	mov	r3, ip
 8009106:	9905      	ldr	r1, [sp, #20]
 8009108:	800b      	strh	r3, [r1, #0]
 800910a:	9b03      	ldr	r3, [sp, #12]
 800910c:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
 8009110:	b2d2      	uxtb	r2, r2
 8009112:	0413      	lsls	r3, r2, #16
 8009114:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009118:	4313      	orrs	r3, r2
 800911a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800911e:	9a04      	ldr	r2, [sp, #16]
 8009120:	6013      	str	r3, [r2, #0]
 8009122:	2300      	movs	r3, #0
 8009124:	6023      	str	r3, [r4, #0]
 8009126:	2500      	movs	r5, #0
 8009128:	f7fe bcd2 	b.w	8007ad0 <dwt_ioctl+0x154>
 800912c:	9a07      	ldr	r2, [sp, #28]
 800912e:	9b08      	ldr	r3, [sp, #32]
 8009130:	e7e9      	b.n	8009106 <dwt_ioctl+0x178a>
 8009132:	9003      	str	r0, [sp, #12]
 8009134:	e7e7      	b.n	8009106 <dwt_ioctl+0x178a>
 8009136:	9a07      	ldr	r2, [sp, #28]
 8009138:	9b08      	ldr	r3, [sp, #32]
 800913a:	e7e4      	b.n	8009106 <dwt_ioctl+0x178a>
 800913c:	213f      	movs	r1, #63	; 0x3f
 800913e:	9103      	str	r1, [sp, #12]
 8009140:	e7e1      	b.n	8009106 <dwt_ioctl+0x178a>
 8009142:	2c00      	cmp	r4, #0
 8009144:	f000 8327 	beq.w	8009796 <dwt_ioctl+0x1e1a>
 8009148:	7825      	ldrb	r5, [r4, #0]
 800914a:	6862      	ldr	r2, [r4, #4]
 800914c:	2a01      	cmp	r2, #1
 800914e:	bf15      	itete	ne
 8009150:	f46f 3360 	mvnne.w	r3, #229376	; 0x38000
 8009154:	f46f 43e0 	mvneq.w	r3, #28672	; 0x7000
 8009158:	27df      	movne	r7, #223	; 0xdf
 800915a:	27ef      	moveq	r7, #239	; 0xef
 800915c:	bf14      	ite	ne
 800915e:	f04f 0820 	movne.w	r8, #32
 8009162:	f04f 0810 	moveq.w	r8, #16
 8009166:	2400      	movs	r4, #0
 8009168:	9400      	str	r4, [sp, #0]
 800916a:	4622      	mov	r2, r4
 800916c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8009170:	f7fd fd04 	bl	8006b7c <dwt_modify32bitoffsetreg>
 8009174:	9400      	str	r4, [sp, #0]
 8009176:	463b      	mov	r3, r7
 8009178:	4622      	mov	r2, r4
 800917a:	4953      	ldr	r1, [pc, #332]	; (80092c8 <dwt_ioctl+0x194c>)
 800917c:	4630      	mov	r0, r6
 800917e:	f7fd fee7 	bl	8006f50 <dwt_modify8bitoffsetreg>
 8009182:	2d01      	cmp	r5, #1
 8009184:	d003      	beq.n	800918e <dwt_ioctl+0x1812>
 8009186:	b165      	cbz	r5, 80091a2 <dwt_ioctl+0x1826>
 8009188:	2500      	movs	r5, #0
 800918a:	f7fe bca1 	b.w	8007ad0 <dwt_ioctl+0x154>
 800918e:	4625      	mov	r5, r4
 8009190:	9400      	str	r4, [sp, #0]
 8009192:	463b      	mov	r3, r7
 8009194:	4622      	mov	r2, r4
 8009196:	494d      	ldr	r1, [pc, #308]	; (80092cc <dwt_ioctl+0x1950>)
 8009198:	4630      	mov	r0, r6
 800919a:	f7fd fed9 	bl	8006f50 <dwt_modify8bitoffsetreg>
 800919e:	f7fe bc97 	b.w	8007ad0 <dwt_ioctl+0x154>
 80091a2:	f8cd 8000 	str.w	r8, [sp]
 80091a6:	23ff      	movs	r3, #255	; 0xff
 80091a8:	2200      	movs	r2, #0
 80091aa:	4948      	ldr	r1, [pc, #288]	; (80092cc <dwt_ioctl+0x1950>)
 80091ac:	4630      	mov	r0, r6
 80091ae:	f7fd fecf 	bl	8006f50 <dwt_modify8bitoffsetreg>
 80091b2:	f7fe bc8d 	b.w	8007ad0 <dwt_ioctl+0x154>
 80091b6:	2c00      	cmp	r4, #0
 80091b8:	f000 82f0 	beq.w	800979c <dwt_ioctl+0x1e20>
 80091bc:	7822      	ldrb	r2, [r4, #0]
 80091be:	f012 0f01 	tst.w	r2, #1
 80091c2:	d02d      	beq.n	8009220 <dwt_ioctl+0x18a4>
 80091c4:	0157      	lsls	r7, r2, #5
 80091c6:	f007 0740 	and.w	r7, r7, #64	; 0x40
 80091ca:	2440      	movs	r4, #64	; 0x40
 80091cc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80091d0:	f012 0f04 	tst.w	r2, #4
 80091d4:	d028      	beq.n	8009228 <dwt_ioctl+0x18ac>
 80091d6:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 80091da:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80091de:	0112      	lsls	r2, r2, #4
 80091e0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80091e4:	4317      	orrs	r7, r2
 80091e6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80091ea:	9200      	str	r2, [sp, #0]
 80091ec:	43db      	mvns	r3, r3
 80091ee:	2200      	movs	r2, #0
 80091f0:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80091f4:	4630      	mov	r0, r6
 80091f6:	f7fd fcc1 	bl	8006b7c <dwt_modify32bitoffsetreg>
 80091fa:	43e4      	mvns	r4, r4
 80091fc:	b2a4      	uxth	r4, r4
 80091fe:	2500      	movs	r5, #0
 8009200:	9500      	str	r5, [sp, #0]
 8009202:	4623      	mov	r3, r4
 8009204:	462a      	mov	r2, r5
 8009206:	4930      	ldr	r1, [pc, #192]	; (80092c8 <dwt_ioctl+0x194c>)
 8009208:	4630      	mov	r0, r6
 800920a:	f7fe f853 	bl	80072b4 <dwt_modify16bitoffsetreg>
 800920e:	9700      	str	r7, [sp, #0]
 8009210:	4623      	mov	r3, r4
 8009212:	462a      	mov	r2, r5
 8009214:	492d      	ldr	r1, [pc, #180]	; (80092cc <dwt_ioctl+0x1950>)
 8009216:	4630      	mov	r0, r6
 8009218:	f7fe f84c 	bl	80072b4 <dwt_modify16bitoffsetreg>
 800921c:	f7fe bc58 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009220:	2700      	movs	r7, #0
 8009222:	463c      	mov	r4, r7
 8009224:	463b      	mov	r3, r7
 8009226:	e7d3      	b.n	80091d0 <dwt_ioctl+0x1854>
 8009228:	2200      	movs	r2, #0
 800922a:	e7de      	b.n	80091ea <dwt_ioctl+0x186e>
 800922c:	2308      	movs	r3, #8
 800922e:	9300      	str	r3, [sp, #0]
 8009230:	23ff      	movs	r3, #255	; 0xff
 8009232:	2201      	movs	r2, #1
 8009234:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8009238:	f7fd fe8a 	bl	8006f50 <dwt_modify8bitoffsetreg>
 800923c:	4c24      	ldr	r4, [pc, #144]	; (80092d0 <dwt_ioctl+0x1954>)
 800923e:	2302      	movs	r3, #2
 8009240:	9300      	str	r3, [sp, #0]
 8009242:	23ff      	movs	r3, #255	; 0xff
 8009244:	2203      	movs	r2, #3
 8009246:	4621      	mov	r1, r4
 8009248:	4630      	mov	r0, r6
 800924a:	f7fd fe81 	bl	8006f50 <dwt_modify8bitoffsetreg>
 800924e:	2500      	movs	r5, #0
 8009250:	9500      	str	r5, [sp, #0]
 8009252:	23f7      	movs	r3, #247	; 0xf7
 8009254:	2201      	movs	r2, #1
 8009256:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800925a:	4630      	mov	r0, r6
 800925c:	f7fd fe78 	bl	8006f50 <dwt_modify8bitoffsetreg>
 8009260:	9500      	str	r5, [sp, #0]
 8009262:	23fd      	movs	r3, #253	; 0xfd
 8009264:	2203      	movs	r2, #3
 8009266:	4621      	mov	r1, r4
 8009268:	4630      	mov	r0, r6
 800926a:	f7fd fe71 	bl	8006f50 <dwt_modify8bitoffsetreg>
 800926e:	f7fe bc2f 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009272:	2c00      	cmp	r4, #0
 8009274:	f000 8295 	beq.w	80097a2 <dwt_ioctl+0x1e26>
 8009278:	8863      	ldrh	r3, [r4, #2]
 800927a:	00db      	lsls	r3, r3, #3
 800927c:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8009280:	7822      	ldrb	r2, [r4, #0]
 8009282:	b10a      	cbz	r2, 8009288 <dwt_ioctl+0x190c>
 8009284:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009288:	9300      	str	r3, [sp, #0]
 800928a:	f24f 0307 	movw	r3, #61447	; 0xf007
 800928e:	2200      	movs	r2, #0
 8009290:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8009294:	4630      	mov	r0, r6
 8009296:	f7fe f80d 	bl	80072b4 <dwt_modify16bitoffsetreg>
 800929a:	2500      	movs	r5, #0
 800929c:	f7fe bc18 	b.w	8007ad0 <dwt_ioctl+0x154>
 80092a0:	2c00      	cmp	r4, #0
 80092a2:	f000 8281 	beq.w	80097a8 <dwt_ioctl+0x1e2c>
 80092a6:	b2e3      	uxtb	r3, r4
 80092a8:	1c9a      	adds	r2, r3, #2
 80092aa:	2301      	movs	r3, #1
 80092ac:	4093      	lsls	r3, r2
 80092ae:	3b01      	subs	r3, #1
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	2200      	movs	r2, #0
 80092b4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80092b8:	f7fc ff7b 	bl	80061b2 <dwt_write8bitoffsetreg>
 80092bc:	2500      	movs	r5, #0
 80092be:	f7fe bc07 	b.w	8007ad0 <dwt_ioctl+0x154>
 80092c2:	bf00      	nop
 80092c4:	08016208 	.word	0x08016208
 80092c8:	00050008 	.word	0x00050008
 80092cc:	0005000c 	.word	0x0005000c
 80092d0:	00110008 	.word	0x00110008
 80092d4:	08016188 	.word	0x08016188
 80092d8:	080161c8 	.word	0x080161c8
 80092dc:	2c00      	cmp	r4, #0
 80092de:	f000 8266 	beq.w	80097ae <dwt_ioctl+0x1e32>
 80092e2:	7ae3      	ldrb	r3, [r4, #11]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	f000 8265 	beq.w	80097b4 <dwt_ioctl+0x1e38>
 80092ea:	7b63      	ldrb	r3, [r4, #13]
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d921      	bls.n	8009334 <dwt_ioctl+0x19b8>
 80092f0:	7b22      	ldrb	r2, [r4, #12]
 80092f2:	4bd7      	ldr	r3, [pc, #860]	; (8009650 <dwt_ioctl+0x1cd4>)
 80092f4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80092f8:	0112      	lsls	r2, r2, #4
 80092fa:	0ad3      	lsrs	r3, r2, #11
 80092fc:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8009300:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009304:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8009308:	bf28      	it	cs
 800930a:	3301      	addcs	r3, #1
 800930c:	b29b      	uxth	r3, r3
 800930e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009312:	9300      	str	r3, [sp, #0]
 8009314:	f64f 7380 	movw	r3, #65408	; 0xff80
 8009318:	2202      	movs	r2, #2
 800931a:	49ce      	ldr	r1, [pc, #824]	; (8009654 <dwt_ioctl+0x1cd8>)
 800931c:	4630      	mov	r0, r6
 800931e:	f7fd ffc9 	bl	80072b4 <dwt_modify16bitoffsetreg>
 8009322:	2394      	movs	r3, #148	; 0x94
 8009324:	2200      	movs	r2, #0
 8009326:	49cc      	ldr	r1, [pc, #816]	; (8009658 <dwt_ioctl+0x1cdc>)
 8009328:	4630      	mov	r0, r6
 800932a:	f7fc ff42 	bl	80061b2 <dwt_write8bitoffsetreg>
 800932e:	2500      	movs	r5, #0
 8009330:	f7fe bbce 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009334:	7b22      	ldrb	r2, [r4, #12]
 8009336:	4bc6      	ldr	r3, [pc, #792]	; (8009650 <dwt_ioctl+0x1cd4>)
 8009338:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800933c:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 8009340:	fb02 f203 	mul.w	r2, r2, r3
 8009344:	0c93      	lsrs	r3, r2, #18
 8009346:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 800934a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800934e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8009352:	bf28      	it	cs
 8009354:	3301      	addcs	r3, #1
 8009356:	b29b      	uxth	r3, r3
 8009358:	e7d9      	b.n	800930e <dwt_ioctl+0x1992>
 800935a:	2c00      	cmp	r4, #0
 800935c:	f000 822d 	beq.w	80097ba <dwt_ioctl+0x1e3e>
 8009360:	2200      	movs	r2, #0
 8009362:	49be      	ldr	r1, [pc, #760]	; (800965c <dwt_ioctl+0x1ce0>)
 8009364:	f7fc fb36 	bl	80059d4 <dwt_read32bitoffsetreg>
 8009368:	6020      	str	r0, [r4, #0]
 800936a:	2500      	movs	r5, #0
 800936c:	f7fe bbb0 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009370:	2c00      	cmp	r4, #0
 8009372:	f000 8225 	beq.w	80097c0 <dwt_ioctl+0x1e44>
 8009376:	2200      	movs	r2, #0
 8009378:	49b9      	ldr	r1, [pc, #740]	; (8009660 <dwt_ioctl+0x1ce4>)
 800937a:	f7fc fb2b 	bl	80059d4 <dwt_read32bitoffsetreg>
 800937e:	6020      	str	r0, [r4, #0]
 8009380:	2500      	movs	r5, #0
 8009382:	f7fe bba5 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009386:	2c00      	cmp	r4, #0
 8009388:	f000 821d 	beq.w	80097c6 <dwt_ioctl+0x1e4a>
 800938c:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 8009390:	6023      	str	r3, [r4, #0]
 8009392:	2500      	movs	r5, #0
 8009394:	f7fe bb9c 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009398:	2c00      	cmp	r4, #0
 800939a:	f000 8217 	beq.w	80097cc <dwt_ioctl+0x1e50>
 800939e:	2500      	movs	r5, #0
 80093a0:	950b      	str	r5, [sp, #44]	; 0x2c
 80093a2:	af10      	add	r7, sp, #64	; 0x40
 80093a4:	2319      	movs	r3, #25
 80093a6:	f847 3d10 	str.w	r3, [r7, #-16]!
 80093aa:	9700      	str	r7, [sp, #0]
 80093ac:	2304      	movs	r3, #4
 80093ae:	462a      	mov	r2, r5
 80093b0:	49ac      	ldr	r1, [pc, #688]	; (8009664 <dwt_ioctl+0x1ce8>)
 80093b2:	f7fc fef3 	bl	800619c <dwt_writetodevice>
 80093b6:	f641 7348 	movw	r3, #8008	; 0x1f48
 80093ba:	930c      	str	r3, [sp, #48]	; 0x30
 80093bc:	9700      	str	r7, [sp, #0]
 80093be:	2304      	movs	r3, #4
 80093c0:	462a      	mov	r2, r5
 80093c2:	49a9      	ldr	r1, [pc, #676]	; (8009668 <dwt_ioctl+0x1cec>)
 80093c4:	4630      	mov	r0, r6
 80093c6:	f7fc fee9 	bl	800619c <dwt_writetodevice>
 80093ca:	ab0b      	add	r3, sp, #44	; 0x2c
 80093cc:	9300      	str	r3, [sp, #0]
 80093ce:	2304      	movs	r3, #4
 80093d0:	462a      	mov	r2, r5
 80093d2:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 80093d6:	4630      	mov	r0, r6
 80093d8:	f7fc faf2 	bl	80059c0 <dwt_readfromdevice>
 80093dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093de:	6023      	str	r3, [r4, #0]
 80093e0:	f7fe bb76 	b.w	8007ad0 <dwt_ioctl+0x154>
 80093e4:	2c00      	cmp	r4, #0
 80093e6:	f000 81f4 	beq.w	80097d2 <dwt_ioctl+0x1e56>
 80093ea:	2200      	movs	r2, #0
 80093ec:	499f      	ldr	r1, [pc, #636]	; (800966c <dwt_ioctl+0x1cf0>)
 80093ee:	f7fc faf1 	bl	80059d4 <dwt_read32bitoffsetreg>
 80093f2:	b280      	uxth	r0, r0
 80093f4:	6020      	str	r0, [r4, #0]
 80093f6:	2200      	movs	r2, #0
 80093f8:	499d      	ldr	r1, [pc, #628]	; (8009670 <dwt_ioctl+0x1cf4>)
 80093fa:	4630      	mov	r0, r6
 80093fc:	f7fc faea 	bl	80059d4 <dwt_read32bitoffsetreg>
 8009400:	0d43      	lsrs	r3, r0, #21
 8009402:	019b      	lsls	r3, r3, #6
 8009404:	b29b      	uxth	r3, r3
 8009406:	6063      	str	r3, [r4, #4]
 8009408:	2500      	movs	r5, #0
 800940a:	f7fe bb61 	b.w	8007ad0 <dwt_ioctl+0x154>
 800940e:	2c00      	cmp	r4, #0
 8009410:	f000 81e2 	beq.w	80097d8 <dwt_ioctl+0x1e5c>
 8009414:	7d63      	ldrb	r3, [r4, #21]
 8009416:	b12b      	cbz	r3, 8009424 <dwt_ioctl+0x1aa8>
 8009418:	2b01      	cmp	r3, #1
 800941a:	d037      	beq.n	800948c <dwt_ioctl+0x1b10>
 800941c:	2b02      	cmp	r3, #2
 800941e:	d05e      	beq.n	80094de <dwt_ioctl+0x1b62>
 8009420:	23ff      	movs	r3, #255	; 0xff
 8009422:	e02f      	b.n	8009484 <dwt_ioctl+0x1b08>
 8009424:	2200      	movs	r2, #0
 8009426:	4993      	ldr	r1, [pc, #588]	; (8009674 <dwt_ioctl+0x1cf8>)
 8009428:	f7fc fad4 	bl	80059d4 <dwt_read32bitoffsetreg>
 800942c:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8009430:	6020      	str	r0, [r4, #0]
 8009432:	2200      	movs	r2, #0
 8009434:	4990      	ldr	r1, [pc, #576]	; (8009678 <dwt_ioctl+0x1cfc>)
 8009436:	4630      	mov	r0, r6
 8009438:	f7fc facc 	bl	80059d4 <dwt_read32bitoffsetreg>
 800943c:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8009440:	6060      	str	r0, [r4, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	498d      	ldr	r1, [pc, #564]	; (800967c <dwt_ioctl+0x1d00>)
 8009446:	4630      	mov	r0, r6
 8009448:	f7fc fac4 	bl	80059d4 <dwt_read32bitoffsetreg>
 800944c:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8009450:	60a0      	str	r0, [r4, #8]
 8009452:	2200      	movs	r2, #0
 8009454:	498a      	ldr	r1, [pc, #552]	; (8009680 <dwt_ioctl+0x1d04>)
 8009456:	4630      	mov	r0, r6
 8009458:	f7fc fabc 	bl	80059d4 <dwt_read32bitoffsetreg>
 800945c:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8009460:	60e0      	str	r0, [r4, #12]
 8009462:	2200      	movs	r2, #0
 8009464:	4987      	ldr	r1, [pc, #540]	; (8009684 <dwt_ioctl+0x1d08>)
 8009466:	4630      	mov	r0, r6
 8009468:	f7fc fab4 	bl	80059d4 <dwt_read32bitoffsetreg>
 800946c:	f3c0 0010 	ubfx	r0, r0, #0, #17
 8009470:	6120      	str	r0, [r4, #16]
 8009472:	2203      	movs	r2, #3
 8009474:	4979      	ldr	r1, [pc, #484]	; (800965c <dwt_ioctl+0x1ce0>)
 8009476:	4630      	mov	r0, r6
 8009478:	f7fc fad4 	bl	8005a24 <dwt_read8bitoffsetreg>
 800947c:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8009480:	7520      	strb	r0, [r4, #20]
 8009482:	2300      	movs	r3, #0
 8009484:	75a3      	strb	r3, [r4, #22]
 8009486:	2500      	movs	r5, #0
 8009488:	f7fe bb22 	b.w	8007ad0 <dwt_ioctl+0x154>
 800948c:	2200      	movs	r2, #0
 800948e:	497e      	ldr	r1, [pc, #504]	; (8009688 <dwt_ioctl+0x1d0c>)
 8009490:	f7fc faa0 	bl	80059d4 <dwt_read32bitoffsetreg>
 8009494:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8009498:	6020      	str	r0, [r4, #0]
 800949a:	2200      	movs	r2, #0
 800949c:	497b      	ldr	r1, [pc, #492]	; (800968c <dwt_ioctl+0x1d10>)
 800949e:	4630      	mov	r0, r6
 80094a0:	f7fc fa98 	bl	80059d4 <dwt_read32bitoffsetreg>
 80094a4:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80094a8:	6060      	str	r0, [r4, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	4978      	ldr	r1, [pc, #480]	; (8009690 <dwt_ioctl+0x1d14>)
 80094ae:	4630      	mov	r0, r6
 80094b0:	f7fc fa90 	bl	80059d4 <dwt_read32bitoffsetreg>
 80094b4:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80094b8:	60a0      	str	r0, [r4, #8]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 80094c0:	4630      	mov	r0, r6
 80094c2:	f7fc fa87 	bl	80059d4 <dwt_read32bitoffsetreg>
 80094c6:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80094ca:	60e0      	str	r0, [r4, #12]
 80094cc:	2200      	movs	r2, #0
 80094ce:	4971      	ldr	r1, [pc, #452]	; (8009694 <dwt_ioctl+0x1d18>)
 80094d0:	4630      	mov	r0, r6
 80094d2:	f7fc fa7f 	bl	80059d4 <dwt_read32bitoffsetreg>
 80094d6:	f3c0 0013 	ubfx	r0, r0, #0, #20
 80094da:	6120      	str	r0, [r4, #16]
 80094dc:	e7c9      	b.n	8009472 <dwt_ioctl+0x1af6>
 80094de:	2200      	movs	r2, #0
 80094e0:	496d      	ldr	r1, [pc, #436]	; (8009698 <dwt_ioctl+0x1d1c>)
 80094e2:	f7fc fa77 	bl	80059d4 <dwt_read32bitoffsetreg>
 80094e6:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80094ea:	6020      	str	r0, [r4, #0]
 80094ec:	2200      	movs	r2, #0
 80094ee:	496b      	ldr	r1, [pc, #428]	; (800969c <dwt_ioctl+0x1d20>)
 80094f0:	4630      	mov	r0, r6
 80094f2:	f7fc fa6f 	bl	80059d4 <dwt_read32bitoffsetreg>
 80094f6:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80094fa:	6060      	str	r0, [r4, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	4968      	ldr	r1, [pc, #416]	; (80096a0 <dwt_ioctl+0x1d24>)
 8009500:	4630      	mov	r0, r6
 8009502:	f7fc fa67 	bl	80059d4 <dwt_read32bitoffsetreg>
 8009506:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800950a:	60a0      	str	r0, [r4, #8]
 800950c:	2200      	movs	r2, #0
 800950e:	4965      	ldr	r1, [pc, #404]	; (80096a4 <dwt_ioctl+0x1d28>)
 8009510:	4630      	mov	r0, r6
 8009512:	f7fc fa5f 	bl	80059d4 <dwt_read32bitoffsetreg>
 8009516:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800951a:	60e0      	str	r0, [r4, #12]
 800951c:	2200      	movs	r2, #0
 800951e:	4962      	ldr	r1, [pc, #392]	; (80096a8 <dwt_ioctl+0x1d2c>)
 8009520:	4630      	mov	r0, r6
 8009522:	f7fc fa57 	bl	80059d4 <dwt_read32bitoffsetreg>
 8009526:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800952a:	6120      	str	r0, [r4, #16]
 800952c:	e7a1      	b.n	8009472 <dwt_ioctl+0x1af6>
 800952e:	2500      	movs	r5, #0
 8009530:	f7fe bace 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009534:	2500      	movs	r5, #0
 8009536:	f7fe bacb 	b.w	8007ad0 <dwt_ioctl+0x154>
 800953a:	2500      	movs	r5, #0
 800953c:	f7fe bac8 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009540:	2500      	movs	r5, #0
 8009542:	f7fe bac5 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009546:	2500      	movs	r5, #0
 8009548:	f7fe bac2 	b.w	8007ad0 <dwt_ioctl+0x154>
 800954c:	2500      	movs	r5, #0
 800954e:	f7fe babf 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009552:	2500      	movs	r5, #0
 8009554:	f7fe babc 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009558:	2500      	movs	r5, #0
 800955a:	f7fe bab9 	b.w	8007ad0 <dwt_ioctl+0x154>
 800955e:	2500      	movs	r5, #0
 8009560:	f7fe bab6 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009564:	2500      	movs	r5, #0
 8009566:	f7fe bab3 	b.w	8007ad0 <dwt_ioctl+0x154>
 800956a:	2500      	movs	r5, #0
 800956c:	f7fe bab0 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009570:	2500      	movs	r5, #0
 8009572:	f7fe baad 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009576:	2500      	movs	r5, #0
 8009578:	f7fe baaa 	b.w	8007ad0 <dwt_ioctl+0x154>
 800957c:	2500      	movs	r5, #0
 800957e:	f7fe baa7 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009582:	2500      	movs	r5, #0
 8009584:	f7fe baa4 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009588:	2500      	movs	r5, #0
 800958a:	f7fe baa1 	b.w	8007ad0 <dwt_ioctl+0x154>
 800958e:	2500      	movs	r5, #0
 8009590:	f7fe ba9e 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009594:	2500      	movs	r5, #0
 8009596:	f7fe ba9b 	b.w	8007ad0 <dwt_ioctl+0x154>
 800959a:	2500      	movs	r5, #0
 800959c:	f7fe ba98 	b.w	8007ad0 <dwt_ioctl+0x154>
 80095a0:	2500      	movs	r5, #0
 80095a2:	f7fe ba95 	b.w	8007ad0 <dwt_ioctl+0x154>
 80095a6:	2500      	movs	r5, #0
 80095a8:	f7fe ba92 	b.w	8007ad0 <dwt_ioctl+0x154>
 80095ac:	2500      	movs	r5, #0
 80095ae:	f7fe ba8f 	b.w	8007ad0 <dwt_ioctl+0x154>
 80095b2:	2500      	movs	r5, #0
 80095b4:	f7fe ba8c 	b.w	8007ad0 <dwt_ioctl+0x154>
 80095b8:	2500      	movs	r5, #0
 80095ba:	f7fe ba89 	b.w	8007ad0 <dwt_ioctl+0x154>
 80095be:	2500      	movs	r5, #0
 80095c0:	f7fe ba86 	b.w	8007ad0 <dwt_ioctl+0x154>
 80095c4:	2500      	movs	r5, #0
 80095c6:	f7fe ba83 	b.w	8007ad0 <dwt_ioctl+0x154>
 80095ca:	2500      	movs	r5, #0
 80095cc:	f7fe ba80 	b.w	8007ad0 <dwt_ioctl+0x154>
 80095d0:	2500      	movs	r5, #0
 80095d2:	f7fe ba7d 	b.w	8007ad0 <dwt_ioctl+0x154>
 80095d6:	2500      	movs	r5, #0
 80095d8:	f7fe ba7a 	b.w	8007ad0 <dwt_ioctl+0x154>
 80095dc:	2500      	movs	r5, #0
 80095de:	f7fe ba77 	b.w	8007ad0 <dwt_ioctl+0x154>
 80095e2:	2500      	movs	r5, #0
 80095e4:	f7fe ba74 	b.w	8007ad0 <dwt_ioctl+0x154>
 80095e8:	2500      	movs	r5, #0
 80095ea:	f7fe ba71 	b.w	8007ad0 <dwt_ioctl+0x154>
 80095ee:	2500      	movs	r5, #0
 80095f0:	f7fe ba6e 	b.w	8007ad0 <dwt_ioctl+0x154>
 80095f4:	2500      	movs	r5, #0
 80095f6:	f7fe ba6b 	b.w	8007ad0 <dwt_ioctl+0x154>
 80095fa:	2500      	movs	r5, #0
 80095fc:	f7fe ba68 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009600:	2500      	movs	r5, #0
 8009602:	f7fe ba65 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009606:	2500      	movs	r5, #0
 8009608:	f7fe ba62 	b.w	8007ad0 <dwt_ioctl+0x154>
 800960c:	2500      	movs	r5, #0
 800960e:	f7fe ba5f 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009612:	2500      	movs	r5, #0
 8009614:	f7fe ba5c 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009618:	2500      	movs	r5, #0
 800961a:	f7fe ba59 	b.w	8007ad0 <dwt_ioctl+0x154>
 800961e:	2500      	movs	r5, #0
 8009620:	f7fe ba56 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009624:	2500      	movs	r5, #0
 8009626:	f7fe ba53 	b.w	8007ad0 <dwt_ioctl+0x154>
 800962a:	2500      	movs	r5, #0
 800962c:	f7fe ba50 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009630:	2500      	movs	r5, #0
 8009632:	f7fe ba4d 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009636:	2500      	movs	r5, #0
 8009638:	f7fe ba4a 	b.w	8007ad0 <dwt_ioctl+0x154>
 800963c:	2500      	movs	r5, #0
 800963e:	f7fe ba47 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009642:	2500      	movs	r5, #0
 8009644:	f7fe ba44 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009648:	2500      	movs	r5, #0
 800964a:	f7fe ba41 	b.w	8007ad0 <dwt_ioctl+0x154>
 800964e:	bf00      	nop
 8009650:	08016244 	.word	0x08016244
 8009654:	000e0012 	.word	0x000e0012
 8009658:	000e0016 	.word	0x000e0016
 800965c:	00030060 	.word	0x00030060
 8009660:	000f0048 	.word	0x000f0048
 8009664:	001f0004 	.word	0x001f0004
 8009668:	001f0008 	.word	0x001f0008
 800966c:	000c0048 	.word	0x000c0048
 8009670:	000c0028 	.word	0x000c0028
 8009674:	000c0058 	.word	0x000c0058
 8009678:	000c0030 	.word	0x000c0030
 800967c:	000c0034 	.word	0x000c0034
 8009680:	000c0038 	.word	0x000c0038
 8009684:	000c002c 	.word	0x000c002c
 8009688:	000d0020 	.word	0x000d0020
 800968c:	000c0064 	.word	0x000c0064
 8009690:	000c0068 	.word	0x000c0068
 8009694:	000c0060 	.word	0x000c0060
 8009698:	000d0068 	.word	0x000d0068
 800969c:	000d0040 	.word	0x000d0040
 80096a0:	000d0044 	.word	0x000d0044
 80096a4:	000d0048 	.word	0x000d0048
 80096a8:	000d003c 	.word	0x000d003c
 80096ac:	2500      	movs	r5, #0
 80096ae:	f7fe ba0f 	b.w	8007ad0 <dwt_ioctl+0x154>
 80096b2:	2500      	movs	r5, #0
 80096b4:	f7fe ba0c 	b.w	8007ad0 <dwt_ioctl+0x154>
 80096b8:	2500      	movs	r5, #0
 80096ba:	f7fe ba09 	b.w	8007ad0 <dwt_ioctl+0x154>
 80096be:	2500      	movs	r5, #0
 80096c0:	f7fe ba06 	b.w	8007ad0 <dwt_ioctl+0x154>
 80096c4:	2500      	movs	r5, #0
 80096c6:	f7fe ba03 	b.w	8007ad0 <dwt_ioctl+0x154>
 80096ca:	2500      	movs	r5, #0
 80096cc:	f7fe ba00 	b.w	8007ad0 <dwt_ioctl+0x154>
 80096d0:	2500      	movs	r5, #0
 80096d2:	f7fe b9fd 	b.w	8007ad0 <dwt_ioctl+0x154>
 80096d6:	2500      	movs	r5, #0
 80096d8:	f7fe b9fa 	b.w	8007ad0 <dwt_ioctl+0x154>
 80096dc:	2500      	movs	r5, #0
 80096de:	f7fe b9f7 	b.w	8007ad0 <dwt_ioctl+0x154>
 80096e2:	2500      	movs	r5, #0
 80096e4:	f7fe b9f4 	b.w	8007ad0 <dwt_ioctl+0x154>
 80096e8:	2500      	movs	r5, #0
 80096ea:	f7fe b9f1 	b.w	8007ad0 <dwt_ioctl+0x154>
 80096ee:	2500      	movs	r5, #0
 80096f0:	f7fe b9ee 	b.w	8007ad0 <dwt_ioctl+0x154>
 80096f4:	2500      	movs	r5, #0
 80096f6:	f7fe b9eb 	b.w	8007ad0 <dwt_ioctl+0x154>
 80096fa:	2500      	movs	r5, #0
 80096fc:	f7fe b9e8 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009700:	2500      	movs	r5, #0
 8009702:	f7fe b9e5 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009706:	2500      	movs	r5, #0
 8009708:	f7fe b9e2 	b.w	8007ad0 <dwt_ioctl+0x154>
 800970c:	2500      	movs	r5, #0
 800970e:	f7fe b9df 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009712:	2500      	movs	r5, #0
 8009714:	f7fe b9dc 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009718:	2500      	movs	r5, #0
 800971a:	f7fe b9d9 	b.w	8007ad0 <dwt_ioctl+0x154>
 800971e:	2500      	movs	r5, #0
 8009720:	f7fe b9d6 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009724:	2500      	movs	r5, #0
 8009726:	f7fe b9d3 	b.w	8007ad0 <dwt_ioctl+0x154>
 800972a:	2500      	movs	r5, #0
 800972c:	f7fe b9d0 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009730:	2500      	movs	r5, #0
 8009732:	f7fe b9cd 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009736:	2500      	movs	r5, #0
 8009738:	f7fe b9ca 	b.w	8007ad0 <dwt_ioctl+0x154>
 800973c:	2500      	movs	r5, #0
 800973e:	f7fe b9c7 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009742:	2500      	movs	r5, #0
 8009744:	f7fe b9c4 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009748:	2500      	movs	r5, #0
 800974a:	f7fe b9c1 	b.w	8007ad0 <dwt_ioctl+0x154>
 800974e:	2500      	movs	r5, #0
 8009750:	f7fe b9be 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009754:	2500      	movs	r5, #0
 8009756:	f7fe b9bb 	b.w	8007ad0 <dwt_ioctl+0x154>
 800975a:	2500      	movs	r5, #0
 800975c:	f7fe b9b8 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009760:	2500      	movs	r5, #0
 8009762:	f7fe b9b5 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009766:	2500      	movs	r5, #0
 8009768:	f7fe b9b2 	b.w	8007ad0 <dwt_ioctl+0x154>
 800976c:	2500      	movs	r5, #0
 800976e:	f7fe b9af 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009772:	2500      	movs	r5, #0
 8009774:	f7fe b9ac 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009778:	2500      	movs	r5, #0
 800977a:	f7fe b9a9 	b.w	8007ad0 <dwt_ioctl+0x154>
 800977e:	2500      	movs	r5, #0
 8009780:	f7fe b9a6 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009784:	2500      	movs	r5, #0
 8009786:	f7fe b9a3 	b.w	8007ad0 <dwt_ioctl+0x154>
 800978a:	2500      	movs	r5, #0
 800978c:	f7fe b9a0 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009790:	2500      	movs	r5, #0
 8009792:	f7fe b99d 	b.w	8007ad0 <dwt_ioctl+0x154>
 8009796:	2500      	movs	r5, #0
 8009798:	f7fe b99a 	b.w	8007ad0 <dwt_ioctl+0x154>
 800979c:	2500      	movs	r5, #0
 800979e:	f7fe b997 	b.w	8007ad0 <dwt_ioctl+0x154>
 80097a2:	2500      	movs	r5, #0
 80097a4:	f7fe b994 	b.w	8007ad0 <dwt_ioctl+0x154>
 80097a8:	2500      	movs	r5, #0
 80097aa:	f7fe b991 	b.w	8007ad0 <dwt_ioctl+0x154>
 80097ae:	2500      	movs	r5, #0
 80097b0:	f7fe b98e 	b.w	8007ad0 <dwt_ioctl+0x154>
 80097b4:	2500      	movs	r5, #0
 80097b6:	f7fe b98b 	b.w	8007ad0 <dwt_ioctl+0x154>
 80097ba:	2500      	movs	r5, #0
 80097bc:	f7fe b988 	b.w	8007ad0 <dwt_ioctl+0x154>
 80097c0:	2500      	movs	r5, #0
 80097c2:	f7fe b985 	b.w	8007ad0 <dwt_ioctl+0x154>
 80097c6:	2500      	movs	r5, #0
 80097c8:	f7fe b982 	b.w	8007ad0 <dwt_ioctl+0x154>
 80097cc:	2500      	movs	r5, #0
 80097ce:	f7fe b97f 	b.w	8007ad0 <dwt_ioctl+0x154>
 80097d2:	2500      	movs	r5, #0
 80097d4:	f7fe b97c 	b.w	8007ad0 <dwt_ioctl+0x154>
 80097d8:	2500      	movs	r5, #0
 80097da:	f7fe b979 	b.w	8007ad0 <dwt_ioctl+0x154>
 80097de:	f899 3011 	ldrb.w	r3, [r9, #17]
 80097e2:	1e5a      	subs	r2, r3, #1
 80097e4:	b2d2      	uxtb	r2, r2
 80097e6:	2a01      	cmp	r2, #1
 80097e8:	f67f a801 	bls.w	80087ee <dwt_ioctl+0xe72>
 80097ec:	2202      	movs	r2, #2
 80097ee:	f7fe bf88 	b.w	8008702 <dwt_ioctl+0xd86>
 80097f2:	2f00      	cmp	r7, #0
 80097f4:	f43f ac62 	beq.w	80090bc <dwt_ioctl+0x1740>
 80097f8:	f819 1000 	ldrb.w	r1, [r9, r0]
 80097fc:	1a5b      	subs	r3, r3, r1
 80097fe:	b29b      	uxth	r3, r3
 8009800:	e481      	b.n	8009106 <dwt_ioctl+0x178a>
 8009802:	283f      	cmp	r0, #63	; 0x3f
 8009804:	d027      	beq.n	8009856 <dwt_ioctl+0x1eda>
 8009806:	2e00      	cmp	r6, #0
 8009808:	f47f ac5e 	bne.w	80090c8 <dwt_ioctl+0x174c>
 800980c:	3001      	adds	r0, #1
 800980e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8009812:	f819 1000 	ldrb.w	r1, [r9, r0]
 8009816:	440b      	add	r3, r1
 8009818:	b29b      	uxth	r3, r3
 800981a:	459c      	cmp	ip, r3
 800981c:	f43f ac71 	beq.w	8009102 <dwt_ioctl+0x1786>
 8009820:	3d01      	subs	r5, #1
 8009822:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8009826:	f43f ac32 	beq.w	800908e <dwt_ioctl+0x1712>
 800982a:	459e      	cmp	lr, r3
 800982c:	f4bf ac40 	bcs.w	80090b0 <dwt_ioctl+0x1734>
 8009830:	4598      	cmp	r8, r3
 8009832:	d9de      	bls.n	80097f2 <dwt_ioctl+0x1e76>
 8009834:	ebac 0103 	sub.w	r1, ip, r3
 8009838:	b209      	sxth	r1, r1
 800983a:	2900      	cmp	r1, #0
 800983c:	bfb8      	it	lt
 800983e:	4249      	neglt	r1, r1
 8009840:	4559      	cmp	r1, fp
 8009842:	f77f ac2e 	ble.w	80090a2 <dwt_ioctl+0x1726>
 8009846:	2f00      	cmp	r7, #0
 8009848:	f47f ac70 	bne.w	800912c <dwt_ioctl+0x17b0>
 800984c:	283f      	cmp	r0, #63	; 0x3f
 800984e:	d1da      	bne.n	8009806 <dwt_ioctl+0x1e8a>
 8009850:	2f00      	cmp	r7, #0
 8009852:	f47f ac70 	bne.w	8009136 <dwt_ioctl+0x17ba>
 8009856:	2a03      	cmp	r2, #3
 8009858:	f43f ac70 	beq.w	800913c <dwt_ioctl+0x17c0>
 800985c:	2a02      	cmp	r2, #2
 800985e:	f43f ac3f 	beq.w	80090e0 <dwt_ioctl+0x1764>
 8009862:	f81a 1002 	ldrb.w	r1, [sl, r2]
 8009866:	185e      	adds	r6, r3, r1
 8009868:	4566      	cmp	r6, ip
 800986a:	f77f ac40 	ble.w	80090ee <dwt_ioctl+0x1772>
 800986e:	440b      	add	r3, r1
 8009870:	b29b      	uxth	r3, r3
 8009872:	3201      	adds	r2, #1
 8009874:	b2d2      	uxtb	r2, r2
 8009876:	2700      	movs	r7, #0
 8009878:	e426      	b.n	80090c8 <dwt_ioctl+0x174c>
 800987a:	bf00      	nop

0800987c <ull_initialise>:
 800987c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009880:	4605      	mov	r5, r0
 8009882:	460e      	mov	r6, r1
 8009884:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009886:	2b00      	cmp	r3, #0
 8009888:	d05c      	beq.n	8009944 <ull_initialise+0xc8>
 800988a:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 800988c:	2300      	movs	r3, #0
 800988e:	73e3      	strb	r3, [r4, #15]
 8009890:	2202      	movs	r2, #2
 8009892:	8262      	strh	r2, [r4, #18]
 8009894:	75a3      	strb	r3, [r4, #22]
 8009896:	75e3      	strb	r3, [r4, #23]
 8009898:	7423      	strb	r3, [r4, #16]
 800989a:	72a3      	strb	r3, [r4, #10]
 800989c:	72e3      	strb	r3, [r4, #11]
 800989e:	2104      	movs	r1, #4
 80098a0:	4628      	mov	r0, r5
 80098a2:	f7fc fd33 	bl	800630c <_dwt_otpread>
 80098a6:	4607      	mov	r7, r0
 80098a8:	2105      	movs	r1, #5
 80098aa:	4628      	mov	r0, r5
 80098ac:	f7fc fd2e 	bl	800630c <_dwt_otpread>
 80098b0:	4680      	mov	r8, r0
 80098b2:	210a      	movs	r1, #10
 80098b4:	4628      	mov	r0, r5
 80098b6:	f7fc fd29 	bl	800630c <_dwt_otpread>
 80098ba:	f3c0 4004 	ubfx	r0, r0, #16, #5
 80098be:	7220      	strb	r0, [r4, #8]
 80098c0:	b127      	cbz	r7, 80098cc <ull_initialise+0x50>
 80098c2:	f1b8 0f00 	cmp.w	r8, #0
 80098c6:	d001      	beq.n	80098cc <ull_initialise+0x50>
 80098c8:	2800      	cmp	r0, #0
 80098ca:	d140      	bne.n	800994e <ull_initialise+0xd2>
 80098cc:	2120      	movs	r1, #32
 80098ce:	4628      	mov	r0, r5
 80098d0:	f7fc fd1c 	bl	800630c <_dwt_otpread>
 80098d4:	4b2f      	ldr	r3, [pc, #188]	; (8009994 <ull_initialise+0x118>)
 80098d6:	4298      	cmp	r0, r3
 80098d8:	bf0c      	ite	eq
 80098da:	2301      	moveq	r3, #1
 80098dc:	2300      	movne	r3, #0
 80098de:	7263      	strb	r3, [r4, #9]
 80098e0:	f016 0f10 	tst.w	r6, #16
 80098e4:	d137      	bne.n	8009956 <ull_initialise+0xda>
 80098e6:	f016 0f20 	tst.w	r6, #32
 80098ea:	d13a      	bne.n	8009962 <ull_initialise+0xe6>
 80098ec:	f016 0f40 	tst.w	r6, #64	; 0x40
 80098f0:	d13d      	bne.n	800996e <ull_initialise+0xf2>
 80098f2:	f016 0f80 	tst.w	r6, #128	; 0x80
 80098f6:	d141      	bne.n	800997c <ull_initialise+0x100>
 80098f8:	7ae3      	ldrb	r3, [r4, #11]
 80098fa:	b90b      	cbnz	r3, 8009900 <ull_initialise+0x84>
 80098fc:	2385      	movs	r3, #133	; 0x85
 80098fe:	72e3      	strb	r3, [r4, #11]
 8009900:	7aa3      	ldrb	r3, [r4, #10]
 8009902:	b90b      	cbnz	r3, 8009908 <ull_initialise+0x8c>
 8009904:	2374      	movs	r3, #116	; 0x74
 8009906:	72a3      	strb	r3, [r4, #10]
 8009908:	211f      	movs	r1, #31
 800990a:	4628      	mov	r0, r5
 800990c:	f7fc fcfe 	bl	800630c <_dwt_otpread>
 8009910:	7360      	strb	r0, [r4, #13]
 8009912:	211e      	movs	r1, #30
 8009914:	4628      	mov	r0, r5
 8009916:	f7fc fcf9 	bl	800630c <_dwt_otpread>
 800991a:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
 800991e:	bf12      	itee	ne
 8009920:	73a0      	strbne	r0, [r4, #14]
 8009922:	232e      	moveq	r3, #46	; 0x2e
 8009924:	73a3      	strbeq	r3, [r4, #14]
 8009926:	7ba3      	ldrb	r3, [r4, #14]
 8009928:	2200      	movs	r2, #0
 800992a:	491b      	ldr	r1, [pc, #108]	; (8009998 <ull_initialise+0x11c>)
 800992c:	4628      	mov	r0, r5
 800992e:	f7fc fc40 	bl	80061b2 <dwt_write8bitoffsetreg>
 8009932:	2135      	movs	r1, #53	; 0x35
 8009934:	4628      	mov	r0, r5
 8009936:	f7fc fce9 	bl	800630c <_dwt_otpread>
 800993a:	4603      	mov	r3, r0
 800993c:	bb20      	cbnz	r0, 8009988 <ull_initialise+0x10c>
 800993e:	2000      	movs	r0, #0
 8009940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009944:	202c      	movs	r0, #44	; 0x2c
 8009946:	f00a fa9b 	bl	8013e80 <malloc>
 800994a:	6528      	str	r0, [r5, #80]	; 0x50
 800994c:	e79d      	b.n	800988a <ull_initialise+0xe>
 800994e:	4628      	mov	r0, r5
 8009950:	f7fd fcca 	bl	80072e8 <_dwt_prog_ldo_and_bias_tune>
 8009954:	e7ba      	b.n	80098cc <ull_initialise+0x50>
 8009956:	2106      	movs	r1, #6
 8009958:	4628      	mov	r0, r5
 800995a:	f7fc fcd7 	bl	800630c <_dwt_otpread>
 800995e:	6020      	str	r0, [r4, #0]
 8009960:	e7c1      	b.n	80098e6 <ull_initialise+0x6a>
 8009962:	2107      	movs	r1, #7
 8009964:	4628      	mov	r0, r5
 8009966:	f7fc fcd1 	bl	800630c <_dwt_otpread>
 800996a:	6060      	str	r0, [r4, #4]
 800996c:	e7be      	b.n	80098ec <ull_initialise+0x70>
 800996e:	2108      	movs	r1, #8
 8009970:	4628      	mov	r0, r5
 8009972:	f7fc fccb 	bl	800630c <_dwt_otpread>
 8009976:	0c00      	lsrs	r0, r0, #16
 8009978:	72a0      	strb	r0, [r4, #10]
 800997a:	e7ba      	b.n	80098f2 <ull_initialise+0x76>
 800997c:	2109      	movs	r1, #9
 800997e:	4628      	mov	r0, r5
 8009980:	f7fc fcc4 	bl	800630c <_dwt_otpread>
 8009984:	72e0      	strb	r0, [r4, #11]
 8009986:	e7b7      	b.n	80098f8 <ull_initialise+0x7c>
 8009988:	2200      	movs	r2, #0
 800998a:	4904      	ldr	r1, [pc, #16]	; (800999c <ull_initialise+0x120>)
 800998c:	4628      	mov	r0, r5
 800998e:	f7fc fd63 	bl	8006458 <dwt_write32bitoffsetreg>
 8009992:	e7d4      	b.n	800993e <ull_initialise+0xc2>
 8009994:	10000240 	.word	0x10000240
 8009998:	00090014 	.word	0x00090014
 800999c:	00090004 	.word	0x00090004

080099a0 <_init>:
 80099a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099a2:	b085      	sub	sp, #20
 80099a4:	4604      	mov	r4, r0
 80099a6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80099a8:	6819      	ldr	r1, [r3, #0]
 80099aa:	f7ff ff67 	bl	800987c <ull_initialise>
 80099ae:	4606      	mov	r6, r0
 80099b0:	6823      	ldr	r3, [r4, #0]
 80099b2:	691b      	ldr	r3, [r3, #16]
 80099b4:	4798      	blx	r3
 80099b6:	ab03      	add	r3, sp, #12
 80099b8:	2200      	movs	r2, #0
 80099ba:	4611      	mov	r1, r2
 80099bc:	4620      	mov	r0, r4
 80099be:	f7fd ffdd 	bl	800797c <dwt_ioctl>
 80099c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c6:	6819      	ldr	r1, [r3, #0]
 80099c8:	4620      	mov	r0, r4
 80099ca:	f7fd fdad 	bl	8007528 <ull_configure>
 80099ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d2:	6859      	ldr	r1, [r3, #4]
 80099d4:	4620      	mov	r0, r4
 80099d6:	f7fd fb47 	bl	8007068 <ull_configuretxrf>
 80099da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099de:	89db      	ldrh	r3, [r3, #14]
 80099e0:	2200      	movs	r2, #0
 80099e2:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 80099e6:	4620      	mov	r0, r4
 80099e8:	f7fc fc35 	bl	8006256 <dwt_write16bitoffsetreg>
 80099ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099f0:	899b      	ldrh	r3, [r3, #12]
 80099f2:	2200      	movs	r2, #0
 80099f4:	4952      	ldr	r1, [pc, #328]	; (8009b40 <_init+0x1a0>)
 80099f6:	4620      	mov	r0, r4
 80099f8:	f7fc fc2d 	bl	8006256 <dwt_write16bitoffsetreg>
 80099fc:	2100      	movs	r1, #0
 80099fe:	4620      	mov	r0, r4
 8009a00:	f7fc fec6 	bl	8006790 <ull_setrxaftertxdelay>
 8009a04:	2500      	movs	r5, #0
 8009a06:	9500      	str	r5, [sp, #0]
 8009a08:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 8009a0c:	462a      	mov	r2, r5
 8009a0e:	2110      	movs	r1, #16
 8009a10:	4620      	mov	r0, r4
 8009a12:	f7fd fc4f 	bl	80072b4 <dwt_modify16bitoffsetreg>
 8009a16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a1a:	895a      	ldrh	r2, [r3, #10]
 8009a1c:	8919      	ldrh	r1, [r3, #8]
 8009a1e:	4620      	mov	r0, r4
 8009a20:	f7fd fbb2 	bl	8007188 <ull_configureframefilter>
 8009a24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a28:	8a1b      	ldrh	r3, [r3, #16]
 8009a2a:	2202      	movs	r2, #2
 8009a2c:	210c      	movs	r1, #12
 8009a2e:	4620      	mov	r0, r4
 8009a30:	f7fc fc11 	bl	8006256 <dwt_write16bitoffsetreg>
 8009a34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a38:	8a5b      	ldrh	r3, [r3, #18]
 8009a3a:	462a      	mov	r2, r5
 8009a3c:	210c      	movs	r1, #12
 8009a3e:	4620      	mov	r0, r4
 8009a40:	f7fc fc09 	bl	8006256 <dwt_write16bitoffsetreg>
 8009a44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a46:	7a19      	ldrb	r1, [r3, #8]
 8009a48:	4620      	mov	r0, r4
 8009a4a:	f7fd fc69 	bl	8007320 <ull_setleds>
 8009a4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a50:	68d9      	ldr	r1, [r3, #12]
 8009a52:	4620      	mov	r0, r4
 8009a54:	f7fc feb2 	bl	80067bc <ull_setlnapamode>
 8009a58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a5a:	7e0b      	ldrb	r3, [r1, #24]
 8009a5c:	694a      	ldr	r2, [r1, #20]
 8009a5e:	6909      	ldr	r1, [r1, #16]
 8009a60:	4620      	mov	r0, r4
 8009a62:	f7fd f9e9 	bl	8006e38 <ull_setinterrupt>
 8009a66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a68:	7f9a      	ldrb	r2, [r3, #30]
 8009a6a:	8b99      	ldrh	r1, [r3, #28]
 8009a6c:	4620      	mov	r0, r4
 8009a6e:	f7fc fcb7 	bl	80063e0 <ull_configuresleep>
 8009a72:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009a74:	7b93      	ldrb	r3, [r2, #14]
 8009a76:	2b2e      	cmp	r3, #46	; 0x2e
 8009a78:	d005      	beq.n	8009a86 <_init+0xe6>
 8009a7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a7c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009a80:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 8009a84:	d00a      	beq.n	8009a9c <_init+0xfc>
 8009a86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a88:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009a8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a90:	7393      	strb	r3, [r2, #14]
 8009a92:	2200      	movs	r2, #0
 8009a94:	492b      	ldr	r1, [pc, #172]	; (8009b44 <_init+0x1a4>)
 8009a96:	4620      	mov	r0, r4
 8009a98:	f7fc fb8b 	bl	80061b2 <dwt_write8bitoffsetreg>
 8009a9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a9e:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	f7fd fa68 	bl	8006f78 <ull_configciadiag>
 8009aa8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009aaa:	6a19      	ldr	r1, [r3, #32]
 8009aac:	4620      	mov	r0, r4
 8009aae:	f7fc fea7 	bl	8006800 <ull_configurestskey>
 8009ab2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ab4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	f7fc fec6 	bl	8006848 <ull_configurestsiv>
 8009abc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009abe:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8009ac2:	bba3      	cbnz	r3, 8009b2e <_init+0x18e>
 8009ac4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ac6:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8009aca:	4620      	mov	r0, r4
 8009acc:	f7fc fbb0 	bl	8006230 <ull_configeventcounters>
 8009ad0:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
 8009ad4:	2d00      	cmp	r5, #0
 8009ad6:	db27      	blt.n	8009b28 <_init+0x188>
 8009ad8:	2301      	movs	r3, #1
 8009ada:	fa03 f505 	lsl.w	r5, r3, r5
 8009ade:	b2af      	uxth	r7, r5
 8009ae0:	f04f 7290 	mov.w	r2, #18874368	; 0x1200000
 8009ae4:	4639      	mov	r1, r7
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	f7fd f988 	bl	8006dfc <ull_setgpiomode>
 8009aec:	f10d 030a 	add.w	r3, sp, #10
 8009af0:	9300      	str	r3, [sp, #0]
 8009af2:	2302      	movs	r3, #2
 8009af4:	2200      	movs	r2, #0
 8009af6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8009afa:	4620      	mov	r0, r4
 8009afc:	f7fb ff60 	bl	80059c0 <dwt_readfromdevice>
 8009b00:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8009b04:	ea23 0305 	bic.w	r3, r3, r5
 8009b08:	f8ad 300a 	strh.w	r3, [sp, #10]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	490e      	ldr	r1, [pc, #56]	; (8009b48 <_init+0x1a8>)
 8009b10:	4620      	mov	r0, r4
 8009b12:	f7fc fba0 	bl	8006256 <dwt_write16bitoffsetreg>
 8009b16:	f994 204d 	ldrsb.w	r2, [r4, #77]	; 0x4d
 8009b1a:	fab2 f282 	clz	r2, r2
 8009b1e:	0952      	lsrs	r2, r2, #5
 8009b20:	4639      	mov	r1, r7
 8009b22:	4620      	mov	r0, r4
 8009b24:	f7fd fc7a 	bl	800741c <ull_setgpiovalue>
 8009b28:	4630      	mov	r0, r6
 8009b2a:	b005      	add	sp, #20
 8009b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b2e:	2301      	movs	r3, #1
 8009b30:	9300      	str	r3, [sp, #0]
 8009b32:	23ff      	movs	r3, #255	; 0xff
 8009b34:	2200      	movs	r2, #0
 8009b36:	4905      	ldr	r1, [pc, #20]	; (8009b4c <_init+0x1ac>)
 8009b38:	4620      	mov	r0, r4
 8009b3a:	f7fd fa09 	bl	8006f50 <dwt_modify8bitoffsetreg>
 8009b3e:	e7c1      	b.n	8009ac4 <_init+0x124>
 8009b40:	00010004 	.word	0x00010004
 8009b44:	00090014 	.word	0x00090014
 8009b48:	00050008 	.word	0x00050008
 8009b4c:	00020004 	.word	0x00020004

08009b50 <dwt_dbg_fn>:
 8009b50:	2998      	cmp	r1, #152	; 0x98
 8009b52:	4802      	ldr	r0, [pc, #8]	; (8009b5c <dwt_dbg_fn+0xc>)
 8009b54:	bf18      	it	ne
 8009b56:	2000      	movne	r0, #0
 8009b58:	4770      	bx	lr
 8009b5a:	bf00      	nop
 8009b5c:	0801634c 	.word	0x0801634c

08009b60 <_deinit>:
 8009b60:	4770      	bx	lr

08009b62 <dwt_xfer3xxx>:
 8009b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	4605      	mov	r5, r0
 8009b6a:	460f      	mov	r7, r1
 8009b6c:	461e      	mov	r6, r3
 8009b6e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8009b72:	1e59      	subs	r1, r3, #1
 8009b74:	b289      	uxth	r1, r1
 8009b76:	2901      	cmp	r1, #1
 8009b78:	d91c      	bls.n	8009bb4 <dwt_xfer3xxx+0x52>
 8009b7a:	19d0      	adds	r0, r2, r7
 8009b7c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8009b80:	443a      	add	r2, r7
 8009b82:	f3c2 4104 	ubfx	r1, r2, #16, #5
 8009b86:	0082      	lsls	r2, r0, #2
 8009b88:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8009b8c:	ea43 0102 	orr.w	r1, r3, r2
 8009b90:	0a09      	lsrs	r1, r1, #8
 8009b92:	f88d 100c 	strb.w	r1, [sp, #12]
 8009b96:	b920      	cbnz	r0, 8009ba2 <dwt_xfer3xxx+0x40>
 8009b98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b9c:	d018      	beq.n	8009bd0 <dwt_xfer3xxx+0x6e>
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d037      	beq.n	8009c12 <dwt_xfer3xxx+0xb0>
 8009ba2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8009ba6:	f88d 100c 	strb.w	r1, [sp, #12]
 8009baa:	431a      	orrs	r2, r3
 8009bac:	f88d 200d 	strb.w	r2, [sp, #13]
 8009bb0:	2402      	movs	r4, #2
 8009bb2:	e005      	b.n	8009bc0 <dwt_xfer3xxx+0x5e>
 8009bb4:	007a      	lsls	r2, r7, #1
 8009bb6:	f062 027e 	orn	r2, r2, #126	; 0x7e
 8009bba:	f88d 200c 	strb.w	r2, [sp, #12]
 8009bbe:	2401      	movs	r4, #1
 8009bc0:	2b02      	cmp	r3, #2
 8009bc2:	d006      	beq.n	8009bd2 <dwt_xfer3xxx+0x70>
 8009bc4:	d326      	bcc.n	8009c14 <dwt_xfer3xxx+0xb2>
 8009bc6:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8009bca:	2b03      	cmp	r3, #3
 8009bcc:	d901      	bls.n	8009bd2 <dwt_xfer3xxx+0x70>
 8009bce:	e7fe      	b.n	8009bce <dwt_xfer3xxx+0x6c>
 8009bd0:	2401      	movs	r4, #1
 8009bd2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009bd4:	7d1b      	ldrb	r3, [r3, #20]
 8009bd6:	b94b      	cbnz	r3, 8009bec <dwt_xfer3xxx+0x8a>
 8009bd8:	682b      	ldr	r3, [r5, #0]
 8009bda:	685d      	ldr	r5, [r3, #4]
 8009bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bde:	4632      	mov	r2, r6
 8009be0:	a903      	add	r1, sp, #12
 8009be2:	4620      	mov	r0, r4
 8009be4:	47a8      	blx	r5
 8009be6:	b004      	add	sp, #16
 8009be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bec:	2200      	movs	r2, #0
 8009bee:	4621      	mov	r1, r4
 8009bf0:	a803      	add	r0, sp, #12
 8009bf2:	f7fb fda7 	bl	8005744 <dwt_generatecrc8>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	4631      	mov	r1, r6
 8009bfa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009bfc:	f7fb fda2 	bl	8005744 <dwt_generatecrc8>
 8009c00:	682b      	ldr	r3, [r5, #0]
 8009c02:	9000      	str	r0, [sp, #0]
 8009c04:	689d      	ldr	r5, [r3, #8]
 8009c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c08:	4632      	mov	r2, r6
 8009c0a:	a903      	add	r1, sp, #12
 8009c0c:	4620      	mov	r0, r4
 8009c0e:	47a8      	blx	r5
 8009c10:	e7e9      	b.n	8009be6 <dwt_xfer3xxx+0x84>
 8009c12:	2401      	movs	r4, #1
 8009c14:	682b      	ldr	r3, [r5, #0]
 8009c16:	f8d3 8000 	ldr.w	r8, [r3]
 8009c1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c1c:	4632      	mov	r2, r6
 8009c1e:	a903      	add	r1, sp, #12
 8009c20:	4620      	mov	r0, r4
 8009c22:	47c0      	blx	r8
 8009c24:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009c26:	7d1b      	ldrb	r3, [r3, #20]
 8009c28:	2b02      	cmp	r3, #2
 8009c2a:	d1dc      	bne.n	8009be6 <dwt_xfer3xxx+0x84>
 8009c2c:	2f18      	cmp	r7, #24
 8009c2e:	d0da      	beq.n	8009be6 <dwt_xfer3xxx+0x84>
 8009c30:	2200      	movs	r2, #0
 8009c32:	4621      	mov	r1, r4
 8009c34:	a803      	add	r0, sp, #12
 8009c36:	f7fb fd85 	bl	8005744 <dwt_generatecrc8>
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	4631      	mov	r1, r6
 8009c3e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009c40:	f7fb fd80 	bl	8005744 <dwt_generatecrc8>
 8009c44:	4604      	mov	r4, r0
 8009c46:	2200      	movs	r2, #0
 8009c48:	2118      	movs	r1, #24
 8009c4a:	4628      	mov	r0, r5
 8009c4c:	f000 f839 	bl	8009cc2 <dwt_read8bitoffsetreg>
 8009c50:	4284      	cmp	r4, r0
 8009c52:	d0c8      	beq.n	8009be6 <dwt_xfer3xxx+0x84>
 8009c54:	68eb      	ldr	r3, [r5, #12]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d0c5      	beq.n	8009be6 <dwt_xfer3xxx+0x84>
 8009c5a:	4798      	blx	r3
 8009c5c:	e7c3      	b.n	8009be6 <dwt_xfer3xxx+0x84>

08009c5e <dwt_readfromdevice>:
 8009c5e:	b510      	push	{r4, lr}
 8009c60:	b082      	sub	sp, #8
 8009c62:	2400      	movs	r4, #0
 8009c64:	9401      	str	r4, [sp, #4]
 8009c66:	9c04      	ldr	r4, [sp, #16]
 8009c68:	9400      	str	r4, [sp, #0]
 8009c6a:	f7ff ff7a 	bl	8009b62 <dwt_xfer3xxx>
 8009c6e:	b002      	add	sp, #8
 8009c70:	bd10      	pop	{r4, pc}

08009c72 <dwt_read32bitoffsetreg>:
 8009c72:	b500      	push	{lr}
 8009c74:	b085      	sub	sp, #20
 8009c76:	ab03      	add	r3, sp, #12
 8009c78:	9300      	str	r3, [sp, #0]
 8009c7a:	2304      	movs	r3, #4
 8009c7c:	b292      	uxth	r2, r2
 8009c7e:	f7ff ffee 	bl	8009c5e <dwt_readfromdevice>
 8009c82:	f10d 030f 	add.w	r3, sp, #15
 8009c86:	f10d 010b 	add.w	r1, sp, #11
 8009c8a:	2000      	movs	r0, #0
 8009c8c:	f813 2901 	ldrb.w	r2, [r3], #-1
 8009c90:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 8009c94:	428b      	cmp	r3, r1
 8009c96:	d1f9      	bne.n	8009c8c <dwt_read32bitoffsetreg+0x1a>
 8009c98:	b005      	add	sp, #20
 8009c9a:	f85d fb04 	ldr.w	pc, [sp], #4

08009c9e <dwt_read16bitoffsetreg>:
 8009c9e:	b500      	push	{lr}
 8009ca0:	b085      	sub	sp, #20
 8009ca2:	ab03      	add	r3, sp, #12
 8009ca4:	9300      	str	r3, [sp, #0]
 8009ca6:	2302      	movs	r3, #2
 8009ca8:	b292      	uxth	r2, r2
 8009caa:	f7ff ffd8 	bl	8009c5e <dwt_readfromdevice>
 8009cae:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8009cb2:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8009cb6:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8009cba:	b280      	uxth	r0, r0
 8009cbc:	b005      	add	sp, #20
 8009cbe:	f85d fb04 	ldr.w	pc, [sp], #4

08009cc2 <dwt_read8bitoffsetreg>:
 8009cc2:	b500      	push	{lr}
 8009cc4:	b085      	sub	sp, #20
 8009cc6:	f10d 030f 	add.w	r3, sp, #15
 8009cca:	9300      	str	r3, [sp, #0]
 8009ccc:	2301      	movs	r3, #1
 8009cce:	b292      	uxth	r2, r2
 8009cd0:	f7ff ffc5 	bl	8009c5e <dwt_readfromdevice>
 8009cd4:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8009cd8:	b005      	add	sp, #20
 8009cda:	f85d fb04 	ldr.w	pc, [sp], #4

08009cde <ull_readdiagnostics>:
 8009cde:	b530      	push	{r4, r5, lr}
 8009ce0:	b0bd      	sub	sp, #244	; 0xf4
 8009ce2:	4605      	mov	r5, r0
 8009ce4:	460c      	mov	r4, r1
 8009ce6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009ce8:	7b9a      	ldrb	r2, [r3, #14]
 8009cea:	2a01      	cmp	r2, #1
 8009cec:	d01c      	beq.n	8009d28 <ull_readdiagnostics+0x4a>
 8009cee:	2a03      	cmp	r2, #3
 8009cf0:	f040 81e8 	bne.w	800a0c4 <ull_readdiagnostics+0x3e6>
 8009cf4:	7d9b      	ldrb	r3, [r3, #22]
 8009cf6:	f013 0f08 	tst.w	r3, #8
 8009cfa:	d10c      	bne.n	8009d16 <ull_readdiagnostics+0x38>
 8009cfc:	f013 0f04 	tst.w	r3, #4
 8009d00:	ab02      	add	r3, sp, #8
 8009d02:	9300      	str	r3, [sp, #0]
 8009d04:	bf14      	ite	ne
 8009d06:	2338      	movne	r3, #56	; 0x38
 8009d08:	2320      	moveq	r3, #32
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8009d10:	f7ff ffa5 	bl	8009c5e <dwt_readfromdevice>
 8009d14:	e019      	b.n	8009d4a <ull_readdiagnostics+0x6c>
 8009d16:	ab02      	add	r3, sp, #8
 8009d18:	9300      	str	r3, [sp, #0]
 8009d1a:	23e8      	movs	r3, #232	; 0xe8
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8009d22:	f7ff ff9c 	bl	8009c5e <dwt_readfromdevice>
 8009d26:	e010      	b.n	8009d4a <ull_readdiagnostics+0x6c>
 8009d28:	7d9b      	ldrb	r3, [r3, #22]
 8009d2a:	f013 0f08 	tst.w	r3, #8
 8009d2e:	f040 81c0 	bne.w	800a0b2 <ull_readdiagnostics+0x3d4>
 8009d32:	f013 0f04 	tst.w	r3, #4
 8009d36:	ab02      	add	r3, sp, #8
 8009d38:	9300      	str	r3, [sp, #0]
 8009d3a:	bf14      	ite	ne
 8009d3c:	2338      	movne	r3, #56	; 0x38
 8009d3e:	2320      	moveq	r3, #32
 8009d40:	2200      	movs	r2, #0
 8009d42:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8009d46:	f7ff ff8a 	bl	8009c5e <dwt_readfromdevice>
 8009d4a:	f10d 0217 	add.w	r2, sp, #23
 8009d4e:	f104 031a 	add.w	r3, r4, #26
 8009d52:	f104 0020 	add.w	r0, r4, #32
 8009d56:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8009d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8009d5e:	4283      	cmp	r3, r0
 8009d60:	d1f9      	bne.n	8009d56 <ull_readdiagnostics+0x78>
 8009d62:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8009d66:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8009d6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009d6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d72:	8463      	strh	r3, [r4, #34]	; 0x22
 8009d74:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8009d78:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8009d7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009d80:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009d84:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8009d88:	bf1c      	itt	ne
 8009d8a:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 8009d8e:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 8009d92:	8423      	strh	r3, [r4, #32]
 8009d94:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 8009d98:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009d9c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009da4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009da6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009da8:	7d9b      	ldrb	r3, [r3, #22]
 8009daa:	f013 0f02 	tst.w	r3, #2
 8009dae:	f040 817e 	bne.w	800a0ae <ull_readdiagnostics+0x3d0>
 8009db2:	aa0a      	add	r2, sp, #40	; 0x28
 8009db4:	1e63      	subs	r3, r4, #1
 8009db6:	1d20      	adds	r0, r4, #4
 8009db8:	f812 1b01 	ldrb.w	r1, [r2], #1
 8009dbc:	f803 1f01 	strb.w	r1, [r3, #1]!
 8009dc0:	79d1      	ldrb	r1, [r2, #7]
 8009dc2:	7219      	strb	r1, [r3, #8]
 8009dc4:	7bd1      	ldrb	r1, [r2, #15]
 8009dc6:	7459      	strb	r1, [r3, #17]
 8009dc8:	4283      	cmp	r3, r0
 8009dca:	d1f5      	bne.n	8009db8 <ull_readdiagnostics+0xda>
 8009dcc:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8009dd0:	7163      	strb	r3, [r4, #5]
 8009dd2:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8009dd6:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8009dda:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009dde:	80e3      	strh	r3, [r4, #6]
 8009de0:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8009de4:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8009de8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009dec:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8009df0:	f8a4 300d 	strh.w	r3, [r4, #13]
 8009df4:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8009df8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8009dfc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009e00:	f8a4 300f 	strh.w	r3, [r4, #15]
 8009e04:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8009e08:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8009e0c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009e10:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8009e14:	82e3      	strh	r3, [r4, #22]
 8009e16:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 8009e1a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8009e1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009e22:	8323      	strh	r3, [r4, #24]
 8009e24:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009e26:	7d9b      	ldrb	r3, [r3, #22]
 8009e28:	f013 0f04 	tst.w	r3, #4
 8009e2c:	f040 813f 	bne.w	800a0ae <ull_readdiagnostics+0x3d0>
 8009e30:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 8009e34:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8009e38:	041b      	lsls	r3, r3, #16
 8009e3a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009e3e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8009e42:	4313      	orrs	r3, r2
 8009e44:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8009e48:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009e4c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8009e50:	6263      	str	r3, [r4, #36]	; 0x24
 8009e52:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 8009e56:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 8009e5a:	041b      	lsls	r3, r3, #16
 8009e5c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009e60:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8009e64:	4313      	orrs	r3, r2
 8009e66:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 8009e6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009e6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e72:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e74:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 8009e78:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8009e7c:	041b      	lsls	r3, r3, #16
 8009e7e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009e82:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8009e86:	4313      	orrs	r3, r2
 8009e88:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8009e8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009e90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e96:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 8009e9a:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 8009e9e:	041b      	lsls	r3, r3, #16
 8009ea0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009ea4:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 8009eae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009eb2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009eb6:	6323      	str	r3, [r4, #48]	; 0x30
 8009eb8:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 8009ebc:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 8009ec0:	041b      	lsls	r3, r3, #16
 8009ec2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009ec6:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 8009ed0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009ed4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009ed8:	6363      	str	r3, [r4, #52]	; 0x34
 8009eda:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 8009ede:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 8009ee2:	041b      	lsls	r3, r3, #16
 8009ee4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009ee8:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8009eec:	4313      	orrs	r3, r2
 8009eee:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 8009ef2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009ef6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009efa:	63a3      	str	r3, [r4, #56]	; 0x38
 8009efc:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 8009f00:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8009f04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009f08:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8009f0a:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 8009f0e:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8009f12:	041b      	lsls	r3, r3, #16
 8009f14:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009f18:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 8009f22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009f26:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009f2a:	6423      	str	r3, [r4, #64]	; 0x40
 8009f2c:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 8009f30:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 8009f34:	041b      	lsls	r3, r3, #16
 8009f36:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009f3a:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
 8009f44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009f48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f4c:	6463      	str	r3, [r4, #68]	; 0x44
 8009f4e:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 8009f52:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8009f56:	041b      	lsls	r3, r3, #16
 8009f58:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009f5c:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 8009f60:	4313      	orrs	r3, r2
 8009f62:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 8009f66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009f6a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009f6e:	64a3      	str	r3, [r4, #72]	; 0x48
 8009f70:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8009f74:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8009f78:	041b      	lsls	r3, r3, #16
 8009f7a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009f7e:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 8009f82:	4313      	orrs	r3, r2
 8009f84:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
 8009f88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009f8c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009f90:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009f92:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 8009f96:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
 8009f9a:	041b      	lsls	r3, r3, #16
 8009f9c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009fa0:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 8009faa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009fae:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009fb2:	6523      	str	r3, [r4, #80]	; 0x50
 8009fb4:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 8009fb8:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8009fbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009fc0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009fc4:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8009fc8:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 8009fcc:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8009fd0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009fd8:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8009fdc:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 8009fe0:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 8009fe4:	041b      	lsls	r3, r3, #16
 8009fe6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009fea:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 8009ff4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009ff8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009ffc:	65a3      	str	r3, [r4, #88]	; 0x58
 8009ffe:	f89d 20c3 	ldrb.w	r2, [sp, #195]	; 0xc3
 800a002:	f89d 30c2 	ldrb.w	r3, [sp, #194]	; 0xc2
 800a006:	041b      	lsls	r3, r3, #16
 800a008:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a00c:	f89d 20c0 	ldrb.w	r2, [sp, #192]	; 0xc0
 800a010:	4313      	orrs	r3, r2
 800a012:	f89d 20c1 	ldrb.w	r2, [sp, #193]	; 0xc1
 800a016:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a01a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a01e:	65e3      	str	r3, [r4, #92]	; 0x5c
 800a020:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
 800a024:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
 800a028:	041b      	lsls	r3, r3, #16
 800a02a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a02e:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 800a032:	4313      	orrs	r3, r2
 800a034:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
 800a038:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a03c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a040:	6623      	str	r3, [r4, #96]	; 0x60
 800a042:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
 800a046:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 800a04a:	041b      	lsls	r3, r3, #16
 800a04c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a050:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 800a054:	4313      	orrs	r3, r2
 800a056:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 800a05a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a05e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a062:	6663      	str	r3, [r4, #100]	; 0x64
 800a064:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
 800a068:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
 800a06c:	041b      	lsls	r3, r3, #16
 800a06e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a072:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 800a076:	4313      	orrs	r3, r2
 800a078:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 800a07c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a080:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a084:	66a3      	str	r3, [r4, #104]	; 0x68
 800a086:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 800a08a:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 800a08e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a092:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800a096:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800a09a:	f89d 20ed 	ldrb.w	r2, [sp, #237]	; 0xed
 800a09e:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 800a0a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a0a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a0aa:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 800a0ae:	b03d      	add	sp, #244	; 0xf4
 800a0b0:	bd30      	pop	{r4, r5, pc}
 800a0b2:	ab02      	add	r3, sp, #8
 800a0b4:	9300      	str	r3, [sp, #0]
 800a0b6:	23e8      	movs	r3, #232	; 0xe8
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800a0be:	f7ff fdce 	bl	8009c5e <dwt_readfromdevice>
 800a0c2:	e642      	b.n	8009d4a <ull_readdiagnostics+0x6c>
 800a0c4:	7d9b      	ldrb	r3, [r3, #22]
 800a0c6:	f013 0f01 	tst.w	r3, #1
 800a0ca:	f000 81b3 	beq.w	800a434 <ull_readdiagnostics+0x756>
 800a0ce:	ab02      	add	r3, sp, #8
 800a0d0:	9300      	str	r3, [sp, #0]
 800a0d2:	236c      	movs	r3, #108	; 0x6c
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800a0da:	f7ff fdc0 	bl	8009c5e <dwt_readfromdevice>
 800a0de:	ab1d      	add	r3, sp, #116	; 0x74
 800a0e0:	9300      	str	r3, [sp, #0]
 800a0e2:	236c      	movs	r3, #108	; 0x6c
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 800a0ea:	4628      	mov	r0, r5
 800a0ec:	f7ff fdb7 	bl	8009c5e <dwt_readfromdevice>
 800a0f0:	aa02      	add	r2, sp, #8
 800a0f2:	1e63      	subs	r3, r4, #1
 800a0f4:	1d20      	adds	r0, r4, #4
 800a0f6:	f812 1b01 	ldrb.w	r1, [r2], #1
 800a0fa:	f803 1f01 	strb.w	r1, [r3, #1]!
 800a0fe:	79d1      	ldrb	r1, [r2, #7]
 800a100:	7219      	strb	r1, [r3, #8]
 800a102:	7bd1      	ldrb	r1, [r2, #15]
 800a104:	7459      	strb	r1, [r3, #17]
 800a106:	7dd1      	ldrb	r1, [r2, #23]
 800a108:	7699      	strb	r1, [r3, #26]
 800a10a:	4283      	cmp	r3, r0
 800a10c:	d1f3      	bne.n	800a0f6 <ull_readdiagnostics+0x418>
 800a10e:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800a112:	77e3      	strb	r3, [r4, #31]
 800a114:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800a118:	7163      	strb	r3, [r4, #5]
 800a11a:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800a11e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800a122:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a126:	80e3      	strh	r3, [r4, #6]
 800a128:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800a12c:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800a130:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800a134:	f3c2 12cf 	ubfx	r2, r2, #7, #16
 800a138:	f8a4 200d 	strh.w	r2, [r4, #13]
 800a13c:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800a140:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800a144:	f8a4 200f 	strh.w	r2, [r4, #15]
 800a148:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800a14c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a150:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800a154:	82e3      	strh	r3, [r4, #22]
 800a156:	f89d 201e 	ldrb.w	r2, [sp, #30]
 800a15a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800a15e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a162:	8323      	strh	r3, [r4, #24]
 800a164:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 800a168:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 800a16c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a170:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a174:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800a178:	bf1c      	itt	ne
 800a17a:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 800a17e:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 800a182:	8423      	strh	r3, [r4, #32]
 800a184:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 800a188:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800a18c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a190:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a194:	8463      	strh	r3, [r4, #34]	; 0x22
 800a196:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 800a19a:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800a19e:	041b      	lsls	r3, r3, #16
 800a1a0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a1a4:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 800a1ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a1b2:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800a1b6:	6263      	str	r3, [r4, #36]	; 0x24
 800a1b8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800a1ba:	7d9b      	ldrb	r3, [r3, #22]
 800a1bc:	f013 0f01 	tst.w	r3, #1
 800a1c0:	f43f af75 	beq.w	800a0ae <ull_readdiagnostics+0x3d0>
 800a1c4:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800a1c8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 800a1cc:	041b      	lsls	r3, r3, #16
 800a1ce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a1d2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 800a1dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a1e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a1e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a1e6:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800a1ea:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800a1ee:	041b      	lsls	r3, r3, #16
 800a1f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a1f4:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800a1fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a202:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a206:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a208:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 800a20c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 800a210:	041b      	lsls	r3, r3, #16
 800a212:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a216:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 800a21a:	4313      	orrs	r3, r2
 800a21c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 800a220:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a224:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a228:	6323      	str	r3, [r4, #48]	; 0x30
 800a22a:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 800a22e:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800a232:	041b      	lsls	r3, r3, #16
 800a234:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a238:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800a23c:	4313      	orrs	r3, r2
 800a23e:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 800a242:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a246:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a24a:	6363      	str	r3, [r4, #52]	; 0x34
 800a24c:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 800a250:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800a254:	041b      	lsls	r3, r3, #16
 800a256:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a25a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800a25e:	4313      	orrs	r3, r2
 800a260:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800a264:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a268:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a26c:	63a3      	str	r3, [r4, #56]	; 0x38
 800a26e:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 800a272:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800a276:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a27a:	87a3      	strh	r3, [r4, #60]	; 0x3c
 800a27c:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 800a280:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800a284:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a28c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800a28e:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 800a292:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 800a296:	041b      	lsls	r3, r3, #16
 800a298:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a29c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 800a2a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a2aa:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800a2ae:	6423      	str	r3, [r4, #64]	; 0x40
 800a2b0:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 800a2b4:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
 800a2b8:	041b      	lsls	r3, r3, #16
 800a2ba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a2be:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 800a2c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a2cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2d0:	6463      	str	r3, [r4, #68]	; 0x44
 800a2d2:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
 800a2d6:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 800a2da:	041b      	lsls	r3, r3, #16
 800a2dc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a2e0:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 800a2ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a2ee:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a2f2:	64a3      	str	r3, [r4, #72]	; 0x48
 800a2f4:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 800a2f8:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 800a2fc:	041b      	lsls	r3, r3, #16
 800a2fe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a302:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 800a306:	4313      	orrs	r3, r2
 800a308:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
 800a30c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a310:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a314:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a316:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 800a31a:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 800a31e:	041b      	lsls	r3, r3, #16
 800a320:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a324:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 800a328:	4313      	orrs	r3, r2
 800a32a:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 800a32e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a332:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a336:	6523      	str	r3, [r4, #80]	; 0x50
 800a338:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 800a33c:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 800a340:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a344:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800a348:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 800a34c:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 800a350:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 800a354:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a35c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 800a360:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 800a364:	f89d 30ae 	ldrb.w	r3, [sp, #174]	; 0xae
 800a368:	041b      	lsls	r3, r3, #16
 800a36a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a36e:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 800a372:	4313      	orrs	r3, r2
 800a374:	f89d 20ad 	ldrb.w	r2, [sp, #173]	; 0xad
 800a378:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a37c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800a380:	65a3      	str	r3, [r4, #88]	; 0x58
 800a382:	f89d 20b3 	ldrb.w	r2, [sp, #179]	; 0xb3
 800a386:	f89d 30b2 	ldrb.w	r3, [sp, #178]	; 0xb2
 800a38a:	041b      	lsls	r3, r3, #16
 800a38c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a390:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 800a394:	4313      	orrs	r3, r2
 800a396:	f89d 20b1 	ldrb.w	r2, [sp, #177]	; 0xb1
 800a39a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a39e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3a2:	65e3      	str	r3, [r4, #92]	; 0x5c
 800a3a4:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 800a3a8:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
 800a3ac:	041b      	lsls	r3, r3, #16
 800a3ae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a3b2:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	f89d 20b5 	ldrb.w	r2, [sp, #181]	; 0xb5
 800a3bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a3c0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a3c4:	6623      	str	r3, [r4, #96]	; 0x60
 800a3c6:	f89d 20bb 	ldrb.w	r2, [sp, #187]	; 0xbb
 800a3ca:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
 800a3ce:	041b      	lsls	r3, r3, #16
 800a3d0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a3d4:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	f89d 20b9 	ldrb.w	r2, [sp, #185]	; 0xb9
 800a3de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a3e2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a3e6:	6663      	str	r3, [r4, #100]	; 0x64
 800a3e8:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 800a3ec:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 800a3f0:	041b      	lsls	r3, r3, #16
 800a3f2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a3f6:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 800a400:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a404:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a408:	66a3      	str	r3, [r4, #104]	; 0x68
 800a40a:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 800a40e:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 800a412:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a416:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800a41a:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800a41e:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 800a422:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 800a426:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a42a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a42e:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 800a432:	e63c      	b.n	800a0ae <ull_readdiagnostics+0x3d0>
 800a434:	ab02      	add	r3, sp, #8
 800a436:	9300      	str	r3, [sp, #0]
 800a438:	2328      	movs	r3, #40	; 0x28
 800a43a:	2200      	movs	r2, #0
 800a43c:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800a440:	f7ff fc0d 	bl	8009c5e <dwt_readfromdevice>
 800a444:	e654      	b.n	800a0f0 <ull_readdiagnostics+0x412>
	...

0800a448 <ull_readrxtimestamp>:
 800a448:	b500      	push	{lr}
 800a44a:	b083      	sub	sp, #12
 800a44c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a44e:	7b9b      	ldrb	r3, [r3, #14]
 800a450:	2b01      	cmp	r3, #1
 800a452:	d00b      	beq.n	800a46c <ull_readrxtimestamp+0x24>
 800a454:	2b03      	cmp	r3, #3
 800a456:	d110      	bne.n	800a47a <ull_readrxtimestamp+0x32>
 800a458:	9100      	str	r1, [sp, #0]
 800a45a:	2305      	movs	r3, #5
 800a45c:	2204      	movs	r2, #4
 800a45e:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800a462:	f7ff fbfc 	bl	8009c5e <dwt_readfromdevice>
 800a466:	b003      	add	sp, #12
 800a468:	f85d fb04 	ldr.w	pc, [sp], #4
 800a46c:	9100      	str	r1, [sp, #0]
 800a46e:	2305      	movs	r3, #5
 800a470:	2200      	movs	r2, #0
 800a472:	4905      	ldr	r1, [pc, #20]	; (800a488 <ull_readrxtimestamp+0x40>)
 800a474:	f7ff fbf3 	bl	8009c5e <dwt_readfromdevice>
 800a478:	e7f5      	b.n	800a466 <ull_readrxtimestamp+0x1e>
 800a47a:	9100      	str	r1, [sp, #0]
 800a47c:	2305      	movs	r3, #5
 800a47e:	2200      	movs	r2, #0
 800a480:	2160      	movs	r1, #96	; 0x60
 800a482:	f7ff fbec 	bl	8009c5e <dwt_readfromdevice>
 800a486:	e7ee      	b.n	800a466 <ull_readrxtimestamp+0x1e>
 800a488:	00180004 	.word	0x00180004

0800a48c <dwt_writetodevice>:
 800a48c:	b510      	push	{r4, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 800a494:	9401      	str	r4, [sp, #4]
 800a496:	9c04      	ldr	r4, [sp, #16]
 800a498:	9400      	str	r4, [sp, #0]
 800a49a:	f7ff fb62 	bl	8009b62 <dwt_xfer3xxx>
 800a49e:	b002      	add	sp, #8
 800a4a0:	bd10      	pop	{r4, pc}

0800a4a2 <dwt_write16bitoffsetreg>:
 800a4a2:	b500      	push	{lr}
 800a4a4:	b085      	sub	sp, #20
 800a4a6:	f88d 300c 	strb.w	r3, [sp, #12]
 800a4aa:	0a1b      	lsrs	r3, r3, #8
 800a4ac:	f88d 300d 	strb.w	r3, [sp, #13]
 800a4b0:	ab03      	add	r3, sp, #12
 800a4b2:	9300      	str	r3, [sp, #0]
 800a4b4:	2302      	movs	r3, #2
 800a4b6:	b292      	uxth	r2, r2
 800a4b8:	f7ff ffe8 	bl	800a48c <dwt_writetodevice>
 800a4bc:	b005      	add	sp, #20
 800a4be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a4c4 <ull_force_clocks>:
 800a4c4:	b508      	push	{r3, lr}
 800a4c6:	2901      	cmp	r1, #1
 800a4c8:	d002      	beq.n	800a4d0 <ull_force_clocks+0xc>
 800a4ca:	2905      	cmp	r1, #5
 800a4cc:	d007      	beq.n	800a4de <ull_force_clocks+0x1a>
 800a4ce:	bd08      	pop	{r3, pc}
 800a4d0:	f641 0322 	movw	r3, #6178	; 0x1822
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	4905      	ldr	r1, [pc, #20]	; (800a4ec <ull_force_clocks+0x28>)
 800a4d8:	f7ff ffe3 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800a4dc:	e7f7      	b.n	800a4ce <ull_force_clocks+0xa>
 800a4de:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	4901      	ldr	r1, [pc, #4]	; (800a4ec <ull_force_clocks+0x28>)
 800a4e6:	f7ff ffdc 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800a4ea:	e7f0      	b.n	800a4ce <ull_force_clocks+0xa>
 800a4ec:	00110004 	.word	0x00110004

0800a4f0 <__dwt_otp_write_wdata_id_reg>:
 800a4f0:	b538      	push	{r3, r4, r5, lr}
 800a4f2:	4605      	mov	r5, r0
 800a4f4:	460c      	mov	r4, r1
 800a4f6:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800a502:	f7ff ffce 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800a506:	b2a3      	uxth	r3, r4
 800a508:	2200      	movs	r2, #0
 800a50a:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800a50e:	4628      	mov	r0, r5
 800a510:	f7ff ffc7 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800a514:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a518 <_dwt_otpread>:
 800a518:	b570      	push	{r4, r5, r6, lr}
 800a51a:	4604      	mov	r4, r0
 800a51c:	460e      	mov	r6, r1
 800a51e:	4d0c      	ldr	r5, [pc, #48]	; (800a550 <_dwt_otpread+0x38>)
 800a520:	2301      	movs	r3, #1
 800a522:	2200      	movs	r2, #0
 800a524:	4629      	mov	r1, r5
 800a526:	f7ff ffbc 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800a52a:	4633      	mov	r3, r6
 800a52c:	2200      	movs	r2, #0
 800a52e:	4909      	ldr	r1, [pc, #36]	; (800a554 <_dwt_otpread+0x3c>)
 800a530:	4620      	mov	r0, r4
 800a532:	f7ff ffb6 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800a536:	2302      	movs	r3, #2
 800a538:	2200      	movs	r2, #0
 800a53a:	4629      	mov	r1, r5
 800a53c:	4620      	mov	r0, r4
 800a53e:	f7ff ffb0 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800a542:	2200      	movs	r2, #0
 800a544:	4904      	ldr	r1, [pc, #16]	; (800a558 <_dwt_otpread+0x40>)
 800a546:	4620      	mov	r0, r4
 800a548:	f7ff fb93 	bl	8009c72 <dwt_read32bitoffsetreg>
 800a54c:	bd70      	pop	{r4, r5, r6, pc}
 800a54e:	bf00      	nop
 800a550:	000b0008 	.word	0x000b0008
 800a554:	000b0004 	.word	0x000b0004
 800a558:	000b0010 	.word	0x000b0010

0800a55c <dwt_write32bitoffsetreg>:
 800a55c:	b510      	push	{r4, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	f88d 300c 	strb.w	r3, [sp, #12]
 800a564:	0a1c      	lsrs	r4, r3, #8
 800a566:	f88d 400d 	strb.w	r4, [sp, #13]
 800a56a:	0c1c      	lsrs	r4, r3, #16
 800a56c:	f88d 400e 	strb.w	r4, [sp, #14]
 800a570:	0e1b      	lsrs	r3, r3, #24
 800a572:	f88d 300f 	strb.w	r3, [sp, #15]
 800a576:	ab03      	add	r3, sp, #12
 800a578:	9300      	str	r3, [sp, #0]
 800a57a:	2304      	movs	r3, #4
 800a57c:	b292      	uxth	r2, r2
 800a57e:	f7ff ff85 	bl	800a48c <dwt_writetodevice>
 800a582:	b004      	add	sp, #16
 800a584:	bd10      	pop	{r4, pc}

0800a586 <_dwt_adjust_delaytime>:
 800a586:	b538      	push	{r3, r4, r5, lr}
 800a588:	4604      	mov	r4, r0
 800a58a:	b989      	cbnz	r1, 800a5b0 <_dwt_adjust_delaytime+0x2a>
 800a58c:	2200      	movs	r2, #0
 800a58e:	2128      	movs	r1, #40	; 0x28
 800a590:	f7ff fb6f 	bl	8009c72 <dwt_read32bitoffsetreg>
 800a594:	4605      	mov	r5, r0
 800a596:	2201      	movs	r2, #1
 800a598:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800a59c:	4620      	mov	r0, r4
 800a59e:	f7ff fb90 	bl	8009cc2 <dwt_read8bitoffsetreg>
 800a5a2:	1a2b      	subs	r3, r5, r0
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	2128      	movs	r1, #40	; 0x28
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	f7ff ffd7 	bl	800a55c <dwt_write32bitoffsetreg>
 800a5ae:	bd38      	pop	{r3, r4, r5, pc}
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	2128      	movs	r1, #40	; 0x28
 800a5b4:	f7ff fb5d 	bl	8009c72 <dwt_read32bitoffsetreg>
 800a5b8:	4605      	mov	r5, r0
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	217c      	movs	r1, #124	; 0x7c
 800a5be:	4620      	mov	r0, r4
 800a5c0:	f7ff fb7f 	bl	8009cc2 <dwt_read8bitoffsetreg>
 800a5c4:	1a2b      	subs	r3, r5, r0
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	2128      	movs	r1, #40	; 0x28
 800a5ca:	4620      	mov	r0, r4
 800a5cc:	f7ff ffc6 	bl	800a55c <dwt_write32bitoffsetreg>
 800a5d0:	e7ed      	b.n	800a5ae <_dwt_adjust_delaytime+0x28>

0800a5d2 <ull_setrxaftertxdelay>:
 800a5d2:	b538      	push	{r3, r4, r5, lr}
 800a5d4:	4605      	mov	r5, r0
 800a5d6:	460c      	mov	r4, r1
 800a5d8:	2200      	movs	r2, #0
 800a5da:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a5de:	f7ff fb48 	bl	8009c72 <dwt_read32bitoffsetreg>
 800a5e2:	0d00      	lsrs	r0, r0, #20
 800a5e4:	0500      	lsls	r0, r0, #20
 800a5e6:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a5ea:	4303      	orrs	r3, r0
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a5f2:	4628      	mov	r0, r5
 800a5f4:	f7ff ffb2 	bl	800a55c <dwt_write32bitoffsetreg>
 800a5f8:	bd38      	pop	{r3, r4, r5, pc}

0800a5fa <ull_setlnapamode>:
 800a5fa:	b538      	push	{r3, r4, r5, lr}
 800a5fc:	4605      	mov	r5, r0
 800a5fe:	460c      	mov	r4, r1
 800a600:	2200      	movs	r2, #0
 800a602:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800a606:	f7ff fb34 	bl	8009c72 <dwt_read32bitoffsetreg>
 800a60a:	f420 337c 	bic.w	r3, r0, #258048	; 0x3f000
 800a60e:	f014 0f01 	tst.w	r4, #1
 800a612:	bf18      	it	ne
 800a614:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
 800a618:	f014 0f02 	tst.w	r4, #2
 800a61c:	bf18      	it	ne
 800a61e:	f443 5300 	orrne.w	r3, r3, #8192	; 0x2000
 800a622:	f014 0f04 	tst.w	r4, #4
 800a626:	bf18      	it	ne
 800a628:	f443 3390 	orrne.w	r3, r3, #73728	; 0x12000
 800a62c:	2200      	movs	r2, #0
 800a62e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800a632:	4628      	mov	r0, r5
 800a634:	f7ff ff92 	bl	800a55c <dwt_write32bitoffsetreg>
 800a638:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a63c <ull_configurestskey>:
 800a63c:	b538      	push	{r3, r4, r5, lr}
 800a63e:	4605      	mov	r5, r0
 800a640:	460c      	mov	r4, r1
 800a642:	680b      	ldr	r3, [r1, #0]
 800a644:	2200      	movs	r2, #0
 800a646:	490b      	ldr	r1, [pc, #44]	; (800a674 <ull_configurestskey+0x38>)
 800a648:	f7ff ff88 	bl	800a55c <dwt_write32bitoffsetreg>
 800a64c:	6863      	ldr	r3, [r4, #4]
 800a64e:	2200      	movs	r2, #0
 800a650:	4909      	ldr	r1, [pc, #36]	; (800a678 <ull_configurestskey+0x3c>)
 800a652:	4628      	mov	r0, r5
 800a654:	f7ff ff82 	bl	800a55c <dwt_write32bitoffsetreg>
 800a658:	68a3      	ldr	r3, [r4, #8]
 800a65a:	2200      	movs	r2, #0
 800a65c:	4907      	ldr	r1, [pc, #28]	; (800a67c <ull_configurestskey+0x40>)
 800a65e:	4628      	mov	r0, r5
 800a660:	f7ff ff7c 	bl	800a55c <dwt_write32bitoffsetreg>
 800a664:	68e3      	ldr	r3, [r4, #12]
 800a666:	2200      	movs	r2, #0
 800a668:	4905      	ldr	r1, [pc, #20]	; (800a680 <ull_configurestskey+0x44>)
 800a66a:	4628      	mov	r0, r5
 800a66c:	f7ff ff76 	bl	800a55c <dwt_write32bitoffsetreg>
 800a670:	bd38      	pop	{r3, r4, r5, pc}
 800a672:	bf00      	nop
 800a674:	0002000c 	.word	0x0002000c
 800a678:	00020010 	.word	0x00020010
 800a67c:	00020014 	.word	0x00020014
 800a680:	00020018 	.word	0x00020018

0800a684 <ull_configurestsiv>:
 800a684:	b538      	push	{r3, r4, r5, lr}
 800a686:	4605      	mov	r5, r0
 800a688:	460c      	mov	r4, r1
 800a68a:	680b      	ldr	r3, [r1, #0]
 800a68c:	2200      	movs	r2, #0
 800a68e:	490b      	ldr	r1, [pc, #44]	; (800a6bc <ull_configurestsiv+0x38>)
 800a690:	f7ff ff64 	bl	800a55c <dwt_write32bitoffsetreg>
 800a694:	6863      	ldr	r3, [r4, #4]
 800a696:	2200      	movs	r2, #0
 800a698:	4909      	ldr	r1, [pc, #36]	; (800a6c0 <ull_configurestsiv+0x3c>)
 800a69a:	4628      	mov	r0, r5
 800a69c:	f7ff ff5e 	bl	800a55c <dwt_write32bitoffsetreg>
 800a6a0:	68a3      	ldr	r3, [r4, #8]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	4907      	ldr	r1, [pc, #28]	; (800a6c4 <ull_configurestsiv+0x40>)
 800a6a6:	4628      	mov	r0, r5
 800a6a8:	f7ff ff58 	bl	800a55c <dwt_write32bitoffsetreg>
 800a6ac:	68e3      	ldr	r3, [r4, #12]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	4905      	ldr	r1, [pc, #20]	; (800a6c8 <ull_configurestsiv+0x44>)
 800a6b2:	4628      	mov	r0, r5
 800a6b4:	f7ff ff52 	bl	800a55c <dwt_write32bitoffsetreg>
 800a6b8:	bd38      	pop	{r3, r4, r5, pc}
 800a6ba:	bf00      	nop
 800a6bc:	0002001c 	.word	0x0002001c
 800a6c0:	00020020 	.word	0x00020020
 800a6c4:	00020024 	.word	0x00020024
 800a6c8:	00020028 	.word	0x00020028

0800a6cc <ull_configmrxlut>:
 800a6cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6d0:	4604      	mov	r4, r0
 800a6d2:	2905      	cmp	r1, #5
 800a6d4:	d03a      	beq.n	800a74c <ull_configmrxlut+0x80>
 800a6d6:	4d23      	ldr	r5, [pc, #140]	; (800a764 <ull_configmrxlut+0x98>)
 800a6d8:	462e      	mov	r6, r5
 800a6da:	4f23      	ldr	r7, [pc, #140]	; (800a768 <ull_configmrxlut+0x9c>)
 800a6dc:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 800a7a4 <ull_configmrxlut+0xd8>
 800a6e0:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800a7a8 <ull_configmrxlut+0xdc>
 800a6e4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a7ac <ull_configmrxlut+0xe0>
 800a6e8:	4b20      	ldr	r3, [pc, #128]	; (800a76c <ull_configmrxlut+0xa0>)
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	4920      	ldr	r1, [pc, #128]	; (800a770 <ull_configmrxlut+0xa4>)
 800a6ee:	4620      	mov	r0, r4
 800a6f0:	f7ff ff34 	bl	800a55c <dwt_write32bitoffsetreg>
 800a6f4:	4653      	mov	r3, sl
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	491e      	ldr	r1, [pc, #120]	; (800a774 <ull_configmrxlut+0xa8>)
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	f7ff ff2e 	bl	800a55c <dwt_write32bitoffsetreg>
 800a700:	464b      	mov	r3, r9
 800a702:	2200      	movs	r2, #0
 800a704:	491c      	ldr	r1, [pc, #112]	; (800a778 <ull_configmrxlut+0xac>)
 800a706:	4620      	mov	r0, r4
 800a708:	f7ff ff28 	bl	800a55c <dwt_write32bitoffsetreg>
 800a70c:	4643      	mov	r3, r8
 800a70e:	2200      	movs	r2, #0
 800a710:	491a      	ldr	r1, [pc, #104]	; (800a77c <ull_configmrxlut+0xb0>)
 800a712:	4620      	mov	r0, r4
 800a714:	f7ff ff22 	bl	800a55c <dwt_write32bitoffsetreg>
 800a718:	463b      	mov	r3, r7
 800a71a:	2200      	movs	r2, #0
 800a71c:	4918      	ldr	r1, [pc, #96]	; (800a780 <ull_configmrxlut+0xb4>)
 800a71e:	4620      	mov	r0, r4
 800a720:	f7ff ff1c 	bl	800a55c <dwt_write32bitoffsetreg>
 800a724:	4633      	mov	r3, r6
 800a726:	2200      	movs	r2, #0
 800a728:	4916      	ldr	r1, [pc, #88]	; (800a784 <ull_configmrxlut+0xb8>)
 800a72a:	4620      	mov	r0, r4
 800a72c:	f7ff ff16 	bl	800a55c <dwt_write32bitoffsetreg>
 800a730:	462b      	mov	r3, r5
 800a732:	2200      	movs	r2, #0
 800a734:	4914      	ldr	r1, [pc, #80]	; (800a788 <ull_configmrxlut+0xbc>)
 800a736:	4620      	mov	r0, r4
 800a738:	f7ff ff10 	bl	800a55c <dwt_write32bitoffsetreg>
 800a73c:	4b13      	ldr	r3, [pc, #76]	; (800a78c <ull_configmrxlut+0xc0>)
 800a73e:	2200      	movs	r2, #0
 800a740:	4913      	ldr	r1, [pc, #76]	; (800a790 <ull_configmrxlut+0xc4>)
 800a742:	4620      	mov	r0, r4
 800a744:	f7ff ff0a 	bl	800a55c <dwt_write32bitoffsetreg>
 800a748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a74c:	4d11      	ldr	r5, [pc, #68]	; (800a794 <ull_configmrxlut+0xc8>)
 800a74e:	4e12      	ldr	r6, [pc, #72]	; (800a798 <ull_configmrxlut+0xcc>)
 800a750:	4f12      	ldr	r7, [pc, #72]	; (800a79c <ull_configmrxlut+0xd0>)
 800a752:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800a7b0 <ull_configmrxlut+0xe4>
 800a756:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800a7b4 <ull_configmrxlut+0xe8>
 800a75a:	f8df a05c 	ldr.w	sl, [pc, #92]	; 800a7b8 <ull_configmrxlut+0xec>
 800a75e:	4b10      	ldr	r3, [pc, #64]	; (800a7a0 <ull_configmrxlut+0xd4>)
 800a760:	e7c3      	b.n	800a6ea <ull_configmrxlut+0x1e>
 800a762:	bf00      	nop
 800a764:	0002afb5 	.word	0x0002afb5
 800a768:	0002af7d 	.word	0x0002af7d
 800a76c:	0002a8fe 	.word	0x0002a8fe
 800a770:	00030038 	.word	0x00030038
 800a774:	0003003c 	.word	0x0003003c
 800a778:	00030040 	.word	0x00030040
 800a77c:	00030044 	.word	0x00030044
 800a780:	00030048 	.word	0x00030048
 800a784:	0003004c 	.word	0x0003004c
 800a788:	00030050 	.word	0x00030050
 800a78c:	10000240 	.word	0x10000240
 800a790:	0003001c 	.word	0x0003001c
 800a794:	0001cff5 	.word	0x0001cff5
 800a798:	0001cfb5 	.word	0x0001cfb5
 800a79c:	0001cf36 	.word	0x0001cf36
 800a7a0:	0001c0fd 	.word	0x0001c0fd
 800a7a4:	0002af3e 	.word	0x0002af3e
 800a7a8:	0002a5fe 	.word	0x0002a5fe
 800a7ac:	0002ac36 	.word	0x0002ac36
 800a7b0:	0001c77e 	.word	0x0001c77e
 800a7b4:	0001c6be 	.word	0x0001c6be
 800a7b8:	0001c43e 	.word	0x0001c43e

0800a7bc <ull_disable_rftx_blocks>:
 800a7bc:	b508      	push	{r3, lr}
 800a7be:	2300      	movs	r3, #0
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	4902      	ldr	r1, [pc, #8]	; (800a7cc <ull_disable_rftx_blocks+0x10>)
 800a7c4:	f7ff feca 	bl	800a55c <dwt_write32bitoffsetreg>
 800a7c8:	bd08      	pop	{r3, pc}
 800a7ca:	bf00      	nop
 800a7cc:	00070004 	.word	0x00070004

0800a7d0 <ull_disable_rf_tx>:
 800a7d0:	b538      	push	{r3, r4, r5, lr}
 800a7d2:	4604      	mov	r4, r0
 800a7d4:	460d      	mov	r5, r1
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	461a      	mov	r2, r3
 800a7da:	490a      	ldr	r1, [pc, #40]	; (800a804 <ull_disable_rf_tx+0x34>)
 800a7dc:	f7ff febe 	bl	800a55c <dwt_write32bitoffsetreg>
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	f7ff feb7 	bl	800a55c <dwt_write32bitoffsetreg>
 800a7ee:	b905      	cbnz	r5, 800a7f2 <ull_disable_rf_tx+0x22>
 800a7f0:	bd38      	pop	{r3, r4, r5, pc}
 800a7f2:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	4903      	ldr	r1, [pc, #12]	; (800a808 <ull_disable_rf_tx+0x38>)
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	f7ff feae 	bl	800a55c <dwt_write32bitoffsetreg>
 800a800:	e7f6      	b.n	800a7f0 <ull_disable_rf_tx+0x20>
 800a802:	bf00      	nop
 800a804:	00070048 	.word	0x00070048
 800a808:	00070014 	.word	0x00070014

0800a80c <ull_readrxdata>:
 800a80c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a80e:	b083      	sub	sp, #12
 800a810:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800a812:	7ba4      	ldrb	r4, [r4, #14]
 800a814:	2c03      	cmp	r4, #3
 800a816:	bf0c      	ite	eq
 800a818:	f44f 1c98 	moveq.w	ip, #1245184	; 0x130000
 800a81c:	f44f 1c90 	movne.w	ip, #1179648	; 0x120000
 800a820:	189c      	adds	r4, r3, r2
 800a822:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800a826:	da19      	bge.n	800a85c <ull_readrxdata+0x50>
 800a828:	461d      	mov	r5, r3
 800a82a:	4616      	mov	r6, r2
 800a82c:	460f      	mov	r7, r1
 800a82e:	4604      	mov	r4, r0
 800a830:	2b7f      	cmp	r3, #127	; 0x7f
 800a832:	d915      	bls.n	800a860 <ull_readrxdata+0x54>
 800a834:	ea4f 431c 	mov.w	r3, ip, lsr #16
 800a838:	2200      	movs	r2, #0
 800a83a:	490d      	ldr	r1, [pc, #52]	; (800a870 <ull_readrxdata+0x64>)
 800a83c:	f7ff fe8e 	bl	800a55c <dwt_write32bitoffsetreg>
 800a840:	462b      	mov	r3, r5
 800a842:	2200      	movs	r2, #0
 800a844:	490b      	ldr	r1, [pc, #44]	; (800a874 <ull_readrxdata+0x68>)
 800a846:	4620      	mov	r0, r4
 800a848:	f7ff fe88 	bl	800a55c <dwt_write32bitoffsetreg>
 800a84c:	9700      	str	r7, [sp, #0]
 800a84e:	4633      	mov	r3, r6
 800a850:	2200      	movs	r2, #0
 800a852:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800a856:	4620      	mov	r0, r4
 800a858:	f7ff fa01 	bl	8009c5e <dwt_readfromdevice>
 800a85c:	b003      	add	sp, #12
 800a85e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a860:	9100      	str	r1, [sp, #0]
 800a862:	4613      	mov	r3, r2
 800a864:	462a      	mov	r2, r5
 800a866:	4661      	mov	r1, ip
 800a868:	f7ff f9f9 	bl	8009c5e <dwt_readfromdevice>
 800a86c:	e7f6      	b.n	800a85c <ull_readrxdata+0x50>
 800a86e:	bf00      	nop
 800a870:	001f0004 	.word	0x001f0004
 800a874:	001f0008 	.word	0x001f0008

0800a878 <dwt_write8bitoffsetreg>:
 800a878:	b510      	push	{r4, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	ac04      	add	r4, sp, #16
 800a87e:	f804 3d01 	strb.w	r3, [r4, #-1]!
 800a882:	9400      	str	r4, [sp, #0]
 800a884:	2301      	movs	r3, #1
 800a886:	b292      	uxth	r2, r2
 800a888:	f7ff fe00 	bl	800a48c <dwt_writetodevice>
 800a88c:	b004      	add	sp, #16
 800a88e:	bd10      	pop	{r4, pc}

0800a890 <ull_getframelength>:
 800a890:	b510      	push	{r4, lr}
 800a892:	4604      	mov	r4, r0
 800a894:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a896:	7b9b      	ldrb	r3, [r3, #14]
 800a898:	2b01      	cmp	r3, #1
 800a89a:	d013      	beq.n	800a8c4 <ull_getframelength+0x34>
 800a89c:	2b03      	cmp	r3, #3
 800a89e:	d11d      	bne.n	800a8dc <ull_getframelength+0x4c>
 800a8a0:	23f0      	movs	r3, #240	; 0xf0
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	4912      	ldr	r1, [pc, #72]	; (800a8f0 <ull_getframelength+0x60>)
 800a8a6:	f7ff ffe7 	bl	800a878 <dwt_write8bitoffsetreg>
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	f7ff f9f4 	bl	8009c9e <dwt_read16bitoffsetreg>
 800a8b6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a8b8:	7ada      	ldrb	r2, [r3, #11]
 800a8ba:	b1a2      	cbz	r2, 800a8e6 <ull_getframelength+0x56>
 800a8bc:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a8c0:	83d8      	strh	r0, [r3, #30]
 800a8c2:	bd10      	pop	{r4, pc}
 800a8c4:	230f      	movs	r3, #15
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	4909      	ldr	r1, [pc, #36]	; (800a8f0 <ull_getframelength+0x60>)
 800a8ca:	f7ff ffd5 	bl	800a878 <dwt_write8bitoffsetreg>
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	f7ff f9e2 	bl	8009c9e <dwt_read16bitoffsetreg>
 800a8da:	e7ec      	b.n	800a8b6 <ull_getframelength+0x26>
 800a8dc:	2200      	movs	r2, #0
 800a8de:	214c      	movs	r1, #76	; 0x4c
 800a8e0:	f7ff f9dd 	bl	8009c9e <dwt_read16bitoffsetreg>
 800a8e4:	e7e7      	b.n	800a8b6 <ull_getframelength+0x26>
 800a8e6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800a8ea:	83d8      	strh	r0, [r3, #30]
 800a8ec:	e7e9      	b.n	800a8c2 <ull_getframelength+0x32>
 800a8ee:	bf00      	nop
 800a8f0:	00010018 	.word	0x00010018

0800a8f4 <_dwt_clear_db_events>:
 800a8f4:	b510      	push	{r4, lr}
 800a8f6:	4604      	mov	r4, r0
 800a8f8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a8fa:	7b9b      	ldrb	r3, [r3, #14]
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d004      	beq.n	800a90a <_dwt_clear_db_events+0x16>
 800a900:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a902:	7b9b      	ldrb	r3, [r3, #14]
 800a904:	2b03      	cmp	r3, #3
 800a906:	d006      	beq.n	800a916 <_dwt_clear_db_events+0x22>
 800a908:	bd10      	pop	{r4, pc}
 800a90a:	230f      	movs	r3, #15
 800a90c:	2200      	movs	r2, #0
 800a90e:	4905      	ldr	r1, [pc, #20]	; (800a924 <_dwt_clear_db_events+0x30>)
 800a910:	f7ff ffb2 	bl	800a878 <dwt_write8bitoffsetreg>
 800a914:	e7f4      	b.n	800a900 <_dwt_clear_db_events+0xc>
 800a916:	23f0      	movs	r3, #240	; 0xf0
 800a918:	2200      	movs	r2, #0
 800a91a:	4902      	ldr	r1, [pc, #8]	; (800a924 <_dwt_clear_db_events+0x30>)
 800a91c:	4620      	mov	r0, r4
 800a91e:	f7ff ffab 	bl	800a878 <dwt_write8bitoffsetreg>
 800a922:	e7f1      	b.n	800a908 <_dwt_clear_db_events+0x14>
 800a924:	00010018 	.word	0x00010018

0800a928 <ull_clearaonconfig>:
 800a928:	b538      	push	{r3, r4, r5, lr}
 800a92a:	4604      	mov	r4, r0
 800a92c:	2300      	movs	r3, #0
 800a92e:	461a      	mov	r2, r3
 800a930:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800a934:	f7ff fdb5 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800a938:	2300      	movs	r3, #0
 800a93a:	461a      	mov	r2, r3
 800a93c:	4908      	ldr	r1, [pc, #32]	; (800a960 <ull_clearaonconfig+0x38>)
 800a93e:	4620      	mov	r0, r4
 800a940:	f7ff ff9a 	bl	800a878 <dwt_write8bitoffsetreg>
 800a944:	4d07      	ldr	r5, [pc, #28]	; (800a964 <ull_clearaonconfig+0x3c>)
 800a946:	2300      	movs	r3, #0
 800a948:	461a      	mov	r2, r3
 800a94a:	4629      	mov	r1, r5
 800a94c:	4620      	mov	r0, r4
 800a94e:	f7ff ff93 	bl	800a878 <dwt_write8bitoffsetreg>
 800a952:	2302      	movs	r3, #2
 800a954:	2200      	movs	r2, #0
 800a956:	4629      	mov	r1, r5
 800a958:	4620      	mov	r0, r4
 800a95a:	f7ff ff8d 	bl	800a878 <dwt_write8bitoffsetreg>
 800a95e:	bd38      	pop	{r3, r4, r5, pc}
 800a960:	000a0014 	.word	0x000a0014
 800a964:	000a0004 	.word	0x000a0004

0800a968 <ull_configeventcounters>:
 800a968:	b538      	push	{r3, r4, r5, lr}
 800a96a:	4605      	mov	r5, r0
 800a96c:	460c      	mov	r4, r1
 800a96e:	2302      	movs	r3, #2
 800a970:	2200      	movs	r2, #0
 800a972:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800a976:	f7ff ff7f 	bl	800a878 <dwt_write8bitoffsetreg>
 800a97a:	b904      	cbnz	r4, 800a97e <ull_configeventcounters+0x16>
 800a97c:	bd38      	pop	{r3, r4, r5, pc}
 800a97e:	2301      	movs	r3, #1
 800a980:	2200      	movs	r2, #0
 800a982:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800a986:	4628      	mov	r0, r5
 800a988:	f7ff ff76 	bl	800a878 <dwt_write8bitoffsetreg>
 800a98c:	e7f6      	b.n	800a97c <ull_configeventcounters+0x14>
	...

0800a990 <ull_aon_read>:
 800a990:	b538      	push	{r3, r4, r5, lr}
 800a992:	4604      	mov	r4, r0
 800a994:	460b      	mov	r3, r1
 800a996:	2200      	movs	r2, #0
 800a998:	490a      	ldr	r1, [pc, #40]	; (800a9c4 <ull_aon_read+0x34>)
 800a99a:	f7ff fd82 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800a99e:	4d0a      	ldr	r5, [pc, #40]	; (800a9c8 <ull_aon_read+0x38>)
 800a9a0:	2388      	movs	r3, #136	; 0x88
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	4629      	mov	r1, r5
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f7ff ff66 	bl	800a878 <dwt_write8bitoffsetreg>
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	4629      	mov	r1, r5
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	f7ff ff60 	bl	800a878 <dwt_write8bitoffsetreg>
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	4904      	ldr	r1, [pc, #16]	; (800a9cc <ull_aon_read+0x3c>)
 800a9bc:	4620      	mov	r0, r4
 800a9be:	f7ff f980 	bl	8009cc2 <dwt_read8bitoffsetreg>
 800a9c2:	bd38      	pop	{r3, r4, r5, pc}
 800a9c4:	000a000c 	.word	0x000a000c
 800a9c8:	000a0004 	.word	0x000a0004
 800a9cc:	000a0008 	.word	0x000a0008

0800a9d0 <ull_aon_write>:
 800a9d0:	b570      	push	{r4, r5, r6, lr}
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	4615      	mov	r5, r2
 800a9d8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800a9dc:	bf34      	ite	cc
 800a9de:	2600      	movcc	r6, #0
 800a9e0:	2620      	movcs	r6, #32
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	490b      	ldr	r1, [pc, #44]	; (800aa14 <ull_aon_write+0x44>)
 800a9e6:	f7ff fd5c 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800a9ea:	462b      	mov	r3, r5
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	490a      	ldr	r1, [pc, #40]	; (800aa18 <ull_aon_write+0x48>)
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	f7ff ff41 	bl	800a878 <dwt_write8bitoffsetreg>
 800a9f6:	4d09      	ldr	r5, [pc, #36]	; (800aa1c <ull_aon_write+0x4c>)
 800a9f8:	f046 0390 	orr.w	r3, r6, #144	; 0x90
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	4629      	mov	r1, r5
 800aa00:	4620      	mov	r0, r4
 800aa02:	f7ff ff39 	bl	800a878 <dwt_write8bitoffsetreg>
 800aa06:	2300      	movs	r3, #0
 800aa08:	461a      	mov	r2, r3
 800aa0a:	4629      	mov	r1, r5
 800aa0c:	4620      	mov	r0, r4
 800aa0e:	f7ff ff33 	bl	800a878 <dwt_write8bitoffsetreg>
 800aa12:	bd70      	pop	{r4, r5, r6, pc}
 800aa14:	000a000c 	.word	0x000a000c
 800aa18:	000a0010 	.word	0x000a0010
 800aa1c:	000a0004 	.word	0x000a0004

0800aa20 <ull_configuresleep>:
 800aa20:	b570      	push	{r4, r5, r6, lr}
 800aa22:	4604      	mov	r4, r0
 800aa24:	460d      	mov	r5, r1
 800aa26:	4616      	mov	r6, r2
 800aa28:	2200      	movs	r2, #0
 800aa2a:	f240 110b 	movw	r1, #267	; 0x10b
 800aa2e:	f7ff ffcf 	bl	800a9d0 <ull_aon_write>
 800aa32:	f44f 7182 	mov.w	r1, #260	; 0x104
 800aa36:	4620      	mov	r0, r4
 800aa38:	f7ff ffaa 	bl	800a990 <ull_aon_read>
 800aa3c:	f000 021f 	and.w	r2, r0, #31
 800aa40:	f44f 7182 	mov.w	r1, #260	; 0x104
 800aa44:	4620      	mov	r0, r4
 800aa46:	f7ff ffc3 	bl	800a9d0 <ull_aon_write>
 800aa4a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800aa4c:	8a1a      	ldrh	r2, [r3, #16]
 800aa4e:	4315      	orrs	r5, r2
 800aa50:	821d      	strh	r5, [r3, #16]
 800aa52:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800aa54:	8a1b      	ldrh	r3, [r3, #16]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	f7ff fd20 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800aa62:	4633      	mov	r3, r6
 800aa64:	2200      	movs	r2, #0
 800aa66:	4902      	ldr	r1, [pc, #8]	; (800aa70 <ull_configuresleep+0x50>)
 800aa68:	4620      	mov	r0, r4
 800aa6a:	f7ff ff05 	bl	800a878 <dwt_write8bitoffsetreg>
 800aa6e:	bd70      	pop	{r4, r5, r6, pc}
 800aa70:	000a0014 	.word	0x000a0014

0800aa74 <ull_writetxdata>:
 800aa74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa76:	b083      	sub	sp, #12
 800aa78:	185c      	adds	r4, r3, r1
 800aa7a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800aa7e:	da24      	bge.n	800aaca <ull_writetxdata+0x56>
 800aa80:	461c      	mov	r4, r3
 800aa82:	4617      	mov	r7, r2
 800aa84:	460e      	mov	r6, r1
 800aa86:	4605      	mov	r5, r0
 800aa88:	2b7f      	cmp	r3, #127	; 0x7f
 800aa8a:	d915      	bls.n	800aab8 <ull_writetxdata+0x44>
 800aa8c:	2314      	movs	r3, #20
 800aa8e:	2200      	movs	r2, #0
 800aa90:	490f      	ldr	r1, [pc, #60]	; (800aad0 <ull_writetxdata+0x5c>)
 800aa92:	f7ff fd63 	bl	800a55c <dwt_write32bitoffsetreg>
 800aa96:	4623      	mov	r3, r4
 800aa98:	2200      	movs	r2, #0
 800aa9a:	490e      	ldr	r1, [pc, #56]	; (800aad4 <ull_writetxdata+0x60>)
 800aa9c:	4628      	mov	r0, r5
 800aa9e:	f7ff fd5d 	bl	800a55c <dwt_write32bitoffsetreg>
 800aaa2:	9700      	str	r7, [sp, #0]
 800aaa4:	4633      	mov	r3, r6
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800aaac:	4628      	mov	r0, r5
 800aaae:	f7ff fced 	bl	800a48c <dwt_writetodevice>
 800aab2:	2000      	movs	r0, #0
 800aab4:	b003      	add	sp, #12
 800aab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aab8:	9200      	str	r2, [sp, #0]
 800aaba:	460b      	mov	r3, r1
 800aabc:	4622      	mov	r2, r4
 800aabe:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 800aac2:	f7ff fce3 	bl	800a48c <dwt_writetodevice>
 800aac6:	2000      	movs	r0, #0
 800aac8:	e7f4      	b.n	800aab4 <ull_writetxdata+0x40>
 800aaca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aace:	e7f1      	b.n	800aab4 <ull_writetxdata+0x40>
 800aad0:	001f0004 	.word	0x001f0004
 800aad4:	001f0008 	.word	0x001f0008

0800aad8 <ull_signal_rx_buff_free>:
 800aad8:	b510      	push	{r4, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	4604      	mov	r4, r0
 800aade:	2302      	movs	r3, #2
 800aae0:	9301      	str	r3, [sp, #4]
 800aae2:	2200      	movs	r2, #0
 800aae4:	9200      	str	r2, [sp, #0]
 800aae6:	4613      	mov	r3, r2
 800aae8:	2113      	movs	r1, #19
 800aaea:	f7ff f83a 	bl	8009b62 <dwt_xfer3xxx>
 800aaee:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800aaf0:	7b9a      	ldrb	r2, [r3, #14]
 800aaf2:	2a03      	cmp	r2, #3
 800aaf4:	bf0c      	ite	eq
 800aaf6:	2201      	moveq	r2, #1
 800aaf8:	2203      	movne	r2, #3
 800aafa:	739a      	strb	r2, [r3, #14]
 800aafc:	b002      	add	sp, #8
 800aafe:	bd10      	pop	{r4, pc}

0800ab00 <ull_isr>:
 800ab00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab04:	4604      	mov	r4, r0
 800ab06:	2200      	movs	r2, #0
 800ab08:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 800ab0c:	f7ff f8d9 	bl	8009cc2 <dwt_read8bitoffsetreg>
 800ab10:	4605      	mov	r5, r0
 800ab12:	2200      	movs	r2, #0
 800ab14:	2144      	movs	r1, #68	; 0x44
 800ab16:	4620      	mov	r0, r4
 800ab18:	f7ff f8ab 	bl	8009c72 <dwt_read32bitoffsetreg>
 800ab1c:	4606      	mov	r6, r0
 800ab1e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ab20:	2200      	movs	r2, #0
 800ab22:	83da      	strh	r2, [r3, #30]
 800ab24:	f883 2020 	strb.w	r2, [r3, #32]
 800ab28:	619a      	str	r2, [r3, #24]
 800ab2a:	839a      	strh	r2, [r3, #28]
 800ab2c:	625a      	str	r2, [r3, #36]	; 0x24
 800ab2e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ab30:	625c      	str	r4, [r3, #36]	; 0x24
 800ab32:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ab34:	7b9f      	ldrb	r7, [r3, #14]
 800ab36:	2f00      	cmp	r7, #0
 800ab38:	d17f      	bne.n	800ac3a <ull_isr+0x13a>
 800ab3a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ab3c:	619e      	str	r6, [r3, #24]
 800ab3e:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
 800ab42:	f898 3015 	ldrb.w	r3, [r8, #21]
 800ab46:	f003 0303 	and.w	r3, r3, #3
 800ab4a:	2b03      	cmp	r3, #3
 800ab4c:	f000 8090 	beq.w	800ac70 <ull_isr+0x170>
 800ab50:	f015 0f80 	tst.w	r5, #128	; 0x80
 800ab54:	f040 8093 	bne.w	800ac7e <ull_isr+0x17e>
 800ab58:	f015 0f01 	tst.w	r5, #1
 800ab5c:	f040 80c1 	bne.w	800ace2 <ull_isr+0x1e2>
 800ab60:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ab64:	d00b      	beq.n	800ab7e <ull_isr+0x7e>
 800ab66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab68:	b113      	cbz	r3, 800ab70 <ull_isr+0x70>
 800ab6a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800ab6c:	3018      	adds	r0, #24
 800ab6e:	4798      	blx	r3
 800ab70:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800ab74:	2202      	movs	r2, #2
 800ab76:	2144      	movs	r1, #68	; 0x44
 800ab78:	4620      	mov	r0, r4
 800ab7a:	f7ff fc92 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800ab7e:	f015 0f08 	tst.w	r5, #8
 800ab82:	d107      	bne.n	800ab94 <ull_isr+0x94>
 800ab84:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ab86:	7b9b      	ldrb	r3, [r3, #14]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	f000 80ea 	beq.w	800ad62 <ull_isr+0x262>
 800ab8e:	2f00      	cmp	r7, #0
 800ab90:	f000 80e7 	beq.w	800ad62 <ull_isr+0x262>
 800ab94:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ab96:	2200      	movs	r2, #0
 800ab98:	f883 2020 	strb.w	r2, [r3, #32]
 800ab9c:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 800aba0:	f000 80ad 	beq.w	800acfe <ull_isr+0x1fe>
 800aba4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800aba6:	f892 3020 	ldrb.w	r3, [r2, #32]
 800abaa:	f043 0308 	orr.w	r3, r3, #8
 800abae:	f882 3020 	strb.w	r3, [r2, #32]
 800abb2:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 800abb6:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 800abba:	d008      	beq.n	800abce <ull_isr+0xce>
 800abbc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800abbe:	f892 3020 	ldrb.w	r3, [r2, #32]
 800abc2:	f043 0310 	orr.w	r3, r3, #16
 800abc6:	f882 3020 	strb.w	r3, [r2, #32]
 800abca:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 800abce:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800abd2:	d006      	beq.n	800abe2 <ull_isr+0xe2>
 800abd4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800abd6:	7d53      	ldrb	r3, [r2, #21]
 800abd8:	f003 0303 	and.w	r3, r3, #3
 800abdc:	2b03      	cmp	r3, #3
 800abde:	f000 809a 	beq.w	800ad16 <ull_isr+0x216>
 800abe2:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800abe6:	f040 80a2 	bne.w	800ad2e <ull_isr+0x22e>
 800abea:	f447 43de 	orr.w	r3, r7, #28416	; 0x6f00
 800abee:	2200      	movs	r2, #0
 800abf0:	2144      	movs	r1, #68	; 0x44
 800abf2:	4620      	mov	r0, r4
 800abf4:	f7ff fcb2 	bl	800a55c <dwt_write32bitoffsetreg>
 800abf8:	4620      	mov	r0, r4
 800abfa:	f7ff fe7b 	bl	800a8f4 <_dwt_clear_db_events>
 800abfe:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800ac00:	8bc3      	ldrh	r3, [r0, #30]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	f040 80a2 	bne.w	800ad4c <ull_isr+0x24c>
 800ac08:	7d43      	ldrb	r3, [r0, #21]
 800ac0a:	f003 0303 	and.w	r3, r3, #3
 800ac0e:	2b03      	cmp	r3, #3
 800ac10:	f000 809c 	beq.w	800ad4c <ull_isr+0x24c>
 800ac14:	6983      	ldr	r3, [r0, #24]
 800ac16:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800ac1a:	6183      	str	r3, [r0, #24]
 800ac1c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ac1e:	6993      	ldr	r3, [r2, #24]
 800ac20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ac24:	6193      	str	r3, [r2, #24]
 800ac26:	69e3      	ldr	r3, [r4, #28]
 800ac28:	b113      	cbz	r3, 800ac30 <ull_isr+0x130>
 800ac2a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800ac2c:	3018      	adds	r0, #24
 800ac2e:	4798      	blx	r3
 800ac30:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ac32:	2200      	movs	r2, #0
 800ac34:	f883 2020 	strb.w	r2, [r3, #32]
 800ac38:	e08c      	b.n	800ad54 <ull_isr+0x254>
 800ac3a:	496d      	ldr	r1, [pc, #436]	; (800adf0 <ull_isr+0x2f0>)
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	f7ff f840 	bl	8009cc2 <dwt_read8bitoffsetreg>
 800ac42:	4607      	mov	r7, r0
 800ac44:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ac46:	7b9b      	ldrb	r3, [r3, #14]
 800ac48:	2b03      	cmp	r3, #3
 800ac4a:	bf08      	it	eq
 800ac4c:	f3c0 1707 	ubfxeq	r7, r0, #4, #8
 800ac50:	f017 0f01 	tst.w	r7, #1
 800ac54:	bf18      	it	ne
 800ac56:	f446 4680 	orrne.w	r6, r6, #16384	; 0x4000
 800ac5a:	f017 0f02 	tst.w	r7, #2
 800ac5e:	bf18      	it	ne
 800ac60:	f446 5600 	orrne.w	r6, r6, #8192	; 0x2000
 800ac64:	f017 0f04 	tst.w	r7, #4
 800ac68:	bf18      	it	ne
 800ac6a:	f446 6680 	orrne.w	r6, r6, #1024	; 0x400
 800ac6e:	e764      	b.n	800ab3a <ull_isr+0x3a>
 800ac70:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800ac74:	bf1c      	itt	ne
 800ac76:	f045 0508 	orrne.w	r5, r5, #8
 800ac7a:	b2ed      	uxtbne	r5, r5
 800ac7c:	e768      	b.n	800ab50 <ull_isr+0x50>
 800ac7e:	2200      	movs	r2, #0
 800ac80:	2148      	movs	r1, #72	; 0x48
 800ac82:	4620      	mov	r0, r4
 800ac84:	f7ff f80b 	bl	8009c9e <dwt_read16bitoffsetreg>
 800ac88:	f8a8 001c 	strh.w	r0, [r8, #28]
 800ac8c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ac8e:	7d1a      	ldrb	r2, [r3, #20]
 800ac90:	b11a      	cbz	r2, 800ac9a <ull_isr+0x19a>
 800ac92:	699a      	ldr	r2, [r3, #24]
 800ac94:	f012 0f04 	tst.w	r2, #4
 800ac98:	d103      	bne.n	800aca2 <ull_isr+0x1a2>
 800ac9a:	8b9b      	ldrh	r3, [r3, #28]
 800ac9c:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800aca0:	b18b      	cbz	r3, 800acc6 <ull_isr+0x1c6>
 800aca2:	2304      	movs	r3, #4
 800aca4:	2200      	movs	r2, #0
 800aca6:	2144      	movs	r1, #68	; 0x44
 800aca8:	4620      	mov	r0, r4
 800acaa:	f7ff fde5 	bl	800a878 <dwt_write8bitoffsetreg>
 800acae:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800acb2:	2200      	movs	r2, #0
 800acb4:	2148      	movs	r1, #72	; 0x48
 800acb6:	4620      	mov	r0, r4
 800acb8:	f7ff fbf3 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800acbc:	6a23      	ldr	r3, [r4, #32]
 800acbe:	b113      	cbz	r3, 800acc6 <ull_isr+0x1c6>
 800acc0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800acc2:	3018      	adds	r0, #24
 800acc4:	4798      	blx	r3
 800acc6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800acc8:	8b9b      	ldrh	r3, [r3, #28]
 800acca:	f413 7f80 	tst.w	r3, #256	; 0x100
 800acce:	f43f af43 	beq.w	800ab58 <ull_isr+0x58>
 800acd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acd6:	2200      	movs	r2, #0
 800acd8:	2148      	movs	r1, #72	; 0x48
 800acda:	4620      	mov	r0, r4
 800acdc:	f7ff fbe1 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800ace0:	e73a      	b.n	800ab58 <ull_isr+0x58>
 800ace2:	23f8      	movs	r3, #248	; 0xf8
 800ace4:	2200      	movs	r2, #0
 800ace6:	2144      	movs	r1, #68	; 0x44
 800ace8:	4620      	mov	r0, r4
 800acea:	f7ff fdc5 	bl	800a878 <dwt_write8bitoffsetreg>
 800acee:	6923      	ldr	r3, [r4, #16]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	f43f af35 	beq.w	800ab60 <ull_isr+0x60>
 800acf6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800acf8:	3018      	adds	r0, #24
 800acfa:	4798      	blx	r3
 800acfc:	e730      	b.n	800ab60 <ull_isr+0x60>
 800acfe:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800ad02:	bf1f      	itttt	ne
 800ad04:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 800ad06:	f892 3020 	ldrbne.w	r3, [r2, #32]
 800ad0a:	f043 0304 	orrne.w	r3, r3, #4
 800ad0e:	f882 3020 	strbne.w	r3, [r2, #32]
 800ad12:	2700      	movs	r7, #0
 800ad14:	e74f      	b.n	800abb6 <ull_isr+0xb6>
 800ad16:	f892 3020 	ldrb.w	r3, [r2, #32]
 800ad1a:	f043 0302 	orr.w	r3, r3, #2
 800ad1e:	f882 3020 	strb.w	r3, [r2, #32]
 800ad22:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ad24:	2200      	movs	r2, #0
 800ad26:	83da      	strh	r2, [r3, #30]
 800ad28:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 800ad2c:	e75d      	b.n	800abea <ull_isr+0xea>
 800ad2e:	4620      	mov	r0, r4
 800ad30:	f7ff fdae 	bl	800a890 <ull_getframelength>
 800ad34:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800ad38:	f43f af57 	beq.w	800abea <ull_isr+0xea>
 800ad3c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ad3e:	f892 3020 	ldrb.w	r3, [r2, #32]
 800ad42:	f043 0301 	orr.w	r3, r3, #1
 800ad46:	f882 3020 	strb.w	r3, [r2, #32]
 800ad4a:	e74e      	b.n	800abea <ull_isr+0xea>
 800ad4c:	6963      	ldr	r3, [r4, #20]
 800ad4e:	b10b      	cbz	r3, 800ad54 <ull_isr+0x254>
 800ad50:	3018      	adds	r0, #24
 800ad52:	4798      	blx	r3
 800ad54:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ad56:	7b9b      	ldrb	r3, [r3, #14]
 800ad58:	bb03      	cbnz	r3, 800ad9c <ull_isr+0x29c>
 800ad5a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	f883 2020 	strb.w	r2, [r3, #32]
 800ad62:	f015 0f10 	tst.w	r5, #16
 800ad66:	d11d      	bne.n	800ada4 <ull_isr+0x2a4>
 800ad68:	f015 0f20 	tst.w	r5, #32
 800ad6c:	d12d      	bne.n	800adca <ull_isr+0x2ca>
 800ad6e:	2200      	movs	r2, #0
 800ad70:	4920      	ldr	r1, [pc, #128]	; (800adf4 <ull_isr+0x2f4>)
 800ad72:	4620      	mov	r0, r4
 800ad74:	f7fe ffa5 	bl	8009cc2 <dwt_read8bitoffsetreg>
 800ad78:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ad7a:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
 800ad7e:	f010 0303 	ands.w	r3, r0, #3
 800ad82:	d009      	beq.n	800ad98 <ull_isr+0x298>
 800ad84:	2200      	movs	r2, #0
 800ad86:	491b      	ldr	r1, [pc, #108]	; (800adf4 <ull_isr+0x2f4>)
 800ad88:	4620      	mov	r0, r4
 800ad8a:	f7ff fd75 	bl	800a878 <dwt_write8bitoffsetreg>
 800ad8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ad90:	b113      	cbz	r3, 800ad98 <ull_isr+0x298>
 800ad92:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800ad94:	3018      	adds	r0, #24
 800ad96:	4798      	blx	r3
 800ad98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	f7ff fe9b 	bl	800aad8 <ull_signal_rx_buff_free>
 800ada2:	e7da      	b.n	800ad5a <ull_isr+0x25a>
 800ada4:	4b14      	ldr	r3, [pc, #80]	; (800adf8 <ull_isr+0x2f8>)
 800ada6:	2200      	movs	r2, #0
 800ada8:	2144      	movs	r1, #68	; 0x44
 800adaa:	4620      	mov	r0, r4
 800adac:	f7ff fbd6 	bl	800a55c <dwt_write32bitoffsetreg>
 800adb0:	4620      	mov	r0, r4
 800adb2:	f7ff fd9f 	bl	800a8f4 <_dwt_clear_db_events>
 800adb6:	69e3      	ldr	r3, [r4, #28]
 800adb8:	b113      	cbz	r3, 800adc0 <ull_isr+0x2c0>
 800adba:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800adbc:	3018      	adds	r0, #24
 800adbe:	4798      	blx	r3
 800adc0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800adc2:	2200      	movs	r2, #0
 800adc4:	f883 2020 	strb.w	r2, [r3, #32]
 800adc8:	e7ce      	b.n	800ad68 <ull_isr+0x268>
 800adca:	4b0c      	ldr	r3, [pc, #48]	; (800adfc <ull_isr+0x2fc>)
 800adcc:	2200      	movs	r2, #0
 800adce:	2144      	movs	r1, #68	; 0x44
 800add0:	4620      	mov	r0, r4
 800add2:	f7ff fbc3 	bl	800a55c <dwt_write32bitoffsetreg>
 800add6:	4620      	mov	r0, r4
 800add8:	f7ff fd8c 	bl	800a8f4 <_dwt_clear_db_events>
 800addc:	69a3      	ldr	r3, [r4, #24]
 800adde:	b113      	cbz	r3, 800ade6 <ull_isr+0x2e6>
 800ade0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800ade2:	3018      	adds	r0, #24
 800ade4:	4798      	blx	r3
 800ade6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ade8:	2200      	movs	r2, #0
 800adea:	f883 2020 	strb.w	r2, [r3, #32]
 800adee:	e7be      	b.n	800ad6e <ull_isr+0x26e>
 800adf0:	00010018 	.word	0x00010018
 800adf4:	00110038 	.word	0x00110038
 800adf8:	34059400 	.word	0x34059400
 800adfc:	10220400 	.word	0x10220400

0800ae00 <dwt_modify32bitoffsetreg>:
 800ae00:	b530      	push	{r4, r5, lr}
 800ae02:	b085      	sub	sp, #20
 800ae04:	9c08      	ldr	r4, [sp, #32]
 800ae06:	f88d 3008 	strb.w	r3, [sp, #8]
 800ae0a:	0a1d      	lsrs	r5, r3, #8
 800ae0c:	f88d 5009 	strb.w	r5, [sp, #9]
 800ae10:	0c1d      	lsrs	r5, r3, #16
 800ae12:	f88d 500a 	strb.w	r5, [sp, #10]
 800ae16:	0e1b      	lsrs	r3, r3, #24
 800ae18:	f88d 300b 	strb.w	r3, [sp, #11]
 800ae1c:	f88d 400c 	strb.w	r4, [sp, #12]
 800ae20:	0a23      	lsrs	r3, r4, #8
 800ae22:	f88d 300d 	strb.w	r3, [sp, #13]
 800ae26:	0c23      	lsrs	r3, r4, #16
 800ae28:	f88d 300e 	strb.w	r3, [sp, #14]
 800ae2c:	0e24      	lsrs	r4, r4, #24
 800ae2e:	f88d 400f 	strb.w	r4, [sp, #15]
 800ae32:	f248 0303 	movw	r3, #32771	; 0x8003
 800ae36:	9301      	str	r3, [sp, #4]
 800ae38:	ab02      	add	r3, sp, #8
 800ae3a:	9300      	str	r3, [sp, #0]
 800ae3c:	2308      	movs	r3, #8
 800ae3e:	b292      	uxth	r2, r2
 800ae40:	f7fe fe8f 	bl	8009b62 <dwt_xfer3xxx>
 800ae44:	b005      	add	sp, #20
 800ae46:	bd30      	pop	{r4, r5, pc}

0800ae48 <ull_enable_rf_tx>:
 800ae48:	b570      	push	{r4, r5, r6, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	4604      	mov	r4, r0
 800ae4e:	460e      	mov	r6, r1
 800ae50:	4d13      	ldr	r5, [pc, #76]	; (800aea0 <ull_enable_rf_tx+0x58>)
 800ae52:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 800ae56:	9300      	str	r3, [sp, #0]
 800ae58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	4629      	mov	r1, r5
 800ae60:	f7ff ffce 	bl	800ae00 <dwt_modify32bitoffsetreg>
 800ae64:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 800ae68:	9300      	str	r3, [sp, #0]
 800ae6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae6e:	2200      	movs	r2, #0
 800ae70:	4629      	mov	r1, r5
 800ae72:	4620      	mov	r0, r4
 800ae74:	f7ff ffc4 	bl	800ae00 <dwt_modify32bitoffsetreg>
 800ae78:	4b0a      	ldr	r3, [pc, #40]	; (800aea4 <ull_enable_rf_tx+0x5c>)
 800ae7a:	9300      	str	r3, [sp, #0]
 800ae7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae80:	2200      	movs	r2, #0
 800ae82:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800ae86:	4620      	mov	r0, r4
 800ae88:	f7ff ffba 	bl	800ae00 <dwt_modify32bitoffsetreg>
 800ae8c:	b90e      	cbnz	r6, 800ae92 <ull_enable_rf_tx+0x4a>
 800ae8e:	b002      	add	sp, #8
 800ae90:	bd70      	pop	{r4, r5, r6, pc}
 800ae92:	4b05      	ldr	r3, [pc, #20]	; (800aea8 <ull_enable_rf_tx+0x60>)
 800ae94:	2200      	movs	r2, #0
 800ae96:	4905      	ldr	r1, [pc, #20]	; (800aeac <ull_enable_rf_tx+0x64>)
 800ae98:	4620      	mov	r0, r4
 800ae9a:	f7ff fb5f 	bl	800a55c <dwt_write32bitoffsetreg>
 800ae9e:	e7f6      	b.n	800ae8e <ull_enable_rf_tx+0x46>
 800aea0:	00070048 	.word	0x00070048
 800aea4:	02003c00 	.word	0x02003c00
 800aea8:	01011100 	.word	0x01011100
 800aeac:	00070014 	.word	0x00070014

0800aeb0 <ull_enable_rftx_blocks>:
 800aeb0:	b500      	push	{lr}
 800aeb2:	b083      	sub	sp, #12
 800aeb4:	4b05      	ldr	r3, [pc, #20]	; (800aecc <ull_enable_rftx_blocks+0x1c>)
 800aeb6:	9300      	str	r3, [sp, #0]
 800aeb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aebc:	2200      	movs	r2, #0
 800aebe:	4904      	ldr	r1, [pc, #16]	; (800aed0 <ull_enable_rftx_blocks+0x20>)
 800aec0:	f7ff ff9e 	bl	800ae00 <dwt_modify32bitoffsetreg>
 800aec4:	b003      	add	sp, #12
 800aec6:	f85d fb04 	ldr.w	pc, [sp], #4
 800aeca:	bf00      	nop
 800aecc:	02003c00 	.word	0x02003c00
 800aed0:	00070004 	.word	0x00070004

0800aed4 <_dwt_otpprogword32>:
 800aed4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aed8:	b083      	sub	sp, #12
 800aeda:	4604      	mov	r4, r0
 800aedc:	460d      	mov	r5, r1
 800aede:	4617      	mov	r7, r2
 800aee0:	4e56      	ldr	r6, [pc, #344]	; (800b03c <_dwt_otpprogword32+0x168>)
 800aee2:	2200      	movs	r2, #0
 800aee4:	4631      	mov	r1, r6
 800aee6:	f7fe fec4 	bl	8009c72 <dwt_read32bitoffsetreg>
 800aeea:	4681      	mov	r9, r0
 800aeec:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800aef0:	9300      	str	r3, [sp, #0]
 800aef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aef6:	2200      	movs	r2, #0
 800aef8:	4631      	mov	r1, r6
 800aefa:	4620      	mov	r0, r4
 800aefc:	f7ff ff80 	bl	800ae00 <dwt_modify32bitoffsetreg>
 800af00:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800b040 <_dwt_otpprogword32+0x16c>
 800af04:	2318      	movs	r3, #24
 800af06:	2200      	movs	r2, #0
 800af08:	4641      	mov	r1, r8
 800af0a:	4620      	mov	r0, r4
 800af0c:	f7ff fac9 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800af10:	2125      	movs	r1, #37	; 0x25
 800af12:	4620      	mov	r0, r4
 800af14:	f7ff faec 	bl	800a4f0 <__dwt_otp_write_wdata_id_reg>
 800af18:	2102      	movs	r1, #2
 800af1a:	4620      	mov	r0, r4
 800af1c:	f7ff fae8 	bl	800a4f0 <__dwt_otp_write_wdata_id_reg>
 800af20:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 800af24:	4620      	mov	r0, r4
 800af26:	f7ff fae3 	bl	800a4f0 <__dwt_otp_write_wdata_id_reg>
 800af2a:	b2f9      	uxtb	r1, r7
 800af2c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800af30:	4620      	mov	r0, r4
 800af32:	f7ff fadd 	bl	800a4f0 <__dwt_otp_write_wdata_id_reg>
 800af36:	f44f 7180 	mov.w	r1, #256	; 0x100
 800af3a:	4620      	mov	r0, r4
 800af3c:	f7ff fad8 	bl	800a4f0 <__dwt_otp_write_wdata_id_reg>
 800af40:	2100      	movs	r1, #0
 800af42:	4620      	mov	r0, r4
 800af44:	f7ff fad4 	bl	800a4f0 <__dwt_otp_write_wdata_id_reg>
 800af48:	2102      	movs	r1, #2
 800af4a:	4620      	mov	r0, r4
 800af4c:	f7ff fad0 	bl	800a4f0 <__dwt_otp_write_wdata_id_reg>
 800af50:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800af54:	4620      	mov	r0, r4
 800af56:	f7ff facb 	bl	800a4f0 <__dwt_otp_write_wdata_id_reg>
 800af5a:	b2e9      	uxtb	r1, r5
 800af5c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800af60:	4620      	mov	r0, r4
 800af62:	f7ff fac5 	bl	800a4f0 <__dwt_otp_write_wdata_id_reg>
 800af66:	f3c5 2107 	ubfx	r1, r5, #8, #8
 800af6a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800af6e:	4620      	mov	r0, r4
 800af70:	f7ff fabe 	bl	800a4f0 <__dwt_otp_write_wdata_id_reg>
 800af74:	f3c5 4107 	ubfx	r1, r5, #16, #8
 800af78:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800af7c:	4620      	mov	r0, r4
 800af7e:	f7ff fab7 	bl	800a4f0 <__dwt_otp_write_wdata_id_reg>
 800af82:	0e29      	lsrs	r1, r5, #24
 800af84:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800af88:	4620      	mov	r0, r4
 800af8a:	f7ff fab1 	bl	800a4f0 <__dwt_otp_write_wdata_id_reg>
 800af8e:	2100      	movs	r1, #0
 800af90:	4620      	mov	r0, r4
 800af92:	f7ff faad 	bl	800a4f0 <__dwt_otp_write_wdata_id_reg>
 800af96:	213a      	movs	r1, #58	; 0x3a
 800af98:	4620      	mov	r0, r4
 800af9a:	f7ff faa9 	bl	800a4f0 <__dwt_otp_write_wdata_id_reg>
 800af9e:	f240 11ff 	movw	r1, #511	; 0x1ff
 800afa2:	4620      	mov	r0, r4
 800afa4:	f7ff faa4 	bl	800a4f0 <__dwt_otp_write_wdata_id_reg>
 800afa8:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800afac:	4620      	mov	r0, r4
 800afae:	f7ff fa9f 	bl	800a4f0 <__dwt_otp_write_wdata_id_reg>
 800afb2:	2100      	movs	r1, #0
 800afb4:	4620      	mov	r0, r4
 800afb6:	f7ff fa9b 	bl	800a4f0 <__dwt_otp_write_wdata_id_reg>
 800afba:	213a      	movs	r1, #58	; 0x3a
 800afbc:	4620      	mov	r0, r4
 800afbe:	f7ff fa97 	bl	800a4f0 <__dwt_otp_write_wdata_id_reg>
 800afc2:	f240 1101 	movw	r1, #257	; 0x101
 800afc6:	4620      	mov	r0, r4
 800afc8:	f7ff fa92 	bl	800a4f0 <__dwt_otp_write_wdata_id_reg>
 800afcc:	2302      	movs	r3, #2
 800afce:	2200      	movs	r2, #0
 800afd0:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800afd4:	4620      	mov	r0, r4
 800afd6:	f7ff fa64 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800afda:	2300      	movs	r3, #0
 800afdc:	461a      	mov	r2, r3
 800afde:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800afe2:	4620      	mov	r0, r4
 800afe4:	f7ff fa5d 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800afe8:	2002      	movs	r0, #2
 800afea:	f7f6 fabb 	bl	8001564 <deca_sleep>
 800afee:	213a      	movs	r1, #58	; 0x3a
 800aff0:	4620      	mov	r0, r4
 800aff2:	f7ff fa7d 	bl	800a4f0 <__dwt_otp_write_wdata_id_reg>
 800aff6:	f44f 7181 	mov.w	r1, #258	; 0x102
 800affa:	4620      	mov	r0, r4
 800affc:	f7ff fa78 	bl	800a4f0 <__dwt_otp_write_wdata_id_reg>
 800b000:	2302      	movs	r3, #2
 800b002:	2200      	movs	r2, #0
 800b004:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800b008:	4620      	mov	r0, r4
 800b00a:	f7ff fa4a 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800b00e:	2300      	movs	r3, #0
 800b010:	461a      	mov	r2, r3
 800b012:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800b016:	4620      	mov	r0, r4
 800b018:	f7ff fa43 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800b01c:	2300      	movs	r3, #0
 800b01e:	461a      	mov	r2, r3
 800b020:	4641      	mov	r1, r8
 800b022:	4620      	mov	r0, r4
 800b024:	f7ff fa3d 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800b028:	464b      	mov	r3, r9
 800b02a:	2200      	movs	r2, #0
 800b02c:	4631      	mov	r1, r6
 800b02e:	4620      	mov	r0, r4
 800b030:	f7ff fa94 	bl	800a55c <dwt_write32bitoffsetreg>
 800b034:	b003      	add	sp, #12
 800b036:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b03a:	bf00      	nop
 800b03c:	00070044 	.word	0x00070044
 800b040:	000b0008 	.word	0x000b0008

0800b044 <ull_setgpiomode>:
 800b044:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b046:	b083      	sub	sp, #12
 800b048:	2400      	movs	r4, #0
 800b04a:	4623      	mov	r3, r4
 800b04c:	2601      	movs	r6, #1
 800b04e:	2707      	movs	r7, #7
 800b050:	e002      	b.n	800b058 <ull_setgpiomode+0x14>
 800b052:	3401      	adds	r4, #1
 800b054:	2c09      	cmp	r4, #9
 800b056:	d009      	beq.n	800b06c <ull_setgpiomode+0x28>
 800b058:	fa06 f504 	lsl.w	r5, r6, r4
 800b05c:	420d      	tst	r5, r1
 800b05e:	d0f8      	beq.n	800b052 <ull_setgpiomode+0xe>
 800b060:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800b064:	fa07 f505 	lsl.w	r5, r7, r5
 800b068:	432b      	orrs	r3, r5
 800b06a:	e7f2      	b.n	800b052 <ull_setgpiomode+0xe>
 800b06c:	401a      	ands	r2, r3
 800b06e:	9200      	str	r2, [sp, #0]
 800b070:	43db      	mvns	r3, r3
 800b072:	2200      	movs	r2, #0
 800b074:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800b078:	f7ff fec2 	bl	800ae00 <dwt_modify32bitoffsetreg>
 800b07c:	b003      	add	sp, #12
 800b07e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b080 <ull_writetxfctrl>:
 800b080:	b510      	push	{r4, lr}
 800b082:	b082      	sub	sp, #8
 800b084:	4604      	mov	r4, r0
 800b086:	2a7f      	cmp	r2, #127	; 0x7f
 800b088:	d912      	bls.n	800b0b0 <ull_writetxfctrl+0x30>
 800b08a:	3280      	adds	r2, #128	; 0x80
 800b08c:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 800b090:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b094:	9100      	str	r1, [sp, #0]
 800b096:	4b0c      	ldr	r3, [pc, #48]	; (800b0c8 <ull_writetxfctrl+0x48>)
 800b098:	2200      	movs	r2, #0
 800b09a:	2120      	movs	r1, #32
 800b09c:	f7ff feb0 	bl	800ae00 <dwt_modify32bitoffsetreg>
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	f7fe fe0b 	bl	8009cc2 <dwt_read8bitoffsetreg>
 800b0ac:	b002      	add	sp, #8
 800b0ae:	bd10      	pop	{r4, pc}
 800b0b0:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 800b0b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b0b8:	9100      	str	r1, [sp, #0]
 800b0ba:	4b03      	ldr	r3, [pc, #12]	; (800b0c8 <ull_writetxfctrl+0x48>)
 800b0bc:	2200      	movs	r2, #0
 800b0be:	2120      	movs	r1, #32
 800b0c0:	f7ff fe9e 	bl	800ae00 <dwt_modify32bitoffsetreg>
 800b0c4:	e7f2      	b.n	800b0ac <ull_writetxfctrl+0x2c>
 800b0c6:	bf00      	nop
 800b0c8:	fc00f400 	.word	0xfc00f400

0800b0cc <prs_sys_status_and_or>:
 800b0cc:	b500      	push	{lr}
 800b0ce:	b083      	sub	sp, #12
 800b0d0:	9200      	str	r2, [sp, #0]
 800b0d2:	460b      	mov	r3, r1
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	2144      	movs	r1, #68	; 0x44
 800b0d8:	f7ff fe92 	bl	800ae00 <dwt_modify32bitoffsetreg>
 800b0dc:	2000      	movs	r0, #0
 800b0de:	b003      	add	sp, #12
 800b0e0:	f85d fb04 	ldr.w	pc, [sp], #4

0800b0e4 <dwt_modify8bitoffsetreg>:
 800b0e4:	b500      	push	{lr}
 800b0e6:	b085      	sub	sp, #20
 800b0e8:	f88d 300c 	strb.w	r3, [sp, #12]
 800b0ec:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800b0f0:	f88d 300d 	strb.w	r3, [sp, #13]
 800b0f4:	f248 0301 	movw	r3, #32769	; 0x8001
 800b0f8:	9301      	str	r3, [sp, #4]
 800b0fa:	ab03      	add	r3, sp, #12
 800b0fc:	9300      	str	r3, [sp, #0]
 800b0fe:	2302      	movs	r3, #2
 800b100:	b292      	uxth	r2, r2
 800b102:	f7fe fd2e 	bl	8009b62 <dwt_xfer3xxx>
 800b106:	b005      	add	sp, #20
 800b108:	f85d fb04 	ldr.w	pc, [sp], #4

0800b10c <ull_configciadiag>:
 800b10c:	b530      	push	{r4, r5, lr}
 800b10e:	b083      	sub	sp, #12
 800b110:	4604      	mov	r4, r0
 800b112:	460d      	mov	r5, r1
 800b114:	f011 0f01 	tst.w	r1, #1
 800b118:	d015      	beq.n	800b146 <ull_configciadiag+0x3a>
 800b11a:	2300      	movs	r3, #0
 800b11c:	9300      	str	r3, [sp, #0]
 800b11e:	23ef      	movs	r3, #239	; 0xef
 800b120:	2202      	movs	r2, #2
 800b122:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800b126:	f7ff ffdd 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800b12a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b12c:	759d      	strb	r5, [r3, #22]
 800b12e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b130:	7d9b      	ldrb	r3, [r3, #22]
 800b132:	085b      	lsrs	r3, r3, #1
 800b134:	d010      	beq.n	800b158 <ull_configciadiag+0x4c>
 800b136:	086b      	lsrs	r3, r5, #1
 800b138:	2200      	movs	r2, #0
 800b13a:	490e      	ldr	r1, [pc, #56]	; (800b174 <ull_configciadiag+0x68>)
 800b13c:	4620      	mov	r0, r4
 800b13e:	f7ff fb9b 	bl	800a878 <dwt_write8bitoffsetreg>
 800b142:	b003      	add	sp, #12
 800b144:	bd30      	pop	{r4, r5, pc}
 800b146:	2310      	movs	r3, #16
 800b148:	9300      	str	r3, [sp, #0]
 800b14a:	23ff      	movs	r3, #255	; 0xff
 800b14c:	2202      	movs	r2, #2
 800b14e:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800b152:	f7ff ffc7 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800b156:	e7e8      	b.n	800b12a <ull_configciadiag+0x1e>
 800b158:	2301      	movs	r3, #1
 800b15a:	9300      	str	r3, [sp, #0]
 800b15c:	23ff      	movs	r3, #255	; 0xff
 800b15e:	2200      	movs	r2, #0
 800b160:	4904      	ldr	r1, [pc, #16]	; (800b174 <ull_configciadiag+0x68>)
 800b162:	4620      	mov	r0, r4
 800b164:	f7ff ffbe 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800b168:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b16a:	7d93      	ldrb	r3, [r2, #22]
 800b16c:	f043 0302 	orr.w	r3, r3, #2
 800b170:	7593      	strb	r3, [r2, #22]
 800b172:	e7e6      	b.n	800b142 <ull_configciadiag+0x36>
 800b174:	00010020 	.word	0x00010020

0800b178 <ull_calcbandwidthadj>:
 800b178:	b570      	push	{r4, r5, r6, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	4604      	mov	r4, r0
 800b17e:	460d      	mov	r5, r1
 800b180:	2101      	movs	r1, #1
 800b182:	f7ff f99f 	bl	800a4c4 <ull_force_clocks>
 800b186:	2100      	movs	r1, #0
 800b188:	4620      	mov	r0, r4
 800b18a:	f7ff fe5d 	bl	800ae48 <ull_enable_rf_tx>
 800b18e:	4620      	mov	r0, r4
 800b190:	f7ff fe8e 	bl	800aeb0 <ull_enable_rftx_blocks>
 800b194:	f3c5 030b 	ubfx	r3, r5, #0, #12
 800b198:	2200      	movs	r2, #0
 800b19a:	4915      	ldr	r1, [pc, #84]	; (800b1f0 <ull_calcbandwidthadj+0x78>)
 800b19c:	4620      	mov	r0, r4
 800b19e:	f7ff f980 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800b1a2:	2303      	movs	r3, #3
 800b1a4:	9300      	str	r3, [sp, #0]
 800b1a6:	23ff      	movs	r3, #255	; 0xff
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	4912      	ldr	r1, [pc, #72]	; (800b1f4 <ull_calcbandwidthadj+0x7c>)
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	f7ff ff99 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800b1b2:	4e10      	ldr	r6, [pc, #64]	; (800b1f4 <ull_calcbandwidthadj+0x7c>)
 800b1b4:	2500      	movs	r5, #0
 800b1b6:	462a      	mov	r2, r5
 800b1b8:	4631      	mov	r1, r6
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	f7fe fd81 	bl	8009cc2 <dwt_read8bitoffsetreg>
 800b1c0:	f010 0f01 	tst.w	r0, #1
 800b1c4:	d1f7      	bne.n	800b1b6 <ull_calcbandwidthadj+0x3e>
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	f7ff faf8 	bl	800a7bc <ull_disable_rftx_blocks>
 800b1cc:	2100      	movs	r1, #0
 800b1ce:	4620      	mov	r0, r4
 800b1d0:	f7ff fafe 	bl	800a7d0 <ull_disable_rf_tx>
 800b1d4:	2105      	movs	r1, #5
 800b1d6:	4620      	mov	r0, r4
 800b1d8:	f7ff f974 	bl	800a4c4 <ull_force_clocks>
 800b1dc:	2200      	movs	r2, #0
 800b1de:	4906      	ldr	r1, [pc, #24]	; (800b1f8 <ull_calcbandwidthadj+0x80>)
 800b1e0:	4620      	mov	r0, r4
 800b1e2:	f7fe fd6e 	bl	8009cc2 <dwt_read8bitoffsetreg>
 800b1e6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800b1ea:	b002      	add	sp, #8
 800b1ec:	bd70      	pop	{r4, r5, r6, pc}
 800b1ee:	bf00      	nop
 800b1f0:	0008001c 	.word	0x0008001c
 800b1f4:	00080010 	.word	0x00080010
 800b1f8:	0007001c 	.word	0x0007001c

0800b1fc <ull_configuretxrf>:
 800b1fc:	b538      	push	{r3, r4, r5, lr}
 800b1fe:	4605      	mov	r5, r0
 800b200:	460c      	mov	r4, r1
 800b202:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 800b206:	b149      	cbz	r1, 800b21c <ull_configuretxrf+0x20>
 800b208:	f7ff ffb6 	bl	800b178 <ull_calcbandwidthadj>
 800b20c:	f8d4 3001 	ldr.w	r3, [r4, #1]
 800b210:	2200      	movs	r2, #0
 800b212:	4905      	ldr	r1, [pc, #20]	; (800b228 <ull_configuretxrf+0x2c>)
 800b214:	4628      	mov	r0, r5
 800b216:	f7ff f9a1 	bl	800a55c <dwt_write32bitoffsetreg>
 800b21a:	bd38      	pop	{r3, r4, r5, pc}
 800b21c:	7823      	ldrb	r3, [r4, #0]
 800b21e:	2200      	movs	r2, #0
 800b220:	4902      	ldr	r1, [pc, #8]	; (800b22c <ull_configuretxrf+0x30>)
 800b222:	f7ff fb29 	bl	800a878 <dwt_write8bitoffsetreg>
 800b226:	e7f1      	b.n	800b20c <ull_configuretxrf+0x10>
 800b228:	00010004 	.word	0x00010004
 800b22c:	0007001c 	.word	0x0007001c

0800b230 <ull_repeated_frames>:
 800b230:	b530      	push	{r4, r5, lr}
 800b232:	b083      	sub	sp, #12
 800b234:	4604      	mov	r4, r0
 800b236:	460d      	mov	r5, r1
 800b238:	2310      	movs	r3, #16
 800b23a:	9300      	str	r3, [sp, #0]
 800b23c:	23ff      	movs	r3, #255	; 0xff
 800b23e:	2200      	movs	r2, #0
 800b240:	4906      	ldr	r1, [pc, #24]	; (800b25c <ull_repeated_frames+0x2c>)
 800b242:	f7ff ff4f 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800b246:	462b      	mov	r3, r5
 800b248:	2d02      	cmp	r5, #2
 800b24a:	bf38      	it	cc
 800b24c:	2302      	movcc	r3, #2
 800b24e:	2200      	movs	r2, #0
 800b250:	2128      	movs	r1, #40	; 0x28
 800b252:	4620      	mov	r0, r4
 800b254:	f7ff f982 	bl	800a55c <dwt_write32bitoffsetreg>
 800b258:	b003      	add	sp, #12
 800b25a:	bd30      	pop	{r4, r5, pc}
 800b25c:	000f0028 	.word	0x000f0028

0800b260 <ull_setdwstate>:
 800b260:	b530      	push	{r4, r5, lr}
 800b262:	b083      	sub	sp, #12
 800b264:	4604      	mov	r4, r0
 800b266:	2901      	cmp	r1, #1
 800b268:	d01d      	beq.n	800b2a6 <ull_setdwstate+0x46>
 800b26a:	2902      	cmp	r1, #2
 800b26c:	d02f      	beq.n	800b2ce <ull_setdwstate+0x6e>
 800b26e:	2301      	movs	r3, #1
 800b270:	9300      	str	r3, [sp, #0]
 800b272:	23ff      	movs	r3, #255	; 0xff
 800b274:	2200      	movs	r2, #0
 800b276:	4925      	ldr	r1, [pc, #148]	; (800b30c <ull_setdwstate+0xac>)
 800b278:	f7ff ff34 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800b27c:	4d24      	ldr	r5, [pc, #144]	; (800b310 <ull_setdwstate+0xb0>)
 800b27e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b282:	9300      	str	r3, [sp, #0]
 800b284:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800b288:	2200      	movs	r2, #0
 800b28a:	4629      	mov	r1, r5
 800b28c:	4620      	mov	r0, r4
 800b28e:	f7ff fdb7 	bl	800ae00 <dwt_modify32bitoffsetreg>
 800b292:	2300      	movs	r3, #0
 800b294:	9300      	str	r3, [sp, #0]
 800b296:	237f      	movs	r3, #127	; 0x7f
 800b298:	2202      	movs	r2, #2
 800b29a:	4629      	mov	r1, r5
 800b29c:	4620      	mov	r0, r4
 800b29e:	f7ff ff21 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800b2a2:	b003      	add	sp, #12
 800b2a4:	bd30      	pop	{r4, r5, pc}
 800b2a6:	2105      	movs	r1, #5
 800b2a8:	f7ff f90c 	bl	800a4c4 <ull_force_clocks>
 800b2ac:	2302      	movs	r3, #2
 800b2ae:	9300      	str	r3, [sp, #0]
 800b2b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	4917      	ldr	r1, [pc, #92]	; (800b314 <ull_setdwstate+0xb4>)
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	f7ff fda1 	bl	800ae00 <dwt_modify32bitoffsetreg>
 800b2be:	2201      	movs	r2, #1
 800b2c0:	9200      	str	r2, [sp, #0]
 800b2c2:	23ff      	movs	r3, #255	; 0xff
 800b2c4:	4912      	ldr	r1, [pc, #72]	; (800b310 <ull_setdwstate+0xb0>)
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	f7ff ff0c 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800b2cc:	e7e9      	b.n	800b2a2 <ull_setdwstate+0x42>
 800b2ce:	2303      	movs	r3, #3
 800b2d0:	9300      	str	r3, [sp, #0]
 800b2d2:	23ff      	movs	r3, #255	; 0xff
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	490d      	ldr	r1, [pc, #52]	; (800b30c <ull_setdwstate+0xac>)
 800b2d8:	f7ff ff04 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800b2dc:	4d0c      	ldr	r5, [pc, #48]	; (800b310 <ull_setdwstate+0xb0>)
 800b2de:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b2e2:	9300      	str	r3, [sp, #0]
 800b2e4:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	4629      	mov	r1, r5
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	f7ff fd87 	bl	800ae00 <dwt_modify32bitoffsetreg>
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	9300      	str	r3, [sp, #0]
 800b2f6:	237f      	movs	r3, #127	; 0x7f
 800b2f8:	2202      	movs	r2, #2
 800b2fa:	4629      	mov	r1, r5
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	f7ff fef1 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800b302:	2105      	movs	r1, #5
 800b304:	4620      	mov	r0, r4
 800b306:	f7ff f8dd 	bl	800a4c4 <ull_force_clocks>
 800b30a:	e7ca      	b.n	800b2a2 <ull_setdwstate+0x42>
 800b30c:	00110004 	.word	0x00110004
 800b310:	00110008 	.word	0x00110008
 800b314:	00090008 	.word	0x00090008

0800b318 <ull_configureframefilter>:
 800b318:	b530      	push	{r4, r5, lr}
 800b31a:	b083      	sub	sp, #12
 800b31c:	4605      	mov	r5, r0
 800b31e:	2902      	cmp	r1, #2
 800b320:	d00e      	beq.n	800b340 <ull_configureframefilter+0x28>
 800b322:	2400      	movs	r4, #0
 800b324:	9400      	str	r4, [sp, #0]
 800b326:	23fe      	movs	r3, #254	; 0xfe
 800b328:	4622      	mov	r2, r4
 800b32a:	2110      	movs	r1, #16
 800b32c:	f7ff feda 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800b330:	4623      	mov	r3, r4
 800b332:	4622      	mov	r2, r4
 800b334:	2114      	movs	r1, #20
 800b336:	4628      	mov	r0, r5
 800b338:	f7ff f8b3 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800b33c:	b003      	add	sp, #12
 800b33e:	bd30      	pop	{r4, r5, pc}
 800b340:	4614      	mov	r4, r2
 800b342:	2301      	movs	r3, #1
 800b344:	9300      	str	r3, [sp, #0]
 800b346:	23ff      	movs	r3, #255	; 0xff
 800b348:	2200      	movs	r2, #0
 800b34a:	2110      	movs	r1, #16
 800b34c:	f7ff feca 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800b350:	4623      	mov	r3, r4
 800b352:	2200      	movs	r2, #0
 800b354:	2114      	movs	r1, #20
 800b356:	4628      	mov	r0, r5
 800b358:	f7ff f8a3 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800b35c:	e7ee      	b.n	800b33c <ull_configureframefilter+0x24>
	...

0800b360 <ull_run_pgfcal>:
 800b360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b364:	b082      	sub	sp, #8
 800b366:	4605      	mov	r5, r0
 800b368:	4c29      	ldr	r4, [pc, #164]	; (800b410 <ull_run_pgfcal+0xb0>)
 800b36a:	4b2a      	ldr	r3, [pc, #168]	; (800b414 <ull_run_pgfcal+0xb4>)
 800b36c:	2200      	movs	r2, #0
 800b36e:	4621      	mov	r1, r4
 800b370:	f7ff f8f4 	bl	800a55c <dwt_write32bitoffsetreg>
 800b374:	2310      	movs	r3, #16
 800b376:	9300      	str	r3, [sp, #0]
 800b378:	23ff      	movs	r3, #255	; 0xff
 800b37a:	2200      	movs	r2, #0
 800b37c:	4621      	mov	r1, r4
 800b37e:	4628      	mov	r0, r5
 800b380:	f7ff feb0 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800b384:	2403      	movs	r4, #3
 800b386:	f04f 0814 	mov.w	r8, #20
 800b38a:	4f23      	ldr	r7, [pc, #140]	; (800b418 <ull_run_pgfcal+0xb8>)
 800b38c:	2600      	movs	r6, #0
 800b38e:	4640      	mov	r0, r8
 800b390:	f7f6 f8f3 	bl	800157a <deca_usleep>
 800b394:	4632      	mov	r2, r6
 800b396:	4639      	mov	r1, r7
 800b398:	4628      	mov	r0, r5
 800b39a:	f7fe fc92 	bl	8009cc2 <dwt_read8bitoffsetreg>
 800b39e:	2801      	cmp	r0, #1
 800b3a0:	d034      	beq.n	800b40c <ull_run_pgfcal+0xac>
 800b3a2:	1e63      	subs	r3, r4, #1
 800b3a4:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800b3a8:	d1f1      	bne.n	800b38e <ull_run_pgfcal+0x2e>
 800b3aa:	f06f 0402 	mvn.w	r4, #2
 800b3ae:	4e18      	ldr	r6, [pc, #96]	; (800b410 <ull_run_pgfcal+0xb0>)
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	4631      	mov	r1, r6
 800b3b6:	4628      	mov	r0, r5
 800b3b8:	f7ff fa5e 	bl	800a878 <dwt_write8bitoffsetreg>
 800b3bc:	2301      	movs	r3, #1
 800b3be:	2200      	movs	r2, #0
 800b3c0:	4915      	ldr	r1, [pc, #84]	; (800b418 <ull_run_pgfcal+0xb8>)
 800b3c2:	4628      	mov	r0, r5
 800b3c4:	f7ff fa58 	bl	800a878 <dwt_write8bitoffsetreg>
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	9300      	str	r3, [sp, #0]
 800b3cc:	23ff      	movs	r3, #255	; 0xff
 800b3ce:	2202      	movs	r2, #2
 800b3d0:	4631      	mov	r1, r6
 800b3d2:	4628      	mov	r0, r5
 800b3d4:	f7ff fe86 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800b3d8:	2200      	movs	r2, #0
 800b3da:	4910      	ldr	r1, [pc, #64]	; (800b41c <ull_run_pgfcal+0xbc>)
 800b3dc:	4628      	mov	r0, r5
 800b3de:	f7fe fc48 	bl	8009c72 <dwt_read32bitoffsetreg>
 800b3e2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800b3e6:	4298      	cmp	r0, r3
 800b3e8:	bf08      	it	eq
 800b3ea:	f06f 0403 	mvneq.w	r4, #3
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	490b      	ldr	r1, [pc, #44]	; (800b420 <ull_run_pgfcal+0xc0>)
 800b3f2:	4628      	mov	r0, r5
 800b3f4:	f7fe fc3d 	bl	8009c72 <dwt_read32bitoffsetreg>
 800b3f8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800b3fc:	4298      	cmp	r0, r3
 800b3fe:	bf14      	ite	ne
 800b400:	4620      	movne	r0, r4
 800b402:	f06f 0004 	mvneq.w	r0, #4
 800b406:	b002      	add	sp, #8
 800b408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b40c:	2400      	movs	r4, #0
 800b40e:	e7ce      	b.n	800b3ae <ull_run_pgfcal+0x4e>
 800b410:	0004000c 	.word	0x0004000c
 800b414:	00020001 	.word	0x00020001
 800b418:	00040020 	.word	0x00040020
 800b41c:	00040014 	.word	0x00040014
 800b420:	0004001c 	.word	0x0004001c

0800b424 <ull_setinterrupt>:
 800b424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b428:	b083      	sub	sp, #12
 800b42a:	4605      	mov	r5, r0
 800b42c:	4688      	mov	r8, r1
 800b42e:	4617      	mov	r7, r2
 800b430:	461c      	mov	r4, r3
 800b432:	f7f6 f879 	bl	8001528 <decamutexon>
 800b436:	4606      	mov	r6, r0
 800b438:	2c02      	cmp	r4, #2
 800b43a:	d019      	beq.n	800b470 <ull_setinterrupt+0x4c>
 800b43c:	2c04      	cmp	r4, #4
 800b43e:	d017      	beq.n	800b470 <ull_setinterrupt+0x4c>
 800b440:	f004 03fd 	and.w	r3, r4, #253	; 0xfd
 800b444:	2b01      	cmp	r3, #1
 800b446:	d03f      	beq.n	800b4c8 <ull_setinterrupt+0xa4>
 800b448:	f04f 0900 	mov.w	r9, #0
 800b44c:	f8cd 9000 	str.w	r9, [sp]
 800b450:	ea6f 0308 	mvn.w	r3, r8
 800b454:	464a      	mov	r2, r9
 800b456:	213c      	movs	r1, #60	; 0x3c
 800b458:	4628      	mov	r0, r5
 800b45a:	f7ff fcd1 	bl	800ae00 <dwt_modify32bitoffsetreg>
 800b45e:	f8cd 9000 	str.w	r9, [sp]
 800b462:	43fb      	mvns	r3, r7
 800b464:	464a      	mov	r2, r9
 800b466:	2140      	movs	r1, #64	; 0x40
 800b468:	4628      	mov	r0, r5
 800b46a:	f7ff fcc9 	bl	800ae00 <dwt_modify32bitoffsetreg>
 800b46e:	e00b      	b.n	800b488 <ull_setinterrupt+0x64>
 800b470:	4643      	mov	r3, r8
 800b472:	2200      	movs	r2, #0
 800b474:	213c      	movs	r1, #60	; 0x3c
 800b476:	4628      	mov	r0, r5
 800b478:	f7ff f870 	bl	800a55c <dwt_write32bitoffsetreg>
 800b47c:	463b      	mov	r3, r7
 800b47e:	2200      	movs	r2, #0
 800b480:	2140      	movs	r1, #64	; 0x40
 800b482:	4628      	mov	r0, r5
 800b484:	f7ff f86a 	bl	800a55c <dwt_write32bitoffsetreg>
 800b488:	3c03      	subs	r4, #3
 800b48a:	b2e4      	uxtb	r4, r4
 800b48c:	2c01      	cmp	r4, #1
 800b48e:	d92d      	bls.n	800b4ec <ull_setinterrupt+0xc8>
 800b490:	2200      	movs	r2, #0
 800b492:	213c      	movs	r1, #60	; 0x3c
 800b494:	4628      	mov	r0, r5
 800b496:	f7fe fbec 	bl	8009c72 <dwt_read32bitoffsetreg>
 800b49a:	4603      	mov	r3, r0
 800b49c:	2200      	movs	r2, #0
 800b49e:	2144      	movs	r1, #68	; 0x44
 800b4a0:	4628      	mov	r0, r5
 800b4a2:	f7ff f85b 	bl	800a55c <dwt_write32bitoffsetreg>
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	2140      	movs	r1, #64	; 0x40
 800b4aa:	4628      	mov	r0, r5
 800b4ac:	f7fe fbe1 	bl	8009c72 <dwt_read32bitoffsetreg>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	2148      	movs	r1, #72	; 0x48
 800b4b6:	4628      	mov	r0, r5
 800b4b8:	f7ff f850 	bl	800a55c <dwt_write32bitoffsetreg>
 800b4bc:	4630      	mov	r0, r6
 800b4be:	f7f6 f844 	bl	800154a <decamutexoff>
 800b4c2:	b003      	add	sp, #12
 800b4c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4c8:	f8cd 8000 	str.w	r8, [sp]
 800b4cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	213c      	movs	r1, #60	; 0x3c
 800b4d4:	4628      	mov	r0, r5
 800b4d6:	f7ff fc93 	bl	800ae00 <dwt_modify32bitoffsetreg>
 800b4da:	9700      	str	r7, [sp, #0]
 800b4dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	2140      	movs	r1, #64	; 0x40
 800b4e4:	4628      	mov	r0, r5
 800b4e6:	f7ff fc8b 	bl	800ae00 <dwt_modify32bitoffsetreg>
 800b4ea:	e7cd      	b.n	800b488 <ull_setinterrupt+0x64>
 800b4ec:	2110      	movs	r1, #16
 800b4ee:	9100      	str	r1, [sp, #0]
 800b4f0:	23ff      	movs	r3, #255	; 0xff
 800b4f2:	2202      	movs	r2, #2
 800b4f4:	4628      	mov	r0, r5
 800b4f6:	f7ff fdf5 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800b4fa:	e7c9      	b.n	800b490 <ull_setinterrupt+0x6c>

0800b4fc <prs_ack_enable>:
 800b4fc:	b500      	push	{lr}
 800b4fe:	b083      	sub	sp, #12
 800b500:	2900      	cmp	r1, #0
 800b502:	bf0b      	itete	eq
 800b504:	23ff      	moveq	r3, #255	; 0xff
 800b506:	23f7      	movne	r3, #247	; 0xf7
 800b508:	2200      	moveq	r2, #0
 800b50a:	2208      	movne	r2, #8
 800b50c:	9200      	str	r2, [sp, #0]
 800b50e:	2201      	movs	r2, #1
 800b510:	2110      	movs	r1, #16
 800b512:	f7ff fde7 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800b516:	b003      	add	sp, #12
 800b518:	f85d fb04 	ldr.w	pc, [sp], #4

0800b51c <dwt_modify16bitoffsetreg>:
 800b51c:	b510      	push	{r4, lr}
 800b51e:	b084      	sub	sp, #16
 800b520:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 800b524:	f88d 300c 	strb.w	r3, [sp, #12]
 800b528:	0a1b      	lsrs	r3, r3, #8
 800b52a:	f88d 300d 	strb.w	r3, [sp, #13]
 800b52e:	f88d 400e 	strb.w	r4, [sp, #14]
 800b532:	0a24      	lsrs	r4, r4, #8
 800b534:	f88d 400f 	strb.w	r4, [sp, #15]
 800b538:	f248 0302 	movw	r3, #32770	; 0x8002
 800b53c:	9301      	str	r3, [sp, #4]
 800b53e:	ab03      	add	r3, sp, #12
 800b540:	9300      	str	r3, [sp, #0]
 800b542:	2304      	movs	r3, #4
 800b544:	b292      	uxth	r2, r2
 800b546:	f7fe fb0c 	bl	8009b62 <dwt_xfer3xxx>
 800b54a:	b004      	add	sp, #16
 800b54c:	bd10      	pop	{r4, pc}
	...

0800b550 <ull_setleds>:
 800b550:	b530      	push	{r4, r5, lr}
 800b552:	b083      	sub	sp, #12
 800b554:	4604      	mov	r4, r0
 800b556:	f011 0f01 	tst.w	r1, #1
 800b55a:	d01f      	beq.n	800b59c <ull_setleds+0x4c>
 800b55c:	460d      	mov	r5, r1
 800b55e:	f44f 7310 	mov.w	r3, #576	; 0x240
 800b562:	9300      	str	r3, [sp, #0]
 800b564:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 800b568:	2200      	movs	r2, #0
 800b56a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800b56e:	f7ff fc47 	bl	800ae00 <dwt_modify32bitoffsetreg>
 800b572:	f44f 0304 	mov.w	r3, #8650752	; 0x840000
 800b576:	9300      	str	r3, [sp, #0]
 800b578:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b57c:	2200      	movs	r2, #0
 800b57e:	4918      	ldr	r1, [pc, #96]	; (800b5e0 <ull_setleds+0x90>)
 800b580:	4620      	mov	r0, r4
 800b582:	f7ff fc3d 	bl	800ae00 <dwt_modify32bitoffsetreg>
 800b586:	f015 0f02 	tst.w	r5, #2
 800b58a:	d11a      	bne.n	800b5c2 <ull_setleds+0x72>
 800b58c:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b590:	2200      	movs	r2, #0
 800b592:	4914      	ldr	r1, [pc, #80]	; (800b5e4 <ull_setleds+0x94>)
 800b594:	4620      	mov	r0, r4
 800b596:	f7fe ffe1 	bl	800a55c <dwt_write32bitoffsetreg>
 800b59a:	e010      	b.n	800b5be <ull_setleds+0x6e>
 800b59c:	2500      	movs	r5, #0
 800b59e:	9500      	str	r5, [sp, #0]
 800b5a0:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 800b5a4:	462a      	mov	r2, r5
 800b5a6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800b5aa:	f7ff fc29 	bl	800ae00 <dwt_modify32bitoffsetreg>
 800b5ae:	9500      	str	r5, [sp, #0]
 800b5b0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800b5b4:	462a      	mov	r2, r5
 800b5b6:	490b      	ldr	r1, [pc, #44]	; (800b5e4 <ull_setleds+0x94>)
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	f7ff ffaf 	bl	800b51c <dwt_modify16bitoffsetreg>
 800b5be:	b003      	add	sp, #12
 800b5c0:	bd30      	pop	{r4, r5, pc}
 800b5c2:	4d08      	ldr	r5, [pc, #32]	; (800b5e4 <ull_setleds+0x94>)
 800b5c4:	4b08      	ldr	r3, [pc, #32]	; (800b5e8 <ull_setleds+0x98>)
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	4629      	mov	r1, r5
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	f7fe ffc6 	bl	800a55c <dwt_write32bitoffsetreg>
 800b5d0:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	4629      	mov	r1, r5
 800b5d8:	4620      	mov	r0, r4
 800b5da:	f7fe ffbf 	bl	800a55c <dwt_write32bitoffsetreg>
 800b5de:	e7ee      	b.n	800b5be <ull_setleds+0x6e>
 800b5e0:	00110004 	.word	0x00110004
 800b5e4:	00110018 	.word	0x00110018
 800b5e8:	000f0110 	.word	0x000f0110

0800b5ec <ull_pgf_cal>:
 800b5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	4604      	mov	r4, r0
 800b5f2:	2901      	cmp	r1, #1
 800b5f4:	d009      	beq.n	800b60a <ull_pgf_cal+0x1e>
 800b5f6:	2014      	movs	r0, #20
 800b5f8:	f7f5 ffbf 	bl	800157a <deca_usleep>
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	f7ff feaf 	bl	800b360 <ull_run_pgfcal>
 800b602:	4605      	mov	r5, r0
 800b604:	4628      	mov	r0, r5
 800b606:	b003      	add	sp, #12
 800b608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b60a:	4e0f      	ldr	r6, [pc, #60]	; (800b648 <ull_pgf_cal+0x5c>)
 800b60c:	2200      	movs	r2, #0
 800b60e:	4631      	mov	r1, r6
 800b610:	f7fe fb45 	bl	8009c9e <dwt_read16bitoffsetreg>
 800b614:	4607      	mov	r7, r0
 800b616:	f240 1307 	movw	r3, #263	; 0x107
 800b61a:	9300      	str	r3, [sp, #0]
 800b61c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b620:	2200      	movs	r2, #0
 800b622:	4631      	mov	r1, r6
 800b624:	4620      	mov	r0, r4
 800b626:	f7ff ff79 	bl	800b51c <dwt_modify16bitoffsetreg>
 800b62a:	2014      	movs	r0, #20
 800b62c:	f7f5 ffa5 	bl	800157a <deca_usleep>
 800b630:	4620      	mov	r0, r4
 800b632:	f7ff fe95 	bl	800b360 <ull_run_pgfcal>
 800b636:	4605      	mov	r5, r0
 800b638:	2200      	movs	r2, #0
 800b63a:	9200      	str	r2, [sp, #0]
 800b63c:	463b      	mov	r3, r7
 800b63e:	4631      	mov	r1, r6
 800b640:	4620      	mov	r0, r4
 800b642:	f7ff ff6b 	bl	800b51c <dwt_modify16bitoffsetreg>
 800b646:	e7dd      	b.n	800b604 <ull_pgf_cal+0x18>
 800b648:	00070048 	.word	0x00070048

0800b64c <ull_setgpiovalue>:
 800b64c:	b500      	push	{lr}
 800b64e:	b083      	sub	sp, #12
 800b650:	2a01      	cmp	r2, #1
 800b652:	d009      	beq.n	800b668 <ull_setgpiovalue+0x1c>
 800b654:	43cb      	mvns	r3, r1
 800b656:	2200      	movs	r2, #0
 800b658:	9200      	str	r2, [sp, #0]
 800b65a:	b29b      	uxth	r3, r3
 800b65c:	4906      	ldr	r1, [pc, #24]	; (800b678 <ull_setgpiovalue+0x2c>)
 800b65e:	f7ff ff5d 	bl	800b51c <dwt_modify16bitoffsetreg>
 800b662:	b003      	add	sp, #12
 800b664:	f85d fb04 	ldr.w	pc, [sp], #4
 800b668:	9100      	str	r1, [sp, #0]
 800b66a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b66e:	2200      	movs	r2, #0
 800b670:	4901      	ldr	r1, [pc, #4]	; (800b678 <ull_setgpiovalue+0x2c>)
 800b672:	f7ff ff53 	bl	800b51c <dwt_modify16bitoffsetreg>
 800b676:	e7f4      	b.n	800b662 <ull_setgpiovalue+0x16>
 800b678:	0005000c 	.word	0x0005000c

0800b67c <ull_readaccdata>:
 800b67c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b67e:	b083      	sub	sp, #12
 800b680:	4604      	mov	r4, r0
 800b682:	460f      	mov	r7, r1
 800b684:	4616      	mov	r6, r2
 800b686:	461d      	mov	r5, r3
 800b688:	f248 0340 	movw	r3, #32832	; 0x8040
 800b68c:	9300      	str	r3, [sp, #0]
 800b68e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b692:	2200      	movs	r2, #0
 800b694:	4918      	ldr	r1, [pc, #96]	; (800b6f8 <ull_readaccdata+0x7c>)
 800b696:	f7ff ff41 	bl	800b51c <dwt_modify16bitoffsetreg>
 800b69a:	19aa      	adds	r2, r5, r6
 800b69c:	f243 0301 	movw	r3, #12289	; 0x3001
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	dc15      	bgt.n	800b6d0 <ull_readaccdata+0x54>
 800b6a4:	2d7f      	cmp	r5, #127	; 0x7f
 800b6a6:	d91d      	bls.n	800b6e4 <ull_readaccdata+0x68>
 800b6a8:	2315      	movs	r3, #21
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	4913      	ldr	r1, [pc, #76]	; (800b6fc <ull_readaccdata+0x80>)
 800b6ae:	4620      	mov	r0, r4
 800b6b0:	f7fe ff54 	bl	800a55c <dwt_write32bitoffsetreg>
 800b6b4:	462b      	mov	r3, r5
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	4911      	ldr	r1, [pc, #68]	; (800b700 <ull_readaccdata+0x84>)
 800b6ba:	4620      	mov	r0, r4
 800b6bc:	f7fe ff4e 	bl	800a55c <dwt_write32bitoffsetreg>
 800b6c0:	9700      	str	r7, [sp, #0]
 800b6c2:	4633      	mov	r3, r6
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800b6ca:	4620      	mov	r0, r4
 800b6cc:	f7fe fac7 	bl	8009c5e <dwt_readfromdevice>
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	9200      	str	r2, [sp, #0]
 800b6d4:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 800b6d8:	4907      	ldr	r1, [pc, #28]	; (800b6f8 <ull_readaccdata+0x7c>)
 800b6da:	4620      	mov	r0, r4
 800b6dc:	f7ff ff1e 	bl	800b51c <dwt_modify16bitoffsetreg>
 800b6e0:	b003      	add	sp, #12
 800b6e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6e4:	9700      	str	r7, [sp, #0]
 800b6e6:	4633      	mov	r3, r6
 800b6e8:	462a      	mov	r2, r5
 800b6ea:	f44f 11a8 	mov.w	r1, #1376256	; 0x150000
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	f7fe fab5 	bl	8009c5e <dwt_readfromdevice>
 800b6f4:	e7ec      	b.n	800b6d0 <ull_readaccdata+0x54>
 800b6f6:	bf00      	nop
 800b6f8:	00110004 	.word	0x00110004
 800b6fc:	001f0004 	.word	0x001f0004
 800b700:	001f0008 	.word	0x001f0008

0800b704 <ull_repeated_cw>:
 800b704:	b570      	push	{r4, r5, r6, lr}
 800b706:	4606      	mov	r6, r0
 800b708:	460c      	mov	r4, r1
 800b70a:	4615      	mov	r5, r2
 800b70c:	4b0e      	ldr	r3, [pc, #56]	; (800b748 <ull_repeated_cw+0x44>)
 800b70e:	2202      	movs	r2, #2
 800b710:	490e      	ldr	r1, [pc, #56]	; (800b74c <ull_repeated_cw+0x48>)
 800b712:	f7fe ff23 	bl	800a55c <dwt_write32bitoffsetreg>
 800b716:	2d0f      	cmp	r5, #15
 800b718:	bfa8      	it	ge
 800b71a:	250f      	movge	r5, #15
 800b71c:	1e63      	subs	r3, r4, #1
 800b71e:	2b03      	cmp	r3, #3
 800b720:	bf28      	it	cs
 800b722:	2404      	movcs	r4, #4
 800b724:	2310      	movs	r3, #16
 800b726:	4123      	asrs	r3, r4
 800b728:	2200      	movs	r2, #0
 800b72a:	4909      	ldr	r1, [pc, #36]	; (800b750 <ull_repeated_cw+0x4c>)
 800b72c:	4630      	mov	r0, r6
 800b72e:	f7fe ff15 	bl	800a55c <dwt_write32bitoffsetreg>
 800b732:	1e63      	subs	r3, r4, #1
 800b734:	009b      	lsls	r3, r3, #2
 800b736:	fa05 f303 	lsl.w	r3, r5, r3
 800b73a:	2200      	movs	r2, #0
 800b73c:	4905      	ldr	r1, [pc, #20]	; (800b754 <ull_repeated_cw+0x50>)
 800b73e:	4630      	mov	r0, r6
 800b740:	f7fe ff0c 	bl	800a55c <dwt_write32bitoffsetreg>
 800b744:	bd70      	pop	{r4, r5, r6, pc}
 800b746:	bf00      	nop
 800b748:	00d20874 	.word	0x00d20874
 800b74c:	00110010 	.word	0x00110010
 800b750:	00070028 	.word	0x00070028
 800b754:	00080018 	.word	0x00080018

0800b758 <ull_configure>:
 800b758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b75c:	b083      	sub	sp, #12
 800b75e:	4604      	mov	r4, r0
 800b760:	460d      	mov	r5, r1
 800b762:	f891 9000 	ldrb.w	r9, [r1]
 800b766:	790b      	ldrb	r3, [r1, #4]
 800b768:	2b18      	cmp	r3, #24
 800b76a:	d814      	bhi.n	800b796 <ull_configure+0x3e>
 800b76c:	78cf      	ldrb	r7, [r1, #3]
 800b76e:	2f18      	cmp	r7, #24
 800b770:	bf94      	ite	ls
 800b772:	2700      	movls	r7, #0
 800b774:	2701      	movhi	r7, #1
 800b776:	b2ff      	uxtb	r7, r7
 800b778:	79eb      	ldrb	r3, [r5, #7]
 800b77a:	2b01      	cmp	r3, #1
 800b77c:	bf0c      	ite	eq
 800b77e:	2110      	moveq	r1, #16
 800b780:	2100      	movne	r1, #0
 800b782:	786b      	ldrb	r3, [r5, #1]
 800b784:	3b01      	subs	r3, #1
 800b786:	2b06      	cmp	r3, #6
 800b788:	d810      	bhi.n	800b7ac <ull_configure+0x54>
 800b78a:	e8df f003 	tbb	[pc, r3]
 800b78e:	0f06      	.short	0x0f06
 800b790:	0f0c120f 	.word	0x0f0c120f
 800b794:	09          	.byte	0x09
 800b795:	00          	.byte	0x00
 800b796:	2701      	movs	r7, #1
 800b798:	e7ed      	b.n	800b776 <ull_configure+0x1e>
 800b79a:	f04f 0a40 	mov.w	sl, #64	; 0x40
 800b79e:	e00a      	b.n	800b7b6 <ull_configure+0x5e>
 800b7a0:	f04f 0a48 	mov.w	sl, #72	; 0x48
 800b7a4:	e007      	b.n	800b7b6 <ull_configure+0x5e>
 800b7a6:	f04f 0a80 	mov.w	sl, #128	; 0x80
 800b7aa:	e004      	b.n	800b7b6 <ull_configure+0x5e>
 800b7ac:	f44f 7a80 	mov.w	sl, #256	; 0x100
 800b7b0:	e001      	b.n	800b7b6 <ull_configure+0x5e>
 800b7b2:	f04f 0a20 	mov.w	sl, #32
 800b7b6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b7b8:	8a13      	ldrh	r3, [r2, #16]
 800b7ba:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800b7be:	8213      	strh	r3, [r2, #16]
 800b7c0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b7c2:	79ea      	ldrb	r2, [r5, #7]
 800b7c4:	72da      	strb	r2, [r3, #11]
 800b7c6:	7b2e      	ldrb	r6, [r5, #12]
 800b7c8:	1cb3      	adds	r3, r6, #2
 800b7ca:	2601      	movs	r6, #1
 800b7cc:	409e      	lsls	r6, r3
 800b7ce:	fa1f f886 	uxth.w	r8, r6
 800b7d2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b7d4:	4bca      	ldr	r3, [pc, #808]	; (800bb00 <ull_configure+0x3a8>)
 800b7d6:	fb03 f308 	mul.w	r3, r3, r8
 800b7da:	0bdb      	lsrs	r3, r3, #15
 800b7dc:	8253      	strh	r3, [r2, #18]
 800b7de:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b7e0:	7aea      	ldrb	r2, [r5, #11]
 800b7e2:	755a      	strb	r2, [r3, #21]
 800b7e4:	7a2b      	ldrb	r3, [r5, #8]
 800b7e6:	015b      	lsls	r3, r3, #5
 800b7e8:	f003 0320 	and.w	r3, r3, #32
 800b7ec:	7b6a      	ldrb	r2, [r5, #13]
 800b7ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7f2:	7aea      	ldrb	r2, [r5, #11]
 800b7f4:	0312      	lsls	r2, r2, #12
 800b7f6:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	430b      	orrs	r3, r1
 800b7fe:	9300      	str	r3, [sp, #0]
 800b800:	4bc0      	ldr	r3, [pc, #768]	; (800bb04 <ull_configure+0x3ac>)
 800b802:	2200      	movs	r2, #0
 800b804:	2110      	movs	r1, #16
 800b806:	4620      	mov	r0, r4
 800b808:	f7ff fafa 	bl	800ae00 <dwt_modify32bitoffsetreg>
 800b80c:	2f00      	cmp	r7, #0
 800b80e:	f040 80fc 	bne.w	800ba0a <ull_configure+0x2b2>
 800b812:	7aeb      	ldrb	r3, [r5, #11]
 800b814:	b1f3      	cbz	r3, 800b854 <ull_configure+0xfc>
 800b816:	7b6b      	ldrb	r3, [r5, #13]
 800b818:	2b01      	cmp	r3, #1
 800b81a:	f240 8121 	bls.w	800ba60 <ull_configure+0x308>
 800b81e:	7b2a      	ldrb	r2, [r5, #12]
 800b820:	4bb9      	ldr	r3, [pc, #740]	; (800bb08 <ull_configure+0x3b0>)
 800b822:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800b826:	0112      	lsls	r2, r2, #4
 800b828:	0ad3      	lsrs	r3, r2, #11
 800b82a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800b82e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b832:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800b836:	bf28      	it	cs
 800b838:	3301      	addcs	r3, #1
 800b83a:	b29b      	uxth	r3, r3
 800b83c:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
 800b840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b844:	9300      	str	r3, [sp, #0]
 800b846:	f64f 7380 	movw	r3, #65408	; 0xff80
 800b84a:	2202      	movs	r2, #2
 800b84c:	49af      	ldr	r1, [pc, #700]	; (800bb0c <ull_configure+0x3b4>)
 800b84e:	4620      	mov	r0, r4
 800b850:	f7ff fe64 	bl	800b51c <dwt_modify16bitoffsetreg>
 800b854:	2394      	movs	r3, #148	; 0x94
 800b856:	9300      	str	r3, [sp, #0]
 800b858:	4bad      	ldr	r3, [pc, #692]	; (800bb10 <ull_configure+0x3b8>)
 800b85a:	2200      	movs	r2, #0
 800b85c:	49ad      	ldr	r1, [pc, #692]	; (800bb14 <ull_configure+0x3bc>)
 800b85e:	4620      	mov	r0, r4
 800b860:	f7ff face 	bl	800ae00 <dwt_modify32bitoffsetreg>
 800b864:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800b868:	f340 810d 	ble.w	800ba86 <ull_configure+0x32e>
 800b86c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b86e:	8a13      	ldrh	r3, [r2, #16]
 800b870:	f043 0320 	orr.w	r3, r3, #32
 800b874:	8213      	strh	r3, [r2, #16]
 800b876:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b87a:	9300      	str	r3, [sp, #0]
 800b87c:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800b880:	2200      	movs	r2, #0
 800b882:	49a5      	ldr	r1, [pc, #660]	; (800bb18 <ull_configure+0x3c0>)
 800b884:	4620      	mov	r0, r4
 800b886:	f7ff fe49 	bl	800b51c <dwt_modify16bitoffsetreg>
 800b88a:	7b6b      	ldrb	r3, [r5, #13]
 800b88c:	2b01      	cmp	r3, #1
 800b88e:	f000 8105 	beq.w	800ba9c <ull_configure+0x344>
 800b892:	78ab      	ldrb	r3, [r5, #2]
 800b894:	f043 0310 	orr.w	r3, r3, #16
 800b898:	9300      	str	r3, [sp, #0]
 800b89a:	23fc      	movs	r3, #252	; 0xfc
 800b89c:	2200      	movs	r2, #0
 800b89e:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	f7ff fc1e 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800b8a8:	1e73      	subs	r3, r6, #1
 800b8aa:	b2db      	uxtb	r3, r3
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	f7fe ffe0 	bl	800a878 <dwt_write8bitoffsetreg>
 800b8b8:	786b      	ldrb	r3, [r5, #1]
 800b8ba:	2b07      	cmp	r3, #7
 800b8bc:	bf0c      	ite	eq
 800b8be:	2308      	moveq	r3, #8
 800b8c0:	2300      	movne	r3, #0
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	2124      	movs	r1, #36	; 0x24
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	f7fe ffd6 	bl	800a878 <dwt_write8bitoffsetreg>
 800b8cc:	7aeb      	ldrb	r3, [r5, #11]
 800b8ce:	f003 0303 	and.w	r3, r3, #3
 800b8d2:	2b03      	cmp	r3, #3
 800b8d4:	bf0c      	ite	eq
 800b8d6:	4b91      	ldreq	r3, [pc, #580]	; (800bb1c <ull_configure+0x3c4>)
 800b8d8:	4b91      	ldrne	r3, [pc, #580]	; (800bb20 <ull_configure+0x3c8>)
 800b8da:	2200      	movs	r2, #0
 800b8dc:	4991      	ldr	r1, [pc, #580]	; (800bb24 <ull_configure+0x3cc>)
 800b8de:	4620      	mov	r0, r4
 800b8e0:	f7fe fe3c 	bl	800a55c <dwt_write32bitoffsetreg>
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	4990      	ldr	r1, [pc, #576]	; (800bb28 <ull_configure+0x3d0>)
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	f7fe f9c2 	bl	8009c72 <dwt_read32bitoffsetreg>
 800b8ee:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 800b8f2:	f020 001f 	bic.w	r0, r0, #31
 800b8f6:	f1b9 0f09 	cmp.w	r9, #9
 800b8fa:	bf08      	it	eq
 800b8fc:	f040 0001 	orreq.w	r0, r0, #1
 800b900:	792a      	ldrb	r2, [r5, #4]
 800b902:	0212      	lsls	r2, r2, #8
 800b904:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 800b908:	78eb      	ldrb	r3, [r5, #3]
 800b90a:	00db      	lsls	r3, r3, #3
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	431a      	orrs	r2, r3
 800b910:	796b      	ldrb	r3, [r5, #5]
 800b912:	005b      	lsls	r3, r3, #1
 800b914:	f003 0306 	and.w	r3, r3, #6
 800b918:	4313      	orrs	r3, r2
 800b91a:	4303      	orrs	r3, r0
 800b91c:	2200      	movs	r2, #0
 800b91e:	4982      	ldr	r1, [pc, #520]	; (800bb28 <ull_configure+0x3d0>)
 800b920:	4620      	mov	r0, r4
 800b922:	f7fe fe1b 	bl	800a55c <dwt_write32bitoffsetreg>
 800b926:	79aa      	ldrb	r2, [r5, #6]
 800b928:	786b      	ldrb	r3, [r5, #1]
 800b92a:	031b      	lsls	r3, r3, #12
 800b92c:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800b930:	9300      	str	r3, [sp, #0]
 800b932:	f46f 4374 	mvn.w	r3, #62464	; 0xf400
 800b936:	2200      	movs	r2, #0
 800b938:	2120      	movs	r1, #32
 800b93a:	4620      	mov	r0, r4
 800b93c:	f7ff fa60 	bl	800ae00 <dwt_modify32bitoffsetreg>
 800b940:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 800b944:	b923      	cbnz	r3, 800b950 <ull_configure+0x1f8>
 800b946:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800b94a:	726b      	strb	r3, [r5, #9]
 800b94c:	2300      	movs	r3, #0
 800b94e:	72ab      	strb	r3, [r5, #10]
 800b950:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 800b954:	2202      	movs	r2, #2
 800b956:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800b95a:	4620      	mov	r0, r4
 800b95c:	f7fe fda1 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800b960:	2202      	movs	r2, #2
 800b962:	4972      	ldr	r1, [pc, #456]	; (800bb2c <ull_configure+0x3d4>)
 800b964:	4620      	mov	r0, r4
 800b966:	f7fe f9ac 	bl	8009cc2 <dwt_read8bitoffsetreg>
 800b96a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b96c:	7bdb      	ldrb	r3, [r3, #15]
 800b96e:	454b      	cmp	r3, r9
 800b970:	f000 809e 	beq.w	800bab0 <ull_configure+0x358>
 800b974:	2803      	cmp	r0, #3
 800b976:	f000 809f 	beq.w	800bab8 <ull_configure+0x360>
 800b97a:	f1b9 0f09 	cmp.w	r9, #9
 800b97e:	f000 80a0 	beq.w	800bac2 <ull_configure+0x36a>
 800b982:	4b6b      	ldr	r3, [pc, #428]	; (800bb30 <ull_configure+0x3d8>)
 800b984:	2200      	movs	r2, #0
 800b986:	496b      	ldr	r1, [pc, #428]	; (800bb34 <ull_configure+0x3dc>)
 800b988:	4620      	mov	r0, r4
 800b98a:	f7fe fde7 	bl	800a55c <dwt_write32bitoffsetreg>
 800b98e:	f641 733c 	movw	r3, #7996	; 0x1f3c
 800b992:	2200      	movs	r2, #0
 800b994:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 800b998:	4620      	mov	r0, r4
 800b99a:	f7fe fd82 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800b99e:	2314      	movs	r3, #20
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	4965      	ldr	r1, [pc, #404]	; (800bb38 <ull_configure+0x3e0>)
 800b9a4:	4620      	mov	r0, r4
 800b9a6:	f7fe ff67 	bl	800a878 <dwt_write8bitoffsetreg>
 800b9aa:	230e      	movs	r3, #14
 800b9ac:	2202      	movs	r2, #2
 800b9ae:	4963      	ldr	r1, [pc, #396]	; (800bb3c <ull_configure+0x3e4>)
 800b9b0:	4620      	mov	r0, r4
 800b9b2:	f7fe ff61 	bl	800a878 <dwt_write8bitoffsetreg>
 800b9b6:	2381      	movs	r3, #129	; 0x81
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	4961      	ldr	r1, [pc, #388]	; (800bb40 <ull_configure+0x3e8>)
 800b9bc:	4620      	mov	r0, r4
 800b9be:	f7fe ff5b 	bl	800a878 <dwt_write8bitoffsetreg>
 800b9c2:	2302      	movs	r3, #2
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	2144      	movs	r1, #68	; 0x44
 800b9c8:	4620      	mov	r0, r4
 800b9ca:	f7fe ff55 	bl	800a878 <dwt_write8bitoffsetreg>
 800b9ce:	2101      	movs	r1, #1
 800b9d0:	4620      	mov	r0, r4
 800b9d2:	f7ff fc45 	bl	800b260 <ull_setdwstate>
 800b9d6:	f04f 0b32 	mov.w	fp, #50	; 0x32
 800b9da:	f04f 0814 	mov.w	r8, #20
 800b9de:	2700      	movs	r7, #0
 800b9e0:	2644      	movs	r6, #68	; 0x44
 800b9e2:	4640      	mov	r0, r8
 800b9e4:	f7f5 fdc9 	bl	800157a <deca_usleep>
 800b9e8:	463a      	mov	r2, r7
 800b9ea:	4631      	mov	r1, r6
 800b9ec:	4620      	mov	r0, r4
 800b9ee:	f7fe f968 	bl	8009cc2 <dwt_read8bitoffsetreg>
 800b9f2:	f010 0f02 	tst.w	r0, #2
 800b9f6:	f040 80b5 	bne.w	800bb64 <ull_configure+0x40c>
 800b9fa:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800b9fe:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 800ba02:	d1ee      	bne.n	800b9e2 <ull_configure+0x28a>
 800ba04:	f06f 0001 	mvn.w	r0, #1
 800ba08:	e0de      	b.n	800bbc8 <ull_configure+0x470>
 800ba0a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ba0c:	8a13      	ldrh	r3, [r2, #16]
 800ba0e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ba12:	8213      	strh	r3, [r2, #16]
 800ba14:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ba18:	9300      	str	r3, [sp, #0]
 800ba1a:	f46f 5340 	mvn.w	r3, #12288	; 0x3000
 800ba1e:	2200      	movs	r2, #0
 800ba20:	493d      	ldr	r1, [pc, #244]	; (800bb18 <ull_configure+0x3c0>)
 800ba22:	4620      	mov	r0, r4
 800ba24:	f7ff f9ec 	bl	800ae00 <dwt_modify32bitoffsetreg>
 800ba28:	f240 3306 	movw	r3, #774	; 0x306
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	4945      	ldr	r1, [pc, #276]	; (800bb44 <ull_configure+0x3ec>)
 800ba30:	4620      	mov	r0, r4
 800ba32:	f7fe fd93 	bl	800a55c <dwt_write32bitoffsetreg>
 800ba36:	2300      	movs	r3, #0
 800ba38:	461a      	mov	r2, r3
 800ba3a:	4943      	ldr	r1, [pc, #268]	; (800bb48 <ull_configure+0x3f0>)
 800ba3c:	4620      	mov	r0, r4
 800ba3e:	f7fe fd8d 	bl	800a55c <dwt_write32bitoffsetreg>
 800ba42:	4b42      	ldr	r3, [pc, #264]	; (800bb4c <ull_configure+0x3f4>)
 800ba44:	2200      	movs	r2, #0
 800ba46:	4931      	ldr	r1, [pc, #196]	; (800bb0c <ull_configure+0x3b4>)
 800ba48:	4620      	mov	r0, r4
 800ba4a:	f7fe fd87 	bl	800a55c <dwt_write32bitoffsetreg>
 800ba4e:	239d      	movs	r3, #157	; 0x9d
 800ba50:	9300      	str	r3, [sp, #0]
 800ba52:	4b2f      	ldr	r3, [pc, #188]	; (800bb10 <ull_configure+0x3b8>)
 800ba54:	2200      	movs	r2, #0
 800ba56:	492f      	ldr	r1, [pc, #188]	; (800bb14 <ull_configure+0x3bc>)
 800ba58:	4620      	mov	r0, r4
 800ba5a:	f7ff f9d1 	bl	800ae00 <dwt_modify32bitoffsetreg>
 800ba5e:	e714      	b.n	800b88a <ull_configure+0x132>
 800ba60:	7b2a      	ldrb	r2, [r5, #12]
 800ba62:	4b29      	ldr	r3, [pc, #164]	; (800bb08 <ull_configure+0x3b0>)
 800ba64:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ba68:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 800ba6c:	fb02 f203 	mul.w	r2, r2, r3
 800ba70:	0c93      	lsrs	r3, r2, #18
 800ba72:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 800ba76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ba7a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800ba7e:	bf28      	it	cs
 800ba80:	3301      	addcs	r3, #1
 800ba82:	b29b      	uxth	r3, r3
 800ba84:	e6da      	b.n	800b83c <ull_configure+0xe4>
 800ba86:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ba8a:	9300      	str	r3, [sp, #0]
 800ba8c:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800ba90:	2200      	movs	r2, #0
 800ba92:	4921      	ldr	r1, [pc, #132]	; (800bb18 <ull_configure+0x3c0>)
 800ba94:	4620      	mov	r0, r4
 800ba96:	f7ff fd41 	bl	800b51c <dwt_modify16bitoffsetreg>
 800ba9a:	e6f6      	b.n	800b88a <ull_configure+0x132>
 800ba9c:	78ab      	ldrb	r3, [r5, #2]
 800ba9e:	9300      	str	r3, [sp, #0]
 800baa0:	23ec      	movs	r3, #236	; 0xec
 800baa2:	2200      	movs	r2, #0
 800baa4:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800baa8:	4620      	mov	r0, r4
 800baaa:	f7ff fb1b 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800baae:	e6fb      	b.n	800b8a8 <ull_configure+0x150>
 800bab0:	2803      	cmp	r0, #3
 800bab2:	f47f af62 	bne.w	800b97a <ull_configure+0x222>
 800bab6:	e058      	b.n	800bb6a <ull_configure+0x412>
 800bab8:	2102      	movs	r1, #2
 800baba:	4620      	mov	r0, r4
 800babc:	f7ff fbd0 	bl	800b260 <ull_setdwstate>
 800bac0:	e75b      	b.n	800b97a <ull_configure+0x222>
 800bac2:	4b23      	ldr	r3, [pc, #140]	; (800bb50 <ull_configure+0x3f8>)
 800bac4:	2200      	movs	r2, #0
 800bac6:	491b      	ldr	r1, [pc, #108]	; (800bb34 <ull_configure+0x3dc>)
 800bac8:	4620      	mov	r0, r4
 800baca:	f7fe fd47 	bl	800a55c <dwt_write32bitoffsetreg>
 800bace:	f640 733c 	movw	r3, #3900	; 0xf3c
 800bad2:	2200      	movs	r2, #0
 800bad4:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 800bad8:	4620      	mov	r0, r4
 800bada:	f7fe fce2 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800bade:	e75e      	b.n	800b99e <ull_configure+0x246>
 800bae0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bae4:	9300      	str	r3, [sp, #0]
 800bae6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800baea:	2200      	movs	r2, #0
 800baec:	490a      	ldr	r1, [pc, #40]	; (800bb18 <ull_configure+0x3c0>)
 800baee:	4620      	mov	r0, r4
 800baf0:	f7ff fd14 	bl	800b51c <dwt_modify16bitoffsetreg>
 800baf4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800baf6:	8a13      	ldrh	r3, [r2, #16]
 800baf8:	f043 0308 	orr.w	r3, r3, #8
 800bafc:	8213      	strh	r3, [r2, #16]
 800bafe:	e046      	b.n	800bb8e <ull_configure+0x436>
 800bb00:	00026668 	.word	0x00026668
 800bb04:	fffc4fcf 	.word	0xfffc4fcf
 800bb08:	08016354 	.word	0x08016354
 800bb0c:	000e0014 	.word	0x000e0014
 800bb10:	bfffff00 	.word	0xbfffff00
 800bb14:	000e0018 	.word	0x000e0018
 800bb18:	000b0008 	.word	0x000b0008
 800bb1c:	af5f35cc 	.word	0xaf5f35cc
 800bb20:	af5f584c 	.word	0xaf5f584c
 800bb24:	0006000c 	.word	0x0006000c
 800bb28:	00010008 	.word	0x00010008
 800bb2c:	000f0030 	.word	0x000f0030
 800bb30:	1c071134 	.word	0x1c071134
 800bb34:	0007001c 	.word	0x0007001c
 800bb38:	00070050 	.word	0x00070050
 800bb3c:	00070018 	.word	0x00070018
 800bb40:	00090008 	.word	0x00090008
 800bb44:	000e000c 	.word	0x000e000c
 800bb48:	000e0010 	.word	0x000e0010
 800bb4c:	000c5a0a 	.word	0x000c5a0a
 800bb50:	1c010034 	.word	0x1c010034
 800bb54:	2200      	movs	r2, #0
 800bb56:	9200      	str	r2, [sp, #0]
 800bb58:	23fe      	movs	r3, #254	; 0xfe
 800bb5a:	491d      	ldr	r1, [pc, #116]	; (800bbd0 <ull_configure+0x478>)
 800bb5c:	4620      	mov	r0, r4
 800bb5e:	f7ff fac1 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800bb62:	e01e      	b.n	800bba2 <ull_configure+0x44a>
 800bb64:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800bb66:	f883 900f 	strb.w	r9, [r3, #15]
 800bb6a:	792b      	ldrb	r3, [r5, #4]
 800bb6c:	3b09      	subs	r3, #9
 800bb6e:	b2db      	uxtb	r3, r3
 800bb70:	2b0f      	cmp	r3, #15
 800bb72:	d8ef      	bhi.n	800bb54 <ull_configure+0x3fc>
 800bb74:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800bb76:	7a1b      	ldrb	r3, [r3, #8]
 800bb78:	2b01      	cmp	r3, #1
 800bb7a:	d0b1      	beq.n	800bae0 <ull_configure+0x388>
 800bb7c:	4649      	mov	r1, r9
 800bb7e:	4620      	mov	r0, r4
 800bb80:	f7fe fda4 	bl	800a6cc <ull_configmrxlut>
 800bb84:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800bb86:	8a13      	ldrh	r3, [r2, #16]
 800bb88:	f023 0308 	bic.w	r3, r3, #8
 800bb8c:	8213      	strh	r3, [r2, #16]
 800bb8e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800bb92:	9300      	str	r3, [sp, #0]
 800bb94:	f248 13ff 	movw	r3, #33279	; 0x81ff
 800bb98:	2200      	movs	r2, #0
 800bb9a:	490d      	ldr	r1, [pc, #52]	; (800bbd0 <ull_configure+0x478>)
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	f7ff fcbd 	bl	800b51c <dwt_modify16bitoffsetreg>
 800bba2:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 800bba6:	bfcc      	ite	gt
 800bba8:	f04f 5300 	movgt.w	r3, #536870912	; 0x20000000
 800bbac:	f04f 53a0 	movle.w	r3, #335544320	; 0x14000000
 800bbb0:	9300      	str	r3, [sp, #0]
 800bbb2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	4906      	ldr	r1, [pc, #24]	; (800bbd4 <ull_configure+0x47c>)
 800bbba:	4620      	mov	r0, r4
 800bbbc:	f7ff f920 	bl	800ae00 <dwt_modify32bitoffsetreg>
 800bbc0:	2101      	movs	r1, #1
 800bbc2:	4620      	mov	r0, r4
 800bbc4:	f7ff fd12 	bl	800b5ec <ull_pgf_cal>
 800bbc8:	b003      	add	sp, #12
 800bbca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbce:	bf00      	nop
 800bbd0:	00030018 	.word	0x00030018
 800bbd4:	00060010 	.word	0x00060010

0800bbd8 <ull_initialise>:
 800bbd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbda:	b083      	sub	sp, #12
 800bbdc:	4605      	mov	r5, r0
 800bbde:	460e      	mov	r6, r1
 800bbe0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d051      	beq.n	800bc8a <ull_initialise+0xb2>
 800bbe6:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 800bbe8:	2300      	movs	r3, #0
 800bbea:	73a3      	strb	r3, [r4, #14]
 800bbec:	2202      	movs	r2, #2
 800bbee:	8222      	strh	r2, [r4, #16]
 800bbf0:	7523      	strb	r3, [r4, #20]
 800bbf2:	7563      	strb	r3, [r4, #21]
 800bbf4:	73e3      	strb	r3, [r4, #15]
 800bbf6:	7263      	strb	r3, [r4, #9]
 800bbf8:	72a3      	strb	r3, [r4, #10]
 800bbfa:	2104      	movs	r1, #4
 800bbfc:	4628      	mov	r0, r5
 800bbfe:	f7fe fc8b 	bl	800a518 <_dwt_otpread>
 800bc02:	4607      	mov	r7, r0
 800bc04:	2105      	movs	r1, #5
 800bc06:	4628      	mov	r0, r5
 800bc08:	f7fe fc86 	bl	800a518 <_dwt_otpread>
 800bc0c:	b10f      	cbz	r7, 800bc12 <ull_initialise+0x3a>
 800bc0e:	2800      	cmp	r0, #0
 800bc10:	d140      	bne.n	800bc94 <ull_initialise+0xbc>
 800bc12:	2120      	movs	r1, #32
 800bc14:	4628      	mov	r0, r5
 800bc16:	f7fe fc7f 	bl	800a518 <_dwt_otpread>
 800bc1a:	4b35      	ldr	r3, [pc, #212]	; (800bcf0 <ull_initialise+0x118>)
 800bc1c:	4298      	cmp	r0, r3
 800bc1e:	bf0c      	ite	eq
 800bc20:	2301      	moveq	r3, #1
 800bc22:	2300      	movne	r3, #0
 800bc24:	7223      	strb	r3, [r4, #8]
 800bc26:	f016 0f10 	tst.w	r6, #16
 800bc2a:	d142      	bne.n	800bcb2 <ull_initialise+0xda>
 800bc2c:	f016 0f20 	tst.w	r6, #32
 800bc30:	d145      	bne.n	800bcbe <ull_initialise+0xe6>
 800bc32:	f016 0f40 	tst.w	r6, #64	; 0x40
 800bc36:	d148      	bne.n	800bcca <ull_initialise+0xf2>
 800bc38:	f016 0f80 	tst.w	r6, #128	; 0x80
 800bc3c:	d14c      	bne.n	800bcd8 <ull_initialise+0x100>
 800bc3e:	7aa3      	ldrb	r3, [r4, #10]
 800bc40:	b90b      	cbnz	r3, 800bc46 <ull_initialise+0x6e>
 800bc42:	2385      	movs	r3, #133	; 0x85
 800bc44:	72a3      	strb	r3, [r4, #10]
 800bc46:	7a63      	ldrb	r3, [r4, #9]
 800bc48:	b90b      	cbnz	r3, 800bc4e <ull_initialise+0x76>
 800bc4a:	2374      	movs	r3, #116	; 0x74
 800bc4c:	7263      	strb	r3, [r4, #9]
 800bc4e:	211f      	movs	r1, #31
 800bc50:	4628      	mov	r0, r5
 800bc52:	f7fe fc61 	bl	800a518 <_dwt_otpread>
 800bc56:	7320      	strb	r0, [r4, #12]
 800bc58:	211e      	movs	r1, #30
 800bc5a:	4628      	mov	r0, r5
 800bc5c:	f7fe fc5c 	bl	800a518 <_dwt_otpread>
 800bc60:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
 800bc64:	bf12      	itee	ne
 800bc66:	7360      	strbne	r0, [r4, #13]
 800bc68:	232e      	moveq	r3, #46	; 0x2e
 800bc6a:	7363      	strbeq	r3, [r4, #13]
 800bc6c:	7b63      	ldrb	r3, [r4, #13]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	4920      	ldr	r1, [pc, #128]	; (800bcf4 <ull_initialise+0x11c>)
 800bc72:	4628      	mov	r0, r5
 800bc74:	f7fe fe00 	bl	800a878 <dwt_write8bitoffsetreg>
 800bc78:	2135      	movs	r1, #53	; 0x35
 800bc7a:	4628      	mov	r0, r5
 800bc7c:	f7fe fc4c 	bl	800a518 <_dwt_otpread>
 800bc80:	4603      	mov	r3, r0
 800bc82:	bb78      	cbnz	r0, 800bce4 <ull_initialise+0x10c>
 800bc84:	2000      	movs	r0, #0
 800bc86:	b003      	add	sp, #12
 800bc88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc8a:	2028      	movs	r0, #40	; 0x28
 800bc8c:	f008 f8f8 	bl	8013e80 <malloc>
 800bc90:	6528      	str	r0, [r5, #80]	; 0x50
 800bc92:	e7a8      	b.n	800bbe6 <ull_initialise+0xe>
 800bc94:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc98:	9300      	str	r3, [sp, #0]
 800bc9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bc9e:	2200      	movs	r2, #0
 800bca0:	4915      	ldr	r1, [pc, #84]	; (800bcf8 <ull_initialise+0x120>)
 800bca2:	4628      	mov	r0, r5
 800bca4:	f7ff fc3a 	bl	800b51c <dwt_modify16bitoffsetreg>
 800bca8:	8a23      	ldrh	r3, [r4, #16]
 800bcaa:	f043 0310 	orr.w	r3, r3, #16
 800bcae:	8223      	strh	r3, [r4, #16]
 800bcb0:	e7af      	b.n	800bc12 <ull_initialise+0x3a>
 800bcb2:	2106      	movs	r1, #6
 800bcb4:	4628      	mov	r0, r5
 800bcb6:	f7fe fc2f 	bl	800a518 <_dwt_otpread>
 800bcba:	6020      	str	r0, [r4, #0]
 800bcbc:	e7b6      	b.n	800bc2c <ull_initialise+0x54>
 800bcbe:	2107      	movs	r1, #7
 800bcc0:	4628      	mov	r0, r5
 800bcc2:	f7fe fc29 	bl	800a518 <_dwt_otpread>
 800bcc6:	6060      	str	r0, [r4, #4]
 800bcc8:	e7b3      	b.n	800bc32 <ull_initialise+0x5a>
 800bcca:	2108      	movs	r1, #8
 800bccc:	4628      	mov	r0, r5
 800bcce:	f7fe fc23 	bl	800a518 <_dwt_otpread>
 800bcd2:	0c00      	lsrs	r0, r0, #16
 800bcd4:	7260      	strb	r0, [r4, #9]
 800bcd6:	e7af      	b.n	800bc38 <ull_initialise+0x60>
 800bcd8:	2109      	movs	r1, #9
 800bcda:	4628      	mov	r0, r5
 800bcdc:	f7fe fc1c 	bl	800a518 <_dwt_otpread>
 800bce0:	72a0      	strb	r0, [r4, #10]
 800bce2:	e7ac      	b.n	800bc3e <ull_initialise+0x66>
 800bce4:	2200      	movs	r2, #0
 800bce6:	4905      	ldr	r1, [pc, #20]	; (800bcfc <ull_initialise+0x124>)
 800bce8:	4628      	mov	r0, r5
 800bcea:	f7fe fc37 	bl	800a55c <dwt_write32bitoffsetreg>
 800bcee:	e7c9      	b.n	800bc84 <ull_initialise+0xac>
 800bcf0:	10000240 	.word	0x10000240
 800bcf4:	00090014 	.word	0x00090014
 800bcf8:	000b0008 	.word	0x000b0008
 800bcfc:	00090004 	.word	0x00090004

0800bd00 <ull_rxenable>:
 800bd00:	b530      	push	{r4, r5, lr}
 800bd02:	b083      	sub	sp, #12
 800bd04:	4605      	mov	r5, r0
 800bd06:	460c      	mov	r4, r1
 800bd08:	b171      	cbz	r1, 800bd28 <ull_rxenable+0x28>
 800bd0a:	f021 0302 	bic.w	r3, r1, #2
 800bd0e:	3b01      	subs	r3, #1
 800bd10:	2b0f      	cmp	r3, #15
 800bd12:	d862      	bhi.n	800bdda <ull_rxenable+0xda>
 800bd14:	e8df f003 	tbb	[pc, r3]
 800bd18:	24616111 	.word	0x24616111
 800bd1c:	2d616161 	.word	0x2d616161
 800bd20:	61616161 	.word	0x61616161
 800bd24:	3a616161 	.word	0x3a616161
 800bd28:	2102      	movs	r1, #2
 800bd2a:	9101      	str	r1, [sp, #4]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	9200      	str	r2, [sp, #0]
 800bd30:	4613      	mov	r3, r2
 800bd32:	f7fd ff16 	bl	8009b62 <dwt_xfer3xxx>
 800bd36:	4620      	mov	r0, r4
 800bd38:	e010      	b.n	800bd5c <ull_rxenable+0x5c>
 800bd3a:	2302      	movs	r3, #2
 800bd3c:	9301      	str	r3, [sp, #4]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	9200      	str	r2, [sp, #0]
 800bd42:	4613      	mov	r3, r2
 800bd44:	2104      	movs	r1, #4
 800bd46:	f7fd ff0c 	bl	8009b62 <dwt_xfer3xxx>
 800bd4a:	2203      	movs	r2, #3
 800bd4c:	2144      	movs	r1, #68	; 0x44
 800bd4e:	4628      	mov	r0, r5
 800bd50:	f7fd ffb7 	bl	8009cc2 <dwt_read8bitoffsetreg>
 800bd54:	f010 0f08 	tst.w	r0, #8
 800bd58:	d125      	bne.n	800bda6 <ull_rxenable+0xa6>
 800bd5a:	2000      	movs	r0, #0
 800bd5c:	b003      	add	sp, #12
 800bd5e:	bd30      	pop	{r4, r5, pc}
 800bd60:	2302      	movs	r3, #2
 800bd62:	9301      	str	r3, [sp, #4]
 800bd64:	2200      	movs	r2, #0
 800bd66:	9200      	str	r2, [sp, #0]
 800bd68:	4613      	mov	r3, r2
 800bd6a:	210a      	movs	r1, #10
 800bd6c:	f7fd fef9 	bl	8009b62 <dwt_xfer3xxx>
 800bd70:	e7eb      	b.n	800bd4a <ull_rxenable+0x4a>
 800bd72:	2100      	movs	r1, #0
 800bd74:	f7fe fc07 	bl	800a586 <_dwt_adjust_delaytime>
 800bd78:	2302      	movs	r3, #2
 800bd7a:	9301      	str	r3, [sp, #4]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	9200      	str	r2, [sp, #0]
 800bd80:	4613      	mov	r3, r2
 800bd82:	2108      	movs	r1, #8
 800bd84:	4628      	mov	r0, r5
 800bd86:	f7fd feec 	bl	8009b62 <dwt_xfer3xxx>
 800bd8a:	e7de      	b.n	800bd4a <ull_rxenable+0x4a>
 800bd8c:	2101      	movs	r1, #1
 800bd8e:	f7fe fbfa 	bl	800a586 <_dwt_adjust_delaytime>
 800bd92:	2302      	movs	r3, #2
 800bd94:	9301      	str	r3, [sp, #4]
 800bd96:	2200      	movs	r2, #0
 800bd98:	9200      	str	r2, [sp, #0]
 800bd9a:	4613      	mov	r3, r2
 800bd9c:	2106      	movs	r1, #6
 800bd9e:	4628      	mov	r0, r5
 800bda0:	f7fd fedf 	bl	8009b62 <dwt_xfer3xxx>
 800bda4:	e7d1      	b.n	800bd4a <ull_rxenable+0x4a>
 800bda6:	2302      	movs	r3, #2
 800bda8:	9301      	str	r3, [sp, #4]
 800bdaa:	2100      	movs	r1, #0
 800bdac:	9100      	str	r1, [sp, #0]
 800bdae:	460b      	mov	r3, r1
 800bdb0:	460a      	mov	r2, r1
 800bdb2:	4628      	mov	r0, r5
 800bdb4:	f7fd fed5 	bl	8009b62 <dwt_xfer3xxx>
 800bdb8:	f014 0f02 	tst.w	r4, #2
 800bdbc:	d002      	beq.n	800bdc4 <ull_rxenable+0xc4>
 800bdbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bdc2:	e7cb      	b.n	800bd5c <ull_rxenable+0x5c>
 800bdc4:	2102      	movs	r1, #2
 800bdc6:	9101      	str	r1, [sp, #4]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	9200      	str	r2, [sp, #0]
 800bdcc:	4613      	mov	r3, r2
 800bdce:	4628      	mov	r0, r5
 800bdd0:	f7fd fec7 	bl	8009b62 <dwt_xfer3xxx>
 800bdd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bdd8:	e7c0      	b.n	800bd5c <ull_rxenable+0x5c>
 800bdda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bdde:	e7bd      	b.n	800bd5c <ull_rxenable+0x5c>

0800bde0 <ull_softreset_no_sema_fcmd>:
 800bde0:	b570      	push	{r4, r5, r6, lr}
 800bde2:	b082      	sub	sp, #8
 800bde4:	4606      	mov	r6, r0
 800bde6:	2502      	movs	r5, #2
 800bde8:	9501      	str	r5, [sp, #4]
 800bdea:	2400      	movs	r4, #0
 800bdec:	9400      	str	r4, [sp, #0]
 800bdee:	4623      	mov	r3, r4
 800bdf0:	4622      	mov	r2, r4
 800bdf2:	2119      	movs	r1, #25
 800bdf4:	f7fd feb5 	bl	8009b62 <dwt_xfer3xxx>
 800bdf8:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800bdfa:	739c      	strb	r4, [r3, #14]
 800bdfc:	821d      	strh	r5, [r3, #16]
 800bdfe:	751c      	strb	r4, [r3, #20]
 800be00:	755c      	strb	r4, [r3, #21]
 800be02:	73dc      	strb	r4, [r3, #15]
 800be04:	b002      	add	sp, #8
 800be06:	bd70      	pop	{r4, r5, r6, pc}

0800be08 <ull_softreset_fcmd>:
 800be08:	b570      	push	{r4, r5, r6, lr}
 800be0a:	b082      	sub	sp, #8
 800be0c:	4606      	mov	r6, r0
 800be0e:	2502      	movs	r5, #2
 800be10:	9501      	str	r5, [sp, #4]
 800be12:	2400      	movs	r4, #0
 800be14:	9400      	str	r4, [sp, #0]
 800be16:	4623      	mov	r3, r4
 800be18:	4622      	mov	r2, r4
 800be1a:	2118      	movs	r1, #24
 800be1c:	f7fd fea1 	bl	8009b62 <dwt_xfer3xxx>
 800be20:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800be22:	739c      	strb	r4, [r3, #14]
 800be24:	821d      	strh	r5, [r3, #16]
 800be26:	751c      	strb	r4, [r3, #20]
 800be28:	755c      	strb	r4, [r3, #21]
 800be2a:	73dc      	strb	r4, [r3, #15]
 800be2c:	b002      	add	sp, #8
 800be2e:	bd70      	pop	{r4, r5, r6, pc}

0800be30 <dwt_ioctl>:
 800be30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be34:	b091      	sub	sp, #68	; 0x44
 800be36:	4606      	mov	r6, r0
 800be38:	4615      	mov	r5, r2
 800be3a:	461c      	mov	r4, r3
 800be3c:	299c      	cmp	r1, #156	; 0x9c
 800be3e:	f200 809f 	bhi.w	800bf80 <dwt_ioctl+0x150>
 800be42:	e8df f011 	tbh	[pc, r1, lsl #1]
 800be46:	0a54      	.short	0x0a54
 800be48:	00a30a5f 	.word	0x00a30a5f
 800be4c:	00c000a7 	.word	0x00c000a7
 800be50:	0192014c 	.word	0x0192014c
 800be54:	0156016f 	.word	0x0156016f
 800be58:	01ad01a2 	.word	0x01ad01a2
 800be5c:	01bd01b5 	.word	0x01bd01b5
 800be60:	01cd01c5 	.word	0x01cd01c5
 800be64:	01d901d5 	.word	0x01d901d5
 800be68:	027201e1 	.word	0x027201e1
 800be6c:	02850280 	.word	0x02850280
 800be70:	0294028f 	.word	0x0294028f
 800be74:	02a20299 	.word	0x02a20299
 800be78:	02dd02a7 	.word	0x02dd02a7
 800be7c:	030502fa 	.word	0x030502fa
 800be80:	031a0310 	.word	0x031a0310
 800be84:	03480352 	.word	0x03480352
 800be88:	0324033e 	.word	0x0324033e
 800be8c:	03810331 	.word	0x03810331
 800be90:	022f01fc 	.word	0x022f01fc
 800be94:	0245023d 	.word	0x0245023d
 800be98:	097d0259 	.word	0x097d0259
 800be9c:	03610982 	.word	0x03610982
 800bea0:	03a3039f 	.word	0x03a3039f
 800bea4:	03b103ac 	.word	0x03b103ac
 800bea8:	03e503db 	.word	0x03e503db
 800beac:	041703ed 	.word	0x041703ed
 800beb0:	042e0423 	.word	0x042e0423
 800beb4:	04390357 	.word	0x04390357
 800beb8:	04540442 	.word	0x04540442
 800bebc:	047e046d 	.word	0x047e046d
 800bec0:	04ca04c0 	.word	0x04ca04c0
 800bec4:	04ff04f0 	.word	0x04ff04f0
 800bec8:	0508051a 	.word	0x0508051a
 800becc:	056a0524 	.word	0x056a0524
 800bed0:	05a20582 	.word	0x05a20582
 800bed4:	05e505d1 	.word	0x05e505d1
 800bed8:	060a05ee 	.word	0x060a05ee
 800bedc:	074305f7 	.word	0x074305f7
 800bee0:	07d30785 	.word	0x07d30785
 800bee4:	07e407d9 	.word	0x07e407d9
 800bee8:	081d07fd 	.word	0x081d07fd
 800beec:	08310827 	.word	0x08310827
 800bef0:	0868085f 	.word	0x0868085f
 800bef4:	0877086e 	.word	0x0877086e
 800bef8:	08910884 	.word	0x08910884
 800befc:	08a4089b 	.word	0x08a4089b
 800bf00:	08b808ad 	.word	0x08b808ad
 800bf04:	08c908c3 	.word	0x08c908c3
 800bf08:	08f708ec 	.word	0x08f708ec
 800bf0c:	090d0902 	.word	0x090d0902
 800bf10:	0959094e 	.word	0x0959094e
 800bf14:	09880972 	.word	0x09880972
 800bf18:	0a0709fd 	.word	0x0a0709fd
 800bf1c:	0a670a12 	.word	0x0a670a12
 800bf20:	0a490a1c 	.word	0x0a490a1c
 800bf24:	09c60777 	.word	0x09c60777
 800bf28:	0ad509e7 	.word	0x0ad509e7
 800bf2c:	0a740aca 	.word	0x0a740aca
 800bf30:	0a8a0a7f 	.word	0x0a8a0a7f
 800bf34:	0aa00a95 	.word	0x0aa00a95
 800bf38:	0ab60aab 	.word	0x0ab60aab
 800bf3c:	0cb50abf 	.word	0x0cb50abf
 800bf40:	0d2a0cef 	.word	0x0d2a0cef
 800bf44:	0df90d4d 	.word	0x0df90d4d
 800bf48:	0afd0e0e 	.word	0x0afd0e0e
 800bf4c:	0bf40bc1 	.word	0x0bf40bc1
 800bf50:	0c040bff 	.word	0x0c040bff
 800bf54:	0c140c09 	.word	0x0c140c09
 800bf58:	0c320c27 	.word	0x0c320c27
 800bf5c:	0c5c0c47 	.word	0x0c5c0c47
 800bf60:	009d0c98 	.word	0x009d0c98
 800bf64:	009d009d 	.word	0x009d009d
 800bf68:	009d009d 	.word	0x009d009d
 800bf6c:	009d009d 	.word	0x009d009d
 800bf70:	0d64009d 	.word	0x0d64009d
 800bf74:	0ec20d75 	.word	0x0ec20d75
 800bf78:	0db40dbf 	.word	0x0db40dbf
 800bf7c:	0dca0dd3 	.word	0x0dca0dd3
 800bf80:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800bf84:	4628      	mov	r0, r5
 800bf86:	b011      	add	sp, #68	; 0x44
 800bf88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf8c:	6843      	ldr	r3, [r0, #4]
 800bf8e:	4798      	blx	r3
 800bf90:	2500      	movs	r5, #0
 800bf92:	e7f7      	b.n	800bf84 <dwt_ioctl+0x154>
 800bf94:	2202      	movs	r2, #2
 800bf96:	49b4      	ldr	r1, [pc, #720]	; (800c268 <dwt_ioctl+0x438>)
 800bf98:	f7fd fe93 	bl	8009cc2 <dwt_read8bitoffsetreg>
 800bf9c:	2803      	cmp	r0, #3
 800bf9e:	d801      	bhi.n	800bfa4 <dwt_ioctl+0x174>
 800bfa0:	2500      	movs	r5, #0
 800bfa2:	e7ef      	b.n	800bf84 <dwt_ioctl+0x154>
 800bfa4:	f7f5 fac0 	bl	8001528 <decamutexon>
 800bfa8:	4604      	mov	r4, r0
 800bfaa:	2302      	movs	r3, #2
 800bfac:	9301      	str	r3, [sp, #4]
 800bfae:	2500      	movs	r5, #0
 800bfb0:	9500      	str	r5, [sp, #0]
 800bfb2:	462b      	mov	r3, r5
 800bfb4:	462a      	mov	r2, r5
 800bfb6:	4629      	mov	r1, r5
 800bfb8:	4630      	mov	r0, r6
 800bfba:	f7fd fdd2 	bl	8009b62 <dwt_xfer3xxx>
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	f7f5 fac3 	bl	800154a <decamutexoff>
 800bfc4:	e7de      	b.n	800bf84 <dwt_ioctl+0x154>
 800bfc6:	2c00      	cmp	r4, #0
 800bfc8:	f001 8602 	beq.w	800dbd0 <dwt_ioctl+0x1da0>
 800bfcc:	7824      	ldrb	r4, [r4, #0]
 800bfce:	f014 0f1d 	tst.w	r4, #29
 800bfd2:	d061      	beq.n	800c098 <dwt_ioctl+0x268>
 800bfd4:	f014 0f01 	tst.w	r4, #1
 800bfd8:	d023      	beq.n	800c022 <dwt_ioctl+0x1f2>
 800bfda:	f014 0f02 	tst.w	r4, #2
 800bfde:	f04f 0302 	mov.w	r3, #2
 800bfe2:	9301      	str	r3, [sp, #4]
 800bfe4:	f04f 0200 	mov.w	r2, #0
 800bfe8:	9200      	str	r2, [sp, #0]
 800bfea:	4613      	mov	r3, r2
 800bfec:	bf14      	ite	ne
 800bfee:	210d      	movne	r1, #13
 800bff0:	2103      	moveq	r1, #3
 800bff2:	f7fd fdb6 	bl	8009b62 <dwt_xfer3xxx>
 800bff6:	2203      	movs	r2, #3
 800bff8:	2144      	movs	r1, #68	; 0x44
 800bffa:	4630      	mov	r0, r6
 800bffc:	f7fd fe61 	bl	8009cc2 <dwt_read8bitoffsetreg>
 800c000:	f010 0f08 	tst.w	r0, #8
 800c004:	bf08      	it	eq
 800c006:	2500      	moveq	r5, #0
 800c008:	d0bc      	beq.n	800bf84 <dwt_ioctl+0x154>
 800c00a:	2302      	movs	r3, #2
 800c00c:	9301      	str	r3, [sp, #4]
 800c00e:	2100      	movs	r1, #0
 800c010:	9100      	str	r1, [sp, #0]
 800c012:	460b      	mov	r3, r1
 800c014:	460a      	mov	r2, r1
 800c016:	4630      	mov	r0, r6
 800c018:	f7fd fda3 	bl	8009b62 <dwt_xfer3xxx>
 800c01c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800c020:	e7b0      	b.n	800bf84 <dwt_ioctl+0x154>
 800c022:	f014 0f08 	tst.w	r4, #8
 800c026:	d111      	bne.n	800c04c <dwt_ioctl+0x21c>
 800c028:	f014 0f10 	tst.w	r4, #16
 800c02c:	d121      	bne.n	800c072 <dwt_ioctl+0x242>
 800c02e:	f014 0f02 	tst.w	r4, #2
 800c032:	f04f 0302 	mov.w	r3, #2
 800c036:	9301      	str	r3, [sp, #4]
 800c038:	f04f 0200 	mov.w	r2, #0
 800c03c:	9200      	str	r2, [sp, #0]
 800c03e:	4613      	mov	r3, r2
 800c040:	bf14      	ite	ne
 800c042:	2110      	movne	r1, #16
 800c044:	2109      	moveq	r1, #9
 800c046:	f7fd fd8c 	bl	8009b62 <dwt_xfer3xxx>
 800c04a:	e7d4      	b.n	800bff6 <dwt_ioctl+0x1c6>
 800c04c:	2100      	movs	r1, #0
 800c04e:	f7fe fa9a 	bl	800a586 <_dwt_adjust_delaytime>
 800c052:	f014 0f02 	tst.w	r4, #2
 800c056:	f04f 0302 	mov.w	r3, #2
 800c05a:	9301      	str	r3, [sp, #4]
 800c05c:	f04f 0200 	mov.w	r2, #0
 800c060:	9200      	str	r2, [sp, #0]
 800c062:	4613      	mov	r3, r2
 800c064:	bf14      	ite	ne
 800c066:	210f      	movne	r1, #15
 800c068:	2107      	moveq	r1, #7
 800c06a:	4630      	mov	r0, r6
 800c06c:	f7fd fd79 	bl	8009b62 <dwt_xfer3xxx>
 800c070:	e7c1      	b.n	800bff6 <dwt_ioctl+0x1c6>
 800c072:	2101      	movs	r1, #1
 800c074:	f7fe fa87 	bl	800a586 <_dwt_adjust_delaytime>
 800c078:	f014 0f02 	tst.w	r4, #2
 800c07c:	f04f 0302 	mov.w	r3, #2
 800c080:	9301      	str	r3, [sp, #4]
 800c082:	f04f 0200 	mov.w	r2, #0
 800c086:	9200      	str	r2, [sp, #0]
 800c088:	4613      	mov	r3, r2
 800c08a:	bf14      	ite	ne
 800c08c:	210e      	movne	r1, #14
 800c08e:	2105      	moveq	r1, #5
 800c090:	4630      	mov	r0, r6
 800c092:	f7fd fd66 	bl	8009b62 <dwt_xfer3xxx>
 800c096:	e7ae      	b.n	800bff6 <dwt_ioctl+0x1c6>
 800c098:	f014 0f20 	tst.w	r4, #32
 800c09c:	d00f      	beq.n	800c0be <dwt_ioctl+0x28e>
 800c09e:	f014 0f02 	tst.w	r4, #2
 800c0a2:	f04f 0302 	mov.w	r3, #2
 800c0a6:	9301      	str	r3, [sp, #4]
 800c0a8:	f04f 0500 	mov.w	r5, #0
 800c0ac:	9500      	str	r5, [sp, #0]
 800c0ae:	462b      	mov	r3, r5
 800c0b0:	462a      	mov	r2, r5
 800c0b2:	bf14      	ite	ne
 800c0b4:	2111      	movne	r1, #17
 800c0b6:	210b      	moveq	r1, #11
 800c0b8:	f7fd fd53 	bl	8009b62 <dwt_xfer3xxx>
 800c0bc:	e762      	b.n	800bf84 <dwt_ioctl+0x154>
 800c0be:	f014 0f02 	tst.w	r4, #2
 800c0c2:	f04f 0302 	mov.w	r3, #2
 800c0c6:	9301      	str	r3, [sp, #4]
 800c0c8:	f04f 0500 	mov.w	r5, #0
 800c0cc:	9500      	str	r5, [sp, #0]
 800c0ce:	462b      	mov	r3, r5
 800c0d0:	462a      	mov	r2, r5
 800c0d2:	bf14      	ite	ne
 800c0d4:	210c      	movne	r1, #12
 800c0d6:	2101      	moveq	r1, #1
 800c0d8:	f7fd fd43 	bl	8009b62 <dwt_xfer3xxx>
 800c0dc:	e752      	b.n	800bf84 <dwt_ioctl+0x154>
 800c0de:	2c00      	cmp	r4, #0
 800c0e0:	f001 8579 	beq.w	800dbd6 <dwt_ioctl+0x1da6>
 800c0e4:	6823      	ldr	r3, [r4, #0]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	2128      	movs	r1, #40	; 0x28
 800c0ea:	f7fe fa37 	bl	800a55c <dwt_write32bitoffsetreg>
 800c0ee:	2500      	movs	r5, #0
 800c0f0:	e748      	b.n	800bf84 <dwt_ioctl+0x154>
 800c0f2:	6823      	ldr	r3, [r4, #0]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	495d      	ldr	r1, [pc, #372]	; (800c26c <dwt_ioctl+0x43c>)
 800c0f8:	f7fe fa30 	bl	800a55c <dwt_write32bitoffsetreg>
 800c0fc:	6863      	ldr	r3, [r4, #4]
 800c0fe:	2200      	movs	r2, #0
 800c100:	495b      	ldr	r1, [pc, #364]	; (800c270 <dwt_ioctl+0x440>)
 800c102:	4630      	mov	r0, r6
 800c104:	f7fe fa2a 	bl	800a55c <dwt_write32bitoffsetreg>
 800c108:	68a3      	ldr	r3, [r4, #8]
 800c10a:	2200      	movs	r2, #0
 800c10c:	4959      	ldr	r1, [pc, #356]	; (800c274 <dwt_ioctl+0x444>)
 800c10e:	4630      	mov	r0, r6
 800c110:	f7fe fa24 	bl	800a55c <dwt_write32bitoffsetreg>
 800c114:	68e3      	ldr	r3, [r4, #12]
 800c116:	2200      	movs	r2, #0
 800c118:	4957      	ldr	r1, [pc, #348]	; (800c278 <dwt_ioctl+0x448>)
 800c11a:	4630      	mov	r0, r6
 800c11c:	f7fe fa1e 	bl	800a55c <dwt_write32bitoffsetreg>
 800c120:	2500      	movs	r5, #0
 800c122:	e72f      	b.n	800bf84 <dwt_ioctl+0x154>
 800c124:	2c00      	cmp	r4, #0
 800c126:	f001 8559 	beq.w	800dbdc <dwt_ioctl+0x1dac>
 800c12a:	8823      	ldrh	r3, [r4, #0]
 800c12c:	6865      	ldr	r5, [r4, #4]
 800c12e:	2d03      	cmp	r5, #3
 800c130:	f201 8557 	bhi.w	800dbe2 <dwt_ioctl+0x1db2>
 800c134:	e8df f005 	tbb	[pc, r5]
 800c138:	130d0702 	.word	0x130d0702
 800c13c:	2200      	movs	r2, #0
 800c13e:	494f      	ldr	r1, [pc, #316]	; (800c27c <dwt_ioctl+0x44c>)
 800c140:	f7fe f9af 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800c144:	e71e      	b.n	800bf84 <dwt_ioctl+0x154>
 800c146:	2202      	movs	r2, #2
 800c148:	494c      	ldr	r1, [pc, #304]	; (800c27c <dwt_ioctl+0x44c>)
 800c14a:	f7fe f9aa 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800c14e:	2500      	movs	r5, #0
 800c150:	e718      	b.n	800bf84 <dwt_ioctl+0x154>
 800c152:	2200      	movs	r2, #0
 800c154:	494a      	ldr	r1, [pc, #296]	; (800c280 <dwt_ioctl+0x450>)
 800c156:	f7fe f9a4 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800c15a:	2500      	movs	r5, #0
 800c15c:	e712      	b.n	800bf84 <dwt_ioctl+0x154>
 800c15e:	2202      	movs	r2, #2
 800c160:	4947      	ldr	r1, [pc, #284]	; (800c280 <dwt_ioctl+0x450>)
 800c162:	f7fe f99e 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800c166:	2500      	movs	r5, #0
 800c168:	e70c      	b.n	800bf84 <dwt_ioctl+0x154>
 800c16a:	2c00      	cmp	r4, #0
 800c16c:	f001 853c 	beq.w	800dbe8 <dwt_ioctl+0x1db8>
 800c170:	7823      	ldrb	r3, [r4, #0]
 800c172:	005b      	lsls	r3, r3, #1
 800c174:	f003 0306 	and.w	r3, r3, #6
 800c178:	9300      	str	r3, [sp, #0]
 800c17a:	f06f 0306 	mvn.w	r3, #6
 800c17e:	2200      	movs	r2, #0
 800c180:	4940      	ldr	r1, [pc, #256]	; (800c284 <dwt_ioctl+0x454>)
 800c182:	f7fe fe3d 	bl	800ae00 <dwt_modify32bitoffsetreg>
 800c186:	2500      	movs	r5, #0
 800c188:	e6fc      	b.n	800bf84 <dwt_ioctl+0x154>
 800c18a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c18e:	9300      	str	r3, [sp, #0]
 800c190:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c194:	2200      	movs	r2, #0
 800c196:	493c      	ldr	r1, [pc, #240]	; (800c288 <dwt_ioctl+0x458>)
 800c198:	f7fe fe32 	bl	800ae00 <dwt_modify32bitoffsetreg>
 800c19c:	2500      	movs	r5, #0
 800c19e:	e6f1      	b.n	800bf84 <dwt_ioctl+0x154>
 800c1a0:	2c00      	cmp	r4, #0
 800c1a2:	f001 8524 	beq.w	800dbee <dwt_ioctl+0x1dbe>
 800c1a6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c1a8:	7b1b      	ldrb	r3, [r3, #12]
 800c1aa:	7023      	strb	r3, [r4, #0]
 800c1ac:	2500      	movs	r5, #0
 800c1ae:	e6e9      	b.n	800bf84 <dwt_ioctl+0x154>
 800c1b0:	2c00      	cmp	r4, #0
 800c1b2:	f001 851f 	beq.w	800dbf4 <dwt_ioctl+0x1dc4>
 800c1b6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c1b8:	7a5b      	ldrb	r3, [r3, #9]
 800c1ba:	7023      	strb	r3, [r4, #0]
 800c1bc:	2500      	movs	r5, #0
 800c1be:	e6e1      	b.n	800bf84 <dwt_ioctl+0x154>
 800c1c0:	2c00      	cmp	r4, #0
 800c1c2:	f001 851a 	beq.w	800dbfa <dwt_ioctl+0x1dca>
 800c1c6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c1c8:	7a9b      	ldrb	r3, [r3, #10]
 800c1ca:	7023      	strb	r3, [r4, #0]
 800c1cc:	2500      	movs	r5, #0
 800c1ce:	e6d9      	b.n	800bf84 <dwt_ioctl+0x154>
 800c1d0:	2c00      	cmp	r4, #0
 800c1d2:	f001 8515 	beq.w	800dc00 <dwt_ioctl+0x1dd0>
 800c1d6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	6023      	str	r3, [r4, #0]
 800c1dc:	2500      	movs	r5, #0
 800c1de:	e6d1      	b.n	800bf84 <dwt_ioctl+0x154>
 800c1e0:	2c00      	cmp	r4, #0
 800c1e2:	f001 8510 	beq.w	800dc06 <dwt_ioctl+0x1dd6>
 800c1e6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c1e8:	685b      	ldr	r3, [r3, #4]
 800c1ea:	6023      	str	r3, [r4, #0]
 800c1ec:	2500      	movs	r5, #0
 800c1ee:	e6c9      	b.n	800bf84 <dwt_ioctl+0x154>
 800c1f0:	f7fe fc72 	bl	800aad8 <ull_signal_rx_buff_free>
 800c1f4:	2500      	movs	r5, #0
 800c1f6:	e6c5      	b.n	800bf84 <dwt_ioctl+0x154>
 800c1f8:	2c00      	cmp	r4, #0
 800c1fa:	f001 8507 	beq.w	800dc0c <dwt_ioctl+0x1ddc>
 800c1fe:	6821      	ldr	r1, [r4, #0]
 800c200:	f7fe f9e7 	bl	800a5d2 <ull_setrxaftertxdelay>
 800c204:	2500      	movs	r5, #0
 800c206:	e6bd      	b.n	800bf84 <dwt_ioctl+0x154>
 800c208:	2c00      	cmp	r4, #0
 800c20a:	f001 8502 	beq.w	800dc12 <dwt_ioctl+0x1de2>
 800c20e:	7825      	ldrb	r5, [r4, #0]
 800c210:	b15d      	cbz	r5, 800c22a <dwt_ioctl+0x3fa>
 800c212:	6864      	ldr	r4, [r4, #4]
 800c214:	2340      	movs	r3, #64	; 0x40
 800c216:	9300      	str	r3, [sp, #0]
 800c218:	23ff      	movs	r3, #255	; 0xff
 800c21a:	2200      	movs	r2, #0
 800c21c:	2110      	movs	r1, #16
 800c21e:	f7fe ff61 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800c222:	2d02      	cmp	r5, #2
 800c224:	d107      	bne.n	800c236 <dwt_ioctl+0x406>
 800c226:	60f4      	str	r4, [r6, #12]
 800c228:	e005      	b.n	800c236 <dwt_ioctl+0x406>
 800c22a:	2200      	movs	r2, #0
 800c22c:	9200      	str	r2, [sp, #0]
 800c22e:	23bf      	movs	r3, #191	; 0xbf
 800c230:	2110      	movs	r1, #16
 800c232:	f7fe ff57 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800c236:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800c238:	751d      	strb	r5, [r3, #20]
 800c23a:	2500      	movs	r5, #0
 800c23c:	e6a2      	b.n	800bf84 <dwt_ioctl+0x154>
 800c23e:	2c00      	cmp	r4, #0
 800c240:	f001 84ea 	beq.w	800dc18 <dwt_ioctl+0x1de8>
 800c244:	6865      	ldr	r5, [r4, #4]
 800c246:	7823      	ldrb	r3, [r4, #0]
 800c248:	2203      	movs	r2, #3
 800c24a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800c24e:	f7fe fb13 	bl	800a878 <dwt_write8bitoffsetreg>
 800c252:	b9dd      	cbnz	r5, 800c28c <dwt_ioctl+0x45c>
 800c254:	2200      	movs	r2, #0
 800c256:	9200      	str	r2, [sp, #0]
 800c258:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800c25c:	2110      	movs	r1, #16
 800c25e:	4630      	mov	r0, r6
 800c260:	f7ff f95c 	bl	800b51c <dwt_modify16bitoffsetreg>
 800c264:	e68e      	b.n	800bf84 <dwt_ioctl+0x154>
 800c266:	bf00      	nop
 800c268:	000f0030 	.word	0x000f0030
 800c26c:	00010054 	.word	0x00010054
 800c270:	00010058 	.word	0x00010058
 800c274:	0001005c 	.word	0x0001005c
 800c278:	00010060 	.word	0x00010060
 800c27c:	0001000c 	.word	0x0001000c
 800c280:	00010010 	.word	0x00010010
 800c284:	00010008 	.word	0x00010008
 800c288:	00110004 	.word	0x00110004
 800c28c:	f44f 2381 	mov.w	r3, #264192	; 0x40800
 800c290:	9300      	str	r3, [sp, #0]
 800c292:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c296:	2200      	movs	r2, #0
 800c298:	2110      	movs	r1, #16
 800c29a:	4630      	mov	r0, r6
 800c29c:	f7fe fdb0 	bl	800ae00 <dwt_modify32bitoffsetreg>
 800c2a0:	2500      	movs	r5, #0
 800c2a2:	e66f      	b.n	800bf84 <dwt_ioctl+0x154>
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	4611      	mov	r1, r2
 800c2a8:	f7fd fce3 	bl	8009c72 <dwt_read32bitoffsetreg>
 800c2ac:	68b2      	ldr	r2, [r6, #8]
 800c2ae:	6813      	ldr	r3, [r2, #0]
 800c2b0:	4043      	eors	r3, r0
 800c2b2:	6852      	ldr	r2, [r2, #4]
 800c2b4:	4213      	tst	r3, r2
 800c2b6:	bf14      	ite	ne
 800c2b8:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800c2bc:	2500      	moveq	r5, #0
 800c2be:	e661      	b.n	800bf84 <dwt_ioctl+0x154>
 800c2c0:	2c00      	cmp	r4, #0
 800c2c2:	f001 84ac 	beq.w	800dc1e <dwt_ioctl+0x1dee>
 800c2c6:	7821      	ldrb	r1, [r4, #0]
 800c2c8:	f7fe ff20 	bl	800b10c <ull_configciadiag>
 800c2cc:	2500      	movs	r5, #0
 800c2ce:	e659      	b.n	800bf84 <dwt_ioctl+0x154>
 800c2d0:	b93a      	cbnz	r2, 800c2e2 <dwt_ioctl+0x4b2>
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	9200      	str	r2, [sp, #0]
 800c2d6:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800c2da:	49b8      	ldr	r1, [pc, #736]	; (800c5bc <dwt_ioctl+0x78c>)
 800c2dc:	f7ff f91e 	bl	800b51c <dwt_modify16bitoffsetreg>
 800c2e0:	e650      	b.n	800bf84 <dwt_ioctl+0x154>
 800c2e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c2e6:	9300      	str	r3, [sp, #0]
 800c2e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	49b3      	ldr	r1, [pc, #716]	; (800c5bc <dwt_ioctl+0x78c>)
 800c2f0:	f7ff f914 	bl	800b51c <dwt_modify16bitoffsetreg>
 800c2f4:	2500      	movs	r5, #0
 800c2f6:	e645      	b.n	800bf84 <dwt_ioctl+0x154>
 800c2f8:	f002 0201 	and.w	r2, r2, #1
 800c2fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c300:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 800c304:	2a00      	cmp	r2, #0
 800c306:	bf08      	it	eq
 800c308:	460b      	moveq	r3, r1
 800c30a:	02d2      	lsls	r2, r2, #11
 800c30c:	f015 0f02 	tst.w	r5, #2
 800c310:	bf12      	itee	ne
 800c312:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 800c316:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c31a:	b29b      	uxtheq	r3, r3
 800c31c:	9200      	str	r2, [sp, #0]
 800c31e:	2200      	movs	r2, #0
 800c320:	49a6      	ldr	r1, [pc, #664]	; (800c5bc <dwt_ioctl+0x78c>)
 800c322:	f7ff f8fb 	bl	800b51c <dwt_modify16bitoffsetreg>
 800c326:	2500      	movs	r5, #0
 800c328:	e62c      	b.n	800bf84 <dwt_ioctl+0x154>
 800c32a:	b92a      	cbnz	r2, 800c338 <dwt_ioctl+0x508>
 800c32c:	4ba4      	ldr	r3, [pc, #656]	; (800c5c0 <dwt_ioctl+0x790>)
 800c32e:	2202      	movs	r2, #2
 800c330:	49a4      	ldr	r1, [pc, #656]	; (800c5c4 <dwt_ioctl+0x794>)
 800c332:	f7fe f913 	bl	800a55c <dwt_write32bitoffsetreg>
 800c336:	e625      	b.n	800bf84 <dwt_ioctl+0x154>
 800c338:	4ba3      	ldr	r3, [pc, #652]	; (800c5c8 <dwt_ioctl+0x798>)
 800c33a:	2202      	movs	r2, #2
 800c33c:	49a1      	ldr	r1, [pc, #644]	; (800c5c4 <dwt_ioctl+0x794>)
 800c33e:	f7fe f90d 	bl	800a55c <dwt_write32bitoffsetreg>
 800c342:	2500      	movs	r5, #0
 800c344:	e61e      	b.n	800bf84 <dwt_ioctl+0x154>
 800c346:	4611      	mov	r1, r2
 800c348:	f7fe f957 	bl	800a5fa <ull_setlnapamode>
 800c34c:	2500      	movs	r5, #0
 800c34e:	e619      	b.n	800bf84 <dwt_ioctl+0x154>
 800c350:	2c00      	cmp	r4, #0
 800c352:	f001 8467 	beq.w	800dc24 <dwt_ioctl+0x1df4>
 800c356:	2200      	movs	r2, #0
 800c358:	499c      	ldr	r1, [pc, #624]	; (800c5cc <dwt_ioctl+0x79c>)
 800c35a:	f7fd fcb2 	bl	8009cc2 <dwt_read8bitoffsetreg>
 800c35e:	7020      	strb	r0, [r4, #0]
 800c360:	2500      	movs	r5, #0
 800c362:	e60f      	b.n	800bf84 <dwt_ioctl+0x154>
 800c364:	4621      	mov	r1, r4
 800c366:	f7fe f969 	bl	800a63c <ull_configurestskey>
 800c36a:	2500      	movs	r5, #0
 800c36c:	e60a      	b.n	800bf84 <dwt_ioctl+0x154>
 800c36e:	4621      	mov	r1, r4
 800c370:	f7fe f988 	bl	800a684 <ull_configurestsiv>
 800c374:	2500      	movs	r5, #0
 800c376:	e605      	b.n	800bf84 <dwt_ioctl+0x154>
 800c378:	2301      	movs	r3, #1
 800c37a:	9300      	str	r3, [sp, #0]
 800c37c:	23ff      	movs	r3, #255	; 0xff
 800c37e:	2200      	movs	r2, #0
 800c380:	4993      	ldr	r1, [pc, #588]	; (800c5d0 <dwt_ioctl+0x7a0>)
 800c382:	f7fe feaf 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800c386:	2500      	movs	r5, #0
 800c388:	e5fc      	b.n	800bf84 <dwt_ioctl+0x154>
 800c38a:	4611      	mov	r1, r2
 800c38c:	f7fe f99e 	bl	800a6cc <ull_configmrxlut>
 800c390:	2500      	movs	r5, #0
 800c392:	e5f7      	b.n	800bf84 <dwt_ioctl+0x154>
 800c394:	2318      	movs	r3, #24
 800c396:	2200      	movs	r2, #0
 800c398:	498e      	ldr	r1, [pc, #568]	; (800c5d4 <dwt_ioctl+0x7a4>)
 800c39a:	f7fe f8df 	bl	800a55c <dwt_write32bitoffsetreg>
 800c39e:	23e8      	movs	r3, #232	; 0xe8
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	498d      	ldr	r1, [pc, #564]	; (800c5d8 <dwt_ioctl+0x7a8>)
 800c3a4:	4630      	mov	r0, r6
 800c3a6:	f7fe f8d9 	bl	800a55c <dwt_write32bitoffsetreg>
 800c3aa:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800c3ac:	7d9b      	ldrb	r3, [r3, #22]
 800c3ae:	085b      	lsrs	r3, r3, #1
 800c3b0:	d01a      	beq.n	800c3e8 <dwt_ioctl+0x5b8>
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	4989      	ldr	r1, [pc, #548]	; (800c5dc <dwt_ioctl+0x7ac>)
 800c3b6:	4630      	mov	r0, r6
 800c3b8:	f7fd fc71 	bl	8009c9e <dwt_read16bitoffsetreg>
 800c3bc:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 800c3c0:	3b09      	subs	r3, #9
 800c3c2:	2b0f      	cmp	r3, #15
 800c3c4:	f201 8431 	bhi.w	800dc2a <dwt_ioctl+0x1dfa>
 800c3c8:	f000 0001 	and.w	r0, r0, #1
 800c3cc:	2800      	cmp	r0, #0
 800c3ce:	bf0c      	ite	eq
 800c3d0:	2105      	moveq	r1, #5
 800c3d2:	2109      	movne	r1, #9
 800c3d4:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800c3d6:	7a1b      	ldrb	r3, [r3, #8]
 800c3d8:	2b01      	cmp	r3, #1
 800c3da:	f001 8429 	beq.w	800dc30 <dwt_ioctl+0x1e00>
 800c3de:	4630      	mov	r0, r6
 800c3e0:	f7fe f974 	bl	800a6cc <ull_configmrxlut>
 800c3e4:	2500      	movs	r5, #0
 800c3e6:	e5cd      	b.n	800bf84 <dwt_ioctl+0x154>
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	497c      	ldr	r1, [pc, #496]	; (800c5e0 <dwt_ioctl+0x7b0>)
 800c3ee:	4630      	mov	r0, r6
 800c3f0:	f7fe fa42 	bl	800a878 <dwt_write8bitoffsetreg>
 800c3f4:	6d32      	ldr	r2, [r6, #80]	; 0x50
 800c3f6:	7d93      	ldrb	r3, [r2, #22]
 800c3f8:	f043 0302 	orr.w	r3, r3, #2
 800c3fc:	7593      	strb	r3, [r2, #22]
 800c3fe:	e7d8      	b.n	800c3b2 <dwt_ioctl+0x582>
 800c400:	2c00      	cmp	r4, #0
 800c402:	f001 8418 	beq.w	800dc36 <dwt_ioctl+0x1e06>
 800c406:	7824      	ldrb	r4, [r4, #0]
 800c408:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c40a:	755c      	strb	r4, [r3, #21]
 800c40c:	0323      	lsls	r3, r4, #12
 800c40e:	f403 4330 	and.w	r3, r3, #45056	; 0xb000
 800c412:	9300      	str	r3, [sp, #0]
 800c414:	f644 73ff 	movw	r3, #20479	; 0x4fff
 800c418:	2200      	movs	r2, #0
 800c41a:	2110      	movs	r1, #16
 800c41c:	f7ff f87e 	bl	800b51c <dwt_modify16bitoffsetreg>
 800c420:	f004 0403 	and.w	r4, r4, #3
 800c424:	2c03      	cmp	r4, #3
 800c426:	bf0c      	ite	eq
 800c428:	4b6e      	ldreq	r3, [pc, #440]	; (800c5e4 <dwt_ioctl+0x7b4>)
 800c42a:	4b6f      	ldrne	r3, [pc, #444]	; (800c5e8 <dwt_ioctl+0x7b8>)
 800c42c:	2200      	movs	r2, #0
 800c42e:	496f      	ldr	r1, [pc, #444]	; (800c5ec <dwt_ioctl+0x7bc>)
 800c430:	4630      	mov	r0, r6
 800c432:	f7fe f893 	bl	800a55c <dwt_write32bitoffsetreg>
 800c436:	2500      	movs	r5, #0
 800c438:	e5a4      	b.n	800bf84 <dwt_ioctl+0x154>
 800c43a:	2c00      	cmp	r4, #0
 800c43c:	f001 83fe 	beq.w	800dc3c <dwt_ioctl+0x1e0c>
 800c440:	8823      	ldrh	r3, [r4, #0]
 800c442:	2200      	movs	r2, #0
 800c444:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800c448:	f7fe f82b 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800c44c:	2500      	movs	r5, #0
 800c44e:	e599      	b.n	800bf84 <dwt_ioctl+0x154>
 800c450:	2c00      	cmp	r4, #0
 800c452:	f001 83f6 	beq.w	800dc42 <dwt_ioctl+0x1e12>
 800c456:	2200      	movs	r2, #0
 800c458:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800c45c:	f7fd fc1f 	bl	8009c9e <dwt_read16bitoffsetreg>
 800c460:	8020      	strh	r0, [r4, #0]
 800c462:	2500      	movs	r5, #0
 800c464:	e58e      	b.n	800bf84 <dwt_ioctl+0x154>
 800c466:	2c00      	cmp	r4, #0
 800c468:	f001 83ee 	beq.w	800dc48 <dwt_ioctl+0x1e18>
 800c46c:	8823      	ldrh	r3, [r4, #0]
 800c46e:	2200      	movs	r2, #0
 800c470:	217c      	movs	r1, #124	; 0x7c
 800c472:	f7fe f816 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800c476:	2500      	movs	r5, #0
 800c478:	e584      	b.n	800bf84 <dwt_ioctl+0x154>
 800c47a:	2c00      	cmp	r4, #0
 800c47c:	f001 83e7 	beq.w	800dc4e <dwt_ioctl+0x1e1e>
 800c480:	2200      	movs	r2, #0
 800c482:	217c      	movs	r1, #124	; 0x7c
 800c484:	f7fd fc0b 	bl	8009c9e <dwt_read16bitoffsetreg>
 800c488:	8020      	strh	r0, [r4, #0]
 800c48a:	2500      	movs	r5, #0
 800c48c:	e57a      	b.n	800bf84 <dwt_ioctl+0x154>
 800c48e:	2c00      	cmp	r4, #0
 800c490:	f001 83e0 	beq.w	800dc54 <dwt_ioctl+0x1e24>
 800c494:	88a3      	ldrh	r3, [r4, #4]
 800c496:	88e2      	ldrh	r2, [r4, #6]
 800c498:	6821      	ldr	r1, [r4, #0]
 800c49a:	9100      	str	r1, [sp, #0]
 800c49c:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800c4a0:	f7fd fff4 	bl	800a48c <dwt_writetodevice>
 800c4a4:	2500      	movs	r5, #0
 800c4a6:	e56d      	b.n	800bf84 <dwt_ioctl+0x154>
 800c4a8:	2c00      	cmp	r4, #0
 800c4aa:	f001 83d6 	beq.w	800dc5a <dwt_ioctl+0x1e2a>
 800c4ae:	88a3      	ldrh	r3, [r4, #4]
 800c4b0:	88e2      	ldrh	r2, [r4, #6]
 800c4b2:	6821      	ldr	r1, [r4, #0]
 800c4b4:	9100      	str	r1, [sp, #0]
 800c4b6:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800c4ba:	f7fd fbd0 	bl	8009c5e <dwt_readfromdevice>
 800c4be:	2500      	movs	r5, #0
 800c4c0:	e560      	b.n	800bf84 <dwt_ioctl+0x154>
 800c4c2:	2c00      	cmp	r4, #0
 800c4c4:	f001 83cc 	beq.w	800dc60 <dwt_ioctl+0x1e30>
 800c4c8:	88e3      	ldrh	r3, [r4, #6]
 800c4ca:	88a2      	ldrh	r2, [r4, #4]
 800c4cc:	6821      	ldr	r1, [r4, #0]
 800c4ce:	f7fe f99d 	bl	800a80c <ull_readrxdata>
 800c4d2:	2500      	movs	r5, #0
 800c4d4:	e556      	b.n	800bf84 <dwt_ioctl+0x154>
 800c4d6:	2c00      	cmp	r4, #0
 800c4d8:	f001 83c5 	beq.w	800dc66 <dwt_ioctl+0x1e36>
 800c4dc:	88e3      	ldrh	r3, [r4, #6]
 800c4de:	6822      	ldr	r2, [r4, #0]
 800c4e0:	88a1      	ldrh	r1, [r4, #4]
 800c4e2:	f7fe fac7 	bl	800aa74 <ull_writetxdata>
 800c4e6:	2500      	movs	r5, #0
 800c4e8:	e54c      	b.n	800bf84 <dwt_ioctl+0x154>
 800c4ea:	4611      	mov	r1, r2
 800c4ec:	f7ff fc08 	bl	800bd00 <ull_rxenable>
 800c4f0:	2500      	movs	r5, #0
 800c4f2:	e547      	b.n	800bf84 <dwt_ioctl+0x154>
 800c4f4:	2c00      	cmp	r4, #0
 800c4f6:	f001 83b9 	beq.w	800dc6c <dwt_ioctl+0x1e3c>
 800c4fa:	7923      	ldrb	r3, [r4, #4]
 800c4fc:	8862      	ldrh	r2, [r4, #2]
 800c4fe:	8821      	ldrh	r1, [r4, #0]
 800c500:	f7fe fdbe 	bl	800b080 <ull_writetxfctrl>
 800c504:	2500      	movs	r5, #0
 800c506:	e53d      	b.n	800bf84 <dwt_ioctl+0x154>
 800c508:	2c00      	cmp	r4, #0
 800c50a:	f001 83b2 	beq.w	800dc72 <dwt_ioctl+0x1e42>
 800c50e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c510:	7b9b      	ldrb	r3, [r3, #14]
 800c512:	2b01      	cmp	r3, #1
 800c514:	d00c      	beq.n	800c530 <dwt_ioctl+0x700>
 800c516:	2b03      	cmp	r3, #3
 800c518:	d110      	bne.n	800c53c <dwt_ioctl+0x70c>
 800c51a:	220c      	movs	r2, #12
 800c51c:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800c520:	f7fd fbbd 	bl	8009c9e <dwt_read16bitoffsetreg>
 800c524:	b200      	sxth	r0, r0
 800c526:	f340 030c 	sbfx	r3, r0, #0, #13
 800c52a:	8023      	strh	r3, [r4, #0]
 800c52c:	2500      	movs	r5, #0
 800c52e:	e529      	b.n	800bf84 <dwt_ioctl+0x154>
 800c530:	2200      	movs	r2, #0
 800c532:	492f      	ldr	r1, [pc, #188]	; (800c5f0 <dwt_ioctl+0x7c0>)
 800c534:	f7fd fbb3 	bl	8009c9e <dwt_read16bitoffsetreg>
 800c538:	b200      	sxth	r0, r0
 800c53a:	e7f4      	b.n	800c526 <dwt_ioctl+0x6f6>
 800c53c:	2200      	movs	r2, #0
 800c53e:	492d      	ldr	r1, [pc, #180]	; (800c5f4 <dwt_ioctl+0x7c4>)
 800c540:	f7fd fbad 	bl	8009c9e <dwt_read16bitoffsetreg>
 800c544:	b200      	sxth	r0, r0
 800c546:	e7ee      	b.n	800c526 <dwt_ioctl+0x6f6>
 800c548:	2c00      	cmp	r4, #0
 800c54a:	f001 8395 	beq.w	800dc78 <dwt_ioctl+0x1e48>
 800c54e:	ab0c      	add	r3, sp, #48	; 0x30
 800c550:	9300      	str	r3, [sp, #0]
 800c552:	2303      	movs	r3, #3
 800c554:	2200      	movs	r2, #0
 800c556:	4928      	ldr	r1, [pc, #160]	; (800c5f8 <dwt_ioctl+0x7c8>)
 800c558:	f7fd fb81 	bl	8009c5e <dwt_readfromdevice>
 800c55c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800c560:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800c564:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 800c568:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800c56c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800c570:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800c574:	bf1c      	itt	ne
 800c576:	ea6f 3303 	mvnne.w	r3, r3, lsl #12
 800c57a:	ea6f 3313 	mvnne.w	r3, r3, lsr #12
 800c57e:	6023      	str	r3, [r4, #0]
 800c580:	2500      	movs	r5, #0
 800c582:	e4ff      	b.n	800bf84 <dwt_ioctl+0x154>
 800c584:	f7fe f9d0 	bl	800a928 <ull_clearaonconfig>
 800c588:	2500      	movs	r5, #0
 800c58a:	e4fb      	b.n	800bf84 <dwt_ioctl+0x154>
 800c58c:	2c00      	cmp	r4, #0
 800c58e:	f001 8376 	beq.w	800dc7e <dwt_ioctl+0x1e4e>
 800c592:	8861      	ldrh	r1, [r4, #2]
 800c594:	f7fe fdf0 	bl	800b178 <ull_calcbandwidthadj>
 800c598:	7020      	strb	r0, [r4, #0]
 800c59a:	2500      	movs	r5, #0
 800c59c:	e4f2      	b.n	800bf84 <dwt_ioctl+0x154>
 800c59e:	4621      	mov	r1, r4
 800c5a0:	f7fd fb9d 	bl	8009cde <ull_readdiagnostics>
 800c5a4:	2500      	movs	r5, #0
 800c5a6:	e4ed      	b.n	800bf84 <dwt_ioctl+0x154>
 800c5a8:	2c00      	cmp	r4, #0
 800c5aa:	f001 836b 	beq.w	800dc84 <dwt_ioctl+0x1e54>
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	2170      	movs	r1, #112	; 0x70
 800c5b2:	f7fd fb5e 	bl	8009c72 <dwt_read32bitoffsetreg>
 800c5b6:	6020      	str	r0, [r4, #0]
 800c5b8:	2500      	movs	r5, #0
 800c5ba:	e4e3      	b.n	800bf84 <dwt_ioctl+0x154>
 800c5bc:	00110008 	.word	0x00110008
 800c5c0:	00d20874 	.word	0x00d20874
 800c5c4:	00110010 	.word	0x00110010
 800c5c8:	04d28874 	.word	0x04d28874
 800c5cc:	0007001c 	.word	0x0007001c
 800c5d0:	00020004 	.word	0x00020004
 800c5d4:	001f000c 	.word	0x001f000c
 800c5d8:	001f0010 	.word	0x001f0010
 800c5dc:	00010008 	.word	0x00010008
 800c5e0:	00010020 	.word	0x00010020
 800c5e4:	af5f35cc 	.word	0xaf5f35cc
 800c5e8:	af5f584c 	.word	0xaf5f584c
 800c5ec:	0006000c 	.word	0x0006000c
 800c5f0:	0018000c 	.word	0x0018000c
 800c5f4:	000c0020 	.word	0x000c0020
 800c5f8:	00060029 	.word	0x00060029
 800c5fc:	2c00      	cmp	r4, #0
 800c5fe:	f001 8344 	beq.w	800dc8a <dwt_ioctl+0x1e5a>
 800c602:	2200      	movs	r2, #0
 800c604:	2170      	movs	r1, #112	; 0x70
 800c606:	f7fd fb34 	bl	8009c72 <dwt_read32bitoffsetreg>
 800c60a:	6020      	str	r0, [r4, #0]
 800c60c:	2500      	movs	r5, #0
 800c60e:	e4b9      	b.n	800bf84 <dwt_ioctl+0x154>
 800c610:	9400      	str	r4, [sp, #0]
 800c612:	2305      	movs	r3, #5
 800c614:	2200      	movs	r2, #0
 800c616:	2170      	movs	r1, #112	; 0x70
 800c618:	f7fd fb21 	bl	8009c5e <dwt_readfromdevice>
 800c61c:	2500      	movs	r5, #0
 800c61e:	e4b1      	b.n	800bf84 <dwt_ioctl+0x154>
 800c620:	2c00      	cmp	r4, #0
 800c622:	f001 8335 	beq.w	800dc90 <dwt_ioctl+0x1e60>
 800c626:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c628:	7b9b      	ldrb	r3, [r3, #14]
 800c62a:	2b01      	cmp	r3, #1
 800c62c:	d014      	beq.n	800c658 <dwt_ioctl+0x828>
 800c62e:	2b03      	cmp	r3, #3
 800c630:	d119      	bne.n	800c666 <dwt_ioctl+0x836>
 800c632:	2216      	movs	r2, #22
 800c634:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800c638:	f7fd fb31 	bl	8009c9e <dwt_read16bitoffsetreg>
 800c63c:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800c640:	b283      	uxth	r3, r0
 800c642:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800c646:	d004      	beq.n	800c652 <dwt_ioctl+0x822>
 800c648:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 800c64c:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 800c650:	b218      	sxth	r0, r3
 800c652:	8020      	strh	r0, [r4, #0]
 800c654:	2500      	movs	r5, #0
 800c656:	e495      	b.n	800bf84 <dwt_ioctl+0x154>
 800c658:	2202      	movs	r2, #2
 800c65a:	49d6      	ldr	r1, [pc, #856]	; (800c9b4 <dwt_ioctl+0xb84>)
 800c65c:	f7fd fb1f 	bl	8009c9e <dwt_read16bitoffsetreg>
 800c660:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800c664:	e7ec      	b.n	800c640 <dwt_ioctl+0x810>
 800c666:	2202      	movs	r2, #2
 800c668:	49d3      	ldr	r1, [pc, #844]	; (800c9b8 <dwt_ioctl+0xb88>)
 800c66a:	f7fd fb18 	bl	8009c9e <dwt_read16bitoffsetreg>
 800c66e:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800c672:	e7e5      	b.n	800c640 <dwt_ioctl+0x810>
 800c674:	9400      	str	r4, [sp, #0]
 800c676:	2306      	movs	r3, #6
 800c678:	2200      	movs	r2, #0
 800c67a:	49d0      	ldr	r1, [pc, #832]	; (800c9bc <dwt_ioctl+0xb8c>)
 800c67c:	f7fd faef 	bl	8009c5e <dwt_readfromdevice>
 800c680:	7963      	ldrb	r3, [r4, #5]
 800c682:	f003 0301 	and.w	r3, r3, #1
 800c686:	7163      	strb	r3, [r4, #5]
 800c688:	2500      	movs	r5, #0
 800c68a:	e47b      	b.n	800bf84 <dwt_ioctl+0x154>
 800c68c:	2c00      	cmp	r4, #0
 800c68e:	f001 8302 	beq.w	800dc96 <dwt_ioctl+0x1e66>
 800c692:	2201      	movs	r2, #1
 800c694:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800c698:	f7fd fb13 	bl	8009cc2 <dwt_read8bitoffsetreg>
 800c69c:	7020      	strb	r0, [r4, #0]
 800c69e:	2500      	movs	r5, #0
 800c6a0:	e470      	b.n	800bf84 <dwt_ioctl+0x154>
 800c6a2:	2c00      	cmp	r4, #0
 800c6a4:	f001 82fa 	beq.w	800dc9c <dwt_ioctl+0x1e6c>
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800c6ae:	f7fd fb08 	bl	8009cc2 <dwt_read8bitoffsetreg>
 800c6b2:	7020      	strb	r0, [r4, #0]
 800c6b4:	2500      	movs	r5, #0
 800c6b6:	e465      	b.n	800bf84 <dwt_ioctl+0x154>
 800c6b8:	2c00      	cmp	r4, #0
 800c6ba:	f001 82f2 	beq.w	800dca2 <dwt_ioctl+0x1e72>
 800c6be:	88a2      	ldrh	r2, [r4, #4]
 800c6c0:	6821      	ldr	r1, [r4, #0]
 800c6c2:	f7fe fc07 	bl	800aed4 <_dwt_otpprogword32>
 800c6c6:	2500      	movs	r5, #0
 800c6c8:	e45c      	b.n	800bf84 <dwt_ioctl+0x154>
 800c6ca:	2c00      	cmp	r4, #0
 800c6cc:	f001 82ec 	beq.w	800dca8 <dwt_ioctl+0x1e78>
 800c6d0:	6825      	ldr	r5, [r4, #0]
 800c6d2:	88a4      	ldrh	r4, [r4, #4]
 800c6d4:	4622      	mov	r2, r4
 800c6d6:	4629      	mov	r1, r5
 800c6d8:	f7fe fbfc 	bl	800aed4 <_dwt_otpprogword32>
 800c6dc:	4621      	mov	r1, r4
 800c6de:	4630      	mov	r0, r6
 800c6e0:	f7fd ff1a 	bl	800a518 <_dwt_otpread>
 800c6e4:	1a2d      	subs	r5, r5, r0
 800c6e6:	bf18      	it	ne
 800c6e8:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800c6ec:	e44a      	b.n	800bf84 <dwt_ioctl+0x154>
 800c6ee:	2a02      	cmp	r2, #2
 800c6f0:	d00e      	beq.n	800c710 <dwt_ioctl+0x8e0>
 800c6f2:	4cb3      	ldr	r4, [pc, #716]	; (800c9c0 <dwt_ioctl+0xb90>)
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	461a      	mov	r2, r3
 800c6f8:	4621      	mov	r1, r4
 800c6fa:	4630      	mov	r0, r6
 800c6fc:	f7fe f8bc 	bl	800a878 <dwt_write8bitoffsetreg>
 800c700:	2302      	movs	r3, #2
 800c702:	2200      	movs	r2, #0
 800c704:	4621      	mov	r1, r4
 800c706:	4630      	mov	r0, r6
 800c708:	f7fe f8b6 	bl	800a878 <dwt_write8bitoffsetreg>
 800c70c:	2500      	movs	r5, #0
 800c70e:	e439      	b.n	800bf84 <dwt_ioctl+0x154>
 800c710:	2300      	movs	r3, #0
 800c712:	9300      	str	r3, [sp, #0]
 800c714:	23fe      	movs	r3, #254	; 0xfe
 800c716:	2201      	movs	r2, #1
 800c718:	49aa      	ldr	r1, [pc, #680]	; (800c9c4 <dwt_ioctl+0xb94>)
 800c71a:	f7fe fce3 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800c71e:	e7e8      	b.n	800c6f2 <dwt_ioctl+0x8c2>
 800c720:	2c00      	cmp	r4, #0
 800c722:	f001 82c4 	beq.w	800dcae <dwt_ioctl+0x1e7e>
 800c726:	8824      	ldrh	r4, [r4, #0]
 800c728:	b2e2      	uxtb	r2, r4
 800c72a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c72e:	f7fe f94f 	bl	800a9d0 <ull_aon_write>
 800c732:	0a22      	lsrs	r2, r4, #8
 800c734:	f240 1103 	movw	r1, #259	; 0x103
 800c738:	4630      	mov	r0, r6
 800c73a:	f7fe f949 	bl	800a9d0 <ull_aon_write>
 800c73e:	2500      	movs	r5, #0
 800c740:	e420      	b.n	800bf84 <dwt_ioctl+0x154>
 800c742:	2c00      	cmp	r4, #0
 800c744:	f001 82b6 	beq.w	800dcb4 <dwt_ioctl+0x1e84>
 800c748:	f8df 8284 	ldr.w	r8, [pc, #644]	; 800c9d0 <dwt_ioctl+0xba0>
 800c74c:	2310      	movs	r3, #16
 800c74e:	9300      	str	r3, [sp, #0]
 800c750:	23ff      	movs	r3, #255	; 0xff
 800c752:	2200      	movs	r2, #0
 800c754:	4641      	mov	r1, r8
 800c756:	f7fe fcc5 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800c75a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800c75e:	4630      	mov	r0, r6
 800c760:	f7fe f916 	bl	800a990 <ull_aon_read>
 800c764:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 800c768:	462a      	mov	r2, r5
 800c76a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800c76e:	4630      	mov	r0, r6
 800c770:	f7fe f92e 	bl	800a9d0 <ull_aon_write>
 800c774:	f045 0204 	orr.w	r2, r5, #4
 800c778:	f44f 7182 	mov.w	r1, #260	; 0x104
 800c77c:	4630      	mov	r0, r6
 800c77e:	f7fe f927 	bl	800a9d0 <ull_aon_write>
 800c782:	2002      	movs	r0, #2
 800c784:	f7f4 feee 	bl	8001564 <deca_sleep>
 800c788:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800c78c:	4630      	mov	r0, r6
 800c78e:	f7fe f8ff 	bl	800a990 <ull_aon_read>
 800c792:	4607      	mov	r7, r0
 800c794:	f240 110f 	movw	r1, #271	; 0x10f
 800c798:	4630      	mov	r0, r6
 800c79a:	f7fe f8f9 	bl	800a990 <ull_aon_read>
 800c79e:	4681      	mov	r9, r0
 800c7a0:	462a      	mov	r2, r5
 800c7a2:	f44f 7182 	mov.w	r1, #260	; 0x104
 800c7a6:	4630      	mov	r0, r6
 800c7a8:	f7fe f912 	bl	800a9d0 <ull_aon_write>
 800c7ac:	2500      	movs	r5, #0
 800c7ae:	9500      	str	r5, [sp, #0]
 800c7b0:	23ef      	movs	r3, #239	; 0xef
 800c7b2:	462a      	mov	r2, r5
 800c7b4:	4641      	mov	r1, r8
 800c7b6:	4630      	mov	r0, r6
 800c7b8:	f7fe fc94 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800c7bc:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 800c7c0:	8027      	strh	r7, [r4, #0]
 800c7c2:	f7ff bbdf 	b.w	800bf84 <dwt_ioctl+0x154>
 800c7c6:	2c00      	cmp	r4, #0
 800c7c8:	f001 8277 	beq.w	800dcba <dwt_ioctl+0x1e8a>
 800c7cc:	78a2      	ldrb	r2, [r4, #2]
 800c7ce:	8821      	ldrh	r1, [r4, #0]
 800c7d0:	f7fe f926 	bl	800aa20 <ull_configuresleep>
 800c7d4:	2500      	movs	r5, #0
 800c7d6:	f7ff bbd5 	b.w	800bf84 <dwt_ioctl+0x154>
 800c7da:	2c00      	cmp	r4, #0
 800c7dc:	f001 8270 	beq.w	800dcc0 <dwt_ioctl+0x1e90>
 800c7e0:	6824      	ldr	r4, [r4, #0]
 800c7e2:	f7fe f8a1 	bl	800a928 <ull_clearaonconfig>
 800c7e6:	2001      	movs	r0, #1
 800c7e8:	f7f4 febc 	bl	8001564 <deca_sleep>
 800c7ec:	2303      	movs	r3, #3
 800c7ee:	9300      	str	r3, [sp, #0]
 800c7f0:	23ff      	movs	r3, #255	; 0xff
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	4974      	ldr	r1, [pc, #464]	; (800c9c8 <dwt_ioctl+0xb98>)
 800c7f6:	4630      	mov	r0, r6
 800c7f8:	f7fe fc74 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800c7fc:	b97c      	cbnz	r4, 800c81e <dwt_ioctl+0x9ee>
 800c7fe:	4630      	mov	r0, r6
 800c800:	f7ff faee 	bl	800bde0 <ull_softreset_no_sema_fcmd>
 800c804:	2001      	movs	r0, #1
 800c806:	f7f4 fead 	bl	8001564 <deca_sleep>
 800c80a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800c80c:	2500      	movs	r5, #0
 800c80e:	739d      	strb	r5, [r3, #14]
 800c810:	2202      	movs	r2, #2
 800c812:	821a      	strh	r2, [r3, #16]
 800c814:	751d      	strb	r5, [r3, #20]
 800c816:	755d      	strb	r5, [r3, #21]
 800c818:	73dd      	strb	r5, [r3, #15]
 800c81a:	f7ff bbb3 	b.w	800bf84 <dwt_ioctl+0x154>
 800c81e:	4630      	mov	r0, r6
 800c820:	f7ff faf2 	bl	800be08 <ull_softreset_fcmd>
 800c824:	e7ee      	b.n	800c804 <dwt_ioctl+0x9d4>
 800c826:	2c00      	cmp	r4, #0
 800c828:	f001 824d 	beq.w	800dcc6 <dwt_ioctl+0x1e96>
 800c82c:	7823      	ldrb	r3, [r4, #0]
 800c82e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c832:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800c834:	7353      	strb	r3, [r2, #13]
 800c836:	2200      	movs	r2, #0
 800c838:	4964      	ldr	r1, [pc, #400]	; (800c9cc <dwt_ioctl+0xb9c>)
 800c83a:	f7fe f81d 	bl	800a878 <dwt_write8bitoffsetreg>
 800c83e:	2500      	movs	r5, #0
 800c840:	f7ff bba0 	b.w	800bf84 <dwt_ioctl+0x154>
 800c844:	2c00      	cmp	r4, #0
 800c846:	f001 8241 	beq.w	800dccc <dwt_ioctl+0x1e9c>
 800c84a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c84c:	7b5b      	ldrb	r3, [r3, #13]
 800c84e:	7023      	strb	r3, [r4, #0]
 800c850:	2500      	movs	r5, #0
 800c852:	f7ff bb97 	b.w	800bf84 <dwt_ioctl+0x154>
 800c856:	2101      	movs	r1, #1
 800c858:	f7fe faf6 	bl	800ae48 <ull_enable_rf_tx>
 800c85c:	4630      	mov	r0, r6
 800c85e:	f7fe fb27 	bl	800aeb0 <ull_enable_rftx_blocks>
 800c862:	2101      	movs	r1, #1
 800c864:	4630      	mov	r0, r6
 800c866:	f7fd fe2d 	bl	800a4c4 <ull_force_clocks>
 800c86a:	220f      	movs	r2, #15
 800c86c:	2101      	movs	r1, #1
 800c86e:	4630      	mov	r0, r6
 800c870:	f7fe ff48 	bl	800b704 <ull_repeated_cw>
 800c874:	2500      	movs	r5, #0
 800c876:	f7ff bb85 	b.w	800bf84 <dwt_ioctl+0x154>
 800c87a:	2c00      	cmp	r4, #0
 800c87c:	f001 8229 	beq.w	800dcd2 <dwt_ioctl+0x1ea2>
 800c880:	6862      	ldr	r2, [r4, #4]
 800c882:	6821      	ldr	r1, [r4, #0]
 800c884:	f7fe ff3e 	bl	800b704 <ull_repeated_cw>
 800c888:	2500      	movs	r5, #0
 800c88a:	f7ff bb7b 	b.w	800bf84 <dwt_ioctl+0x154>
 800c88e:	2c00      	cmp	r4, #0
 800c890:	f001 8222 	beq.w	800dcd8 <dwt_ioctl+0x1ea8>
 800c894:	4d4e      	ldr	r5, [pc, #312]	; (800c9d0 <dwt_ioctl+0xba0>)
 800c896:	2200      	movs	r2, #0
 800c898:	4629      	mov	r1, r5
 800c89a:	f7fd fa12 	bl	8009cc2 <dwt_read8bitoffsetreg>
 800c89e:	4680      	mov	r8, r0
 800c8a0:	2302      	movs	r3, #2
 800c8a2:	9300      	str	r3, [sp, #0]
 800c8a4:	23ff      	movs	r3, #255	; 0xff
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	4629      	mov	r1, r5
 800c8aa:	4630      	mov	r0, r6
 800c8ac:	f7fe fc1a 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800c8b0:	2304      	movs	r3, #4
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	4947      	ldr	r1, [pc, #284]	; (800c9d4 <dwt_ioctl+0xba4>)
 800c8b6:	4630      	mov	r0, r6
 800c8b8:	f7fd ffde 	bl	800a878 <dwt_write8bitoffsetreg>
 800c8bc:	2301      	movs	r3, #1
 800c8be:	2200      	movs	r2, #0
 800c8c0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c8c4:	4630      	mov	r0, r6
 800c8c6:	f7fd ffd7 	bl	800a878 <dwt_write8bitoffsetreg>
 800c8ca:	4f43      	ldr	r7, [pc, #268]	; (800c9d8 <dwt_ioctl+0xba8>)
 800c8cc:	2500      	movs	r5, #0
 800c8ce:	462a      	mov	r2, r5
 800c8d0:	4639      	mov	r1, r7
 800c8d2:	4630      	mov	r0, r6
 800c8d4:	f7fd f9f5 	bl	8009cc2 <dwt_read8bitoffsetreg>
 800c8d8:	f010 0f01 	tst.w	r0, #1
 800c8dc:	d0f7      	beq.n	800c8ce <dwt_ioctl+0xa9e>
 800c8de:	2200      	movs	r2, #0
 800c8e0:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800c8e4:	4630      	mov	r0, r6
 800c8e6:	f7fd f9da 	bl	8009c9e <dwt_read16bitoffsetreg>
 800c8ea:	4605      	mov	r5, r0
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	461a      	mov	r2, r3
 800c8f0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c8f4:	4630      	mov	r0, r6
 800c8f6:	f7fd ffbf 	bl	800a878 <dwt_write8bitoffsetreg>
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	4935      	ldr	r1, [pc, #212]	; (800c9d4 <dwt_ioctl+0xba4>)
 800c900:	4630      	mov	r0, r6
 800c902:	f7fd ffb9 	bl	800a878 <dwt_write8bitoffsetreg>
 800c906:	4643      	mov	r3, r8
 800c908:	2200      	movs	r2, #0
 800c90a:	4931      	ldr	r1, [pc, #196]	; (800c9d0 <dwt_ioctl+0xba0>)
 800c90c:	4630      	mov	r0, r6
 800c90e:	f7fd ffb3 	bl	800a878 <dwt_write8bitoffsetreg>
 800c912:	8025      	strh	r5, [r4, #0]
 800c914:	2500      	movs	r5, #0
 800c916:	f7ff bb35 	b.w	800bf84 <dwt_ioctl+0x154>
 800c91a:	2c00      	cmp	r4, #0
 800c91c:	f001 81df 	beq.w	800dcde <dwt_ioctl+0x1eae>
 800c920:	7923      	ldrb	r3, [r4, #4]
 800c922:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800c924:	7a92      	ldrb	r2, [r2, #10]
 800c926:	1a9b      	subs	r3, r3, r2
 800c928:	ee07 3a90 	vmov	s15, r3
 800c92c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c930:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800c9dc <dwt_ioctl+0xbac>
 800c934:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c938:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 800c93c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c940:	edc4 7a00 	vstr	s15, [r4]
 800c944:	2500      	movs	r5, #0
 800c946:	f7ff bb1d 	b.w	800bf84 <dwt_ioctl+0x154>
 800c94a:	2c00      	cmp	r4, #0
 800c94c:	f001 81ca 	beq.w	800dce4 <dwt_ioctl+0x1eb4>
 800c950:	7923      	ldrb	r3, [r4, #4]
 800c952:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800c954:	7a52      	ldrb	r2, [r2, #9]
 800c956:	1a9b      	subs	r3, r3, r2
 800c958:	ee07 3a90 	vmov	s15, r3
 800c95c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c960:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800c9e0 <dwt_ioctl+0xbb0>
 800c964:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c968:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800c96c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c970:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800c9e4 <dwt_ioctl+0xbb4>
 800c974:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c978:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800c97c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c980:	edc4 7a00 	vstr	s15, [r4]
 800c984:	2500      	movs	r5, #0
 800c986:	f7ff bafd 	b.w	800bf84 <dwt_ioctl+0x154>
 800c98a:	2c00      	cmp	r4, #0
 800c98c:	f001 81ad 	beq.w	800dcea <dwt_ioctl+0x1eba>
 800c990:	6824      	ldr	r4, [r4, #0]
 800c992:	2101      	movs	r1, #1
 800c994:	f7fe fa58 	bl	800ae48 <ull_enable_rf_tx>
 800c998:	4630      	mov	r0, r6
 800c99a:	f7fe fa89 	bl	800aeb0 <ull_enable_rftx_blocks>
 800c99e:	2101      	movs	r1, #1
 800c9a0:	4630      	mov	r0, r6
 800c9a2:	f7fd fd8f 	bl	800a4c4 <ull_force_clocks>
 800c9a6:	4621      	mov	r1, r4
 800c9a8:	4630      	mov	r0, r6
 800c9aa:	f7fe fc41 	bl	800b230 <ull_repeated_frames>
 800c9ae:	2500      	movs	r5, #0
 800c9b0:	f7ff bae8 	b.w	800bf84 <dwt_ioctl+0x154>
 800c9b4:	00180014 	.word	0x00180014
 800c9b8:	000c001c 	.word	0x000c001c
 800c9bc:	000c0018 	.word	0x000c0018
 800c9c0:	000a0004 	.word	0x000a0004
 800c9c4:	00110008 	.word	0x00110008
 800c9c8:	00110004 	.word	0x00110004
 800c9cc:	00090014 	.word	0x00090014
 800c9d0:	00070048 	.word	0x00070048
 800c9d4:	00070034 	.word	0x00070034
 800c9d8:	00080004 	.word	0x00080004
 800c9dc:	3f866666 	.word	0x3f866666
 800c9e0:	3ecccccd 	.word	0x3ecccccd
 800c9e4:	437f0000 	.word	0x437f0000
 800c9e8:	2500      	movs	r5, #0
 800c9ea:	9500      	str	r5, [sp, #0]
 800c9ec:	23ef      	movs	r3, #239	; 0xef
 800c9ee:	462a      	mov	r2, r5
 800c9f0:	49c7      	ldr	r1, [pc, #796]	; (800cd10 <dwt_ioctl+0xee0>)
 800c9f2:	f7fe fb77 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800c9f6:	2105      	movs	r1, #5
 800c9f8:	4630      	mov	r0, r6
 800c9fa:	f7fd fd63 	bl	800a4c4 <ull_force_clocks>
 800c9fe:	2101      	movs	r1, #1
 800ca00:	4630      	mov	r0, r6
 800ca02:	f7fd fee5 	bl	800a7d0 <ull_disable_rf_tx>
 800ca06:	4630      	mov	r0, r6
 800ca08:	f7fd fed8 	bl	800a7bc <ull_disable_rftx_blocks>
 800ca0c:	f7ff baba 	b.w	800bf84 <dwt_ioctl+0x154>
 800ca10:	2500      	movs	r5, #0
 800ca12:	9500      	str	r5, [sp, #0]
 800ca14:	23ef      	movs	r3, #239	; 0xef
 800ca16:	462a      	mov	r2, r5
 800ca18:	49bd      	ldr	r1, [pc, #756]	; (800cd10 <dwt_ioctl+0xee0>)
 800ca1a:	f7fe fb63 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800ca1e:	f7ff bab1 	b.w	800bf84 <dwt_ioctl+0x154>
 800ca22:	2c00      	cmp	r4, #0
 800ca24:	f001 8164 	beq.w	800dcf0 <dwt_ioctl+0x1ec0>
 800ca28:	6821      	ldr	r1, [r4, #0]
 800ca2a:	f7fe fc01 	bl	800b230 <ull_repeated_frames>
 800ca2e:	2500      	movs	r5, #0
 800ca30:	f7ff baa8 	b.w	800bf84 <dwt_ioctl+0x154>
 800ca34:	2200      	movs	r2, #0
 800ca36:	49b7      	ldr	r1, [pc, #732]	; (800cd14 <dwt_ioctl+0xee4>)
 800ca38:	f7fd f931 	bl	8009c9e <dwt_read16bitoffsetreg>
 800ca3c:	f3c0 050b 	ubfx	r5, r0, #0, #12
 800ca40:	f410 6f00 	tst.w	r0, #2048	; 0x800
 800ca44:	bf18      	it	ne
 800ca46:	f445 4570 	orrne.w	r5, r5, #61440	; 0xf000
 800ca4a:	b22d      	sxth	r5, r5
 800ca4c:	8025      	strh	r5, [r4, #0]
 800ca4e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800ca50:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800ca54:	1aed      	subs	r5, r5, r3
 800ca56:	f7ff ba95 	b.w	800bf84 <dwt_ioctl+0x154>
 800ca5a:	2c00      	cmp	r4, #0
 800ca5c:	f001 814b 	beq.w	800dcf6 <dwt_ioctl+0x1ec6>
 800ca60:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ca64:	7a23      	ldrb	r3, [r4, #8]
 800ca66:	f899 2013 	ldrb.w	r2, [r9, #19]
 800ca6a:	2aff      	cmp	r2, #255	; 0xff
 800ca6c:	f000 8122 	beq.w	800ccb4 <dwt_ioctl+0xe84>
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d136      	bne.n	800cae2 <dwt_ioctl+0xcb2>
 800ca74:	f8d9 3000 	ldr.w	r3, [r9]
 800ca78:	9300      	str	r3, [sp, #0]
 800ca7a:	230c      	movs	r3, #12
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	49a6      	ldr	r1, [pc, #664]	; (800cd18 <dwt_ioctl+0xee8>)
 800ca80:	f7fd fd04 	bl	800a48c <dwt_writetodevice>
 800ca84:	f899 300c 	ldrb.w	r3, [r9, #12]
 800ca88:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 800ca8c:	18d1      	adds	r1, r2, r3
 800ca8e:	f899 2012 	ldrb.w	r2, [r9, #18]
 800ca92:	2a00      	cmp	r2, #0
 800ca94:	d15f      	bne.n	800cb56 <dwt_ioctl+0xd26>
 800ca96:	f899 0010 	ldrb.w	r0, [r9, #16]
 800ca9a:	2800      	cmp	r0, #0
 800ca9c:	bf0b      	itete	eq
 800ca9e:	227f      	moveq	r2, #127	; 0x7f
 800caa0:	f44f 6280 	movne.w	r2, #1024	; 0x400
 800caa4:	f44f 15b0 	moveq.w	r5, #1441792	; 0x160000
 800caa8:	f44f 15a0 	movne.w	r5, #1310720	; 0x140000
 800caac:	f899 0013 	ldrb.w	r0, [r9, #19]
 800cab0:	1a12      	subs	r2, r2, r0
 800cab2:	3a02      	subs	r2, #2
 800cab4:	4291      	cmp	r1, r2
 800cab6:	f200 8103 	bhi.w	800ccc0 <dwt_ioctl+0xe90>
 800caba:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800cabe:	9200      	str	r2, [sp, #0]
 800cac0:	2200      	movs	r2, #0
 800cac2:	4629      	mov	r1, r5
 800cac4:	4630      	mov	r0, r6
 800cac6:	f7fd fce1 	bl	800a48c <dwt_writetodevice>
 800caca:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800cace:	f899 200c 	ldrb.w	r2, [r9, #12]
 800cad2:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800cad6:	9100      	str	r1, [sp, #0]
 800cad8:	4629      	mov	r1, r5
 800cada:	4630      	mov	r0, r6
 800cadc:	f7fd fcd6 	bl	800a48c <dwt_writetodevice>
 800cae0:	e04a      	b.n	800cb78 <dwt_ioctl+0xd48>
 800cae2:	f8d9 3000 	ldr.w	r3, [r9]
 800cae6:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 800caea:	7a9a      	ldrb	r2, [r3, #10]
 800caec:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 800caf0:	7a5a      	ldrb	r2, [r3, #9]
 800caf2:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 800caf6:	7a1a      	ldrb	r2, [r3, #8]
 800caf8:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
 800cafc:	79da      	ldrb	r2, [r3, #7]
 800cafe:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 800cb02:	799a      	ldrb	r2, [r3, #6]
 800cb04:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 800cb08:	795a      	ldrb	r2, [r3, #5]
 800cb0a:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
 800cb0e:	791a      	ldrb	r2, [r3, #4]
 800cb10:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800cb14:	78da      	ldrb	r2, [r3, #3]
 800cb16:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
 800cb1a:	789a      	ldrb	r2, [r3, #2]
 800cb1c:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 800cb20:	785a      	ldrb	r2, [r3, #1]
 800cb22:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 800cb26:	781a      	ldrb	r2, [r3, #0]
 800cb28:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 800cb32:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 800cb36:	0a09      	lsrs	r1, r1, #8
 800cb38:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
 800cb3c:	7b19      	ldrb	r1, [r3, #12]
 800cb3e:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
 800cb42:	7adb      	ldrb	r3, [r3, #11]
 800cb44:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 800cb48:	ab0c      	add	r3, sp, #48	; 0x30
 800cb4a:	9300      	str	r3, [sp, #0]
 800cb4c:	2310      	movs	r3, #16
 800cb4e:	4972      	ldr	r1, [pc, #456]	; (800cd18 <dwt_ioctl+0xee8>)
 800cb50:	f7fd fc9c 	bl	800a48c <dwt_writetodevice>
 800cb54:	e796      	b.n	800ca84 <dwt_ioctl+0xc54>
 800cb56:	2a01      	cmp	r2, #1
 800cb58:	f040 80af 	bne.w	800ccba <dwt_ioctl+0xe8a>
 800cb5c:	f899 3011 	ldrb.w	r3, [r9, #17]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800cb66:	bf08      	it	eq
 800cb68:	237f      	moveq	r3, #127	; 0x7f
 800cb6a:	f899 2013 	ldrb.w	r2, [r9, #19]
 800cb6e:	1a9b      	subs	r3, r3, r2
 800cb70:	3b02      	subs	r3, #2
 800cb72:	4299      	cmp	r1, r3
 800cb74:	f200 80a7 	bhi.w	800ccc6 <dwt_ioctl+0xe96>
 800cb78:	f899 2010 	ldrb.w	r2, [r9, #16]
 800cb7c:	1e53      	subs	r3, r2, #1
 800cb7e:	b2db      	uxtb	r3, r3
 800cb80:	2b01      	cmp	r3, #1
 800cb82:	d940      	bls.n	800cc06 <dwt_ioctl+0xdd6>
 800cb84:	f899 3011 	ldrb.w	r3, [r9, #17]
 800cb88:	1e59      	subs	r1, r3, #1
 800cb8a:	b2c9      	uxtb	r1, r1
 800cb8c:	2901      	cmp	r1, #1
 800cb8e:	d947      	bls.n	800cc20 <dwt_ioctl+0xdf0>
 800cb90:	2b04      	cmp	r3, #4
 800cb92:	d04c      	beq.n	800cc2e <dwt_ioctl+0xdfe>
 800cb94:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 800cb98:	2200      	movs	r2, #0
 800cb9a:	4960      	ldr	r1, [pc, #384]	; (800cd1c <dwt_ioctl+0xeec>)
 800cb9c:	4630      	mov	r0, r6
 800cb9e:	f7fd fcdd 	bl	800a55c <dwt_write32bitoffsetreg>
 800cba2:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800cba6:	4a5e      	ldr	r2, [pc, #376]	; (800cd20 <dwt_ioctl+0xef0>)
 800cba8:	ea02 12c3 	and.w	r2, r2, r3, lsl #7
 800cbac:	f899 300c 	ldrb.w	r3, [r9, #12]
 800cbb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbb4:	4313      	orrs	r3, r2
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	495a      	ldr	r1, [pc, #360]	; (800cd24 <dwt_ioctl+0xef4>)
 800cbba:	4630      	mov	r0, r6
 800cbbc:	f7fd fcce 	bl	800a55c <dwt_write32bitoffsetreg>
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	4958      	ldr	r1, [pc, #352]	; (800cd28 <dwt_ioctl+0xef8>)
 800cbc6:	4630      	mov	r0, r6
 800cbc8:	f7fd fe56 	bl	800a878 <dwt_write8bitoffsetreg>
 800cbcc:	f8df 815c 	ldr.w	r8, [pc, #348]	; 800cd2c <dwt_ioctl+0xefc>
 800cbd0:	2700      	movs	r7, #0
 800cbd2:	463a      	mov	r2, r7
 800cbd4:	4641      	mov	r1, r8
 800cbd6:	4630      	mov	r0, r6
 800cbd8:	f7fd f873 	bl	8009cc2 <dwt_read8bitoffsetreg>
 800cbdc:	f010 0f05 	tst.w	r0, #5
 800cbe0:	d0f7      	beq.n	800cbd2 <dwt_ioctl+0xda2>
 800cbe2:	4605      	mov	r5, r0
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	4950      	ldr	r1, [pc, #320]	; (800cd2c <dwt_ioctl+0xefc>)
 800cbea:	4630      	mov	r0, r6
 800cbec:	f7fd fe44 	bl	800a878 <dwt_write8bitoffsetreg>
 800cbf0:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 800cbf4:	f025 0330 	bic.w	r3, r5, #48	; 0x30
 800cbf8:	2b01      	cmp	r3, #1
 800cbfa:	d025      	beq.n	800cc48 <dwt_ioctl+0xe18>
 800cbfc:	b26b      	sxtb	r3, r5
 800cbfe:	7023      	strb	r3, [r4, #0]
 800cc00:	2500      	movs	r5, #0
 800cc02:	f7ff b9bf 	b.w	800bf84 <dwt_ioctl+0x154>
 800cc06:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800cc08:	7b9b      	ldrb	r3, [r3, #14]
 800cc0a:	2b03      	cmp	r3, #3
 800cc0c:	f001 8123 	beq.w	800de56 <dwt_ioctl+0x2026>
 800cc10:	f899 3011 	ldrb.w	r3, [r9, #17]
 800cc14:	1e5a      	subs	r2, r3, #1
 800cc16:	b2d2      	uxtb	r2, r2
 800cc18:	2a01      	cmp	r2, #1
 800cc1a:	d912      	bls.n	800cc42 <dwt_ioctl+0xe12>
 800cc1c:	2201      	movs	r2, #1
 800cc1e:	e7b7      	b.n	800cb90 <dwt_ioctl+0xd60>
 800cc20:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800cc22:	7b9b      	ldrb	r3, [r3, #14]
 800cc24:	2b03      	cmp	r3, #3
 800cc26:	bf0c      	ite	eq
 800cc28:	2302      	moveq	r3, #2
 800cc2a:	2301      	movne	r3, #1
 800cc2c:	e7b2      	b.n	800cb94 <dwt_ioctl+0xd64>
 800cc2e:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 800cc32:	2910      	cmp	r1, #16
 800cc34:	d9ae      	bls.n	800cb94 <dwt_ioctl+0xd64>
 800cc36:	f06f 0303 	mvn.w	r3, #3
 800cc3a:	e7e0      	b.n	800cbfe <dwt_ioctl+0xdce>
 800cc3c:	2202      	movs	r2, #2
 800cc3e:	4613      	mov	r3, r2
 800cc40:	e7a8      	b.n	800cb94 <dwt_ioctl+0xd64>
 800cc42:	2201      	movs	r2, #1
 800cc44:	4613      	mov	r3, r2
 800cc46:	e7a5      	b.n	800cb94 <dwt_ioctl+0xd64>
 800cc48:	f899 3012 	ldrb.w	r3, [r9, #18]
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	d1d5      	bne.n	800cbfc <dwt_ioctl+0xdcc>
 800cc50:	f899 2011 	ldrb.w	r2, [r9, #17]
 800cc54:	1e53      	subs	r3, r2, #1
 800cc56:	b2db      	uxtb	r3, r3
 800cc58:	2b01      	cmp	r3, #1
 800cc5a:	d91b      	bls.n	800cc94 <dwt_ioctl+0xe64>
 800cc5c:	2a03      	cmp	r2, #3
 800cc5e:	bf0c      	ite	eq
 800cc60:	f44f 17a0 	moveq.w	r7, #1310720	; 0x140000
 800cc64:	f44f 17b0 	movne.w	r7, #1441792	; 0x160000
 800cc68:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800cc6c:	b112      	cbz	r2, 800cc74 <dwt_ioctl+0xe44>
 800cc6e:	f899 300c 	ldrb.w	r3, [r9, #12]
 800cc72:	b9c3      	cbnz	r3, 800cca6 <dwt_ioctl+0xe76>
 800cc74:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800cc78:	2900      	cmp	r1, #0
 800cc7a:	d0bf      	beq.n	800cbfc <dwt_ioctl+0xdcc>
 800cc7c:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d0bb      	beq.n	800cbfc <dwt_ioctl+0xdcc>
 800cc84:	f899 200c 	ldrb.w	r2, [r9, #12]
 800cc88:	9100      	str	r1, [sp, #0]
 800cc8a:	4639      	mov	r1, r7
 800cc8c:	4630      	mov	r0, r6
 800cc8e:	f7fc ffe6 	bl	8009c5e <dwt_readfromdevice>
 800cc92:	e7b3      	b.n	800cbfc <dwt_ioctl+0xdcc>
 800cc94:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800cc96:	7b9b      	ldrb	r3, [r3, #14]
 800cc98:	2b03      	cmp	r3, #3
 800cc9a:	bf0c      	ite	eq
 800cc9c:	f44f 1798 	moveq.w	r7, #1245184	; 0x130000
 800cca0:	f44f 1790 	movne.w	r7, #1179648	; 0x120000
 800cca4:	e7e0      	b.n	800cc68 <dwt_ioctl+0xe38>
 800cca6:	9200      	str	r2, [sp, #0]
 800cca8:	2200      	movs	r2, #0
 800ccaa:	4639      	mov	r1, r7
 800ccac:	4630      	mov	r0, r6
 800ccae:	f7fc ffd6 	bl	8009c5e <dwt_readfromdevice>
 800ccb2:	e7df      	b.n	800cc74 <dwt_ioctl+0xe44>
 800ccb4:	f06f 0302 	mvn.w	r3, #2
 800ccb8:	e7a1      	b.n	800cbfe <dwt_ioctl+0xdce>
 800ccba:	f06f 0301 	mvn.w	r3, #1
 800ccbe:	e79e      	b.n	800cbfe <dwt_ioctl+0xdce>
 800ccc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ccc4:	e79b      	b.n	800cbfe <dwt_ioctl+0xdce>
 800ccc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ccca:	e798      	b.n	800cbfe <dwt_ioctl+0xdce>
 800cccc:	7a23      	ldrb	r3, [r4, #8]
 800ccce:	79e1      	ldrb	r1, [r4, #7]
 800ccd0:	79a2      	ldrb	r2, [r4, #6]
 800ccd2:	00d2      	lsls	r2, r2, #3
 800ccd4:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800ccd8:	4313      	orrs	r3, r2
 800ccda:	7962      	ldrb	r2, [r4, #5]
 800ccdc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800cce0:	7922      	ldrb	r2, [r4, #4]
 800cce2:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800cce6:	78e2      	ldrb	r2, [r4, #3]
 800cce8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ccec:	78a2      	ldrb	r2, [r4, #2]
 800ccee:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 800ccf2:	7862      	ldrb	r2, [r4, #1]
 800ccf4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800ccf8:	7822      	ldrb	r2, [r4, #0]
 800ccfa:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800ccfe:	b29b      	uxth	r3, r3
 800cd00:	2200      	movs	r2, #0
 800cd02:	490b      	ldr	r1, [pc, #44]	; (800cd30 <dwt_ioctl+0xf00>)
 800cd04:	f7fd fbcd 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800cd08:	2500      	movs	r5, #0
 800cd0a:	f7ff b93b 	b.w	800bf84 <dwt_ioctl+0x154>
 800cd0e:	bf00      	nop
 800cd10:	000f0028 	.word	0x000f0028
 800cd14:	00020008 	.word	0x00020008
 800cd18:	00010034 	.word	0x00010034
 800cd1c:	00010044 	.word	0x00010044
 800cd20:	0001ff80 	.word	0x0001ff80
 800cd24:	00010048 	.word	0x00010048
 800cd28:	0001004c 	.word	0x0001004c
 800cd2c:	00010050 	.word	0x00010050
 800cd30:	00010030 	.word	0x00010030
 800cd34:	2c00      	cmp	r4, #0
 800cd36:	f000 87e1 	beq.w	800dcfc <dwt_ioctl+0x1ecc>
 800cd3a:	7863      	ldrb	r3, [r4, #1]
 800cd3c:	b133      	cbz	r3, 800cd4c <dwt_ioctl+0xf1c>
 800cd3e:	085b      	lsrs	r3, r3, #1
 800cd40:	3b01      	subs	r3, #1
 800cd42:	b2db      	uxtb	r3, r3
 800cd44:	7023      	strb	r3, [r4, #0]
 800cd46:	2500      	movs	r5, #0
 800cd48:	f7ff b91c 	b.w	800bf84 <dwt_ioctl+0x154>
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	e7f9      	b.n	800cd44 <dwt_ioctl+0xf14>
 800cd50:	2200      	movs	r2, #0
 800cd52:	49d0      	ldr	r1, [pc, #832]	; (800d094 <dwt_ioctl+0x1264>)
 800cd54:	f7fc ff8d 	bl	8009c72 <dwt_read32bitoffsetreg>
 800cd58:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800cd5c:	8023      	strh	r3, [r4, #0]
 800cd5e:	f3c0 400b 	ubfx	r0, r0, #16, #12
 800cd62:	8060      	strh	r0, [r4, #2]
 800cd64:	2200      	movs	r2, #0
 800cd66:	49cc      	ldr	r1, [pc, #816]	; (800d098 <dwt_ioctl+0x1268>)
 800cd68:	4630      	mov	r0, r6
 800cd6a:	f7fc ff82 	bl	8009c72 <dwt_read32bitoffsetreg>
 800cd6e:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800cd72:	80a3      	strh	r3, [r4, #4]
 800cd74:	f3c0 400b 	ubfx	r0, r0, #16, #12
 800cd78:	80e0      	strh	r0, [r4, #6]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	49c7      	ldr	r1, [pc, #796]	; (800d09c <dwt_ioctl+0x126c>)
 800cd7e:	4630      	mov	r0, r6
 800cd80:	f7fc ff77 	bl	8009c72 <dwt_read32bitoffsetreg>
 800cd84:	7220      	strb	r0, [r4, #8]
 800cd86:	0c00      	lsrs	r0, r0, #16
 800cd88:	7260      	strb	r0, [r4, #9]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	49c4      	ldr	r1, [pc, #784]	; (800d0a0 <dwt_ioctl+0x1270>)
 800cd8e:	4630      	mov	r0, r6
 800cd90:	f7fc ff6f 	bl	8009c72 <dwt_read32bitoffsetreg>
 800cd94:	f3c0 430b 	ubfx	r3, r0, #16, #12
 800cd98:	81a3      	strh	r3, [r4, #12]
 800cd9a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800cd9e:	8160      	strh	r0, [r4, #10]
 800cda0:	2200      	movs	r2, #0
 800cda2:	49c0      	ldr	r1, [pc, #768]	; (800d0a4 <dwt_ioctl+0x1274>)
 800cda4:	4630      	mov	r0, r6
 800cda6:	f7fc ff64 	bl	8009c72 <dwt_read32bitoffsetreg>
 800cdaa:	f3c0 430b 	ubfx	r3, r0, #16, #12
 800cdae:	f8a4 300f 	strh.w	r3, [r4, #15]
 800cdb2:	73a0      	strb	r0, [r4, #14]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	49bc      	ldr	r1, [pc, #752]	; (800d0a8 <dwt_ioctl+0x1278>)
 800cdb8:	4630      	mov	r0, r6
 800cdba:	f7fc ff5a 	bl	8009c72 <dwt_read32bitoffsetreg>
 800cdbe:	7460      	strb	r0, [r4, #17]
 800cdc0:	0c00      	lsrs	r0, r0, #16
 800cdc2:	74a0      	strb	r0, [r4, #18]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	49b9      	ldr	r1, [pc, #740]	; (800d0ac <dwt_ioctl+0x127c>)
 800cdc8:	4630      	mov	r0, r6
 800cdca:	f7fc ff52 	bl	8009c72 <dwt_read32bitoffsetreg>
 800cdce:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800cdd2:	f8a4 0013 	strh.w	r0, [r4, #19]
 800cdd6:	2500      	movs	r5, #0
 800cdd8:	7565      	strb	r5, [r4, #21]
 800cdda:	75a5      	strb	r5, [r4, #22]
 800cddc:	462a      	mov	r2, r5
 800cdde:	49b4      	ldr	r1, [pc, #720]	; (800d0b0 <dwt_ioctl+0x1280>)
 800cde0:	4630      	mov	r0, r6
 800cde2:	f7fc ff6e 	bl	8009cc2 <dwt_read8bitoffsetreg>
 800cde6:	75e0      	strb	r0, [r4, #23]
 800cde8:	f7ff b8cc 	b.w	800bf84 <dwt_ioctl+0x154>
 800cdec:	4611      	mov	r1, r2
 800cdee:	f7fd fdbb 	bl	800a968 <ull_configeventcounters>
 800cdf2:	2500      	movs	r5, #0
 800cdf4:	f7ff b8c6 	b.w	800bf84 <dwt_ioctl+0x154>
 800cdf8:	2c00      	cmp	r4, #0
 800cdfa:	f000 8782 	beq.w	800dd02 <dwt_ioctl+0x1ed2>
 800cdfe:	8823      	ldrh	r3, [r4, #0]
 800ce00:	2200      	movs	r2, #0
 800ce02:	49ac      	ldr	r1, [pc, #688]	; (800d0b4 <dwt_ioctl+0x1284>)
 800ce04:	f7fd fb4d 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800ce08:	2500      	movs	r5, #0
 800ce0a:	f7ff b8bb 	b.w	800bf84 <dwt_ioctl+0x154>
 800ce0e:	2c00      	cmp	r4, #0
 800ce10:	f000 877a 	beq.w	800dd08 <dwt_ioctl+0x1ed8>
 800ce14:	6825      	ldr	r5, [r4, #0]
 800ce16:	b935      	cbnz	r5, 800ce26 <dwt_ioctl+0xff6>
 800ce18:	2300      	movs	r3, #0
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	49a6      	ldr	r1, [pc, #664]	; (800d0b8 <dwt_ioctl+0x1288>)
 800ce1e:	f7fd fb40 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800ce22:	f7ff b8af 	b.w	800bf84 <dwt_ioctl+0x154>
 800ce26:	7962      	ldrb	r2, [r4, #5]
 800ce28:	7923      	ldrb	r3, [r4, #4]
 800ce2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ce2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ce32:	2200      	movs	r2, #0
 800ce34:	49a0      	ldr	r1, [pc, #640]	; (800d0b8 <dwt_ioctl+0x1288>)
 800ce36:	f7fd fb34 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800ce3a:	2500      	movs	r5, #0
 800ce3c:	f7ff b8a2 	b.w	800bf84 <dwt_ioctl+0x154>
 800ce40:	2c00      	cmp	r4, #0
 800ce42:	f000 8764 	beq.w	800dd0e <dwt_ioctl+0x1ede>
 800ce46:	6823      	ldr	r3, [r4, #0]
 800ce48:	b94b      	cbnz	r3, 800ce5e <dwt_ioctl+0x102e>
 800ce4a:	2500      	movs	r5, #0
 800ce4c:	9500      	str	r5, [sp, #0]
 800ce4e:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 800ce52:	462a      	mov	r2, r5
 800ce54:	2110      	movs	r1, #16
 800ce56:	f7fe fb61 	bl	800b51c <dwt_modify16bitoffsetreg>
 800ce5a:	f7ff b893 	b.w	800bf84 <dwt_ioctl+0x154>
 800ce5e:	2200      	movs	r2, #0
 800ce60:	2134      	movs	r1, #52	; 0x34
 800ce62:	f7fd fb7b 	bl	800a55c <dwt_write32bitoffsetreg>
 800ce66:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce6a:	9300      	str	r3, [sp, #0]
 800ce6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ce70:	2200      	movs	r2, #0
 800ce72:	2110      	movs	r1, #16
 800ce74:	4630      	mov	r0, r6
 800ce76:	f7fe fb51 	bl	800b51c <dwt_modify16bitoffsetreg>
 800ce7a:	2500      	movs	r5, #0
 800ce7c:	f7ff b882 	b.w	800bf84 <dwt_ioctl+0x154>
 800ce80:	2c00      	cmp	r4, #0
 800ce82:	f000 8747 	beq.w	800dd14 <dwt_ioctl+0x1ee4>
 800ce86:	8861      	ldrh	r1, [r4, #2]
 800ce88:	f7fd fd82 	bl	800a990 <ull_aon_read>
 800ce8c:	7020      	strb	r0, [r4, #0]
 800ce8e:	2500      	movs	r5, #0
 800ce90:	f7ff b878 	b.w	800bf84 <dwt_ioctl+0x154>
 800ce94:	2c00      	cmp	r4, #0
 800ce96:	f000 8740 	beq.w	800dd1a <dwt_ioctl+0x1eea>
 800ce9a:	78a2      	ldrb	r2, [r4, #2]
 800ce9c:	8821      	ldrh	r1, [r4, #0]
 800ce9e:	f7fd fd97 	bl	800a9d0 <ull_aon_write>
 800cea2:	2500      	movs	r5, #0
 800cea4:	f7ff b86e 	b.w	800bf84 <dwt_ioctl+0x154>
 800cea8:	4b84      	ldr	r3, [pc, #528]	; (800d0bc <dwt_ioctl+0x128c>)
 800ceaa:	4a85      	ldr	r2, [pc, #532]	; (800d0c0 <dwt_ioctl+0x1290>)
 800ceac:	2d01      	cmp	r5, #1
 800ceae:	bf18      	it	ne
 800ceb0:	4613      	movne	r3, r2
 800ceb2:	2d01      	cmp	r5, #1
 800ceb4:	4983      	ldr	r1, [pc, #524]	; (800d0c4 <dwt_ioctl+0x1294>)
 800ceb6:	bf18      	it	ne
 800ceb8:	f04f 110c 	movne.w	r1, #786444	; 0xc000c
 800cebc:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800cebe:	7b92      	ldrb	r2, [r2, #14]
 800cec0:	2a01      	cmp	r2, #1
 800cec2:	d012      	beq.n	800ceea <dwt_ioctl+0x10ba>
 800cec4:	2a03      	cmp	r2, #3
 800cec6:	d117      	bne.n	800cef8 <dwt_ioctl+0x10c8>
 800cec8:	f5a2 12c0 	sub.w	r2, r2, #1572864	; 0x180000
 800cecc:	3a01      	subs	r2, #1
 800cece:	441a      	add	r2, r3
 800ced0:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800ced4:	f7fc fee3 	bl	8009c9e <dwt_read16bitoffsetreg>
 800ced8:	09c0      	lsrs	r0, r0, #7
 800ceda:	8020      	strh	r0, [r4, #0]
 800cedc:	8825      	ldrh	r5, [r4, #0]
 800cede:	3500      	adds	r5, #0
 800cee0:	bf18      	it	ne
 800cee2:	2501      	movne	r5, #1
 800cee4:	426d      	negs	r5, r5
 800cee6:	f7ff b84d 	b.w	800bf84 <dwt_ioctl+0x154>
 800ceea:	2202      	movs	r2, #2
 800ceec:	4619      	mov	r1, r3
 800ceee:	f7fc fed6 	bl	8009c9e <dwt_read16bitoffsetreg>
 800cef2:	09c0      	lsrs	r0, r0, #7
 800cef4:	8020      	strh	r0, [r4, #0]
 800cef6:	e7f1      	b.n	800cedc <dwt_ioctl+0x10ac>
 800cef8:	2202      	movs	r2, #2
 800cefa:	f7fc fed0 	bl	8009c9e <dwt_read16bitoffsetreg>
 800cefe:	09c0      	lsrs	r0, r0, #7
 800cf00:	8020      	strh	r0, [r4, #0]
 800cf02:	e7eb      	b.n	800cedc <dwt_ioctl+0x10ac>
 800cf04:	2c00      	cmp	r4, #0
 800cf06:	f000 870b 	beq.w	800dd20 <dwt_ioctl+0x1ef0>
 800cf0a:	7821      	ldrb	r1, [r4, #0]
 800cf0c:	f7fe fb20 	bl	800b550 <ull_setleds>
 800cf10:	2500      	movs	r5, #0
 800cf12:	f7ff b837 	b.w	800bf84 <dwt_ioctl+0x154>
 800cf16:	4611      	mov	r1, r2
 800cf18:	f7fe f9a2 	bl	800b260 <ull_setdwstate>
 800cf1c:	2500      	movs	r5, #0
 800cf1e:	f7ff b831 	b.w	800bf84 <dwt_ioctl+0x154>
 800cf22:	9400      	str	r4, [sp, #0]
 800cf24:	2304      	movs	r3, #4
 800cf26:	2200      	movs	r2, #0
 800cf28:	211c      	movs	r1, #28
 800cf2a:	f7fc fe98 	bl	8009c5e <dwt_readfromdevice>
 800cf2e:	2500      	movs	r5, #0
 800cf30:	f7ff b828 	b.w	800bf84 <dwt_ioctl+0x154>
 800cf34:	2c00      	cmp	r4, #0
 800cf36:	f000 86f6 	beq.w	800dd26 <dwt_ioctl+0x1ef6>
 800cf3a:	2202      	movs	r2, #2
 800cf3c:	2144      	movs	r1, #68	; 0x44
 800cf3e:	f7fc feae 	bl	8009c9e <dwt_read16bitoffsetreg>
 800cf42:	f3c0 2000 	ubfx	r0, r0, #8, #1
 800cf46:	7020      	strb	r0, [r4, #0]
 800cf48:	2500      	movs	r5, #0
 800cf4a:	f7ff b81b 	b.w	800bf84 <dwt_ioctl+0x154>
 800cf4e:	2c00      	cmp	r4, #0
 800cf50:	f000 86ec 	beq.w	800dd2c <dwt_ioctl+0x1efc>
 800cf54:	2200      	movs	r2, #0
 800cf56:	2144      	movs	r1, #68	; 0x44
 800cf58:	f7fc feb3 	bl	8009cc2 <dwt_read8bitoffsetreg>
 800cf5c:	f000 0001 	and.w	r0, r0, #1
 800cf60:	7020      	strb	r0, [r4, #0]
 800cf62:	2500      	movs	r5, #0
 800cf64:	f7ff b80e 	b.w	800bf84 <dwt_ioctl+0x154>
 800cf68:	2c00      	cmp	r4, #0
 800cf6a:	f000 86e2 	beq.w	800dd32 <dwt_ioctl+0x1f02>
 800cf6e:	8862      	ldrh	r2, [r4, #2]
 800cf70:	8821      	ldrh	r1, [r4, #0]
 800cf72:	f7fe f9d1 	bl	800b318 <ull_configureframefilter>
 800cf76:	2500      	movs	r5, #0
 800cf78:	f7ff b804 	b.w	800bf84 <dwt_ioctl+0x154>
 800cf7c:	9400      	str	r4, [sp, #0]
 800cf7e:	2308      	movs	r3, #8
 800cf80:	2200      	movs	r2, #0
 800cf82:	2104      	movs	r1, #4
 800cf84:	f7fd fa82 	bl	800a48c <dwt_writetodevice>
 800cf88:	2500      	movs	r5, #0
 800cf8a:	f7fe bffb 	b.w	800bf84 <dwt_ioctl+0x154>
 800cf8e:	9400      	str	r4, [sp, #0]
 800cf90:	2308      	movs	r3, #8
 800cf92:	2200      	movs	r2, #0
 800cf94:	2104      	movs	r1, #4
 800cf96:	f7fc fe62 	bl	8009c5e <dwt_readfromdevice>
 800cf9a:	2500      	movs	r5, #0
 800cf9c:	f7fe bff2 	b.w	800bf84 <dwt_ioctl+0x154>
 800cfa0:	2c00      	cmp	r4, #0
 800cfa2:	f000 86c9 	beq.w	800dd38 <dwt_ioctl+0x1f08>
 800cfa6:	8823      	ldrh	r3, [r4, #0]
 800cfa8:	2202      	movs	r2, #2
 800cfaa:	210c      	movs	r1, #12
 800cfac:	f7fd fa79 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800cfb0:	2500      	movs	r5, #0
 800cfb2:	f7fe bfe7 	b.w	800bf84 <dwt_ioctl+0x154>
 800cfb6:	2c00      	cmp	r4, #0
 800cfb8:	f000 86c1 	beq.w	800dd3e <dwt_ioctl+0x1f0e>
 800cfbc:	8823      	ldrh	r3, [r4, #0]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	210c      	movs	r1, #12
 800cfc2:	f7fd fa6e 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800cfc6:	2500      	movs	r5, #0
 800cfc8:	f7fe bfdc 	b.w	800bf84 <dwt_ioctl+0x154>
 800cfcc:	4621      	mov	r1, r4
 800cfce:	f7fd fa3b 	bl	800a448 <ull_readrxtimestamp>
 800cfd2:	2500      	movs	r5, #0
 800cfd4:	f7fe bfd6 	b.w	800bf84 <dwt_ioctl+0x154>
 800cfd8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800cfda:	7b9b      	ldrb	r3, [r3, #14]
 800cfdc:	2b01      	cmp	r3, #1
 800cfde:	d00b      	beq.n	800cff8 <dwt_ioctl+0x11c8>
 800cfe0:	2b03      	cmp	r3, #3
 800cfe2:	d112      	bne.n	800d00a <dwt_ioctl+0x11da>
 800cfe4:	9400      	str	r4, [sp, #0]
 800cfe6:	2305      	movs	r3, #5
 800cfe8:	2220      	movs	r2, #32
 800cfea:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800cfee:	f7fc fe36 	bl	8009c5e <dwt_readfromdevice>
 800cff2:	2500      	movs	r5, #0
 800cff4:	f7fe bfc6 	b.w	800bf84 <dwt_ioctl+0x154>
 800cff8:	9400      	str	r4, [sp, #0]
 800cffa:	2305      	movs	r3, #5
 800cffc:	2200      	movs	r2, #0
 800cffe:	4932      	ldr	r1, [pc, #200]	; (800d0c8 <dwt_ioctl+0x1298>)
 800d000:	f7fc fe2d 	bl	8009c5e <dwt_readfromdevice>
 800d004:	2500      	movs	r5, #0
 800d006:	f7fe bfbd 	b.w	800bf84 <dwt_ioctl+0x154>
 800d00a:	9400      	str	r4, [sp, #0]
 800d00c:	2305      	movs	r3, #5
 800d00e:	2200      	movs	r2, #0
 800d010:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800d014:	f7fc fe23 	bl	8009c5e <dwt_readfromdevice>
 800d018:	2500      	movs	r5, #0
 800d01a:	f7fe bfb3 	b.w	800bf84 <dwt_ioctl+0x154>
 800d01e:	2500      	movs	r5, #0
 800d020:	f804 5b01 	strb.w	r5, [r4], #1
 800d024:	9400      	str	r4, [sp, #0]
 800d026:	2304      	movs	r3, #4
 800d028:	462a      	mov	r2, r5
 800d02a:	216c      	movs	r1, #108	; 0x6c
 800d02c:	f7fc fe17 	bl	8009c5e <dwt_readfromdevice>
 800d030:	f7fe bfa8 	b.w	800bf84 <dwt_ioctl+0x154>
 800d034:	2c00      	cmp	r4, #0
 800d036:	f000 8685 	beq.w	800dd44 <dwt_ioctl+0x1f14>
 800d03a:	2201      	movs	r2, #1
 800d03c:	2160      	movs	r1, #96	; 0x60
 800d03e:	f7fc fe18 	bl	8009c72 <dwt_read32bitoffsetreg>
 800d042:	6020      	str	r0, [r4, #0]
 800d044:	2500      	movs	r5, #0
 800d046:	f7fe bf9d 	b.w	800bf84 <dwt_ioctl+0x154>
 800d04a:	2c00      	cmp	r4, #0
 800d04c:	f000 867d 	beq.w	800dd4a <dwt_ioctl+0x1f1a>
 800d050:	2200      	movs	r2, #0
 800d052:	2160      	movs	r1, #96	; 0x60
 800d054:	f7fc fe0d 	bl	8009c72 <dwt_read32bitoffsetreg>
 800d058:	6020      	str	r0, [r4, #0]
 800d05a:	2500      	movs	r5, #0
 800d05c:	f7fe bf92 	b.w	800bf84 <dwt_ioctl+0x154>
 800d060:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d062:	7b9b      	ldrb	r3, [r3, #14]
 800d064:	2b01      	cmp	r3, #1
 800d066:	d00b      	beq.n	800d080 <dwt_ioctl+0x1250>
 800d068:	2b03      	cmp	r3, #3
 800d06a:	d131      	bne.n	800d0d0 <dwt_ioctl+0x12a0>
 800d06c:	9400      	str	r4, [sp, #0]
 800d06e:	2305      	movs	r3, #5
 800d070:	2228      	movs	r2, #40	; 0x28
 800d072:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800d076:	f7fc fdf2 	bl	8009c5e <dwt_readfromdevice>
 800d07a:	2500      	movs	r5, #0
 800d07c:	f7fe bf82 	b.w	800bf84 <dwt_ioctl+0x154>
 800d080:	9400      	str	r4, [sp, #0]
 800d082:	2305      	movs	r3, #5
 800d084:	2200      	movs	r2, #0
 800d086:	4911      	ldr	r1, [pc, #68]	; (800d0cc <dwt_ioctl+0x129c>)
 800d088:	f7fc fde9 	bl	8009c5e <dwt_readfromdevice>
 800d08c:	2500      	movs	r5, #0
 800d08e:	f7fe bf79 	b.w	800bf84 <dwt_ioctl+0x154>
 800d092:	bf00      	nop
 800d094:	000f0004 	.word	0x000f0004
 800d098:	000f0008 	.word	0x000f0008
 800d09c:	000f000c 	.word	0x000f000c
 800d0a0:	000f0010 	.word	0x000f0010
 800d0a4:	000f0014 	.word	0x000f0014
 800d0a8:	000f0018 	.word	0x000f0018
 800d0ac:	000f001c 	.word	0x000f001c
 800d0b0:	000f0020 	.word	0x000f0020
 800d0b4:	00060004 	.word	0x00060004
 800d0b8:	0011001c 	.word	0x0011001c
 800d0bc:	00180034 	.word	0x00180034
 800d0c0:	0018002c 	.word	0x0018002c
 800d0c4:	000c0014 	.word	0x000c0014
 800d0c8:	00180020 	.word	0x00180020
 800d0cc:	00180028 	.word	0x00180028
 800d0d0:	9400      	str	r4, [sp, #0]
 800d0d2:	2305      	movs	r3, #5
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	49ce      	ldr	r1, [pc, #824]	; (800d410 <dwt_ioctl+0x15e0>)
 800d0d8:	f7fc fdc1 	bl	8009c5e <dwt_readfromdevice>
 800d0dc:	2500      	movs	r5, #0
 800d0de:	f7fe bf51 	b.w	800bf84 <dwt_ioctl+0x154>
 800d0e2:	2c00      	cmp	r4, #0
 800d0e4:	f000 8634 	beq.w	800dd50 <dwt_ioctl+0x1f20>
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	211c      	movs	r1, #28
 800d0ec:	f7fc fdc1 	bl	8009c72 <dwt_read32bitoffsetreg>
 800d0f0:	6020      	str	r0, [r4, #0]
 800d0f2:	2500      	movs	r5, #0
 800d0f4:	f7fe bf46 	b.w	800bf84 <dwt_ioctl+0x154>
 800d0f8:	2c00      	cmp	r4, #0
 800d0fa:	f000 862c 	beq.w	800dd56 <dwt_ioctl+0x1f26>
 800d0fe:	8825      	ldrh	r5, [r4, #0]
 800d100:	6867      	ldr	r7, [r4, #4]
 800d102:	7a23      	ldrb	r3, [r4, #8]
 800d104:	2b00      	cmp	r3, #0
 800d106:	f000 8629 	beq.w	800dd5c <dwt_ioctl+0x1f2c>
 800d10a:	463c      	mov	r4, r7
 800d10c:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 800d110:	4629      	mov	r1, r5
 800d112:	4630      	mov	r0, r6
 800d114:	f7fd fa00 	bl	800a518 <_dwt_otpread>
 800d118:	f844 0b04 	str.w	r0, [r4], #4
 800d11c:	3501      	adds	r5, #1
 800d11e:	b2ad      	uxth	r5, r5
 800d120:	42bc      	cmp	r4, r7
 800d122:	d1f5      	bne.n	800d110 <dwt_ioctl+0x12e0>
 800d124:	2500      	movs	r5, #0
 800d126:	f7fe bf2d 	b.w	800bf84 <dwt_ioctl+0x154>
 800d12a:	2c00      	cmp	r4, #0
 800d12c:	f000 8619 	beq.w	800dd62 <dwt_ioctl+0x1f32>
 800d130:	7823      	ldrb	r3, [r4, #0]
 800d132:	2201      	movs	r2, #1
 800d134:	2124      	movs	r1, #36	; 0x24
 800d136:	f7fd fb9f 	bl	800a878 <dwt_write8bitoffsetreg>
 800d13a:	2500      	movs	r5, #0
 800d13c:	f7fe bf22 	b.w	800bf84 <dwt_ioctl+0x154>
 800d140:	f7fe f90e 	bl	800b360 <ull_run_pgfcal>
 800d144:	4605      	mov	r5, r0
 800d146:	f7fe bf1d 	b.w	800bf84 <dwt_ioctl+0x154>
 800d14a:	4611      	mov	r1, r2
 800d14c:	f7fe fa4e 	bl	800b5ec <ull_pgf_cal>
 800d150:	4605      	mov	r5, r0
 800d152:	f7fe bf17 	b.w	800bf84 <dwt_ioctl+0x154>
 800d156:	2c00      	cmp	r4, #0
 800d158:	f000 8606 	beq.w	800dd68 <dwt_ioctl+0x1f38>
 800d15c:	78a5      	ldrb	r5, [r4, #2]
 800d15e:	2101      	movs	r1, #1
 800d160:	f7fd f9b0 	bl	800a4c4 <ull_force_clocks>
 800d164:	2100      	movs	r1, #0
 800d166:	4630      	mov	r0, r6
 800d168:	f7fd fe6e 	bl	800ae48 <ull_enable_rf_tx>
 800d16c:	4630      	mov	r0, r6
 800d16e:	f7fd fe9f 	bl	800aeb0 <ull_enable_rftx_blocks>
 800d172:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 800d176:	2200      	movs	r2, #0
 800d178:	49a6      	ldr	r1, [pc, #664]	; (800d414 <dwt_ioctl+0x15e4>)
 800d17a:	4630      	mov	r0, r6
 800d17c:	f7fd fb7c 	bl	800a878 <dwt_write8bitoffsetreg>
 800d180:	2301      	movs	r3, #1
 800d182:	9300      	str	r3, [sp, #0]
 800d184:	23ff      	movs	r3, #255	; 0xff
 800d186:	2200      	movs	r2, #0
 800d188:	49a3      	ldr	r1, [pc, #652]	; (800d418 <dwt_ioctl+0x15e8>)
 800d18a:	4630      	mov	r0, r6
 800d18c:	f7fd ffaa 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800d190:	4fa1      	ldr	r7, [pc, #644]	; (800d418 <dwt_ioctl+0x15e8>)
 800d192:	2500      	movs	r5, #0
 800d194:	462a      	mov	r2, r5
 800d196:	4639      	mov	r1, r7
 800d198:	4630      	mov	r0, r6
 800d19a:	f7fc fd92 	bl	8009cc2 <dwt_read8bitoffsetreg>
 800d19e:	f010 0f01 	tst.w	r0, #1
 800d1a2:	d1f7      	bne.n	800d194 <dwt_ioctl+0x1364>
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	499d      	ldr	r1, [pc, #628]	; (800d41c <dwt_ioctl+0x15ec>)
 800d1a8:	4630      	mov	r0, r6
 800d1aa:	f7fc fd78 	bl	8009c9e <dwt_read16bitoffsetreg>
 800d1ae:	4605      	mov	r5, r0
 800d1b0:	4630      	mov	r0, r6
 800d1b2:	f7fd fb03 	bl	800a7bc <ull_disable_rftx_blocks>
 800d1b6:	2100      	movs	r1, #0
 800d1b8:	4630      	mov	r0, r6
 800d1ba:	f7fd fb09 	bl	800a7d0 <ull_disable_rf_tx>
 800d1be:	2105      	movs	r1, #5
 800d1c0:	4630      	mov	r0, r6
 800d1c2:	f7fd f97f 	bl	800a4c4 <ull_force_clocks>
 800d1c6:	f3c5 050b 	ubfx	r5, r5, #0, #12
 800d1ca:	8025      	strh	r5, [r4, #0]
 800d1cc:	2500      	movs	r5, #0
 800d1ce:	f7fe bed9 	b.w	800bf84 <dwt_ioctl+0x154>
 800d1d2:	2102      	movs	r1, #2
 800d1d4:	f7fe f844 	bl	800b260 <ull_setdwstate>
 800d1d8:	2101      	movs	r1, #1
 800d1da:	4630      	mov	r0, r6
 800d1dc:	f7fe f840 	bl	800b260 <ull_setdwstate>
 800d1e0:	2432      	movs	r4, #50	; 0x32
 800d1e2:	f04f 0814 	mov.w	r8, #20
 800d1e6:	2700      	movs	r7, #0
 800d1e8:	2544      	movs	r5, #68	; 0x44
 800d1ea:	4640      	mov	r0, r8
 800d1ec:	f7f4 f9c5 	bl	800157a <deca_usleep>
 800d1f0:	463a      	mov	r2, r7
 800d1f2:	4629      	mov	r1, r5
 800d1f4:	4630      	mov	r0, r6
 800d1f6:	f7fc fd64 	bl	8009cc2 <dwt_read8bitoffsetreg>
 800d1fa:	f010 0f02 	tst.w	r0, #2
 800d1fe:	d105      	bne.n	800d20c <dwt_ioctl+0x13dc>
 800d200:	1e63      	subs	r3, r4, #1
 800d202:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800d206:	d1f0      	bne.n	800d1ea <dwt_ioctl+0x13ba>
 800d208:	2501      	movs	r5, #1
 800d20a:	e000      	b.n	800d20e <dwt_ioctl+0x13de>
 800d20c:	2500      	movs	r5, #0
 800d20e:	426d      	negs	r5, r5
 800d210:	f7fe beb8 	b.w	800bf84 <dwt_ioctl+0x154>
 800d214:	2c00      	cmp	r4, #0
 800d216:	f000 85aa 	beq.w	800dd6e <dwt_ioctl+0x1f3e>
 800d21a:	7823      	ldrb	r3, [r4, #0]
 800d21c:	031b      	lsls	r3, r3, #12
 800d21e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800d222:	7862      	ldrb	r2, [r4, #1]
 800d224:	2a01      	cmp	r2, #1
 800d226:	bf08      	it	eq
 800d228:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 800d22c:	9300      	str	r3, [sp, #0]
 800d22e:	f46f 43e2 	mvn.w	r3, #28928	; 0x7100
 800d232:	2200      	movs	r2, #0
 800d234:	497a      	ldr	r1, [pc, #488]	; (800d420 <dwt_ioctl+0x15f0>)
 800d236:	f7fd fde3 	bl	800ae00 <dwt_modify32bitoffsetreg>
 800d23a:	2500      	movs	r5, #0
 800d23c:	f7fe bea2 	b.w	800bf84 <dwt_ioctl+0x154>
 800d240:	2c00      	cmp	r4, #0
 800d242:	f000 8597 	beq.w	800dd74 <dwt_ioctl+0x1f44>
 800d246:	6862      	ldr	r2, [r4, #4]
 800d248:	6821      	ldr	r1, [r4, #0]
 800d24a:	f7fd fefb 	bl	800b044 <ull_setgpiomode>
 800d24e:	2500      	movs	r5, #0
 800d250:	f7fe be98 	b.w	800bf84 <dwt_ioctl+0x154>
 800d254:	2c00      	cmp	r4, #0
 800d256:	f000 8590 	beq.w	800dd7a <dwt_ioctl+0x1f4a>
 800d25a:	8823      	ldrh	r3, [r4, #0]
 800d25c:	2200      	movs	r2, #0
 800d25e:	4971      	ldr	r1, [pc, #452]	; (800d424 <dwt_ioctl+0x15f4>)
 800d260:	f7fd f91f 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800d264:	2500      	movs	r5, #0
 800d266:	f7fe be8d 	b.w	800bf84 <dwt_ioctl+0x154>
 800d26a:	2c00      	cmp	r4, #0
 800d26c:	f000 8588 	beq.w	800dd80 <dwt_ioctl+0x1f50>
 800d270:	6862      	ldr	r2, [r4, #4]
 800d272:	8821      	ldrh	r1, [r4, #0]
 800d274:	f7fe f9ea 	bl	800b64c <ull_setgpiovalue>
 800d278:	2500      	movs	r5, #0
 800d27a:	f7fe be83 	b.w	800bf84 <dwt_ioctl+0x154>
 800d27e:	2c00      	cmp	r4, #0
 800d280:	f000 8581 	beq.w	800dd86 <dwt_ioctl+0x1f56>
 800d284:	7865      	ldrb	r5, [r4, #1]
 800d286:	7823      	ldrb	r3, [r4, #0]
 800d288:	b18b      	cbz	r3, 800d2ae <dwt_ioctl+0x147e>
 800d28a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d28c:	2200      	movs	r2, #0
 800d28e:	739a      	strb	r2, [r3, #14]
 800d290:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d294:	2208      	movs	r2, #8
 800d296:	b1e5      	cbz	r5, 800d2d2 <dwt_ioctl+0x14a2>
 800d298:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d29c:	9200      	str	r2, [sp, #0]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	2110      	movs	r1, #16
 800d2a2:	4630      	mov	r0, r6
 800d2a4:	f7fd fdac 	bl	800ae00 <dwt_modify32bitoffsetreg>
 800d2a8:	2500      	movs	r5, #0
 800d2aa:	f7fe be6b 	b.w	800bf84 <dwt_ioctl+0x154>
 800d2ae:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d2b0:	2201      	movs	r2, #1
 800d2b2:	739a      	strb	r2, [r3, #14]
 800d2b4:	2318      	movs	r3, #24
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	495b      	ldr	r1, [pc, #364]	; (800d428 <dwt_ioctl+0x15f8>)
 800d2ba:	f7fd f94f 	bl	800a55c <dwt_write32bitoffsetreg>
 800d2be:	23e8      	movs	r3, #232	; 0xe8
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	495a      	ldr	r1, [pc, #360]	; (800d42c <dwt_ioctl+0x15fc>)
 800d2c4:	4630      	mov	r0, r6
 800d2c6:	f7fd f949 	bl	800a55c <dwt_write32bitoffsetreg>
 800d2ca:	f06f 0308 	mvn.w	r3, #8
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	e7e1      	b.n	800d296 <dwt_ioctl+0x1466>
 800d2d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d2d6:	e7e1      	b.n	800d29c <dwt_ioctl+0x146c>
 800d2d8:	2c00      	cmp	r4, #0
 800d2da:	f000 8557 	beq.w	800dd8c <dwt_ioctl+0x1f5c>
 800d2de:	6823      	ldr	r3, [r4, #0]
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	2130      	movs	r1, #48	; 0x30
 800d2e4:	f7fd f93a 	bl	800a55c <dwt_write32bitoffsetreg>
 800d2e8:	2500      	movs	r5, #0
 800d2ea:	f7fe be4b 	b.w	800bf84 <dwt_ioctl+0x154>
 800d2ee:	2c00      	cmp	r4, #0
 800d2f0:	f000 854f 	beq.w	800dd92 <dwt_ioctl+0x1f62>
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	4629      	mov	r1, r5
 800d2f8:	f7fc fcbb 	bl	8009c72 <dwt_read32bitoffsetreg>
 800d2fc:	6020      	str	r0, [r4, #0]
 800d2fe:	2500      	movs	r5, #0
 800d300:	f7fe be40 	b.w	800bf84 <dwt_ioctl+0x154>
 800d304:	4623      	mov	r3, r4
 800d306:	2200      	movs	r2, #0
 800d308:	4629      	mov	r1, r5
 800d30a:	f7fd f927 	bl	800a55c <dwt_write32bitoffsetreg>
 800d30e:	2500      	movs	r5, #0
 800d310:	f7fe be38 	b.w	800bf84 <dwt_ioctl+0x154>
 800d314:	2c00      	cmp	r4, #0
 800d316:	f000 853f 	beq.w	800dd98 <dwt_ioctl+0x1f68>
 800d31a:	2203      	movs	r2, #3
 800d31c:	4944      	ldr	r1, [pc, #272]	; (800d430 <dwt_ioctl+0x1600>)
 800d31e:	f7fc fcd0 	bl	8009cc2 <dwt_read8bitoffsetreg>
 800d322:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800d326:	7020      	strb	r0, [r4, #0]
 800d328:	2500      	movs	r5, #0
 800d32a:	f7fe be2b 	b.w	800bf84 <dwt_ioctl+0x154>
 800d32e:	2c00      	cmp	r4, #0
 800d330:	f000 8535 	beq.w	800dd9e <dwt_ioctl+0x1f6e>
 800d334:	6823      	ldr	r3, [r4, #0]
 800d336:	2200      	movs	r2, #0
 800d338:	2144      	movs	r1, #68	; 0x44
 800d33a:	f7fd f90f 	bl	800a55c <dwt_write32bitoffsetreg>
 800d33e:	2500      	movs	r5, #0
 800d340:	f7fe be20 	b.w	800bf84 <dwt_ioctl+0x154>
 800d344:	2c00      	cmp	r4, #0
 800d346:	f000 852d 	beq.w	800dda4 <dwt_ioctl+0x1f74>
 800d34a:	8823      	ldrh	r3, [r4, #0]
 800d34c:	2200      	movs	r2, #0
 800d34e:	2148      	movs	r1, #72	; 0x48
 800d350:	f7fd f8a7 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800d354:	2500      	movs	r5, #0
 800d356:	f7fe be15 	b.w	800bf84 <dwt_ioctl+0x154>
 800d35a:	2c00      	cmp	r4, #0
 800d35c:	f000 8525 	beq.w	800ddaa <dwt_ioctl+0x1f7a>
 800d360:	2200      	movs	r2, #0
 800d362:	2144      	movs	r1, #68	; 0x44
 800d364:	f7fc fc85 	bl	8009c72 <dwt_read32bitoffsetreg>
 800d368:	6020      	str	r0, [r4, #0]
 800d36a:	2500      	movs	r5, #0
 800d36c:	f7fe be0a 	b.w	800bf84 <dwt_ioctl+0x154>
 800d370:	2c00      	cmp	r4, #0
 800d372:	f000 851d 	beq.w	800ddb0 <dwt_ioctl+0x1f80>
 800d376:	2200      	movs	r2, #0
 800d378:	2148      	movs	r1, #72	; 0x48
 800d37a:	f7fc fc90 	bl	8009c9e <dwt_read16bitoffsetreg>
 800d37e:	6020      	str	r0, [r4, #0]
 800d380:	2500      	movs	r5, #0
 800d382:	f7fe bdff 	b.w	800bf84 <dwt_ioctl+0x154>
 800d386:	2c00      	cmp	r4, #0
 800d388:	f000 8515 	beq.w	800ddb6 <dwt_ioctl+0x1f86>
 800d38c:	7823      	ldrb	r3, [r4, #0]
 800d38e:	2200      	movs	r2, #0
 800d390:	4928      	ldr	r1, [pc, #160]	; (800d434 <dwt_ioctl+0x1604>)
 800d392:	f7fd fa71 	bl	800a878 <dwt_write8bitoffsetreg>
 800d396:	2500      	movs	r5, #0
 800d398:	f7fe bdf4 	b.w	800bf84 <dwt_ioctl+0x154>
 800d39c:	2c00      	cmp	r4, #0
 800d39e:	f000 850d 	beq.w	800ddbc <dwt_ioctl+0x1f8c>
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	2144      	movs	r1, #68	; 0x44
 800d3a6:	f7fc fc8c 	bl	8009cc2 <dwt_read8bitoffsetreg>
 800d3aa:	7020      	strb	r0, [r4, #0]
 800d3ac:	2500      	movs	r5, #0
 800d3ae:	f7fe bde9 	b.w	800bf84 <dwt_ioctl+0x154>
 800d3b2:	2c00      	cmp	r4, #0
 800d3b4:	f000 8505 	beq.w	800ddc2 <dwt_ioctl+0x1f92>
 800d3b8:	f7fd fa6a 	bl	800a890 <ull_getframelength>
 800d3bc:	6020      	str	r0, [r4, #0]
 800d3be:	2500      	movs	r5, #0
 800d3c0:	f7fe bde0 	b.w	800bf84 <dwt_ioctl+0x154>
 800d3c4:	2c00      	cmp	r4, #0
 800d3c6:	f000 84ff 	beq.w	800ddc8 <dwt_ioctl+0x1f98>
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	491a      	ldr	r1, [pc, #104]	; (800d438 <dwt_ioctl+0x1608>)
 800d3ce:	f7fc fc66 	bl	8009c9e <dwt_read16bitoffsetreg>
 800d3d2:	8020      	strh	r0, [r4, #0]
 800d3d4:	2500      	movs	r5, #0
 800d3d6:	f7fe bdd5 	b.w	800bf84 <dwt_ioctl+0x154>
 800d3da:	2c00      	cmp	r4, #0
 800d3dc:	f000 84f7 	beq.w	800ddce <dwt_ioctl+0x1f9e>
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	4916      	ldr	r1, [pc, #88]	; (800d43c <dwt_ioctl+0x160c>)
 800d3e4:	f7fc fc45 	bl	8009c72 <dwt_read32bitoffsetreg>
 800d3e8:	6020      	str	r0, [r4, #0]
 800d3ea:	2500      	movs	r5, #0
 800d3ec:	f7fe bdca 	b.w	800bf84 <dwt_ioctl+0x154>
 800d3f0:	2c00      	cmp	r4, #0
 800d3f2:	f000 84ef 	beq.w	800ddd4 <dwt_ioctl+0x1fa4>
 800d3f6:	8823      	ldrh	r3, [r4, #0]
 800d3f8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d3fc:	9300      	str	r3, [sp, #0]
 800d3fe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800d402:	2200      	movs	r2, #0
 800d404:	490d      	ldr	r1, [pc, #52]	; (800d43c <dwt_ioctl+0x160c>)
 800d406:	f7fe f889 	bl	800b51c <dwt_modify16bitoffsetreg>
 800d40a:	2500      	movs	r5, #0
 800d40c:	f7fe bdba 	b.w	800bf84 <dwt_ioctl+0x154>
 800d410:	000c0008 	.word	0x000c0008
 800d414:	0007001c 	.word	0x0007001c
 800d418:	00080010 	.word	0x00080010
 800d41c:	00080014 	.word	0x00080014
 800d420:	00070014 	.word	0x00070014
 800d424:	00050008 	.word	0x00050008
 800d428:	001f000c 	.word	0x001f000c
 800d42c:	001f0010 	.word	0x001f0010
 800d430:	00030060 	.word	0x00030060
 800d434:	00010018 	.word	0x00010018
 800d438:	0005002c 	.word	0x0005002c
 800d43c:	000e001c 	.word	0x000e001c
 800d440:	2c00      	cmp	r4, #0
 800d442:	f000 84ca 	beq.w	800ddda <dwt_ioctl+0x1faa>
 800d446:	88a7      	ldrh	r7, [r4, #4]
 800d448:	f8d4 b008 	ldr.w	fp, [r4, #8]
 800d44c:	7b23      	ldrb	r3, [r4, #12]
 800d44e:	9306      	str	r3, [sp, #24]
 800d450:	6922      	ldr	r2, [r4, #16]
 800d452:	9204      	str	r2, [sp, #16]
 800d454:	6962      	ldr	r2, [r4, #20]
 800d456:	9205      	str	r2, [sp, #20]
 800d458:	f00b 0203 	and.w	r2, fp, #3
 800d45c:	f3cb 0085 	ubfx	r0, fp, #2, #6
 800d460:	2b05      	cmp	r3, #5
 800d462:	d145      	bne.n	800d4f0 <dwt_ioctl+0x16c0>
 800d464:	f5b7 7fb1 	cmp.w	r7, #354	; 0x162
 800d468:	bf28      	it	cs
 800d46a:	f44f 77b1 	movcs.w	r7, #354	; 0x162
 800d46e:	f8df 9338 	ldr.w	r9, [pc, #824]	; 800d7a8 <dwt_ioctl+0x1978>
 800d472:	2f04      	cmp	r7, #4
 800d474:	d805      	bhi.n	800d482 <dwt_ioctl+0x1652>
 800d476:	eb09 0300 	add.w	r3, r9, r0
 800d47a:	785b      	ldrb	r3, [r3, #1]
 800d47c:	3b05      	subs	r3, #5
 800d47e:	429f      	cmp	r7, r3
 800d480:	db3e      	blt.n	800d500 <dwt_ioctl+0x16d0>
 800d482:	2a01      	cmp	r2, #1
 800d484:	d87c      	bhi.n	800d580 <dwt_ioctl+0x1750>
 800d486:	4bc4      	ldr	r3, [pc, #784]	; (800d798 <dwt_ioctl+0x1968>)
 800d488:	5c99      	ldrb	r1, [r3, r2]
 800d48a:	463e      	mov	r6, r7
 800d48c:	42b9      	cmp	r1, r7
 800d48e:	da79      	bge.n	800d584 <dwt_ioctl+0x1754>
 800d490:	1c55      	adds	r5, r2, #1
 800d492:	fa53 f585 	uxtab	r5, r3, r5
 800d496:	2300      	movs	r3, #0
 800d498:	440b      	add	r3, r1
 800d49a:	b29b      	uxth	r3, r3
 800d49c:	3201      	adds	r2, #1
 800d49e:	b2d2      	uxtb	r2, r2
 800d4a0:	2a02      	cmp	r2, #2
 800d4a2:	d005      	beq.n	800d4b0 <dwt_ioctl+0x1680>
 800d4a4:	f815 1b01 	ldrb.w	r1, [r5], #1
 800d4a8:	eba6 0c03 	sub.w	ip, r6, r3
 800d4ac:	4561      	cmp	r1, ip
 800d4ae:	dbf3      	blt.n	800d498 <dwt_ioctl+0x1668>
 800d4b0:	429f      	cmp	r7, r3
 800d4b2:	bf08      	it	eq
 800d4b4:	9003      	streq	r0, [sp, #12]
 800d4b6:	d069      	beq.n	800d58c <dwt_ioctl+0x175c>
 800d4b8:	f107 0805 	add.w	r8, r7, #5
 800d4bc:	fa1f f888 	uxth.w	r8, r8
 800d4c0:	2580      	movs	r5, #128	; 0x80
 800d4c2:	2100      	movs	r1, #0
 800d4c4:	9107      	str	r1, [sp, #28]
 800d4c6:	9103      	str	r1, [sp, #12]
 800d4c8:	9108      	str	r1, [sp, #32]
 800d4ca:	460e      	mov	r6, r1
 800d4cc:	2105      	movs	r1, #5
 800d4ce:	46be      	mov	lr, r7
 800d4d0:	428f      	cmp	r7, r1
 800d4d2:	bf38      	it	cc
 800d4d4:	468e      	movcc	lr, r1
 800d4d6:	f1ae 0e05 	sub.w	lr, lr, #5
 800d4da:	fa1f fe8e 	uxth.w	lr, lr
 800d4de:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 800d798 <dwt_ioctl+0x1968>
 800d4e2:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800d4e6:	468b      	mov	fp, r1
 800d4e8:	46bc      	mov	ip, r7
 800d4ea:	4637      	mov	r7, r6
 800d4ec:	f000 bcec 	b.w	800dec8 <dwt_ioctl+0x2098>
 800d4f0:	f240 1331 	movw	r3, #305	; 0x131
 800d4f4:	429f      	cmp	r7, r3
 800d4f6:	bf28      	it	cs
 800d4f8:	461f      	movcs	r7, r3
 800d4fa:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 800d7ac <dwt_ioctl+0x197c>
 800d4fe:	e7b8      	b.n	800d472 <dwt_ioctl+0x1642>
 800d500:	2300      	movs	r3, #0
 800d502:	9a05      	ldr	r2, [sp, #20]
 800d504:	8013      	strh	r3, [r2, #0]
 800d506:	9a04      	ldr	r2, [sp, #16]
 800d508:	f8c2 b000 	str.w	fp, [r2]
 800d50c:	e04d      	b.n	800d5aa <dwt_ioctl+0x177a>
 800d50e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800d512:	2300      	movs	r3, #0
 800d514:	9a05      	ldr	r2, [sp, #20]
 800d516:	8013      	strh	r3, [r2, #0]
 800d518:	9b04      	ldr	r3, [sp, #16]
 800d51a:	f8c3 b000 	str.w	fp, [r3]
 800d51e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d522:	e042      	b.n	800d5aa <dwt_ioctl+0x177a>
 800d524:	fa1f fb81 	uxth.w	fp, r1
 800d528:	9207      	str	r2, [sp, #28]
 800d52a:	9003      	str	r0, [sp, #12]
 800d52c:	9308      	str	r3, [sp, #32]
 800d52e:	2701      	movs	r7, #1
 800d530:	f000 bcdb 	b.w	800deea <dwt_ioctl+0x20ba>
 800d534:	2f00      	cmp	r7, #0
 800d536:	f040 849b 	bne.w	800de70 <dwt_ioctl+0x2040>
 800d53a:	4598      	cmp	r8, r3
 800d53c:	f200 84b0 	bhi.w	800dea0 <dwt_ioctl+0x2070>
 800d540:	2e00      	cmp	r6, #0
 800d542:	d039      	beq.n	800d5b8 <dwt_ioctl+0x1788>
 800d544:	283f      	cmp	r0, #63	; 0x3f
 800d546:	f000 84d5 	beq.w	800def4 <dwt_ioctl+0x20c4>
 800d54a:	2700      	movs	r7, #0
 800d54c:	f819 1000 	ldrb.w	r1, [r9, r0]
 800d550:	1a5b      	subs	r3, r3, r1
 800d552:	b29b      	uxth	r3, r3
 800d554:	1e46      	subs	r6, r0, #1
 800d556:	f006 003f 	and.w	r0, r6, #63	; 0x3f
 800d55a:	f016 063f 	ands.w	r6, r6, #63	; 0x3f
 800d55e:	bf18      	it	ne
 800d560:	2601      	movne	r6, #1
 800d562:	f000 bca9 	b.w	800deb8 <dwt_ioctl+0x2088>
 800d566:	9906      	ldr	r1, [sp, #24]
 800d568:	2909      	cmp	r1, #9
 800d56a:	f040 84c9 	bne.w	800df00 <dwt_ioctl+0x20d0>
 800d56e:	213f      	movs	r1, #63	; 0x3f
 800d570:	9103      	str	r1, [sp, #12]
 800d572:	e00b      	b.n	800d58c <dwt_ioctl+0x175c>
 800d574:	b2b3      	uxth	r3, r6
 800d576:	3201      	adds	r2, #1
 800d578:	b2d2      	uxtb	r2, r2
 800d57a:	213f      	movs	r1, #63	; 0x3f
 800d57c:	9103      	str	r1, [sp, #12]
 800d57e:	e005      	b.n	800d58c <dwt_ioctl+0x175c>
 800d580:	2300      	movs	r3, #0
 800d582:	e795      	b.n	800d4b0 <dwt_ioctl+0x1680>
 800d584:	2300      	movs	r3, #0
 800d586:	e793      	b.n	800d4b0 <dwt_ioctl+0x1680>
 800d588:	9003      	str	r0, [sp, #12]
 800d58a:	4663      	mov	r3, ip
 800d58c:	9905      	ldr	r1, [sp, #20]
 800d58e:	800b      	strh	r3, [r1, #0]
 800d590:	9b03      	ldr	r3, [sp, #12]
 800d592:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
 800d596:	b2d2      	uxtb	r2, r2
 800d598:	0413      	lsls	r3, r2, #16
 800d59a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d59e:	4313      	orrs	r3, r2
 800d5a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d5a4:	9a04      	ldr	r2, [sp, #16]
 800d5a6:	6013      	str	r3, [r2, #0]
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	6023      	str	r3, [r4, #0]
 800d5ac:	2500      	movs	r5, #0
 800d5ae:	f7fe bce9 	b.w	800bf84 <dwt_ioctl+0x154>
 800d5b2:	9a07      	ldr	r2, [sp, #28]
 800d5b4:	9b08      	ldr	r3, [sp, #32]
 800d5b6:	e7e9      	b.n	800d58c <dwt_ioctl+0x175c>
 800d5b8:	9003      	str	r0, [sp, #12]
 800d5ba:	e7e7      	b.n	800d58c <dwt_ioctl+0x175c>
 800d5bc:	9a07      	ldr	r2, [sp, #28]
 800d5be:	9b08      	ldr	r3, [sp, #32]
 800d5c0:	e7e4      	b.n	800d58c <dwt_ioctl+0x175c>
 800d5c2:	213f      	movs	r1, #63	; 0x3f
 800d5c4:	9103      	str	r1, [sp, #12]
 800d5c6:	e7e1      	b.n	800d58c <dwt_ioctl+0x175c>
 800d5c8:	2c00      	cmp	r4, #0
 800d5ca:	f000 8409 	beq.w	800dde0 <dwt_ioctl+0x1fb0>
 800d5ce:	7827      	ldrb	r7, [r4, #0]
 800d5d0:	7864      	ldrb	r4, [r4, #1]
 800d5d2:	f7f3 ffa9 	bl	8001528 <decamutexon>
 800d5d6:	4605      	mov	r5, r0
 800d5d8:	2c02      	cmp	r4, #2
 800d5da:	d00e      	beq.n	800d5fa <dwt_ioctl+0x17ca>
 800d5dc:	2c04      	cmp	r4, #4
 800d5de:	d00c      	beq.n	800d5fa <dwt_ioctl+0x17ca>
 800d5e0:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
 800d5e4:	2c01      	cmp	r4, #1
 800d5e6:	d01a      	beq.n	800d61e <dwt_ioctl+0x17ee>
 800d5e8:	43fb      	mvns	r3, r7
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	9200      	str	r2, [sp, #0]
 800d5ee:	b2db      	uxtb	r3, r3
 800d5f0:	496a      	ldr	r1, [pc, #424]	; (800d79c <dwt_ioctl+0x196c>)
 800d5f2:	4630      	mov	r0, r6
 800d5f4:	f7fd fd76 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800d5f8:	e005      	b.n	800d606 <dwt_ioctl+0x17d6>
 800d5fa:	463b      	mov	r3, r7
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	4967      	ldr	r1, [pc, #412]	; (800d79c <dwt_ioctl+0x196c>)
 800d600:	4630      	mov	r0, r6
 800d602:	f7fd f939 	bl	800a878 <dwt_write8bitoffsetreg>
 800d606:	463b      	mov	r3, r7
 800d608:	2200      	movs	r2, #0
 800d60a:	4965      	ldr	r1, [pc, #404]	; (800d7a0 <dwt_ioctl+0x1970>)
 800d60c:	4630      	mov	r0, r6
 800d60e:	f7fc ffa5 	bl	800a55c <dwt_write32bitoffsetreg>
 800d612:	4628      	mov	r0, r5
 800d614:	f7f3 ff99 	bl	800154a <decamutexoff>
 800d618:	2500      	movs	r5, #0
 800d61a:	f7fe bcb3 	b.w	800bf84 <dwt_ioctl+0x154>
 800d61e:	9700      	str	r7, [sp, #0]
 800d620:	23ff      	movs	r3, #255	; 0xff
 800d622:	2200      	movs	r2, #0
 800d624:	495d      	ldr	r1, [pc, #372]	; (800d79c <dwt_ioctl+0x196c>)
 800d626:	4630      	mov	r0, r6
 800d628:	f7fd fd5c 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800d62c:	e7eb      	b.n	800d606 <dwt_ioctl+0x17d6>
 800d62e:	2302      	movs	r3, #2
 800d630:	9301      	str	r3, [sp, #4]
 800d632:	2500      	movs	r5, #0
 800d634:	9500      	str	r5, [sp, #0]
 800d636:	462b      	mov	r3, r5
 800d638:	462a      	mov	r2, r5
 800d63a:	211a      	movs	r1, #26
 800d63c:	f7fc fa91 	bl	8009b62 <dwt_xfer3xxx>
 800d640:	f7fe bca0 	b.w	800bf84 <dwt_ioctl+0x154>
 800d644:	f7fe fbe0 	bl	800be08 <ull_softreset_fcmd>
 800d648:	2500      	movs	r5, #0
 800d64a:	f7fe bc9b 	b.w	800bf84 <dwt_ioctl+0x154>
 800d64e:	f7fe fbc7 	bl	800bde0 <ull_softreset_no_sema_fcmd>
 800d652:	2500      	movs	r5, #0
 800d654:	f7fe bc96 	b.w	800bf84 <dwt_ioctl+0x154>
 800d658:	2302      	movs	r3, #2
 800d65a:	9301      	str	r3, [sp, #4]
 800d65c:	2500      	movs	r5, #0
 800d65e:	9500      	str	r5, [sp, #0]
 800d660:	462b      	mov	r3, r5
 800d662:	462a      	mov	r2, r5
 800d664:	2114      	movs	r1, #20
 800d666:	f7fc fa7c 	bl	8009b62 <dwt_xfer3xxx>
 800d66a:	f7fe bc8b 	b.w	800bf84 <dwt_ioctl+0x154>
 800d66e:	2402      	movs	r4, #2
 800d670:	9401      	str	r4, [sp, #4]
 800d672:	2500      	movs	r5, #0
 800d674:	9500      	str	r5, [sp, #0]
 800d676:	462b      	mov	r3, r5
 800d678:	462a      	mov	r2, r5
 800d67a:	2115      	movs	r1, #21
 800d67c:	f7fc fa71 	bl	8009b62 <dwt_xfer3xxx>
 800d680:	9401      	str	r4, [sp, #4]
 800d682:	9500      	str	r5, [sp, #0]
 800d684:	462b      	mov	r3, r5
 800d686:	462a      	mov	r2, r5
 800d688:	2115      	movs	r1, #21
 800d68a:	4630      	mov	r0, r6
 800d68c:	f7fc fa69 	bl	8009b62 <dwt_xfer3xxx>
 800d690:	f7fe bc78 	b.w	800bf84 <dwt_ioctl+0x154>
 800d694:	2302      	movs	r3, #2
 800d696:	9301      	str	r3, [sp, #4]
 800d698:	2500      	movs	r5, #0
 800d69a:	9500      	str	r5, [sp, #0]
 800d69c:	462b      	mov	r3, r5
 800d69e:	462a      	mov	r2, r5
 800d6a0:	2116      	movs	r1, #22
 800d6a2:	f7fc fa5e 	bl	8009b62 <dwt_xfer3xxx>
 800d6a6:	f7fe bc6d 	b.w	800bf84 <dwt_ioctl+0x154>
 800d6aa:	2c00      	cmp	r4, #0
 800d6ac:	f000 839b 	beq.w	800dde6 <dwt_ioctl+0x1fb6>
 800d6b0:	b93a      	cbnz	r2, 800d6c2 <dwt_ioctl+0x1892>
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800d6b8:	f7fc fb03 	bl	8009cc2 <dwt_read8bitoffsetreg>
 800d6bc:	7020      	strb	r0, [r4, #0]
 800d6be:	f7fe bc61 	b.w	800bf84 <dwt_ioctl+0x154>
 800d6c2:	2201      	movs	r2, #1
 800d6c4:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800d6c8:	f7fc fafb 	bl	8009cc2 <dwt_read8bitoffsetreg>
 800d6cc:	7020      	strb	r0, [r4, #0]
 800d6ce:	2500      	movs	r5, #0
 800d6d0:	f7fe bc58 	b.w	800bf84 <dwt_ioctl+0x154>
 800d6d4:	2c00      	cmp	r4, #0
 800d6d6:	f000 8389 	beq.w	800ddec <dwt_ioctl+0x1fbc>
 800d6da:	7824      	ldrb	r4, [r4, #0]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800d6e2:	f7fc faee 	bl	8009cc2 <dwt_read8bitoffsetreg>
 800d6e6:	f000 039f 	and.w	r3, r0, #159	; 0x9f
 800d6ea:	4323      	orrs	r3, r4
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800d6f2:	4630      	mov	r0, r6
 800d6f4:	f7fd f8c0 	bl	800a878 <dwt_write8bitoffsetreg>
 800d6f8:	2500      	movs	r5, #0
 800d6fa:	f7fe bc43 	b.w	800bf84 <dwt_ioctl+0x154>
 800d6fe:	2c00      	cmp	r4, #0
 800d700:	f000 8377 	beq.w	800ddf2 <dwt_ioctl+0x1fc2>
 800d704:	7824      	ldrb	r4, [r4, #0]
 800d706:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
 800d70a:	d01e      	beq.n	800d74a <dwt_ioctl+0x191a>
 800d70c:	2d01      	cmp	r5, #1
 800d70e:	f040 8373 	bne.w	800ddf8 <dwt_ioctl+0x1fc8>
 800d712:	2502      	movs	r5, #2
 800d714:	2201      	movs	r2, #1
 800d716:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800d71a:	4630      	mov	r0, r6
 800d71c:	f7fc fad1 	bl	8009cc2 <dwt_read8bitoffsetreg>
 800d720:	b9ac      	cbnz	r4, 800d74e <dwt_ioctl+0x191e>
 800d722:	ea20 0305 	bic.w	r3, r0, r5
 800d726:	b2db      	uxtb	r3, r3
 800d728:	2201      	movs	r2, #1
 800d72a:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800d72e:	4630      	mov	r0, r6
 800d730:	f7fd f8a2 	bl	800a878 <dwt_write8bitoffsetreg>
 800d734:	2200      	movs	r2, #0
 800d736:	2110      	movs	r1, #16
 800d738:	4630      	mov	r0, r6
 800d73a:	f7fc fa9a 	bl	8009c72 <dwt_read32bitoffsetreg>
 800d73e:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800d742:	d00b      	beq.n	800d75c <dwt_ioctl+0x192c>
 800d744:	2500      	movs	r5, #0
 800d746:	f7fe bc1d 	b.w	800bf84 <dwt_ioctl+0x154>
 800d74a:	2504      	movs	r5, #4
 800d74c:	e7e2      	b.n	800d714 <dwt_ioctl+0x18e4>
 800d74e:	2c01      	cmp	r4, #1
 800d750:	f040 8356 	bne.w	800de00 <dwt_ioctl+0x1fd0>
 800d754:	ea40 0305 	orr.w	r3, r0, r5
 800d758:	b2db      	uxtb	r3, r3
 800d75a:	e7e5      	b.n	800d728 <dwt_ioctl+0x18f8>
 800d75c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d760:	9300      	str	r3, [sp, #0]
 800d762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d766:	2200      	movs	r2, #0
 800d768:	2110      	movs	r1, #16
 800d76a:	4630      	mov	r0, r6
 800d76c:	f7fd fb48 	bl	800ae00 <dwt_modify32bitoffsetreg>
 800d770:	2500      	movs	r5, #0
 800d772:	f7fe bc07 	b.w	800bf84 <dwt_ioctl+0x154>
 800d776:	2c00      	cmp	r4, #0
 800d778:	f000 8346 	beq.w	800de08 <dwt_ioctl+0x1fd8>
 800d77c:	7823      	ldrb	r3, [r4, #0]
 800d77e:	035b      	lsls	r3, r3, #13
 800d780:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d784:	9300      	str	r3, [sp, #0]
 800d786:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800d78a:	2200      	movs	r2, #0
 800d78c:	4905      	ldr	r1, [pc, #20]	; (800d7a4 <dwt_ioctl+0x1974>)
 800d78e:	f7fd fec5 	bl	800b51c <dwt_modify16bitoffsetreg>
 800d792:	2500      	movs	r5, #0
 800d794:	f7fe bbf6 	b.w	800bf84 <dwt_ioctl+0x154>
 800d798:	08016348 	.word	0x08016348
 800d79c:	0001001c 	.word	0x0001001c
 800d7a0:	00010018 	.word	0x00010018
 800d7a4:	000e000c 	.word	0x000e000c
 800d7a8:	080162c8 	.word	0x080162c8
 800d7ac:	08016308 	.word	0x08016308
 800d7b0:	2c00      	cmp	r4, #0
 800d7b2:	f000 832c 	beq.w	800de0e <dwt_ioctl+0x1fde>
 800d7b6:	7825      	ldrb	r5, [r4, #0]
 800d7b8:	6862      	ldr	r2, [r4, #4]
 800d7ba:	2a01      	cmp	r2, #1
 800d7bc:	bf15      	itete	ne
 800d7be:	f46f 3360 	mvnne.w	r3, #229376	; 0x38000
 800d7c2:	f46f 43e0 	mvneq.w	r3, #28672	; 0x7000
 800d7c6:	27df      	movne	r7, #223	; 0xdf
 800d7c8:	27ef      	moveq	r7, #239	; 0xef
 800d7ca:	bf14      	ite	ne
 800d7cc:	f04f 0820 	movne.w	r8, #32
 800d7d0:	f04f 0810 	moveq.w	r8, #16
 800d7d4:	2400      	movs	r4, #0
 800d7d6:	9400      	str	r4, [sp, #0]
 800d7d8:	4622      	mov	r2, r4
 800d7da:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800d7de:	f7fd fb0f 	bl	800ae00 <dwt_modify32bitoffsetreg>
 800d7e2:	9400      	str	r4, [sp, #0]
 800d7e4:	463b      	mov	r3, r7
 800d7e6:	4622      	mov	r2, r4
 800d7e8:	49be      	ldr	r1, [pc, #760]	; (800dae4 <dwt_ioctl+0x1cb4>)
 800d7ea:	4630      	mov	r0, r6
 800d7ec:	f7fd fc7a 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800d7f0:	2d01      	cmp	r5, #1
 800d7f2:	d003      	beq.n	800d7fc <dwt_ioctl+0x19cc>
 800d7f4:	b165      	cbz	r5, 800d810 <dwt_ioctl+0x19e0>
 800d7f6:	2500      	movs	r5, #0
 800d7f8:	f7fe bbc4 	b.w	800bf84 <dwt_ioctl+0x154>
 800d7fc:	4625      	mov	r5, r4
 800d7fe:	9400      	str	r4, [sp, #0]
 800d800:	463b      	mov	r3, r7
 800d802:	4622      	mov	r2, r4
 800d804:	49b8      	ldr	r1, [pc, #736]	; (800dae8 <dwt_ioctl+0x1cb8>)
 800d806:	4630      	mov	r0, r6
 800d808:	f7fd fc6c 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800d80c:	f7fe bbba 	b.w	800bf84 <dwt_ioctl+0x154>
 800d810:	f8cd 8000 	str.w	r8, [sp]
 800d814:	23ff      	movs	r3, #255	; 0xff
 800d816:	2200      	movs	r2, #0
 800d818:	49b3      	ldr	r1, [pc, #716]	; (800dae8 <dwt_ioctl+0x1cb8>)
 800d81a:	4630      	mov	r0, r6
 800d81c:	f7fd fc62 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800d820:	f7fe bbb0 	b.w	800bf84 <dwt_ioctl+0x154>
 800d824:	2c00      	cmp	r4, #0
 800d826:	f000 82f5 	beq.w	800de14 <dwt_ioctl+0x1fe4>
 800d82a:	7822      	ldrb	r2, [r4, #0]
 800d82c:	f012 0f01 	tst.w	r2, #1
 800d830:	d02d      	beq.n	800d88e <dwt_ioctl+0x1a5e>
 800d832:	0157      	lsls	r7, r2, #5
 800d834:	f007 0740 	and.w	r7, r7, #64	; 0x40
 800d838:	2440      	movs	r4, #64	; 0x40
 800d83a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800d83e:	f012 0f04 	tst.w	r2, #4
 800d842:	d028      	beq.n	800d896 <dwt_ioctl+0x1a66>
 800d844:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 800d848:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800d84c:	0112      	lsls	r2, r2, #4
 800d84e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800d852:	4317      	orrs	r7, r2
 800d854:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d858:	9200      	str	r2, [sp, #0]
 800d85a:	43db      	mvns	r3, r3
 800d85c:	2200      	movs	r2, #0
 800d85e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800d862:	4630      	mov	r0, r6
 800d864:	f7fd facc 	bl	800ae00 <dwt_modify32bitoffsetreg>
 800d868:	43e4      	mvns	r4, r4
 800d86a:	b2a4      	uxth	r4, r4
 800d86c:	2500      	movs	r5, #0
 800d86e:	9500      	str	r5, [sp, #0]
 800d870:	4623      	mov	r3, r4
 800d872:	462a      	mov	r2, r5
 800d874:	499b      	ldr	r1, [pc, #620]	; (800dae4 <dwt_ioctl+0x1cb4>)
 800d876:	4630      	mov	r0, r6
 800d878:	f7fd fe50 	bl	800b51c <dwt_modify16bitoffsetreg>
 800d87c:	9700      	str	r7, [sp, #0]
 800d87e:	4623      	mov	r3, r4
 800d880:	462a      	mov	r2, r5
 800d882:	4999      	ldr	r1, [pc, #612]	; (800dae8 <dwt_ioctl+0x1cb8>)
 800d884:	4630      	mov	r0, r6
 800d886:	f7fd fe49 	bl	800b51c <dwt_modify16bitoffsetreg>
 800d88a:	f7fe bb7b 	b.w	800bf84 <dwt_ioctl+0x154>
 800d88e:	2700      	movs	r7, #0
 800d890:	463c      	mov	r4, r7
 800d892:	463b      	mov	r3, r7
 800d894:	e7d3      	b.n	800d83e <dwt_ioctl+0x1a0e>
 800d896:	2200      	movs	r2, #0
 800d898:	e7de      	b.n	800d858 <dwt_ioctl+0x1a28>
 800d89a:	2308      	movs	r3, #8
 800d89c:	9300      	str	r3, [sp, #0]
 800d89e:	23ff      	movs	r3, #255	; 0xff
 800d8a0:	2201      	movs	r2, #1
 800d8a2:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800d8a6:	f7fd fc1d 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800d8aa:	4c90      	ldr	r4, [pc, #576]	; (800daec <dwt_ioctl+0x1cbc>)
 800d8ac:	2302      	movs	r3, #2
 800d8ae:	9300      	str	r3, [sp, #0]
 800d8b0:	23ff      	movs	r3, #255	; 0xff
 800d8b2:	2203      	movs	r2, #3
 800d8b4:	4621      	mov	r1, r4
 800d8b6:	4630      	mov	r0, r6
 800d8b8:	f7fd fc14 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800d8bc:	2500      	movs	r5, #0
 800d8be:	9500      	str	r5, [sp, #0]
 800d8c0:	23f7      	movs	r3, #247	; 0xf7
 800d8c2:	2201      	movs	r2, #1
 800d8c4:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800d8c8:	4630      	mov	r0, r6
 800d8ca:	f7fd fc0b 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800d8ce:	9500      	str	r5, [sp, #0]
 800d8d0:	23fd      	movs	r3, #253	; 0xfd
 800d8d2:	2203      	movs	r2, #3
 800d8d4:	4621      	mov	r1, r4
 800d8d6:	4630      	mov	r0, r6
 800d8d8:	f7fd fc04 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800d8dc:	f7fe bb52 	b.w	800bf84 <dwt_ioctl+0x154>
 800d8e0:	2c00      	cmp	r4, #0
 800d8e2:	f000 829a 	beq.w	800de1a <dwt_ioctl+0x1fea>
 800d8e6:	8863      	ldrh	r3, [r4, #2]
 800d8e8:	00db      	lsls	r3, r3, #3
 800d8ea:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800d8ee:	7822      	ldrb	r2, [r4, #0]
 800d8f0:	b10a      	cbz	r2, 800d8f6 <dwt_ioctl+0x1ac6>
 800d8f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d8f6:	9300      	str	r3, [sp, #0]
 800d8f8:	f24f 0307 	movw	r3, #61447	; 0xf007
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800d902:	4630      	mov	r0, r6
 800d904:	f7fd fe0a 	bl	800b51c <dwt_modify16bitoffsetreg>
 800d908:	2500      	movs	r5, #0
 800d90a:	f7fe bb3b 	b.w	800bf84 <dwt_ioctl+0x154>
 800d90e:	2c00      	cmp	r4, #0
 800d910:	f000 8286 	beq.w	800de20 <dwt_ioctl+0x1ff0>
 800d914:	b2e3      	uxtb	r3, r4
 800d916:	1c9a      	adds	r2, r3, #2
 800d918:	2301      	movs	r3, #1
 800d91a:	4093      	lsls	r3, r2
 800d91c:	3b01      	subs	r3, #1
 800d91e:	b2db      	uxtb	r3, r3
 800d920:	2200      	movs	r2, #0
 800d922:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800d926:	f7fc ffa7 	bl	800a878 <dwt_write8bitoffsetreg>
 800d92a:	2500      	movs	r5, #0
 800d92c:	f7fe bb2a 	b.w	800bf84 <dwt_ioctl+0x154>
 800d930:	2c00      	cmp	r4, #0
 800d932:	f000 8278 	beq.w	800de26 <dwt_ioctl+0x1ff6>
 800d936:	7ae3      	ldrb	r3, [r4, #11]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	f000 8277 	beq.w	800de2c <dwt_ioctl+0x1ffc>
 800d93e:	7b63      	ldrb	r3, [r4, #13]
 800d940:	2b01      	cmp	r3, #1
 800d942:	d921      	bls.n	800d988 <dwt_ioctl+0x1b58>
 800d944:	7b22      	ldrb	r2, [r4, #12]
 800d946:	4b6a      	ldr	r3, [pc, #424]	; (800daf0 <dwt_ioctl+0x1cc0>)
 800d948:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800d94c:	0112      	lsls	r2, r2, #4
 800d94e:	0ad3      	lsrs	r3, r2, #11
 800d950:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800d954:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d958:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800d95c:	bf28      	it	cs
 800d95e:	3301      	addcs	r3, #1
 800d960:	b29b      	uxth	r3, r3
 800d962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d966:	9300      	str	r3, [sp, #0]
 800d968:	f64f 7380 	movw	r3, #65408	; 0xff80
 800d96c:	2202      	movs	r2, #2
 800d96e:	4961      	ldr	r1, [pc, #388]	; (800daf4 <dwt_ioctl+0x1cc4>)
 800d970:	4630      	mov	r0, r6
 800d972:	f7fd fdd3 	bl	800b51c <dwt_modify16bitoffsetreg>
 800d976:	2394      	movs	r3, #148	; 0x94
 800d978:	2200      	movs	r2, #0
 800d97a:	495f      	ldr	r1, [pc, #380]	; (800daf8 <dwt_ioctl+0x1cc8>)
 800d97c:	4630      	mov	r0, r6
 800d97e:	f7fc ff7b 	bl	800a878 <dwt_write8bitoffsetreg>
 800d982:	2500      	movs	r5, #0
 800d984:	f7fe bafe 	b.w	800bf84 <dwt_ioctl+0x154>
 800d988:	7b22      	ldrb	r2, [r4, #12]
 800d98a:	4b59      	ldr	r3, [pc, #356]	; (800daf0 <dwt_ioctl+0x1cc0>)
 800d98c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800d990:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 800d994:	fb02 f203 	mul.w	r2, r2, r3
 800d998:	0c93      	lsrs	r3, r2, #18
 800d99a:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 800d99e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d9a2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800d9a6:	bf28      	it	cs
 800d9a8:	3301      	addcs	r3, #1
 800d9aa:	b29b      	uxth	r3, r3
 800d9ac:	e7d9      	b.n	800d962 <dwt_ioctl+0x1b32>
 800d9ae:	2c00      	cmp	r4, #0
 800d9b0:	f000 823f 	beq.w	800de32 <dwt_ioctl+0x2002>
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	4951      	ldr	r1, [pc, #324]	; (800dafc <dwt_ioctl+0x1ccc>)
 800d9b8:	f7fc f95b 	bl	8009c72 <dwt_read32bitoffsetreg>
 800d9bc:	6020      	str	r0, [r4, #0]
 800d9be:	2500      	movs	r5, #0
 800d9c0:	f7fe bae0 	b.w	800bf84 <dwt_ioctl+0x154>
 800d9c4:	2c00      	cmp	r4, #0
 800d9c6:	f000 8237 	beq.w	800de38 <dwt_ioctl+0x2008>
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	494c      	ldr	r1, [pc, #304]	; (800db00 <dwt_ioctl+0x1cd0>)
 800d9ce:	f7fc f950 	bl	8009c72 <dwt_read32bitoffsetreg>
 800d9d2:	6020      	str	r0, [r4, #0]
 800d9d4:	2500      	movs	r5, #0
 800d9d6:	f7fe bad5 	b.w	800bf84 <dwt_ioctl+0x154>
 800d9da:	2c00      	cmp	r4, #0
 800d9dc:	f000 822f 	beq.w	800de3e <dwt_ioctl+0x200e>
 800d9e0:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 800d9e4:	6023      	str	r3, [r4, #0]
 800d9e6:	2500      	movs	r5, #0
 800d9e8:	f7fe bacc 	b.w	800bf84 <dwt_ioctl+0x154>
 800d9ec:	2c00      	cmp	r4, #0
 800d9ee:	f000 8229 	beq.w	800de44 <dwt_ioctl+0x2014>
 800d9f2:	2500      	movs	r5, #0
 800d9f4:	950b      	str	r5, [sp, #44]	; 0x2c
 800d9f6:	af10      	add	r7, sp, #64	; 0x40
 800d9f8:	2319      	movs	r3, #25
 800d9fa:	f847 3d10 	str.w	r3, [r7, #-16]!
 800d9fe:	9700      	str	r7, [sp, #0]
 800da00:	2304      	movs	r3, #4
 800da02:	462a      	mov	r2, r5
 800da04:	493f      	ldr	r1, [pc, #252]	; (800db04 <dwt_ioctl+0x1cd4>)
 800da06:	f7fc fd41 	bl	800a48c <dwt_writetodevice>
 800da0a:	f641 7348 	movw	r3, #8008	; 0x1f48
 800da0e:	930c      	str	r3, [sp, #48]	; 0x30
 800da10:	9700      	str	r7, [sp, #0]
 800da12:	2304      	movs	r3, #4
 800da14:	462a      	mov	r2, r5
 800da16:	493c      	ldr	r1, [pc, #240]	; (800db08 <dwt_ioctl+0x1cd8>)
 800da18:	4630      	mov	r0, r6
 800da1a:	f7fc fd37 	bl	800a48c <dwt_writetodevice>
 800da1e:	ab0b      	add	r3, sp, #44	; 0x2c
 800da20:	9300      	str	r3, [sp, #0]
 800da22:	2304      	movs	r3, #4
 800da24:	462a      	mov	r2, r5
 800da26:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800da2a:	4630      	mov	r0, r6
 800da2c:	f7fc f917 	bl	8009c5e <dwt_readfromdevice>
 800da30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da32:	6023      	str	r3, [r4, #0]
 800da34:	f7fe baa6 	b.w	800bf84 <dwt_ioctl+0x154>
 800da38:	2c00      	cmp	r4, #0
 800da3a:	f000 8206 	beq.w	800de4a <dwt_ioctl+0x201a>
 800da3e:	2200      	movs	r2, #0
 800da40:	4932      	ldr	r1, [pc, #200]	; (800db0c <dwt_ioctl+0x1cdc>)
 800da42:	f7fc f916 	bl	8009c72 <dwt_read32bitoffsetreg>
 800da46:	b280      	uxth	r0, r0
 800da48:	6020      	str	r0, [r4, #0]
 800da4a:	2200      	movs	r2, #0
 800da4c:	4930      	ldr	r1, [pc, #192]	; (800db10 <dwt_ioctl+0x1ce0>)
 800da4e:	4630      	mov	r0, r6
 800da50:	f7fc f90f 	bl	8009c72 <dwt_read32bitoffsetreg>
 800da54:	0d43      	lsrs	r3, r0, #21
 800da56:	019b      	lsls	r3, r3, #6
 800da58:	b29b      	uxth	r3, r3
 800da5a:	6063      	str	r3, [r4, #4]
 800da5c:	2500      	movs	r5, #0
 800da5e:	f7fe ba91 	b.w	800bf84 <dwt_ioctl+0x154>
 800da62:	2c00      	cmp	r4, #0
 800da64:	f000 81f4 	beq.w	800de50 <dwt_ioctl+0x2020>
 800da68:	7d63      	ldrb	r3, [r4, #21]
 800da6a:	b133      	cbz	r3, 800da7a <dwt_ioctl+0x1c4a>
 800da6c:	2b01      	cmp	r3, #1
 800da6e:	d05b      	beq.n	800db28 <dwt_ioctl+0x1cf8>
 800da70:	2b02      	cmp	r3, #2
 800da72:	f000 8082 	beq.w	800db7a <dwt_ioctl+0x1d4a>
 800da76:	23ff      	movs	r3, #255	; 0xff
 800da78:	e02f      	b.n	800dada <dwt_ioctl+0x1caa>
 800da7a:	2200      	movs	r2, #0
 800da7c:	4925      	ldr	r1, [pc, #148]	; (800db14 <dwt_ioctl+0x1ce4>)
 800da7e:	f7fc f8f8 	bl	8009c72 <dwt_read32bitoffsetreg>
 800da82:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800da86:	6020      	str	r0, [r4, #0]
 800da88:	2200      	movs	r2, #0
 800da8a:	4923      	ldr	r1, [pc, #140]	; (800db18 <dwt_ioctl+0x1ce8>)
 800da8c:	4630      	mov	r0, r6
 800da8e:	f7fc f8f0 	bl	8009c72 <dwt_read32bitoffsetreg>
 800da92:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800da96:	6060      	str	r0, [r4, #4]
 800da98:	2200      	movs	r2, #0
 800da9a:	4920      	ldr	r1, [pc, #128]	; (800db1c <dwt_ioctl+0x1cec>)
 800da9c:	4630      	mov	r0, r6
 800da9e:	f7fc f8e8 	bl	8009c72 <dwt_read32bitoffsetreg>
 800daa2:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800daa6:	60a0      	str	r0, [r4, #8]
 800daa8:	2200      	movs	r2, #0
 800daaa:	491d      	ldr	r1, [pc, #116]	; (800db20 <dwt_ioctl+0x1cf0>)
 800daac:	4630      	mov	r0, r6
 800daae:	f7fc f8e0 	bl	8009c72 <dwt_read32bitoffsetreg>
 800dab2:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800dab6:	60e0      	str	r0, [r4, #12]
 800dab8:	2200      	movs	r2, #0
 800daba:	491a      	ldr	r1, [pc, #104]	; (800db24 <dwt_ioctl+0x1cf4>)
 800dabc:	4630      	mov	r0, r6
 800dabe:	f7fc f8d8 	bl	8009c72 <dwt_read32bitoffsetreg>
 800dac2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800dac6:	6120      	str	r0, [r4, #16]
 800dac8:	2203      	movs	r2, #3
 800daca:	490c      	ldr	r1, [pc, #48]	; (800dafc <dwt_ioctl+0x1ccc>)
 800dacc:	4630      	mov	r0, r6
 800dace:	f7fc f8f8 	bl	8009cc2 <dwt_read8bitoffsetreg>
 800dad2:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800dad6:	7520      	strb	r0, [r4, #20]
 800dad8:	2300      	movs	r3, #0
 800dada:	75a3      	strb	r3, [r4, #22]
 800dadc:	2500      	movs	r5, #0
 800dade:	f7fe ba51 	b.w	800bf84 <dwt_ioctl+0x154>
 800dae2:	bf00      	nop
 800dae4:	00050008 	.word	0x00050008
 800dae8:	0005000c 	.word	0x0005000c
 800daec:	00110008 	.word	0x00110008
 800daf0:	08016354 	.word	0x08016354
 800daf4:	000e0014 	.word	0x000e0014
 800daf8:	000e0018 	.word	0x000e0018
 800dafc:	00030060 	.word	0x00030060
 800db00:	000f004c 	.word	0x000f004c
 800db04:	001f0004 	.word	0x001f0004
 800db08:	001f0008 	.word	0x001f0008
 800db0c:	000c0048 	.word	0x000c0048
 800db10:	000c0028 	.word	0x000c0028
 800db14:	000c0058 	.word	0x000c0058
 800db18:	000c0030 	.word	0x000c0030
 800db1c:	000c0034 	.word	0x000c0034
 800db20:	000c0038 	.word	0x000c0038
 800db24:	000c002c 	.word	0x000c002c
 800db28:	2200      	movs	r2, #0
 800db2a:	49d4      	ldr	r1, [pc, #848]	; (800de7c <dwt_ioctl+0x204c>)
 800db2c:	f7fc f8a1 	bl	8009c72 <dwt_read32bitoffsetreg>
 800db30:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800db34:	6020      	str	r0, [r4, #0]
 800db36:	2200      	movs	r2, #0
 800db38:	49d1      	ldr	r1, [pc, #836]	; (800de80 <dwt_ioctl+0x2050>)
 800db3a:	4630      	mov	r0, r6
 800db3c:	f7fc f899 	bl	8009c72 <dwt_read32bitoffsetreg>
 800db40:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800db44:	6060      	str	r0, [r4, #4]
 800db46:	2200      	movs	r2, #0
 800db48:	49ce      	ldr	r1, [pc, #824]	; (800de84 <dwt_ioctl+0x2054>)
 800db4a:	4630      	mov	r0, r6
 800db4c:	f7fc f891 	bl	8009c72 <dwt_read32bitoffsetreg>
 800db50:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800db54:	60a0      	str	r0, [r4, #8]
 800db56:	2200      	movs	r2, #0
 800db58:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 800db5c:	4630      	mov	r0, r6
 800db5e:	f7fc f888 	bl	8009c72 <dwt_read32bitoffsetreg>
 800db62:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800db66:	60e0      	str	r0, [r4, #12]
 800db68:	2200      	movs	r2, #0
 800db6a:	49c7      	ldr	r1, [pc, #796]	; (800de88 <dwt_ioctl+0x2058>)
 800db6c:	4630      	mov	r0, r6
 800db6e:	f7fc f880 	bl	8009c72 <dwt_read32bitoffsetreg>
 800db72:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800db76:	6120      	str	r0, [r4, #16]
 800db78:	e7a6      	b.n	800dac8 <dwt_ioctl+0x1c98>
 800db7a:	2200      	movs	r2, #0
 800db7c:	49c3      	ldr	r1, [pc, #780]	; (800de8c <dwt_ioctl+0x205c>)
 800db7e:	f7fc f878 	bl	8009c72 <dwt_read32bitoffsetreg>
 800db82:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800db86:	6020      	str	r0, [r4, #0]
 800db88:	2200      	movs	r2, #0
 800db8a:	49c1      	ldr	r1, [pc, #772]	; (800de90 <dwt_ioctl+0x2060>)
 800db8c:	4630      	mov	r0, r6
 800db8e:	f7fc f870 	bl	8009c72 <dwt_read32bitoffsetreg>
 800db92:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800db96:	6060      	str	r0, [r4, #4]
 800db98:	2200      	movs	r2, #0
 800db9a:	49be      	ldr	r1, [pc, #760]	; (800de94 <dwt_ioctl+0x2064>)
 800db9c:	4630      	mov	r0, r6
 800db9e:	f7fc f868 	bl	8009c72 <dwt_read32bitoffsetreg>
 800dba2:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800dba6:	60a0      	str	r0, [r4, #8]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	49bb      	ldr	r1, [pc, #748]	; (800de98 <dwt_ioctl+0x2068>)
 800dbac:	4630      	mov	r0, r6
 800dbae:	f7fc f860 	bl	8009c72 <dwt_read32bitoffsetreg>
 800dbb2:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800dbb6:	60e0      	str	r0, [r4, #12]
 800dbb8:	2200      	movs	r2, #0
 800dbba:	49b8      	ldr	r1, [pc, #736]	; (800de9c <dwt_ioctl+0x206c>)
 800dbbc:	4630      	mov	r0, r6
 800dbbe:	f7fc f858 	bl	8009c72 <dwt_read32bitoffsetreg>
 800dbc2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800dbc6:	6120      	str	r0, [r4, #16]
 800dbc8:	e77e      	b.n	800dac8 <dwt_ioctl+0x1c98>
 800dbca:	2500      	movs	r5, #0
 800dbcc:	f7fe b9da 	b.w	800bf84 <dwt_ioctl+0x154>
 800dbd0:	2500      	movs	r5, #0
 800dbd2:	f7fe b9d7 	b.w	800bf84 <dwt_ioctl+0x154>
 800dbd6:	2500      	movs	r5, #0
 800dbd8:	f7fe b9d4 	b.w	800bf84 <dwt_ioctl+0x154>
 800dbdc:	2500      	movs	r5, #0
 800dbde:	f7fe b9d1 	b.w	800bf84 <dwt_ioctl+0x154>
 800dbe2:	2500      	movs	r5, #0
 800dbe4:	f7fe b9ce 	b.w	800bf84 <dwt_ioctl+0x154>
 800dbe8:	2500      	movs	r5, #0
 800dbea:	f7fe b9cb 	b.w	800bf84 <dwt_ioctl+0x154>
 800dbee:	2500      	movs	r5, #0
 800dbf0:	f7fe b9c8 	b.w	800bf84 <dwt_ioctl+0x154>
 800dbf4:	2500      	movs	r5, #0
 800dbf6:	f7fe b9c5 	b.w	800bf84 <dwt_ioctl+0x154>
 800dbfa:	2500      	movs	r5, #0
 800dbfc:	f7fe b9c2 	b.w	800bf84 <dwt_ioctl+0x154>
 800dc00:	2500      	movs	r5, #0
 800dc02:	f7fe b9bf 	b.w	800bf84 <dwt_ioctl+0x154>
 800dc06:	2500      	movs	r5, #0
 800dc08:	f7fe b9bc 	b.w	800bf84 <dwt_ioctl+0x154>
 800dc0c:	2500      	movs	r5, #0
 800dc0e:	f7fe b9b9 	b.w	800bf84 <dwt_ioctl+0x154>
 800dc12:	2500      	movs	r5, #0
 800dc14:	f7fe b9b6 	b.w	800bf84 <dwt_ioctl+0x154>
 800dc18:	2500      	movs	r5, #0
 800dc1a:	f7fe b9b3 	b.w	800bf84 <dwt_ioctl+0x154>
 800dc1e:	2500      	movs	r5, #0
 800dc20:	f7fe b9b0 	b.w	800bf84 <dwt_ioctl+0x154>
 800dc24:	2500      	movs	r5, #0
 800dc26:	f7fe b9ad 	b.w	800bf84 <dwt_ioctl+0x154>
 800dc2a:	2500      	movs	r5, #0
 800dc2c:	f7fe b9aa 	b.w	800bf84 <dwt_ioctl+0x154>
 800dc30:	2500      	movs	r5, #0
 800dc32:	f7fe b9a7 	b.w	800bf84 <dwt_ioctl+0x154>
 800dc36:	2500      	movs	r5, #0
 800dc38:	f7fe b9a4 	b.w	800bf84 <dwt_ioctl+0x154>
 800dc3c:	2500      	movs	r5, #0
 800dc3e:	f7fe b9a1 	b.w	800bf84 <dwt_ioctl+0x154>
 800dc42:	2500      	movs	r5, #0
 800dc44:	f7fe b99e 	b.w	800bf84 <dwt_ioctl+0x154>
 800dc48:	2500      	movs	r5, #0
 800dc4a:	f7fe b99b 	b.w	800bf84 <dwt_ioctl+0x154>
 800dc4e:	2500      	movs	r5, #0
 800dc50:	f7fe b998 	b.w	800bf84 <dwt_ioctl+0x154>
 800dc54:	2500      	movs	r5, #0
 800dc56:	f7fe b995 	b.w	800bf84 <dwt_ioctl+0x154>
 800dc5a:	2500      	movs	r5, #0
 800dc5c:	f7fe b992 	b.w	800bf84 <dwt_ioctl+0x154>
 800dc60:	2500      	movs	r5, #0
 800dc62:	f7fe b98f 	b.w	800bf84 <dwt_ioctl+0x154>
 800dc66:	2500      	movs	r5, #0
 800dc68:	f7fe b98c 	b.w	800bf84 <dwt_ioctl+0x154>
 800dc6c:	2500      	movs	r5, #0
 800dc6e:	f7fe b989 	b.w	800bf84 <dwt_ioctl+0x154>
 800dc72:	2500      	movs	r5, #0
 800dc74:	f7fe b986 	b.w	800bf84 <dwt_ioctl+0x154>
 800dc78:	2500      	movs	r5, #0
 800dc7a:	f7fe b983 	b.w	800bf84 <dwt_ioctl+0x154>
 800dc7e:	2500      	movs	r5, #0
 800dc80:	f7fe b980 	b.w	800bf84 <dwt_ioctl+0x154>
 800dc84:	2500      	movs	r5, #0
 800dc86:	f7fe b97d 	b.w	800bf84 <dwt_ioctl+0x154>
 800dc8a:	2500      	movs	r5, #0
 800dc8c:	f7fe b97a 	b.w	800bf84 <dwt_ioctl+0x154>
 800dc90:	2500      	movs	r5, #0
 800dc92:	f7fe b977 	b.w	800bf84 <dwt_ioctl+0x154>
 800dc96:	2500      	movs	r5, #0
 800dc98:	f7fe b974 	b.w	800bf84 <dwt_ioctl+0x154>
 800dc9c:	2500      	movs	r5, #0
 800dc9e:	f7fe b971 	b.w	800bf84 <dwt_ioctl+0x154>
 800dca2:	2500      	movs	r5, #0
 800dca4:	f7fe b96e 	b.w	800bf84 <dwt_ioctl+0x154>
 800dca8:	2500      	movs	r5, #0
 800dcaa:	f7fe b96b 	b.w	800bf84 <dwt_ioctl+0x154>
 800dcae:	2500      	movs	r5, #0
 800dcb0:	f7fe b968 	b.w	800bf84 <dwt_ioctl+0x154>
 800dcb4:	2500      	movs	r5, #0
 800dcb6:	f7fe b965 	b.w	800bf84 <dwt_ioctl+0x154>
 800dcba:	2500      	movs	r5, #0
 800dcbc:	f7fe b962 	b.w	800bf84 <dwt_ioctl+0x154>
 800dcc0:	2500      	movs	r5, #0
 800dcc2:	f7fe b95f 	b.w	800bf84 <dwt_ioctl+0x154>
 800dcc6:	2500      	movs	r5, #0
 800dcc8:	f7fe b95c 	b.w	800bf84 <dwt_ioctl+0x154>
 800dccc:	2500      	movs	r5, #0
 800dcce:	f7fe b959 	b.w	800bf84 <dwt_ioctl+0x154>
 800dcd2:	2500      	movs	r5, #0
 800dcd4:	f7fe b956 	b.w	800bf84 <dwt_ioctl+0x154>
 800dcd8:	2500      	movs	r5, #0
 800dcda:	f7fe b953 	b.w	800bf84 <dwt_ioctl+0x154>
 800dcde:	2500      	movs	r5, #0
 800dce0:	f7fe b950 	b.w	800bf84 <dwt_ioctl+0x154>
 800dce4:	2500      	movs	r5, #0
 800dce6:	f7fe b94d 	b.w	800bf84 <dwt_ioctl+0x154>
 800dcea:	2500      	movs	r5, #0
 800dcec:	f7fe b94a 	b.w	800bf84 <dwt_ioctl+0x154>
 800dcf0:	2500      	movs	r5, #0
 800dcf2:	f7fe b947 	b.w	800bf84 <dwt_ioctl+0x154>
 800dcf6:	2500      	movs	r5, #0
 800dcf8:	f7fe b944 	b.w	800bf84 <dwt_ioctl+0x154>
 800dcfc:	2500      	movs	r5, #0
 800dcfe:	f7fe b941 	b.w	800bf84 <dwt_ioctl+0x154>
 800dd02:	2500      	movs	r5, #0
 800dd04:	f7fe b93e 	b.w	800bf84 <dwt_ioctl+0x154>
 800dd08:	2500      	movs	r5, #0
 800dd0a:	f7fe b93b 	b.w	800bf84 <dwt_ioctl+0x154>
 800dd0e:	2500      	movs	r5, #0
 800dd10:	f7fe b938 	b.w	800bf84 <dwt_ioctl+0x154>
 800dd14:	2500      	movs	r5, #0
 800dd16:	f7fe b935 	b.w	800bf84 <dwt_ioctl+0x154>
 800dd1a:	2500      	movs	r5, #0
 800dd1c:	f7fe b932 	b.w	800bf84 <dwt_ioctl+0x154>
 800dd20:	2500      	movs	r5, #0
 800dd22:	f7fe b92f 	b.w	800bf84 <dwt_ioctl+0x154>
 800dd26:	2500      	movs	r5, #0
 800dd28:	f7fe b92c 	b.w	800bf84 <dwt_ioctl+0x154>
 800dd2c:	2500      	movs	r5, #0
 800dd2e:	f7fe b929 	b.w	800bf84 <dwt_ioctl+0x154>
 800dd32:	2500      	movs	r5, #0
 800dd34:	f7fe b926 	b.w	800bf84 <dwt_ioctl+0x154>
 800dd38:	2500      	movs	r5, #0
 800dd3a:	f7fe b923 	b.w	800bf84 <dwt_ioctl+0x154>
 800dd3e:	2500      	movs	r5, #0
 800dd40:	f7fe b920 	b.w	800bf84 <dwt_ioctl+0x154>
 800dd44:	2500      	movs	r5, #0
 800dd46:	f7fe b91d 	b.w	800bf84 <dwt_ioctl+0x154>
 800dd4a:	2500      	movs	r5, #0
 800dd4c:	f7fe b91a 	b.w	800bf84 <dwt_ioctl+0x154>
 800dd50:	2500      	movs	r5, #0
 800dd52:	f7fe b917 	b.w	800bf84 <dwt_ioctl+0x154>
 800dd56:	2500      	movs	r5, #0
 800dd58:	f7fe b914 	b.w	800bf84 <dwt_ioctl+0x154>
 800dd5c:	2500      	movs	r5, #0
 800dd5e:	f7fe b911 	b.w	800bf84 <dwt_ioctl+0x154>
 800dd62:	2500      	movs	r5, #0
 800dd64:	f7fe b90e 	b.w	800bf84 <dwt_ioctl+0x154>
 800dd68:	2500      	movs	r5, #0
 800dd6a:	f7fe b90b 	b.w	800bf84 <dwt_ioctl+0x154>
 800dd6e:	2500      	movs	r5, #0
 800dd70:	f7fe b908 	b.w	800bf84 <dwt_ioctl+0x154>
 800dd74:	2500      	movs	r5, #0
 800dd76:	f7fe b905 	b.w	800bf84 <dwt_ioctl+0x154>
 800dd7a:	2500      	movs	r5, #0
 800dd7c:	f7fe b902 	b.w	800bf84 <dwt_ioctl+0x154>
 800dd80:	2500      	movs	r5, #0
 800dd82:	f7fe b8ff 	b.w	800bf84 <dwt_ioctl+0x154>
 800dd86:	2500      	movs	r5, #0
 800dd88:	f7fe b8fc 	b.w	800bf84 <dwt_ioctl+0x154>
 800dd8c:	2500      	movs	r5, #0
 800dd8e:	f7fe b8f9 	b.w	800bf84 <dwt_ioctl+0x154>
 800dd92:	2500      	movs	r5, #0
 800dd94:	f7fe b8f6 	b.w	800bf84 <dwt_ioctl+0x154>
 800dd98:	2500      	movs	r5, #0
 800dd9a:	f7fe b8f3 	b.w	800bf84 <dwt_ioctl+0x154>
 800dd9e:	2500      	movs	r5, #0
 800dda0:	f7fe b8f0 	b.w	800bf84 <dwt_ioctl+0x154>
 800dda4:	2500      	movs	r5, #0
 800dda6:	f7fe b8ed 	b.w	800bf84 <dwt_ioctl+0x154>
 800ddaa:	2500      	movs	r5, #0
 800ddac:	f7fe b8ea 	b.w	800bf84 <dwt_ioctl+0x154>
 800ddb0:	2500      	movs	r5, #0
 800ddb2:	f7fe b8e7 	b.w	800bf84 <dwt_ioctl+0x154>
 800ddb6:	2500      	movs	r5, #0
 800ddb8:	f7fe b8e4 	b.w	800bf84 <dwt_ioctl+0x154>
 800ddbc:	2500      	movs	r5, #0
 800ddbe:	f7fe b8e1 	b.w	800bf84 <dwt_ioctl+0x154>
 800ddc2:	2500      	movs	r5, #0
 800ddc4:	f7fe b8de 	b.w	800bf84 <dwt_ioctl+0x154>
 800ddc8:	2500      	movs	r5, #0
 800ddca:	f7fe b8db 	b.w	800bf84 <dwt_ioctl+0x154>
 800ddce:	2500      	movs	r5, #0
 800ddd0:	f7fe b8d8 	b.w	800bf84 <dwt_ioctl+0x154>
 800ddd4:	2500      	movs	r5, #0
 800ddd6:	f7fe b8d5 	b.w	800bf84 <dwt_ioctl+0x154>
 800ddda:	2500      	movs	r5, #0
 800dddc:	f7fe b8d2 	b.w	800bf84 <dwt_ioctl+0x154>
 800dde0:	2500      	movs	r5, #0
 800dde2:	f7fe b8cf 	b.w	800bf84 <dwt_ioctl+0x154>
 800dde6:	2500      	movs	r5, #0
 800dde8:	f7fe b8cc 	b.w	800bf84 <dwt_ioctl+0x154>
 800ddec:	2500      	movs	r5, #0
 800ddee:	f7fe b8c9 	b.w	800bf84 <dwt_ioctl+0x154>
 800ddf2:	2500      	movs	r5, #0
 800ddf4:	f7fe b8c6 	b.w	800bf84 <dwt_ioctl+0x154>
 800ddf8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ddfc:	f7fe b8c2 	b.w	800bf84 <dwt_ioctl+0x154>
 800de00:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800de04:	f7fe b8be 	b.w	800bf84 <dwt_ioctl+0x154>
 800de08:	2500      	movs	r5, #0
 800de0a:	f7fe b8bb 	b.w	800bf84 <dwt_ioctl+0x154>
 800de0e:	2500      	movs	r5, #0
 800de10:	f7fe b8b8 	b.w	800bf84 <dwt_ioctl+0x154>
 800de14:	2500      	movs	r5, #0
 800de16:	f7fe b8b5 	b.w	800bf84 <dwt_ioctl+0x154>
 800de1a:	2500      	movs	r5, #0
 800de1c:	f7fe b8b2 	b.w	800bf84 <dwt_ioctl+0x154>
 800de20:	2500      	movs	r5, #0
 800de22:	f7fe b8af 	b.w	800bf84 <dwt_ioctl+0x154>
 800de26:	2500      	movs	r5, #0
 800de28:	f7fe b8ac 	b.w	800bf84 <dwt_ioctl+0x154>
 800de2c:	2500      	movs	r5, #0
 800de2e:	f7fe b8a9 	b.w	800bf84 <dwt_ioctl+0x154>
 800de32:	2500      	movs	r5, #0
 800de34:	f7fe b8a6 	b.w	800bf84 <dwt_ioctl+0x154>
 800de38:	2500      	movs	r5, #0
 800de3a:	f7fe b8a3 	b.w	800bf84 <dwt_ioctl+0x154>
 800de3e:	2500      	movs	r5, #0
 800de40:	f7fe b8a0 	b.w	800bf84 <dwt_ioctl+0x154>
 800de44:	2500      	movs	r5, #0
 800de46:	f7fe b89d 	b.w	800bf84 <dwt_ioctl+0x154>
 800de4a:	2500      	movs	r5, #0
 800de4c:	f7fe b89a 	b.w	800bf84 <dwt_ioctl+0x154>
 800de50:	2500      	movs	r5, #0
 800de52:	f7fe b897 	b.w	800bf84 <dwt_ioctl+0x154>
 800de56:	f899 3011 	ldrb.w	r3, [r9, #17]
 800de5a:	1e5a      	subs	r2, r3, #1
 800de5c:	b2d2      	uxtb	r2, r2
 800de5e:	2a01      	cmp	r2, #1
 800de60:	f67e aeec 	bls.w	800cc3c <dwt_ioctl+0xe0c>
 800de64:	2202      	movs	r2, #2
 800de66:	f7fe be93 	b.w	800cb90 <dwt_ioctl+0xd60>
 800de6a:	2f00      	cmp	r7, #0
 800de6c:	f43f ab68 	beq.w	800d540 <dwt_ioctl+0x1710>
 800de70:	f819 1000 	ldrb.w	r1, [r9, r0]
 800de74:	1a5b      	subs	r3, r3, r1
 800de76:	b29b      	uxth	r3, r3
 800de78:	f7ff bb88 	b.w	800d58c <dwt_ioctl+0x175c>
 800de7c:	000d0020 	.word	0x000d0020
 800de80:	000c0064 	.word	0x000c0064
 800de84:	000c0068 	.word	0x000c0068
 800de88:	000c0060 	.word	0x000c0060
 800de8c:	000d0068 	.word	0x000d0068
 800de90:	000d0040 	.word	0x000d0040
 800de94:	000d0044 	.word	0x000d0044
 800de98:	000d0048 	.word	0x000d0048
 800de9c:	000d003c 	.word	0x000d003c
 800dea0:	283f      	cmp	r0, #63	; 0x3f
 800dea2:	d027      	beq.n	800def4 <dwt_ioctl+0x20c4>
 800dea4:	2e00      	cmp	r6, #0
 800dea6:	f47f ab51 	bne.w	800d54c <dwt_ioctl+0x171c>
 800deaa:	3001      	adds	r0, #1
 800deac:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800deb0:	f819 1000 	ldrb.w	r1, [r9, r0]
 800deb4:	440b      	add	r3, r1
 800deb6:	b29b      	uxth	r3, r3
 800deb8:	459c      	cmp	ip, r3
 800deba:	f43f ab65 	beq.w	800d588 <dwt_ioctl+0x1758>
 800debe:	3d01      	subs	r5, #1
 800dec0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 800dec4:	f43f ab23 	beq.w	800d50e <dwt_ioctl+0x16de>
 800dec8:	459e      	cmp	lr, r3
 800deca:	f4bf ab33 	bcs.w	800d534 <dwt_ioctl+0x1704>
 800dece:	4598      	cmp	r8, r3
 800ded0:	d9cb      	bls.n	800de6a <dwt_ioctl+0x203a>
 800ded2:	ebac 0103 	sub.w	r1, ip, r3
 800ded6:	b209      	sxth	r1, r1
 800ded8:	2900      	cmp	r1, #0
 800deda:	bfb8      	it	lt
 800dedc:	4249      	neglt	r1, r1
 800dede:	4559      	cmp	r1, fp
 800dee0:	f77f ab20 	ble.w	800d524 <dwt_ioctl+0x16f4>
 800dee4:	2f00      	cmp	r7, #0
 800dee6:	f47f ab64 	bne.w	800d5b2 <dwt_ioctl+0x1782>
 800deea:	283f      	cmp	r0, #63	; 0x3f
 800deec:	d1da      	bne.n	800dea4 <dwt_ioctl+0x2074>
 800deee:	2f00      	cmp	r7, #0
 800def0:	f47f ab64 	bne.w	800d5bc <dwt_ioctl+0x178c>
 800def4:	2a03      	cmp	r2, #3
 800def6:	f43f ab64 	beq.w	800d5c2 <dwt_ioctl+0x1792>
 800defa:	2a02      	cmp	r2, #2
 800defc:	f43f ab33 	beq.w	800d566 <dwt_ioctl+0x1736>
 800df00:	f81a 1002 	ldrb.w	r1, [sl, r2]
 800df04:	185e      	adds	r6, r3, r1
 800df06:	4566      	cmp	r6, ip
 800df08:	f77f ab34 	ble.w	800d574 <dwt_ioctl+0x1744>
 800df0c:	440b      	add	r3, r1
 800df0e:	b29b      	uxth	r3, r3
 800df10:	3201      	adds	r2, #1
 800df12:	b2d2      	uxtb	r2, r2
 800df14:	2700      	movs	r7, #0
 800df16:	f7ff bb19 	b.w	800d54c <dwt_ioctl+0x171c>
 800df1a:	bf00      	nop

0800df1c <_init>:
 800df1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df1e:	b085      	sub	sp, #20
 800df20:	4604      	mov	r4, r0
 800df22:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800df24:	6819      	ldr	r1, [r3, #0]
 800df26:	f7fd fe57 	bl	800bbd8 <ull_initialise>
 800df2a:	4606      	mov	r6, r0
 800df2c:	6823      	ldr	r3, [r4, #0]
 800df2e:	691b      	ldr	r3, [r3, #16]
 800df30:	4798      	blx	r3
 800df32:	ab03      	add	r3, sp, #12
 800df34:	2200      	movs	r2, #0
 800df36:	4611      	mov	r1, r2
 800df38:	4620      	mov	r0, r4
 800df3a:	f7fd ff79 	bl	800be30 <dwt_ioctl>
 800df3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800df40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df42:	6819      	ldr	r1, [r3, #0]
 800df44:	4620      	mov	r0, r4
 800df46:	f7fd fc07 	bl	800b758 <ull_configure>
 800df4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800df4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df4e:	6859      	ldr	r1, [r3, #4]
 800df50:	4620      	mov	r0, r4
 800df52:	f7fd f953 	bl	800b1fc <ull_configuretxrf>
 800df56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800df58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df5a:	89db      	ldrh	r3, [r3, #14]
 800df5c:	2200      	movs	r2, #0
 800df5e:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800df62:	4620      	mov	r0, r4
 800df64:	f7fc fa9d 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800df68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800df6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df6c:	899b      	ldrh	r3, [r3, #12]
 800df6e:	2200      	movs	r2, #0
 800df70:	217c      	movs	r1, #124	; 0x7c
 800df72:	4620      	mov	r0, r4
 800df74:	f7fc fa95 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800df78:	2100      	movs	r1, #0
 800df7a:	4620      	mov	r0, r4
 800df7c:	f7fc fb29 	bl	800a5d2 <ull_setrxaftertxdelay>
 800df80:	2500      	movs	r5, #0
 800df82:	9500      	str	r5, [sp, #0]
 800df84:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 800df88:	462a      	mov	r2, r5
 800df8a:	2110      	movs	r1, #16
 800df8c:	4620      	mov	r0, r4
 800df8e:	f7fd fac5 	bl	800b51c <dwt_modify16bitoffsetreg>
 800df92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800df94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df96:	895a      	ldrh	r2, [r3, #10]
 800df98:	8919      	ldrh	r1, [r3, #8]
 800df9a:	4620      	mov	r0, r4
 800df9c:	f7fd f9bc 	bl	800b318 <ull_configureframefilter>
 800dfa0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dfa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfa4:	8a1b      	ldrh	r3, [r3, #16]
 800dfa6:	2202      	movs	r2, #2
 800dfa8:	210c      	movs	r1, #12
 800dfaa:	4620      	mov	r0, r4
 800dfac:	f7fc fa79 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800dfb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dfb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfb4:	8a5b      	ldrh	r3, [r3, #18]
 800dfb6:	462a      	mov	r2, r5
 800dfb8:	210c      	movs	r1, #12
 800dfba:	4620      	mov	r0, r4
 800dfbc:	f7fc fa71 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800dfc0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dfc2:	7a19      	ldrb	r1, [r3, #8]
 800dfc4:	4620      	mov	r0, r4
 800dfc6:	f7fd fac3 	bl	800b550 <ull_setleds>
 800dfca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dfcc:	68d9      	ldr	r1, [r3, #12]
 800dfce:	4620      	mov	r0, r4
 800dfd0:	f7fc fb13 	bl	800a5fa <ull_setlnapamode>
 800dfd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dfd6:	7e0b      	ldrb	r3, [r1, #24]
 800dfd8:	694a      	ldr	r2, [r1, #20]
 800dfda:	6909      	ldr	r1, [r1, #16]
 800dfdc:	4620      	mov	r0, r4
 800dfde:	f7fd fa21 	bl	800b424 <ull_setinterrupt>
 800dfe2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dfe4:	7f9a      	ldrb	r2, [r3, #30]
 800dfe6:	8b99      	ldrh	r1, [r3, #28]
 800dfe8:	4620      	mov	r0, r4
 800dfea:	f7fc fd19 	bl	800aa20 <ull_configuresleep>
 800dfee:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800dff0:	7b53      	ldrb	r3, [r2, #13]
 800dff2:	2b2e      	cmp	r3, #46	; 0x2e
 800dff4:	d005      	beq.n	800e002 <_init+0xe6>
 800dff6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dff8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800dffc:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 800e000:	d00a      	beq.n	800e018 <_init+0xfc>
 800e002:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e004:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e00c:	7353      	strb	r3, [r2, #13]
 800e00e:	2200      	movs	r2, #0
 800e010:	492a      	ldr	r1, [pc, #168]	; (800e0bc <_init+0x1a0>)
 800e012:	4620      	mov	r0, r4
 800e014:	f7fc fc30 	bl	800a878 <dwt_write8bitoffsetreg>
 800e018:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e01a:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 800e01e:	4620      	mov	r0, r4
 800e020:	f7fd f874 	bl	800b10c <ull_configciadiag>
 800e024:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e026:	6a19      	ldr	r1, [r3, #32]
 800e028:	4620      	mov	r0, r4
 800e02a:	f7fc fb07 	bl	800a63c <ull_configurestskey>
 800e02e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e030:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e032:	4620      	mov	r0, r4
 800e034:	f7fc fb26 	bl	800a684 <ull_configurestsiv>
 800e038:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e03a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e03e:	bb9b      	cbnz	r3, 800e0a8 <_init+0x18c>
 800e040:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e042:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 800e046:	4620      	mov	r0, r4
 800e048:	f7fc fc8e 	bl	800a968 <ull_configeventcounters>
 800e04c:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
 800e050:	2d00      	cmp	r5, #0
 800e052:	db26      	blt.n	800e0a2 <_init+0x186>
 800e054:	2301      	movs	r3, #1
 800e056:	fa03 f505 	lsl.w	r5, r3, r5
 800e05a:	b2af      	uxth	r7, r5
 800e05c:	4a18      	ldr	r2, [pc, #96]	; (800e0c0 <_init+0x1a4>)
 800e05e:	4639      	mov	r1, r7
 800e060:	4620      	mov	r0, r4
 800e062:	f7fc ffef 	bl	800b044 <ull_setgpiomode>
 800e066:	f10d 030a 	add.w	r3, sp, #10
 800e06a:	9300      	str	r3, [sp, #0]
 800e06c:	2302      	movs	r3, #2
 800e06e:	2200      	movs	r2, #0
 800e070:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800e074:	4620      	mov	r0, r4
 800e076:	f7fb fdf2 	bl	8009c5e <dwt_readfromdevice>
 800e07a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800e07e:	ea23 0305 	bic.w	r3, r3, r5
 800e082:	f8ad 300a 	strh.w	r3, [sp, #10]
 800e086:	2200      	movs	r2, #0
 800e088:	490e      	ldr	r1, [pc, #56]	; (800e0c4 <_init+0x1a8>)
 800e08a:	4620      	mov	r0, r4
 800e08c:	f7fc fa09 	bl	800a4a2 <dwt_write16bitoffsetreg>
 800e090:	f994 204d 	ldrsb.w	r2, [r4, #77]	; 0x4d
 800e094:	fab2 f282 	clz	r2, r2
 800e098:	0952      	lsrs	r2, r2, #5
 800e09a:	4639      	mov	r1, r7
 800e09c:	4620      	mov	r0, r4
 800e09e:	f7fd fad5 	bl	800b64c <ull_setgpiovalue>
 800e0a2:	4630      	mov	r0, r6
 800e0a4:	b005      	add	sp, #20
 800e0a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	9300      	str	r3, [sp, #0]
 800e0ac:	23ff      	movs	r3, #255	; 0xff
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	4905      	ldr	r1, [pc, #20]	; (800e0c8 <_init+0x1ac>)
 800e0b2:	4620      	mov	r0, r4
 800e0b4:	f7fd f816 	bl	800b0e4 <dwt_modify8bitoffsetreg>
 800e0b8:	e7c2      	b.n	800e040 <_init+0x124>
 800e0ba:	bf00      	nop
 800e0bc:	00090014 	.word	0x00090014
 800e0c0:	01200492 	.word	0x01200492
 800e0c4:	00050008 	.word	0x00050008
 800e0c8:	00020004 	.word	0x00020004

0800e0cc <ull_wakeup_ic>:
 800e0cc:	b508      	push	{r3, lr}
 800e0ce:	6843      	ldr	r3, [r0, #4]
 800e0d0:	4798      	blx	r3
 800e0d2:	bd08      	pop	{r3, pc}

0800e0d4 <get_sts_mnth>:
 800e0d4:	fb01 f100 	mul.w	r1, r1, r0
 800e0d8:	2a03      	cmp	r2, #3
 800e0da:	d00a      	beq.n	800e0f2 <get_sts_mnth+0x1e>
 800e0dc:	0ac8      	lsrs	r0, r1, #11
 800e0de:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800e0e2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e0e6:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800e0ea:	bf28      	it	cs
 800e0ec:	3001      	addcs	r0, #1
 800e0ee:	b280      	uxth	r0, r0
 800e0f0:	4770      	bx	lr
 800e0f2:	20b5      	movs	r0, #181	; 0xb5
 800e0f4:	fb00 f101 	mul.w	r1, r0, r1
 800e0f8:	09c9      	lsrs	r1, r1, #7
 800e0fa:	e7ef      	b.n	800e0dc <get_sts_mnth+0x8>

0800e0fc <dwt_dbg_fn>:
 800e0fc:	2998      	cmp	r1, #152	; 0x98
 800e0fe:	4802      	ldr	r0, [pc, #8]	; (800e108 <dwt_dbg_fn+0xc>)
 800e100:	bf18      	it	ne
 800e102:	2000      	movne	r0, #0
 800e104:	4770      	bx	lr
 800e106:	bf00      	nop
 800e108:	0801645c 	.word	0x0801645c

0800e10c <_deinit>:
 800e10c:	4770      	bx	lr

0800e10e <dwt_xfer3xxx>:
 800e10e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e112:	b084      	sub	sp, #16
 800e114:	4605      	mov	r5, r0
 800e116:	460f      	mov	r7, r1
 800e118:	461e      	mov	r6, r3
 800e11a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800e11e:	1e59      	subs	r1, r3, #1
 800e120:	b289      	uxth	r1, r1
 800e122:	2901      	cmp	r1, #1
 800e124:	d91c      	bls.n	800e160 <dwt_xfer3xxx+0x52>
 800e126:	19d0      	adds	r0, r2, r7
 800e128:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800e12c:	443a      	add	r2, r7
 800e12e:	f3c2 4104 	ubfx	r1, r2, #16, #5
 800e132:	0082      	lsls	r2, r0, #2
 800e134:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800e138:	ea43 0102 	orr.w	r1, r3, r2
 800e13c:	0a09      	lsrs	r1, r1, #8
 800e13e:	f88d 100c 	strb.w	r1, [sp, #12]
 800e142:	b920      	cbnz	r0, 800e14e <dwt_xfer3xxx+0x40>
 800e144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e148:	d018      	beq.n	800e17c <dwt_xfer3xxx+0x6e>
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d037      	beq.n	800e1be <dwt_xfer3xxx+0xb0>
 800e14e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800e152:	f88d 100c 	strb.w	r1, [sp, #12]
 800e156:	431a      	orrs	r2, r3
 800e158:	f88d 200d 	strb.w	r2, [sp, #13]
 800e15c:	2402      	movs	r4, #2
 800e15e:	e005      	b.n	800e16c <dwt_xfer3xxx+0x5e>
 800e160:	007a      	lsls	r2, r7, #1
 800e162:	f062 027e 	orn	r2, r2, #126	; 0x7e
 800e166:	f88d 200c 	strb.w	r2, [sp, #12]
 800e16a:	2401      	movs	r4, #1
 800e16c:	2b02      	cmp	r3, #2
 800e16e:	d006      	beq.n	800e17e <dwt_xfer3xxx+0x70>
 800e170:	d326      	bcc.n	800e1c0 <dwt_xfer3xxx+0xb2>
 800e172:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800e176:	2b03      	cmp	r3, #3
 800e178:	d901      	bls.n	800e17e <dwt_xfer3xxx+0x70>
 800e17a:	e7fe      	b.n	800e17a <dwt_xfer3xxx+0x6c>
 800e17c:	2401      	movs	r4, #1
 800e17e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800e180:	7d1b      	ldrb	r3, [r3, #20]
 800e182:	b94b      	cbnz	r3, 800e198 <dwt_xfer3xxx+0x8a>
 800e184:	682b      	ldr	r3, [r5, #0]
 800e186:	685d      	ldr	r5, [r3, #4]
 800e188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e18a:	4632      	mov	r2, r6
 800e18c:	a903      	add	r1, sp, #12
 800e18e:	4620      	mov	r0, r4
 800e190:	47a8      	blx	r5
 800e192:	b004      	add	sp, #16
 800e194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e198:	2200      	movs	r2, #0
 800e19a:	4621      	mov	r1, r4
 800e19c:	a803      	add	r0, sp, #12
 800e19e:	f7f7 fad1 	bl	8005744 <dwt_generatecrc8>
 800e1a2:	4602      	mov	r2, r0
 800e1a4:	4631      	mov	r1, r6
 800e1a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e1a8:	f7f7 facc 	bl	8005744 <dwt_generatecrc8>
 800e1ac:	682b      	ldr	r3, [r5, #0]
 800e1ae:	9000      	str	r0, [sp, #0]
 800e1b0:	689d      	ldr	r5, [r3, #8]
 800e1b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1b4:	4632      	mov	r2, r6
 800e1b6:	a903      	add	r1, sp, #12
 800e1b8:	4620      	mov	r0, r4
 800e1ba:	47a8      	blx	r5
 800e1bc:	e7e9      	b.n	800e192 <dwt_xfer3xxx+0x84>
 800e1be:	2401      	movs	r4, #1
 800e1c0:	682b      	ldr	r3, [r5, #0]
 800e1c2:	f8d3 8000 	ldr.w	r8, [r3]
 800e1c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1c8:	4632      	mov	r2, r6
 800e1ca:	a903      	add	r1, sp, #12
 800e1cc:	4620      	mov	r0, r4
 800e1ce:	47c0      	blx	r8
 800e1d0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800e1d2:	7d1b      	ldrb	r3, [r3, #20]
 800e1d4:	2b02      	cmp	r3, #2
 800e1d6:	d1dc      	bne.n	800e192 <dwt_xfer3xxx+0x84>
 800e1d8:	2f18      	cmp	r7, #24
 800e1da:	d0da      	beq.n	800e192 <dwt_xfer3xxx+0x84>
 800e1dc:	2200      	movs	r2, #0
 800e1de:	4621      	mov	r1, r4
 800e1e0:	a803      	add	r0, sp, #12
 800e1e2:	f7f7 faaf 	bl	8005744 <dwt_generatecrc8>
 800e1e6:	4602      	mov	r2, r0
 800e1e8:	4631      	mov	r1, r6
 800e1ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e1ec:	f7f7 faaa 	bl	8005744 <dwt_generatecrc8>
 800e1f0:	4604      	mov	r4, r0
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	2118      	movs	r1, #24
 800e1f6:	4628      	mov	r0, r5
 800e1f8:	f000 f866 	bl	800e2c8 <dwt_read8bitoffsetreg>
 800e1fc:	4284      	cmp	r4, r0
 800e1fe:	d0c8      	beq.n	800e192 <dwt_xfer3xxx+0x84>
 800e200:	68eb      	ldr	r3, [r5, #12]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d0c5      	beq.n	800e192 <dwt_xfer3xxx+0x84>
 800e206:	4798      	blx	r3
 800e208:	e7c3      	b.n	800e192 <dwt_xfer3xxx+0x84>

0800e20a <dwt_readfromdevice>:
 800e20a:	b510      	push	{r4, lr}
 800e20c:	b082      	sub	sp, #8
 800e20e:	2400      	movs	r4, #0
 800e210:	9401      	str	r4, [sp, #4]
 800e212:	9c04      	ldr	r4, [sp, #16]
 800e214:	9400      	str	r4, [sp, #0]
 800e216:	f7ff ff7a 	bl	800e10e <dwt_xfer3xxx>
 800e21a:	b002      	add	sp, #8
 800e21c:	bd10      	pop	{r4, pc}

0800e21e <dwt_read32bitoffsetreg>:
 800e21e:	b500      	push	{lr}
 800e220:	b085      	sub	sp, #20
 800e222:	ab03      	add	r3, sp, #12
 800e224:	9300      	str	r3, [sp, #0]
 800e226:	2304      	movs	r3, #4
 800e228:	b292      	uxth	r2, r2
 800e22a:	f7ff ffee 	bl	800e20a <dwt_readfromdevice>
 800e22e:	f10d 030f 	add.w	r3, sp, #15
 800e232:	f10d 010b 	add.w	r1, sp, #11
 800e236:	2000      	movs	r0, #0
 800e238:	f813 2901 	ldrb.w	r2, [r3], #-1
 800e23c:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 800e240:	428b      	cmp	r3, r1
 800e242:	d1f9      	bne.n	800e238 <dwt_read32bitoffsetreg+0x1a>
 800e244:	b005      	add	sp, #20
 800e246:	f85d fb04 	ldr.w	pc, [sp], #4

0800e24a <dwt_read16bitoffsetreg>:
 800e24a:	b500      	push	{lr}
 800e24c:	b085      	sub	sp, #20
 800e24e:	ab03      	add	r3, sp, #12
 800e250:	9300      	str	r3, [sp, #0]
 800e252:	2302      	movs	r3, #2
 800e254:	b292      	uxth	r2, r2
 800e256:	f7ff ffd8 	bl	800e20a <dwt_readfromdevice>
 800e25a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800e25e:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800e262:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 800e266:	b280      	uxth	r0, r0
 800e268:	b005      	add	sp, #20
 800e26a:	f85d fb04 	ldr.w	pc, [sp], #4

0800e26e <ull_getrxantennadelay>:
 800e26e:	b508      	push	{r3, lr}
 800e270:	2200      	movs	r2, #0
 800e272:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800e276:	f7ff ffe8 	bl	800e24a <dwt_read16bitoffsetreg>
 800e27a:	bd08      	pop	{r3, pc}

0800e27c <ull_gettxantennadelay>:
 800e27c:	b508      	push	{r3, lr}
 800e27e:	2200      	movs	r2, #0
 800e280:	217c      	movs	r1, #124	; 0x7c
 800e282:	f7ff ffe2 	bl	800e24a <dwt_read16bitoffsetreg>
 800e286:	bd08      	pop	{r3, pc}

0800e288 <ull_readclockoffset>:
 800e288:	b508      	push	{r3, lr}
 800e28a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e28c:	7b9b      	ldrb	r3, [r3, #14]
 800e28e:	2b01      	cmp	r3, #1
 800e290:	d00a      	beq.n	800e2a8 <ull_readclockoffset+0x20>
 800e292:	2b03      	cmp	r3, #3
 800e294:	d10e      	bne.n	800e2b4 <ull_readclockoffset+0x2c>
 800e296:	220c      	movs	r2, #12
 800e298:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800e29c:	f7ff ffd5 	bl	800e24a <dwt_read16bitoffsetreg>
 800e2a0:	b200      	sxth	r0, r0
 800e2a2:	f340 000c 	sbfx	r0, r0, #0, #13
 800e2a6:	bd08      	pop	{r3, pc}
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	4905      	ldr	r1, [pc, #20]	; (800e2c0 <ull_readclockoffset+0x38>)
 800e2ac:	f7ff ffcd 	bl	800e24a <dwt_read16bitoffsetreg>
 800e2b0:	b200      	sxth	r0, r0
 800e2b2:	e7f6      	b.n	800e2a2 <ull_readclockoffset+0x1a>
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	4903      	ldr	r1, [pc, #12]	; (800e2c4 <ull_readclockoffset+0x3c>)
 800e2b8:	f7ff ffc7 	bl	800e24a <dwt_read16bitoffsetreg>
 800e2bc:	b200      	sxth	r0, r0
 800e2be:	e7f0      	b.n	800e2a2 <ull_readclockoffset+0x1a>
 800e2c0:	0018000c 	.word	0x0018000c
 800e2c4:	000c0020 	.word	0x000c0020

0800e2c8 <dwt_read8bitoffsetreg>:
 800e2c8:	b500      	push	{lr}
 800e2ca:	b085      	sub	sp, #20
 800e2cc:	f10d 030f 	add.w	r3, sp, #15
 800e2d0:	9300      	str	r3, [sp, #0]
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	b292      	uxth	r2, r2
 800e2d6:	f7ff ff98 	bl	800e20a <dwt_readfromdevice>
 800e2da:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800e2de:	b005      	add	sp, #20
 800e2e0:	f85d fb04 	ldr.w	pc, [sp], #4

0800e2e4 <ull_readcarrierintegrator>:
 800e2e4:	b500      	push	{lr}
 800e2e6:	b085      	sub	sp, #20
 800e2e8:	ab03      	add	r3, sp, #12
 800e2ea:	9300      	str	r3, [sp, #0]
 800e2ec:	2303      	movs	r3, #3
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	490b      	ldr	r1, [pc, #44]	; (800e320 <ull_readcarrierintegrator+0x3c>)
 800e2f2:	f7ff ff8a 	bl	800e20a <dwt_readfromdevice>
 800e2f6:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800e2fa:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800e2fe:	eb00 2303 	add.w	r3, r0, r3, lsl #8
 800e302:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800e306:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 800e30a:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800e30e:	bf1c      	itt	ne
 800e310:	ea6f 3000 	mvnne.w	r0, r0, lsl #12
 800e314:	ea6f 3010 	mvnne.w	r0, r0, lsr #12
 800e318:	b005      	add	sp, #20
 800e31a:	f85d fb04 	ldr.w	pc, [sp], #4
 800e31e:	bf00      	nop
 800e320:	00060029 	.word	0x00060029

0800e324 <ull_readdiagnostics>:
 800e324:	b530      	push	{r4, r5, lr}
 800e326:	b0bd      	sub	sp, #244	; 0xf4
 800e328:	4605      	mov	r5, r0
 800e32a:	460c      	mov	r4, r1
 800e32c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e32e:	7b9a      	ldrb	r2, [r3, #14]
 800e330:	2a01      	cmp	r2, #1
 800e332:	d01c      	beq.n	800e36e <ull_readdiagnostics+0x4a>
 800e334:	2a03      	cmp	r2, #3
 800e336:	f040 81f1 	bne.w	800e71c <ull_readdiagnostics+0x3f8>
 800e33a:	7d9b      	ldrb	r3, [r3, #22]
 800e33c:	f013 0f08 	tst.w	r3, #8
 800e340:	d10c      	bne.n	800e35c <ull_readdiagnostics+0x38>
 800e342:	f013 0f04 	tst.w	r3, #4
 800e346:	ab02      	add	r3, sp, #8
 800e348:	9300      	str	r3, [sp, #0]
 800e34a:	bf14      	ite	ne
 800e34c:	2338      	movne	r3, #56	; 0x38
 800e34e:	2320      	moveq	r3, #32
 800e350:	2200      	movs	r2, #0
 800e352:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800e356:	f7ff ff58 	bl	800e20a <dwt_readfromdevice>
 800e35a:	e019      	b.n	800e390 <ull_readdiagnostics+0x6c>
 800e35c:	ab02      	add	r3, sp, #8
 800e35e:	9300      	str	r3, [sp, #0]
 800e360:	23e8      	movs	r3, #232	; 0xe8
 800e362:	2200      	movs	r2, #0
 800e364:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800e368:	f7ff ff4f 	bl	800e20a <dwt_readfromdevice>
 800e36c:	e010      	b.n	800e390 <ull_readdiagnostics+0x6c>
 800e36e:	7d9b      	ldrb	r3, [r3, #22]
 800e370:	f013 0f08 	tst.w	r3, #8
 800e374:	f040 81c9 	bne.w	800e70a <ull_readdiagnostics+0x3e6>
 800e378:	f013 0f04 	tst.w	r3, #4
 800e37c:	ab02      	add	r3, sp, #8
 800e37e:	9300      	str	r3, [sp, #0]
 800e380:	bf14      	ite	ne
 800e382:	2338      	movne	r3, #56	; 0x38
 800e384:	2320      	moveq	r3, #32
 800e386:	2200      	movs	r2, #0
 800e388:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800e38c:	f7ff ff3d 	bl	800e20a <dwt_readfromdevice>
 800e390:	f10d 0217 	add.w	r2, sp, #23
 800e394:	f104 031a 	add.w	r3, r4, #26
 800e398:	f104 0020 	add.w	r0, r4, #32
 800e39c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800e3a0:	f803 1b01 	strb.w	r1, [r3], #1
 800e3a4:	4283      	cmp	r3, r0
 800e3a6:	d1f9      	bne.n	800e39c <ull_readdiagnostics+0x78>
 800e3a8:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800e3ac:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800e3b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e3b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e3b8:	8463      	strh	r3, [r4, #34]	; 0x22
 800e3ba:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800e3be:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800e3c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e3c6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e3ca:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800e3ce:	bf1c      	itt	ne
 800e3d0:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 800e3d4:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 800e3d8:	8423      	strh	r3, [r4, #32]
 800e3da:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 800e3de:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800e3e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e3e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e3ea:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800e3ec:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800e3ee:	7d9b      	ldrb	r3, [r3, #22]
 800e3f0:	f013 0f02 	tst.w	r3, #2
 800e3f4:	f040 817e 	bne.w	800e6f4 <ull_readdiagnostics+0x3d0>
 800e3f8:	aa0a      	add	r2, sp, #40	; 0x28
 800e3fa:	1e63      	subs	r3, r4, #1
 800e3fc:	1d20      	adds	r0, r4, #4
 800e3fe:	f812 1b01 	ldrb.w	r1, [r2], #1
 800e402:	f803 1f01 	strb.w	r1, [r3, #1]!
 800e406:	79d1      	ldrb	r1, [r2, #7]
 800e408:	7219      	strb	r1, [r3, #8]
 800e40a:	7bd1      	ldrb	r1, [r2, #15]
 800e40c:	7459      	strb	r1, [r3, #17]
 800e40e:	4283      	cmp	r3, r0
 800e410:	d1f5      	bne.n	800e3fe <ull_readdiagnostics+0xda>
 800e412:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800e416:	7163      	strb	r3, [r4, #5]
 800e418:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 800e41c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 800e420:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e424:	80e3      	strh	r3, [r4, #6]
 800e426:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800e42a:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800e42e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e432:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800e436:	f8a4 300d 	strh.w	r3, [r4, #13]
 800e43a:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800e43e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800e442:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e446:	f8a4 300f 	strh.w	r3, [r4, #15]
 800e44a:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 800e44e:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800e452:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e456:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800e45a:	82e3      	strh	r3, [r4, #22]
 800e45c:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 800e460:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 800e464:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e468:	8323      	strh	r3, [r4, #24]
 800e46a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800e46c:	7d9b      	ldrb	r3, [r3, #22]
 800e46e:	f013 0f04 	tst.w	r3, #4
 800e472:	f040 813f 	bne.w	800e6f4 <ull_readdiagnostics+0x3d0>
 800e476:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 800e47a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800e47e:	041b      	lsls	r3, r3, #16
 800e480:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e484:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800e488:	4313      	orrs	r3, r2
 800e48a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800e48e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e492:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800e496:	6263      	str	r3, [r4, #36]	; 0x24
 800e498:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 800e49c:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 800e4a0:	041b      	lsls	r3, r3, #16
 800e4a2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e4a6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800e4aa:	4313      	orrs	r3, r2
 800e4ac:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 800e4b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e4b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e4b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e4ba:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 800e4be:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 800e4c2:	041b      	lsls	r3, r3, #16
 800e4c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e4c8:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 800e4cc:	4313      	orrs	r3, r2
 800e4ce:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 800e4d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e4d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e4da:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e4dc:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 800e4e0:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 800e4e4:	041b      	lsls	r3, r3, #16
 800e4e6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e4ea:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 800e4ee:	4313      	orrs	r3, r2
 800e4f0:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 800e4f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e4f8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e4fc:	6323      	str	r3, [r4, #48]	; 0x30
 800e4fe:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 800e502:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 800e506:	041b      	lsls	r3, r3, #16
 800e508:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e50c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800e510:	4313      	orrs	r3, r2
 800e512:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 800e516:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e51a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e51e:	6363      	str	r3, [r4, #52]	; 0x34
 800e520:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 800e524:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 800e528:	041b      	lsls	r3, r3, #16
 800e52a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e52e:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800e532:	4313      	orrs	r3, r2
 800e534:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 800e538:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e53c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e540:	63a3      	str	r3, [r4, #56]	; 0x38
 800e542:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 800e546:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800e54a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e54e:	87a3      	strh	r3, [r4, #60]	; 0x3c
 800e550:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 800e554:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 800e558:	041b      	lsls	r3, r3, #16
 800e55a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e55e:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 800e562:	4313      	orrs	r3, r2
 800e564:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 800e568:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e56c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800e570:	6423      	str	r3, [r4, #64]	; 0x40
 800e572:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 800e576:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 800e57a:	041b      	lsls	r3, r3, #16
 800e57c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e580:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 800e584:	4313      	orrs	r3, r2
 800e586:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
 800e58a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e58e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e592:	6463      	str	r3, [r4, #68]	; 0x44
 800e594:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 800e598:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 800e59c:	041b      	lsls	r3, r3, #16
 800e59e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e5a2:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 800e5a6:	4313      	orrs	r3, r2
 800e5a8:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 800e5ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e5b0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e5b4:	64a3      	str	r3, [r4, #72]	; 0x48
 800e5b6:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 800e5ba:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 800e5be:	041b      	lsls	r3, r3, #16
 800e5c0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e5c4:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 800e5c8:	4313      	orrs	r3, r2
 800e5ca:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
 800e5ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e5d2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e5d6:	64e3      	str	r3, [r4, #76]	; 0x4c
 800e5d8:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 800e5dc:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
 800e5e0:	041b      	lsls	r3, r3, #16
 800e5e2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e5e6:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 800e5ea:	4313      	orrs	r3, r2
 800e5ec:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 800e5f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e5f4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e5f8:	6523      	str	r3, [r4, #80]	; 0x50
 800e5fa:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 800e5fe:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 800e602:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e606:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800e60a:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 800e60e:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 800e612:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 800e616:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e61a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e61e:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 800e622:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 800e626:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 800e62a:	041b      	lsls	r3, r3, #16
 800e62c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e630:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 800e634:	4313      	orrs	r3, r2
 800e636:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 800e63a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e63e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800e642:	65a3      	str	r3, [r4, #88]	; 0x58
 800e644:	f89d 20c3 	ldrb.w	r2, [sp, #195]	; 0xc3
 800e648:	f89d 30c2 	ldrb.w	r3, [sp, #194]	; 0xc2
 800e64c:	041b      	lsls	r3, r3, #16
 800e64e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e652:	f89d 20c0 	ldrb.w	r2, [sp, #192]	; 0xc0
 800e656:	4313      	orrs	r3, r2
 800e658:	f89d 20c1 	ldrb.w	r2, [sp, #193]	; 0xc1
 800e65c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e660:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e664:	65e3      	str	r3, [r4, #92]	; 0x5c
 800e666:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
 800e66a:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
 800e66e:	041b      	lsls	r3, r3, #16
 800e670:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e674:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 800e678:	4313      	orrs	r3, r2
 800e67a:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
 800e67e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e682:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e686:	6623      	str	r3, [r4, #96]	; 0x60
 800e688:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
 800e68c:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 800e690:	041b      	lsls	r3, r3, #16
 800e692:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e696:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 800e69a:	4313      	orrs	r3, r2
 800e69c:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 800e6a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e6a4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e6a8:	6663      	str	r3, [r4, #100]	; 0x64
 800e6aa:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
 800e6ae:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
 800e6b2:	041b      	lsls	r3, r3, #16
 800e6b4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e6b8:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 800e6bc:	4313      	orrs	r3, r2
 800e6be:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 800e6c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e6c6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e6ca:	66a3      	str	r3, [r4, #104]	; 0x68
 800e6cc:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 800e6d0:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 800e6d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e6d8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800e6dc:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800e6e0:	f89d 20ed 	ldrb.w	r2, [sp, #237]	; 0xed
 800e6e4:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 800e6e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e6ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e6f0:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 800e6f4:	f994 301b 	ldrsb.w	r3, [r4, #27]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	f2c0 81d0 	blt.w	800ea9e <ull_readdiagnostics+0x77a>
 800e6fe:	7fe3      	ldrb	r3, [r4, #31]
 800e700:	f003 0301 	and.w	r3, r3, #1
 800e704:	77e3      	strb	r3, [r4, #31]
 800e706:	b03d      	add	sp, #244	; 0xf4
 800e708:	bd30      	pop	{r4, r5, pc}
 800e70a:	ab02      	add	r3, sp, #8
 800e70c:	9300      	str	r3, [sp, #0]
 800e70e:	23e8      	movs	r3, #232	; 0xe8
 800e710:	2200      	movs	r2, #0
 800e712:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800e716:	f7ff fd78 	bl	800e20a <dwt_readfromdevice>
 800e71a:	e639      	b.n	800e390 <ull_readdiagnostics+0x6c>
 800e71c:	7d9b      	ldrb	r3, [r3, #22]
 800e71e:	f013 0f01 	tst.w	r3, #1
 800e722:	f000 81b3 	beq.w	800ea8c <ull_readdiagnostics+0x768>
 800e726:	ab02      	add	r3, sp, #8
 800e728:	9300      	str	r3, [sp, #0]
 800e72a:	236c      	movs	r3, #108	; 0x6c
 800e72c:	2200      	movs	r2, #0
 800e72e:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800e732:	f7ff fd6a 	bl	800e20a <dwt_readfromdevice>
 800e736:	ab1d      	add	r3, sp, #116	; 0x74
 800e738:	9300      	str	r3, [sp, #0]
 800e73a:	236c      	movs	r3, #108	; 0x6c
 800e73c:	2200      	movs	r2, #0
 800e73e:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 800e742:	4628      	mov	r0, r5
 800e744:	f7ff fd61 	bl	800e20a <dwt_readfromdevice>
 800e748:	aa02      	add	r2, sp, #8
 800e74a:	1e63      	subs	r3, r4, #1
 800e74c:	1d20      	adds	r0, r4, #4
 800e74e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800e752:	f803 1f01 	strb.w	r1, [r3, #1]!
 800e756:	79d1      	ldrb	r1, [r2, #7]
 800e758:	7219      	strb	r1, [r3, #8]
 800e75a:	7bd1      	ldrb	r1, [r2, #15]
 800e75c:	7459      	strb	r1, [r3, #17]
 800e75e:	7dd1      	ldrb	r1, [r2, #23]
 800e760:	7699      	strb	r1, [r3, #26]
 800e762:	4283      	cmp	r3, r0
 800e764:	d1f3      	bne.n	800e74e <ull_readdiagnostics+0x42a>
 800e766:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800e76a:	77e3      	strb	r3, [r4, #31]
 800e76c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800e770:	7163      	strb	r3, [r4, #5]
 800e772:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800e776:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800e77a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e77e:	80e3      	strh	r3, [r4, #6]
 800e780:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e784:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800e788:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800e78c:	f3c2 12cf 	ubfx	r2, r2, #7, #16
 800e790:	f8a4 200d 	strh.w	r2, [r4, #13]
 800e794:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800e798:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800e79c:	f8a4 200f 	strh.w	r2, [r4, #15]
 800e7a0:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800e7a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e7a8:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800e7ac:	82e3      	strh	r3, [r4, #22]
 800e7ae:	f89d 201e 	ldrb.w	r2, [sp, #30]
 800e7b2:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800e7b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e7ba:	8323      	strh	r3, [r4, #24]
 800e7bc:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 800e7c0:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 800e7c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e7c8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e7cc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800e7d0:	bf1c      	itt	ne
 800e7d2:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 800e7d6:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 800e7da:	8423      	strh	r3, [r4, #32]
 800e7dc:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 800e7e0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800e7e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e7e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e7ec:	8463      	strh	r3, [r4, #34]	; 0x22
 800e7ee:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 800e7f2:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800e7f6:	041b      	lsls	r3, r3, #16
 800e7f8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e7fc:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 800e800:	4313      	orrs	r3, r2
 800e802:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 800e806:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e80a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800e80e:	6263      	str	r3, [r4, #36]	; 0x24
 800e810:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800e812:	7d9b      	ldrb	r3, [r3, #22]
 800e814:	f013 0f01 	tst.w	r3, #1
 800e818:	f43f af6c 	beq.w	800e6f4 <ull_readdiagnostics+0x3d0>
 800e81c:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800e820:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 800e824:	041b      	lsls	r3, r3, #16
 800e826:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e82a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800e82e:	4313      	orrs	r3, r2
 800e830:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 800e834:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e838:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e83c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e83e:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800e842:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800e846:	041b      	lsls	r3, r3, #16
 800e848:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e84c:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800e850:	4313      	orrs	r3, r2
 800e852:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800e856:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e85a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e85e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e860:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 800e864:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 800e868:	041b      	lsls	r3, r3, #16
 800e86a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e86e:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 800e872:	4313      	orrs	r3, r2
 800e874:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 800e878:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e87c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e880:	6323      	str	r3, [r4, #48]	; 0x30
 800e882:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 800e886:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800e88a:	041b      	lsls	r3, r3, #16
 800e88c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e890:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800e894:	4313      	orrs	r3, r2
 800e896:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 800e89a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e89e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e8a2:	6363      	str	r3, [r4, #52]	; 0x34
 800e8a4:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 800e8a8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800e8ac:	041b      	lsls	r3, r3, #16
 800e8ae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e8b2:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800e8b6:	4313      	orrs	r3, r2
 800e8b8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800e8bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e8c0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e8c4:	63a3      	str	r3, [r4, #56]	; 0x38
 800e8c6:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 800e8ca:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800e8ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e8d2:	87a3      	strh	r3, [r4, #60]	; 0x3c
 800e8d4:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 800e8d8:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800e8dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e8e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e8e4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800e8e6:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 800e8ea:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 800e8ee:	041b      	lsls	r3, r3, #16
 800e8f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e8f4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800e8f8:	4313      	orrs	r3, r2
 800e8fa:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 800e8fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e902:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800e906:	6423      	str	r3, [r4, #64]	; 0x40
 800e908:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 800e90c:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
 800e910:	041b      	lsls	r3, r3, #16
 800e912:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e916:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 800e91a:	4313      	orrs	r3, r2
 800e91c:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 800e920:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e924:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e928:	6463      	str	r3, [r4, #68]	; 0x44
 800e92a:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
 800e92e:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 800e932:	041b      	lsls	r3, r3, #16
 800e934:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e938:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 800e93c:	4313      	orrs	r3, r2
 800e93e:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 800e942:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e946:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e94a:	64a3      	str	r3, [r4, #72]	; 0x48
 800e94c:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 800e950:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 800e954:	041b      	lsls	r3, r3, #16
 800e956:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e95a:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 800e95e:	4313      	orrs	r3, r2
 800e960:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
 800e964:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e968:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e96c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800e96e:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 800e972:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 800e976:	041b      	lsls	r3, r3, #16
 800e978:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e97c:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 800e980:	4313      	orrs	r3, r2
 800e982:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 800e986:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e98a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e98e:	6523      	str	r3, [r4, #80]	; 0x50
 800e990:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 800e994:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 800e998:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e99c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800e9a0:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 800e9a4:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 800e9a8:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 800e9ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e9b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e9b4:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 800e9b8:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 800e9bc:	f89d 30ae 	ldrb.w	r3, [sp, #174]	; 0xae
 800e9c0:	041b      	lsls	r3, r3, #16
 800e9c2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e9c6:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 800e9ca:	4313      	orrs	r3, r2
 800e9cc:	f89d 20ad 	ldrb.w	r2, [sp, #173]	; 0xad
 800e9d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e9d4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800e9d8:	65a3      	str	r3, [r4, #88]	; 0x58
 800e9da:	f89d 20b3 	ldrb.w	r2, [sp, #179]	; 0xb3
 800e9de:	f89d 30b2 	ldrb.w	r3, [sp, #178]	; 0xb2
 800e9e2:	041b      	lsls	r3, r3, #16
 800e9e4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e9e8:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 800e9ec:	4313      	orrs	r3, r2
 800e9ee:	f89d 20b1 	ldrb.w	r2, [sp, #177]	; 0xb1
 800e9f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e9f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e9fa:	65e3      	str	r3, [r4, #92]	; 0x5c
 800e9fc:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 800ea00:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
 800ea04:	041b      	lsls	r3, r3, #16
 800ea06:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ea0a:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 800ea0e:	4313      	orrs	r3, r2
 800ea10:	f89d 20b5 	ldrb.w	r2, [sp, #181]	; 0xb5
 800ea14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ea18:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ea1c:	6623      	str	r3, [r4, #96]	; 0x60
 800ea1e:	f89d 20bb 	ldrb.w	r2, [sp, #187]	; 0xbb
 800ea22:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
 800ea26:	041b      	lsls	r3, r3, #16
 800ea28:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ea2c:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 800ea30:	4313      	orrs	r3, r2
 800ea32:	f89d 20b9 	ldrb.w	r2, [sp, #185]	; 0xb9
 800ea36:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ea3a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ea3e:	6663      	str	r3, [r4, #100]	; 0x64
 800ea40:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 800ea44:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 800ea48:	041b      	lsls	r3, r3, #16
 800ea4a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ea4e:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 800ea52:	4313      	orrs	r3, r2
 800ea54:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 800ea58:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ea5c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ea60:	66a3      	str	r3, [r4, #104]	; 0x68
 800ea62:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 800ea66:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 800ea6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ea6e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800ea72:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800ea76:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 800ea7a:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 800ea7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ea82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ea86:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 800ea8a:	e633      	b.n	800e6f4 <ull_readdiagnostics+0x3d0>
 800ea8c:	ab02      	add	r3, sp, #8
 800ea8e:	9300      	str	r3, [sp, #0]
 800ea90:	2328      	movs	r3, #40	; 0x28
 800ea92:	2200      	movs	r2, #0
 800ea94:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800ea98:	f7ff fbb7 	bl	800e20a <dwt_readfromdevice>
 800ea9c:	e654      	b.n	800e748 <ull_readdiagnostics+0x424>
 800ea9e:	23ff      	movs	r3, #255	; 0xff
 800eaa0:	7723      	strb	r3, [r4, #28]
 800eaa2:	7763      	strb	r3, [r4, #29]
 800eaa4:	77a3      	strb	r3, [r4, #30]
 800eaa6:	77e3      	strb	r3, [r4, #31]
 800eaa8:	e629      	b.n	800e6fe <ull_readdiagnostics+0x3da>
	...

0800eaac <ull_readrxtimestamp>:
 800eaac:	b500      	push	{lr}
 800eaae:	b083      	sub	sp, #12
 800eab0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800eab2:	7b9b      	ldrb	r3, [r3, #14]
 800eab4:	2b01      	cmp	r3, #1
 800eab6:	d00b      	beq.n	800ead0 <ull_readrxtimestamp+0x24>
 800eab8:	2b03      	cmp	r3, #3
 800eaba:	d110      	bne.n	800eade <ull_readrxtimestamp+0x32>
 800eabc:	9100      	str	r1, [sp, #0]
 800eabe:	2305      	movs	r3, #5
 800eac0:	2204      	movs	r2, #4
 800eac2:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800eac6:	f7ff fba0 	bl	800e20a <dwt_readfromdevice>
 800eaca:	b003      	add	sp, #12
 800eacc:	f85d fb04 	ldr.w	pc, [sp], #4
 800ead0:	9100      	str	r1, [sp, #0]
 800ead2:	2305      	movs	r3, #5
 800ead4:	2200      	movs	r2, #0
 800ead6:	4905      	ldr	r1, [pc, #20]	; (800eaec <ull_readrxtimestamp+0x40>)
 800ead8:	f7ff fb97 	bl	800e20a <dwt_readfromdevice>
 800eadc:	e7f5      	b.n	800eaca <ull_readrxtimestamp+0x1e>
 800eade:	9100      	str	r1, [sp, #0]
 800eae0:	2305      	movs	r3, #5
 800eae2:	2200      	movs	r2, #0
 800eae4:	2160      	movs	r1, #96	; 0x60
 800eae6:	f7ff fb90 	bl	800e20a <dwt_readfromdevice>
 800eaea:	e7ee      	b.n	800eaca <ull_readrxtimestamp+0x1e>
 800eaec:	00180004 	.word	0x00180004

0800eaf0 <dwt_writetodevice>:
 800eaf0:	b510      	push	{r4, lr}
 800eaf2:	b082      	sub	sp, #8
 800eaf4:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 800eaf8:	9401      	str	r4, [sp, #4]
 800eafa:	9c04      	ldr	r4, [sp, #16]
 800eafc:	9400      	str	r4, [sp, #0]
 800eafe:	f7ff fb06 	bl	800e10e <dwt_xfer3xxx>
 800eb02:	b002      	add	sp, #8
 800eb04:	bd10      	pop	{r4, pc}

0800eb06 <dwt_write16bitoffsetreg>:
 800eb06:	b500      	push	{lr}
 800eb08:	b085      	sub	sp, #20
 800eb0a:	f88d 300c 	strb.w	r3, [sp, #12]
 800eb0e:	0a1b      	lsrs	r3, r3, #8
 800eb10:	f88d 300d 	strb.w	r3, [sp, #13]
 800eb14:	ab03      	add	r3, sp, #12
 800eb16:	9300      	str	r3, [sp, #0]
 800eb18:	2302      	movs	r3, #2
 800eb1a:	b292      	uxth	r2, r2
 800eb1c:	f7ff ffe8 	bl	800eaf0 <dwt_writetodevice>
 800eb20:	b005      	add	sp, #20
 800eb22:	f85d fb04 	ldr.w	pc, [sp], #4

0800eb26 <ull_setrxantennadelay>:
 800eb26:	b508      	push	{r3, lr}
 800eb28:	460b      	mov	r3, r1
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800eb30:	f7ff ffe9 	bl	800eb06 <dwt_write16bitoffsetreg>
 800eb34:	bd08      	pop	{r3, pc}

0800eb36 <ull_settxantennadelay>:
 800eb36:	b508      	push	{r3, lr}
 800eb38:	460b      	mov	r3, r1
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	217c      	movs	r1, #124	; 0x7c
 800eb3e:	f7ff ffe2 	bl	800eb06 <dwt_write16bitoffsetreg>
 800eb42:	bd08      	pop	{r3, pc}

0800eb44 <ull_force_clocks>:
 800eb44:	b508      	push	{r3, lr}
 800eb46:	2901      	cmp	r1, #1
 800eb48:	d002      	beq.n	800eb50 <ull_force_clocks+0xc>
 800eb4a:	2905      	cmp	r1, #5
 800eb4c:	d007      	beq.n	800eb5e <ull_force_clocks+0x1a>
 800eb4e:	bd08      	pop	{r3, pc}
 800eb50:	f641 0322 	movw	r3, #6178	; 0x1822
 800eb54:	2200      	movs	r2, #0
 800eb56:	4905      	ldr	r1, [pc, #20]	; (800eb6c <ull_force_clocks+0x28>)
 800eb58:	f7ff ffd5 	bl	800eb06 <dwt_write16bitoffsetreg>
 800eb5c:	e7f7      	b.n	800eb4e <ull_force_clocks+0xa>
 800eb5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eb62:	2200      	movs	r2, #0
 800eb64:	4901      	ldr	r1, [pc, #4]	; (800eb6c <ull_force_clocks+0x28>)
 800eb66:	f7ff ffce 	bl	800eb06 <dwt_write16bitoffsetreg>
 800eb6a:	e7f0      	b.n	800eb4e <ull_force_clocks+0xa>
 800eb6c:	00110004 	.word	0x00110004

0800eb70 <__dwt_otp_write_wdata_id_reg>:
 800eb70:	b538      	push	{r3, r4, r5, lr}
 800eb72:	4605      	mov	r5, r0
 800eb74:	460c      	mov	r4, r1
 800eb76:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 800eb7a:	b29b      	uxth	r3, r3
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800eb82:	f7ff ffc0 	bl	800eb06 <dwt_write16bitoffsetreg>
 800eb86:	b2a3      	uxth	r3, r4
 800eb88:	2200      	movs	r2, #0
 800eb8a:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800eb8e:	4628      	mov	r0, r5
 800eb90:	f7ff ffb9 	bl	800eb06 <dwt_write16bitoffsetreg>
 800eb94:	bd38      	pop	{r3, r4, r5, pc}
	...

0800eb98 <_dwt_otpread>:
 800eb98:	b570      	push	{r4, r5, r6, lr}
 800eb9a:	4604      	mov	r4, r0
 800eb9c:	460e      	mov	r6, r1
 800eb9e:	4d0c      	ldr	r5, [pc, #48]	; (800ebd0 <_dwt_otpread+0x38>)
 800eba0:	2301      	movs	r3, #1
 800eba2:	2200      	movs	r2, #0
 800eba4:	4629      	mov	r1, r5
 800eba6:	f7ff ffae 	bl	800eb06 <dwt_write16bitoffsetreg>
 800ebaa:	4633      	mov	r3, r6
 800ebac:	2200      	movs	r2, #0
 800ebae:	4909      	ldr	r1, [pc, #36]	; (800ebd4 <_dwt_otpread+0x3c>)
 800ebb0:	4620      	mov	r0, r4
 800ebb2:	f7ff ffa8 	bl	800eb06 <dwt_write16bitoffsetreg>
 800ebb6:	2302      	movs	r3, #2
 800ebb8:	2200      	movs	r2, #0
 800ebba:	4629      	mov	r1, r5
 800ebbc:	4620      	mov	r0, r4
 800ebbe:	f7ff ffa2 	bl	800eb06 <dwt_write16bitoffsetreg>
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	4904      	ldr	r1, [pc, #16]	; (800ebd8 <_dwt_otpread+0x40>)
 800ebc6:	4620      	mov	r0, r4
 800ebc8:	f7ff fb29 	bl	800e21e <dwt_read32bitoffsetreg>
 800ebcc:	bd70      	pop	{r4, r5, r6, pc}
 800ebce:	bf00      	nop
 800ebd0:	000b0008 	.word	0x000b0008
 800ebd4:	000b0004 	.word	0x000b0004
 800ebd8:	000b0010 	.word	0x000b0010

0800ebdc <dwt_write32bitoffsetreg>:
 800ebdc:	b510      	push	{r4, lr}
 800ebde:	b084      	sub	sp, #16
 800ebe0:	f88d 300c 	strb.w	r3, [sp, #12]
 800ebe4:	0a1c      	lsrs	r4, r3, #8
 800ebe6:	f88d 400d 	strb.w	r4, [sp, #13]
 800ebea:	0c1c      	lsrs	r4, r3, #16
 800ebec:	f88d 400e 	strb.w	r4, [sp, #14]
 800ebf0:	0e1b      	lsrs	r3, r3, #24
 800ebf2:	f88d 300f 	strb.w	r3, [sp, #15]
 800ebf6:	ab03      	add	r3, sp, #12
 800ebf8:	9300      	str	r3, [sp, #0]
 800ebfa:	2304      	movs	r3, #4
 800ebfc:	b292      	uxth	r2, r2
 800ebfe:	f7ff ff77 	bl	800eaf0 <dwt_writetodevice>
 800ec02:	b004      	add	sp, #16
 800ec04:	bd10      	pop	{r4, pc}

0800ec06 <_dwt_adjust_delaytime>:
 800ec06:	b538      	push	{r3, r4, r5, lr}
 800ec08:	4604      	mov	r4, r0
 800ec0a:	b989      	cbnz	r1, 800ec30 <_dwt_adjust_delaytime+0x2a>
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	2128      	movs	r1, #40	; 0x28
 800ec10:	f7ff fb05 	bl	800e21e <dwt_read32bitoffsetreg>
 800ec14:	4605      	mov	r5, r0
 800ec16:	2201      	movs	r2, #1
 800ec18:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800ec1c:	4620      	mov	r0, r4
 800ec1e:	f7ff fb53 	bl	800e2c8 <dwt_read8bitoffsetreg>
 800ec22:	1a2b      	subs	r3, r5, r0
 800ec24:	2200      	movs	r2, #0
 800ec26:	2128      	movs	r1, #40	; 0x28
 800ec28:	4620      	mov	r0, r4
 800ec2a:	f7ff ffd7 	bl	800ebdc <dwt_write32bitoffsetreg>
 800ec2e:	bd38      	pop	{r3, r4, r5, pc}
 800ec30:	2200      	movs	r2, #0
 800ec32:	2128      	movs	r1, #40	; 0x28
 800ec34:	f7ff faf3 	bl	800e21e <dwt_read32bitoffsetreg>
 800ec38:	4605      	mov	r5, r0
 800ec3a:	2201      	movs	r2, #1
 800ec3c:	217c      	movs	r1, #124	; 0x7c
 800ec3e:	4620      	mov	r0, r4
 800ec40:	f7ff fb42 	bl	800e2c8 <dwt_read8bitoffsetreg>
 800ec44:	1a2b      	subs	r3, r5, r0
 800ec46:	2200      	movs	r2, #0
 800ec48:	2128      	movs	r1, #40	; 0x28
 800ec4a:	4620      	mov	r0, r4
 800ec4c:	f7ff ffc6 	bl	800ebdc <dwt_write32bitoffsetreg>
 800ec50:	e7ed      	b.n	800ec2e <_dwt_adjust_delaytime+0x28>

0800ec52 <ull_setrxaftertxdelay>:
 800ec52:	b538      	push	{r3, r4, r5, lr}
 800ec54:	4605      	mov	r5, r0
 800ec56:	460c      	mov	r4, r1
 800ec58:	2200      	movs	r2, #0
 800ec5a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800ec5e:	f7ff fade 	bl	800e21e <dwt_read32bitoffsetreg>
 800ec62:	0d00      	lsrs	r0, r0, #20
 800ec64:	0500      	lsls	r0, r0, #20
 800ec66:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800ec6a:	4303      	orrs	r3, r0
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800ec72:	4628      	mov	r0, r5
 800ec74:	f7ff ffb2 	bl	800ebdc <dwt_write32bitoffsetreg>
 800ec78:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ec7c <ull_setfinegraintxseq>:
 800ec7c:	b508      	push	{r3, lr}
 800ec7e:	b929      	cbnz	r1, 800ec8c <ull_setfinegraintxseq+0x10>
 800ec80:	4b05      	ldr	r3, [pc, #20]	; (800ec98 <ull_setfinegraintxseq+0x1c>)
 800ec82:	2202      	movs	r2, #2
 800ec84:	4905      	ldr	r1, [pc, #20]	; (800ec9c <ull_setfinegraintxseq+0x20>)
 800ec86:	f7ff ffa9 	bl	800ebdc <dwt_write32bitoffsetreg>
 800ec8a:	bd08      	pop	{r3, pc}
 800ec8c:	4b04      	ldr	r3, [pc, #16]	; (800eca0 <ull_setfinegraintxseq+0x24>)
 800ec8e:	2202      	movs	r2, #2
 800ec90:	4902      	ldr	r1, [pc, #8]	; (800ec9c <ull_setfinegraintxseq+0x20>)
 800ec92:	f7ff ffa3 	bl	800ebdc <dwt_write32bitoffsetreg>
 800ec96:	e7f8      	b.n	800ec8a <ull_setfinegraintxseq+0xe>
 800ec98:	00d20874 	.word	0x00d20874
 800ec9c:	00110010 	.word	0x00110010
 800eca0:	04d28874 	.word	0x04d28874

0800eca4 <ull_setlnapamode>:
 800eca4:	b538      	push	{r3, r4, r5, lr}
 800eca6:	4605      	mov	r5, r0
 800eca8:	460c      	mov	r4, r1
 800ecaa:	2200      	movs	r2, #0
 800ecac:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800ecb0:	f7ff fab5 	bl	800e21e <dwt_read32bitoffsetreg>
 800ecb4:	f420 337c 	bic.w	r3, r0, #258048	; 0x3f000
 800ecb8:	f014 0f01 	tst.w	r4, #1
 800ecbc:	bf18      	it	ne
 800ecbe:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
 800ecc2:	f014 0f02 	tst.w	r4, #2
 800ecc6:	bf18      	it	ne
 800ecc8:	f443 5300 	orrne.w	r3, r3, #8192	; 0x2000
 800eccc:	f014 0f04 	tst.w	r4, #4
 800ecd0:	bf18      	it	ne
 800ecd2:	f443 3390 	orrne.w	r3, r3, #73728	; 0x12000
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800ecdc:	4628      	mov	r0, r5
 800ecde:	f7ff ff7d 	bl	800ebdc <dwt_write32bitoffsetreg>
 800ece2:	bd38      	pop	{r3, r4, r5, pc}

0800ece4 <ull_configurestskey>:
 800ece4:	b538      	push	{r3, r4, r5, lr}
 800ece6:	4605      	mov	r5, r0
 800ece8:	460c      	mov	r4, r1
 800ecea:	680b      	ldr	r3, [r1, #0]
 800ecec:	2200      	movs	r2, #0
 800ecee:	490b      	ldr	r1, [pc, #44]	; (800ed1c <ull_configurestskey+0x38>)
 800ecf0:	f7ff ff74 	bl	800ebdc <dwt_write32bitoffsetreg>
 800ecf4:	6863      	ldr	r3, [r4, #4]
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	4909      	ldr	r1, [pc, #36]	; (800ed20 <ull_configurestskey+0x3c>)
 800ecfa:	4628      	mov	r0, r5
 800ecfc:	f7ff ff6e 	bl	800ebdc <dwt_write32bitoffsetreg>
 800ed00:	68a3      	ldr	r3, [r4, #8]
 800ed02:	2200      	movs	r2, #0
 800ed04:	4907      	ldr	r1, [pc, #28]	; (800ed24 <ull_configurestskey+0x40>)
 800ed06:	4628      	mov	r0, r5
 800ed08:	f7ff ff68 	bl	800ebdc <dwt_write32bitoffsetreg>
 800ed0c:	68e3      	ldr	r3, [r4, #12]
 800ed0e:	2200      	movs	r2, #0
 800ed10:	4905      	ldr	r1, [pc, #20]	; (800ed28 <ull_configurestskey+0x44>)
 800ed12:	4628      	mov	r0, r5
 800ed14:	f7ff ff62 	bl	800ebdc <dwt_write32bitoffsetreg>
 800ed18:	bd38      	pop	{r3, r4, r5, pc}
 800ed1a:	bf00      	nop
 800ed1c:	0002000c 	.word	0x0002000c
 800ed20:	00020010 	.word	0x00020010
 800ed24:	00020014 	.word	0x00020014
 800ed28:	00020018 	.word	0x00020018

0800ed2c <ull_configurestsiv>:
 800ed2c:	b538      	push	{r3, r4, r5, lr}
 800ed2e:	4605      	mov	r5, r0
 800ed30:	460c      	mov	r4, r1
 800ed32:	680b      	ldr	r3, [r1, #0]
 800ed34:	2200      	movs	r2, #0
 800ed36:	490b      	ldr	r1, [pc, #44]	; (800ed64 <ull_configurestsiv+0x38>)
 800ed38:	f7ff ff50 	bl	800ebdc <dwt_write32bitoffsetreg>
 800ed3c:	6863      	ldr	r3, [r4, #4]
 800ed3e:	2200      	movs	r2, #0
 800ed40:	4909      	ldr	r1, [pc, #36]	; (800ed68 <ull_configurestsiv+0x3c>)
 800ed42:	4628      	mov	r0, r5
 800ed44:	f7ff ff4a 	bl	800ebdc <dwt_write32bitoffsetreg>
 800ed48:	68a3      	ldr	r3, [r4, #8]
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	4907      	ldr	r1, [pc, #28]	; (800ed6c <ull_configurestsiv+0x40>)
 800ed4e:	4628      	mov	r0, r5
 800ed50:	f7ff ff44 	bl	800ebdc <dwt_write32bitoffsetreg>
 800ed54:	68e3      	ldr	r3, [r4, #12]
 800ed56:	2200      	movs	r2, #0
 800ed58:	4905      	ldr	r1, [pc, #20]	; (800ed70 <ull_configurestsiv+0x44>)
 800ed5a:	4628      	mov	r0, r5
 800ed5c:	f7ff ff3e 	bl	800ebdc <dwt_write32bitoffsetreg>
 800ed60:	bd38      	pop	{r3, r4, r5, pc}
 800ed62:	bf00      	nop
 800ed64:	0002001c 	.word	0x0002001c
 800ed68:	00020020 	.word	0x00020020
 800ed6c:	00020024 	.word	0x00020024
 800ed70:	00020028 	.word	0x00020028

0800ed74 <ull_configmrxlut>:
 800ed74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed78:	4604      	mov	r4, r0
 800ed7a:	4d35      	ldr	r5, [pc, #212]	; (800ee50 <ull_configmrxlut+0xdc>)
 800ed7c:	4b35      	ldr	r3, [pc, #212]	; (800ee54 <ull_configmrxlut+0xe0>)
 800ed7e:	2905      	cmp	r1, #5
 800ed80:	bf18      	it	ne
 800ed82:	461d      	movne	r5, r3
 800ed84:	4e34      	ldr	r6, [pc, #208]	; (800ee58 <ull_configmrxlut+0xe4>)
 800ed86:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800ed8a:	2905      	cmp	r1, #5
 800ed8c:	bf18      	it	ne
 800ed8e:	461e      	movne	r6, r3
 800ed90:	4f32      	ldr	r7, [pc, #200]	; (800ee5c <ull_configmrxlut+0xe8>)
 800ed92:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ed96:	2905      	cmp	r1, #5
 800ed98:	bf18      	it	ne
 800ed9a:	461f      	movne	r7, r3
 800ed9c:	4a30      	ldr	r2, [pc, #192]	; (800ee60 <ull_configmrxlut+0xec>)
 800ed9e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800eda2:	2905      	cmp	r1, #5
 800eda4:	bf0c      	ite	eq
 800eda6:	4690      	moveq	r8, r2
 800eda8:	4698      	movne	r8, r3
 800edaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800edae:	f5a3 5388 	sub.w	r3, r3, #4352	; 0x1100
 800edb2:	2905      	cmp	r1, #5
 800edb4:	bf0c      	ite	eq
 800edb6:	4691      	moveq	r9, r2
 800edb8:	4699      	movne	r9, r3
 800edba:	4a2a      	ldr	r2, [pc, #168]	; (800ee64 <ull_configmrxlut+0xf0>)
 800edbc:	f5a3 63af 	sub.w	r3, r3, #1400	; 0x578
 800edc0:	2905      	cmp	r1, #5
 800edc2:	bf0c      	ite	eq
 800edc4:	4692      	moveq	sl, r2
 800edc6:	469a      	movne	sl, r3
 800edc8:	4b27      	ldr	r3, [pc, #156]	; (800ee68 <ull_configmrxlut+0xf4>)
 800edca:	4a28      	ldr	r2, [pc, #160]	; (800ee6c <ull_configmrxlut+0xf8>)
 800edcc:	2905      	cmp	r1, #5
 800edce:	bf0c      	ite	eq
 800edd0:	469b      	moveq	fp, r3
 800edd2:	4693      	movne	fp, r2
 800edd4:	f44f 7310 	mov.w	r3, #576	; 0x240
 800edd8:	2200      	movs	r2, #0
 800edda:	4925      	ldr	r1, [pc, #148]	; (800ee70 <ull_configmrxlut+0xfc>)
 800eddc:	f7ff fefe 	bl	800ebdc <dwt_write32bitoffsetreg>
 800ede0:	4b24      	ldr	r3, [pc, #144]	; (800ee74 <ull_configmrxlut+0x100>)
 800ede2:	2200      	movs	r2, #0
 800ede4:	4924      	ldr	r1, [pc, #144]	; (800ee78 <ull_configmrxlut+0x104>)
 800ede6:	4620      	mov	r0, r4
 800ede8:	f7ff fef8 	bl	800ebdc <dwt_write32bitoffsetreg>
 800edec:	4b23      	ldr	r3, [pc, #140]	; (800ee7c <ull_configmrxlut+0x108>)
 800edee:	2200      	movs	r2, #0
 800edf0:	4923      	ldr	r1, [pc, #140]	; (800ee80 <ull_configmrxlut+0x10c>)
 800edf2:	4620      	mov	r0, r4
 800edf4:	f7ff fef2 	bl	800ebdc <dwt_write32bitoffsetreg>
 800edf8:	465b      	mov	r3, fp
 800edfa:	2200      	movs	r2, #0
 800edfc:	4921      	ldr	r1, [pc, #132]	; (800ee84 <ull_configmrxlut+0x110>)
 800edfe:	4620      	mov	r0, r4
 800ee00:	f7ff feec 	bl	800ebdc <dwt_write32bitoffsetreg>
 800ee04:	4653      	mov	r3, sl
 800ee06:	2200      	movs	r2, #0
 800ee08:	491f      	ldr	r1, [pc, #124]	; (800ee88 <ull_configmrxlut+0x114>)
 800ee0a:	4620      	mov	r0, r4
 800ee0c:	f7ff fee6 	bl	800ebdc <dwt_write32bitoffsetreg>
 800ee10:	464b      	mov	r3, r9
 800ee12:	2200      	movs	r2, #0
 800ee14:	491d      	ldr	r1, [pc, #116]	; (800ee8c <ull_configmrxlut+0x118>)
 800ee16:	4620      	mov	r0, r4
 800ee18:	f7ff fee0 	bl	800ebdc <dwt_write32bitoffsetreg>
 800ee1c:	4643      	mov	r3, r8
 800ee1e:	2200      	movs	r2, #0
 800ee20:	491b      	ldr	r1, [pc, #108]	; (800ee90 <ull_configmrxlut+0x11c>)
 800ee22:	4620      	mov	r0, r4
 800ee24:	f7ff feda 	bl	800ebdc <dwt_write32bitoffsetreg>
 800ee28:	463b      	mov	r3, r7
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	4919      	ldr	r1, [pc, #100]	; (800ee94 <ull_configmrxlut+0x120>)
 800ee2e:	4620      	mov	r0, r4
 800ee30:	f7ff fed4 	bl	800ebdc <dwt_write32bitoffsetreg>
 800ee34:	4633      	mov	r3, r6
 800ee36:	2200      	movs	r2, #0
 800ee38:	4917      	ldr	r1, [pc, #92]	; (800ee98 <ull_configmrxlut+0x124>)
 800ee3a:	4620      	mov	r0, r4
 800ee3c:	f7ff fece 	bl	800ebdc <dwt_write32bitoffsetreg>
 800ee40:	462b      	mov	r3, r5
 800ee42:	2200      	movs	r2, #0
 800ee44:	4915      	ldr	r1, [pc, #84]	; (800ee9c <ull_configmrxlut+0x128>)
 800ee46:	4620      	mov	r0, r4
 800ee48:	f7ff fec8 	bl	800ebdc <dwt_write32bitoffsetreg>
 800ee4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee50:	00039ff6 	.word	0x00039ff6
 800ee54:	00055ffe 	.word	0x00055ffe
 800ee58:	00039dfe 	.word	0x00039dfe
 800ee5c:	00039c7e 	.word	0x00039c7e
 800ee60:	00038efe 	.word	0x00038efe
 800ee64:	0003876e 	.word	0x0003876e
 800ee68:	0003803e 	.word	0x0003803e
 800ee6c:	0005407e 	.word	0x0005407e
 800ee70:	0003001c 	.word	0x0003001c
 800ee74:	1a491248 	.word	0x1a491248
 800ee78:	00030020 	.word	0x00030020
 800ee7c:	2db248db 	.word	0x2db248db
 800ee80:	00030024 	.word	0x00030024
 800ee84:	0003002c 	.word	0x0003002c
 800ee88:	00030030 	.word	0x00030030
 800ee8c:	00030034 	.word	0x00030034
 800ee90:	00030038 	.word	0x00030038
 800ee94:	0003003c 	.word	0x0003003c
 800ee98:	00030040 	.word	0x00030040
 800ee9c:	00030044 	.word	0x00030044

0800eea0 <ull_disable_rftx_blocks>:
 800eea0:	b508      	push	{r3, lr}
 800eea2:	2300      	movs	r3, #0
 800eea4:	461a      	mov	r2, r3
 800eea6:	4902      	ldr	r1, [pc, #8]	; (800eeb0 <ull_disable_rftx_blocks+0x10>)
 800eea8:	f7ff fe98 	bl	800ebdc <dwt_write32bitoffsetreg>
 800eeac:	bd08      	pop	{r3, pc}
 800eeae:	bf00      	nop
 800eeb0:	00070004 	.word	0x00070004

0800eeb4 <ull_disable_rf_tx>:
 800eeb4:	b538      	push	{r3, r4, r5, lr}
 800eeb6:	4604      	mov	r4, r0
 800eeb8:	460d      	mov	r5, r1
 800eeba:	2300      	movs	r3, #0
 800eebc:	461a      	mov	r2, r3
 800eebe:	490a      	ldr	r1, [pc, #40]	; (800eee8 <ull_disable_rf_tx+0x34>)
 800eec0:	f7ff fe8c 	bl	800ebdc <dwt_write32bitoffsetreg>
 800eec4:	2300      	movs	r3, #0
 800eec6:	461a      	mov	r2, r3
 800eec8:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800eecc:	4620      	mov	r0, r4
 800eece:	f7ff fe85 	bl	800ebdc <dwt_write32bitoffsetreg>
 800eed2:	b905      	cbnz	r5, 800eed6 <ull_disable_rf_tx+0x22>
 800eed4:	bd38      	pop	{r3, r4, r5, pc}
 800eed6:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 800eeda:	2200      	movs	r2, #0
 800eedc:	4903      	ldr	r1, [pc, #12]	; (800eeec <ull_disable_rf_tx+0x38>)
 800eede:	4620      	mov	r0, r4
 800eee0:	f7ff fe7c 	bl	800ebdc <dwt_write32bitoffsetreg>
 800eee4:	e7f6      	b.n	800eed4 <ull_disable_rf_tx+0x20>
 800eee6:	bf00      	nop
 800eee8:	00070048 	.word	0x00070048
 800eeec:	00070014 	.word	0x00070014

0800eef0 <ull_repeated_cw>:
 800eef0:	b570      	push	{r4, r5, r6, lr}
 800eef2:	4606      	mov	r6, r0
 800eef4:	460c      	mov	r4, r1
 800eef6:	4615      	mov	r5, r2
 800eef8:	2100      	movs	r1, #0
 800eefa:	f7ff febf 	bl	800ec7c <ull_setfinegraintxseq>
 800eefe:	2d0f      	cmp	r5, #15
 800ef00:	bfa8      	it	ge
 800ef02:	250f      	movge	r5, #15
 800ef04:	1e63      	subs	r3, r4, #1
 800ef06:	2b03      	cmp	r3, #3
 800ef08:	bf28      	it	cs
 800ef0a:	2404      	movcs	r4, #4
 800ef0c:	2310      	movs	r3, #16
 800ef0e:	4123      	asrs	r3, r4
 800ef10:	2200      	movs	r2, #0
 800ef12:	4907      	ldr	r1, [pc, #28]	; (800ef30 <ull_repeated_cw+0x40>)
 800ef14:	4630      	mov	r0, r6
 800ef16:	f7ff fe61 	bl	800ebdc <dwt_write32bitoffsetreg>
 800ef1a:	1e63      	subs	r3, r4, #1
 800ef1c:	009b      	lsls	r3, r3, #2
 800ef1e:	fa05 f303 	lsl.w	r3, r5, r3
 800ef22:	2200      	movs	r2, #0
 800ef24:	4903      	ldr	r1, [pc, #12]	; (800ef34 <ull_repeated_cw+0x44>)
 800ef26:	4630      	mov	r0, r6
 800ef28:	f7ff fe58 	bl	800ebdc <dwt_write32bitoffsetreg>
 800ef2c:	bd70      	pop	{r4, r5, r6, pc}
 800ef2e:	bf00      	nop
 800ef30:	00070028 	.word	0x00070028
 800ef34:	00080018 	.word	0x00080018

0800ef38 <ull_readrxdata>:
 800ef38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef3a:	b083      	sub	sp, #12
 800ef3c:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800ef3e:	7ba4      	ldrb	r4, [r4, #14]
 800ef40:	2c03      	cmp	r4, #3
 800ef42:	bf0c      	ite	eq
 800ef44:	f44f 1c98 	moveq.w	ip, #1245184	; 0x130000
 800ef48:	f44f 1c90 	movne.w	ip, #1179648	; 0x120000
 800ef4c:	189c      	adds	r4, r3, r2
 800ef4e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800ef52:	da19      	bge.n	800ef88 <ull_readrxdata+0x50>
 800ef54:	461d      	mov	r5, r3
 800ef56:	4616      	mov	r6, r2
 800ef58:	460f      	mov	r7, r1
 800ef5a:	4604      	mov	r4, r0
 800ef5c:	2b7f      	cmp	r3, #127	; 0x7f
 800ef5e:	d915      	bls.n	800ef8c <ull_readrxdata+0x54>
 800ef60:	ea4f 431c 	mov.w	r3, ip, lsr #16
 800ef64:	2200      	movs	r2, #0
 800ef66:	490d      	ldr	r1, [pc, #52]	; (800ef9c <ull_readrxdata+0x64>)
 800ef68:	f7ff fe38 	bl	800ebdc <dwt_write32bitoffsetreg>
 800ef6c:	462b      	mov	r3, r5
 800ef6e:	2200      	movs	r2, #0
 800ef70:	490b      	ldr	r1, [pc, #44]	; (800efa0 <ull_readrxdata+0x68>)
 800ef72:	4620      	mov	r0, r4
 800ef74:	f7ff fe32 	bl	800ebdc <dwt_write32bitoffsetreg>
 800ef78:	9700      	str	r7, [sp, #0]
 800ef7a:	4633      	mov	r3, r6
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800ef82:	4620      	mov	r0, r4
 800ef84:	f7ff f941 	bl	800e20a <dwt_readfromdevice>
 800ef88:	b003      	add	sp, #12
 800ef8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef8c:	9100      	str	r1, [sp, #0]
 800ef8e:	4613      	mov	r3, r2
 800ef90:	462a      	mov	r2, r5
 800ef92:	4661      	mov	r1, ip
 800ef94:	f7ff f939 	bl	800e20a <dwt_readfromdevice>
 800ef98:	e7f6      	b.n	800ef88 <ull_readrxdata+0x50>
 800ef9a:	bf00      	nop
 800ef9c:	001f0004 	.word	0x001f0004
 800efa0:	001f0008 	.word	0x001f0008

0800efa4 <dwt_write8bitoffsetreg>:
 800efa4:	b510      	push	{r4, lr}
 800efa6:	b084      	sub	sp, #16
 800efa8:	ac04      	add	r4, sp, #16
 800efaa:	f804 3d01 	strb.w	r3, [r4, #-1]!
 800efae:	9400      	str	r4, [sp, #0]
 800efb0:	2301      	movs	r3, #1
 800efb2:	b292      	uxth	r2, r2
 800efb4:	f7ff fd9c 	bl	800eaf0 <dwt_writetodevice>
 800efb8:	b004      	add	sp, #16
 800efba:	bd10      	pop	{r4, pc}

0800efbc <ull_getframelength>:
 800efbc:	b510      	push	{r4, lr}
 800efbe:	4604      	mov	r4, r0
 800efc0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800efc2:	7b9b      	ldrb	r3, [r3, #14]
 800efc4:	2b01      	cmp	r3, #1
 800efc6:	d013      	beq.n	800eff0 <ull_getframelength+0x34>
 800efc8:	2b03      	cmp	r3, #3
 800efca:	d11d      	bne.n	800f008 <ull_getframelength+0x4c>
 800efcc:	23f0      	movs	r3, #240	; 0xf0
 800efce:	2200      	movs	r2, #0
 800efd0:	4912      	ldr	r1, [pc, #72]	; (800f01c <ull_getframelength+0x60>)
 800efd2:	f7ff ffe7 	bl	800efa4 <dwt_write8bitoffsetreg>
 800efd6:	2200      	movs	r2, #0
 800efd8:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800efdc:	4620      	mov	r0, r4
 800efde:	f7ff f934 	bl	800e24a <dwt_read16bitoffsetreg>
 800efe2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800efe4:	7ada      	ldrb	r2, [r3, #11]
 800efe6:	b1a2      	cbz	r2, 800f012 <ull_getframelength+0x56>
 800efe8:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800efec:	83d8      	strh	r0, [r3, #30]
 800efee:	bd10      	pop	{r4, pc}
 800eff0:	230f      	movs	r3, #15
 800eff2:	2200      	movs	r2, #0
 800eff4:	4909      	ldr	r1, [pc, #36]	; (800f01c <ull_getframelength+0x60>)
 800eff6:	f7ff ffd5 	bl	800efa4 <dwt_write8bitoffsetreg>
 800effa:	2200      	movs	r2, #0
 800effc:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800f000:	4620      	mov	r0, r4
 800f002:	f7ff f922 	bl	800e24a <dwt_read16bitoffsetreg>
 800f006:	e7ec      	b.n	800efe2 <ull_getframelength+0x26>
 800f008:	2200      	movs	r2, #0
 800f00a:	214c      	movs	r1, #76	; 0x4c
 800f00c:	f7ff f91d 	bl	800e24a <dwt_read16bitoffsetreg>
 800f010:	e7e7      	b.n	800efe2 <ull_getframelength+0x26>
 800f012:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800f016:	83d8      	strh	r0, [r3, #30]
 800f018:	e7e9      	b.n	800efee <ull_getframelength+0x32>
 800f01a:	bf00      	nop
 800f01c:	00010018 	.word	0x00010018

0800f020 <_dwt_clear_db_events>:
 800f020:	b510      	push	{r4, lr}
 800f022:	4604      	mov	r4, r0
 800f024:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f026:	7b9b      	ldrb	r3, [r3, #14]
 800f028:	2b01      	cmp	r3, #1
 800f02a:	d004      	beq.n	800f036 <_dwt_clear_db_events+0x16>
 800f02c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f02e:	7b9b      	ldrb	r3, [r3, #14]
 800f030:	2b03      	cmp	r3, #3
 800f032:	d006      	beq.n	800f042 <_dwt_clear_db_events+0x22>
 800f034:	bd10      	pop	{r4, pc}
 800f036:	230f      	movs	r3, #15
 800f038:	2200      	movs	r2, #0
 800f03a:	4905      	ldr	r1, [pc, #20]	; (800f050 <_dwt_clear_db_events+0x30>)
 800f03c:	f7ff ffb2 	bl	800efa4 <dwt_write8bitoffsetreg>
 800f040:	e7f4      	b.n	800f02c <_dwt_clear_db_events+0xc>
 800f042:	23f0      	movs	r3, #240	; 0xf0
 800f044:	2200      	movs	r2, #0
 800f046:	4902      	ldr	r1, [pc, #8]	; (800f050 <_dwt_clear_db_events+0x30>)
 800f048:	4620      	mov	r0, r4
 800f04a:	f7ff ffab 	bl	800efa4 <dwt_write8bitoffsetreg>
 800f04e:	e7f1      	b.n	800f034 <_dwt_clear_db_events+0x14>
 800f050:	00010018 	.word	0x00010018

0800f054 <ull_clearaonconfig>:
 800f054:	b538      	push	{r3, r4, r5, lr}
 800f056:	4604      	mov	r4, r0
 800f058:	2300      	movs	r3, #0
 800f05a:	461a      	mov	r2, r3
 800f05c:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800f060:	f7ff fd51 	bl	800eb06 <dwt_write16bitoffsetreg>
 800f064:	2300      	movs	r3, #0
 800f066:	461a      	mov	r2, r3
 800f068:	4908      	ldr	r1, [pc, #32]	; (800f08c <ull_clearaonconfig+0x38>)
 800f06a:	4620      	mov	r0, r4
 800f06c:	f7ff ff9a 	bl	800efa4 <dwt_write8bitoffsetreg>
 800f070:	4d07      	ldr	r5, [pc, #28]	; (800f090 <ull_clearaonconfig+0x3c>)
 800f072:	2300      	movs	r3, #0
 800f074:	461a      	mov	r2, r3
 800f076:	4629      	mov	r1, r5
 800f078:	4620      	mov	r0, r4
 800f07a:	f7ff ff93 	bl	800efa4 <dwt_write8bitoffsetreg>
 800f07e:	2302      	movs	r3, #2
 800f080:	2200      	movs	r2, #0
 800f082:	4629      	mov	r1, r5
 800f084:	4620      	mov	r0, r4
 800f086:	f7ff ff8d 	bl	800efa4 <dwt_write8bitoffsetreg>
 800f08a:	bd38      	pop	{r3, r4, r5, pc}
 800f08c:	000a0014 	.word	0x000a0014
 800f090:	000a0004 	.word	0x000a0004

0800f094 <ull_configeventcounters>:
 800f094:	b538      	push	{r3, r4, r5, lr}
 800f096:	4605      	mov	r5, r0
 800f098:	460c      	mov	r4, r1
 800f09a:	2302      	movs	r3, #2
 800f09c:	2200      	movs	r2, #0
 800f09e:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800f0a2:	f7ff ff7f 	bl	800efa4 <dwt_write8bitoffsetreg>
 800f0a6:	b904      	cbnz	r4, 800f0aa <ull_configeventcounters+0x16>
 800f0a8:	bd38      	pop	{r3, r4, r5, pc}
 800f0aa:	2301      	movs	r3, #1
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800f0b2:	4628      	mov	r0, r5
 800f0b4:	f7ff ff76 	bl	800efa4 <dwt_write8bitoffsetreg>
 800f0b8:	e7f6      	b.n	800f0a8 <ull_configeventcounters+0x14>
	...

0800f0bc <ull_aon_read>:
 800f0bc:	b538      	push	{r3, r4, r5, lr}
 800f0be:	4604      	mov	r4, r0
 800f0c0:	460b      	mov	r3, r1
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	490a      	ldr	r1, [pc, #40]	; (800f0f0 <ull_aon_read+0x34>)
 800f0c6:	f7ff fd1e 	bl	800eb06 <dwt_write16bitoffsetreg>
 800f0ca:	4d0a      	ldr	r5, [pc, #40]	; (800f0f4 <ull_aon_read+0x38>)
 800f0cc:	2388      	movs	r3, #136	; 0x88
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	4629      	mov	r1, r5
 800f0d2:	4620      	mov	r0, r4
 800f0d4:	f7ff ff66 	bl	800efa4 <dwt_write8bitoffsetreg>
 800f0d8:	2300      	movs	r3, #0
 800f0da:	461a      	mov	r2, r3
 800f0dc:	4629      	mov	r1, r5
 800f0de:	4620      	mov	r0, r4
 800f0e0:	f7ff ff60 	bl	800efa4 <dwt_write8bitoffsetreg>
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	4904      	ldr	r1, [pc, #16]	; (800f0f8 <ull_aon_read+0x3c>)
 800f0e8:	4620      	mov	r0, r4
 800f0ea:	f7ff f8ed 	bl	800e2c8 <dwt_read8bitoffsetreg>
 800f0ee:	bd38      	pop	{r3, r4, r5, pc}
 800f0f0:	000a000c 	.word	0x000a000c
 800f0f4:	000a0004 	.word	0x000a0004
 800f0f8:	000a0008 	.word	0x000a0008

0800f0fc <ull_aon_write>:
 800f0fc:	b570      	push	{r4, r5, r6, lr}
 800f0fe:	4604      	mov	r4, r0
 800f100:	460b      	mov	r3, r1
 800f102:	4615      	mov	r5, r2
 800f104:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800f108:	bf34      	ite	cc
 800f10a:	2600      	movcc	r6, #0
 800f10c:	2620      	movcs	r6, #32
 800f10e:	2200      	movs	r2, #0
 800f110:	490b      	ldr	r1, [pc, #44]	; (800f140 <ull_aon_write+0x44>)
 800f112:	f7ff fcf8 	bl	800eb06 <dwt_write16bitoffsetreg>
 800f116:	462b      	mov	r3, r5
 800f118:	2200      	movs	r2, #0
 800f11a:	490a      	ldr	r1, [pc, #40]	; (800f144 <ull_aon_write+0x48>)
 800f11c:	4620      	mov	r0, r4
 800f11e:	f7ff ff41 	bl	800efa4 <dwt_write8bitoffsetreg>
 800f122:	4d09      	ldr	r5, [pc, #36]	; (800f148 <ull_aon_write+0x4c>)
 800f124:	f046 0390 	orr.w	r3, r6, #144	; 0x90
 800f128:	2200      	movs	r2, #0
 800f12a:	4629      	mov	r1, r5
 800f12c:	4620      	mov	r0, r4
 800f12e:	f7ff ff39 	bl	800efa4 <dwt_write8bitoffsetreg>
 800f132:	2300      	movs	r3, #0
 800f134:	461a      	mov	r2, r3
 800f136:	4629      	mov	r1, r5
 800f138:	4620      	mov	r0, r4
 800f13a:	f7ff ff33 	bl	800efa4 <dwt_write8bitoffsetreg>
 800f13e:	bd70      	pop	{r4, r5, r6, pc}
 800f140:	000a000c 	.word	0x000a000c
 800f144:	000a0010 	.word	0x000a0010
 800f148:	000a0004 	.word	0x000a0004

0800f14c <ull_configuresleep>:
 800f14c:	b570      	push	{r4, r5, r6, lr}
 800f14e:	4604      	mov	r4, r0
 800f150:	460d      	mov	r5, r1
 800f152:	4616      	mov	r6, r2
 800f154:	2200      	movs	r2, #0
 800f156:	f240 110b 	movw	r1, #267	; 0x10b
 800f15a:	f7ff ffcf 	bl	800f0fc <ull_aon_write>
 800f15e:	f44f 7182 	mov.w	r1, #260	; 0x104
 800f162:	4620      	mov	r0, r4
 800f164:	f7ff ffaa 	bl	800f0bc <ull_aon_read>
 800f168:	f000 021f 	and.w	r2, r0, #31
 800f16c:	f44f 7182 	mov.w	r1, #260	; 0x104
 800f170:	4620      	mov	r0, r4
 800f172:	f7ff ffc3 	bl	800f0fc <ull_aon_write>
 800f176:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f178:	8a1a      	ldrh	r2, [r3, #16]
 800f17a:	4315      	orrs	r5, r2
 800f17c:	821d      	strh	r5, [r3, #16]
 800f17e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f180:	8a13      	ldrh	r3, [r2, #16]
 800f182:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800f186:	bf1c      	itt	ne
 800f188:	f423 6300 	bicne.w	r3, r3, #2048	; 0x800
 800f18c:	8213      	strhne	r3, [r2, #16]
 800f18e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f190:	8a1b      	ldrh	r3, [r3, #16]
 800f192:	2200      	movs	r2, #0
 800f194:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800f198:	4620      	mov	r0, r4
 800f19a:	f7ff fcb4 	bl	800eb06 <dwt_write16bitoffsetreg>
 800f19e:	4633      	mov	r3, r6
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	4902      	ldr	r1, [pc, #8]	; (800f1ac <ull_configuresleep+0x60>)
 800f1a4:	4620      	mov	r0, r4
 800f1a6:	f7ff fefd 	bl	800efa4 <dwt_write8bitoffsetreg>
 800f1aa:	bd70      	pop	{r4, r5, r6, pc}
 800f1ac:	000a0014 	.word	0x000a0014

0800f1b0 <ull_setplenfine>:
 800f1b0:	b508      	push	{r3, lr}
 800f1b2:	460b      	mov	r3, r1
 800f1b4:	2201      	movs	r2, #1
 800f1b6:	2124      	movs	r1, #36	; 0x24
 800f1b8:	f7ff fef4 	bl	800efa4 <dwt_write8bitoffsetreg>
 800f1bc:	bd08      	pop	{r3, pc}
	...

0800f1c0 <ull_update_nonce_GCM>:
 800f1c0:	b500      	push	{lr}
 800f1c2:	b083      	sub	sp, #12
 800f1c4:	9100      	str	r1, [sp, #0]
 800f1c6:	230c      	movs	r3, #12
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	4903      	ldr	r1, [pc, #12]	; (800f1d8 <ull_update_nonce_GCM+0x18>)
 800f1cc:	f7ff fc90 	bl	800eaf0 <dwt_writetodevice>
 800f1d0:	b003      	add	sp, #12
 800f1d2:	f85d fb04 	ldr.w	pc, [sp], #4
 800f1d6:	bf00      	nop
 800f1d8:	00010034 	.word	0x00010034

0800f1dc <ull_update_nonce_CCM>:
 800f1dc:	b500      	push	{lr}
 800f1de:	b087      	sub	sp, #28
 800f1e0:	4613      	mov	r3, r2
 800f1e2:	7a8a      	ldrb	r2, [r1, #10]
 800f1e4:	f88d 2008 	strb.w	r2, [sp, #8]
 800f1e8:	7a4a      	ldrb	r2, [r1, #9]
 800f1ea:	f88d 2009 	strb.w	r2, [sp, #9]
 800f1ee:	7a0a      	ldrb	r2, [r1, #8]
 800f1f0:	f88d 200a 	strb.w	r2, [sp, #10]
 800f1f4:	79ca      	ldrb	r2, [r1, #7]
 800f1f6:	f88d 200b 	strb.w	r2, [sp, #11]
 800f1fa:	798a      	ldrb	r2, [r1, #6]
 800f1fc:	f88d 200c 	strb.w	r2, [sp, #12]
 800f200:	794a      	ldrb	r2, [r1, #5]
 800f202:	f88d 200d 	strb.w	r2, [sp, #13]
 800f206:	790a      	ldrb	r2, [r1, #4]
 800f208:	f88d 200e 	strb.w	r2, [sp, #14]
 800f20c:	78ca      	ldrb	r2, [r1, #3]
 800f20e:	f88d 200f 	strb.w	r2, [sp, #15]
 800f212:	788a      	ldrb	r2, [r1, #2]
 800f214:	f88d 2010 	strb.w	r2, [sp, #16]
 800f218:	784a      	ldrb	r2, [r1, #1]
 800f21a:	f88d 2011 	strb.w	r2, [sp, #17]
 800f21e:	780a      	ldrb	r2, [r1, #0]
 800f220:	f88d 2012 	strb.w	r2, [sp, #18]
 800f224:	2200      	movs	r2, #0
 800f226:	f88d 2013 	strb.w	r2, [sp, #19]
 800f22a:	f88d 3014 	strb.w	r3, [sp, #20]
 800f22e:	0a1b      	lsrs	r3, r3, #8
 800f230:	f88d 3015 	strb.w	r3, [sp, #21]
 800f234:	7b0b      	ldrb	r3, [r1, #12]
 800f236:	f88d 3016 	strb.w	r3, [sp, #22]
 800f23a:	7acb      	ldrb	r3, [r1, #11]
 800f23c:	f88d 3017 	strb.w	r3, [sp, #23]
 800f240:	ab02      	add	r3, sp, #8
 800f242:	9300      	str	r3, [sp, #0]
 800f244:	2310      	movs	r3, #16
 800f246:	4903      	ldr	r1, [pc, #12]	; (800f254 <ull_update_nonce_CCM+0x78>)
 800f248:	f7ff fc52 	bl	800eaf0 <dwt_writetodevice>
 800f24c:	b007      	add	sp, #28
 800f24e:	f85d fb04 	ldr.w	pc, [sp], #4
 800f252:	bf00      	nop
 800f254:	00010034 	.word	0x00010034

0800f258 <ull_writetxdata>:
 800f258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f25a:	b083      	sub	sp, #12
 800f25c:	185c      	adds	r4, r3, r1
 800f25e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800f262:	da24      	bge.n	800f2ae <ull_writetxdata+0x56>
 800f264:	461c      	mov	r4, r3
 800f266:	4617      	mov	r7, r2
 800f268:	460e      	mov	r6, r1
 800f26a:	4605      	mov	r5, r0
 800f26c:	2b7f      	cmp	r3, #127	; 0x7f
 800f26e:	d915      	bls.n	800f29c <ull_writetxdata+0x44>
 800f270:	2314      	movs	r3, #20
 800f272:	2200      	movs	r2, #0
 800f274:	490f      	ldr	r1, [pc, #60]	; (800f2b4 <ull_writetxdata+0x5c>)
 800f276:	f7ff fcb1 	bl	800ebdc <dwt_write32bitoffsetreg>
 800f27a:	4623      	mov	r3, r4
 800f27c:	2200      	movs	r2, #0
 800f27e:	490e      	ldr	r1, [pc, #56]	; (800f2b8 <ull_writetxdata+0x60>)
 800f280:	4628      	mov	r0, r5
 800f282:	f7ff fcab 	bl	800ebdc <dwt_write32bitoffsetreg>
 800f286:	9700      	str	r7, [sp, #0]
 800f288:	4633      	mov	r3, r6
 800f28a:	2200      	movs	r2, #0
 800f28c:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800f290:	4628      	mov	r0, r5
 800f292:	f7ff fc2d 	bl	800eaf0 <dwt_writetodevice>
 800f296:	2000      	movs	r0, #0
 800f298:	b003      	add	sp, #12
 800f29a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f29c:	9200      	str	r2, [sp, #0]
 800f29e:	460b      	mov	r3, r1
 800f2a0:	4622      	mov	r2, r4
 800f2a2:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 800f2a6:	f7ff fc23 	bl	800eaf0 <dwt_writetodevice>
 800f2aa:	2000      	movs	r0, #0
 800f2ac:	e7f4      	b.n	800f298 <ull_writetxdata+0x40>
 800f2ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f2b2:	e7f1      	b.n	800f298 <ull_writetxdata+0x40>
 800f2b4:	001f0004 	.word	0x001f0004
 800f2b8:	001f0008 	.word	0x001f0008

0800f2bc <ull_signal_rx_buff_free>:
 800f2bc:	b510      	push	{r4, lr}
 800f2be:	b082      	sub	sp, #8
 800f2c0:	4604      	mov	r4, r0
 800f2c2:	2302      	movs	r3, #2
 800f2c4:	9301      	str	r3, [sp, #4]
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	9200      	str	r2, [sp, #0]
 800f2ca:	4613      	mov	r3, r2
 800f2cc:	2113      	movs	r1, #19
 800f2ce:	f7fe ff1e 	bl	800e10e <dwt_xfer3xxx>
 800f2d2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f2d4:	7b9a      	ldrb	r2, [r3, #14]
 800f2d6:	2a03      	cmp	r2, #3
 800f2d8:	bf0c      	ite	eq
 800f2da:	2201      	moveq	r2, #1
 800f2dc:	2203      	movne	r2, #3
 800f2de:	739a      	strb	r2, [r3, #14]
 800f2e0:	b002      	add	sp, #8
 800f2e2:	bd10      	pop	{r4, pc}

0800f2e4 <ull_isr>:
 800f2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2e8:	4604      	mov	r4, r0
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 800f2f0:	f7fe ffea 	bl	800e2c8 <dwt_read8bitoffsetreg>
 800f2f4:	4605      	mov	r5, r0
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	2144      	movs	r1, #68	; 0x44
 800f2fa:	4620      	mov	r0, r4
 800f2fc:	f7fe ff8f 	bl	800e21e <dwt_read32bitoffsetreg>
 800f300:	4606      	mov	r6, r0
 800f302:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f304:	2200      	movs	r2, #0
 800f306:	83da      	strh	r2, [r3, #30]
 800f308:	f883 2020 	strb.w	r2, [r3, #32]
 800f30c:	619a      	str	r2, [r3, #24]
 800f30e:	839a      	strh	r2, [r3, #28]
 800f310:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800f314:	625a      	str	r2, [r3, #36]	; 0x24
 800f316:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f318:	625c      	str	r4, [r3, #36]	; 0x24
 800f31a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f31c:	7b9f      	ldrb	r7, [r3, #14]
 800f31e:	2f00      	cmp	r7, #0
 800f320:	d17f      	bne.n	800f422 <ull_isr+0x13e>
 800f322:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f324:	619e      	str	r6, [r3, #24]
 800f326:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
 800f32a:	f898 3015 	ldrb.w	r3, [r8, #21]
 800f32e:	f003 0303 	and.w	r3, r3, #3
 800f332:	2b03      	cmp	r3, #3
 800f334:	f000 8090 	beq.w	800f458 <ull_isr+0x174>
 800f338:	f015 0f80 	tst.w	r5, #128	; 0x80
 800f33c:	f040 8093 	bne.w	800f466 <ull_isr+0x182>
 800f340:	f015 0f01 	tst.w	r5, #1
 800f344:	f040 80c1 	bne.w	800f4ca <ull_isr+0x1e6>
 800f348:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f34c:	d00b      	beq.n	800f366 <ull_isr+0x82>
 800f34e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f350:	b113      	cbz	r3, 800f358 <ull_isr+0x74>
 800f352:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f354:	3018      	adds	r0, #24
 800f356:	4798      	blx	r3
 800f358:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800f35c:	2202      	movs	r2, #2
 800f35e:	2144      	movs	r1, #68	; 0x44
 800f360:	4620      	mov	r0, r4
 800f362:	f7ff fbd0 	bl	800eb06 <dwt_write16bitoffsetreg>
 800f366:	f015 0f08 	tst.w	r5, #8
 800f36a:	d107      	bne.n	800f37c <ull_isr+0x98>
 800f36c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f36e:	7b9b      	ldrb	r3, [r3, #14]
 800f370:	2b00      	cmp	r3, #0
 800f372:	f000 80ea 	beq.w	800f54a <ull_isr+0x266>
 800f376:	2f00      	cmp	r7, #0
 800f378:	f000 80e7 	beq.w	800f54a <ull_isr+0x266>
 800f37c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f37e:	2200      	movs	r2, #0
 800f380:	f883 2020 	strb.w	r2, [r3, #32]
 800f384:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 800f388:	f000 80ad 	beq.w	800f4e6 <ull_isr+0x202>
 800f38c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f38e:	f892 3020 	ldrb.w	r3, [r2, #32]
 800f392:	f043 0308 	orr.w	r3, r3, #8
 800f396:	f882 3020 	strb.w	r3, [r2, #32]
 800f39a:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 800f39e:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 800f3a2:	d008      	beq.n	800f3b6 <ull_isr+0xd2>
 800f3a4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f3a6:	f892 3020 	ldrb.w	r3, [r2, #32]
 800f3aa:	f043 0310 	orr.w	r3, r3, #16
 800f3ae:	f882 3020 	strb.w	r3, [r2, #32]
 800f3b2:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 800f3b6:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800f3ba:	d006      	beq.n	800f3ca <ull_isr+0xe6>
 800f3bc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f3be:	7d53      	ldrb	r3, [r2, #21]
 800f3c0:	f003 0303 	and.w	r3, r3, #3
 800f3c4:	2b03      	cmp	r3, #3
 800f3c6:	f000 809a 	beq.w	800f4fe <ull_isr+0x21a>
 800f3ca:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800f3ce:	f040 80a2 	bne.w	800f516 <ull_isr+0x232>
 800f3d2:	f447 43de 	orr.w	r3, r7, #28416	; 0x6f00
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	2144      	movs	r1, #68	; 0x44
 800f3da:	4620      	mov	r0, r4
 800f3dc:	f7ff fbfe 	bl	800ebdc <dwt_write32bitoffsetreg>
 800f3e0:	4620      	mov	r0, r4
 800f3e2:	f7ff fe1d 	bl	800f020 <_dwt_clear_db_events>
 800f3e6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f3e8:	8bc3      	ldrh	r3, [r0, #30]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	f040 80a2 	bne.w	800f534 <ull_isr+0x250>
 800f3f0:	7d43      	ldrb	r3, [r0, #21]
 800f3f2:	f003 0303 	and.w	r3, r3, #3
 800f3f6:	2b03      	cmp	r3, #3
 800f3f8:	f000 809c 	beq.w	800f534 <ull_isr+0x250>
 800f3fc:	6983      	ldr	r3, [r0, #24]
 800f3fe:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800f402:	6183      	str	r3, [r0, #24]
 800f404:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f406:	6993      	ldr	r3, [r2, #24]
 800f408:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f40c:	6193      	str	r3, [r2, #24]
 800f40e:	69e3      	ldr	r3, [r4, #28]
 800f410:	b113      	cbz	r3, 800f418 <ull_isr+0x134>
 800f412:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f414:	3018      	adds	r0, #24
 800f416:	4798      	blx	r3
 800f418:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f41a:	2200      	movs	r2, #0
 800f41c:	f883 2020 	strb.w	r2, [r3, #32]
 800f420:	e08c      	b.n	800f53c <ull_isr+0x258>
 800f422:	496d      	ldr	r1, [pc, #436]	; (800f5d8 <ull_isr+0x2f4>)
 800f424:	4620      	mov	r0, r4
 800f426:	f7fe ff4f 	bl	800e2c8 <dwt_read8bitoffsetreg>
 800f42a:	4607      	mov	r7, r0
 800f42c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f42e:	7b9b      	ldrb	r3, [r3, #14]
 800f430:	2b03      	cmp	r3, #3
 800f432:	bf08      	it	eq
 800f434:	f3c0 1707 	ubfxeq	r7, r0, #4, #8
 800f438:	f017 0f01 	tst.w	r7, #1
 800f43c:	bf18      	it	ne
 800f43e:	f446 4680 	orrne.w	r6, r6, #16384	; 0x4000
 800f442:	f017 0f02 	tst.w	r7, #2
 800f446:	bf18      	it	ne
 800f448:	f446 5600 	orrne.w	r6, r6, #8192	; 0x2000
 800f44c:	f017 0f04 	tst.w	r7, #4
 800f450:	bf18      	it	ne
 800f452:	f446 6680 	orrne.w	r6, r6, #1024	; 0x400
 800f456:	e764      	b.n	800f322 <ull_isr+0x3e>
 800f458:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800f45c:	bf1c      	itt	ne
 800f45e:	f045 0508 	orrne.w	r5, r5, #8
 800f462:	b2ed      	uxtbne	r5, r5
 800f464:	e768      	b.n	800f338 <ull_isr+0x54>
 800f466:	2200      	movs	r2, #0
 800f468:	2148      	movs	r1, #72	; 0x48
 800f46a:	4620      	mov	r0, r4
 800f46c:	f7fe feed 	bl	800e24a <dwt_read16bitoffsetreg>
 800f470:	f8a8 001c 	strh.w	r0, [r8, #28]
 800f474:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f476:	7d1a      	ldrb	r2, [r3, #20]
 800f478:	b11a      	cbz	r2, 800f482 <ull_isr+0x19e>
 800f47a:	699a      	ldr	r2, [r3, #24]
 800f47c:	f012 0f04 	tst.w	r2, #4
 800f480:	d103      	bne.n	800f48a <ull_isr+0x1a6>
 800f482:	8b9b      	ldrh	r3, [r3, #28]
 800f484:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800f488:	b18b      	cbz	r3, 800f4ae <ull_isr+0x1ca>
 800f48a:	2304      	movs	r3, #4
 800f48c:	2200      	movs	r2, #0
 800f48e:	2144      	movs	r1, #68	; 0x44
 800f490:	4620      	mov	r0, r4
 800f492:	f7ff fd87 	bl	800efa4 <dwt_write8bitoffsetreg>
 800f496:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800f49a:	2200      	movs	r2, #0
 800f49c:	2148      	movs	r1, #72	; 0x48
 800f49e:	4620      	mov	r0, r4
 800f4a0:	f7ff fb31 	bl	800eb06 <dwt_write16bitoffsetreg>
 800f4a4:	6a23      	ldr	r3, [r4, #32]
 800f4a6:	b113      	cbz	r3, 800f4ae <ull_isr+0x1ca>
 800f4a8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f4aa:	3018      	adds	r0, #24
 800f4ac:	4798      	blx	r3
 800f4ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f4b0:	8b9b      	ldrh	r3, [r3, #28]
 800f4b2:	f413 7f80 	tst.w	r3, #256	; 0x100
 800f4b6:	f43f af43 	beq.w	800f340 <ull_isr+0x5c>
 800f4ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f4be:	2200      	movs	r2, #0
 800f4c0:	2148      	movs	r1, #72	; 0x48
 800f4c2:	4620      	mov	r0, r4
 800f4c4:	f7ff fb1f 	bl	800eb06 <dwt_write16bitoffsetreg>
 800f4c8:	e73a      	b.n	800f340 <ull_isr+0x5c>
 800f4ca:	23f8      	movs	r3, #248	; 0xf8
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	2144      	movs	r1, #68	; 0x44
 800f4d0:	4620      	mov	r0, r4
 800f4d2:	f7ff fd67 	bl	800efa4 <dwt_write8bitoffsetreg>
 800f4d6:	6923      	ldr	r3, [r4, #16]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	f43f af35 	beq.w	800f348 <ull_isr+0x64>
 800f4de:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f4e0:	3018      	adds	r0, #24
 800f4e2:	4798      	blx	r3
 800f4e4:	e730      	b.n	800f348 <ull_isr+0x64>
 800f4e6:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800f4ea:	bf1f      	itttt	ne
 800f4ec:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 800f4ee:	f892 3020 	ldrbne.w	r3, [r2, #32]
 800f4f2:	f043 0304 	orrne.w	r3, r3, #4
 800f4f6:	f882 3020 	strbne.w	r3, [r2, #32]
 800f4fa:	2700      	movs	r7, #0
 800f4fc:	e74f      	b.n	800f39e <ull_isr+0xba>
 800f4fe:	f892 3020 	ldrb.w	r3, [r2, #32]
 800f502:	f043 0302 	orr.w	r3, r3, #2
 800f506:	f882 3020 	strb.w	r3, [r2, #32]
 800f50a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f50c:	2200      	movs	r2, #0
 800f50e:	83da      	strh	r2, [r3, #30]
 800f510:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 800f514:	e75d      	b.n	800f3d2 <ull_isr+0xee>
 800f516:	4620      	mov	r0, r4
 800f518:	f7ff fd50 	bl	800efbc <ull_getframelength>
 800f51c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800f520:	f43f af57 	beq.w	800f3d2 <ull_isr+0xee>
 800f524:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f526:	f892 3020 	ldrb.w	r3, [r2, #32]
 800f52a:	f043 0301 	orr.w	r3, r3, #1
 800f52e:	f882 3020 	strb.w	r3, [r2, #32]
 800f532:	e74e      	b.n	800f3d2 <ull_isr+0xee>
 800f534:	6963      	ldr	r3, [r4, #20]
 800f536:	b10b      	cbz	r3, 800f53c <ull_isr+0x258>
 800f538:	3018      	adds	r0, #24
 800f53a:	4798      	blx	r3
 800f53c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f53e:	7b9b      	ldrb	r3, [r3, #14]
 800f540:	bb03      	cbnz	r3, 800f584 <ull_isr+0x2a0>
 800f542:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f544:	2200      	movs	r2, #0
 800f546:	f883 2020 	strb.w	r2, [r3, #32]
 800f54a:	f015 0f10 	tst.w	r5, #16
 800f54e:	d11d      	bne.n	800f58c <ull_isr+0x2a8>
 800f550:	f015 0f20 	tst.w	r5, #32
 800f554:	d12d      	bne.n	800f5b2 <ull_isr+0x2ce>
 800f556:	2200      	movs	r2, #0
 800f558:	4920      	ldr	r1, [pc, #128]	; (800f5dc <ull_isr+0x2f8>)
 800f55a:	4620      	mov	r0, r4
 800f55c:	f7fe feb4 	bl	800e2c8 <dwt_read8bitoffsetreg>
 800f560:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f562:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
 800f566:	f010 0303 	ands.w	r3, r0, #3
 800f56a:	d009      	beq.n	800f580 <ull_isr+0x29c>
 800f56c:	2200      	movs	r2, #0
 800f56e:	491b      	ldr	r1, [pc, #108]	; (800f5dc <ull_isr+0x2f8>)
 800f570:	4620      	mov	r0, r4
 800f572:	f7ff fd17 	bl	800efa4 <dwt_write8bitoffsetreg>
 800f576:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f578:	b113      	cbz	r3, 800f580 <ull_isr+0x29c>
 800f57a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f57c:	3018      	adds	r0, #24
 800f57e:	4798      	blx	r3
 800f580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f584:	4620      	mov	r0, r4
 800f586:	f7ff fe99 	bl	800f2bc <ull_signal_rx_buff_free>
 800f58a:	e7da      	b.n	800f542 <ull_isr+0x25e>
 800f58c:	4b14      	ldr	r3, [pc, #80]	; (800f5e0 <ull_isr+0x2fc>)
 800f58e:	2200      	movs	r2, #0
 800f590:	2144      	movs	r1, #68	; 0x44
 800f592:	4620      	mov	r0, r4
 800f594:	f7ff fb22 	bl	800ebdc <dwt_write32bitoffsetreg>
 800f598:	4620      	mov	r0, r4
 800f59a:	f7ff fd41 	bl	800f020 <_dwt_clear_db_events>
 800f59e:	69e3      	ldr	r3, [r4, #28]
 800f5a0:	b113      	cbz	r3, 800f5a8 <ull_isr+0x2c4>
 800f5a2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f5a4:	3018      	adds	r0, #24
 800f5a6:	4798      	blx	r3
 800f5a8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	f883 2020 	strb.w	r2, [r3, #32]
 800f5b0:	e7ce      	b.n	800f550 <ull_isr+0x26c>
 800f5b2:	4b0c      	ldr	r3, [pc, #48]	; (800f5e4 <ull_isr+0x300>)
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	2144      	movs	r1, #68	; 0x44
 800f5b8:	4620      	mov	r0, r4
 800f5ba:	f7ff fb0f 	bl	800ebdc <dwt_write32bitoffsetreg>
 800f5be:	4620      	mov	r0, r4
 800f5c0:	f7ff fd2e 	bl	800f020 <_dwt_clear_db_events>
 800f5c4:	69a3      	ldr	r3, [r4, #24]
 800f5c6:	b113      	cbz	r3, 800f5ce <ull_isr+0x2ea>
 800f5c8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f5ca:	3018      	adds	r0, #24
 800f5cc:	4798      	blx	r3
 800f5ce:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	f883 2020 	strb.w	r2, [r3, #32]
 800f5d6:	e7be      	b.n	800f556 <ull_isr+0x272>
 800f5d8:	00010018 	.word	0x00010018
 800f5dc:	00110038 	.word	0x00110038
 800f5e0:	34059400 	.word	0x34059400
 800f5e4:	10220400 	.word	0x10220400

0800f5e8 <dwt_modify32bitoffsetreg>:
 800f5e8:	b530      	push	{r4, r5, lr}
 800f5ea:	b085      	sub	sp, #20
 800f5ec:	9c08      	ldr	r4, [sp, #32]
 800f5ee:	f88d 3008 	strb.w	r3, [sp, #8]
 800f5f2:	0a1d      	lsrs	r5, r3, #8
 800f5f4:	f88d 5009 	strb.w	r5, [sp, #9]
 800f5f8:	0c1d      	lsrs	r5, r3, #16
 800f5fa:	f88d 500a 	strb.w	r5, [sp, #10]
 800f5fe:	0e1b      	lsrs	r3, r3, #24
 800f600:	f88d 300b 	strb.w	r3, [sp, #11]
 800f604:	f88d 400c 	strb.w	r4, [sp, #12]
 800f608:	0a23      	lsrs	r3, r4, #8
 800f60a:	f88d 300d 	strb.w	r3, [sp, #13]
 800f60e:	0c23      	lsrs	r3, r4, #16
 800f610:	f88d 300e 	strb.w	r3, [sp, #14]
 800f614:	0e24      	lsrs	r4, r4, #24
 800f616:	f88d 400f 	strb.w	r4, [sp, #15]
 800f61a:	f248 0303 	movw	r3, #32771	; 0x8003
 800f61e:	9301      	str	r3, [sp, #4]
 800f620:	ab02      	add	r3, sp, #8
 800f622:	9300      	str	r3, [sp, #0]
 800f624:	2308      	movs	r3, #8
 800f626:	b292      	uxth	r2, r2
 800f628:	f7fe fd71 	bl	800e10e <dwt_xfer3xxx>
 800f62c:	b005      	add	sp, #20
 800f62e:	bd30      	pop	{r4, r5, pc}

0800f630 <ull_enablegpioclocks>:
 800f630:	b500      	push	{lr}
 800f632:	b083      	sub	sp, #12
 800f634:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f638:	9300      	str	r3, [sp, #0]
 800f63a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f63e:	2200      	movs	r2, #0
 800f640:	4902      	ldr	r1, [pc, #8]	; (800f64c <ull_enablegpioclocks+0x1c>)
 800f642:	f7ff ffd1 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 800f646:	b003      	add	sp, #12
 800f648:	f85d fb04 	ldr.w	pc, [sp], #4
 800f64c:	00110004 	.word	0x00110004

0800f650 <ull_enable_rf_tx>:
 800f650:	b570      	push	{r4, r5, r6, lr}
 800f652:	b082      	sub	sp, #8
 800f654:	4604      	mov	r4, r0
 800f656:	460e      	mov	r6, r1
 800f658:	4d13      	ldr	r5, [pc, #76]	; (800f6a8 <ull_enable_rf_tx+0x58>)
 800f65a:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 800f65e:	9300      	str	r3, [sp, #0]
 800f660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f664:	2200      	movs	r2, #0
 800f666:	4629      	mov	r1, r5
 800f668:	f7ff ffbe 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 800f66c:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 800f670:	9300      	str	r3, [sp, #0]
 800f672:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f676:	2200      	movs	r2, #0
 800f678:	4629      	mov	r1, r5
 800f67a:	4620      	mov	r0, r4
 800f67c:	f7ff ffb4 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 800f680:	4b0a      	ldr	r3, [pc, #40]	; (800f6ac <ull_enable_rf_tx+0x5c>)
 800f682:	9300      	str	r3, [sp, #0]
 800f684:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f688:	2200      	movs	r2, #0
 800f68a:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800f68e:	4620      	mov	r0, r4
 800f690:	f7ff ffaa 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 800f694:	b90e      	cbnz	r6, 800f69a <ull_enable_rf_tx+0x4a>
 800f696:	b002      	add	sp, #8
 800f698:	bd70      	pop	{r4, r5, r6, pc}
 800f69a:	4b05      	ldr	r3, [pc, #20]	; (800f6b0 <ull_enable_rf_tx+0x60>)
 800f69c:	2200      	movs	r2, #0
 800f69e:	4905      	ldr	r1, [pc, #20]	; (800f6b4 <ull_enable_rf_tx+0x64>)
 800f6a0:	4620      	mov	r0, r4
 800f6a2:	f7ff fa9b 	bl	800ebdc <dwt_write32bitoffsetreg>
 800f6a6:	e7f6      	b.n	800f696 <ull_enable_rf_tx+0x46>
 800f6a8:	00070048 	.word	0x00070048
 800f6ac:	02003c00 	.word	0x02003c00
 800f6b0:	01011100 	.word	0x01011100
 800f6b4:	00070014 	.word	0x00070014

0800f6b8 <ull_enable_rftx_blocks>:
 800f6b8:	b500      	push	{lr}
 800f6ba:	b083      	sub	sp, #12
 800f6bc:	4b05      	ldr	r3, [pc, #20]	; (800f6d4 <ull_enable_rftx_blocks+0x1c>)
 800f6be:	9300      	str	r3, [sp, #0]
 800f6c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	4904      	ldr	r1, [pc, #16]	; (800f6d8 <ull_enable_rftx_blocks+0x20>)
 800f6c8:	f7ff ff8e 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 800f6cc:	b003      	add	sp, #12
 800f6ce:	f85d fb04 	ldr.w	pc, [sp], #4
 800f6d2:	bf00      	nop
 800f6d4:	02003c00 	.word	0x02003c00
 800f6d8:	00070004 	.word	0x00070004

0800f6dc <_dwt_otpprogword32>:
 800f6dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f6e0:	b083      	sub	sp, #12
 800f6e2:	4604      	mov	r4, r0
 800f6e4:	460d      	mov	r5, r1
 800f6e6:	4617      	mov	r7, r2
 800f6e8:	4e56      	ldr	r6, [pc, #344]	; (800f844 <_dwt_otpprogword32+0x168>)
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	4631      	mov	r1, r6
 800f6ee:	f7fe fd96 	bl	800e21e <dwt_read32bitoffsetreg>
 800f6f2:	4681      	mov	r9, r0
 800f6f4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800f6f8:	9300      	str	r3, [sp, #0]
 800f6fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f6fe:	2200      	movs	r2, #0
 800f700:	4631      	mov	r1, r6
 800f702:	4620      	mov	r0, r4
 800f704:	f7ff ff70 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 800f708:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800f848 <_dwt_otpprogword32+0x16c>
 800f70c:	2318      	movs	r3, #24
 800f70e:	2200      	movs	r2, #0
 800f710:	4641      	mov	r1, r8
 800f712:	4620      	mov	r0, r4
 800f714:	f7ff f9f7 	bl	800eb06 <dwt_write16bitoffsetreg>
 800f718:	2125      	movs	r1, #37	; 0x25
 800f71a:	4620      	mov	r0, r4
 800f71c:	f7ff fa28 	bl	800eb70 <__dwt_otp_write_wdata_id_reg>
 800f720:	2102      	movs	r1, #2
 800f722:	4620      	mov	r0, r4
 800f724:	f7ff fa24 	bl	800eb70 <__dwt_otp_write_wdata_id_reg>
 800f728:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 800f72c:	4620      	mov	r0, r4
 800f72e:	f7ff fa1f 	bl	800eb70 <__dwt_otp_write_wdata_id_reg>
 800f732:	b2f9      	uxtb	r1, r7
 800f734:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800f738:	4620      	mov	r0, r4
 800f73a:	f7ff fa19 	bl	800eb70 <__dwt_otp_write_wdata_id_reg>
 800f73e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f742:	4620      	mov	r0, r4
 800f744:	f7ff fa14 	bl	800eb70 <__dwt_otp_write_wdata_id_reg>
 800f748:	2100      	movs	r1, #0
 800f74a:	4620      	mov	r0, r4
 800f74c:	f7ff fa10 	bl	800eb70 <__dwt_otp_write_wdata_id_reg>
 800f750:	2102      	movs	r1, #2
 800f752:	4620      	mov	r0, r4
 800f754:	f7ff fa0c 	bl	800eb70 <__dwt_otp_write_wdata_id_reg>
 800f758:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800f75c:	4620      	mov	r0, r4
 800f75e:	f7ff fa07 	bl	800eb70 <__dwt_otp_write_wdata_id_reg>
 800f762:	b2e9      	uxtb	r1, r5
 800f764:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800f768:	4620      	mov	r0, r4
 800f76a:	f7ff fa01 	bl	800eb70 <__dwt_otp_write_wdata_id_reg>
 800f76e:	f3c5 2107 	ubfx	r1, r5, #8, #8
 800f772:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800f776:	4620      	mov	r0, r4
 800f778:	f7ff f9fa 	bl	800eb70 <__dwt_otp_write_wdata_id_reg>
 800f77c:	f3c5 4107 	ubfx	r1, r5, #16, #8
 800f780:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800f784:	4620      	mov	r0, r4
 800f786:	f7ff f9f3 	bl	800eb70 <__dwt_otp_write_wdata_id_reg>
 800f78a:	0e29      	lsrs	r1, r5, #24
 800f78c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800f790:	4620      	mov	r0, r4
 800f792:	f7ff f9ed 	bl	800eb70 <__dwt_otp_write_wdata_id_reg>
 800f796:	2100      	movs	r1, #0
 800f798:	4620      	mov	r0, r4
 800f79a:	f7ff f9e9 	bl	800eb70 <__dwt_otp_write_wdata_id_reg>
 800f79e:	213a      	movs	r1, #58	; 0x3a
 800f7a0:	4620      	mov	r0, r4
 800f7a2:	f7ff f9e5 	bl	800eb70 <__dwt_otp_write_wdata_id_reg>
 800f7a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 800f7aa:	4620      	mov	r0, r4
 800f7ac:	f7ff f9e0 	bl	800eb70 <__dwt_otp_write_wdata_id_reg>
 800f7b0:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800f7b4:	4620      	mov	r0, r4
 800f7b6:	f7ff f9db 	bl	800eb70 <__dwt_otp_write_wdata_id_reg>
 800f7ba:	2100      	movs	r1, #0
 800f7bc:	4620      	mov	r0, r4
 800f7be:	f7ff f9d7 	bl	800eb70 <__dwt_otp_write_wdata_id_reg>
 800f7c2:	213a      	movs	r1, #58	; 0x3a
 800f7c4:	4620      	mov	r0, r4
 800f7c6:	f7ff f9d3 	bl	800eb70 <__dwt_otp_write_wdata_id_reg>
 800f7ca:	f240 1101 	movw	r1, #257	; 0x101
 800f7ce:	4620      	mov	r0, r4
 800f7d0:	f7ff f9ce 	bl	800eb70 <__dwt_otp_write_wdata_id_reg>
 800f7d4:	2302      	movs	r3, #2
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800f7dc:	4620      	mov	r0, r4
 800f7de:	f7ff f992 	bl	800eb06 <dwt_write16bitoffsetreg>
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	461a      	mov	r2, r3
 800f7e6:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800f7ea:	4620      	mov	r0, r4
 800f7ec:	f7ff f98b 	bl	800eb06 <dwt_write16bitoffsetreg>
 800f7f0:	2002      	movs	r0, #2
 800f7f2:	f7f1 feb7 	bl	8001564 <deca_sleep>
 800f7f6:	213a      	movs	r1, #58	; 0x3a
 800f7f8:	4620      	mov	r0, r4
 800f7fa:	f7ff f9b9 	bl	800eb70 <__dwt_otp_write_wdata_id_reg>
 800f7fe:	f44f 7181 	mov.w	r1, #258	; 0x102
 800f802:	4620      	mov	r0, r4
 800f804:	f7ff f9b4 	bl	800eb70 <__dwt_otp_write_wdata_id_reg>
 800f808:	2302      	movs	r3, #2
 800f80a:	2200      	movs	r2, #0
 800f80c:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800f810:	4620      	mov	r0, r4
 800f812:	f7ff f978 	bl	800eb06 <dwt_write16bitoffsetreg>
 800f816:	2300      	movs	r3, #0
 800f818:	461a      	mov	r2, r3
 800f81a:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800f81e:	4620      	mov	r0, r4
 800f820:	f7ff f971 	bl	800eb06 <dwt_write16bitoffsetreg>
 800f824:	2300      	movs	r3, #0
 800f826:	461a      	mov	r2, r3
 800f828:	4641      	mov	r1, r8
 800f82a:	4620      	mov	r0, r4
 800f82c:	f7ff f96b 	bl	800eb06 <dwt_write16bitoffsetreg>
 800f830:	464b      	mov	r3, r9
 800f832:	2200      	movs	r2, #0
 800f834:	4631      	mov	r1, r6
 800f836:	4620      	mov	r0, r4
 800f838:	f7ff f9d0 	bl	800ebdc <dwt_write32bitoffsetreg>
 800f83c:	b003      	add	sp, #12
 800f83e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f842:	bf00      	nop
 800f844:	00070044 	.word	0x00070044
 800f848:	000b0008 	.word	0x000b0008

0800f84c <ull_setgpiomode>:
 800f84c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f84e:	b083      	sub	sp, #12
 800f850:	2400      	movs	r4, #0
 800f852:	4623      	mov	r3, r4
 800f854:	2601      	movs	r6, #1
 800f856:	2707      	movs	r7, #7
 800f858:	e002      	b.n	800f860 <ull_setgpiomode+0x14>
 800f85a:	3401      	adds	r4, #1
 800f85c:	2c09      	cmp	r4, #9
 800f85e:	d009      	beq.n	800f874 <ull_setgpiomode+0x28>
 800f860:	fa06 f504 	lsl.w	r5, r6, r4
 800f864:	420d      	tst	r5, r1
 800f866:	d0f8      	beq.n	800f85a <ull_setgpiomode+0xe>
 800f868:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800f86c:	fa07 f505 	lsl.w	r5, r7, r5
 800f870:	432b      	orrs	r3, r5
 800f872:	e7f2      	b.n	800f85a <ull_setgpiomode+0xe>
 800f874:	401a      	ands	r2, r3
 800f876:	9200      	str	r2, [sp, #0]
 800f878:	43db      	mvns	r3, r3
 800f87a:	2200      	movs	r2, #0
 800f87c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800f880:	f7ff feb2 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 800f884:	b003      	add	sp, #12
 800f886:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f888 <ull_writetxfctrl>:
 800f888:	b500      	push	{lr}
 800f88a:	b083      	sub	sp, #12
 800f88c:	2a7f      	cmp	r2, #127	; 0x7f
 800f88e:	bf88      	it	hi
 800f890:	3280      	addhi	r2, #128	; 0x80
 800f892:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 800f896:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f89a:	9100      	str	r1, [sp, #0]
 800f89c:	4b03      	ldr	r3, [pc, #12]	; (800f8ac <ull_writetxfctrl+0x24>)
 800f89e:	2200      	movs	r2, #0
 800f8a0:	2120      	movs	r1, #32
 800f8a2:	f7ff fea1 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 800f8a6:	b003      	add	sp, #12
 800f8a8:	f85d fb04 	ldr.w	pc, [sp], #4
 800f8ac:	fc00f400 	.word	0xfc00f400

0800f8b0 <prs_sys_status_and_or>:
 800f8b0:	b500      	push	{lr}
 800f8b2:	b083      	sub	sp, #12
 800f8b4:	9200      	str	r2, [sp, #0]
 800f8b6:	460b      	mov	r3, r1
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	2144      	movs	r1, #68	; 0x44
 800f8bc:	f7ff fe94 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 800f8c0:	2000      	movs	r0, #0
 800f8c2:	b003      	add	sp, #12
 800f8c4:	f85d fb04 	ldr.w	pc, [sp], #4

0800f8c8 <dwt_modify8bitoffsetreg>:
 800f8c8:	b500      	push	{lr}
 800f8ca:	b085      	sub	sp, #20
 800f8cc:	f88d 300c 	strb.w	r3, [sp, #12]
 800f8d0:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800f8d4:	f88d 300d 	strb.w	r3, [sp, #13]
 800f8d8:	f248 0301 	movw	r3, #32769	; 0x8001
 800f8dc:	9301      	str	r3, [sp, #4]
 800f8de:	ab03      	add	r3, sp, #12
 800f8e0:	9300      	str	r3, [sp, #0]
 800f8e2:	2302      	movs	r3, #2
 800f8e4:	b292      	uxth	r2, r2
 800f8e6:	f7fe fc12 	bl	800e10e <dwt_xfer3xxx>
 800f8ea:	b005      	add	sp, #20
 800f8ec:	f85d fb04 	ldr.w	pc, [sp], #4

0800f8f0 <ull_enablespicrccheck>:
 800f8f0:	b570      	push	{r4, r5, r6, lr}
 800f8f2:	b082      	sub	sp, #8
 800f8f4:	4604      	mov	r4, r0
 800f8f6:	460d      	mov	r5, r1
 800f8f8:	b159      	cbz	r1, 800f912 <ull_enablespicrccheck+0x22>
 800f8fa:	4616      	mov	r6, r2
 800f8fc:	2340      	movs	r3, #64	; 0x40
 800f8fe:	9300      	str	r3, [sp, #0]
 800f900:	23ff      	movs	r3, #255	; 0xff
 800f902:	2200      	movs	r2, #0
 800f904:	2110      	movs	r1, #16
 800f906:	f7ff ffdf 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 800f90a:	2d02      	cmp	r5, #2
 800f90c:	d107      	bne.n	800f91e <ull_enablespicrccheck+0x2e>
 800f90e:	60e6      	str	r6, [r4, #12]
 800f910:	e005      	b.n	800f91e <ull_enablespicrccheck+0x2e>
 800f912:	2200      	movs	r2, #0
 800f914:	9200      	str	r2, [sp, #0]
 800f916:	23bf      	movs	r3, #191	; 0xbf
 800f918:	2110      	movs	r1, #16
 800f91a:	f7ff ffd5 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 800f91e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f920:	751d      	strb	r5, [r3, #20]
 800f922:	b002      	add	sp, #8
 800f924:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f928 <ull_configciadiag>:
 800f928:	b530      	push	{r4, r5, lr}
 800f92a:	b083      	sub	sp, #12
 800f92c:	4604      	mov	r4, r0
 800f92e:	460d      	mov	r5, r1
 800f930:	f011 0f01 	tst.w	r1, #1
 800f934:	d015      	beq.n	800f962 <ull_configciadiag+0x3a>
 800f936:	2300      	movs	r3, #0
 800f938:	9300      	str	r3, [sp, #0]
 800f93a:	23ef      	movs	r3, #239	; 0xef
 800f93c:	2202      	movs	r2, #2
 800f93e:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800f942:	f7ff ffc1 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 800f946:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f948:	759d      	strb	r5, [r3, #22]
 800f94a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f94c:	7d9b      	ldrb	r3, [r3, #22]
 800f94e:	085b      	lsrs	r3, r3, #1
 800f950:	d010      	beq.n	800f974 <ull_configciadiag+0x4c>
 800f952:	086b      	lsrs	r3, r5, #1
 800f954:	2200      	movs	r2, #0
 800f956:	490e      	ldr	r1, [pc, #56]	; (800f990 <ull_configciadiag+0x68>)
 800f958:	4620      	mov	r0, r4
 800f95a:	f7ff fb23 	bl	800efa4 <dwt_write8bitoffsetreg>
 800f95e:	b003      	add	sp, #12
 800f960:	bd30      	pop	{r4, r5, pc}
 800f962:	2310      	movs	r3, #16
 800f964:	9300      	str	r3, [sp, #0]
 800f966:	23ff      	movs	r3, #255	; 0xff
 800f968:	2202      	movs	r2, #2
 800f96a:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800f96e:	f7ff ffab 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 800f972:	e7e8      	b.n	800f946 <ull_configciadiag+0x1e>
 800f974:	2301      	movs	r3, #1
 800f976:	9300      	str	r3, [sp, #0]
 800f978:	23ff      	movs	r3, #255	; 0xff
 800f97a:	2200      	movs	r2, #0
 800f97c:	4904      	ldr	r1, [pc, #16]	; (800f990 <ull_configciadiag+0x68>)
 800f97e:	4620      	mov	r0, r4
 800f980:	f7ff ffa2 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 800f984:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f986:	7d93      	ldrb	r3, [r2, #22]
 800f988:	f043 0302 	orr.w	r3, r3, #2
 800f98c:	7593      	strb	r3, [r2, #22]
 800f98e:	e7e6      	b.n	800f95e <ull_configciadiag+0x36>
 800f990:	00010020 	.word	0x00010020

0800f994 <ull_configurestsloadiv>:
 800f994:	b500      	push	{lr}
 800f996:	b083      	sub	sp, #12
 800f998:	2301      	movs	r3, #1
 800f99a:	9300      	str	r3, [sp, #0]
 800f99c:	23ff      	movs	r3, #255	; 0xff
 800f99e:	2200      	movs	r2, #0
 800f9a0:	4902      	ldr	r1, [pc, #8]	; (800f9ac <ull_configurestsloadiv+0x18>)
 800f9a2:	f7ff ff91 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 800f9a6:	b003      	add	sp, #12
 800f9a8:	f85d fb04 	ldr.w	pc, [sp], #4
 800f9ac:	00020004 	.word	0x00020004

0800f9b0 <ull_adcoffsetscalibration>:
 800f9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9b4:	b08b      	sub	sp, #44	; 0x2c
 800f9b6:	4607      	mov	r7, r0
 800f9b8:	f8df 8220 	ldr.w	r8, [pc, #544]	; 800fbdc <ull_adcoffsetscalibration+0x22c>
 800f9bc:	2200      	movs	r2, #0
 800f9be:	4641      	mov	r1, r8
 800f9c0:	f7fe fc2d 	bl	800e21e <dwt_read32bitoffsetreg>
 800f9c4:	9004      	str	r0, [sp, #16]
 800f9c6:	4c7d      	ldr	r4, [pc, #500]	; (800fbbc <ull_adcoffsetscalibration+0x20c>)
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	4621      	mov	r1, r4
 800f9cc:	4638      	mov	r0, r7
 800f9ce:	f7fe fc26 	bl	800e21e <dwt_read32bitoffsetreg>
 800f9d2:	9005      	str	r0, [sp, #20]
 800f9d4:	4d7a      	ldr	r5, [pc, #488]	; (800fbc0 <ull_adcoffsetscalibration+0x210>)
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	4629      	mov	r1, r5
 800f9da:	4638      	mov	r0, r7
 800f9dc:	f7fe fc74 	bl	800e2c8 <dwt_read8bitoffsetreg>
 800f9e0:	9006      	str	r0, [sp, #24]
 800f9e2:	4e78      	ldr	r6, [pc, #480]	; (800fbc4 <ull_adcoffsetscalibration+0x214>)
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	4631      	mov	r1, r6
 800f9e8:	4638      	mov	r0, r7
 800f9ea:	f7fe fc18 	bl	800e21e <dwt_read32bitoffsetreg>
 800f9ee:	4682      	mov	sl, r0
 800f9f0:	9007      	str	r0, [sp, #28]
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	4974      	ldr	r1, [pc, #464]	; (800fbc8 <ull_adcoffsetscalibration+0x218>)
 800f9f6:	4638      	mov	r0, r7
 800f9f8:	f7fe fc11 	bl	800e21e <dwt_read32bitoffsetreg>
 800f9fc:	4681      	mov	r9, r0
 800f9fe:	4b73      	ldr	r3, [pc, #460]	; (800fbcc <ull_adcoffsetscalibration+0x21c>)
 800fa00:	9300      	str	r3, [sp, #0]
 800fa02:	f06f 537c 	mvn.w	r3, #1056964608	; 0x3f000000
 800fa06:	2200      	movs	r2, #0
 800fa08:	4641      	mov	r1, r8
 800fa0a:	4638      	mov	r0, r7
 800fa0c:	f7ff fdec 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 800fa10:	464b      	mov	r3, r9
 800fa12:	2200      	movs	r2, #0
 800fa14:	4631      	mov	r1, r6
 800fa16:	4638      	mov	r0, r7
 800fa18:	f7ff f8e0 	bl	800ebdc <dwt_write32bitoffsetreg>
 800fa1c:	4653      	mov	r3, sl
 800fa1e:	00db      	lsls	r3, r3, #3
 800fa20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fa24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa28:	9300      	str	r3, [sp, #0]
 800fa2a:	2386      	movs	r3, #134	; 0x86
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	4621      	mov	r1, r4
 800fa30:	4638      	mov	r0, r7
 800fa32:	f7ff ff49 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 800fa36:	2300      	movs	r3, #0
 800fa38:	2203      	movs	r2, #3
 800fa3a:	4621      	mov	r1, r4
 800fa3c:	4638      	mov	r0, r7
 800fa3e:	f7ff fab1 	bl	800efa4 <dwt_write8bitoffsetreg>
 800fa42:	f04f 0900 	mov.w	r9, #0
 800fa46:	f8cd 9000 	str.w	r9, [sp]
 800fa4a:	23fe      	movs	r3, #254	; 0xfe
 800fa4c:	464a      	mov	r2, r9
 800fa4e:	4629      	mov	r1, r5
 800fa50:	4638      	mov	r0, r7
 800fa52:	f7ff ff39 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 800fa56:	464a      	mov	r2, r9
 800fa58:	213c      	movs	r1, #60	; 0x3c
 800fa5a:	4638      	mov	r0, r7
 800fa5c:	f7fe fbdf 	bl	800e21e <dwt_read32bitoffsetreg>
 800fa60:	9008      	str	r0, [sp, #32]
 800fa62:	464a      	mov	r2, r9
 800fa64:	2140      	movs	r1, #64	; 0x40
 800fa66:	4638      	mov	r0, r7
 800fa68:	f7fe fbd9 	bl	800e21e <dwt_read32bitoffsetreg>
 800fa6c:	9009      	str	r0, [sp, #36]	; 0x24
 800fa6e:	464b      	mov	r3, r9
 800fa70:	464a      	mov	r2, r9
 800fa72:	213c      	movs	r1, #60	; 0x3c
 800fa74:	4638      	mov	r0, r7
 800fa76:	f7ff f8b1 	bl	800ebdc <dwt_write32bitoffsetreg>
 800fa7a:	464b      	mov	r3, r9
 800fa7c:	464a      	mov	r2, r9
 800fa7e:	2140      	movs	r1, #64	; 0x40
 800fa80:	4638      	mov	r0, r7
 800fa82:	f7ff f8ab 	bl	800ebdc <dwt_write32bitoffsetreg>
 800fa86:	f7f5 fdf3 	bl	8005670 <dwt_forcetrxoff>
 800fa8a:	f04f 0b02 	mov.w	fp, #2
 800fa8e:	464c      	mov	r4, r9
 800fa90:	464d      	mov	r5, r9
 800fa92:	464e      	mov	r6, r9
 800fa94:	46c8      	mov	r8, r9
 800fa96:	f8cd 900c 	str.w	r9, [sp, #12]
 800fa9a:	46ca      	mov	sl, r9
 800fa9c:	e00e      	b.n	800fabc <ull_adcoffsetscalibration+0x10c>
 800fa9e:	f7f5 fde7 	bl	8005670 <dwt_forcetrxoff>
 800faa2:	9b03      	ldr	r3, [sp, #12]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	f000 8082 	beq.w	800fbae <ull_adcoffsetscalibration+0x1fe>
 800faaa:	f1bb 0f01 	cmp.w	fp, #1
 800faae:	f000 8081 	beq.w	800fbb4 <ull_adcoffsetscalibration+0x204>
 800fab2:	2301      	movs	r3, #1
 800fab4:	9303      	str	r3, [sp, #12]
 800fab6:	f1bb 0b01 	subs.w	fp, fp, #1
 800faba:	d043      	beq.n	800fb44 <ull_adcoffsetscalibration+0x194>
 800fabc:	4650      	mov	r0, sl
 800fabe:	f7f5 fde5 	bl	800568c <dwt_rxenable>
 800fac2:	2014      	movs	r0, #20
 800fac4:	f7f1 fd59 	bl	800157a <deca_usleep>
 800fac8:	f04f 0904 	mov.w	r9, #4
 800facc:	f8cd a000 	str.w	sl, [sp]
 800fad0:	23fe      	movs	r3, #254	; 0xfe
 800fad2:	4652      	mov	r2, sl
 800fad4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800fad8:	4638      	mov	r0, r7
 800fada:	f7ff fef5 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 800fade:	2301      	movs	r3, #1
 800fae0:	9300      	str	r3, [sp, #0]
 800fae2:	23fe      	movs	r3, #254	; 0xfe
 800fae4:	4652      	mov	r2, sl
 800fae6:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800faea:	4638      	mov	r0, r7
 800faec:	f7ff feec 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 800faf0:	4652      	mov	r2, sl
 800faf2:	4937      	ldr	r1, [pc, #220]	; (800fbd0 <ull_adcoffsetscalibration+0x220>)
 800faf4:	4638      	mov	r0, r7
 800faf6:	f7fe fb92 	bl	800e21e <dwt_read32bitoffsetreg>
 800fafa:	fa58 f880 	uxtab	r8, r8, r0
 800fafe:	fa1f f888 	uxth.w	r8, r8
 800fb02:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800fb06:	441e      	add	r6, r3
 800fb08:	b2b6      	uxth	r6, r6
 800fb0a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800fb0e:	441d      	add	r5, r3
 800fb10:	b2ad      	uxth	r5, r5
 800fb12:	eb04 6410 	add.w	r4, r4, r0, lsr #24
 800fb16:	b2a4      	uxth	r4, r4
 800fb18:	f1b9 0901 	subs.w	r9, r9, #1
 800fb1c:	d1d6      	bne.n	800facc <ull_adcoffsetscalibration+0x11c>
 800fb1e:	f3c8 0887 	ubfx	r8, r8, #2, #8
 800fb22:	f3c6 0687 	ubfx	r6, r6, #2, #8
 800fb26:	f3c5 0587 	ubfx	r5, r5, #2, #8
 800fb2a:	f3c4 0487 	ubfx	r4, r4, #2, #8
 800fb2e:	4652      	mov	r2, sl
 800fb30:	2144      	movs	r1, #68	; 0x44
 800fb32:	4638      	mov	r0, r7
 800fb34:	f7fe fb73 	bl	800e21e <dwt_read32bitoffsetreg>
 800fb38:	4b26      	ldr	r3, [pc, #152]	; (800fbd4 <ull_adcoffsetscalibration+0x224>)
 800fb3a:	4218      	tst	r0, r3
 800fb3c:	d0af      	beq.n	800fa9e <ull_adcoffsetscalibration+0xee>
 800fb3e:	f7f5 fd97 	bl	8005670 <dwt_forcetrxoff>
 800fb42:	e7b2      	b.n	800faaa <ull_adcoffsetscalibration+0xfa>
 800fb44:	f04f 0900 	mov.w	r9, #0
 800fb48:	9b08      	ldr	r3, [sp, #32]
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	213c      	movs	r1, #60	; 0x3c
 800fb4e:	4638      	mov	r0, r7
 800fb50:	f7ff f844 	bl	800ebdc <dwt_write32bitoffsetreg>
 800fb54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb56:	2200      	movs	r2, #0
 800fb58:	2140      	movs	r1, #64	; 0x40
 800fb5a:	4638      	mov	r0, r7
 800fb5c:	f7ff f83e 	bl	800ebdc <dwt_write32bitoffsetreg>
 800fb60:	042b      	lsls	r3, r5, #16
 800fb62:	eb03 6304 	add.w	r3, r3, r4, lsl #24
 800fb66:	eb03 2306 	add.w	r3, r3, r6, lsl #8
 800fb6a:	4443      	add	r3, r8
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	491a      	ldr	r1, [pc, #104]	; (800fbd8 <ull_adcoffsetscalibration+0x228>)
 800fb70:	4638      	mov	r0, r7
 800fb72:	f7ff f833 	bl	800ebdc <dwt_write32bitoffsetreg>
 800fb76:	9b04      	ldr	r3, [sp, #16]
 800fb78:	2200      	movs	r2, #0
 800fb7a:	4918      	ldr	r1, [pc, #96]	; (800fbdc <ull_adcoffsetscalibration+0x22c>)
 800fb7c:	4638      	mov	r0, r7
 800fb7e:	f7ff f82d 	bl	800ebdc <dwt_write32bitoffsetreg>
 800fb82:	9b05      	ldr	r3, [sp, #20]
 800fb84:	2200      	movs	r2, #0
 800fb86:	490d      	ldr	r1, [pc, #52]	; (800fbbc <ull_adcoffsetscalibration+0x20c>)
 800fb88:	4638      	mov	r0, r7
 800fb8a:	f7ff f827 	bl	800ebdc <dwt_write32bitoffsetreg>
 800fb8e:	9b06      	ldr	r3, [sp, #24]
 800fb90:	2200      	movs	r2, #0
 800fb92:	490b      	ldr	r1, [pc, #44]	; (800fbc0 <ull_adcoffsetscalibration+0x210>)
 800fb94:	4638      	mov	r0, r7
 800fb96:	f7ff fa05 	bl	800efa4 <dwt_write8bitoffsetreg>
 800fb9a:	9b07      	ldr	r3, [sp, #28]
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	4909      	ldr	r1, [pc, #36]	; (800fbc4 <ull_adcoffsetscalibration+0x214>)
 800fba0:	4638      	mov	r0, r7
 800fba2:	f7ff f81b 	bl	800ebdc <dwt_write32bitoffsetreg>
 800fba6:	4648      	mov	r0, r9
 800fba8:	b00b      	add	sp, #44	; 0x2c
 800fbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbae:	f04f 0900 	mov.w	r9, #0
 800fbb2:	e7c9      	b.n	800fb48 <ull_adcoffsetscalibration+0x198>
 800fbb4:	f06f 0905 	mvn.w	r9, #5
 800fbb8:	e7c6      	b.n	800fb48 <ull_adcoffsetscalibration+0x198>
 800fbba:	bf00      	nop
 800fbbc:	00030014 	.word	0x00030014
 800fbc0:	00030018 	.word	0x00030018
 800fbc4:	0003002c 	.word	0x0003002c
 800fbc8:	00030044 	.word	0x00030044
 800fbcc:	38010000 	.word	0x38010000
 800fbd0:	0003004c 	.word	0x0003004c
 800fbd4:	3427ff00 	.word	0x3427ff00
 800fbd8:	00030010 	.word	0x00030010
 800fbdc:	00070014 	.word	0x00070014

0800fbe0 <ull_restoreconfig>:
 800fbe0:	b510      	push	{r4, lr}
 800fbe2:	4604      	mov	r4, r0
 800fbe4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fbe6:	7d9b      	ldrb	r3, [r3, #22]
 800fbe8:	085b      	lsrs	r3, r3, #1
 800fbea:	d01a      	beq.n	800fc22 <ull_restoreconfig+0x42>
 800fbec:	2200      	movs	r2, #0
 800fbee:	4912      	ldr	r1, [pc, #72]	; (800fc38 <ull_restoreconfig+0x58>)
 800fbf0:	4620      	mov	r0, r4
 800fbf2:	f7fe fb2a 	bl	800e24a <dwt_read16bitoffsetreg>
 800fbf6:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 800fbfa:	3b09      	subs	r3, #9
 800fbfc:	2b0f      	cmp	r3, #15
 800fbfe:	d80c      	bhi.n	800fc1a <ull_restoreconfig+0x3a>
 800fc00:	f000 0001 	and.w	r0, r0, #1
 800fc04:	2800      	cmp	r0, #0
 800fc06:	bf0c      	ite	eq
 800fc08:	2105      	moveq	r1, #5
 800fc0a:	2109      	movne	r1, #9
 800fc0c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800fc0e:	7a1b      	ldrb	r3, [r3, #8]
 800fc10:	2b01      	cmp	r3, #1
 800fc12:	d002      	beq.n	800fc1a <ull_restoreconfig+0x3a>
 800fc14:	4620      	mov	r0, r4
 800fc16:	f7ff f8ad 	bl	800ed74 <ull_configmrxlut>
 800fc1a:	4620      	mov	r0, r4
 800fc1c:	f7ff fec8 	bl	800f9b0 <ull_adcoffsetscalibration>
 800fc20:	bd10      	pop	{r4, pc}
 800fc22:	2301      	movs	r3, #1
 800fc24:	2200      	movs	r2, #0
 800fc26:	4905      	ldr	r1, [pc, #20]	; (800fc3c <ull_restoreconfig+0x5c>)
 800fc28:	f7ff f9bc 	bl	800efa4 <dwt_write8bitoffsetreg>
 800fc2c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800fc2e:	7d93      	ldrb	r3, [r2, #22]
 800fc30:	f043 0302 	orr.w	r3, r3, #2
 800fc34:	7593      	strb	r3, [r2, #22]
 800fc36:	e7d9      	b.n	800fbec <ull_restoreconfig+0xc>
 800fc38:	00010008 	.word	0x00010008
 800fc3c:	00010020 	.word	0x00010020

0800fc40 <ull_calcbandwidthadj>:
 800fc40:	b570      	push	{r4, r5, r6, lr}
 800fc42:	b082      	sub	sp, #8
 800fc44:	4604      	mov	r4, r0
 800fc46:	460d      	mov	r5, r1
 800fc48:	2101      	movs	r1, #1
 800fc4a:	f7fe ff7b 	bl	800eb44 <ull_force_clocks>
 800fc4e:	2100      	movs	r1, #0
 800fc50:	4620      	mov	r0, r4
 800fc52:	f7ff fcfd 	bl	800f650 <ull_enable_rf_tx>
 800fc56:	4620      	mov	r0, r4
 800fc58:	f7ff fd2e 	bl	800f6b8 <ull_enable_rftx_blocks>
 800fc5c:	f3c5 030b 	ubfx	r3, r5, #0, #12
 800fc60:	2200      	movs	r2, #0
 800fc62:	4915      	ldr	r1, [pc, #84]	; (800fcb8 <ull_calcbandwidthadj+0x78>)
 800fc64:	4620      	mov	r0, r4
 800fc66:	f7fe ff4e 	bl	800eb06 <dwt_write16bitoffsetreg>
 800fc6a:	2303      	movs	r3, #3
 800fc6c:	9300      	str	r3, [sp, #0]
 800fc6e:	23ff      	movs	r3, #255	; 0xff
 800fc70:	2200      	movs	r2, #0
 800fc72:	4912      	ldr	r1, [pc, #72]	; (800fcbc <ull_calcbandwidthadj+0x7c>)
 800fc74:	4620      	mov	r0, r4
 800fc76:	f7ff fe27 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 800fc7a:	4e10      	ldr	r6, [pc, #64]	; (800fcbc <ull_calcbandwidthadj+0x7c>)
 800fc7c:	2500      	movs	r5, #0
 800fc7e:	462a      	mov	r2, r5
 800fc80:	4631      	mov	r1, r6
 800fc82:	4620      	mov	r0, r4
 800fc84:	f7fe fb20 	bl	800e2c8 <dwt_read8bitoffsetreg>
 800fc88:	f010 0f01 	tst.w	r0, #1
 800fc8c:	d1f7      	bne.n	800fc7e <ull_calcbandwidthadj+0x3e>
 800fc8e:	4620      	mov	r0, r4
 800fc90:	f7ff f906 	bl	800eea0 <ull_disable_rftx_blocks>
 800fc94:	2100      	movs	r1, #0
 800fc96:	4620      	mov	r0, r4
 800fc98:	f7ff f90c 	bl	800eeb4 <ull_disable_rf_tx>
 800fc9c:	2105      	movs	r1, #5
 800fc9e:	4620      	mov	r0, r4
 800fca0:	f7fe ff50 	bl	800eb44 <ull_force_clocks>
 800fca4:	2200      	movs	r2, #0
 800fca6:	4906      	ldr	r1, [pc, #24]	; (800fcc0 <ull_calcbandwidthadj+0x80>)
 800fca8:	4620      	mov	r0, r4
 800fcaa:	f7fe fb0d 	bl	800e2c8 <dwt_read8bitoffsetreg>
 800fcae:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800fcb2:	b002      	add	sp, #8
 800fcb4:	bd70      	pop	{r4, r5, r6, pc}
 800fcb6:	bf00      	nop
 800fcb8:	0008001c 	.word	0x0008001c
 800fcbc:	00080010 	.word	0x00080010
 800fcc0:	0007001c 	.word	0x0007001c

0800fcc4 <ull_configuretxrf>:
 800fcc4:	b538      	push	{r3, r4, r5, lr}
 800fcc6:	4605      	mov	r5, r0
 800fcc8:	460c      	mov	r4, r1
 800fcca:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 800fcce:	b149      	cbz	r1, 800fce4 <ull_configuretxrf+0x20>
 800fcd0:	f7ff ffb6 	bl	800fc40 <ull_calcbandwidthadj>
 800fcd4:	f8d4 3001 	ldr.w	r3, [r4, #1]
 800fcd8:	2200      	movs	r2, #0
 800fcda:	4905      	ldr	r1, [pc, #20]	; (800fcf0 <ull_configuretxrf+0x2c>)
 800fcdc:	4628      	mov	r0, r5
 800fcde:	f7fe ff7d 	bl	800ebdc <dwt_write32bitoffsetreg>
 800fce2:	bd38      	pop	{r3, r4, r5, pc}
 800fce4:	7823      	ldrb	r3, [r4, #0]
 800fce6:	2200      	movs	r2, #0
 800fce8:	4902      	ldr	r1, [pc, #8]	; (800fcf4 <ull_configuretxrf+0x30>)
 800fcea:	f7ff f95b 	bl	800efa4 <dwt_write8bitoffsetreg>
 800fcee:	e7f1      	b.n	800fcd4 <ull_configuretxrf+0x10>
 800fcf0:	00010004 	.word	0x00010004
 800fcf4:	0007001c 	.word	0x0007001c

0800fcf8 <ull_repeated_frames>:
 800fcf8:	b530      	push	{r4, r5, lr}
 800fcfa:	b083      	sub	sp, #12
 800fcfc:	4604      	mov	r4, r0
 800fcfe:	460d      	mov	r5, r1
 800fd00:	2310      	movs	r3, #16
 800fd02:	9300      	str	r3, [sp, #0]
 800fd04:	23ff      	movs	r3, #255	; 0xff
 800fd06:	2200      	movs	r2, #0
 800fd08:	4906      	ldr	r1, [pc, #24]	; (800fd24 <ull_repeated_frames+0x2c>)
 800fd0a:	f7ff fddd 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 800fd0e:	462b      	mov	r3, r5
 800fd10:	2d02      	cmp	r5, #2
 800fd12:	bf38      	it	cc
 800fd14:	2302      	movcc	r3, #2
 800fd16:	2200      	movs	r2, #0
 800fd18:	2128      	movs	r1, #40	; 0x28
 800fd1a:	4620      	mov	r0, r4
 800fd1c:	f7fe ff5e 	bl	800ebdc <dwt_write32bitoffsetreg>
 800fd20:	b003      	add	sp, #12
 800fd22:	bd30      	pop	{r4, r5, pc}
 800fd24:	000f0028 	.word	0x000f0028

0800fd28 <ull_setdwstate>:
 800fd28:	b530      	push	{r4, r5, lr}
 800fd2a:	b083      	sub	sp, #12
 800fd2c:	4604      	mov	r4, r0
 800fd2e:	2901      	cmp	r1, #1
 800fd30:	d01d      	beq.n	800fd6e <ull_setdwstate+0x46>
 800fd32:	2902      	cmp	r1, #2
 800fd34:	d030      	beq.n	800fd98 <ull_setdwstate+0x70>
 800fd36:	2301      	movs	r3, #1
 800fd38:	9300      	str	r3, [sp, #0]
 800fd3a:	23ff      	movs	r3, #255	; 0xff
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	4926      	ldr	r1, [pc, #152]	; (800fdd8 <ull_setdwstate+0xb0>)
 800fd40:	f7ff fdc2 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 800fd44:	4d25      	ldr	r5, [pc, #148]	; (800fddc <ull_setdwstate+0xb4>)
 800fd46:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800fd4a:	9300      	str	r3, [sp, #0]
 800fd4c:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800fd50:	2200      	movs	r2, #0
 800fd52:	4629      	mov	r1, r5
 800fd54:	4620      	mov	r0, r4
 800fd56:	f7ff fc47 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	9300      	str	r3, [sp, #0]
 800fd5e:	237f      	movs	r3, #127	; 0x7f
 800fd60:	2202      	movs	r2, #2
 800fd62:	4629      	mov	r1, r5
 800fd64:	4620      	mov	r0, r4
 800fd66:	f7ff fdaf 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 800fd6a:	b003      	add	sp, #12
 800fd6c:	bd30      	pop	{r4, r5, pc}
 800fd6e:	2105      	movs	r1, #5
 800fd70:	f7fe fee8 	bl	800eb44 <ull_force_clocks>
 800fd74:	f44f 7381 	mov.w	r3, #258	; 0x102
 800fd78:	9300      	str	r3, [sp, #0]
 800fd7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fd7e:	2200      	movs	r2, #0
 800fd80:	4917      	ldr	r1, [pc, #92]	; (800fde0 <ull_setdwstate+0xb8>)
 800fd82:	4620      	mov	r0, r4
 800fd84:	f7ff fc30 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 800fd88:	2201      	movs	r2, #1
 800fd8a:	9200      	str	r2, [sp, #0]
 800fd8c:	23ff      	movs	r3, #255	; 0xff
 800fd8e:	4913      	ldr	r1, [pc, #76]	; (800fddc <ull_setdwstate+0xb4>)
 800fd90:	4620      	mov	r0, r4
 800fd92:	f7ff fd99 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 800fd96:	e7e8      	b.n	800fd6a <ull_setdwstate+0x42>
 800fd98:	2303      	movs	r3, #3
 800fd9a:	9300      	str	r3, [sp, #0]
 800fd9c:	23ff      	movs	r3, #255	; 0xff
 800fd9e:	2200      	movs	r2, #0
 800fda0:	490d      	ldr	r1, [pc, #52]	; (800fdd8 <ull_setdwstate+0xb0>)
 800fda2:	f7ff fd91 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 800fda6:	4d0d      	ldr	r5, [pc, #52]	; (800fddc <ull_setdwstate+0xb4>)
 800fda8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800fdac:	9300      	str	r3, [sp, #0]
 800fdae:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	4629      	mov	r1, r5
 800fdb6:	4620      	mov	r0, r4
 800fdb8:	f7ff fc16 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	9300      	str	r3, [sp, #0]
 800fdc0:	237f      	movs	r3, #127	; 0x7f
 800fdc2:	2202      	movs	r2, #2
 800fdc4:	4629      	mov	r1, r5
 800fdc6:	4620      	mov	r0, r4
 800fdc8:	f7ff fd7e 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 800fdcc:	2105      	movs	r1, #5
 800fdce:	4620      	mov	r0, r4
 800fdd0:	f7fe feb8 	bl	800eb44 <ull_force_clocks>
 800fdd4:	e7c9      	b.n	800fd6a <ull_setdwstate+0x42>
 800fdd6:	bf00      	nop
 800fdd8:	00110004 	.word	0x00110004
 800fddc:	00110008 	.word	0x00110008
 800fde0:	00090008 	.word	0x00090008

0800fde4 <ull_configureframefilter>:
 800fde4:	b530      	push	{r4, r5, lr}
 800fde6:	b083      	sub	sp, #12
 800fde8:	4605      	mov	r5, r0
 800fdea:	2902      	cmp	r1, #2
 800fdec:	d00e      	beq.n	800fe0c <ull_configureframefilter+0x28>
 800fdee:	2400      	movs	r4, #0
 800fdf0:	9400      	str	r4, [sp, #0]
 800fdf2:	23fe      	movs	r3, #254	; 0xfe
 800fdf4:	4622      	mov	r2, r4
 800fdf6:	2110      	movs	r1, #16
 800fdf8:	f7ff fd66 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 800fdfc:	4623      	mov	r3, r4
 800fdfe:	4622      	mov	r2, r4
 800fe00:	2114      	movs	r1, #20
 800fe02:	4628      	mov	r0, r5
 800fe04:	f7fe fe7f 	bl	800eb06 <dwt_write16bitoffsetreg>
 800fe08:	b003      	add	sp, #12
 800fe0a:	bd30      	pop	{r4, r5, pc}
 800fe0c:	4614      	mov	r4, r2
 800fe0e:	2301      	movs	r3, #1
 800fe10:	9300      	str	r3, [sp, #0]
 800fe12:	23ff      	movs	r3, #255	; 0xff
 800fe14:	2200      	movs	r2, #0
 800fe16:	2110      	movs	r1, #16
 800fe18:	f7ff fd56 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 800fe1c:	4623      	mov	r3, r4
 800fe1e:	2200      	movs	r2, #0
 800fe20:	2114      	movs	r1, #20
 800fe22:	4628      	mov	r0, r5
 800fe24:	f7fe fe6f 	bl	800eb06 <dwt_write16bitoffsetreg>
 800fe28:	e7ee      	b.n	800fe08 <ull_configureframefilter+0x24>
	...

0800fe2c <ull_run_pgfcal>:
 800fe2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe30:	b082      	sub	sp, #8
 800fe32:	4605      	mov	r5, r0
 800fe34:	4c2a      	ldr	r4, [pc, #168]	; (800fee0 <ull_run_pgfcal+0xb4>)
 800fe36:	2301      	movs	r3, #1
 800fe38:	9300      	str	r3, [sp, #0]
 800fe3a:	23ff      	movs	r3, #255	; 0xff
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	4621      	mov	r1, r4
 800fe40:	f7ff fd42 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 800fe44:	2310      	movs	r3, #16
 800fe46:	9300      	str	r3, [sp, #0]
 800fe48:	23ff      	movs	r3, #255	; 0xff
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	4621      	mov	r1, r4
 800fe4e:	4628      	mov	r0, r5
 800fe50:	f7ff fd3a 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 800fe54:	2403      	movs	r4, #3
 800fe56:	f04f 0814 	mov.w	r8, #20
 800fe5a:	4f22      	ldr	r7, [pc, #136]	; (800fee4 <ull_run_pgfcal+0xb8>)
 800fe5c:	2600      	movs	r6, #0
 800fe5e:	4640      	mov	r0, r8
 800fe60:	f7f1 fb8b 	bl	800157a <deca_usleep>
 800fe64:	4632      	mov	r2, r6
 800fe66:	4639      	mov	r1, r7
 800fe68:	4628      	mov	r0, r5
 800fe6a:	f7fe fa2d 	bl	800e2c8 <dwt_read8bitoffsetreg>
 800fe6e:	2801      	cmp	r0, #1
 800fe70:	d034      	beq.n	800fedc <ull_run_pgfcal+0xb0>
 800fe72:	1e63      	subs	r3, r4, #1
 800fe74:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800fe78:	d1f1      	bne.n	800fe5e <ull_run_pgfcal+0x32>
 800fe7a:	f06f 0402 	mvn.w	r4, #2
 800fe7e:	4e18      	ldr	r6, [pc, #96]	; (800fee0 <ull_run_pgfcal+0xb4>)
 800fe80:	2300      	movs	r3, #0
 800fe82:	461a      	mov	r2, r3
 800fe84:	4631      	mov	r1, r6
 800fe86:	4628      	mov	r0, r5
 800fe88:	f7ff f88c 	bl	800efa4 <dwt_write8bitoffsetreg>
 800fe8c:	2301      	movs	r3, #1
 800fe8e:	2200      	movs	r2, #0
 800fe90:	4914      	ldr	r1, [pc, #80]	; (800fee4 <ull_run_pgfcal+0xb8>)
 800fe92:	4628      	mov	r0, r5
 800fe94:	f7ff f886 	bl	800efa4 <dwt_write8bitoffsetreg>
 800fe98:	2301      	movs	r3, #1
 800fe9a:	9300      	str	r3, [sp, #0]
 800fe9c:	23ff      	movs	r3, #255	; 0xff
 800fe9e:	2202      	movs	r2, #2
 800fea0:	4631      	mov	r1, r6
 800fea2:	4628      	mov	r0, r5
 800fea4:	f7ff fd10 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 800fea8:	2200      	movs	r2, #0
 800feaa:	490f      	ldr	r1, [pc, #60]	; (800fee8 <ull_run_pgfcal+0xbc>)
 800feac:	4628      	mov	r0, r5
 800feae:	f7fe f9b6 	bl	800e21e <dwt_read32bitoffsetreg>
 800feb2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800feb6:	4298      	cmp	r0, r3
 800feb8:	bf08      	it	eq
 800feba:	f06f 0403 	mvneq.w	r4, #3
 800febe:	2200      	movs	r2, #0
 800fec0:	490a      	ldr	r1, [pc, #40]	; (800feec <ull_run_pgfcal+0xc0>)
 800fec2:	4628      	mov	r0, r5
 800fec4:	f7fe f9ab 	bl	800e21e <dwt_read32bitoffsetreg>
 800fec8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800fecc:	4298      	cmp	r0, r3
 800fece:	bf14      	ite	ne
 800fed0:	4620      	movne	r0, r4
 800fed2:	f06f 0004 	mvneq.w	r0, #4
 800fed6:	b002      	add	sp, #8
 800fed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fedc:	2400      	movs	r4, #0
 800fede:	e7ce      	b.n	800fe7e <ull_run_pgfcal+0x52>
 800fee0:	0004000c 	.word	0x0004000c
 800fee4:	00040020 	.word	0x00040020
 800fee8:	00040014 	.word	0x00040014
 800feec:	0004001c 	.word	0x0004001c

0800fef0 <ull_setinterrupt>:
 800fef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fef4:	b083      	sub	sp, #12
 800fef6:	4605      	mov	r5, r0
 800fef8:	4688      	mov	r8, r1
 800fefa:	4617      	mov	r7, r2
 800fefc:	461c      	mov	r4, r3
 800fefe:	f7f1 fb13 	bl	8001528 <decamutexon>
 800ff02:	4606      	mov	r6, r0
 800ff04:	2c02      	cmp	r4, #2
 800ff06:	d019      	beq.n	800ff3c <ull_setinterrupt+0x4c>
 800ff08:	2c04      	cmp	r4, #4
 800ff0a:	d017      	beq.n	800ff3c <ull_setinterrupt+0x4c>
 800ff0c:	f004 03fd 	and.w	r3, r4, #253	; 0xfd
 800ff10:	2b01      	cmp	r3, #1
 800ff12:	d03f      	beq.n	800ff94 <ull_setinterrupt+0xa4>
 800ff14:	f04f 0900 	mov.w	r9, #0
 800ff18:	f8cd 9000 	str.w	r9, [sp]
 800ff1c:	ea6f 0308 	mvn.w	r3, r8
 800ff20:	464a      	mov	r2, r9
 800ff22:	213c      	movs	r1, #60	; 0x3c
 800ff24:	4628      	mov	r0, r5
 800ff26:	f7ff fb5f 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 800ff2a:	f8cd 9000 	str.w	r9, [sp]
 800ff2e:	43fb      	mvns	r3, r7
 800ff30:	464a      	mov	r2, r9
 800ff32:	2140      	movs	r1, #64	; 0x40
 800ff34:	4628      	mov	r0, r5
 800ff36:	f7ff fb57 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 800ff3a:	e00b      	b.n	800ff54 <ull_setinterrupt+0x64>
 800ff3c:	4643      	mov	r3, r8
 800ff3e:	2200      	movs	r2, #0
 800ff40:	213c      	movs	r1, #60	; 0x3c
 800ff42:	4628      	mov	r0, r5
 800ff44:	f7fe fe4a 	bl	800ebdc <dwt_write32bitoffsetreg>
 800ff48:	463b      	mov	r3, r7
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	2140      	movs	r1, #64	; 0x40
 800ff4e:	4628      	mov	r0, r5
 800ff50:	f7fe fe44 	bl	800ebdc <dwt_write32bitoffsetreg>
 800ff54:	3c03      	subs	r4, #3
 800ff56:	b2e4      	uxtb	r4, r4
 800ff58:	2c01      	cmp	r4, #1
 800ff5a:	d92d      	bls.n	800ffb8 <ull_setinterrupt+0xc8>
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	213c      	movs	r1, #60	; 0x3c
 800ff60:	4628      	mov	r0, r5
 800ff62:	f7fe f95c 	bl	800e21e <dwt_read32bitoffsetreg>
 800ff66:	4603      	mov	r3, r0
 800ff68:	2200      	movs	r2, #0
 800ff6a:	2144      	movs	r1, #68	; 0x44
 800ff6c:	4628      	mov	r0, r5
 800ff6e:	f7fe fe35 	bl	800ebdc <dwt_write32bitoffsetreg>
 800ff72:	2200      	movs	r2, #0
 800ff74:	2140      	movs	r1, #64	; 0x40
 800ff76:	4628      	mov	r0, r5
 800ff78:	f7fe f951 	bl	800e21e <dwt_read32bitoffsetreg>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	2200      	movs	r2, #0
 800ff80:	2148      	movs	r1, #72	; 0x48
 800ff82:	4628      	mov	r0, r5
 800ff84:	f7fe fe2a 	bl	800ebdc <dwt_write32bitoffsetreg>
 800ff88:	4630      	mov	r0, r6
 800ff8a:	f7f1 fade 	bl	800154a <decamutexoff>
 800ff8e:	b003      	add	sp, #12
 800ff90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff94:	f8cd 8000 	str.w	r8, [sp]
 800ff98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	213c      	movs	r1, #60	; 0x3c
 800ffa0:	4628      	mov	r0, r5
 800ffa2:	f7ff fb21 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 800ffa6:	9700      	str	r7, [sp, #0]
 800ffa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ffac:	2200      	movs	r2, #0
 800ffae:	2140      	movs	r1, #64	; 0x40
 800ffb0:	4628      	mov	r0, r5
 800ffb2:	f7ff fb19 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 800ffb6:	e7cd      	b.n	800ff54 <ull_setinterrupt+0x64>
 800ffb8:	2110      	movs	r1, #16
 800ffba:	9100      	str	r1, [sp, #0]
 800ffbc:	23ff      	movs	r3, #255	; 0xff
 800ffbe:	2202      	movs	r2, #2
 800ffc0:	4628      	mov	r0, r5
 800ffc2:	f7ff fc81 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 800ffc6:	e7c9      	b.n	800ff5c <ull_setinterrupt+0x6c>

0800ffc8 <prs_ack_enable>:
 800ffc8:	b500      	push	{lr}
 800ffca:	b083      	sub	sp, #12
 800ffcc:	2900      	cmp	r1, #0
 800ffce:	bf0b      	itete	eq
 800ffd0:	23ff      	moveq	r3, #255	; 0xff
 800ffd2:	23f7      	movne	r3, #247	; 0xf7
 800ffd4:	2200      	moveq	r2, #0
 800ffd6:	2208      	movne	r2, #8
 800ffd8:	9200      	str	r2, [sp, #0]
 800ffda:	2201      	movs	r2, #1
 800ffdc:	2110      	movs	r1, #16
 800ffde:	f7ff fc73 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 800ffe2:	b003      	add	sp, #12
 800ffe4:	f85d fb04 	ldr.w	pc, [sp], #4

0800ffe8 <dwt_modify16bitoffsetreg>:
 800ffe8:	b510      	push	{r4, lr}
 800ffea:	b084      	sub	sp, #16
 800ffec:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 800fff0:	f88d 300c 	strb.w	r3, [sp, #12]
 800fff4:	0a1b      	lsrs	r3, r3, #8
 800fff6:	f88d 300d 	strb.w	r3, [sp, #13]
 800fffa:	f88d 400e 	strb.w	r4, [sp, #14]
 800fffe:	0a24      	lsrs	r4, r4, #8
 8010000:	f88d 400f 	strb.w	r4, [sp, #15]
 8010004:	f248 0302 	movw	r3, #32770	; 0x8002
 8010008:	9301      	str	r3, [sp, #4]
 801000a:	ab03      	add	r3, sp, #12
 801000c:	9300      	str	r3, [sp, #0]
 801000e:	2304      	movs	r3, #4
 8010010:	b292      	uxth	r2, r2
 8010012:	f7fe f87c 	bl	800e10e <dwt_xfer3xxx>
 8010016:	b004      	add	sp, #16
 8010018:	bd10      	pop	{r4, pc}
	...

0801001c <ull_configurestsmode>:
 801001c:	b530      	push	{r4, r5, lr}
 801001e:	b083      	sub	sp, #12
 8010020:	4605      	mov	r5, r0
 8010022:	460c      	mov	r4, r1
 8010024:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010026:	7559      	strb	r1, [r3, #21]
 8010028:	030b      	lsls	r3, r1, #12
 801002a:	f403 4330 	and.w	r3, r3, #45056	; 0xb000
 801002e:	9300      	str	r3, [sp, #0]
 8010030:	f644 73ff 	movw	r3, #20479	; 0x4fff
 8010034:	2200      	movs	r2, #0
 8010036:	2110      	movs	r1, #16
 8010038:	f7ff ffd6 	bl	800ffe8 <dwt_modify16bitoffsetreg>
 801003c:	f004 0403 	and.w	r4, r4, #3
 8010040:	2c03      	cmp	r4, #3
 8010042:	bf0c      	ite	eq
 8010044:	4b04      	ldreq	r3, [pc, #16]	; (8010058 <ull_configurestsmode+0x3c>)
 8010046:	4b05      	ldrne	r3, [pc, #20]	; (801005c <ull_configurestsmode+0x40>)
 8010048:	2200      	movs	r2, #0
 801004a:	4905      	ldr	r1, [pc, #20]	; (8010060 <ull_configurestsmode+0x44>)
 801004c:	4628      	mov	r0, r5
 801004e:	f7fe fdc5 	bl	800ebdc <dwt_write32bitoffsetreg>
 8010052:	b003      	add	sp, #12
 8010054:	bd30      	pop	{r4, r5, pc}
 8010056:	bf00      	nop
 8010058:	af5f35cc 	.word	0xaf5f35cc
 801005c:	af5f584c 	.word	0xaf5f584c
 8010060:	0006000c 	.word	0x0006000c

08010064 <ull_setleds>:
 8010064:	b530      	push	{r4, r5, lr}
 8010066:	b083      	sub	sp, #12
 8010068:	4604      	mov	r4, r0
 801006a:	f011 0f01 	tst.w	r1, #1
 801006e:	d01f      	beq.n	80100b0 <ull_setleds+0x4c>
 8010070:	460d      	mov	r5, r1
 8010072:	f44f 7310 	mov.w	r3, #576	; 0x240
 8010076:	9300      	str	r3, [sp, #0]
 8010078:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 801007c:	2200      	movs	r2, #0
 801007e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8010082:	f7ff fab1 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 8010086:	f44f 0304 	mov.w	r3, #8650752	; 0x840000
 801008a:	9300      	str	r3, [sp, #0]
 801008c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010090:	2200      	movs	r2, #0
 8010092:	4918      	ldr	r1, [pc, #96]	; (80100f4 <ull_setleds+0x90>)
 8010094:	4620      	mov	r0, r4
 8010096:	f7ff faa7 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 801009a:	f015 0f02 	tst.w	r5, #2
 801009e:	d11a      	bne.n	80100d6 <ull_setleds+0x72>
 80100a0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80100a4:	2200      	movs	r2, #0
 80100a6:	4914      	ldr	r1, [pc, #80]	; (80100f8 <ull_setleds+0x94>)
 80100a8:	4620      	mov	r0, r4
 80100aa:	f7fe fd97 	bl	800ebdc <dwt_write32bitoffsetreg>
 80100ae:	e010      	b.n	80100d2 <ull_setleds+0x6e>
 80100b0:	2500      	movs	r5, #0
 80100b2:	9500      	str	r5, [sp, #0]
 80100b4:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 80100b8:	462a      	mov	r2, r5
 80100ba:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80100be:	f7ff fa93 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 80100c2:	9500      	str	r5, [sp, #0]
 80100c4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80100c8:	462a      	mov	r2, r5
 80100ca:	490b      	ldr	r1, [pc, #44]	; (80100f8 <ull_setleds+0x94>)
 80100cc:	4620      	mov	r0, r4
 80100ce:	f7ff ff8b 	bl	800ffe8 <dwt_modify16bitoffsetreg>
 80100d2:	b003      	add	sp, #12
 80100d4:	bd30      	pop	{r4, r5, pc}
 80100d6:	4d08      	ldr	r5, [pc, #32]	; (80100f8 <ull_setleds+0x94>)
 80100d8:	4b08      	ldr	r3, [pc, #32]	; (80100fc <ull_setleds+0x98>)
 80100da:	2200      	movs	r2, #0
 80100dc:	4629      	mov	r1, r5
 80100de:	4620      	mov	r0, r4
 80100e0:	f7fe fd7c 	bl	800ebdc <dwt_write32bitoffsetreg>
 80100e4:	f44f 7388 	mov.w	r3, #272	; 0x110
 80100e8:	2200      	movs	r2, #0
 80100ea:	4629      	mov	r1, r5
 80100ec:	4620      	mov	r0, r4
 80100ee:	f7fe fd75 	bl	800ebdc <dwt_write32bitoffsetreg>
 80100f2:	e7ee      	b.n	80100d2 <ull_setleds+0x6e>
 80100f4:	00110004 	.word	0x00110004
 80100f8:	00110018 	.word	0x00110018
 80100fc:	000f0110 	.word	0x000f0110

08010100 <ull_pgf_cal>:
 8010100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010102:	b083      	sub	sp, #12
 8010104:	4604      	mov	r4, r0
 8010106:	2901      	cmp	r1, #1
 8010108:	d009      	beq.n	801011e <ull_pgf_cal+0x1e>
 801010a:	2014      	movs	r0, #20
 801010c:	f7f1 fa35 	bl	800157a <deca_usleep>
 8010110:	4620      	mov	r0, r4
 8010112:	f7ff fe8b 	bl	800fe2c <ull_run_pgfcal>
 8010116:	4605      	mov	r5, r0
 8010118:	4628      	mov	r0, r5
 801011a:	b003      	add	sp, #12
 801011c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801011e:	4e0f      	ldr	r6, [pc, #60]	; (801015c <ull_pgf_cal+0x5c>)
 8010120:	2200      	movs	r2, #0
 8010122:	4631      	mov	r1, r6
 8010124:	f7fe f891 	bl	800e24a <dwt_read16bitoffsetreg>
 8010128:	4607      	mov	r7, r0
 801012a:	f240 1307 	movw	r3, #263	; 0x107
 801012e:	9300      	str	r3, [sp, #0]
 8010130:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010134:	2200      	movs	r2, #0
 8010136:	4631      	mov	r1, r6
 8010138:	4620      	mov	r0, r4
 801013a:	f7ff ff55 	bl	800ffe8 <dwt_modify16bitoffsetreg>
 801013e:	2014      	movs	r0, #20
 8010140:	f7f1 fa1b 	bl	800157a <deca_usleep>
 8010144:	4620      	mov	r0, r4
 8010146:	f7ff fe71 	bl	800fe2c <ull_run_pgfcal>
 801014a:	4605      	mov	r5, r0
 801014c:	2200      	movs	r2, #0
 801014e:	9200      	str	r2, [sp, #0]
 8010150:	463b      	mov	r3, r7
 8010152:	4631      	mov	r1, r6
 8010154:	4620      	mov	r0, r4
 8010156:	f7ff ff47 	bl	800ffe8 <dwt_modify16bitoffsetreg>
 801015a:	e7dd      	b.n	8010118 <ull_pgf_cal+0x18>
 801015c:	00070048 	.word	0x00070048

08010160 <ull_setgpiovalue>:
 8010160:	b500      	push	{lr}
 8010162:	b083      	sub	sp, #12
 8010164:	2a01      	cmp	r2, #1
 8010166:	d009      	beq.n	801017c <ull_setgpiovalue+0x1c>
 8010168:	43cb      	mvns	r3, r1
 801016a:	2200      	movs	r2, #0
 801016c:	9200      	str	r2, [sp, #0]
 801016e:	b29b      	uxth	r3, r3
 8010170:	4906      	ldr	r1, [pc, #24]	; (801018c <ull_setgpiovalue+0x2c>)
 8010172:	f7ff ff39 	bl	800ffe8 <dwt_modify16bitoffsetreg>
 8010176:	b003      	add	sp, #12
 8010178:	f85d fb04 	ldr.w	pc, [sp], #4
 801017c:	9100      	str	r1, [sp, #0]
 801017e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010182:	2200      	movs	r2, #0
 8010184:	4901      	ldr	r1, [pc, #4]	; (801018c <ull_setgpiovalue+0x2c>)
 8010186:	f7ff ff2f 	bl	800ffe8 <dwt_modify16bitoffsetreg>
 801018a:	e7f4      	b.n	8010176 <ull_setgpiovalue+0x16>
 801018c:	0005000c 	.word	0x0005000c

08010190 <ull_readaccdata>:
 8010190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010192:	b083      	sub	sp, #12
 8010194:	4604      	mov	r4, r0
 8010196:	460f      	mov	r7, r1
 8010198:	4616      	mov	r6, r2
 801019a:	461d      	mov	r5, r3
 801019c:	f248 0340 	movw	r3, #32832	; 0x8040
 80101a0:	9300      	str	r3, [sp, #0]
 80101a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80101a6:	2200      	movs	r2, #0
 80101a8:	4918      	ldr	r1, [pc, #96]	; (801020c <ull_readaccdata+0x7c>)
 80101aa:	f7ff ff1d 	bl	800ffe8 <dwt_modify16bitoffsetreg>
 80101ae:	19aa      	adds	r2, r5, r6
 80101b0:	f243 0301 	movw	r3, #12289	; 0x3001
 80101b4:	429a      	cmp	r2, r3
 80101b6:	dc15      	bgt.n	80101e4 <ull_readaccdata+0x54>
 80101b8:	2d7f      	cmp	r5, #127	; 0x7f
 80101ba:	d91d      	bls.n	80101f8 <ull_readaccdata+0x68>
 80101bc:	2315      	movs	r3, #21
 80101be:	2200      	movs	r2, #0
 80101c0:	4913      	ldr	r1, [pc, #76]	; (8010210 <ull_readaccdata+0x80>)
 80101c2:	4620      	mov	r0, r4
 80101c4:	f7fe fd0a 	bl	800ebdc <dwt_write32bitoffsetreg>
 80101c8:	462b      	mov	r3, r5
 80101ca:	2200      	movs	r2, #0
 80101cc:	4911      	ldr	r1, [pc, #68]	; (8010214 <ull_readaccdata+0x84>)
 80101ce:	4620      	mov	r0, r4
 80101d0:	f7fe fd04 	bl	800ebdc <dwt_write32bitoffsetreg>
 80101d4:	9700      	str	r7, [sp, #0]
 80101d6:	4633      	mov	r3, r6
 80101d8:	2200      	movs	r2, #0
 80101da:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 80101de:	4620      	mov	r0, r4
 80101e0:	f7fe f813 	bl	800e20a <dwt_readfromdevice>
 80101e4:	2200      	movs	r2, #0
 80101e6:	9200      	str	r2, [sp, #0]
 80101e8:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 80101ec:	4907      	ldr	r1, [pc, #28]	; (801020c <ull_readaccdata+0x7c>)
 80101ee:	4620      	mov	r0, r4
 80101f0:	f7ff fefa 	bl	800ffe8 <dwt_modify16bitoffsetreg>
 80101f4:	b003      	add	sp, #12
 80101f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101f8:	9700      	str	r7, [sp, #0]
 80101fa:	4633      	mov	r3, r6
 80101fc:	462a      	mov	r2, r5
 80101fe:	f44f 11a8 	mov.w	r1, #1376256	; 0x150000
 8010202:	4620      	mov	r0, r4
 8010204:	f7fe f801 	bl	800e20a <dwt_readfromdevice>
 8010208:	e7ec      	b.n	80101e4 <ull_readaccdata+0x54>
 801020a:	bf00      	nop
 801020c:	00110004 	.word	0x00110004
 8010210:	001f0004 	.word	0x001f0004
 8010214:	001f0008 	.word	0x001f0008

08010218 <ull_configure>:
 8010218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801021c:	b083      	sub	sp, #12
 801021e:	4604      	mov	r4, r0
 8010220:	460d      	mov	r5, r1
 8010222:	f891 9000 	ldrb.w	r9, [r1]
 8010226:	790b      	ldrb	r3, [r1, #4]
 8010228:	2b18      	cmp	r3, #24
 801022a:	d814      	bhi.n	8010256 <ull_configure+0x3e>
 801022c:	78cf      	ldrb	r7, [r1, #3]
 801022e:	2f18      	cmp	r7, #24
 8010230:	bf94      	ite	ls
 8010232:	2700      	movls	r7, #0
 8010234:	2701      	movhi	r7, #1
 8010236:	b2ff      	uxtb	r7, r7
 8010238:	79eb      	ldrb	r3, [r5, #7]
 801023a:	2b01      	cmp	r3, #1
 801023c:	bf0c      	ite	eq
 801023e:	2110      	moveq	r1, #16
 8010240:	2100      	movne	r1, #0
 8010242:	786b      	ldrb	r3, [r5, #1]
 8010244:	3b01      	subs	r3, #1
 8010246:	2b06      	cmp	r3, #6
 8010248:	d810      	bhi.n	801026c <ull_configure+0x54>
 801024a:	e8df f003 	tbb	[pc, r3]
 801024e:	0f06      	.short	0x0f06
 8010250:	0f0c120f 	.word	0x0f0c120f
 8010254:	09          	.byte	0x09
 8010255:	00          	.byte	0x00
 8010256:	2701      	movs	r7, #1
 8010258:	e7ed      	b.n	8010236 <ull_configure+0x1e>
 801025a:	f04f 0a40 	mov.w	sl, #64	; 0x40
 801025e:	e00a      	b.n	8010276 <ull_configure+0x5e>
 8010260:	f04f 0a48 	mov.w	sl, #72	; 0x48
 8010264:	e007      	b.n	8010276 <ull_configure+0x5e>
 8010266:	f04f 0a80 	mov.w	sl, #128	; 0x80
 801026a:	e004      	b.n	8010276 <ull_configure+0x5e>
 801026c:	f44f 7a80 	mov.w	sl, #256	; 0x100
 8010270:	e001      	b.n	8010276 <ull_configure+0x5e>
 8010272:	f04f 0a20 	mov.w	sl, #32
 8010276:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8010278:	8a13      	ldrh	r3, [r2, #16]
 801027a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 801027e:	8213      	strh	r3, [r2, #16]
 8010280:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010282:	79ea      	ldrb	r2, [r5, #7]
 8010284:	72da      	strb	r2, [r3, #11]
 8010286:	7b2e      	ldrb	r6, [r5, #12]
 8010288:	1cb3      	adds	r3, r6, #2
 801028a:	2601      	movs	r6, #1
 801028c:	409e      	lsls	r6, r3
 801028e:	fa1f f886 	uxth.w	r8, r6
 8010292:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8010294:	4bca      	ldr	r3, [pc, #808]	; (80105c0 <ull_configure+0x3a8>)
 8010296:	fb03 f308 	mul.w	r3, r3, r8
 801029a:	0bdb      	lsrs	r3, r3, #15
 801029c:	8253      	strh	r3, [r2, #18]
 801029e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80102a0:	7aea      	ldrb	r2, [r5, #11]
 80102a2:	755a      	strb	r2, [r3, #21]
 80102a4:	7a2b      	ldrb	r3, [r5, #8]
 80102a6:	015b      	lsls	r3, r3, #5
 80102a8:	f003 0320 	and.w	r3, r3, #32
 80102ac:	7b6a      	ldrb	r2, [r5, #13]
 80102ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80102b2:	7aea      	ldrb	r2, [r5, #11]
 80102b4:	0312      	lsls	r2, r2, #12
 80102b6:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 80102ba:	4313      	orrs	r3, r2
 80102bc:	430b      	orrs	r3, r1
 80102be:	9300      	str	r3, [sp, #0]
 80102c0:	4bc0      	ldr	r3, [pc, #768]	; (80105c4 <ull_configure+0x3ac>)
 80102c2:	2200      	movs	r2, #0
 80102c4:	2110      	movs	r1, #16
 80102c6:	4620      	mov	r0, r4
 80102c8:	f7ff f98e 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 80102cc:	2f00      	cmp	r7, #0
 80102ce:	f040 80fe 	bne.w	80104ce <ull_configure+0x2b6>
 80102d2:	7aeb      	ldrb	r3, [r5, #11]
 80102d4:	b1bb      	cbz	r3, 8010306 <ull_configure+0xee>
 80102d6:	7b6b      	ldrb	r3, [r5, #13]
 80102d8:	2b01      	cmp	r3, #1
 80102da:	7b28      	ldrb	r0, [r5, #12]
 80102dc:	bf94      	ite	ls
 80102de:	2203      	movls	r2, #3
 80102e0:	2204      	movhi	r2, #4
 80102e2:	2110      	movs	r1, #16
 80102e4:	4bb8      	ldr	r3, [pc, #736]	; (80105c8 <ull_configure+0x3b0>)
 80102e6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80102ea:	f7fd fef3 	bl	800e0d4 <get_sts_mnth>
 80102ee:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
 80102f2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80102f6:	9000      	str	r0, [sp, #0]
 80102f8:	f64f 7380 	movw	r3, #65408	; 0xff80
 80102fc:	2202      	movs	r2, #2
 80102fe:	49b3      	ldr	r1, [pc, #716]	; (80105cc <ull_configure+0x3b4>)
 8010300:	4620      	mov	r0, r4
 8010302:	f7ff fe71 	bl	800ffe8 <dwt_modify16bitoffsetreg>
 8010306:	2394      	movs	r3, #148	; 0x94
 8010308:	9300      	str	r3, [sp, #0]
 801030a:	4bb1      	ldr	r3, [pc, #708]	; (80105d0 <ull_configure+0x3b8>)
 801030c:	2200      	movs	r2, #0
 801030e:	49b1      	ldr	r1, [pc, #708]	; (80105d4 <ull_configure+0x3bc>)
 8010310:	4620      	mov	r0, r4
 8010312:	f7ff f969 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 8010316:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801031a:	f340 8103 	ble.w	8010524 <ull_configure+0x30c>
 801031e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8010320:	8a13      	ldrh	r3, [r2, #16]
 8010322:	f043 0320 	orr.w	r3, r3, #32
 8010326:	8213      	strh	r3, [r2, #16]
 8010328:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801032c:	9300      	str	r3, [sp, #0]
 801032e:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8010332:	2200      	movs	r2, #0
 8010334:	49a8      	ldr	r1, [pc, #672]	; (80105d8 <ull_configure+0x3c0>)
 8010336:	4620      	mov	r0, r4
 8010338:	f7ff fe56 	bl	800ffe8 <dwt_modify16bitoffsetreg>
 801033c:	7b6b      	ldrb	r3, [r5, #13]
 801033e:	2b01      	cmp	r3, #1
 8010340:	f000 80fb 	beq.w	801053a <ull_configure+0x322>
 8010344:	78ab      	ldrb	r3, [r5, #2]
 8010346:	f043 0310 	orr.w	r3, r3, #16
 801034a:	9300      	str	r3, [sp, #0]
 801034c:	23fc      	movs	r3, #252	; 0xfc
 801034e:	2200      	movs	r2, #0
 8010350:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8010354:	4620      	mov	r0, r4
 8010356:	f7ff fab7 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 801035a:	1e73      	subs	r3, r6, #1
 801035c:	b2db      	uxtb	r3, r3
 801035e:	2200      	movs	r2, #0
 8010360:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8010364:	4620      	mov	r0, r4
 8010366:	f7fe fe1d 	bl	800efa4 <dwt_write8bitoffsetreg>
 801036a:	786b      	ldrb	r3, [r5, #1]
 801036c:	2b07      	cmp	r3, #7
 801036e:	bf0c      	ite	eq
 8010370:	2108      	moveq	r1, #8
 8010372:	2100      	movne	r1, #0
 8010374:	4620      	mov	r0, r4
 8010376:	f7fe ff1b 	bl	800f1b0 <ull_setplenfine>
 801037a:	7aeb      	ldrb	r3, [r5, #11]
 801037c:	f003 0303 	and.w	r3, r3, #3
 8010380:	2b03      	cmp	r3, #3
 8010382:	bf0c      	ite	eq
 8010384:	4b95      	ldreq	r3, [pc, #596]	; (80105dc <ull_configure+0x3c4>)
 8010386:	4b96      	ldrne	r3, [pc, #600]	; (80105e0 <ull_configure+0x3c8>)
 8010388:	2200      	movs	r2, #0
 801038a:	4996      	ldr	r1, [pc, #600]	; (80105e4 <ull_configure+0x3cc>)
 801038c:	4620      	mov	r0, r4
 801038e:	f7fe fc25 	bl	800ebdc <dwt_write32bitoffsetreg>
 8010392:	2200      	movs	r2, #0
 8010394:	4994      	ldr	r1, [pc, #592]	; (80105e8 <ull_configure+0x3d0>)
 8010396:	4620      	mov	r0, r4
 8010398:	f7fd ff41 	bl	800e21e <dwt_read32bitoffsetreg>
 801039c:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 80103a0:	f020 001f 	bic.w	r0, r0, #31
 80103a4:	f1b9 0f09 	cmp.w	r9, #9
 80103a8:	bf08      	it	eq
 80103aa:	f040 0001 	orreq.w	r0, r0, #1
 80103ae:	792a      	ldrb	r2, [r5, #4]
 80103b0:	0212      	lsls	r2, r2, #8
 80103b2:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 80103b6:	78eb      	ldrb	r3, [r5, #3]
 80103b8:	00db      	lsls	r3, r3, #3
 80103ba:	b2db      	uxtb	r3, r3
 80103bc:	431a      	orrs	r2, r3
 80103be:	796b      	ldrb	r3, [r5, #5]
 80103c0:	005b      	lsls	r3, r3, #1
 80103c2:	f003 0306 	and.w	r3, r3, #6
 80103c6:	4313      	orrs	r3, r2
 80103c8:	4303      	orrs	r3, r0
 80103ca:	2200      	movs	r2, #0
 80103cc:	4986      	ldr	r1, [pc, #536]	; (80105e8 <ull_configure+0x3d0>)
 80103ce:	4620      	mov	r0, r4
 80103d0:	f7fe fc04 	bl	800ebdc <dwt_write32bitoffsetreg>
 80103d4:	79aa      	ldrb	r2, [r5, #6]
 80103d6:	786b      	ldrb	r3, [r5, #1]
 80103d8:	031b      	lsls	r3, r3, #12
 80103da:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 80103de:	9300      	str	r3, [sp, #0]
 80103e0:	f46f 4374 	mvn.w	r3, #62464	; 0xf400
 80103e4:	2200      	movs	r2, #0
 80103e6:	2120      	movs	r1, #32
 80103e8:	4620      	mov	r0, r4
 80103ea:	f7ff f8fd 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 80103ee:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 80103f2:	b923      	cbnz	r3, 80103fe <ull_configure+0x1e6>
 80103f4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80103f8:	726b      	strb	r3, [r5, #9]
 80103fa:	2300      	movs	r3, #0
 80103fc:	72ab      	strb	r3, [r5, #10]
 80103fe:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 8010402:	2202      	movs	r2, #2
 8010404:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8010408:	4620      	mov	r0, r4
 801040a:	f7fe fb7c 	bl	800eb06 <dwt_write16bitoffsetreg>
 801040e:	2202      	movs	r2, #2
 8010410:	4976      	ldr	r1, [pc, #472]	; (80105ec <ull_configure+0x3d4>)
 8010412:	4620      	mov	r0, r4
 8010414:	f7fd ff58 	bl	800e2c8 <dwt_read8bitoffsetreg>
 8010418:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801041a:	7bdb      	ldrb	r3, [r3, #15]
 801041c:	454b      	cmp	r3, r9
 801041e:	f000 8096 	beq.w	801054e <ull_configure+0x336>
 8010422:	2803      	cmp	r0, #3
 8010424:	f000 8097 	beq.w	8010556 <ull_configure+0x33e>
 8010428:	f1b9 0f09 	cmp.w	r9, #9
 801042c:	f000 8098 	beq.w	8010560 <ull_configure+0x348>
 8010430:	4b6f      	ldr	r3, [pc, #444]	; (80105f0 <ull_configure+0x3d8>)
 8010432:	9300      	str	r3, [sp, #0]
 8010434:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010438:	2200      	movs	r2, #0
 801043a:	496e      	ldr	r1, [pc, #440]	; (80105f4 <ull_configure+0x3dc>)
 801043c:	4620      	mov	r0, r4
 801043e:	f7ff f8d3 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 8010442:	f641 733c 	movw	r3, #7996	; 0x1f3c
 8010446:	2200      	movs	r2, #0
 8010448:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 801044c:	4620      	mov	r0, r4
 801044e:	f7fe fb5a 	bl	800eb06 <dwt_write16bitoffsetreg>
 8010452:	2314      	movs	r3, #20
 8010454:	2201      	movs	r2, #1
 8010456:	4968      	ldr	r1, [pc, #416]	; (80105f8 <ull_configure+0x3e0>)
 8010458:	4620      	mov	r0, r4
 801045a:	f7fe fda3 	bl	800efa4 <dwt_write8bitoffsetreg>
 801045e:	230e      	movs	r3, #14
 8010460:	2202      	movs	r2, #2
 8010462:	4966      	ldr	r1, [pc, #408]	; (80105fc <ull_configure+0x3e4>)
 8010464:	4620      	mov	r0, r4
 8010466:	f7fe fd9d 	bl	800efa4 <dwt_write8bitoffsetreg>
 801046a:	2381      	movs	r3, #129	; 0x81
 801046c:	2200      	movs	r2, #0
 801046e:	4964      	ldr	r1, [pc, #400]	; (8010600 <ull_configure+0x3e8>)
 8010470:	4620      	mov	r0, r4
 8010472:	f7fe fd97 	bl	800efa4 <dwt_write8bitoffsetreg>
 8010476:	2600      	movs	r6, #0
 8010478:	9600      	str	r6, [sp, #0]
 801047a:	23fc      	movs	r3, #252	; 0xfc
 801047c:	2203      	movs	r2, #3
 801047e:	4961      	ldr	r1, [pc, #388]	; (8010604 <ull_configure+0x3ec>)
 8010480:	4620      	mov	r0, r4
 8010482:	f7ff fa21 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 8010486:	2302      	movs	r3, #2
 8010488:	4632      	mov	r2, r6
 801048a:	2144      	movs	r1, #68	; 0x44
 801048c:	4620      	mov	r0, r4
 801048e:	f7fe fd89 	bl	800efa4 <dwt_write8bitoffsetreg>
 8010492:	2101      	movs	r1, #1
 8010494:	4620      	mov	r0, r4
 8010496:	f7ff fc47 	bl	800fd28 <ull_setdwstate>
 801049a:	f04f 0b32 	mov.w	fp, #50	; 0x32
 801049e:	f04f 0814 	mov.w	r8, #20
 80104a2:	4637      	mov	r7, r6
 80104a4:	2644      	movs	r6, #68	; 0x44
 80104a6:	4640      	mov	r0, r8
 80104a8:	f7f1 f867 	bl	800157a <deca_usleep>
 80104ac:	463a      	mov	r2, r7
 80104ae:	4631      	mov	r1, r6
 80104b0:	4620      	mov	r0, r4
 80104b2:	f7fd ff09 	bl	800e2c8 <dwt_read8bitoffsetreg>
 80104b6:	f010 0f02 	tst.w	r0, #2
 80104ba:	f040 80af 	bne.w	801061c <ull_configure+0x404>
 80104be:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80104c2:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 80104c6:	d1ee      	bne.n	80104a6 <ull_configure+0x28e>
 80104c8:	f06f 0001 	mvn.w	r0, #1
 80104cc:	e0e6      	b.n	801069c <ull_configure+0x484>
 80104ce:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80104d0:	8a13      	ldrh	r3, [r2, #16]
 80104d2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80104d6:	8213      	strh	r3, [r2, #16]
 80104d8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80104dc:	9300      	str	r3, [sp, #0]
 80104de:	f46f 5340 	mvn.w	r3, #12288	; 0x3000
 80104e2:	2200      	movs	r2, #0
 80104e4:	493c      	ldr	r1, [pc, #240]	; (80105d8 <ull_configure+0x3c0>)
 80104e6:	4620      	mov	r0, r4
 80104e8:	f7ff f87e 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 80104ec:	f240 3306 	movw	r3, #774	; 0x306
 80104f0:	2200      	movs	r2, #0
 80104f2:	4945      	ldr	r1, [pc, #276]	; (8010608 <ull_configure+0x3f0>)
 80104f4:	4620      	mov	r0, r4
 80104f6:	f7fe fb71 	bl	800ebdc <dwt_write32bitoffsetreg>
 80104fa:	2300      	movs	r3, #0
 80104fc:	461a      	mov	r2, r3
 80104fe:	4943      	ldr	r1, [pc, #268]	; (801060c <ull_configure+0x3f4>)
 8010500:	4620      	mov	r0, r4
 8010502:	f7fe fb6b 	bl	800ebdc <dwt_write32bitoffsetreg>
 8010506:	4b42      	ldr	r3, [pc, #264]	; (8010610 <ull_configure+0x3f8>)
 8010508:	2200      	movs	r2, #0
 801050a:	4930      	ldr	r1, [pc, #192]	; (80105cc <ull_configure+0x3b4>)
 801050c:	4620      	mov	r0, r4
 801050e:	f7fe fb65 	bl	800ebdc <dwt_write32bitoffsetreg>
 8010512:	239d      	movs	r3, #157	; 0x9d
 8010514:	9300      	str	r3, [sp, #0]
 8010516:	4b2e      	ldr	r3, [pc, #184]	; (80105d0 <ull_configure+0x3b8>)
 8010518:	2200      	movs	r2, #0
 801051a:	492e      	ldr	r1, [pc, #184]	; (80105d4 <ull_configure+0x3bc>)
 801051c:	4620      	mov	r0, r4
 801051e:	f7ff f863 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 8010522:	e70b      	b.n	801033c <ull_configure+0x124>
 8010524:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8010528:	9300      	str	r3, [sp, #0]
 801052a:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 801052e:	2200      	movs	r2, #0
 8010530:	4929      	ldr	r1, [pc, #164]	; (80105d8 <ull_configure+0x3c0>)
 8010532:	4620      	mov	r0, r4
 8010534:	f7ff fd58 	bl	800ffe8 <dwt_modify16bitoffsetreg>
 8010538:	e700      	b.n	801033c <ull_configure+0x124>
 801053a:	78ab      	ldrb	r3, [r5, #2]
 801053c:	9300      	str	r3, [sp, #0]
 801053e:	23ec      	movs	r3, #236	; 0xec
 8010540:	2200      	movs	r2, #0
 8010542:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8010546:	4620      	mov	r0, r4
 8010548:	f7ff f9be 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 801054c:	e705      	b.n	801035a <ull_configure+0x142>
 801054e:	2803      	cmp	r0, #3
 8010550:	f47f af6a 	bne.w	8010428 <ull_configure+0x210>
 8010554:	e065      	b.n	8010622 <ull_configure+0x40a>
 8010556:	2102      	movs	r1, #2
 8010558:	4620      	mov	r0, r4
 801055a:	f7ff fbe5 	bl	800fd28 <ull_setdwstate>
 801055e:	e763      	b.n	8010428 <ull_configure+0x210>
 8010560:	4b2c      	ldr	r3, [pc, #176]	; (8010614 <ull_configure+0x3fc>)
 8010562:	9300      	str	r3, [sp, #0]
 8010564:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010568:	2200      	movs	r2, #0
 801056a:	4922      	ldr	r1, [pc, #136]	; (80105f4 <ull_configure+0x3dc>)
 801056c:	4620      	mov	r0, r4
 801056e:	f7ff f83b 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 8010572:	f640 733c 	movw	r3, #3900	; 0xf3c
 8010576:	2200      	movs	r2, #0
 8010578:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 801057c:	4620      	mov	r0, r4
 801057e:	f7fe fac2 	bl	800eb06 <dwt_write16bitoffsetreg>
 8010582:	e766      	b.n	8010452 <ull_configure+0x23a>
 8010584:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010588:	9300      	str	r3, [sp, #0]
 801058a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801058e:	2200      	movs	r2, #0
 8010590:	4911      	ldr	r1, [pc, #68]	; (80105d8 <ull_configure+0x3c0>)
 8010592:	4620      	mov	r0, r4
 8010594:	f7ff fd28 	bl	800ffe8 <dwt_modify16bitoffsetreg>
 8010598:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801059a:	8a13      	ldrh	r3, [r2, #16]
 801059c:	f043 0308 	orr.w	r3, r3, #8
 80105a0:	8213      	strh	r3, [r2, #16]
 80105a2:	e050      	b.n	8010646 <ull_configure+0x42e>
 80105a4:	2200      	movs	r2, #0
 80105a6:	9200      	str	r2, [sp, #0]
 80105a8:	23fe      	movs	r3, #254	; 0xfe
 80105aa:	491b      	ldr	r1, [pc, #108]	; (8010618 <ull_configure+0x400>)
 80105ac:	4620      	mov	r0, r4
 80105ae:	f7ff f98b 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 80105b2:	e052      	b.n	801065a <ull_configure+0x442>
 80105b4:	2101      	movs	r1, #1
 80105b6:	4620      	mov	r0, r4
 80105b8:	f7ff fda2 	bl	8010100 <ull_pgf_cal>
 80105bc:	e06b      	b.n	8010696 <ull_configure+0x47e>
 80105be:	bf00      	nop
 80105c0:	00026668 	.word	0x00026668
 80105c4:	fffc4fcf 	.word	0xfffc4fcf
 80105c8:	08016464 	.word	0x08016464
 80105cc:	000e0014 	.word	0x000e0014
 80105d0:	bfffff00 	.word	0xbfffff00
 80105d4:	000e0018 	.word	0x000e0018
 80105d8:	000b0008 	.word	0x000b0008
 80105dc:	af5f35cc 	.word	0xaf5f35cc
 80105e0:	af5f584c 	.word	0xaf5f584c
 80105e4:	0006000c 	.word	0x0006000c
 80105e8:	00010008 	.word	0x00010008
 80105ec:	000f0030 	.word	0x000f0030
 80105f0:	1c071134 	.word	0x1c071134
 80105f4:	0007001c 	.word	0x0007001c
 80105f8:	00070050 	.word	0x00070050
 80105fc:	00070018 	.word	0x00070018
 8010600:	00090008 	.word	0x00090008
 8010604:	00090004 	.word	0x00090004
 8010608:	000e000c 	.word	0x000e000c
 801060c:	000e0010 	.word	0x000e0010
 8010610:	000c5a0a 	.word	0x000c5a0a
 8010614:	1c010034 	.word	0x1c010034
 8010618:	00030018 	.word	0x00030018
 801061c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801061e:	f883 900f 	strb.w	r9, [r3, #15]
 8010622:	792b      	ldrb	r3, [r5, #4]
 8010624:	3b09      	subs	r3, #9
 8010626:	b2db      	uxtb	r3, r3
 8010628:	2b0f      	cmp	r3, #15
 801062a:	d8bb      	bhi.n	80105a4 <ull_configure+0x38c>
 801062c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801062e:	7a1b      	ldrb	r3, [r3, #8]
 8010630:	2b01      	cmp	r3, #1
 8010632:	d0a7      	beq.n	8010584 <ull_configure+0x36c>
 8010634:	4649      	mov	r1, r9
 8010636:	4620      	mov	r0, r4
 8010638:	f7fe fb9c 	bl	800ed74 <ull_configmrxlut>
 801063c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801063e:	8a13      	ldrh	r3, [r2, #16]
 8010640:	f023 0308 	bic.w	r3, r3, #8
 8010644:	8213      	strh	r3, [r2, #16]
 8010646:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 801064a:	9300      	str	r3, [sp, #0]
 801064c:	f248 13ff 	movw	r3, #33279	; 0x81ff
 8010650:	2200      	movs	r2, #0
 8010652:	4914      	ldr	r1, [pc, #80]	; (80106a4 <ull_configure+0x48c>)
 8010654:	4620      	mov	r0, r4
 8010656:	f7ff fcc7 	bl	800ffe8 <dwt_modify16bitoffsetreg>
 801065a:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 801065e:	bfcc      	ite	gt
 8010660:	f04f 5300 	movgt.w	r3, #536870912	; 0x20000000
 8010664:	f04f 53a0 	movle.w	r3, #335544320	; 0x14000000
 8010668:	9300      	str	r3, [sp, #0]
 801066a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801066e:	2200      	movs	r2, #0
 8010670:	490d      	ldr	r1, [pc, #52]	; (80106a8 <ull_configure+0x490>)
 8010672:	4620      	mov	r0, r4
 8010674:	f7fe ffb8 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 8010678:	2301      	movs	r3, #1
 801067a:	9300      	str	r3, [sp, #0]
 801067c:	23ff      	movs	r3, #255	; 0xff
 801067e:	2202      	movs	r2, #2
 8010680:	490a      	ldr	r1, [pc, #40]	; (80106ac <ull_configure+0x494>)
 8010682:	4620      	mov	r0, r4
 8010684:	f7ff f920 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 8010688:	2200      	movs	r2, #0
 801068a:	4909      	ldr	r1, [pc, #36]	; (80106b0 <ull_configure+0x498>)
 801068c:	4620      	mov	r0, r4
 801068e:	f7fd fdc6 	bl	800e21e <dwt_read32bitoffsetreg>
 8010692:	2800      	cmp	r0, #0
 8010694:	d08e      	beq.n	80105b4 <ull_configure+0x39c>
 8010696:	4620      	mov	r0, r4
 8010698:	f7ff f98a 	bl	800f9b0 <ull_adcoffsetscalibration>
 801069c:	b003      	add	sp, #12
 801069e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106a2:	bf00      	nop
 80106a4:	00030018 	.word	0x00030018
 80106a8:	00060010 	.word	0x00060010
 80106ac:	0004000c 	.word	0x0004000c
 80106b0:	00040014 	.word	0x00040014

080106b4 <ull_initialise>:
 80106b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106b8:	b082      	sub	sp, #8
 80106ba:	4605      	mov	r5, r0
 80106bc:	460e      	mov	r6, r1
 80106be:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d05b      	beq.n	801077c <ull_initialise+0xc8>
 80106c4:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 80106c6:	2300      	movs	r3, #0
 80106c8:	73a3      	strb	r3, [r4, #14]
 80106ca:	2202      	movs	r2, #2
 80106cc:	8222      	strh	r2, [r4, #16]
 80106ce:	7523      	strb	r3, [r4, #20]
 80106d0:	7563      	strb	r3, [r4, #21]
 80106d2:	73e3      	strb	r3, [r4, #15]
 80106d4:	7263      	strb	r3, [r4, #9]
 80106d6:	72a3      	strb	r3, [r4, #10]
 80106d8:	2104      	movs	r1, #4
 80106da:	4628      	mov	r0, r5
 80106dc:	f7fe fa5c 	bl	800eb98 <_dwt_otpread>
 80106e0:	4607      	mov	r7, r0
 80106e2:	2105      	movs	r1, #5
 80106e4:	4628      	mov	r0, r5
 80106e6:	f7fe fa57 	bl	800eb98 <_dwt_otpread>
 80106ea:	4680      	mov	r8, r0
 80106ec:	210a      	movs	r1, #10
 80106ee:	4628      	mov	r0, r5
 80106f0:	f7fe fa52 	bl	800eb98 <_dwt_otpread>
 80106f4:	b12f      	cbz	r7, 8010702 <ull_initialise+0x4e>
 80106f6:	f1b8 0f00 	cmp.w	r8, #0
 80106fa:	d002      	beq.n	8010702 <ull_initialise+0x4e>
 80106fc:	b280      	uxth	r0, r0
 80106fe:	2800      	cmp	r0, #0
 8010700:	d141      	bne.n	8010786 <ull_initialise+0xd2>
 8010702:	2120      	movs	r1, #32
 8010704:	4628      	mov	r0, r5
 8010706:	f7fe fa47 	bl	800eb98 <_dwt_otpread>
 801070a:	f5b0 7f10 	cmp.w	r0, #576	; 0x240
 801070e:	bf0c      	ite	eq
 8010710:	2301      	moveq	r3, #1
 8010712:	2300      	movne	r3, #0
 8010714:	7223      	strb	r3, [r4, #8]
 8010716:	f016 0f10 	tst.w	r6, #16
 801071a:	d143      	bne.n	80107a4 <ull_initialise+0xf0>
 801071c:	f016 0f20 	tst.w	r6, #32
 8010720:	d146      	bne.n	80107b0 <ull_initialise+0xfc>
 8010722:	f016 0f40 	tst.w	r6, #64	; 0x40
 8010726:	d149      	bne.n	80107bc <ull_initialise+0x108>
 8010728:	f016 0f80 	tst.w	r6, #128	; 0x80
 801072c:	d14d      	bne.n	80107ca <ull_initialise+0x116>
 801072e:	7aa3      	ldrb	r3, [r4, #10]
 8010730:	b90b      	cbnz	r3, 8010736 <ull_initialise+0x82>
 8010732:	2385      	movs	r3, #133	; 0x85
 8010734:	72a3      	strb	r3, [r4, #10]
 8010736:	7a63      	ldrb	r3, [r4, #9]
 8010738:	b90b      	cbnz	r3, 801073e <ull_initialise+0x8a>
 801073a:	2374      	movs	r3, #116	; 0x74
 801073c:	7263      	strb	r3, [r4, #9]
 801073e:	211f      	movs	r1, #31
 8010740:	4628      	mov	r0, r5
 8010742:	f7fe fa29 	bl	800eb98 <_dwt_otpread>
 8010746:	7320      	strb	r0, [r4, #12]
 8010748:	211e      	movs	r1, #30
 801074a:	4628      	mov	r0, r5
 801074c:	f7fe fa24 	bl	800eb98 <_dwt_otpread>
 8010750:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
 8010754:	bf12      	itee	ne
 8010756:	7360      	strbne	r0, [r4, #13]
 8010758:	232e      	moveq	r3, #46	; 0x2e
 801075a:	7363      	strbeq	r3, [r4, #13]
 801075c:	7b63      	ldrb	r3, [r4, #13]
 801075e:	2200      	movs	r2, #0
 8010760:	4920      	ldr	r1, [pc, #128]	; (80107e4 <ull_initialise+0x130>)
 8010762:	4628      	mov	r0, r5
 8010764:	f7fe fc1e 	bl	800efa4 <dwt_write8bitoffsetreg>
 8010768:	2135      	movs	r1, #53	; 0x35
 801076a:	4628      	mov	r0, r5
 801076c:	f7fe fa14 	bl	800eb98 <_dwt_otpread>
 8010770:	4603      	mov	r3, r0
 8010772:	bb80      	cbnz	r0, 80107d6 <ull_initialise+0x122>
 8010774:	2000      	movs	r0, #0
 8010776:	b002      	add	sp, #8
 8010778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801077c:	2028      	movs	r0, #40	; 0x28
 801077e:	f003 fb7f 	bl	8013e80 <malloc>
 8010782:	6528      	str	r0, [r5, #80]	; 0x50
 8010784:	e79e      	b.n	80106c4 <ull_initialise+0x10>
 8010786:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801078a:	9300      	str	r3, [sp, #0]
 801078c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010790:	2200      	movs	r2, #0
 8010792:	4915      	ldr	r1, [pc, #84]	; (80107e8 <ull_initialise+0x134>)
 8010794:	4628      	mov	r0, r5
 8010796:	f7ff fc27 	bl	800ffe8 <dwt_modify16bitoffsetreg>
 801079a:	8a23      	ldrh	r3, [r4, #16]
 801079c:	f043 0314 	orr.w	r3, r3, #20
 80107a0:	8223      	strh	r3, [r4, #16]
 80107a2:	e7ae      	b.n	8010702 <ull_initialise+0x4e>
 80107a4:	2106      	movs	r1, #6
 80107a6:	4628      	mov	r0, r5
 80107a8:	f7fe f9f6 	bl	800eb98 <_dwt_otpread>
 80107ac:	6020      	str	r0, [r4, #0]
 80107ae:	e7b5      	b.n	801071c <ull_initialise+0x68>
 80107b0:	2107      	movs	r1, #7
 80107b2:	4628      	mov	r0, r5
 80107b4:	f7fe f9f0 	bl	800eb98 <_dwt_otpread>
 80107b8:	6060      	str	r0, [r4, #4]
 80107ba:	e7b2      	b.n	8010722 <ull_initialise+0x6e>
 80107bc:	2108      	movs	r1, #8
 80107be:	4628      	mov	r0, r5
 80107c0:	f7fe f9ea 	bl	800eb98 <_dwt_otpread>
 80107c4:	0c00      	lsrs	r0, r0, #16
 80107c6:	7260      	strb	r0, [r4, #9]
 80107c8:	e7ae      	b.n	8010728 <ull_initialise+0x74>
 80107ca:	2109      	movs	r1, #9
 80107cc:	4628      	mov	r0, r5
 80107ce:	f7fe f9e3 	bl	800eb98 <_dwt_otpread>
 80107d2:	72a0      	strb	r0, [r4, #10]
 80107d4:	e7ab      	b.n	801072e <ull_initialise+0x7a>
 80107d6:	2200      	movs	r2, #0
 80107d8:	4904      	ldr	r1, [pc, #16]	; (80107ec <ull_initialise+0x138>)
 80107da:	4628      	mov	r0, r5
 80107dc:	f7fe f9fe 	bl	800ebdc <dwt_write32bitoffsetreg>
 80107e0:	e7c8      	b.n	8010774 <ull_initialise+0xc0>
 80107e2:	bf00      	nop
 80107e4:	00090014 	.word	0x00090014
 80107e8:	000b0008 	.word	0x000b0008
 80107ec:	00090004 	.word	0x00090004

080107f0 <ull_rxenable>:
 80107f0:	b530      	push	{r4, r5, lr}
 80107f2:	b083      	sub	sp, #12
 80107f4:	4605      	mov	r5, r0
 80107f6:	460c      	mov	r4, r1
 80107f8:	b171      	cbz	r1, 8010818 <ull_rxenable+0x28>
 80107fa:	f021 0302 	bic.w	r3, r1, #2
 80107fe:	3b01      	subs	r3, #1
 8010800:	2b0f      	cmp	r3, #15
 8010802:	d862      	bhi.n	80108ca <ull_rxenable+0xda>
 8010804:	e8df f003 	tbb	[pc, r3]
 8010808:	24616111 	.word	0x24616111
 801080c:	2d616161 	.word	0x2d616161
 8010810:	61616161 	.word	0x61616161
 8010814:	3a616161 	.word	0x3a616161
 8010818:	2102      	movs	r1, #2
 801081a:	9101      	str	r1, [sp, #4]
 801081c:	2200      	movs	r2, #0
 801081e:	9200      	str	r2, [sp, #0]
 8010820:	4613      	mov	r3, r2
 8010822:	f7fd fc74 	bl	800e10e <dwt_xfer3xxx>
 8010826:	4620      	mov	r0, r4
 8010828:	e010      	b.n	801084c <ull_rxenable+0x5c>
 801082a:	2302      	movs	r3, #2
 801082c:	9301      	str	r3, [sp, #4]
 801082e:	2200      	movs	r2, #0
 8010830:	9200      	str	r2, [sp, #0]
 8010832:	4613      	mov	r3, r2
 8010834:	2104      	movs	r1, #4
 8010836:	f7fd fc6a 	bl	800e10e <dwt_xfer3xxx>
 801083a:	2203      	movs	r2, #3
 801083c:	2144      	movs	r1, #68	; 0x44
 801083e:	4628      	mov	r0, r5
 8010840:	f7fd fd42 	bl	800e2c8 <dwt_read8bitoffsetreg>
 8010844:	f010 0f08 	tst.w	r0, #8
 8010848:	d125      	bne.n	8010896 <ull_rxenable+0xa6>
 801084a:	2000      	movs	r0, #0
 801084c:	b003      	add	sp, #12
 801084e:	bd30      	pop	{r4, r5, pc}
 8010850:	2302      	movs	r3, #2
 8010852:	9301      	str	r3, [sp, #4]
 8010854:	2200      	movs	r2, #0
 8010856:	9200      	str	r2, [sp, #0]
 8010858:	4613      	mov	r3, r2
 801085a:	210a      	movs	r1, #10
 801085c:	f7fd fc57 	bl	800e10e <dwt_xfer3xxx>
 8010860:	e7eb      	b.n	801083a <ull_rxenable+0x4a>
 8010862:	2100      	movs	r1, #0
 8010864:	f7fe f9cf 	bl	800ec06 <_dwt_adjust_delaytime>
 8010868:	2302      	movs	r3, #2
 801086a:	9301      	str	r3, [sp, #4]
 801086c:	2200      	movs	r2, #0
 801086e:	9200      	str	r2, [sp, #0]
 8010870:	4613      	mov	r3, r2
 8010872:	2108      	movs	r1, #8
 8010874:	4628      	mov	r0, r5
 8010876:	f7fd fc4a 	bl	800e10e <dwt_xfer3xxx>
 801087a:	e7de      	b.n	801083a <ull_rxenable+0x4a>
 801087c:	2101      	movs	r1, #1
 801087e:	f7fe f9c2 	bl	800ec06 <_dwt_adjust_delaytime>
 8010882:	2302      	movs	r3, #2
 8010884:	9301      	str	r3, [sp, #4]
 8010886:	2200      	movs	r2, #0
 8010888:	9200      	str	r2, [sp, #0]
 801088a:	4613      	mov	r3, r2
 801088c:	2106      	movs	r1, #6
 801088e:	4628      	mov	r0, r5
 8010890:	f7fd fc3d 	bl	800e10e <dwt_xfer3xxx>
 8010894:	e7d1      	b.n	801083a <ull_rxenable+0x4a>
 8010896:	2302      	movs	r3, #2
 8010898:	9301      	str	r3, [sp, #4]
 801089a:	2100      	movs	r1, #0
 801089c:	9100      	str	r1, [sp, #0]
 801089e:	460b      	mov	r3, r1
 80108a0:	460a      	mov	r2, r1
 80108a2:	4628      	mov	r0, r5
 80108a4:	f7fd fc33 	bl	800e10e <dwt_xfer3xxx>
 80108a8:	f014 0f02 	tst.w	r4, #2
 80108ac:	d002      	beq.n	80108b4 <ull_rxenable+0xc4>
 80108ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80108b2:	e7cb      	b.n	801084c <ull_rxenable+0x5c>
 80108b4:	2102      	movs	r1, #2
 80108b6:	9101      	str	r1, [sp, #4]
 80108b8:	2200      	movs	r2, #0
 80108ba:	9200      	str	r2, [sp, #0]
 80108bc:	4613      	mov	r3, r2
 80108be:	4628      	mov	r0, r5
 80108c0:	f7fd fc25 	bl	800e10e <dwt_xfer3xxx>
 80108c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80108c8:	e7c0      	b.n	801084c <ull_rxenable+0x5c>
 80108ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80108ce:	e7bd      	b.n	801084c <ull_rxenable+0x5c>

080108d0 <ull_softreset_no_sema_fcmd>:
 80108d0:	b570      	push	{r4, r5, r6, lr}
 80108d2:	b082      	sub	sp, #8
 80108d4:	4606      	mov	r6, r0
 80108d6:	2502      	movs	r5, #2
 80108d8:	9501      	str	r5, [sp, #4]
 80108da:	2400      	movs	r4, #0
 80108dc:	9400      	str	r4, [sp, #0]
 80108de:	4623      	mov	r3, r4
 80108e0:	4622      	mov	r2, r4
 80108e2:	2119      	movs	r1, #25
 80108e4:	f7fd fc13 	bl	800e10e <dwt_xfer3xxx>
 80108e8:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80108ea:	739c      	strb	r4, [r3, #14]
 80108ec:	821d      	strh	r5, [r3, #16]
 80108ee:	751c      	strb	r4, [r3, #20]
 80108f0:	755c      	strb	r4, [r3, #21]
 80108f2:	73dc      	strb	r4, [r3, #15]
 80108f4:	b002      	add	sp, #8
 80108f6:	bd70      	pop	{r4, r5, r6, pc}

080108f8 <ull_softreset_fcmd>:
 80108f8:	b570      	push	{r4, r5, r6, lr}
 80108fa:	b082      	sub	sp, #8
 80108fc:	4606      	mov	r6, r0
 80108fe:	2502      	movs	r5, #2
 8010900:	9501      	str	r5, [sp, #4]
 8010902:	2400      	movs	r4, #0
 8010904:	9400      	str	r4, [sp, #0]
 8010906:	4623      	mov	r3, r4
 8010908:	4622      	mov	r2, r4
 801090a:	2118      	movs	r1, #24
 801090c:	f7fd fbff 	bl	800e10e <dwt_xfer3xxx>
 8010910:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8010912:	739c      	strb	r4, [r3, #14]
 8010914:	821d      	strh	r5, [r3, #16]
 8010916:	751c      	strb	r4, [r3, #20]
 8010918:	755c      	strb	r4, [r3, #21]
 801091a:	73dc      	strb	r4, [r3, #15]
 801091c:	b002      	add	sp, #8
 801091e:	bd70      	pop	{r4, r5, r6, pc}

08010920 <dwt_ioctl>:
 8010920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010924:	b08d      	sub	sp, #52	; 0x34
 8010926:	4606      	mov	r6, r0
 8010928:	4615      	mov	r5, r2
 801092a:	461c      	mov	r4, r3
 801092c:	299c      	cmp	r1, #156	; 0x9c
 801092e:	f200 809f 	bhi.w	8010a70 <dwt_ioctl+0x150>
 8010932:	e8df f011 	tbh	[pc, r1, lsl #1]
 8010936:	09b9      	.short	0x09b9
 8010938:	00a109c4 	.word	0x00a109c4
 801093c:	00c100a6 	.word	0x00c100a6
 8010940:	019d0151 	.word	0x019d0151
 8010944:	015c0176 	.word	0x015c0176
 8010948:	01b301ae 	.word	0x01b301ae
 801094c:	01c501bc 	.word	0x01c501bc
 8010950:	01d701ce 	.word	0x01d701ce
 8010954:	01e501e0 	.word	0x01e501e0
 8010958:	027201ee 	.word	0x027201ee
 801095c:	027e0278 	.word	0x027e0278
 8010960:	028f0289 	.word	0x028f0289
 8010964:	029a0295 	.word	0x029a0295
 8010968:	02a502a0 	.word	0x02a502a0
 801096c:	02b702ae 	.word	0x02b702ae
 8010970:	02c902c0 	.word	0x02c902c0
 8010974:	02f90304 	.word	0x02f90304
 8010978:	02d202ee 	.word	0x02d202ee
 801097c:	031e02e0 	.word	0x031e02e0
 8010980:	021a01f8 	.word	0x021a01f8
 8010984:	02420239 	.word	0x02420239
 8010988:	08ba0258 	.word	0x08ba0258
 801098c:	031508bf 	.word	0x031508bf
 8010990:	032c0327 	.word	0x032c0327
 8010994:	033c0336 	.word	0x033c0336
 8010998:	03520347 	.word	0x03520347
 801099c:	0386035b 	.word	0x0386035b
 80109a0:	03a9039d 	.word	0x03a9039d
 80109a4:	03b5030a 	.word	0x03b5030a
 80109a8:	03d203bf 	.word	0x03d203bf
 80109ac:	040b03f9 	.word	0x040b03f9
 80109b0:	0457044d 	.word	0x0457044d
 80109b4:	048c047d 	.word	0x048c047d
 80109b8:	049504a7 	.word	0x049504a7
 80109bc:	04f704b1 	.word	0x04f704b1
 80109c0:	052f050f 	.word	0x052f050f
 80109c4:	05580544 	.word	0x05580544
 80109c8:	057d0561 	.word	0x057d0561
 80109cc:	0692056a 	.word	0x0692056a
 80109d0:	071106c1 	.word	0x071106c1
 80109d4:	07220717 	.word	0x07220717
 80109d8:	075b073b 	.word	0x075b073b
 80109dc:	078f0765 	.word	0x078f0765
 80109e0:	07c607bd 	.word	0x07c607bd
 80109e4:	07d507cc 	.word	0x07d507cc
 80109e8:	07ef07e2 	.word	0x07ef07e2
 80109ec:	080207f9 	.word	0x080207f9
 80109f0:	0816080b 	.word	0x0816080b
 80109f4:	08270821 	.word	0x08270821
 80109f8:	0855084a 	.word	0x0855084a
 80109fc:	086b0860 	.word	0x086b0860
 8010a00:	0898088d 	.word	0x0898088d
 8010a04:	08c508b1 	.word	0x08c508b1
 8010a08:	0959094f 	.word	0x0959094f
 8010a0c:	09cc0964 	.word	0x09cc0964
 8010a10:	09ae096e 	.word	0x09ae096e
 8010a14:	090306b3 	.word	0x090306b3
 8010a18:	0a3a0924 	.word	0x0a3a0924
 8010a1c:	09d90a2f 	.word	0x09d90a2f
 8010a20:	09ef09e4 	.word	0x09ef09e4
 8010a24:	0a0509fa 	.word	0x0a0509fa
 8010a28:	0a1b0a10 	.word	0x0a1b0a10
 8010a2c:	0c320a24 	.word	0x0c320a24
 8010a30:	0ca30c69 	.word	0x0ca30c69
 8010a34:	0e2d0cc5 	.word	0x0e2d0cc5
 8010a38:	0a4a0e41 	.word	0x0a4a0e41
 8010a3c:	0b890b57 	.word	0x0b890b57
 8010a40:	0b970b93 	.word	0x0b970b93
 8010a44:	0ba50b9b 	.word	0x0ba50b9b
 8010a48:	0bc10bb7 	.word	0x0bc10bb7
 8010a4c:	0be80bd4 	.word	0x0be80bd4
 8010a50:	0cdb0c22 	.word	0x0cdb0c22
 8010a54:	0cfd0ce5 	.word	0x0cfd0ce5
 8010a58:	0d2d0d18 	.word	0x0d2d0d18
 8010a5c:	0d890d4d 	.word	0x0d890d4d
 8010a60:	0db70da1 	.word	0x0db70da1
 8010a64:	0efc0dc7 	.word	0x0efc0dc7
 8010a68:	0dec0df6 	.word	0x0dec0df6
 8010a6c:	0e000e08 	.word	0x0e000e08
 8010a70:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8010a74:	f001 be5c 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010a78:	f7fd fb28 	bl	800e0cc <ull_wakeup_ic>
 8010a7c:	2500      	movs	r5, #0
 8010a7e:	f001 be57 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010a82:	2202      	movs	r2, #2
 8010a84:	49c0      	ldr	r1, [pc, #768]	; (8010d88 <dwt_ioctl+0x468>)
 8010a86:	f7fd fc1f 	bl	800e2c8 <dwt_read8bitoffsetreg>
 8010a8a:	2803      	cmp	r0, #3
 8010a8c:	d802      	bhi.n	8010a94 <dwt_ioctl+0x174>
 8010a8e:	2500      	movs	r5, #0
 8010a90:	f001 be4e 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010a94:	f7f0 fd48 	bl	8001528 <decamutexon>
 8010a98:	4604      	mov	r4, r0
 8010a9a:	2302      	movs	r3, #2
 8010a9c:	9301      	str	r3, [sp, #4]
 8010a9e:	2500      	movs	r5, #0
 8010aa0:	9500      	str	r5, [sp, #0]
 8010aa2:	462b      	mov	r3, r5
 8010aa4:	462a      	mov	r2, r5
 8010aa6:	4629      	mov	r1, r5
 8010aa8:	4630      	mov	r0, r6
 8010aaa:	f7fd fb30 	bl	800e10e <dwt_xfer3xxx>
 8010aae:	4620      	mov	r0, r4
 8010ab0:	f7f0 fd4b 	bl	800154a <decamutexoff>
 8010ab4:	f001 be3c 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010ab8:	2c00      	cmp	r4, #0
 8010aba:	f001 863d 	beq.w	8012738 <dwt_ioctl+0x1e18>
 8010abe:	7824      	ldrb	r4, [r4, #0]
 8010ac0:	f014 0f1d 	tst.w	r4, #29
 8010ac4:	d063      	beq.n	8010b8e <dwt_ioctl+0x26e>
 8010ac6:	f014 0f01 	tst.w	r4, #1
 8010aca:	d025      	beq.n	8010b18 <dwt_ioctl+0x1f8>
 8010acc:	f014 0f02 	tst.w	r4, #2
 8010ad0:	f04f 0302 	mov.w	r3, #2
 8010ad4:	9301      	str	r3, [sp, #4]
 8010ad6:	f04f 0200 	mov.w	r2, #0
 8010ada:	9200      	str	r2, [sp, #0]
 8010adc:	4613      	mov	r3, r2
 8010ade:	bf14      	ite	ne
 8010ae0:	210d      	movne	r1, #13
 8010ae2:	2103      	moveq	r1, #3
 8010ae4:	f7fd fb13 	bl	800e10e <dwt_xfer3xxx>
 8010ae8:	2203      	movs	r2, #3
 8010aea:	2144      	movs	r1, #68	; 0x44
 8010aec:	4630      	mov	r0, r6
 8010aee:	f7fd fbeb 	bl	800e2c8 <dwt_read8bitoffsetreg>
 8010af2:	f010 0f08 	tst.w	r0, #8
 8010af6:	bf08      	it	eq
 8010af8:	2500      	moveq	r5, #0
 8010afa:	f001 8619 	beq.w	8012730 <dwt_ioctl+0x1e10>
 8010afe:	2302      	movs	r3, #2
 8010b00:	9301      	str	r3, [sp, #4]
 8010b02:	2100      	movs	r1, #0
 8010b04:	9100      	str	r1, [sp, #0]
 8010b06:	460b      	mov	r3, r1
 8010b08:	460a      	mov	r2, r1
 8010b0a:	4630      	mov	r0, r6
 8010b0c:	f7fd faff 	bl	800e10e <dwt_xfer3xxx>
 8010b10:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8010b14:	f001 be0c 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010b18:	f014 0f08 	tst.w	r4, #8
 8010b1c:	d111      	bne.n	8010b42 <dwt_ioctl+0x222>
 8010b1e:	f014 0f10 	tst.w	r4, #16
 8010b22:	d121      	bne.n	8010b68 <dwt_ioctl+0x248>
 8010b24:	f014 0f02 	tst.w	r4, #2
 8010b28:	f04f 0302 	mov.w	r3, #2
 8010b2c:	9301      	str	r3, [sp, #4]
 8010b2e:	f04f 0200 	mov.w	r2, #0
 8010b32:	9200      	str	r2, [sp, #0]
 8010b34:	4613      	mov	r3, r2
 8010b36:	bf14      	ite	ne
 8010b38:	2110      	movne	r1, #16
 8010b3a:	2109      	moveq	r1, #9
 8010b3c:	f7fd fae7 	bl	800e10e <dwt_xfer3xxx>
 8010b40:	e7d2      	b.n	8010ae8 <dwt_ioctl+0x1c8>
 8010b42:	2100      	movs	r1, #0
 8010b44:	f7fe f85f 	bl	800ec06 <_dwt_adjust_delaytime>
 8010b48:	f014 0f02 	tst.w	r4, #2
 8010b4c:	f04f 0302 	mov.w	r3, #2
 8010b50:	9301      	str	r3, [sp, #4]
 8010b52:	f04f 0200 	mov.w	r2, #0
 8010b56:	9200      	str	r2, [sp, #0]
 8010b58:	4613      	mov	r3, r2
 8010b5a:	bf14      	ite	ne
 8010b5c:	210f      	movne	r1, #15
 8010b5e:	2107      	moveq	r1, #7
 8010b60:	4630      	mov	r0, r6
 8010b62:	f7fd fad4 	bl	800e10e <dwt_xfer3xxx>
 8010b66:	e7bf      	b.n	8010ae8 <dwt_ioctl+0x1c8>
 8010b68:	2101      	movs	r1, #1
 8010b6a:	f7fe f84c 	bl	800ec06 <_dwt_adjust_delaytime>
 8010b6e:	f014 0f02 	tst.w	r4, #2
 8010b72:	f04f 0302 	mov.w	r3, #2
 8010b76:	9301      	str	r3, [sp, #4]
 8010b78:	f04f 0200 	mov.w	r2, #0
 8010b7c:	9200      	str	r2, [sp, #0]
 8010b7e:	4613      	mov	r3, r2
 8010b80:	bf14      	ite	ne
 8010b82:	210e      	movne	r1, #14
 8010b84:	2105      	moveq	r1, #5
 8010b86:	4630      	mov	r0, r6
 8010b88:	f7fd fac1 	bl	800e10e <dwt_xfer3xxx>
 8010b8c:	e7ac      	b.n	8010ae8 <dwt_ioctl+0x1c8>
 8010b8e:	f014 0f20 	tst.w	r4, #32
 8010b92:	d010      	beq.n	8010bb6 <dwt_ioctl+0x296>
 8010b94:	f014 0f02 	tst.w	r4, #2
 8010b98:	f04f 0302 	mov.w	r3, #2
 8010b9c:	9301      	str	r3, [sp, #4]
 8010b9e:	f04f 0500 	mov.w	r5, #0
 8010ba2:	9500      	str	r5, [sp, #0]
 8010ba4:	462b      	mov	r3, r5
 8010ba6:	462a      	mov	r2, r5
 8010ba8:	bf14      	ite	ne
 8010baa:	2111      	movne	r1, #17
 8010bac:	210b      	moveq	r1, #11
 8010bae:	f7fd faae 	bl	800e10e <dwt_xfer3xxx>
 8010bb2:	f001 bdbd 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010bb6:	f014 0f02 	tst.w	r4, #2
 8010bba:	f04f 0302 	mov.w	r3, #2
 8010bbe:	9301      	str	r3, [sp, #4]
 8010bc0:	f04f 0500 	mov.w	r5, #0
 8010bc4:	9500      	str	r5, [sp, #0]
 8010bc6:	462b      	mov	r3, r5
 8010bc8:	462a      	mov	r2, r5
 8010bca:	bf14      	ite	ne
 8010bcc:	210c      	movne	r1, #12
 8010bce:	2101      	moveq	r1, #1
 8010bd0:	f7fd fa9d 	bl	800e10e <dwt_xfer3xxx>
 8010bd4:	f001 bdac 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010bd8:	2c00      	cmp	r4, #0
 8010bda:	f001 85af 	beq.w	801273c <dwt_ioctl+0x1e1c>
 8010bde:	6823      	ldr	r3, [r4, #0]
 8010be0:	2200      	movs	r2, #0
 8010be2:	2128      	movs	r1, #40	; 0x28
 8010be4:	f7fd fffa 	bl	800ebdc <dwt_write32bitoffsetreg>
 8010be8:	2500      	movs	r5, #0
 8010bea:	f001 bda1 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010bee:	6823      	ldr	r3, [r4, #0]
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	4966      	ldr	r1, [pc, #408]	; (8010d8c <dwt_ioctl+0x46c>)
 8010bf4:	f7fd fff2 	bl	800ebdc <dwt_write32bitoffsetreg>
 8010bf8:	6863      	ldr	r3, [r4, #4]
 8010bfa:	2200      	movs	r2, #0
 8010bfc:	4964      	ldr	r1, [pc, #400]	; (8010d90 <dwt_ioctl+0x470>)
 8010bfe:	4630      	mov	r0, r6
 8010c00:	f7fd ffec 	bl	800ebdc <dwt_write32bitoffsetreg>
 8010c04:	68a3      	ldr	r3, [r4, #8]
 8010c06:	2200      	movs	r2, #0
 8010c08:	4962      	ldr	r1, [pc, #392]	; (8010d94 <dwt_ioctl+0x474>)
 8010c0a:	4630      	mov	r0, r6
 8010c0c:	f7fd ffe6 	bl	800ebdc <dwt_write32bitoffsetreg>
 8010c10:	68e3      	ldr	r3, [r4, #12]
 8010c12:	2200      	movs	r2, #0
 8010c14:	4960      	ldr	r1, [pc, #384]	; (8010d98 <dwt_ioctl+0x478>)
 8010c16:	4630      	mov	r0, r6
 8010c18:	f7fd ffe0 	bl	800ebdc <dwt_write32bitoffsetreg>
 8010c1c:	2500      	movs	r5, #0
 8010c1e:	f001 bd87 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010c22:	2c00      	cmp	r4, #0
 8010c24:	f001 858c 	beq.w	8012740 <dwt_ioctl+0x1e20>
 8010c28:	8823      	ldrh	r3, [r4, #0]
 8010c2a:	6865      	ldr	r5, [r4, #4]
 8010c2c:	2d03      	cmp	r5, #3
 8010c2e:	f201 8589 	bhi.w	8012744 <dwt_ioctl+0x1e24>
 8010c32:	e8df f005 	tbb	[pc, r5]
 8010c36:	0802      	.short	0x0802
 8010c38:	160f      	.short	0x160f
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	4957      	ldr	r1, [pc, #348]	; (8010d9c <dwt_ioctl+0x47c>)
 8010c3e:	f7fd ff62 	bl	800eb06 <dwt_write16bitoffsetreg>
 8010c42:	f001 bd75 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010c46:	2202      	movs	r2, #2
 8010c48:	4954      	ldr	r1, [pc, #336]	; (8010d9c <dwt_ioctl+0x47c>)
 8010c4a:	f7fd ff5c 	bl	800eb06 <dwt_write16bitoffsetreg>
 8010c4e:	2500      	movs	r5, #0
 8010c50:	f001 bd6e 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010c54:	2200      	movs	r2, #0
 8010c56:	4952      	ldr	r1, [pc, #328]	; (8010da0 <dwt_ioctl+0x480>)
 8010c58:	f7fd ff55 	bl	800eb06 <dwt_write16bitoffsetreg>
 8010c5c:	2500      	movs	r5, #0
 8010c5e:	f001 bd67 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010c62:	2202      	movs	r2, #2
 8010c64:	494e      	ldr	r1, [pc, #312]	; (8010da0 <dwt_ioctl+0x480>)
 8010c66:	f7fd ff4e 	bl	800eb06 <dwt_write16bitoffsetreg>
 8010c6a:	2500      	movs	r5, #0
 8010c6c:	f001 bd60 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010c70:	2c00      	cmp	r4, #0
 8010c72:	f001 8569 	beq.w	8012748 <dwt_ioctl+0x1e28>
 8010c76:	7823      	ldrb	r3, [r4, #0]
 8010c78:	005b      	lsls	r3, r3, #1
 8010c7a:	f003 0306 	and.w	r3, r3, #6
 8010c7e:	9300      	str	r3, [sp, #0]
 8010c80:	f06f 0306 	mvn.w	r3, #6
 8010c84:	2200      	movs	r2, #0
 8010c86:	4947      	ldr	r1, [pc, #284]	; (8010da4 <dwt_ioctl+0x484>)
 8010c88:	f7fe fcae 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 8010c8c:	2500      	movs	r5, #0
 8010c8e:	f001 bd4f 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010c92:	f7fe fccd 	bl	800f630 <ull_enablegpioclocks>
 8010c96:	2500      	movs	r5, #0
 8010c98:	f001 bd4a 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010c9c:	2c00      	cmp	r4, #0
 8010c9e:	f001 8555 	beq.w	801274c <dwt_ioctl+0x1e2c>
 8010ca2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010ca4:	7b1b      	ldrb	r3, [r3, #12]
 8010ca6:	7023      	strb	r3, [r4, #0]
 8010ca8:	2500      	movs	r5, #0
 8010caa:	f001 bd41 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010cae:	2c00      	cmp	r4, #0
 8010cb0:	f001 854e 	beq.w	8012750 <dwt_ioctl+0x1e30>
 8010cb4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010cb6:	7a5b      	ldrb	r3, [r3, #9]
 8010cb8:	7023      	strb	r3, [r4, #0]
 8010cba:	2500      	movs	r5, #0
 8010cbc:	f001 bd38 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010cc0:	2c00      	cmp	r4, #0
 8010cc2:	f001 8547 	beq.w	8012754 <dwt_ioctl+0x1e34>
 8010cc6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010cc8:	7a9b      	ldrb	r3, [r3, #10]
 8010cca:	7023      	strb	r3, [r4, #0]
 8010ccc:	2500      	movs	r5, #0
 8010cce:	f001 bd2f 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010cd2:	2c00      	cmp	r4, #0
 8010cd4:	f001 8540 	beq.w	8012758 <dwt_ioctl+0x1e38>
 8010cd8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	6023      	str	r3, [r4, #0]
 8010cde:	2500      	movs	r5, #0
 8010ce0:	f001 bd26 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010ce4:	2c00      	cmp	r4, #0
 8010ce6:	f001 8539 	beq.w	801275c <dwt_ioctl+0x1e3c>
 8010cea:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010cec:	685b      	ldr	r3, [r3, #4]
 8010cee:	6023      	str	r3, [r4, #0]
 8010cf0:	2500      	movs	r5, #0
 8010cf2:	f001 bd1d 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010cf6:	f7fe fae1 	bl	800f2bc <ull_signal_rx_buff_free>
 8010cfa:	2500      	movs	r5, #0
 8010cfc:	f001 bd18 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010d00:	2c00      	cmp	r4, #0
 8010d02:	f001 852d 	beq.w	8012760 <dwt_ioctl+0x1e40>
 8010d06:	6821      	ldr	r1, [r4, #0]
 8010d08:	f7fd ffa3 	bl	800ec52 <ull_setrxaftertxdelay>
 8010d0c:	2500      	movs	r5, #0
 8010d0e:	f001 bd0f 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010d12:	2c00      	cmp	r4, #0
 8010d14:	f001 8526 	beq.w	8012764 <dwt_ioctl+0x1e44>
 8010d18:	6862      	ldr	r2, [r4, #4]
 8010d1a:	7821      	ldrb	r1, [r4, #0]
 8010d1c:	f7fe fde8 	bl	800f8f0 <ull_enablespicrccheck>
 8010d20:	2500      	movs	r5, #0
 8010d22:	f001 bd05 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010d26:	2c00      	cmp	r4, #0
 8010d28:	f001 851e 	beq.w	8012768 <dwt_ioctl+0x1e48>
 8010d2c:	6865      	ldr	r5, [r4, #4]
 8010d2e:	7823      	ldrb	r3, [r4, #0]
 8010d30:	2203      	movs	r2, #3
 8010d32:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8010d36:	f7fe f935 	bl	800efa4 <dwt_write8bitoffsetreg>
 8010d3a:	b94d      	cbnz	r5, 8010d50 <dwt_ioctl+0x430>
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	9200      	str	r2, [sp, #0]
 8010d40:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8010d44:	2110      	movs	r1, #16
 8010d46:	4630      	mov	r0, r6
 8010d48:	f7ff f94e 	bl	800ffe8 <dwt_modify16bitoffsetreg>
 8010d4c:	f001 bcf0 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010d50:	f44f 2381 	mov.w	r3, #264192	; 0x40800
 8010d54:	9300      	str	r3, [sp, #0]
 8010d56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	2110      	movs	r1, #16
 8010d5e:	4630      	mov	r0, r6
 8010d60:	f7fe fc42 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 8010d64:	2500      	movs	r5, #0
 8010d66:	f001 bce3 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010d6a:	2200      	movs	r2, #0
 8010d6c:	4611      	mov	r1, r2
 8010d6e:	f7fd fa56 	bl	800e21e <dwt_read32bitoffsetreg>
 8010d72:	68b2      	ldr	r2, [r6, #8]
 8010d74:	6813      	ldr	r3, [r2, #0]
 8010d76:	4043      	eors	r3, r0
 8010d78:	6852      	ldr	r2, [r2, #4]
 8010d7a:	4213      	tst	r3, r2
 8010d7c:	bf14      	ite	ne
 8010d7e:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8010d82:	2500      	moveq	r5, #0
 8010d84:	f001 bcd4 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010d88:	000f0030 	.word	0x000f0030
 8010d8c:	00010054 	.word	0x00010054
 8010d90:	00010058 	.word	0x00010058
 8010d94:	0001005c 	.word	0x0001005c
 8010d98:	00010060 	.word	0x00010060
 8010d9c:	0001000c 	.word	0x0001000c
 8010da0:	00010010 	.word	0x00010010
 8010da4:	00010008 	.word	0x00010008
 8010da8:	2c00      	cmp	r4, #0
 8010daa:	f001 84df 	beq.w	801276c <dwt_ioctl+0x1e4c>
 8010dae:	7821      	ldrb	r1, [r4, #0]
 8010db0:	f7fe fdba 	bl	800f928 <ull_configciadiag>
 8010db4:	2500      	movs	r5, #0
 8010db6:	f001 bcbb 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010dba:	b942      	cbnz	r2, 8010dce <dwt_ioctl+0x4ae>
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	9200      	str	r2, [sp, #0]
 8010dc0:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8010dc4:	49d2      	ldr	r1, [pc, #840]	; (8011110 <dwt_ioctl+0x7f0>)
 8010dc6:	f7ff f90f 	bl	800ffe8 <dwt_modify16bitoffsetreg>
 8010dca:	f001 bcb1 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010dce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010dd2:	9300      	str	r3, [sp, #0]
 8010dd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010dd8:	2200      	movs	r2, #0
 8010dda:	49cd      	ldr	r1, [pc, #820]	; (8011110 <dwt_ioctl+0x7f0>)
 8010ddc:	f7ff f904 	bl	800ffe8 <dwt_modify16bitoffsetreg>
 8010de0:	2500      	movs	r5, #0
 8010de2:	f001 bca5 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010de6:	f002 0201 	and.w	r2, r2, #1
 8010dea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010dee:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8010df2:	2a00      	cmp	r2, #0
 8010df4:	bf08      	it	eq
 8010df6:	460b      	moveq	r3, r1
 8010df8:	02d2      	lsls	r2, r2, #11
 8010dfa:	f015 0f02 	tst.w	r5, #2
 8010dfe:	bf12      	itee	ne
 8010e00:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8010e04:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010e08:	b29b      	uxtheq	r3, r3
 8010e0a:	9200      	str	r2, [sp, #0]
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	49c0      	ldr	r1, [pc, #768]	; (8011110 <dwt_ioctl+0x7f0>)
 8010e10:	f7ff f8ea 	bl	800ffe8 <dwt_modify16bitoffsetreg>
 8010e14:	2500      	movs	r5, #0
 8010e16:	f001 bc8b 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010e1a:	4611      	mov	r1, r2
 8010e1c:	f7fd ff2e 	bl	800ec7c <ull_setfinegraintxseq>
 8010e20:	2500      	movs	r5, #0
 8010e22:	f001 bc85 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010e26:	4611      	mov	r1, r2
 8010e28:	f7fd ff3c 	bl	800eca4 <ull_setlnapamode>
 8010e2c:	2500      	movs	r5, #0
 8010e2e:	f001 bc7f 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010e32:	2c00      	cmp	r4, #0
 8010e34:	f001 849c 	beq.w	8012770 <dwt_ioctl+0x1e50>
 8010e38:	2200      	movs	r2, #0
 8010e3a:	49b6      	ldr	r1, [pc, #728]	; (8011114 <dwt_ioctl+0x7f4>)
 8010e3c:	f7fd fa44 	bl	800e2c8 <dwt_read8bitoffsetreg>
 8010e40:	7020      	strb	r0, [r4, #0]
 8010e42:	2500      	movs	r5, #0
 8010e44:	f001 bc74 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010e48:	4621      	mov	r1, r4
 8010e4a:	f7fd ff4b 	bl	800ece4 <ull_configurestskey>
 8010e4e:	2500      	movs	r5, #0
 8010e50:	f001 bc6e 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010e54:	4621      	mov	r1, r4
 8010e56:	f7fd ff69 	bl	800ed2c <ull_configurestsiv>
 8010e5a:	2500      	movs	r5, #0
 8010e5c:	f001 bc68 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010e60:	f7fe fd98 	bl	800f994 <ull_configurestsloadiv>
 8010e64:	2500      	movs	r5, #0
 8010e66:	f001 bc63 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010e6a:	4611      	mov	r1, r2
 8010e6c:	f7fd ff82 	bl	800ed74 <ull_configmrxlut>
 8010e70:	2500      	movs	r5, #0
 8010e72:	f001 bc5d 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010e76:	f7fe feb3 	bl	800fbe0 <ull_restoreconfig>
 8010e7a:	2500      	movs	r5, #0
 8010e7c:	f001 bc58 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010e80:	2c00      	cmp	r4, #0
 8010e82:	f001 8477 	beq.w	8012774 <dwt_ioctl+0x1e54>
 8010e86:	7821      	ldrb	r1, [r4, #0]
 8010e88:	f7ff f8c8 	bl	801001c <ull_configurestsmode>
 8010e8c:	2500      	movs	r5, #0
 8010e8e:	f001 bc4f 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010e92:	2c00      	cmp	r4, #0
 8010e94:	f001 8470 	beq.w	8012778 <dwt_ioctl+0x1e58>
 8010e98:	8821      	ldrh	r1, [r4, #0]
 8010e9a:	f7fd fe44 	bl	800eb26 <ull_setrxantennadelay>
 8010e9e:	2500      	movs	r5, #0
 8010ea0:	f001 bc46 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010ea4:	2c00      	cmp	r4, #0
 8010ea6:	f001 8469 	beq.w	801277c <dwt_ioctl+0x1e5c>
 8010eaa:	f7fd f9e0 	bl	800e26e <ull_getrxantennadelay>
 8010eae:	8020      	strh	r0, [r4, #0]
 8010eb0:	2500      	movs	r5, #0
 8010eb2:	f001 bc3d 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010eb6:	2c00      	cmp	r4, #0
 8010eb8:	f001 8462 	beq.w	8012780 <dwt_ioctl+0x1e60>
 8010ebc:	8821      	ldrh	r1, [r4, #0]
 8010ebe:	f7fd fe3a 	bl	800eb36 <ull_settxantennadelay>
 8010ec2:	2500      	movs	r5, #0
 8010ec4:	f001 bc34 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010ec8:	2c00      	cmp	r4, #0
 8010eca:	f001 845b 	beq.w	8012784 <dwt_ioctl+0x1e64>
 8010ece:	f7fd f9d5 	bl	800e27c <ull_gettxantennadelay>
 8010ed2:	8020      	strh	r0, [r4, #0]
 8010ed4:	2500      	movs	r5, #0
 8010ed6:	f001 bc2b 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010eda:	2c00      	cmp	r4, #0
 8010edc:	f001 8454 	beq.w	8012788 <dwt_ioctl+0x1e68>
 8010ee0:	88a3      	ldrh	r3, [r4, #4]
 8010ee2:	88e2      	ldrh	r2, [r4, #6]
 8010ee4:	6821      	ldr	r1, [r4, #0]
 8010ee6:	9100      	str	r1, [sp, #0]
 8010ee8:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 8010eec:	f7fd fe00 	bl	800eaf0 <dwt_writetodevice>
 8010ef0:	2500      	movs	r5, #0
 8010ef2:	f001 bc1d 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010ef6:	2c00      	cmp	r4, #0
 8010ef8:	f001 8448 	beq.w	801278c <dwt_ioctl+0x1e6c>
 8010efc:	88a3      	ldrh	r3, [r4, #4]
 8010efe:	88e2      	ldrh	r2, [r4, #6]
 8010f00:	6821      	ldr	r1, [r4, #0]
 8010f02:	9100      	str	r1, [sp, #0]
 8010f04:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 8010f08:	f7fd f97f 	bl	800e20a <dwt_readfromdevice>
 8010f0c:	2500      	movs	r5, #0
 8010f0e:	f001 bc0f 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010f12:	2c00      	cmp	r4, #0
 8010f14:	f001 843c 	beq.w	8012790 <dwt_ioctl+0x1e70>
 8010f18:	88e3      	ldrh	r3, [r4, #6]
 8010f1a:	88a2      	ldrh	r2, [r4, #4]
 8010f1c:	6821      	ldr	r1, [r4, #0]
 8010f1e:	f7fe f80b 	bl	800ef38 <ull_readrxdata>
 8010f22:	2500      	movs	r5, #0
 8010f24:	f001 bc04 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010f28:	2c00      	cmp	r4, #0
 8010f2a:	f001 8433 	beq.w	8012794 <dwt_ioctl+0x1e74>
 8010f2e:	88e3      	ldrh	r3, [r4, #6]
 8010f30:	6822      	ldr	r2, [r4, #0]
 8010f32:	88a1      	ldrh	r1, [r4, #4]
 8010f34:	f7fe f990 	bl	800f258 <ull_writetxdata>
 8010f38:	2500      	movs	r5, #0
 8010f3a:	f001 bbf9 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010f3e:	4611      	mov	r1, r2
 8010f40:	f7ff fc56 	bl	80107f0 <ull_rxenable>
 8010f44:	2500      	movs	r5, #0
 8010f46:	f001 bbf3 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010f4a:	2c00      	cmp	r4, #0
 8010f4c:	f001 8424 	beq.w	8012798 <dwt_ioctl+0x1e78>
 8010f50:	7923      	ldrb	r3, [r4, #4]
 8010f52:	8862      	ldrh	r2, [r4, #2]
 8010f54:	8821      	ldrh	r1, [r4, #0]
 8010f56:	f7fe fc97 	bl	800f888 <ull_writetxfctrl>
 8010f5a:	2500      	movs	r5, #0
 8010f5c:	f001 bbe8 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010f60:	2c00      	cmp	r4, #0
 8010f62:	f001 841b 	beq.w	801279c <dwt_ioctl+0x1e7c>
 8010f66:	f7fd f98f 	bl	800e288 <ull_readclockoffset>
 8010f6a:	8020      	strh	r0, [r4, #0]
 8010f6c:	2500      	movs	r5, #0
 8010f6e:	f001 bbdf 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010f72:	2c00      	cmp	r4, #0
 8010f74:	f001 8414 	beq.w	80127a0 <dwt_ioctl+0x1e80>
 8010f78:	f7fd f9b4 	bl	800e2e4 <ull_readcarrierintegrator>
 8010f7c:	6020      	str	r0, [r4, #0]
 8010f7e:	2500      	movs	r5, #0
 8010f80:	f001 bbd6 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010f84:	f7fe f866 	bl	800f054 <ull_clearaonconfig>
 8010f88:	2500      	movs	r5, #0
 8010f8a:	f001 bbd1 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010f8e:	2c00      	cmp	r4, #0
 8010f90:	f001 8408 	beq.w	80127a4 <dwt_ioctl+0x1e84>
 8010f94:	8861      	ldrh	r1, [r4, #2]
 8010f96:	f7fe fe53 	bl	800fc40 <ull_calcbandwidthadj>
 8010f9a:	7020      	strb	r0, [r4, #0]
 8010f9c:	2500      	movs	r5, #0
 8010f9e:	f001 bbc7 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010fa2:	4621      	mov	r1, r4
 8010fa4:	f7fd f9be 	bl	800e324 <ull_readdiagnostics>
 8010fa8:	2500      	movs	r5, #0
 8010faa:	f001 bbc1 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010fae:	2c00      	cmp	r4, #0
 8010fb0:	f001 83fa 	beq.w	80127a8 <dwt_ioctl+0x1e88>
 8010fb4:	2201      	movs	r2, #1
 8010fb6:	2170      	movs	r1, #112	; 0x70
 8010fb8:	f7fd f931 	bl	800e21e <dwt_read32bitoffsetreg>
 8010fbc:	6020      	str	r0, [r4, #0]
 8010fbe:	2500      	movs	r5, #0
 8010fc0:	f001 bbb6 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010fc4:	2c00      	cmp	r4, #0
 8010fc6:	f001 83f1 	beq.w	80127ac <dwt_ioctl+0x1e8c>
 8010fca:	2200      	movs	r2, #0
 8010fcc:	2170      	movs	r1, #112	; 0x70
 8010fce:	f7fd f926 	bl	800e21e <dwt_read32bitoffsetreg>
 8010fd2:	6020      	str	r0, [r4, #0]
 8010fd4:	2500      	movs	r5, #0
 8010fd6:	f001 bbab 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010fda:	9400      	str	r4, [sp, #0]
 8010fdc:	2305      	movs	r3, #5
 8010fde:	2200      	movs	r2, #0
 8010fe0:	2170      	movs	r1, #112	; 0x70
 8010fe2:	f7fd f912 	bl	800e20a <dwt_readfromdevice>
 8010fe6:	2500      	movs	r5, #0
 8010fe8:	f001 bba2 	b.w	8012730 <dwt_ioctl+0x1e10>
 8010fec:	2c00      	cmp	r4, #0
 8010fee:	f001 83df 	beq.w	80127b0 <dwt_ioctl+0x1e90>
 8010ff2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010ff4:	7b9b      	ldrb	r3, [r3, #14]
 8010ff6:	2b01      	cmp	r3, #1
 8010ff8:	d015      	beq.n	8011026 <dwt_ioctl+0x706>
 8010ffa:	2b03      	cmp	r3, #3
 8010ffc:	d11a      	bne.n	8011034 <dwt_ioctl+0x714>
 8010ffe:	2216      	movs	r2, #22
 8011000:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8011004:	f7fd f921 	bl	800e24a <dwt_read16bitoffsetreg>
 8011008:	f3c0 000d 	ubfx	r0, r0, #0, #14
 801100c:	b283      	uxth	r3, r0
 801100e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8011012:	d004      	beq.n	801101e <dwt_ioctl+0x6fe>
 8011014:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8011018:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 801101c:	b218      	sxth	r0, r3
 801101e:	8020      	strh	r0, [r4, #0]
 8011020:	2500      	movs	r5, #0
 8011022:	f001 bb85 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011026:	2202      	movs	r2, #2
 8011028:	493b      	ldr	r1, [pc, #236]	; (8011118 <dwt_ioctl+0x7f8>)
 801102a:	f7fd f90e 	bl	800e24a <dwt_read16bitoffsetreg>
 801102e:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8011032:	e7eb      	b.n	801100c <dwt_ioctl+0x6ec>
 8011034:	2202      	movs	r2, #2
 8011036:	4939      	ldr	r1, [pc, #228]	; (801111c <dwt_ioctl+0x7fc>)
 8011038:	f7fd f907 	bl	800e24a <dwt_read16bitoffsetreg>
 801103c:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8011040:	e7e4      	b.n	801100c <dwt_ioctl+0x6ec>
 8011042:	9400      	str	r4, [sp, #0]
 8011044:	2306      	movs	r3, #6
 8011046:	2200      	movs	r2, #0
 8011048:	4935      	ldr	r1, [pc, #212]	; (8011120 <dwt_ioctl+0x800>)
 801104a:	f7fd f8de 	bl	800e20a <dwt_readfromdevice>
 801104e:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8011052:	2b00      	cmp	r3, #0
 8011054:	db06      	blt.n	8011064 <dwt_ioctl+0x744>
 8011056:	7963      	ldrb	r3, [r4, #5]
 8011058:	f003 0301 	and.w	r3, r3, #1
 801105c:	7163      	strb	r3, [r4, #5]
 801105e:	2500      	movs	r5, #0
 8011060:	f001 bb66 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011064:	23ff      	movs	r3, #255	; 0xff
 8011066:	70a3      	strb	r3, [r4, #2]
 8011068:	70e3      	strb	r3, [r4, #3]
 801106a:	7123      	strb	r3, [r4, #4]
 801106c:	7163      	strb	r3, [r4, #5]
 801106e:	e7f2      	b.n	8011056 <dwt_ioctl+0x736>
 8011070:	2c00      	cmp	r4, #0
 8011072:	f001 839f 	beq.w	80127b4 <dwt_ioctl+0x1e94>
 8011076:	2201      	movs	r2, #1
 8011078:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 801107c:	f7fd f924 	bl	800e2c8 <dwt_read8bitoffsetreg>
 8011080:	7020      	strb	r0, [r4, #0]
 8011082:	2500      	movs	r5, #0
 8011084:	f001 bb54 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011088:	2c00      	cmp	r4, #0
 801108a:	f001 8395 	beq.w	80127b8 <dwt_ioctl+0x1e98>
 801108e:	2200      	movs	r2, #0
 8011090:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8011094:	f7fd f918 	bl	800e2c8 <dwt_read8bitoffsetreg>
 8011098:	7020      	strb	r0, [r4, #0]
 801109a:	2500      	movs	r5, #0
 801109c:	f001 bb48 	b.w	8012730 <dwt_ioctl+0x1e10>
 80110a0:	2c00      	cmp	r4, #0
 80110a2:	f001 838b 	beq.w	80127bc <dwt_ioctl+0x1e9c>
 80110a6:	88a2      	ldrh	r2, [r4, #4]
 80110a8:	6821      	ldr	r1, [r4, #0]
 80110aa:	f7fe fb17 	bl	800f6dc <_dwt_otpprogword32>
 80110ae:	2500      	movs	r5, #0
 80110b0:	f001 bb3e 	b.w	8012730 <dwt_ioctl+0x1e10>
 80110b4:	2c00      	cmp	r4, #0
 80110b6:	f001 8383 	beq.w	80127c0 <dwt_ioctl+0x1ea0>
 80110ba:	6825      	ldr	r5, [r4, #0]
 80110bc:	88a4      	ldrh	r4, [r4, #4]
 80110be:	4622      	mov	r2, r4
 80110c0:	4629      	mov	r1, r5
 80110c2:	f7fe fb0b 	bl	800f6dc <_dwt_otpprogword32>
 80110c6:	4621      	mov	r1, r4
 80110c8:	4630      	mov	r0, r6
 80110ca:	f7fd fd65 	bl	800eb98 <_dwt_otpread>
 80110ce:	1a2d      	subs	r5, r5, r0
 80110d0:	bf18      	it	ne
 80110d2:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 80110d6:	f001 bb2b 	b.w	8012730 <dwt_ioctl+0x1e10>
 80110da:	2a02      	cmp	r2, #2
 80110dc:	d00f      	beq.n	80110fe <dwt_ioctl+0x7de>
 80110de:	4c11      	ldr	r4, [pc, #68]	; (8011124 <dwt_ioctl+0x804>)
 80110e0:	2300      	movs	r3, #0
 80110e2:	461a      	mov	r2, r3
 80110e4:	4621      	mov	r1, r4
 80110e6:	4630      	mov	r0, r6
 80110e8:	f7fd ff5c 	bl	800efa4 <dwt_write8bitoffsetreg>
 80110ec:	2302      	movs	r3, #2
 80110ee:	2200      	movs	r2, #0
 80110f0:	4621      	mov	r1, r4
 80110f2:	4630      	mov	r0, r6
 80110f4:	f7fd ff56 	bl	800efa4 <dwt_write8bitoffsetreg>
 80110f8:	2500      	movs	r5, #0
 80110fa:	f001 bb19 	b.w	8012730 <dwt_ioctl+0x1e10>
 80110fe:	2300      	movs	r3, #0
 8011100:	9300      	str	r3, [sp, #0]
 8011102:	23fe      	movs	r3, #254	; 0xfe
 8011104:	2201      	movs	r2, #1
 8011106:	4902      	ldr	r1, [pc, #8]	; (8011110 <dwt_ioctl+0x7f0>)
 8011108:	f7fe fbde 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 801110c:	e7e7      	b.n	80110de <dwt_ioctl+0x7be>
 801110e:	bf00      	nop
 8011110:	00110008 	.word	0x00110008
 8011114:	0007001c 	.word	0x0007001c
 8011118:	00180014 	.word	0x00180014
 801111c:	000c001c 	.word	0x000c001c
 8011120:	000c0018 	.word	0x000c0018
 8011124:	000a0004 	.word	0x000a0004
 8011128:	2c00      	cmp	r4, #0
 801112a:	f001 834b 	beq.w	80127c4 <dwt_ioctl+0x1ea4>
 801112e:	8824      	ldrh	r4, [r4, #0]
 8011130:	b2e2      	uxtb	r2, r4
 8011132:	f44f 7181 	mov.w	r1, #258	; 0x102
 8011136:	f7fd ffe1 	bl	800f0fc <ull_aon_write>
 801113a:	0a22      	lsrs	r2, r4, #8
 801113c:	f240 1103 	movw	r1, #259	; 0x103
 8011140:	4630      	mov	r0, r6
 8011142:	f7fd ffdb 	bl	800f0fc <ull_aon_write>
 8011146:	2500      	movs	r5, #0
 8011148:	f001 baf2 	b.w	8012730 <dwt_ioctl+0x1e10>
 801114c:	2c00      	cmp	r4, #0
 801114e:	f001 833b 	beq.w	80127c8 <dwt_ioctl+0x1ea8>
 8011152:	f8df 8370 	ldr.w	r8, [pc, #880]	; 80114c4 <dwt_ioctl+0xba4>
 8011156:	2310      	movs	r3, #16
 8011158:	9300      	str	r3, [sp, #0]
 801115a:	23ff      	movs	r3, #255	; 0xff
 801115c:	2200      	movs	r2, #0
 801115e:	4641      	mov	r1, r8
 8011160:	f7fe fbb2 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 8011164:	f44f 7182 	mov.w	r1, #260	; 0x104
 8011168:	4630      	mov	r0, r6
 801116a:	f7fd ffa7 	bl	800f0bc <ull_aon_read>
 801116e:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 8011172:	462a      	mov	r2, r5
 8011174:	f44f 7182 	mov.w	r1, #260	; 0x104
 8011178:	4630      	mov	r0, r6
 801117a:	f7fd ffbf 	bl	800f0fc <ull_aon_write>
 801117e:	f045 0204 	orr.w	r2, r5, #4
 8011182:	f44f 7182 	mov.w	r1, #260	; 0x104
 8011186:	4630      	mov	r0, r6
 8011188:	f7fd ffb8 	bl	800f0fc <ull_aon_write>
 801118c:	2002      	movs	r0, #2
 801118e:	f7f0 f9e9 	bl	8001564 <deca_sleep>
 8011192:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8011196:	4630      	mov	r0, r6
 8011198:	f7fd ff90 	bl	800f0bc <ull_aon_read>
 801119c:	4607      	mov	r7, r0
 801119e:	f240 110f 	movw	r1, #271	; 0x10f
 80111a2:	4630      	mov	r0, r6
 80111a4:	f7fd ff8a 	bl	800f0bc <ull_aon_read>
 80111a8:	4681      	mov	r9, r0
 80111aa:	462a      	mov	r2, r5
 80111ac:	f44f 7182 	mov.w	r1, #260	; 0x104
 80111b0:	4630      	mov	r0, r6
 80111b2:	f7fd ffa3 	bl	800f0fc <ull_aon_write>
 80111b6:	2500      	movs	r5, #0
 80111b8:	9500      	str	r5, [sp, #0]
 80111ba:	23ef      	movs	r3, #239	; 0xef
 80111bc:	462a      	mov	r2, r5
 80111be:	4641      	mov	r1, r8
 80111c0:	4630      	mov	r0, r6
 80111c2:	f7fe fb81 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 80111c6:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 80111ca:	8027      	strh	r7, [r4, #0]
 80111cc:	f001 bab0 	b.w	8012730 <dwt_ioctl+0x1e10>
 80111d0:	2c00      	cmp	r4, #0
 80111d2:	f001 82fb 	beq.w	80127cc <dwt_ioctl+0x1eac>
 80111d6:	78a2      	ldrb	r2, [r4, #2]
 80111d8:	8821      	ldrh	r1, [r4, #0]
 80111da:	f7fd ffb7 	bl	800f14c <ull_configuresleep>
 80111de:	2500      	movs	r5, #0
 80111e0:	f001 baa6 	b.w	8012730 <dwt_ioctl+0x1e10>
 80111e4:	2c00      	cmp	r4, #0
 80111e6:	f001 82f3 	beq.w	80127d0 <dwt_ioctl+0x1eb0>
 80111ea:	6824      	ldr	r4, [r4, #0]
 80111ec:	f7fd ff32 	bl	800f054 <ull_clearaonconfig>
 80111f0:	2001      	movs	r0, #1
 80111f2:	f7f0 f9b7 	bl	8001564 <deca_sleep>
 80111f6:	2303      	movs	r3, #3
 80111f8:	9300      	str	r3, [sp, #0]
 80111fa:	23ff      	movs	r3, #255	; 0xff
 80111fc:	2200      	movs	r2, #0
 80111fe:	49af      	ldr	r1, [pc, #700]	; (80114bc <dwt_ioctl+0xb9c>)
 8011200:	4630      	mov	r0, r6
 8011202:	f7fe fb61 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 8011206:	b97c      	cbnz	r4, 8011228 <dwt_ioctl+0x908>
 8011208:	4630      	mov	r0, r6
 801120a:	f7ff fb61 	bl	80108d0 <ull_softreset_no_sema_fcmd>
 801120e:	2001      	movs	r0, #1
 8011210:	f7f0 f9a8 	bl	8001564 <deca_sleep>
 8011214:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8011216:	2500      	movs	r5, #0
 8011218:	739d      	strb	r5, [r3, #14]
 801121a:	2202      	movs	r2, #2
 801121c:	821a      	strh	r2, [r3, #16]
 801121e:	751d      	strb	r5, [r3, #20]
 8011220:	755d      	strb	r5, [r3, #21]
 8011222:	73dd      	strb	r5, [r3, #15]
 8011224:	f001 ba84 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011228:	4630      	mov	r0, r6
 801122a:	f7ff fb65 	bl	80108f8 <ull_softreset_fcmd>
 801122e:	e7ee      	b.n	801120e <dwt_ioctl+0x8ee>
 8011230:	2c00      	cmp	r4, #0
 8011232:	f001 82cf 	beq.w	80127d4 <dwt_ioctl+0x1eb4>
 8011236:	7823      	ldrb	r3, [r4, #0]
 8011238:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801123c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801123e:	7353      	strb	r3, [r2, #13]
 8011240:	2200      	movs	r2, #0
 8011242:	499f      	ldr	r1, [pc, #636]	; (80114c0 <dwt_ioctl+0xba0>)
 8011244:	f7fd feae 	bl	800efa4 <dwt_write8bitoffsetreg>
 8011248:	2500      	movs	r5, #0
 801124a:	f001 ba71 	b.w	8012730 <dwt_ioctl+0x1e10>
 801124e:	2c00      	cmp	r4, #0
 8011250:	f001 82c2 	beq.w	80127d8 <dwt_ioctl+0x1eb8>
 8011254:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011256:	7b5b      	ldrb	r3, [r3, #13]
 8011258:	7023      	strb	r3, [r4, #0]
 801125a:	2500      	movs	r5, #0
 801125c:	f001 ba68 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011260:	2101      	movs	r1, #1
 8011262:	f7fe f9f5 	bl	800f650 <ull_enable_rf_tx>
 8011266:	4630      	mov	r0, r6
 8011268:	f7fe fa26 	bl	800f6b8 <ull_enable_rftx_blocks>
 801126c:	2101      	movs	r1, #1
 801126e:	4630      	mov	r0, r6
 8011270:	f7fd fc68 	bl	800eb44 <ull_force_clocks>
 8011274:	220f      	movs	r2, #15
 8011276:	2101      	movs	r1, #1
 8011278:	4630      	mov	r0, r6
 801127a:	f7fd fe39 	bl	800eef0 <ull_repeated_cw>
 801127e:	2500      	movs	r5, #0
 8011280:	f001 ba56 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011284:	2c00      	cmp	r4, #0
 8011286:	f001 82a9 	beq.w	80127dc <dwt_ioctl+0x1ebc>
 801128a:	6862      	ldr	r2, [r4, #4]
 801128c:	6821      	ldr	r1, [r4, #0]
 801128e:	f7fd fe2f 	bl	800eef0 <ull_repeated_cw>
 8011292:	2500      	movs	r5, #0
 8011294:	f001 ba4c 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011298:	2c00      	cmp	r4, #0
 801129a:	f001 82a1 	beq.w	80127e0 <dwt_ioctl+0x1ec0>
 801129e:	4d89      	ldr	r5, [pc, #548]	; (80114c4 <dwt_ioctl+0xba4>)
 80112a0:	2200      	movs	r2, #0
 80112a2:	4629      	mov	r1, r5
 80112a4:	f7fd f810 	bl	800e2c8 <dwt_read8bitoffsetreg>
 80112a8:	4680      	mov	r8, r0
 80112aa:	2302      	movs	r3, #2
 80112ac:	9300      	str	r3, [sp, #0]
 80112ae:	23ff      	movs	r3, #255	; 0xff
 80112b0:	2200      	movs	r2, #0
 80112b2:	4629      	mov	r1, r5
 80112b4:	4630      	mov	r0, r6
 80112b6:	f7fe fb07 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 80112ba:	2304      	movs	r3, #4
 80112bc:	2200      	movs	r2, #0
 80112be:	4982      	ldr	r1, [pc, #520]	; (80114c8 <dwt_ioctl+0xba8>)
 80112c0:	4630      	mov	r0, r6
 80112c2:	f7fd fe6f 	bl	800efa4 <dwt_write8bitoffsetreg>
 80112c6:	2301      	movs	r3, #1
 80112c8:	2200      	movs	r2, #0
 80112ca:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80112ce:	4630      	mov	r0, r6
 80112d0:	f7fd fe68 	bl	800efa4 <dwt_write8bitoffsetreg>
 80112d4:	4f7d      	ldr	r7, [pc, #500]	; (80114cc <dwt_ioctl+0xbac>)
 80112d6:	2500      	movs	r5, #0
 80112d8:	462a      	mov	r2, r5
 80112da:	4639      	mov	r1, r7
 80112dc:	4630      	mov	r0, r6
 80112de:	f7fc fff3 	bl	800e2c8 <dwt_read8bitoffsetreg>
 80112e2:	f010 0f01 	tst.w	r0, #1
 80112e6:	d0f7      	beq.n	80112d8 <dwt_ioctl+0x9b8>
 80112e8:	2200      	movs	r2, #0
 80112ea:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 80112ee:	4630      	mov	r0, r6
 80112f0:	f7fc ffab 	bl	800e24a <dwt_read16bitoffsetreg>
 80112f4:	4605      	mov	r5, r0
 80112f6:	2300      	movs	r3, #0
 80112f8:	461a      	mov	r2, r3
 80112fa:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80112fe:	4630      	mov	r0, r6
 8011300:	f7fd fe50 	bl	800efa4 <dwt_write8bitoffsetreg>
 8011304:	2300      	movs	r3, #0
 8011306:	461a      	mov	r2, r3
 8011308:	496f      	ldr	r1, [pc, #444]	; (80114c8 <dwt_ioctl+0xba8>)
 801130a:	4630      	mov	r0, r6
 801130c:	f7fd fe4a 	bl	800efa4 <dwt_write8bitoffsetreg>
 8011310:	4643      	mov	r3, r8
 8011312:	2200      	movs	r2, #0
 8011314:	496b      	ldr	r1, [pc, #428]	; (80114c4 <dwt_ioctl+0xba4>)
 8011316:	4630      	mov	r0, r6
 8011318:	f7fd fe44 	bl	800efa4 <dwt_write8bitoffsetreg>
 801131c:	8025      	strh	r5, [r4, #0]
 801131e:	2500      	movs	r5, #0
 8011320:	f001 ba06 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011324:	2c00      	cmp	r4, #0
 8011326:	f001 825d 	beq.w	80127e4 <dwt_ioctl+0x1ec4>
 801132a:	7923      	ldrb	r3, [r4, #4]
 801132c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801132e:	7a92      	ldrb	r2, [r2, #10]
 8011330:	1a9b      	subs	r3, r3, r2
 8011332:	ee07 3a90 	vmov	s15, r3
 8011336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801133a:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80114d0 <dwt_ioctl+0xbb0>
 801133e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011342:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8011346:	ee77 7a87 	vadd.f32	s15, s15, s14
 801134a:	edc4 7a00 	vstr	s15, [r4]
 801134e:	2500      	movs	r5, #0
 8011350:	f001 b9ee 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011354:	2c00      	cmp	r4, #0
 8011356:	f001 8247 	beq.w	80127e8 <dwt_ioctl+0x1ec8>
 801135a:	7923      	ldrb	r3, [r4, #4]
 801135c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801135e:	7a52      	ldrb	r2, [r2, #9]
 8011360:	1a9b      	subs	r3, r3, r2
 8011362:	ee07 3a90 	vmov	s15, r3
 8011366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801136a:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80114d4 <dwt_ioctl+0xbb4>
 801136e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011372:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8011376:	ee67 7a87 	vmul.f32	s15, s15, s14
 801137a:	eddf 6a57 	vldr	s13, [pc, #348]	; 80114d8 <dwt_ioctl+0xbb8>
 801137e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011382:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8011386:	ee77 7a27 	vadd.f32	s15, s14, s15
 801138a:	edc4 7a00 	vstr	s15, [r4]
 801138e:	2500      	movs	r5, #0
 8011390:	f001 b9ce 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011394:	2c00      	cmp	r4, #0
 8011396:	f001 8229 	beq.w	80127ec <dwt_ioctl+0x1ecc>
 801139a:	6824      	ldr	r4, [r4, #0]
 801139c:	2101      	movs	r1, #1
 801139e:	f7fe f957 	bl	800f650 <ull_enable_rf_tx>
 80113a2:	4630      	mov	r0, r6
 80113a4:	f7fe f988 	bl	800f6b8 <ull_enable_rftx_blocks>
 80113a8:	2101      	movs	r1, #1
 80113aa:	4630      	mov	r0, r6
 80113ac:	f7fd fbca 	bl	800eb44 <ull_force_clocks>
 80113b0:	4621      	mov	r1, r4
 80113b2:	4630      	mov	r0, r6
 80113b4:	f7fe fca0 	bl	800fcf8 <ull_repeated_frames>
 80113b8:	2500      	movs	r5, #0
 80113ba:	f001 b9b9 	b.w	8012730 <dwt_ioctl+0x1e10>
 80113be:	2500      	movs	r5, #0
 80113c0:	9500      	str	r5, [sp, #0]
 80113c2:	23ef      	movs	r3, #239	; 0xef
 80113c4:	462a      	mov	r2, r5
 80113c6:	4945      	ldr	r1, [pc, #276]	; (80114dc <dwt_ioctl+0xbbc>)
 80113c8:	f7fe fa7e 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 80113cc:	2105      	movs	r1, #5
 80113ce:	4630      	mov	r0, r6
 80113d0:	f7fd fbb8 	bl	800eb44 <ull_force_clocks>
 80113d4:	2101      	movs	r1, #1
 80113d6:	4630      	mov	r0, r6
 80113d8:	f7fd fd6c 	bl	800eeb4 <ull_disable_rf_tx>
 80113dc:	4630      	mov	r0, r6
 80113de:	f7fd fd5f 	bl	800eea0 <ull_disable_rftx_blocks>
 80113e2:	f001 b9a5 	b.w	8012730 <dwt_ioctl+0x1e10>
 80113e6:	2500      	movs	r5, #0
 80113e8:	9500      	str	r5, [sp, #0]
 80113ea:	23ef      	movs	r3, #239	; 0xef
 80113ec:	462a      	mov	r2, r5
 80113ee:	493b      	ldr	r1, [pc, #236]	; (80114dc <dwt_ioctl+0xbbc>)
 80113f0:	f7fe fa6a 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 80113f4:	f001 b99c 	b.w	8012730 <dwt_ioctl+0x1e10>
 80113f8:	2c00      	cmp	r4, #0
 80113fa:	f001 81f9 	beq.w	80127f0 <dwt_ioctl+0x1ed0>
 80113fe:	6821      	ldr	r1, [r4, #0]
 8011400:	f7fe fc7a 	bl	800fcf8 <ull_repeated_frames>
 8011404:	2500      	movs	r5, #0
 8011406:	f001 b993 	b.w	8012730 <dwt_ioctl+0x1e10>
 801140a:	2200      	movs	r2, #0
 801140c:	4934      	ldr	r1, [pc, #208]	; (80114e0 <dwt_ioctl+0xbc0>)
 801140e:	f7fc ff1c 	bl	800e24a <dwt_read16bitoffsetreg>
 8011412:	f3c0 050b 	ubfx	r5, r0, #0, #12
 8011416:	f410 6f00 	tst.w	r0, #2048	; 0x800
 801141a:	bf18      	it	ne
 801141c:	f445 4570 	orrne.w	r5, r5, #61440	; 0xf000
 8011420:	b22d      	sxth	r5, r5
 8011422:	8025      	strh	r5, [r4, #0]
 8011424:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8011426:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801142a:	1aed      	subs	r5, r5, r3
 801142c:	f001 b980 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011430:	2c00      	cmp	r4, #0
 8011432:	f001 81df 	beq.w	80127f4 <dwt_ioctl+0x1ed4>
 8011436:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801143a:	7a23      	ldrb	r3, [r4, #8]
 801143c:	f899 2013 	ldrb.w	r2, [r9, #19]
 8011440:	2aff      	cmp	r2, #255	; 0xff
 8011442:	f000 80fe 	beq.w	8011642 <dwt_ioctl+0xd22>
 8011446:	bb93      	cbnz	r3, 80114ae <dwt_ioctl+0xb8e>
 8011448:	f8d9 1000 	ldr.w	r1, [r9]
 801144c:	f7fd feb8 	bl	800f1c0 <ull_update_nonce_GCM>
 8011450:	f899 300c 	ldrb.w	r3, [r9, #12]
 8011454:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 8011458:	18d1      	adds	r1, r2, r3
 801145a:	f899 2012 	ldrb.w	r2, [r9, #18]
 801145e:	2a00      	cmp	r2, #0
 8011460:	d140      	bne.n	80114e4 <dwt_ioctl+0xbc4>
 8011462:	f899 0010 	ldrb.w	r0, [r9, #16]
 8011466:	2800      	cmp	r0, #0
 8011468:	bf0b      	itete	eq
 801146a:	227f      	moveq	r2, #127	; 0x7f
 801146c:	f44f 6280 	movne.w	r2, #1024	; 0x400
 8011470:	f44f 15b0 	moveq.w	r5, #1441792	; 0x160000
 8011474:	f44f 15a0 	movne.w	r5, #1310720	; 0x140000
 8011478:	f899 0013 	ldrb.w	r0, [r9, #19]
 801147c:	1a12      	subs	r2, r2, r0
 801147e:	3a02      	subs	r2, #2
 8011480:	4291      	cmp	r1, r2
 8011482:	f200 80e7 	bhi.w	8011654 <dwt_ioctl+0xd34>
 8011486:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801148a:	9200      	str	r2, [sp, #0]
 801148c:	2200      	movs	r2, #0
 801148e:	4629      	mov	r1, r5
 8011490:	4630      	mov	r0, r6
 8011492:	f7fd fb2d 	bl	800eaf0 <dwt_writetodevice>
 8011496:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 801149a:	f899 200c 	ldrb.w	r2, [r9, #12]
 801149e:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80114a2:	9100      	str	r1, [sp, #0]
 80114a4:	4629      	mov	r1, r5
 80114a6:	4630      	mov	r0, r6
 80114a8:	f7fd fb22 	bl	800eaf0 <dwt_writetodevice>
 80114ac:	e02b      	b.n	8011506 <dwt_ioctl+0xbe6>
 80114ae:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 80114b2:	f8d9 1000 	ldr.w	r1, [r9]
 80114b6:	f7fd fe91 	bl	800f1dc <ull_update_nonce_CCM>
 80114ba:	e7c9      	b.n	8011450 <dwt_ioctl+0xb30>
 80114bc:	00110004 	.word	0x00110004
 80114c0:	00090014 	.word	0x00090014
 80114c4:	00070048 	.word	0x00070048
 80114c8:	00070034 	.word	0x00070034
 80114cc:	00080004 	.word	0x00080004
 80114d0:	3f866666 	.word	0x3f866666
 80114d4:	3ecccccd 	.word	0x3ecccccd
 80114d8:	437f0000 	.word	0x437f0000
 80114dc:	000f0028 	.word	0x000f0028
 80114e0:	00020008 	.word	0x00020008
 80114e4:	2a01      	cmp	r2, #1
 80114e6:	f040 80af 	bne.w	8011648 <dwt_ioctl+0xd28>
 80114ea:	f899 3011 	ldrb.w	r3, [r9, #17]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80114f4:	bf08      	it	eq
 80114f6:	237f      	moveq	r3, #127	; 0x7f
 80114f8:	f899 2013 	ldrb.w	r2, [r9, #19]
 80114fc:	1a9b      	subs	r3, r3, r2
 80114fe:	3b02      	subs	r3, #2
 8011500:	4299      	cmp	r1, r3
 8011502:	f200 80a4 	bhi.w	801164e <dwt_ioctl+0xd2e>
 8011506:	f899 2010 	ldrb.w	r2, [r9, #16]
 801150a:	1e53      	subs	r3, r2, #1
 801150c:	b2db      	uxtb	r3, r3
 801150e:	2b01      	cmp	r3, #1
 8011510:	d940      	bls.n	8011594 <dwt_ioctl+0xc74>
 8011512:	f899 3011 	ldrb.w	r3, [r9, #17]
 8011516:	1e59      	subs	r1, r3, #1
 8011518:	b2c9      	uxtb	r1, r1
 801151a:	2901      	cmp	r1, #1
 801151c:	d947      	bls.n	80115ae <dwt_ioctl+0xc8e>
 801151e:	2b04      	cmp	r3, #4
 8011520:	d04c      	beq.n	80115bc <dwt_ioctl+0xc9c>
 8011522:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 8011526:	2200      	movs	r2, #0
 8011528:	49ba      	ldr	r1, [pc, #744]	; (8011814 <dwt_ioctl+0xef4>)
 801152a:	4630      	mov	r0, r6
 801152c:	f7fd fb56 	bl	800ebdc <dwt_write32bitoffsetreg>
 8011530:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8011534:	4ab8      	ldr	r2, [pc, #736]	; (8011818 <dwt_ioctl+0xef8>)
 8011536:	ea02 12c3 	and.w	r2, r2, r3, lsl #7
 801153a:	f899 300c 	ldrb.w	r3, [r9, #12]
 801153e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011542:	4313      	orrs	r3, r2
 8011544:	2200      	movs	r2, #0
 8011546:	49b5      	ldr	r1, [pc, #724]	; (801181c <dwt_ioctl+0xefc>)
 8011548:	4630      	mov	r0, r6
 801154a:	f7fd fb47 	bl	800ebdc <dwt_write32bitoffsetreg>
 801154e:	2301      	movs	r3, #1
 8011550:	2200      	movs	r2, #0
 8011552:	49b3      	ldr	r1, [pc, #716]	; (8011820 <dwt_ioctl+0xf00>)
 8011554:	4630      	mov	r0, r6
 8011556:	f7fd fd25 	bl	800efa4 <dwt_write8bitoffsetreg>
 801155a:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 8011824 <dwt_ioctl+0xf04>
 801155e:	2700      	movs	r7, #0
 8011560:	463a      	mov	r2, r7
 8011562:	4641      	mov	r1, r8
 8011564:	4630      	mov	r0, r6
 8011566:	f7fc feaf 	bl	800e2c8 <dwt_read8bitoffsetreg>
 801156a:	f010 0f05 	tst.w	r0, #5
 801156e:	d0f7      	beq.n	8011560 <dwt_ioctl+0xc40>
 8011570:	4605      	mov	r5, r0
 8011572:	4603      	mov	r3, r0
 8011574:	2200      	movs	r2, #0
 8011576:	49ab      	ldr	r1, [pc, #684]	; (8011824 <dwt_ioctl+0xf04>)
 8011578:	4630      	mov	r0, r6
 801157a:	f7fd fd13 	bl	800efa4 <dwt_write8bitoffsetreg>
 801157e:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8011582:	f025 0330 	bic.w	r3, r5, #48	; 0x30
 8011586:	2b01      	cmp	r3, #1
 8011588:	d025      	beq.n	80115d6 <dwt_ioctl+0xcb6>
 801158a:	b26b      	sxtb	r3, r5
 801158c:	7023      	strb	r3, [r4, #0]
 801158e:	2500      	movs	r5, #0
 8011590:	f001 b8ce 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011594:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8011596:	7b9b      	ldrb	r3, [r3, #14]
 8011598:	2b03      	cmp	r3, #3
 801159a:	f001 81af 	beq.w	80128fc <dwt_ioctl+0x1fdc>
 801159e:	f899 3011 	ldrb.w	r3, [r9, #17]
 80115a2:	1e5a      	subs	r2, r3, #1
 80115a4:	b2d2      	uxtb	r2, r2
 80115a6:	2a01      	cmp	r2, #1
 80115a8:	d912      	bls.n	80115d0 <dwt_ioctl+0xcb0>
 80115aa:	2201      	movs	r2, #1
 80115ac:	e7b7      	b.n	801151e <dwt_ioctl+0xbfe>
 80115ae:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80115b0:	7b9b      	ldrb	r3, [r3, #14]
 80115b2:	2b03      	cmp	r3, #3
 80115b4:	bf0c      	ite	eq
 80115b6:	2302      	moveq	r3, #2
 80115b8:	2301      	movne	r3, #1
 80115ba:	e7b2      	b.n	8011522 <dwt_ioctl+0xc02>
 80115bc:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 80115c0:	2910      	cmp	r1, #16
 80115c2:	d9ae      	bls.n	8011522 <dwt_ioctl+0xc02>
 80115c4:	f06f 0303 	mvn.w	r3, #3
 80115c8:	e7e0      	b.n	801158c <dwt_ioctl+0xc6c>
 80115ca:	2202      	movs	r2, #2
 80115cc:	4613      	mov	r3, r2
 80115ce:	e7a8      	b.n	8011522 <dwt_ioctl+0xc02>
 80115d0:	2201      	movs	r2, #1
 80115d2:	4613      	mov	r3, r2
 80115d4:	e7a5      	b.n	8011522 <dwt_ioctl+0xc02>
 80115d6:	f899 3012 	ldrb.w	r3, [r9, #18]
 80115da:	2b01      	cmp	r3, #1
 80115dc:	d1d5      	bne.n	801158a <dwt_ioctl+0xc6a>
 80115de:	f899 2011 	ldrb.w	r2, [r9, #17]
 80115e2:	1e53      	subs	r3, r2, #1
 80115e4:	b2db      	uxtb	r3, r3
 80115e6:	2b01      	cmp	r3, #1
 80115e8:	d91b      	bls.n	8011622 <dwt_ioctl+0xd02>
 80115ea:	2a03      	cmp	r2, #3
 80115ec:	bf0c      	ite	eq
 80115ee:	f44f 17a0 	moveq.w	r7, #1310720	; 0x140000
 80115f2:	f44f 17b0 	movne.w	r7, #1441792	; 0x160000
 80115f6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80115fa:	b112      	cbz	r2, 8011602 <dwt_ioctl+0xce2>
 80115fc:	f899 300c 	ldrb.w	r3, [r9, #12]
 8011600:	b9c3      	cbnz	r3, 8011634 <dwt_ioctl+0xd14>
 8011602:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8011606:	2900      	cmp	r1, #0
 8011608:	d0bf      	beq.n	801158a <dwt_ioctl+0xc6a>
 801160a:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d0bb      	beq.n	801158a <dwt_ioctl+0xc6a>
 8011612:	f899 200c 	ldrb.w	r2, [r9, #12]
 8011616:	9100      	str	r1, [sp, #0]
 8011618:	4639      	mov	r1, r7
 801161a:	4630      	mov	r0, r6
 801161c:	f7fc fdf5 	bl	800e20a <dwt_readfromdevice>
 8011620:	e7b3      	b.n	801158a <dwt_ioctl+0xc6a>
 8011622:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8011624:	7b9b      	ldrb	r3, [r3, #14]
 8011626:	2b03      	cmp	r3, #3
 8011628:	bf0c      	ite	eq
 801162a:	f44f 1798 	moveq.w	r7, #1245184	; 0x130000
 801162e:	f44f 1790 	movne.w	r7, #1179648	; 0x120000
 8011632:	e7e0      	b.n	80115f6 <dwt_ioctl+0xcd6>
 8011634:	9200      	str	r2, [sp, #0]
 8011636:	2200      	movs	r2, #0
 8011638:	4639      	mov	r1, r7
 801163a:	4630      	mov	r0, r6
 801163c:	f7fc fde5 	bl	800e20a <dwt_readfromdevice>
 8011640:	e7df      	b.n	8011602 <dwt_ioctl+0xce2>
 8011642:	f06f 0302 	mvn.w	r3, #2
 8011646:	e7a1      	b.n	801158c <dwt_ioctl+0xc6c>
 8011648:	f06f 0301 	mvn.w	r3, #1
 801164c:	e79e      	b.n	801158c <dwt_ioctl+0xc6c>
 801164e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011652:	e79b      	b.n	801158c <dwt_ioctl+0xc6c>
 8011654:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011658:	e798      	b.n	801158c <dwt_ioctl+0xc6c>
 801165a:	7a23      	ldrb	r3, [r4, #8]
 801165c:	79e1      	ldrb	r1, [r4, #7]
 801165e:	79a2      	ldrb	r2, [r4, #6]
 8011660:	00d2      	lsls	r2, r2, #3
 8011662:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8011666:	4313      	orrs	r3, r2
 8011668:	7962      	ldrb	r2, [r4, #5]
 801166a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 801166e:	7922      	ldrb	r2, [r4, #4]
 8011670:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8011674:	78e2      	ldrb	r2, [r4, #3]
 8011676:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801167a:	78a2      	ldrb	r2, [r4, #2]
 801167c:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 8011680:	7862      	ldrb	r2, [r4, #1]
 8011682:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8011686:	7822      	ldrb	r2, [r4, #0]
 8011688:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 801168c:	b29b      	uxth	r3, r3
 801168e:	2200      	movs	r2, #0
 8011690:	4965      	ldr	r1, [pc, #404]	; (8011828 <dwt_ioctl+0xf08>)
 8011692:	f7fd fa38 	bl	800eb06 <dwt_write16bitoffsetreg>
 8011696:	2500      	movs	r5, #0
 8011698:	f001 b84a 	b.w	8012730 <dwt_ioctl+0x1e10>
 801169c:	2c00      	cmp	r4, #0
 801169e:	f001 80ab 	beq.w	80127f8 <dwt_ioctl+0x1ed8>
 80116a2:	7863      	ldrb	r3, [r4, #1]
 80116a4:	b133      	cbz	r3, 80116b4 <dwt_ioctl+0xd94>
 80116a6:	085b      	lsrs	r3, r3, #1
 80116a8:	3b01      	subs	r3, #1
 80116aa:	b2db      	uxtb	r3, r3
 80116ac:	7023      	strb	r3, [r4, #0]
 80116ae:	2500      	movs	r5, #0
 80116b0:	f001 b83e 	b.w	8012730 <dwt_ioctl+0x1e10>
 80116b4:	2300      	movs	r3, #0
 80116b6:	e7f9      	b.n	80116ac <dwt_ioctl+0xd8c>
 80116b8:	2200      	movs	r2, #0
 80116ba:	495c      	ldr	r1, [pc, #368]	; (801182c <dwt_ioctl+0xf0c>)
 80116bc:	f7fc fdaf 	bl	800e21e <dwt_read32bitoffsetreg>
 80116c0:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80116c4:	8023      	strh	r3, [r4, #0]
 80116c6:	f3c0 400b 	ubfx	r0, r0, #16, #12
 80116ca:	8060      	strh	r0, [r4, #2]
 80116cc:	2200      	movs	r2, #0
 80116ce:	4958      	ldr	r1, [pc, #352]	; (8011830 <dwt_ioctl+0xf10>)
 80116d0:	4630      	mov	r0, r6
 80116d2:	f7fc fda4 	bl	800e21e <dwt_read32bitoffsetreg>
 80116d6:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80116da:	80a3      	strh	r3, [r4, #4]
 80116dc:	f3c0 400b 	ubfx	r0, r0, #16, #12
 80116e0:	80e0      	strh	r0, [r4, #6]
 80116e2:	2200      	movs	r2, #0
 80116e4:	4953      	ldr	r1, [pc, #332]	; (8011834 <dwt_ioctl+0xf14>)
 80116e6:	4630      	mov	r0, r6
 80116e8:	f7fc fd99 	bl	800e21e <dwt_read32bitoffsetreg>
 80116ec:	7220      	strb	r0, [r4, #8]
 80116ee:	0c00      	lsrs	r0, r0, #16
 80116f0:	7260      	strb	r0, [r4, #9]
 80116f2:	2200      	movs	r2, #0
 80116f4:	4950      	ldr	r1, [pc, #320]	; (8011838 <dwt_ioctl+0xf18>)
 80116f6:	4630      	mov	r0, r6
 80116f8:	f7fc fd91 	bl	800e21e <dwt_read32bitoffsetreg>
 80116fc:	f3c0 430b 	ubfx	r3, r0, #16, #12
 8011700:	81a3      	strh	r3, [r4, #12]
 8011702:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8011706:	8160      	strh	r0, [r4, #10]
 8011708:	2200      	movs	r2, #0
 801170a:	494c      	ldr	r1, [pc, #304]	; (801183c <dwt_ioctl+0xf1c>)
 801170c:	4630      	mov	r0, r6
 801170e:	f7fc fd86 	bl	800e21e <dwt_read32bitoffsetreg>
 8011712:	f3c0 430b 	ubfx	r3, r0, #16, #12
 8011716:	f8a4 300f 	strh.w	r3, [r4, #15]
 801171a:	73a0      	strb	r0, [r4, #14]
 801171c:	2200      	movs	r2, #0
 801171e:	4948      	ldr	r1, [pc, #288]	; (8011840 <dwt_ioctl+0xf20>)
 8011720:	4630      	mov	r0, r6
 8011722:	f7fc fd7c 	bl	800e21e <dwt_read32bitoffsetreg>
 8011726:	7460      	strb	r0, [r4, #17]
 8011728:	0c00      	lsrs	r0, r0, #16
 801172a:	74a0      	strb	r0, [r4, #18]
 801172c:	2200      	movs	r2, #0
 801172e:	4945      	ldr	r1, [pc, #276]	; (8011844 <dwt_ioctl+0xf24>)
 8011730:	4630      	mov	r0, r6
 8011732:	f7fc fd74 	bl	800e21e <dwt_read32bitoffsetreg>
 8011736:	f3c0 030b 	ubfx	r3, r0, #0, #12
 801173a:	f8a4 3013 	strh.w	r3, [r4, #19]
 801173e:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8011742:	f8a4 0015 	strh.w	r0, [r4, #21]
 8011746:	2200      	movs	r2, #0
 8011748:	493f      	ldr	r1, [pc, #252]	; (8011848 <dwt_ioctl+0xf28>)
 801174a:	4630      	mov	r0, r6
 801174c:	f7fc fdbc 	bl	800e2c8 <dwt_read8bitoffsetreg>
 8011750:	75e0      	strb	r0, [r4, #23]
 8011752:	2500      	movs	r5, #0
 8011754:	f000 bfec 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011758:	4611      	mov	r1, r2
 801175a:	f7fd fc9b 	bl	800f094 <ull_configeventcounters>
 801175e:	2500      	movs	r5, #0
 8011760:	f000 bfe6 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011764:	2c00      	cmp	r4, #0
 8011766:	f001 8049 	beq.w	80127fc <dwt_ioctl+0x1edc>
 801176a:	8823      	ldrh	r3, [r4, #0]
 801176c:	2200      	movs	r2, #0
 801176e:	4937      	ldr	r1, [pc, #220]	; (801184c <dwt_ioctl+0xf2c>)
 8011770:	f7fd f9c9 	bl	800eb06 <dwt_write16bitoffsetreg>
 8011774:	2500      	movs	r5, #0
 8011776:	f000 bfdb 	b.w	8012730 <dwt_ioctl+0x1e10>
 801177a:	2c00      	cmp	r4, #0
 801177c:	f001 8040 	beq.w	8012800 <dwt_ioctl+0x1ee0>
 8011780:	6825      	ldr	r5, [r4, #0]
 8011782:	b935      	cbnz	r5, 8011792 <dwt_ioctl+0xe72>
 8011784:	2300      	movs	r3, #0
 8011786:	461a      	mov	r2, r3
 8011788:	4931      	ldr	r1, [pc, #196]	; (8011850 <dwt_ioctl+0xf30>)
 801178a:	f7fd f9bc 	bl	800eb06 <dwt_write16bitoffsetreg>
 801178e:	f000 bfcf 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011792:	7962      	ldrb	r2, [r4, #5]
 8011794:	7923      	ldrb	r3, [r4, #4]
 8011796:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801179a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801179e:	2200      	movs	r2, #0
 80117a0:	492b      	ldr	r1, [pc, #172]	; (8011850 <dwt_ioctl+0xf30>)
 80117a2:	f7fd f9b0 	bl	800eb06 <dwt_write16bitoffsetreg>
 80117a6:	2500      	movs	r5, #0
 80117a8:	f000 bfc2 	b.w	8012730 <dwt_ioctl+0x1e10>
 80117ac:	2c00      	cmp	r4, #0
 80117ae:	f001 8029 	beq.w	8012804 <dwt_ioctl+0x1ee4>
 80117b2:	6823      	ldr	r3, [r4, #0]
 80117b4:	b94b      	cbnz	r3, 80117ca <dwt_ioctl+0xeaa>
 80117b6:	2500      	movs	r5, #0
 80117b8:	9500      	str	r5, [sp, #0]
 80117ba:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 80117be:	462a      	mov	r2, r5
 80117c0:	2110      	movs	r1, #16
 80117c2:	f7fe fc11 	bl	800ffe8 <dwt_modify16bitoffsetreg>
 80117c6:	f000 bfb3 	b.w	8012730 <dwt_ioctl+0x1e10>
 80117ca:	2200      	movs	r2, #0
 80117cc:	2134      	movs	r1, #52	; 0x34
 80117ce:	f7fd fa05 	bl	800ebdc <dwt_write32bitoffsetreg>
 80117d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80117d6:	9300      	str	r3, [sp, #0]
 80117d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80117dc:	2200      	movs	r2, #0
 80117de:	2110      	movs	r1, #16
 80117e0:	4630      	mov	r0, r6
 80117e2:	f7fe fc01 	bl	800ffe8 <dwt_modify16bitoffsetreg>
 80117e6:	2500      	movs	r5, #0
 80117e8:	f000 bfa2 	b.w	8012730 <dwt_ioctl+0x1e10>
 80117ec:	2c00      	cmp	r4, #0
 80117ee:	f001 800b 	beq.w	8012808 <dwt_ioctl+0x1ee8>
 80117f2:	8861      	ldrh	r1, [r4, #2]
 80117f4:	f7fd fc62 	bl	800f0bc <ull_aon_read>
 80117f8:	7020      	strb	r0, [r4, #0]
 80117fa:	2500      	movs	r5, #0
 80117fc:	f000 bf98 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011800:	2c00      	cmp	r4, #0
 8011802:	f001 8003 	beq.w	801280c <dwt_ioctl+0x1eec>
 8011806:	78a2      	ldrb	r2, [r4, #2]
 8011808:	8821      	ldrh	r1, [r4, #0]
 801180a:	f7fd fc77 	bl	800f0fc <ull_aon_write>
 801180e:	2500      	movs	r5, #0
 8011810:	f000 bf8e 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011814:	00010044 	.word	0x00010044
 8011818:	0001ff80 	.word	0x0001ff80
 801181c:	00010048 	.word	0x00010048
 8011820:	0001004c 	.word	0x0001004c
 8011824:	00010050 	.word	0x00010050
 8011828:	00010030 	.word	0x00010030
 801182c:	000f0004 	.word	0x000f0004
 8011830:	000f0008 	.word	0x000f0008
 8011834:	000f000c 	.word	0x000f000c
 8011838:	000f0010 	.word	0x000f0010
 801183c:	000f0014 	.word	0x000f0014
 8011840:	000f0018 	.word	0x000f0018
 8011844:	000f001c 	.word	0x000f001c
 8011848:	000f0020 	.word	0x000f0020
 801184c:	00060004 	.word	0x00060004
 8011850:	0011001c 	.word	0x0011001c
 8011854:	4bd5      	ldr	r3, [pc, #852]	; (8011bac <dwt_ioctl+0x128c>)
 8011856:	4ad6      	ldr	r2, [pc, #856]	; (8011bb0 <dwt_ioctl+0x1290>)
 8011858:	2d01      	cmp	r5, #1
 801185a:	bf18      	it	ne
 801185c:	4613      	movne	r3, r2
 801185e:	2d01      	cmp	r5, #1
 8011860:	49d4      	ldr	r1, [pc, #848]	; (8011bb4 <dwt_ioctl+0x1294>)
 8011862:	bf18      	it	ne
 8011864:	f04f 110c 	movne.w	r1, #786444	; 0xc000c
 8011868:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801186a:	7b92      	ldrb	r2, [r2, #14]
 801186c:	2a01      	cmp	r2, #1
 801186e:	d012      	beq.n	8011896 <dwt_ioctl+0xf76>
 8011870:	2a03      	cmp	r2, #3
 8011872:	d117      	bne.n	80118a4 <dwt_ioctl+0xf84>
 8011874:	f5a2 12c0 	sub.w	r2, r2, #1572864	; 0x180000
 8011878:	3a01      	subs	r2, #1
 801187a:	441a      	add	r2, r3
 801187c:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8011880:	f7fc fce3 	bl	800e24a <dwt_read16bitoffsetreg>
 8011884:	09c0      	lsrs	r0, r0, #7
 8011886:	8020      	strh	r0, [r4, #0]
 8011888:	8825      	ldrh	r5, [r4, #0]
 801188a:	3500      	adds	r5, #0
 801188c:	bf18      	it	ne
 801188e:	2501      	movne	r5, #1
 8011890:	426d      	negs	r5, r5
 8011892:	f000 bf4d 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011896:	2202      	movs	r2, #2
 8011898:	4619      	mov	r1, r3
 801189a:	f7fc fcd6 	bl	800e24a <dwt_read16bitoffsetreg>
 801189e:	09c0      	lsrs	r0, r0, #7
 80118a0:	8020      	strh	r0, [r4, #0]
 80118a2:	e7f1      	b.n	8011888 <dwt_ioctl+0xf68>
 80118a4:	2202      	movs	r2, #2
 80118a6:	f7fc fcd0 	bl	800e24a <dwt_read16bitoffsetreg>
 80118aa:	09c0      	lsrs	r0, r0, #7
 80118ac:	8020      	strh	r0, [r4, #0]
 80118ae:	e7eb      	b.n	8011888 <dwt_ioctl+0xf68>
 80118b0:	2c00      	cmp	r4, #0
 80118b2:	f000 87ad 	beq.w	8012810 <dwt_ioctl+0x1ef0>
 80118b6:	7821      	ldrb	r1, [r4, #0]
 80118b8:	f7fe fbd4 	bl	8010064 <ull_setleds>
 80118bc:	2500      	movs	r5, #0
 80118be:	f000 bf37 	b.w	8012730 <dwt_ioctl+0x1e10>
 80118c2:	4611      	mov	r1, r2
 80118c4:	f7fe fa30 	bl	800fd28 <ull_setdwstate>
 80118c8:	2500      	movs	r5, #0
 80118ca:	f000 bf31 	b.w	8012730 <dwt_ioctl+0x1e10>
 80118ce:	9400      	str	r4, [sp, #0]
 80118d0:	2304      	movs	r3, #4
 80118d2:	2200      	movs	r2, #0
 80118d4:	211c      	movs	r1, #28
 80118d6:	f7fc fc98 	bl	800e20a <dwt_readfromdevice>
 80118da:	2500      	movs	r5, #0
 80118dc:	f000 bf28 	b.w	8012730 <dwt_ioctl+0x1e10>
 80118e0:	2c00      	cmp	r4, #0
 80118e2:	f000 8797 	beq.w	8012814 <dwt_ioctl+0x1ef4>
 80118e6:	2202      	movs	r2, #2
 80118e8:	2144      	movs	r1, #68	; 0x44
 80118ea:	f7fc fcae 	bl	800e24a <dwt_read16bitoffsetreg>
 80118ee:	f3c0 2000 	ubfx	r0, r0, #8, #1
 80118f2:	7020      	strb	r0, [r4, #0]
 80118f4:	2500      	movs	r5, #0
 80118f6:	f000 bf1b 	b.w	8012730 <dwt_ioctl+0x1e10>
 80118fa:	2c00      	cmp	r4, #0
 80118fc:	f000 878c 	beq.w	8012818 <dwt_ioctl+0x1ef8>
 8011900:	2200      	movs	r2, #0
 8011902:	2144      	movs	r1, #68	; 0x44
 8011904:	f7fc fce0 	bl	800e2c8 <dwt_read8bitoffsetreg>
 8011908:	f000 0001 	and.w	r0, r0, #1
 801190c:	7020      	strb	r0, [r4, #0]
 801190e:	2500      	movs	r5, #0
 8011910:	f000 bf0e 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011914:	2c00      	cmp	r4, #0
 8011916:	f000 8781 	beq.w	801281c <dwt_ioctl+0x1efc>
 801191a:	8862      	ldrh	r2, [r4, #2]
 801191c:	8821      	ldrh	r1, [r4, #0]
 801191e:	f7fe fa61 	bl	800fde4 <ull_configureframefilter>
 8011922:	2500      	movs	r5, #0
 8011924:	f000 bf04 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011928:	9400      	str	r4, [sp, #0]
 801192a:	2308      	movs	r3, #8
 801192c:	2200      	movs	r2, #0
 801192e:	2104      	movs	r1, #4
 8011930:	f7fd f8de 	bl	800eaf0 <dwt_writetodevice>
 8011934:	2500      	movs	r5, #0
 8011936:	f000 befb 	b.w	8012730 <dwt_ioctl+0x1e10>
 801193a:	9400      	str	r4, [sp, #0]
 801193c:	2308      	movs	r3, #8
 801193e:	2200      	movs	r2, #0
 8011940:	2104      	movs	r1, #4
 8011942:	f7fc fc62 	bl	800e20a <dwt_readfromdevice>
 8011946:	2500      	movs	r5, #0
 8011948:	f000 bef2 	b.w	8012730 <dwt_ioctl+0x1e10>
 801194c:	2c00      	cmp	r4, #0
 801194e:	f000 8767 	beq.w	8012820 <dwt_ioctl+0x1f00>
 8011952:	8823      	ldrh	r3, [r4, #0]
 8011954:	2202      	movs	r2, #2
 8011956:	210c      	movs	r1, #12
 8011958:	f7fd f8d5 	bl	800eb06 <dwt_write16bitoffsetreg>
 801195c:	2500      	movs	r5, #0
 801195e:	f000 bee7 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011962:	2c00      	cmp	r4, #0
 8011964:	f000 875e 	beq.w	8012824 <dwt_ioctl+0x1f04>
 8011968:	8823      	ldrh	r3, [r4, #0]
 801196a:	2200      	movs	r2, #0
 801196c:	210c      	movs	r1, #12
 801196e:	f7fd f8ca 	bl	800eb06 <dwt_write16bitoffsetreg>
 8011972:	2500      	movs	r5, #0
 8011974:	f000 bedc 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011978:	4621      	mov	r1, r4
 801197a:	f7fd f897 	bl	800eaac <ull_readrxtimestamp>
 801197e:	2500      	movs	r5, #0
 8011980:	f000 bed6 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011984:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011986:	7b9b      	ldrb	r3, [r3, #14]
 8011988:	2b01      	cmp	r3, #1
 801198a:	d00b      	beq.n	80119a4 <dwt_ioctl+0x1084>
 801198c:	2b03      	cmp	r3, #3
 801198e:	d112      	bne.n	80119b6 <dwt_ioctl+0x1096>
 8011990:	9400      	str	r4, [sp, #0]
 8011992:	2305      	movs	r3, #5
 8011994:	2220      	movs	r2, #32
 8011996:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 801199a:	f7fc fc36 	bl	800e20a <dwt_readfromdevice>
 801199e:	2500      	movs	r5, #0
 80119a0:	f000 bec6 	b.w	8012730 <dwt_ioctl+0x1e10>
 80119a4:	9400      	str	r4, [sp, #0]
 80119a6:	2305      	movs	r3, #5
 80119a8:	2200      	movs	r2, #0
 80119aa:	4983      	ldr	r1, [pc, #524]	; (8011bb8 <dwt_ioctl+0x1298>)
 80119ac:	f7fc fc2d 	bl	800e20a <dwt_readfromdevice>
 80119b0:	2500      	movs	r5, #0
 80119b2:	f000 bebd 	b.w	8012730 <dwt_ioctl+0x1e10>
 80119b6:	9400      	str	r4, [sp, #0]
 80119b8:	2305      	movs	r3, #5
 80119ba:	2200      	movs	r2, #0
 80119bc:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 80119c0:	f7fc fc23 	bl	800e20a <dwt_readfromdevice>
 80119c4:	2500      	movs	r5, #0
 80119c6:	f000 beb3 	b.w	8012730 <dwt_ioctl+0x1e10>
 80119ca:	2500      	movs	r5, #0
 80119cc:	f804 5b01 	strb.w	r5, [r4], #1
 80119d0:	9400      	str	r4, [sp, #0]
 80119d2:	2304      	movs	r3, #4
 80119d4:	462a      	mov	r2, r5
 80119d6:	216c      	movs	r1, #108	; 0x6c
 80119d8:	f7fc fc17 	bl	800e20a <dwt_readfromdevice>
 80119dc:	f000 bea8 	b.w	8012730 <dwt_ioctl+0x1e10>
 80119e0:	2c00      	cmp	r4, #0
 80119e2:	f000 8721 	beq.w	8012828 <dwt_ioctl+0x1f08>
 80119e6:	2201      	movs	r2, #1
 80119e8:	2160      	movs	r1, #96	; 0x60
 80119ea:	f7fc fc18 	bl	800e21e <dwt_read32bitoffsetreg>
 80119ee:	6020      	str	r0, [r4, #0]
 80119f0:	2500      	movs	r5, #0
 80119f2:	f000 be9d 	b.w	8012730 <dwt_ioctl+0x1e10>
 80119f6:	2c00      	cmp	r4, #0
 80119f8:	f000 8718 	beq.w	801282c <dwt_ioctl+0x1f0c>
 80119fc:	2200      	movs	r2, #0
 80119fe:	2160      	movs	r1, #96	; 0x60
 8011a00:	f7fc fc0d 	bl	800e21e <dwt_read32bitoffsetreg>
 8011a04:	6020      	str	r0, [r4, #0]
 8011a06:	2500      	movs	r5, #0
 8011a08:	f000 be92 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011a0c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011a0e:	7b9b      	ldrb	r3, [r3, #14]
 8011a10:	2b01      	cmp	r3, #1
 8011a12:	d00b      	beq.n	8011a2c <dwt_ioctl+0x110c>
 8011a14:	2b03      	cmp	r3, #3
 8011a16:	d112      	bne.n	8011a3e <dwt_ioctl+0x111e>
 8011a18:	9400      	str	r4, [sp, #0]
 8011a1a:	2305      	movs	r3, #5
 8011a1c:	2228      	movs	r2, #40	; 0x28
 8011a1e:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8011a22:	f7fc fbf2 	bl	800e20a <dwt_readfromdevice>
 8011a26:	2500      	movs	r5, #0
 8011a28:	f000 be82 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011a2c:	9400      	str	r4, [sp, #0]
 8011a2e:	2305      	movs	r3, #5
 8011a30:	2200      	movs	r2, #0
 8011a32:	4962      	ldr	r1, [pc, #392]	; (8011bbc <dwt_ioctl+0x129c>)
 8011a34:	f7fc fbe9 	bl	800e20a <dwt_readfromdevice>
 8011a38:	2500      	movs	r5, #0
 8011a3a:	f000 be79 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011a3e:	9400      	str	r4, [sp, #0]
 8011a40:	2305      	movs	r3, #5
 8011a42:	2200      	movs	r2, #0
 8011a44:	495e      	ldr	r1, [pc, #376]	; (8011bc0 <dwt_ioctl+0x12a0>)
 8011a46:	f7fc fbe0 	bl	800e20a <dwt_readfromdevice>
 8011a4a:	2500      	movs	r5, #0
 8011a4c:	f000 be70 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011a50:	2c00      	cmp	r4, #0
 8011a52:	f000 86ed 	beq.w	8012830 <dwt_ioctl+0x1f10>
 8011a56:	2200      	movs	r2, #0
 8011a58:	211c      	movs	r1, #28
 8011a5a:	f7fc fbe0 	bl	800e21e <dwt_read32bitoffsetreg>
 8011a5e:	6020      	str	r0, [r4, #0]
 8011a60:	2500      	movs	r5, #0
 8011a62:	f000 be65 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011a66:	2c00      	cmp	r4, #0
 8011a68:	f000 86e4 	beq.w	8012834 <dwt_ioctl+0x1f14>
 8011a6c:	8825      	ldrh	r5, [r4, #0]
 8011a6e:	6867      	ldr	r7, [r4, #4]
 8011a70:	7a23      	ldrb	r3, [r4, #8]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	f000 86e0 	beq.w	8012838 <dwt_ioctl+0x1f18>
 8011a78:	463c      	mov	r4, r7
 8011a7a:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8011a7e:	4629      	mov	r1, r5
 8011a80:	4630      	mov	r0, r6
 8011a82:	f7fd f889 	bl	800eb98 <_dwt_otpread>
 8011a86:	f844 0b04 	str.w	r0, [r4], #4
 8011a8a:	3501      	adds	r5, #1
 8011a8c:	b2ad      	uxth	r5, r5
 8011a8e:	42bc      	cmp	r4, r7
 8011a90:	d1f5      	bne.n	8011a7e <dwt_ioctl+0x115e>
 8011a92:	2500      	movs	r5, #0
 8011a94:	f000 be4c 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011a98:	2c00      	cmp	r4, #0
 8011a9a:	f000 86cf 	beq.w	801283c <dwt_ioctl+0x1f1c>
 8011a9e:	7821      	ldrb	r1, [r4, #0]
 8011aa0:	f7fd fb86 	bl	800f1b0 <ull_setplenfine>
 8011aa4:	2500      	movs	r5, #0
 8011aa6:	f000 be43 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011aaa:	f7fe f9bf 	bl	800fe2c <ull_run_pgfcal>
 8011aae:	4605      	mov	r5, r0
 8011ab0:	f000 be3e 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011ab4:	4611      	mov	r1, r2
 8011ab6:	f7fe fb23 	bl	8010100 <ull_pgf_cal>
 8011aba:	4605      	mov	r5, r0
 8011abc:	f000 be38 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011ac0:	2c00      	cmp	r4, #0
 8011ac2:	f000 86bd 	beq.w	8012840 <dwt_ioctl+0x1f20>
 8011ac6:	78a5      	ldrb	r5, [r4, #2]
 8011ac8:	2101      	movs	r1, #1
 8011aca:	f7fd f83b 	bl	800eb44 <ull_force_clocks>
 8011ace:	2100      	movs	r1, #0
 8011ad0:	4630      	mov	r0, r6
 8011ad2:	f7fd fdbd 	bl	800f650 <ull_enable_rf_tx>
 8011ad6:	4630      	mov	r0, r6
 8011ad8:	f7fd fdee 	bl	800f6b8 <ull_enable_rftx_blocks>
 8011adc:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	4938      	ldr	r1, [pc, #224]	; (8011bc4 <dwt_ioctl+0x12a4>)
 8011ae4:	4630      	mov	r0, r6
 8011ae6:	f7fd fa5d 	bl	800efa4 <dwt_write8bitoffsetreg>
 8011aea:	2301      	movs	r3, #1
 8011aec:	9300      	str	r3, [sp, #0]
 8011aee:	23ff      	movs	r3, #255	; 0xff
 8011af0:	2200      	movs	r2, #0
 8011af2:	4935      	ldr	r1, [pc, #212]	; (8011bc8 <dwt_ioctl+0x12a8>)
 8011af4:	4630      	mov	r0, r6
 8011af6:	f7fd fee7 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 8011afa:	4f33      	ldr	r7, [pc, #204]	; (8011bc8 <dwt_ioctl+0x12a8>)
 8011afc:	2500      	movs	r5, #0
 8011afe:	462a      	mov	r2, r5
 8011b00:	4639      	mov	r1, r7
 8011b02:	4630      	mov	r0, r6
 8011b04:	f7fc fbe0 	bl	800e2c8 <dwt_read8bitoffsetreg>
 8011b08:	f010 0f01 	tst.w	r0, #1
 8011b0c:	d1f7      	bne.n	8011afe <dwt_ioctl+0x11de>
 8011b0e:	2200      	movs	r2, #0
 8011b10:	492e      	ldr	r1, [pc, #184]	; (8011bcc <dwt_ioctl+0x12ac>)
 8011b12:	4630      	mov	r0, r6
 8011b14:	f7fc fb99 	bl	800e24a <dwt_read16bitoffsetreg>
 8011b18:	4605      	mov	r5, r0
 8011b1a:	4630      	mov	r0, r6
 8011b1c:	f7fd f9c0 	bl	800eea0 <ull_disable_rftx_blocks>
 8011b20:	2100      	movs	r1, #0
 8011b22:	4630      	mov	r0, r6
 8011b24:	f7fd f9c6 	bl	800eeb4 <ull_disable_rf_tx>
 8011b28:	2105      	movs	r1, #5
 8011b2a:	4630      	mov	r0, r6
 8011b2c:	f7fd f80a 	bl	800eb44 <ull_force_clocks>
 8011b30:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8011b34:	8025      	strh	r5, [r4, #0]
 8011b36:	2500      	movs	r5, #0
 8011b38:	f000 bdfa 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011b3c:	2102      	movs	r1, #2
 8011b3e:	f7fe f8f3 	bl	800fd28 <ull_setdwstate>
 8011b42:	2101      	movs	r1, #1
 8011b44:	4630      	mov	r0, r6
 8011b46:	f7fe f8ef 	bl	800fd28 <ull_setdwstate>
 8011b4a:	2432      	movs	r4, #50	; 0x32
 8011b4c:	f04f 0814 	mov.w	r8, #20
 8011b50:	2700      	movs	r7, #0
 8011b52:	2544      	movs	r5, #68	; 0x44
 8011b54:	4640      	mov	r0, r8
 8011b56:	f7ef fd10 	bl	800157a <deca_usleep>
 8011b5a:	463a      	mov	r2, r7
 8011b5c:	4629      	mov	r1, r5
 8011b5e:	4630      	mov	r0, r6
 8011b60:	f7fc fbb2 	bl	800e2c8 <dwt_read8bitoffsetreg>
 8011b64:	f010 0f02 	tst.w	r0, #2
 8011b68:	d105      	bne.n	8011b76 <dwt_ioctl+0x1256>
 8011b6a:	1e63      	subs	r3, r4, #1
 8011b6c:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8011b70:	d1f0      	bne.n	8011b54 <dwt_ioctl+0x1234>
 8011b72:	2501      	movs	r5, #1
 8011b74:	e000      	b.n	8011b78 <dwt_ioctl+0x1258>
 8011b76:	2500      	movs	r5, #0
 8011b78:	426d      	negs	r5, r5
 8011b7a:	f000 bdd9 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011b7e:	2c00      	cmp	r4, #0
 8011b80:	f000 8660 	beq.w	8012844 <dwt_ioctl+0x1f24>
 8011b84:	7823      	ldrb	r3, [r4, #0]
 8011b86:	031b      	lsls	r3, r3, #12
 8011b88:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8011b8c:	7862      	ldrb	r2, [r4, #1]
 8011b8e:	2a01      	cmp	r2, #1
 8011b90:	bf08      	it	eq
 8011b92:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 8011b96:	9300      	str	r3, [sp, #0]
 8011b98:	f46f 43e2 	mvn.w	r3, #28928	; 0x7100
 8011b9c:	2200      	movs	r2, #0
 8011b9e:	490c      	ldr	r1, [pc, #48]	; (8011bd0 <dwt_ioctl+0x12b0>)
 8011ba0:	f7fd fd22 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 8011ba4:	2500      	movs	r5, #0
 8011ba6:	f000 bdc3 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011baa:	bf00      	nop
 8011bac:	00180034 	.word	0x00180034
 8011bb0:	0018002c 	.word	0x0018002c
 8011bb4:	000c0014 	.word	0x000c0014
 8011bb8:	00180020 	.word	0x00180020
 8011bbc:	00180028 	.word	0x00180028
 8011bc0:	000c0008 	.word	0x000c0008
 8011bc4:	0007001c 	.word	0x0007001c
 8011bc8:	00080010 	.word	0x00080010
 8011bcc:	00080014 	.word	0x00080014
 8011bd0:	00070014 	.word	0x00070014
 8011bd4:	2c00      	cmp	r4, #0
 8011bd6:	f000 8637 	beq.w	8012848 <dwt_ioctl+0x1f28>
 8011bda:	6862      	ldr	r2, [r4, #4]
 8011bdc:	6821      	ldr	r1, [r4, #0]
 8011bde:	f7fd fe35 	bl	800f84c <ull_setgpiomode>
 8011be2:	2500      	movs	r5, #0
 8011be4:	f000 bda4 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011be8:	2c00      	cmp	r4, #0
 8011bea:	f000 862f 	beq.w	801284c <dwt_ioctl+0x1f2c>
 8011bee:	8823      	ldrh	r3, [r4, #0]
 8011bf0:	2200      	movs	r2, #0
 8011bf2:	49c4      	ldr	r1, [pc, #784]	; (8011f04 <dwt_ioctl+0x15e4>)
 8011bf4:	f7fc ff87 	bl	800eb06 <dwt_write16bitoffsetreg>
 8011bf8:	2500      	movs	r5, #0
 8011bfa:	f000 bd99 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011bfe:	2c00      	cmp	r4, #0
 8011c00:	f000 8626 	beq.w	8012850 <dwt_ioctl+0x1f30>
 8011c04:	6862      	ldr	r2, [r4, #4]
 8011c06:	8821      	ldrh	r1, [r4, #0]
 8011c08:	f7fe faaa 	bl	8010160 <ull_setgpiovalue>
 8011c0c:	2500      	movs	r5, #0
 8011c0e:	f000 bd8f 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011c12:	2c00      	cmp	r4, #0
 8011c14:	f000 861e 	beq.w	8012854 <dwt_ioctl+0x1f34>
 8011c18:	7865      	ldrb	r5, [r4, #1]
 8011c1a:	7823      	ldrb	r3, [r4, #0]
 8011c1c:	b18b      	cbz	r3, 8011c42 <dwt_ioctl+0x1322>
 8011c1e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011c20:	2200      	movs	r2, #0
 8011c22:	739a      	strb	r2, [r3, #14]
 8011c24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011c28:	2208      	movs	r2, #8
 8011c2a:	b37d      	cbz	r5, 8011c8c <dwt_ioctl+0x136c>
 8011c2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011c30:	9200      	str	r2, [sp, #0]
 8011c32:	2200      	movs	r2, #0
 8011c34:	2110      	movs	r1, #16
 8011c36:	4630      	mov	r0, r6
 8011c38:	f7fd fcd6 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 8011c3c:	2500      	movs	r5, #0
 8011c3e:	f000 bd77 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011c42:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011c44:	2201      	movs	r2, #1
 8011c46:	739a      	strb	r2, [r3, #14]
 8011c48:	2318      	movs	r3, #24
 8011c4a:	2200      	movs	r2, #0
 8011c4c:	49ae      	ldr	r1, [pc, #696]	; (8011f08 <dwt_ioctl+0x15e8>)
 8011c4e:	f7fc ffc5 	bl	800ebdc <dwt_write32bitoffsetreg>
 8011c52:	23e8      	movs	r3, #232	; 0xe8
 8011c54:	2200      	movs	r2, #0
 8011c56:	49ad      	ldr	r1, [pc, #692]	; (8011f0c <dwt_ioctl+0x15ec>)
 8011c58:	4630      	mov	r0, r6
 8011c5a:	f7fc ffbf 	bl	800ebdc <dwt_write32bitoffsetreg>
 8011c5e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8011c60:	7d9b      	ldrb	r3, [r3, #22]
 8011c62:	085b      	lsrs	r3, r3, #1
 8011c64:	d003      	beq.n	8011c6e <dwt_ioctl+0x134e>
 8011c66:	f06f 0308 	mvn.w	r3, #8
 8011c6a:	2200      	movs	r2, #0
 8011c6c:	e7dd      	b.n	8011c2a <dwt_ioctl+0x130a>
 8011c6e:	2301      	movs	r3, #1
 8011c70:	2200      	movs	r2, #0
 8011c72:	49a7      	ldr	r1, [pc, #668]	; (8011f10 <dwt_ioctl+0x15f0>)
 8011c74:	4630      	mov	r0, r6
 8011c76:	f7fd f995 	bl	800efa4 <dwt_write8bitoffsetreg>
 8011c7a:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8011c7c:	7d93      	ldrb	r3, [r2, #22]
 8011c7e:	f043 0302 	orr.w	r3, r3, #2
 8011c82:	7593      	strb	r3, [r2, #22]
 8011c84:	f06f 0308 	mvn.w	r3, #8
 8011c88:	2200      	movs	r2, #0
 8011c8a:	e7ce      	b.n	8011c2a <dwt_ioctl+0x130a>
 8011c8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011c90:	e7ce      	b.n	8011c30 <dwt_ioctl+0x1310>
 8011c92:	2c00      	cmp	r4, #0
 8011c94:	f000 85e0 	beq.w	8012858 <dwt_ioctl+0x1f38>
 8011c98:	6823      	ldr	r3, [r4, #0]
 8011c9a:	2200      	movs	r2, #0
 8011c9c:	2130      	movs	r1, #48	; 0x30
 8011c9e:	f7fc ff9d 	bl	800ebdc <dwt_write32bitoffsetreg>
 8011ca2:	2500      	movs	r5, #0
 8011ca4:	f000 bd44 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011ca8:	2c00      	cmp	r4, #0
 8011caa:	f000 85d7 	beq.w	801285c <dwt_ioctl+0x1f3c>
 8011cae:	2200      	movs	r2, #0
 8011cb0:	4629      	mov	r1, r5
 8011cb2:	f7fc fab4 	bl	800e21e <dwt_read32bitoffsetreg>
 8011cb6:	6020      	str	r0, [r4, #0]
 8011cb8:	2500      	movs	r5, #0
 8011cba:	f000 bd39 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011cbe:	4623      	mov	r3, r4
 8011cc0:	2200      	movs	r2, #0
 8011cc2:	4629      	mov	r1, r5
 8011cc4:	f7fc ff8a 	bl	800ebdc <dwt_write32bitoffsetreg>
 8011cc8:	2500      	movs	r5, #0
 8011cca:	f000 bd31 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011cce:	2c00      	cmp	r4, #0
 8011cd0:	f000 85c6 	beq.w	8012860 <dwt_ioctl+0x1f40>
 8011cd4:	2203      	movs	r2, #3
 8011cd6:	498f      	ldr	r1, [pc, #572]	; (8011f14 <dwt_ioctl+0x15f4>)
 8011cd8:	f7fc faf6 	bl	800e2c8 <dwt_read8bitoffsetreg>
 8011cdc:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8011ce0:	7020      	strb	r0, [r4, #0]
 8011ce2:	2500      	movs	r5, #0
 8011ce4:	f000 bd24 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011ce8:	2c00      	cmp	r4, #0
 8011cea:	f000 85bb 	beq.w	8012864 <dwt_ioctl+0x1f44>
 8011cee:	6823      	ldr	r3, [r4, #0]
 8011cf0:	2200      	movs	r2, #0
 8011cf2:	2144      	movs	r1, #68	; 0x44
 8011cf4:	f7fc ff72 	bl	800ebdc <dwt_write32bitoffsetreg>
 8011cf8:	2500      	movs	r5, #0
 8011cfa:	f000 bd19 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011cfe:	2c00      	cmp	r4, #0
 8011d00:	f000 85b2 	beq.w	8012868 <dwt_ioctl+0x1f48>
 8011d04:	8823      	ldrh	r3, [r4, #0]
 8011d06:	2200      	movs	r2, #0
 8011d08:	2148      	movs	r1, #72	; 0x48
 8011d0a:	f7fc fefc 	bl	800eb06 <dwt_write16bitoffsetreg>
 8011d0e:	2500      	movs	r5, #0
 8011d10:	f000 bd0e 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011d14:	2c00      	cmp	r4, #0
 8011d16:	f000 85a9 	beq.w	801286c <dwt_ioctl+0x1f4c>
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	2144      	movs	r1, #68	; 0x44
 8011d1e:	f7fc fa7e 	bl	800e21e <dwt_read32bitoffsetreg>
 8011d22:	6020      	str	r0, [r4, #0]
 8011d24:	2500      	movs	r5, #0
 8011d26:	f000 bd03 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011d2a:	2c00      	cmp	r4, #0
 8011d2c:	f000 85a0 	beq.w	8012870 <dwt_ioctl+0x1f50>
 8011d30:	2200      	movs	r2, #0
 8011d32:	2148      	movs	r1, #72	; 0x48
 8011d34:	f7fc fa89 	bl	800e24a <dwt_read16bitoffsetreg>
 8011d38:	6020      	str	r0, [r4, #0]
 8011d3a:	2500      	movs	r5, #0
 8011d3c:	f000 bcf8 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011d40:	2c00      	cmp	r4, #0
 8011d42:	f000 8597 	beq.w	8012874 <dwt_ioctl+0x1f54>
 8011d46:	7823      	ldrb	r3, [r4, #0]
 8011d48:	2200      	movs	r2, #0
 8011d4a:	4973      	ldr	r1, [pc, #460]	; (8011f18 <dwt_ioctl+0x15f8>)
 8011d4c:	f7fd f92a 	bl	800efa4 <dwt_write8bitoffsetreg>
 8011d50:	2500      	movs	r5, #0
 8011d52:	f000 bced 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011d56:	2c00      	cmp	r4, #0
 8011d58:	f000 858e 	beq.w	8012878 <dwt_ioctl+0x1f58>
 8011d5c:	2200      	movs	r2, #0
 8011d5e:	2144      	movs	r1, #68	; 0x44
 8011d60:	f7fc fab2 	bl	800e2c8 <dwt_read8bitoffsetreg>
 8011d64:	7020      	strb	r0, [r4, #0]
 8011d66:	2500      	movs	r5, #0
 8011d68:	f000 bce2 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011d6c:	2c00      	cmp	r4, #0
 8011d6e:	f000 8585 	beq.w	801287c <dwt_ioctl+0x1f5c>
 8011d72:	f7fd f923 	bl	800efbc <ull_getframelength>
 8011d76:	6020      	str	r0, [r4, #0]
 8011d78:	2500      	movs	r5, #0
 8011d7a:	f000 bcd9 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011d7e:	2c00      	cmp	r4, #0
 8011d80:	f000 857e 	beq.w	8012880 <dwt_ioctl+0x1f60>
 8011d84:	2200      	movs	r2, #0
 8011d86:	4965      	ldr	r1, [pc, #404]	; (8011f1c <dwt_ioctl+0x15fc>)
 8011d88:	f7fc fa5f 	bl	800e24a <dwt_read16bitoffsetreg>
 8011d8c:	8020      	strh	r0, [r4, #0]
 8011d8e:	2500      	movs	r5, #0
 8011d90:	f000 bcce 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011d94:	2c00      	cmp	r4, #0
 8011d96:	f000 8575 	beq.w	8012884 <dwt_ioctl+0x1f64>
 8011d9a:	2200      	movs	r2, #0
 8011d9c:	4960      	ldr	r1, [pc, #384]	; (8011f20 <dwt_ioctl+0x1600>)
 8011d9e:	f7fc fa3e 	bl	800e21e <dwt_read32bitoffsetreg>
 8011da2:	6020      	str	r0, [r4, #0]
 8011da4:	2500      	movs	r5, #0
 8011da6:	f000 bcc3 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011daa:	2c00      	cmp	r4, #0
 8011dac:	f000 856c 	beq.w	8012888 <dwt_ioctl+0x1f68>
 8011db0:	8823      	ldrh	r3, [r4, #0]
 8011db2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011db6:	9300      	str	r3, [sp, #0]
 8011db8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8011dbc:	2200      	movs	r2, #0
 8011dbe:	4958      	ldr	r1, [pc, #352]	; (8011f20 <dwt_ioctl+0x1600>)
 8011dc0:	f7fe f912 	bl	800ffe8 <dwt_modify16bitoffsetreg>
 8011dc4:	2500      	movs	r5, #0
 8011dc6:	f000 bcb3 	b.w	8012730 <dwt_ioctl+0x1e10>
 8011dca:	2c00      	cmp	r4, #0
 8011dcc:	f000 855e 	beq.w	801288c <dwt_ioctl+0x1f6c>
 8011dd0:	88a7      	ldrh	r7, [r4, #4]
 8011dd2:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8011dd6:	7b23      	ldrb	r3, [r4, #12]
 8011dd8:	9306      	str	r3, [sp, #24]
 8011dda:	6922      	ldr	r2, [r4, #16]
 8011ddc:	9204      	str	r2, [sp, #16]
 8011dde:	6962      	ldr	r2, [r4, #20]
 8011de0:	9205      	str	r2, [sp, #20]
 8011de2:	f00b 0203 	and.w	r2, fp, #3
 8011de6:	f3cb 0585 	ubfx	r5, fp, #2, #6
 8011dea:	2b05      	cmp	r3, #5
 8011dec:	d147      	bne.n	8011e7e <dwt_ioctl+0x155e>
 8011dee:	f5b7 7fb1 	cmp.w	r7, #354	; 0x162
 8011df2:	bf28      	it	cs
 8011df4:	f44f 77b1 	movcs.w	r7, #354	; 0x162
 8011df8:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8011f28 <dwt_ioctl+0x1608>
 8011dfc:	2f04      	cmp	r7, #4
 8011dfe:	d805      	bhi.n	8011e0c <dwt_ioctl+0x14ec>
 8011e00:	eb09 0305 	add.w	r3, r9, r5
 8011e04:	785b      	ldrb	r3, [r3, #1]
 8011e06:	3b05      	subs	r3, #5
 8011e08:	429f      	cmp	r7, r3
 8011e0a:	db40      	blt.n	8011e8e <dwt_ioctl+0x156e>
 8011e0c:	2a01      	cmp	r2, #1
 8011e0e:	f200 80c8 	bhi.w	8011fa2 <dwt_ioctl+0x1682>
 8011e12:	4b44      	ldr	r3, [pc, #272]	; (8011f24 <dwt_ioctl+0x1604>)
 8011e14:	5c99      	ldrb	r1, [r3, r2]
 8011e16:	463e      	mov	r6, r7
 8011e18:	42b9      	cmp	r1, r7
 8011e1a:	f280 80c4 	bge.w	8011fa6 <dwt_ioctl+0x1686>
 8011e1e:	1c50      	adds	r0, r2, #1
 8011e20:	fa53 f080 	uxtab	r0, r3, r0
 8011e24:	2300      	movs	r3, #0
 8011e26:	440b      	add	r3, r1
 8011e28:	b29b      	uxth	r3, r3
 8011e2a:	3201      	adds	r2, #1
 8011e2c:	b2d2      	uxtb	r2, r2
 8011e2e:	2a02      	cmp	r2, #2
 8011e30:	d005      	beq.n	8011e3e <dwt_ioctl+0x151e>
 8011e32:	f810 1b01 	ldrb.w	r1, [r0], #1
 8011e36:	eba6 0c03 	sub.w	ip, r6, r3
 8011e3a:	4561      	cmp	r1, ip
 8011e3c:	dbf3      	blt.n	8011e26 <dwt_ioctl+0x1506>
 8011e3e:	429f      	cmp	r7, r3
 8011e40:	bf08      	it	eq
 8011e42:	9503      	streq	r5, [sp, #12]
 8011e44:	f000 80b4 	beq.w	8011fb0 <dwt_ioctl+0x1690>
 8011e48:	f107 0c05 	add.w	ip, r7, #5
 8011e4c:	fa1f fc8c 	uxth.w	ip, ip
 8011e50:	2680      	movs	r6, #128	; 0x80
 8011e52:	2100      	movs	r1, #0
 8011e54:	9107      	str	r1, [sp, #28]
 8011e56:	9103      	str	r1, [sp, #12]
 8011e58:	9108      	str	r1, [sp, #32]
 8011e5a:	2005      	movs	r0, #5
 8011e5c:	46b8      	mov	r8, r7
 8011e5e:	4287      	cmp	r7, r0
 8011e60:	bf38      	it	cc
 8011e62:	4680      	movcc	r8, r0
 8011e64:	f1a8 0805 	sub.w	r8, r8, #5
 8011e68:	fa1f f888 	uxth.w	r8, r8
 8011e6c:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 8011f24 <dwt_ioctl+0x1604>
 8011e70:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8011e74:	4683      	mov	fp, r0
 8011e76:	4620      	mov	r0, r4
 8011e78:	460c      	mov	r4, r1
 8011e7a:	4686      	mov	lr, r0
 8011e7c:	e031      	b.n	8011ee2 <dwt_ioctl+0x15c2>
 8011e7e:	f240 1331 	movw	r3, #305	; 0x131
 8011e82:	429f      	cmp	r7, r3
 8011e84:	bf28      	it	cs
 8011e86:	461f      	movcs	r7, r3
 8011e88:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8011f2c <dwt_ioctl+0x160c>
 8011e8c:	e7b6      	b.n	8011dfc <dwt_ioctl+0x14dc>
 8011e8e:	2300      	movs	r3, #0
 8011e90:	9a05      	ldr	r2, [sp, #20]
 8011e92:	8013      	strh	r3, [r2, #0]
 8011e94:	9a04      	ldr	r2, [sp, #16]
 8011e96:	f8c2 b000 	str.w	fp, [r2]
 8011e9a:	e098      	b.n	8011fce <dwt_ioctl+0x16ae>
 8011e9c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8011ea0:	4674      	mov	r4, lr
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	9a05      	ldr	r2, [sp, #20]
 8011ea6:	8013      	strh	r3, [r2, #0]
 8011ea8:	9b04      	ldr	r3, [sp, #16]
 8011eaa:	f8c3 b000 	str.w	fp, [r3]
 8011eae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011eb2:	e08c      	b.n	8011fce <dwt_ioctl+0x16ae>
 8011eb4:	fa1f fb80 	uxth.w	fp, r0
 8011eb8:	9207      	str	r2, [sp, #28]
 8011eba:	9503      	str	r5, [sp, #12]
 8011ebc:	9308      	str	r3, [sp, #32]
 8011ebe:	2401      	movs	r4, #1
 8011ec0:	2d3f      	cmp	r5, #63	; 0x3f
 8011ec2:	d050      	beq.n	8011f66 <dwt_ioctl+0x1646>
 8011ec4:	2900      	cmp	r1, #0
 8011ec6:	d139      	bne.n	8011f3c <dwt_ioctl+0x161c>
 8011ec8:	3501      	adds	r5, #1
 8011eca:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8011ece:	f819 0005 	ldrb.w	r0, [r9, r5]
 8011ed2:	4403      	add	r3, r0
 8011ed4:	b29b      	uxth	r3, r3
 8011ed6:	429f      	cmp	r7, r3
 8011ed8:	d067      	beq.n	8011faa <dwt_ioctl+0x168a>
 8011eda:	3e01      	subs	r6, #1
 8011edc:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8011ee0:	d0dc      	beq.n	8011e9c <dwt_ioctl+0x157c>
 8011ee2:	4543      	cmp	r3, r8
 8011ee4:	d924      	bls.n	8011f30 <dwt_ioctl+0x1610>
 8011ee6:	4563      	cmp	r3, ip
 8011ee8:	d222      	bcs.n	8011f30 <dwt_ioctl+0x1610>
 8011eea:	1af8      	subs	r0, r7, r3
 8011eec:	b200      	sxth	r0, r0
 8011eee:	2800      	cmp	r0, #0
 8011ef0:	bfb8      	it	lt
 8011ef2:	4240      	neglt	r0, r0
 8011ef4:	4558      	cmp	r0, fp
 8011ef6:	dddd      	ble.n	8011eb4 <dwt_ioctl+0x1594>
 8011ef8:	2c00      	cmp	r4, #0
 8011efa:	d0e1      	beq.n	8011ec0 <dwt_ioctl+0x15a0>
 8011efc:	4674      	mov	r4, lr
 8011efe:	9a07      	ldr	r2, [sp, #28]
 8011f00:	9b08      	ldr	r3, [sp, #32]
 8011f02:	e055      	b.n	8011fb0 <dwt_ioctl+0x1690>
 8011f04:	00050008 	.word	0x00050008
 8011f08:	001f000c 	.word	0x001f000c
 8011f0c:	001f0010 	.word	0x001f0010
 8011f10:	00010020 	.word	0x00010020
 8011f14:	00030054 	.word	0x00030054
 8011f18:	00010018 	.word	0x00010018
 8011f1c:	0005002c 	.word	0x0005002c
 8011f20:	000e001c 	.word	0x000e001c
 8011f24:	08016458 	.word	0x08016458
 8011f28:	080163d8 	.word	0x080163d8
 8011f2c:	08016418 	.word	0x08016418
 8011f30:	b984      	cbnz	r4, 8011f54 <dwt_ioctl+0x1634>
 8011f32:	4563      	cmp	r3, ip
 8011f34:	d3c4      	bcc.n	8011ec0 <dwt_ioctl+0x15a0>
 8011f36:	b199      	cbz	r1, 8011f60 <dwt_ioctl+0x1640>
 8011f38:	2d3f      	cmp	r5, #63	; 0x3f
 8011f3a:	d014      	beq.n	8011f66 <dwt_ioctl+0x1646>
 8011f3c:	f819 1005 	ldrb.w	r1, [r9, r5]
 8011f40:	1a5b      	subs	r3, r3, r1
 8011f42:	b29b      	uxth	r3, r3
 8011f44:	1e69      	subs	r1, r5, #1
 8011f46:	f001 053f 	and.w	r5, r1, #63	; 0x3f
 8011f4a:	f011 013f 	ands.w	r1, r1, #63	; 0x3f
 8011f4e:	bf18      	it	ne
 8011f50:	2101      	movne	r1, #1
 8011f52:	e7c0      	b.n	8011ed6 <dwt_ioctl+0x15b6>
 8011f54:	4674      	mov	r4, lr
 8011f56:	f819 1005 	ldrb.w	r1, [r9, r5]
 8011f5a:	1a5b      	subs	r3, r3, r1
 8011f5c:	b29b      	uxth	r3, r3
 8011f5e:	e027      	b.n	8011fb0 <dwt_ioctl+0x1690>
 8011f60:	4674      	mov	r4, lr
 8011f62:	9503      	str	r5, [sp, #12]
 8011f64:	e024      	b.n	8011fb0 <dwt_ioctl+0x1690>
 8011f66:	2c00      	cmp	r4, #0
 8011f68:	d134      	bne.n	8011fd4 <dwt_ioctl+0x16b4>
 8011f6a:	2a03      	cmp	r2, #3
 8011f6c:	d036      	beq.n	8011fdc <dwt_ioctl+0x16bc>
 8011f6e:	2a02      	cmp	r2, #2
 8011f70:	d009      	beq.n	8011f86 <dwt_ioctl+0x1666>
 8011f72:	f81a 1002 	ldrb.w	r1, [sl, r2]
 8011f76:	1858      	adds	r0, r3, r1
 8011f78:	42b8      	cmp	r0, r7
 8011f7a:	dd0b      	ble.n	8011f94 <dwt_ioctl+0x1674>
 8011f7c:	440b      	add	r3, r1
 8011f7e:	b29b      	uxth	r3, r3
 8011f80:	3201      	adds	r2, #1
 8011f82:	b2d2      	uxtb	r2, r2
 8011f84:	e7da      	b.n	8011f3c <dwt_ioctl+0x161c>
 8011f86:	9906      	ldr	r1, [sp, #24]
 8011f88:	2909      	cmp	r1, #9
 8011f8a:	d1f2      	bne.n	8011f72 <dwt_ioctl+0x1652>
 8011f8c:	4674      	mov	r4, lr
 8011f8e:	213f      	movs	r1, #63	; 0x3f
 8011f90:	9103      	str	r1, [sp, #12]
 8011f92:	e00d      	b.n	8011fb0 <dwt_ioctl+0x1690>
 8011f94:	4674      	mov	r4, lr
 8011f96:	b283      	uxth	r3, r0
 8011f98:	3201      	adds	r2, #1
 8011f9a:	b2d2      	uxtb	r2, r2
 8011f9c:	213f      	movs	r1, #63	; 0x3f
 8011f9e:	9103      	str	r1, [sp, #12]
 8011fa0:	e006      	b.n	8011fb0 <dwt_ioctl+0x1690>
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	e74b      	b.n	8011e3e <dwt_ioctl+0x151e>
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	e749      	b.n	8011e3e <dwt_ioctl+0x151e>
 8011faa:	4674      	mov	r4, lr
 8011fac:	9503      	str	r5, [sp, #12]
 8011fae:	463b      	mov	r3, r7
 8011fb0:	9905      	ldr	r1, [sp, #20]
 8011fb2:	800b      	strh	r3, [r1, #0]
 8011fb4:	9b03      	ldr	r3, [sp, #12]
 8011fb6:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
 8011fba:	b2db      	uxtb	r3, r3
 8011fbc:	041a      	lsls	r2, r3, #16
 8011fbe:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8011fc2:	431a      	orrs	r2, r3
 8011fc4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8011fc8:	9a04      	ldr	r2, [sp, #16]
 8011fca:	6013      	str	r3, [r2, #0]
 8011fcc:	2300      	movs	r3, #0
 8011fce:	6023      	str	r3, [r4, #0]
 8011fd0:	2500      	movs	r5, #0
 8011fd2:	e3ad      	b.n	8012730 <dwt_ioctl+0x1e10>
 8011fd4:	4674      	mov	r4, lr
 8011fd6:	9a07      	ldr	r2, [sp, #28]
 8011fd8:	9b08      	ldr	r3, [sp, #32]
 8011fda:	e7e9      	b.n	8011fb0 <dwt_ioctl+0x1690>
 8011fdc:	4674      	mov	r4, lr
 8011fde:	213f      	movs	r1, #63	; 0x3f
 8011fe0:	9103      	str	r1, [sp, #12]
 8011fe2:	e7e5      	b.n	8011fb0 <dwt_ioctl+0x1690>
 8011fe4:	2c00      	cmp	r4, #0
 8011fe6:	f000 8453 	beq.w	8012890 <dwt_ioctl+0x1f70>
 8011fea:	7827      	ldrb	r7, [r4, #0]
 8011fec:	7864      	ldrb	r4, [r4, #1]
 8011fee:	f7ef fa9b 	bl	8001528 <decamutexon>
 8011ff2:	4605      	mov	r5, r0
 8011ff4:	2c02      	cmp	r4, #2
 8011ff6:	d00e      	beq.n	8012016 <dwt_ioctl+0x16f6>
 8011ff8:	2c04      	cmp	r4, #4
 8011ffa:	d00c      	beq.n	8012016 <dwt_ioctl+0x16f6>
 8011ffc:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
 8012000:	2c01      	cmp	r4, #1
 8012002:	d019      	beq.n	8012038 <dwt_ioctl+0x1718>
 8012004:	43fb      	mvns	r3, r7
 8012006:	2200      	movs	r2, #0
 8012008:	9200      	str	r2, [sp, #0]
 801200a:	b2db      	uxtb	r3, r3
 801200c:	49c1      	ldr	r1, [pc, #772]	; (8012314 <dwt_ioctl+0x19f4>)
 801200e:	4630      	mov	r0, r6
 8012010:	f7fd fc5a 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 8012014:	e005      	b.n	8012022 <dwt_ioctl+0x1702>
 8012016:	463b      	mov	r3, r7
 8012018:	2200      	movs	r2, #0
 801201a:	49be      	ldr	r1, [pc, #760]	; (8012314 <dwt_ioctl+0x19f4>)
 801201c:	4630      	mov	r0, r6
 801201e:	f7fc ffc1 	bl	800efa4 <dwt_write8bitoffsetreg>
 8012022:	463b      	mov	r3, r7
 8012024:	2200      	movs	r2, #0
 8012026:	49bc      	ldr	r1, [pc, #752]	; (8012318 <dwt_ioctl+0x19f8>)
 8012028:	4630      	mov	r0, r6
 801202a:	f7fc fdd7 	bl	800ebdc <dwt_write32bitoffsetreg>
 801202e:	4628      	mov	r0, r5
 8012030:	f7ef fa8b 	bl	800154a <decamutexoff>
 8012034:	2500      	movs	r5, #0
 8012036:	e37b      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012038:	9700      	str	r7, [sp, #0]
 801203a:	23ff      	movs	r3, #255	; 0xff
 801203c:	2200      	movs	r2, #0
 801203e:	49b5      	ldr	r1, [pc, #724]	; (8012314 <dwt_ioctl+0x19f4>)
 8012040:	4630      	mov	r0, r6
 8012042:	f7fd fc41 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 8012046:	e7ec      	b.n	8012022 <dwt_ioctl+0x1702>
 8012048:	2302      	movs	r3, #2
 801204a:	9301      	str	r3, [sp, #4]
 801204c:	2500      	movs	r5, #0
 801204e:	9500      	str	r5, [sp, #0]
 8012050:	462b      	mov	r3, r5
 8012052:	462a      	mov	r2, r5
 8012054:	211a      	movs	r1, #26
 8012056:	f7fc f85a 	bl	800e10e <dwt_xfer3xxx>
 801205a:	e369      	b.n	8012730 <dwt_ioctl+0x1e10>
 801205c:	f7fe fc4c 	bl	80108f8 <ull_softreset_fcmd>
 8012060:	2500      	movs	r5, #0
 8012062:	e365      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012064:	f7fe fc34 	bl	80108d0 <ull_softreset_no_sema_fcmd>
 8012068:	2500      	movs	r5, #0
 801206a:	e361      	b.n	8012730 <dwt_ioctl+0x1e10>
 801206c:	2302      	movs	r3, #2
 801206e:	9301      	str	r3, [sp, #4]
 8012070:	2500      	movs	r5, #0
 8012072:	9500      	str	r5, [sp, #0]
 8012074:	462b      	mov	r3, r5
 8012076:	462a      	mov	r2, r5
 8012078:	2114      	movs	r1, #20
 801207a:	f7fc f848 	bl	800e10e <dwt_xfer3xxx>
 801207e:	e357      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012080:	2402      	movs	r4, #2
 8012082:	9401      	str	r4, [sp, #4]
 8012084:	2500      	movs	r5, #0
 8012086:	9500      	str	r5, [sp, #0]
 8012088:	462b      	mov	r3, r5
 801208a:	462a      	mov	r2, r5
 801208c:	2115      	movs	r1, #21
 801208e:	f7fc f83e 	bl	800e10e <dwt_xfer3xxx>
 8012092:	9401      	str	r4, [sp, #4]
 8012094:	9500      	str	r5, [sp, #0]
 8012096:	462b      	mov	r3, r5
 8012098:	462a      	mov	r2, r5
 801209a:	2115      	movs	r1, #21
 801209c:	4630      	mov	r0, r6
 801209e:	f7fc f836 	bl	800e10e <dwt_xfer3xxx>
 80120a2:	e345      	b.n	8012730 <dwt_ioctl+0x1e10>
 80120a4:	2302      	movs	r3, #2
 80120a6:	9301      	str	r3, [sp, #4]
 80120a8:	2500      	movs	r5, #0
 80120aa:	9500      	str	r5, [sp, #0]
 80120ac:	462b      	mov	r3, r5
 80120ae:	462a      	mov	r2, r5
 80120b0:	2116      	movs	r1, #22
 80120b2:	f7fc f82c 	bl	800e10e <dwt_xfer3xxx>
 80120b6:	e33b      	b.n	8012730 <dwt_ioctl+0x1e10>
 80120b8:	2c00      	cmp	r4, #0
 80120ba:	f000 83eb 	beq.w	8012894 <dwt_ioctl+0x1f74>
 80120be:	b932      	cbnz	r2, 80120ce <dwt_ioctl+0x17ae>
 80120c0:	2200      	movs	r2, #0
 80120c2:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 80120c6:	f7fc f8ff 	bl	800e2c8 <dwt_read8bitoffsetreg>
 80120ca:	7020      	strb	r0, [r4, #0]
 80120cc:	e330      	b.n	8012730 <dwt_ioctl+0x1e10>
 80120ce:	2201      	movs	r2, #1
 80120d0:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 80120d4:	f7fc f8f8 	bl	800e2c8 <dwt_read8bitoffsetreg>
 80120d8:	7020      	strb	r0, [r4, #0]
 80120da:	2500      	movs	r5, #0
 80120dc:	e328      	b.n	8012730 <dwt_ioctl+0x1e10>
 80120de:	2c00      	cmp	r4, #0
 80120e0:	f000 83da 	beq.w	8012898 <dwt_ioctl+0x1f78>
 80120e4:	7824      	ldrb	r4, [r4, #0]
 80120e6:	2200      	movs	r2, #0
 80120e8:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 80120ec:	f7fc f8ec 	bl	800e2c8 <dwt_read8bitoffsetreg>
 80120f0:	f000 039f 	and.w	r3, r0, #159	; 0x9f
 80120f4:	4323      	orrs	r3, r4
 80120f6:	2200      	movs	r2, #0
 80120f8:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 80120fc:	4630      	mov	r0, r6
 80120fe:	f7fc ff51 	bl	800efa4 <dwt_write8bitoffsetreg>
 8012102:	2500      	movs	r5, #0
 8012104:	e314      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012106:	2c00      	cmp	r4, #0
 8012108:	f000 83c8 	beq.w	801289c <dwt_ioctl+0x1f7c>
 801210c:	7824      	ldrb	r4, [r4, #0]
 801210e:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
 8012112:	d01d      	beq.n	8012150 <dwt_ioctl+0x1830>
 8012114:	2d01      	cmp	r5, #1
 8012116:	f040 83c3 	bne.w	80128a0 <dwt_ioctl+0x1f80>
 801211a:	2502      	movs	r5, #2
 801211c:	2201      	movs	r2, #1
 801211e:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8012122:	4630      	mov	r0, r6
 8012124:	f7fc f8d0 	bl	800e2c8 <dwt_read8bitoffsetreg>
 8012128:	b9a4      	cbnz	r4, 8012154 <dwt_ioctl+0x1834>
 801212a:	ea20 0305 	bic.w	r3, r0, r5
 801212e:	b2db      	uxtb	r3, r3
 8012130:	2201      	movs	r2, #1
 8012132:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8012136:	4630      	mov	r0, r6
 8012138:	f7fc ff34 	bl	800efa4 <dwt_write8bitoffsetreg>
 801213c:	2200      	movs	r2, #0
 801213e:	2110      	movs	r1, #16
 8012140:	4630      	mov	r0, r6
 8012142:	f7fc f86c 	bl	800e21e <dwt_read32bitoffsetreg>
 8012146:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 801214a:	d00a      	beq.n	8012162 <dwt_ioctl+0x1842>
 801214c:	2500      	movs	r5, #0
 801214e:	e2ef      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012150:	2504      	movs	r5, #4
 8012152:	e7e3      	b.n	801211c <dwt_ioctl+0x17fc>
 8012154:	2c01      	cmp	r4, #1
 8012156:	f040 83a6 	bne.w	80128a6 <dwt_ioctl+0x1f86>
 801215a:	ea40 0305 	orr.w	r3, r0, r5
 801215e:	b2db      	uxtb	r3, r3
 8012160:	e7e6      	b.n	8012130 <dwt_ioctl+0x1810>
 8012162:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012166:	9300      	str	r3, [sp, #0]
 8012168:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801216c:	2200      	movs	r2, #0
 801216e:	2110      	movs	r1, #16
 8012170:	4630      	mov	r0, r6
 8012172:	f7fd fa39 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 8012176:	2500      	movs	r5, #0
 8012178:	e2da      	b.n	8012730 <dwt_ioctl+0x1e10>
 801217a:	2c00      	cmp	r4, #0
 801217c:	f000 8396 	beq.w	80128ac <dwt_ioctl+0x1f8c>
 8012180:	7823      	ldrb	r3, [r4, #0]
 8012182:	035b      	lsls	r3, r3, #13
 8012184:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012188:	9300      	str	r3, [sp, #0]
 801218a:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 801218e:	2200      	movs	r2, #0
 8012190:	4962      	ldr	r1, [pc, #392]	; (801231c <dwt_ioctl+0x19fc>)
 8012192:	f7fd ff29 	bl	800ffe8 <dwt_modify16bitoffsetreg>
 8012196:	2500      	movs	r5, #0
 8012198:	e2ca      	b.n	8012730 <dwt_ioctl+0x1e10>
 801219a:	2c00      	cmp	r4, #0
 801219c:	f000 8388 	beq.w	80128b0 <dwt_ioctl+0x1f90>
 80121a0:	7825      	ldrb	r5, [r4, #0]
 80121a2:	6862      	ldr	r2, [r4, #4]
 80121a4:	2a01      	cmp	r2, #1
 80121a6:	bf15      	itete	ne
 80121a8:	f46f 3360 	mvnne.w	r3, #229376	; 0x38000
 80121ac:	f46f 43e0 	mvneq.w	r3, #28672	; 0x7000
 80121b0:	27df      	movne	r7, #223	; 0xdf
 80121b2:	27ef      	moveq	r7, #239	; 0xef
 80121b4:	bf14      	ite	ne
 80121b6:	f04f 0820 	movne.w	r8, #32
 80121ba:	f04f 0810 	moveq.w	r8, #16
 80121be:	2400      	movs	r4, #0
 80121c0:	9400      	str	r4, [sp, #0]
 80121c2:	4622      	mov	r2, r4
 80121c4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80121c8:	f7fd fa0e 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 80121cc:	9400      	str	r4, [sp, #0]
 80121ce:	463b      	mov	r3, r7
 80121d0:	4622      	mov	r2, r4
 80121d2:	4953      	ldr	r1, [pc, #332]	; (8012320 <dwt_ioctl+0x1a00>)
 80121d4:	4630      	mov	r0, r6
 80121d6:	f7fd fb77 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 80121da:	2d01      	cmp	r5, #1
 80121dc:	d002      	beq.n	80121e4 <dwt_ioctl+0x18c4>
 80121de:	b155      	cbz	r5, 80121f6 <dwt_ioctl+0x18d6>
 80121e0:	2500      	movs	r5, #0
 80121e2:	e2a5      	b.n	8012730 <dwt_ioctl+0x1e10>
 80121e4:	4625      	mov	r5, r4
 80121e6:	9400      	str	r4, [sp, #0]
 80121e8:	463b      	mov	r3, r7
 80121ea:	4622      	mov	r2, r4
 80121ec:	494d      	ldr	r1, [pc, #308]	; (8012324 <dwt_ioctl+0x1a04>)
 80121ee:	4630      	mov	r0, r6
 80121f0:	f7fd fb6a 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 80121f4:	e29c      	b.n	8012730 <dwt_ioctl+0x1e10>
 80121f6:	f8cd 8000 	str.w	r8, [sp]
 80121fa:	23ff      	movs	r3, #255	; 0xff
 80121fc:	2200      	movs	r2, #0
 80121fe:	4949      	ldr	r1, [pc, #292]	; (8012324 <dwt_ioctl+0x1a04>)
 8012200:	4630      	mov	r0, r6
 8012202:	f7fd fb61 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 8012206:	e293      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012208:	2c00      	cmp	r4, #0
 801220a:	f000 8353 	beq.w	80128b4 <dwt_ioctl+0x1f94>
 801220e:	7822      	ldrb	r2, [r4, #0]
 8012210:	f012 0f01 	tst.w	r2, #1
 8012214:	d02c      	beq.n	8012270 <dwt_ioctl+0x1950>
 8012216:	0157      	lsls	r7, r2, #5
 8012218:	f007 0740 	and.w	r7, r7, #64	; 0x40
 801221c:	2440      	movs	r4, #64	; 0x40
 801221e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8012222:	f012 0f04 	tst.w	r2, #4
 8012226:	d027      	beq.n	8012278 <dwt_ioctl+0x1958>
 8012228:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 801222c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8012230:	0112      	lsls	r2, r2, #4
 8012232:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8012236:	4317      	orrs	r7, r2
 8012238:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801223c:	9200      	str	r2, [sp, #0]
 801223e:	43db      	mvns	r3, r3
 8012240:	2200      	movs	r2, #0
 8012242:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8012246:	4630      	mov	r0, r6
 8012248:	f7fd f9ce 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 801224c:	43e4      	mvns	r4, r4
 801224e:	b2a4      	uxth	r4, r4
 8012250:	2500      	movs	r5, #0
 8012252:	9500      	str	r5, [sp, #0]
 8012254:	4623      	mov	r3, r4
 8012256:	462a      	mov	r2, r5
 8012258:	4931      	ldr	r1, [pc, #196]	; (8012320 <dwt_ioctl+0x1a00>)
 801225a:	4630      	mov	r0, r6
 801225c:	f7fd fec4 	bl	800ffe8 <dwt_modify16bitoffsetreg>
 8012260:	9700      	str	r7, [sp, #0]
 8012262:	4623      	mov	r3, r4
 8012264:	462a      	mov	r2, r5
 8012266:	492f      	ldr	r1, [pc, #188]	; (8012324 <dwt_ioctl+0x1a04>)
 8012268:	4630      	mov	r0, r6
 801226a:	f7fd febd 	bl	800ffe8 <dwt_modify16bitoffsetreg>
 801226e:	e25f      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012270:	2700      	movs	r7, #0
 8012272:	463c      	mov	r4, r7
 8012274:	463b      	mov	r3, r7
 8012276:	e7d4      	b.n	8012222 <dwt_ioctl+0x1902>
 8012278:	2200      	movs	r2, #0
 801227a:	e7df      	b.n	801223c <dwt_ioctl+0x191c>
 801227c:	2308      	movs	r3, #8
 801227e:	9300      	str	r3, [sp, #0]
 8012280:	23ff      	movs	r3, #255	; 0xff
 8012282:	2201      	movs	r2, #1
 8012284:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8012288:	f7fd fb1e 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 801228c:	4c26      	ldr	r4, [pc, #152]	; (8012328 <dwt_ioctl+0x1a08>)
 801228e:	2302      	movs	r3, #2
 8012290:	9300      	str	r3, [sp, #0]
 8012292:	23ff      	movs	r3, #255	; 0xff
 8012294:	2203      	movs	r2, #3
 8012296:	4621      	mov	r1, r4
 8012298:	4630      	mov	r0, r6
 801229a:	f7fd fb15 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 801229e:	2500      	movs	r5, #0
 80122a0:	9500      	str	r5, [sp, #0]
 80122a2:	23f7      	movs	r3, #247	; 0xf7
 80122a4:	2201      	movs	r2, #1
 80122a6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80122aa:	4630      	mov	r0, r6
 80122ac:	f7fd fb0c 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 80122b0:	9500      	str	r5, [sp, #0]
 80122b2:	23fd      	movs	r3, #253	; 0xfd
 80122b4:	2203      	movs	r2, #3
 80122b6:	4621      	mov	r1, r4
 80122b8:	4630      	mov	r0, r6
 80122ba:	f7fd fb05 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 80122be:	e237      	b.n	8012730 <dwt_ioctl+0x1e10>
 80122c0:	2c00      	cmp	r4, #0
 80122c2:	f000 82f9 	beq.w	80128b8 <dwt_ioctl+0x1f98>
 80122c6:	8863      	ldrh	r3, [r4, #2]
 80122c8:	00db      	lsls	r3, r3, #3
 80122ca:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80122ce:	7822      	ldrb	r2, [r4, #0]
 80122d0:	b10a      	cbz	r2, 80122d6 <dwt_ioctl+0x19b6>
 80122d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80122d6:	9300      	str	r3, [sp, #0]
 80122d8:	f24f 0307 	movw	r3, #61447	; 0xf007
 80122dc:	2200      	movs	r2, #0
 80122de:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80122e2:	4630      	mov	r0, r6
 80122e4:	f7fd fe80 	bl	800ffe8 <dwt_modify16bitoffsetreg>
 80122e8:	2500      	movs	r5, #0
 80122ea:	e221      	b.n	8012730 <dwt_ioctl+0x1e10>
 80122ec:	2500      	movs	r5, #0
 80122ee:	9500      	str	r5, [sp, #0]
 80122f0:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 80122f4:	462a      	mov	r2, r5
 80122f6:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
 80122fa:	f7fd fe75 	bl	800ffe8 <dwt_modify16bitoffsetreg>
 80122fe:	e217      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012300:	2c00      	cmp	r4, #0
 8012302:	f000 82db 	beq.w	80128bc <dwt_ioctl+0x1f9c>
 8012306:	2200      	movs	r2, #0
 8012308:	4908      	ldr	r1, [pc, #32]	; (801232c <dwt_ioctl+0x1a0c>)
 801230a:	f7fb ff9e 	bl	800e24a <dwt_read16bitoffsetreg>
 801230e:	8020      	strh	r0, [r4, #0]
 8012310:	2500      	movs	r5, #0
 8012312:	e20d      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012314:	0001001c 	.word	0x0001001c
 8012318:	00010018 	.word	0x00010018
 801231c:	000e000c 	.word	0x000e000c
 8012320:	00050008 	.word	0x00050008
 8012324:	0005000c 	.word	0x0005000c
 8012328:	00110008 	.word	0x00110008
 801232c:	00110048 	.word	0x00110048
 8012330:	2c00      	cmp	r4, #0
 8012332:	f000 82c5 	beq.w	80128c0 <dwt_ioctl+0x1fa0>
 8012336:	7823      	ldrb	r3, [r4, #0]
 8012338:	2b01      	cmp	r3, #1
 801233a:	7862      	ldrb	r2, [r4, #1]
 801233c:	78a3      	ldrb	r3, [r4, #2]
 801233e:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 8012342:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8012346:	78e2      	ldrb	r2, [r4, #3]
 8012348:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 801234c:	7922      	ldrb	r2, [r4, #4]
 801234e:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
 8012352:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8012356:	bf0c      	ite	eq
 8012358:	2202      	moveq	r2, #2
 801235a:	2200      	movne	r2, #0
 801235c:	49b6      	ldr	r1, [pc, #728]	; (8012638 <dwt_ioctl+0x1d18>)
 801235e:	f7fc fbd2 	bl	800eb06 <dwt_write16bitoffsetreg>
 8012362:	2500      	movs	r5, #0
 8012364:	e1e4      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012366:	2c00      	cmp	r4, #0
 8012368:	f000 82ac 	beq.w	80128c4 <dwt_ioctl+0x1fa4>
 801236c:	6863      	ldr	r3, [r4, #4]
 801236e:	7822      	ldrb	r2, [r4, #0]
 8012370:	b13a      	cbz	r2, 8012382 <dwt_ioctl+0x1a62>
 8012372:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012376:	2200      	movs	r2, #0
 8012378:	49b0      	ldr	r1, [pc, #704]	; (801263c <dwt_ioctl+0x1d1c>)
 801237a:	f7fc fc2f 	bl	800ebdc <dwt_write32bitoffsetreg>
 801237e:	2500      	movs	r5, #0
 8012380:	e1d6      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012382:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012386:	49ae      	ldr	r1, [pc, #696]	; (8012640 <dwt_ioctl+0x1d20>)
 8012388:	f7fc fc28 	bl	800ebdc <dwt_write32bitoffsetreg>
 801238c:	2500      	movs	r5, #0
 801238e:	e1cf      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012390:	2c00      	cmp	r4, #0
 8012392:	f000 8299 	beq.w	80128c8 <dwt_ioctl+0x1fa8>
 8012396:	7823      	ldrb	r3, [r4, #0]
 8012398:	2401      	movs	r4, #1
 801239a:	409c      	lsls	r4, r3
 801239c:	b2e4      	uxtb	r4, r4
 801239e:	2310      	movs	r3, #16
 80123a0:	9300      	str	r3, [sp, #0]
 80123a2:	23ff      	movs	r3, #255	; 0xff
 80123a4:	2200      	movs	r2, #0
 80123a6:	49a7      	ldr	r1, [pc, #668]	; (8012644 <dwt_ioctl+0x1d24>)
 80123a8:	f7fd fa8e 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 80123ac:	43e3      	mvns	r3, r4
 80123ae:	4fa2      	ldr	r7, [pc, #648]	; (8012638 <dwt_ioctl+0x1d18>)
 80123b0:	2500      	movs	r5, #0
 80123b2:	9500      	str	r5, [sp, #0]
 80123b4:	b2db      	uxtb	r3, r3
 80123b6:	462a      	mov	r2, r5
 80123b8:	4639      	mov	r1, r7
 80123ba:	4630      	mov	r0, r6
 80123bc:	f7fd fa84 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 80123c0:	9400      	str	r4, [sp, #0]
 80123c2:	23ff      	movs	r3, #255	; 0xff
 80123c4:	462a      	mov	r2, r5
 80123c6:	4639      	mov	r1, r7
 80123c8:	4630      	mov	r0, r6
 80123ca:	f7fd fa7d 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 80123ce:	e1af      	b.n	8012730 <dwt_ioctl+0x1e10>
 80123d0:	2c00      	cmp	r4, #0
 80123d2:	f000 827b 	beq.w	80128cc <dwt_ioctl+0x1fac>
 80123d6:	7822      	ldrb	r2, [r4, #0]
 80123d8:	7863      	ldrb	r3, [r4, #1]
 80123da:	b19b      	cbz	r3, 8012404 <dwt_ioctl+0x1ae4>
 80123dc:	2a00      	cmp	r2, #0
 80123de:	f040 8297 	bne.w	8012910 <dwt_ioctl+0x1ff0>
 80123e2:	2400      	movs	r4, #0
 80123e4:	9400      	str	r4, [sp, #0]
 80123e6:	f06f 73c0 	mvn.w	r3, #25165824	; 0x1800000
 80123ea:	4622      	mov	r2, r4
 80123ec:	2110      	movs	r1, #16
 80123ee:	f7fd f8fb 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 80123f2:	9400      	str	r4, [sp, #0]
 80123f4:	4b94      	ldr	r3, [pc, #592]	; (8012648 <dwt_ioctl+0x1d28>)
 80123f6:	4622      	mov	r2, r4
 80123f8:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80123fc:	4630      	mov	r0, r6
 80123fe:	f7fd f8f3 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 8012402:	e017      	b.n	8012434 <dwt_ioctl+0x1b14>
 8012404:	2a00      	cmp	r2, #0
 8012406:	f000 8285 	beq.w	8012914 <dwt_ioctl+0x1ff4>
 801240a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 801240e:	2400      	movs	r4, #0
 8012410:	9400      	str	r4, [sp, #0]
 8012412:	f06f 73c0 	mvn.w	r3, #25165824	; 0x1800000
 8012416:	4622      	mov	r2, r4
 8012418:	2110      	movs	r1, #16
 801241a:	4630      	mov	r0, r6
 801241c:	f7fd f8e4 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 8012420:	9500      	str	r5, [sp, #0]
 8012422:	4b89      	ldr	r3, [pc, #548]	; (8012648 <dwt_ioctl+0x1d28>)
 8012424:	4622      	mov	r2, r4
 8012426:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801242a:	4630      	mov	r0, r6
 801242c:	f7fd f8dc 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 8012430:	f04f 74c0 	mov.w	r4, #25165824	; 0x1800000
 8012434:	9400      	str	r4, [sp, #0]
 8012436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801243a:	2200      	movs	r2, #0
 801243c:	2110      	movs	r1, #16
 801243e:	4630      	mov	r0, r6
 8012440:	f7fd f8d2 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 8012444:	2500      	movs	r5, #0
 8012446:	e173      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012448:	2c00      	cmp	r4, #0
 801244a:	f000 8241 	beq.w	80128d0 <dwt_ioctl+0x1fb0>
 801244e:	7823      	ldrb	r3, [r4, #0]
 8012450:	b93b      	cbnz	r3, 8012462 <dwt_ioctl+0x1b42>
 8012452:	2500      	movs	r5, #0
 8012454:	9500      	str	r5, [sp, #0]
 8012456:	23df      	movs	r3, #223	; 0xdf
 8012458:	2203      	movs	r2, #3
 801245a:	497c      	ldr	r1, [pc, #496]	; (801264c <dwt_ioctl+0x1d2c>)
 801245c:	f7fd fa34 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 8012460:	e166      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012462:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8012466:	9300      	str	r3, [sp, #0]
 8012468:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801246c:	2200      	movs	r2, #0
 801246e:	4977      	ldr	r1, [pc, #476]	; (801264c <dwt_ioctl+0x1d2c>)
 8012470:	f7fd f8ba 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 8012474:	2500      	movs	r5, #0
 8012476:	e15b      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012478:	2c00      	cmp	r4, #0
 801247a:	f000 822b 	beq.w	80128d4 <dwt_ioctl+0x1fb4>
 801247e:	7823      	ldrb	r3, [r4, #0]
 8012480:	b93b      	cbnz	r3, 8012492 <dwt_ioctl+0x1b72>
 8012482:	2500      	movs	r5, #0
 8012484:	9500      	str	r5, [sp, #0]
 8012486:	237f      	movs	r3, #127	; 0x7f
 8012488:	2203      	movs	r2, #3
 801248a:	4971      	ldr	r1, [pc, #452]	; (8012650 <dwt_ioctl+0x1d30>)
 801248c:	f7fd fa1c 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 8012490:	e14e      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012492:	2380      	movs	r3, #128	; 0x80
 8012494:	9300      	str	r3, [sp, #0]
 8012496:	23ff      	movs	r3, #255	; 0xff
 8012498:	2203      	movs	r2, #3
 801249a:	496d      	ldr	r1, [pc, #436]	; (8012650 <dwt_ioctl+0x1d30>)
 801249c:	f7fd fa14 	bl	800f8c8 <dwt_modify8bitoffsetreg>
 80124a0:	2500      	movs	r5, #0
 80124a2:	e145      	b.n	8012730 <dwt_ioctl+0x1e10>
 80124a4:	2c00      	cmp	r4, #0
 80124a6:	f000 8217 	beq.w	80128d8 <dwt_ioctl+0x1fb8>
 80124aa:	b2e3      	uxtb	r3, r4
 80124ac:	1c9a      	adds	r2, r3, #2
 80124ae:	2301      	movs	r3, #1
 80124b0:	4093      	lsls	r3, r2
 80124b2:	3b01      	subs	r3, #1
 80124b4:	b2db      	uxtb	r3, r3
 80124b6:	2200      	movs	r2, #0
 80124b8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80124bc:	f7fc fd72 	bl	800efa4 <dwt_write8bitoffsetreg>
 80124c0:	2500      	movs	r5, #0
 80124c2:	e135      	b.n	8012730 <dwt_ioctl+0x1e10>
 80124c4:	2c00      	cmp	r4, #0
 80124c6:	f000 8209 	beq.w	80128dc <dwt_ioctl+0x1fbc>
 80124ca:	7ae3      	ldrb	r3, [r4, #11]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	f000 8207 	beq.w	80128e0 <dwt_ioctl+0x1fc0>
 80124d2:	7b63      	ldrb	r3, [r4, #13]
 80124d4:	2b01      	cmp	r3, #1
 80124d6:	7b20      	ldrb	r0, [r4, #12]
 80124d8:	bf94      	ite	ls
 80124da:	2203      	movls	r2, #3
 80124dc:	2204      	movhi	r2, #4
 80124de:	2110      	movs	r1, #16
 80124e0:	4b5c      	ldr	r3, [pc, #368]	; (8012654 <dwt_ioctl+0x1d34>)
 80124e2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80124e6:	f7fb fdf5 	bl	800e0d4 <get_sts_mnth>
 80124ea:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80124ee:	9000      	str	r0, [sp, #0]
 80124f0:	f64f 7380 	movw	r3, #65408	; 0xff80
 80124f4:	2202      	movs	r2, #2
 80124f6:	4958      	ldr	r1, [pc, #352]	; (8012658 <dwt_ioctl+0x1d38>)
 80124f8:	4630      	mov	r0, r6
 80124fa:	f7fd fd75 	bl	800ffe8 <dwt_modify16bitoffsetreg>
 80124fe:	2394      	movs	r3, #148	; 0x94
 8012500:	2200      	movs	r2, #0
 8012502:	4956      	ldr	r1, [pc, #344]	; (801265c <dwt_ioctl+0x1d3c>)
 8012504:	4630      	mov	r0, r6
 8012506:	f7fc fd4d 	bl	800efa4 <dwt_write8bitoffsetreg>
 801250a:	2500      	movs	r5, #0
 801250c:	e110      	b.n	8012730 <dwt_ioctl+0x1e10>
 801250e:	2c00      	cmp	r4, #0
 8012510:	f000 81e8 	beq.w	80128e4 <dwt_ioctl+0x1fc4>
 8012514:	2200      	movs	r2, #0
 8012516:	4952      	ldr	r1, [pc, #328]	; (8012660 <dwt_ioctl+0x1d40>)
 8012518:	f7fb fe81 	bl	800e21e <dwt_read32bitoffsetreg>
 801251c:	6020      	str	r0, [r4, #0]
 801251e:	2500      	movs	r5, #0
 8012520:	e106      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012522:	2c00      	cmp	r4, #0
 8012524:	f000 81e0 	beq.w	80128e8 <dwt_ioctl+0x1fc8>
 8012528:	2200      	movs	r2, #0
 801252a:	494e      	ldr	r1, [pc, #312]	; (8012664 <dwt_ioctl+0x1d44>)
 801252c:	f7fb fe77 	bl	800e21e <dwt_read32bitoffsetreg>
 8012530:	6020      	str	r0, [r4, #0]
 8012532:	2500      	movs	r5, #0
 8012534:	e0fc      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012536:	2c00      	cmp	r4, #0
 8012538:	f000 81d8 	beq.w	80128ec <dwt_ioctl+0x1fcc>
 801253c:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 8012540:	6023      	str	r3, [r4, #0]
 8012542:	2500      	movs	r5, #0
 8012544:	e0f4      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012546:	2c00      	cmp	r4, #0
 8012548:	f000 81d2 	beq.w	80128f0 <dwt_ioctl+0x1fd0>
 801254c:	2500      	movs	r5, #0
 801254e:	950a      	str	r5, [sp, #40]	; 0x28
 8012550:	af0c      	add	r7, sp, #48	; 0x30
 8012552:	2319      	movs	r3, #25
 8012554:	f847 3d04 	str.w	r3, [r7, #-4]!
 8012558:	9700      	str	r7, [sp, #0]
 801255a:	2304      	movs	r3, #4
 801255c:	462a      	mov	r2, r5
 801255e:	4942      	ldr	r1, [pc, #264]	; (8012668 <dwt_ioctl+0x1d48>)
 8012560:	f7fc fac6 	bl	800eaf0 <dwt_writetodevice>
 8012564:	f641 7348 	movw	r3, #8008	; 0x1f48
 8012568:	930b      	str	r3, [sp, #44]	; 0x2c
 801256a:	9700      	str	r7, [sp, #0]
 801256c:	2304      	movs	r3, #4
 801256e:	462a      	mov	r2, r5
 8012570:	493e      	ldr	r1, [pc, #248]	; (801266c <dwt_ioctl+0x1d4c>)
 8012572:	4630      	mov	r0, r6
 8012574:	f7fc fabc 	bl	800eaf0 <dwt_writetodevice>
 8012578:	ab0a      	add	r3, sp, #40	; 0x28
 801257a:	9300      	str	r3, [sp, #0]
 801257c:	2304      	movs	r3, #4
 801257e:	462a      	mov	r2, r5
 8012580:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8012584:	4630      	mov	r0, r6
 8012586:	f7fb fe40 	bl	800e20a <dwt_readfromdevice>
 801258a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801258c:	6023      	str	r3, [r4, #0]
 801258e:	e0cf      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012590:	2c00      	cmp	r4, #0
 8012592:	f000 81af 	beq.w	80128f4 <dwt_ioctl+0x1fd4>
 8012596:	2200      	movs	r2, #0
 8012598:	4935      	ldr	r1, [pc, #212]	; (8012670 <dwt_ioctl+0x1d50>)
 801259a:	f7fb fe40 	bl	800e21e <dwt_read32bitoffsetreg>
 801259e:	b280      	uxth	r0, r0
 80125a0:	6020      	str	r0, [r4, #0]
 80125a2:	2200      	movs	r2, #0
 80125a4:	4933      	ldr	r1, [pc, #204]	; (8012674 <dwt_ioctl+0x1d54>)
 80125a6:	4630      	mov	r0, r6
 80125a8:	f7fb fe39 	bl	800e21e <dwt_read32bitoffsetreg>
 80125ac:	0d43      	lsrs	r3, r0, #21
 80125ae:	019b      	lsls	r3, r3, #6
 80125b0:	b29b      	uxth	r3, r3
 80125b2:	6063      	str	r3, [r4, #4]
 80125b4:	2500      	movs	r5, #0
 80125b6:	e0bb      	b.n	8012730 <dwt_ioctl+0x1e10>
 80125b8:	2c00      	cmp	r4, #0
 80125ba:	f000 819d 	beq.w	80128f8 <dwt_ioctl+0x1fd8>
 80125be:	7d63      	ldrb	r3, [r4, #21]
 80125c0:	b133      	cbz	r3, 80125d0 <dwt_ioctl+0x1cb0>
 80125c2:	2b01      	cmp	r3, #1
 80125c4:	d062      	beq.n	801268c <dwt_ioctl+0x1d6c>
 80125c6:	2b02      	cmp	r3, #2
 80125c8:	f000 8089 	beq.w	80126de <dwt_ioctl+0x1dbe>
 80125cc:	23ff      	movs	r3, #255	; 0xff
 80125ce:	e02f      	b.n	8012630 <dwt_ioctl+0x1d10>
 80125d0:	2200      	movs	r2, #0
 80125d2:	4929      	ldr	r1, [pc, #164]	; (8012678 <dwt_ioctl+0x1d58>)
 80125d4:	f7fb fe23 	bl	800e21e <dwt_read32bitoffsetreg>
 80125d8:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80125dc:	6020      	str	r0, [r4, #0]
 80125de:	2200      	movs	r2, #0
 80125e0:	4926      	ldr	r1, [pc, #152]	; (801267c <dwt_ioctl+0x1d5c>)
 80125e2:	4630      	mov	r0, r6
 80125e4:	f7fb fe1b 	bl	800e21e <dwt_read32bitoffsetreg>
 80125e8:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80125ec:	6060      	str	r0, [r4, #4]
 80125ee:	2200      	movs	r2, #0
 80125f0:	4923      	ldr	r1, [pc, #140]	; (8012680 <dwt_ioctl+0x1d60>)
 80125f2:	4630      	mov	r0, r6
 80125f4:	f7fb fe13 	bl	800e21e <dwt_read32bitoffsetreg>
 80125f8:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80125fc:	60a0      	str	r0, [r4, #8]
 80125fe:	2200      	movs	r2, #0
 8012600:	4920      	ldr	r1, [pc, #128]	; (8012684 <dwt_ioctl+0x1d64>)
 8012602:	4630      	mov	r0, r6
 8012604:	f7fb fe0b 	bl	800e21e <dwt_read32bitoffsetreg>
 8012608:	f3c0 0015 	ubfx	r0, r0, #0, #22
 801260c:	60e0      	str	r0, [r4, #12]
 801260e:	2200      	movs	r2, #0
 8012610:	491d      	ldr	r1, [pc, #116]	; (8012688 <dwt_ioctl+0x1d68>)
 8012612:	4630      	mov	r0, r6
 8012614:	f7fb fe03 	bl	800e21e <dwt_read32bitoffsetreg>
 8012618:	f3c0 0013 	ubfx	r0, r0, #0, #20
 801261c:	6120      	str	r0, [r4, #16]
 801261e:	2203      	movs	r2, #3
 8012620:	490f      	ldr	r1, [pc, #60]	; (8012660 <dwt_ioctl+0x1d40>)
 8012622:	4630      	mov	r0, r6
 8012624:	f7fb fe50 	bl	800e2c8 <dwt_read8bitoffsetreg>
 8012628:	f3c0 1002 	ubfx	r0, r0, #4, #3
 801262c:	7520      	strb	r0, [r4, #20]
 801262e:	2300      	movs	r3, #0
 8012630:	75a3      	strb	r3, [r4, #22]
 8012632:	2500      	movs	r5, #0
 8012634:	e07c      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012636:	bf00      	nop
 8012638:	0011003c 	.word	0x0011003c
 801263c:	00110044 	.word	0x00110044
 8012640:	00110040 	.word	0x00110040
 8012644:	00070048 	.word	0x00070048
 8012648:	f7fc0fff 	.word	0xf7fc0fff
 801264c:	000f0028 	.word	0x000f0028
 8012650:	0007001c 	.word	0x0007001c
 8012654:	08016464 	.word	0x08016464
 8012658:	000e0014 	.word	0x000e0014
 801265c:	000e0018 	.word	0x000e0018
 8012660:	00030054 	.word	0x00030054
 8012664:	000f004c 	.word	0x000f004c
 8012668:	001f0004 	.word	0x001f0004
 801266c:	001f0008 	.word	0x001f0008
 8012670:	000c0048 	.word	0x000c0048
 8012674:	000c0028 	.word	0x000c0028
 8012678:	000c0058 	.word	0x000c0058
 801267c:	000c0030 	.word	0x000c0030
 8012680:	000c0034 	.word	0x000c0034
 8012684:	000c0038 	.word	0x000c0038
 8012688:	000c002c 	.word	0x000c002c
 801268c:	2200      	movs	r2, #0
 801268e:	49aa      	ldr	r1, [pc, #680]	; (8012938 <dwt_ioctl+0x2018>)
 8012690:	f7fb fdc5 	bl	800e21e <dwt_read32bitoffsetreg>
 8012694:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8012698:	6020      	str	r0, [r4, #0]
 801269a:	2200      	movs	r2, #0
 801269c:	49a7      	ldr	r1, [pc, #668]	; (801293c <dwt_ioctl+0x201c>)
 801269e:	4630      	mov	r0, r6
 80126a0:	f7fb fdbd 	bl	800e21e <dwt_read32bitoffsetreg>
 80126a4:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80126a8:	6060      	str	r0, [r4, #4]
 80126aa:	2200      	movs	r2, #0
 80126ac:	49a4      	ldr	r1, [pc, #656]	; (8012940 <dwt_ioctl+0x2020>)
 80126ae:	4630      	mov	r0, r6
 80126b0:	f7fb fdb5 	bl	800e21e <dwt_read32bitoffsetreg>
 80126b4:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80126b8:	60a0      	str	r0, [r4, #8]
 80126ba:	2200      	movs	r2, #0
 80126bc:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 80126c0:	4630      	mov	r0, r6
 80126c2:	f7fb fdac 	bl	800e21e <dwt_read32bitoffsetreg>
 80126c6:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80126ca:	60e0      	str	r0, [r4, #12]
 80126cc:	2200      	movs	r2, #0
 80126ce:	499d      	ldr	r1, [pc, #628]	; (8012944 <dwt_ioctl+0x2024>)
 80126d0:	4630      	mov	r0, r6
 80126d2:	f7fb fda4 	bl	800e21e <dwt_read32bitoffsetreg>
 80126d6:	f3c0 0013 	ubfx	r0, r0, #0, #20
 80126da:	6120      	str	r0, [r4, #16]
 80126dc:	e79f      	b.n	801261e <dwt_ioctl+0x1cfe>
 80126de:	2200      	movs	r2, #0
 80126e0:	4999      	ldr	r1, [pc, #612]	; (8012948 <dwt_ioctl+0x2028>)
 80126e2:	f7fb fd9c 	bl	800e21e <dwt_read32bitoffsetreg>
 80126e6:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80126ea:	6020      	str	r0, [r4, #0]
 80126ec:	2200      	movs	r2, #0
 80126ee:	4997      	ldr	r1, [pc, #604]	; (801294c <dwt_ioctl+0x202c>)
 80126f0:	4630      	mov	r0, r6
 80126f2:	f7fb fd94 	bl	800e21e <dwt_read32bitoffsetreg>
 80126f6:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80126fa:	6060      	str	r0, [r4, #4]
 80126fc:	2200      	movs	r2, #0
 80126fe:	4994      	ldr	r1, [pc, #592]	; (8012950 <dwt_ioctl+0x2030>)
 8012700:	4630      	mov	r0, r6
 8012702:	f7fb fd8c 	bl	800e21e <dwt_read32bitoffsetreg>
 8012706:	f3c0 0015 	ubfx	r0, r0, #0, #22
 801270a:	60a0      	str	r0, [r4, #8]
 801270c:	2200      	movs	r2, #0
 801270e:	4991      	ldr	r1, [pc, #580]	; (8012954 <dwt_ioctl+0x2034>)
 8012710:	4630      	mov	r0, r6
 8012712:	f7fb fd84 	bl	800e21e <dwt_read32bitoffsetreg>
 8012716:	f3c0 0015 	ubfx	r0, r0, #0, #22
 801271a:	60e0      	str	r0, [r4, #12]
 801271c:	2200      	movs	r2, #0
 801271e:	498e      	ldr	r1, [pc, #568]	; (8012958 <dwt_ioctl+0x2038>)
 8012720:	4630      	mov	r0, r6
 8012722:	f7fb fd7c 	bl	800e21e <dwt_read32bitoffsetreg>
 8012726:	f3c0 0013 	ubfx	r0, r0, #0, #20
 801272a:	6120      	str	r0, [r4, #16]
 801272c:	e777      	b.n	801261e <dwt_ioctl+0x1cfe>
 801272e:	2500      	movs	r5, #0
 8012730:	4628      	mov	r0, r5
 8012732:	b00d      	add	sp, #52	; 0x34
 8012734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012738:	2500      	movs	r5, #0
 801273a:	e7f9      	b.n	8012730 <dwt_ioctl+0x1e10>
 801273c:	2500      	movs	r5, #0
 801273e:	e7f7      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012740:	2500      	movs	r5, #0
 8012742:	e7f5      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012744:	2500      	movs	r5, #0
 8012746:	e7f3      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012748:	2500      	movs	r5, #0
 801274a:	e7f1      	b.n	8012730 <dwt_ioctl+0x1e10>
 801274c:	2500      	movs	r5, #0
 801274e:	e7ef      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012750:	2500      	movs	r5, #0
 8012752:	e7ed      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012754:	2500      	movs	r5, #0
 8012756:	e7eb      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012758:	2500      	movs	r5, #0
 801275a:	e7e9      	b.n	8012730 <dwt_ioctl+0x1e10>
 801275c:	2500      	movs	r5, #0
 801275e:	e7e7      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012760:	2500      	movs	r5, #0
 8012762:	e7e5      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012764:	2500      	movs	r5, #0
 8012766:	e7e3      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012768:	2500      	movs	r5, #0
 801276a:	e7e1      	b.n	8012730 <dwt_ioctl+0x1e10>
 801276c:	2500      	movs	r5, #0
 801276e:	e7df      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012770:	2500      	movs	r5, #0
 8012772:	e7dd      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012774:	2500      	movs	r5, #0
 8012776:	e7db      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012778:	2500      	movs	r5, #0
 801277a:	e7d9      	b.n	8012730 <dwt_ioctl+0x1e10>
 801277c:	2500      	movs	r5, #0
 801277e:	e7d7      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012780:	2500      	movs	r5, #0
 8012782:	e7d5      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012784:	2500      	movs	r5, #0
 8012786:	e7d3      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012788:	2500      	movs	r5, #0
 801278a:	e7d1      	b.n	8012730 <dwt_ioctl+0x1e10>
 801278c:	2500      	movs	r5, #0
 801278e:	e7cf      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012790:	2500      	movs	r5, #0
 8012792:	e7cd      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012794:	2500      	movs	r5, #0
 8012796:	e7cb      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012798:	2500      	movs	r5, #0
 801279a:	e7c9      	b.n	8012730 <dwt_ioctl+0x1e10>
 801279c:	2500      	movs	r5, #0
 801279e:	e7c7      	b.n	8012730 <dwt_ioctl+0x1e10>
 80127a0:	2500      	movs	r5, #0
 80127a2:	e7c5      	b.n	8012730 <dwt_ioctl+0x1e10>
 80127a4:	2500      	movs	r5, #0
 80127a6:	e7c3      	b.n	8012730 <dwt_ioctl+0x1e10>
 80127a8:	2500      	movs	r5, #0
 80127aa:	e7c1      	b.n	8012730 <dwt_ioctl+0x1e10>
 80127ac:	2500      	movs	r5, #0
 80127ae:	e7bf      	b.n	8012730 <dwt_ioctl+0x1e10>
 80127b0:	2500      	movs	r5, #0
 80127b2:	e7bd      	b.n	8012730 <dwt_ioctl+0x1e10>
 80127b4:	2500      	movs	r5, #0
 80127b6:	e7bb      	b.n	8012730 <dwt_ioctl+0x1e10>
 80127b8:	2500      	movs	r5, #0
 80127ba:	e7b9      	b.n	8012730 <dwt_ioctl+0x1e10>
 80127bc:	2500      	movs	r5, #0
 80127be:	e7b7      	b.n	8012730 <dwt_ioctl+0x1e10>
 80127c0:	2500      	movs	r5, #0
 80127c2:	e7b5      	b.n	8012730 <dwt_ioctl+0x1e10>
 80127c4:	2500      	movs	r5, #0
 80127c6:	e7b3      	b.n	8012730 <dwt_ioctl+0x1e10>
 80127c8:	2500      	movs	r5, #0
 80127ca:	e7b1      	b.n	8012730 <dwt_ioctl+0x1e10>
 80127cc:	2500      	movs	r5, #0
 80127ce:	e7af      	b.n	8012730 <dwt_ioctl+0x1e10>
 80127d0:	2500      	movs	r5, #0
 80127d2:	e7ad      	b.n	8012730 <dwt_ioctl+0x1e10>
 80127d4:	2500      	movs	r5, #0
 80127d6:	e7ab      	b.n	8012730 <dwt_ioctl+0x1e10>
 80127d8:	2500      	movs	r5, #0
 80127da:	e7a9      	b.n	8012730 <dwt_ioctl+0x1e10>
 80127dc:	2500      	movs	r5, #0
 80127de:	e7a7      	b.n	8012730 <dwt_ioctl+0x1e10>
 80127e0:	2500      	movs	r5, #0
 80127e2:	e7a5      	b.n	8012730 <dwt_ioctl+0x1e10>
 80127e4:	2500      	movs	r5, #0
 80127e6:	e7a3      	b.n	8012730 <dwt_ioctl+0x1e10>
 80127e8:	2500      	movs	r5, #0
 80127ea:	e7a1      	b.n	8012730 <dwt_ioctl+0x1e10>
 80127ec:	2500      	movs	r5, #0
 80127ee:	e79f      	b.n	8012730 <dwt_ioctl+0x1e10>
 80127f0:	2500      	movs	r5, #0
 80127f2:	e79d      	b.n	8012730 <dwt_ioctl+0x1e10>
 80127f4:	2500      	movs	r5, #0
 80127f6:	e79b      	b.n	8012730 <dwt_ioctl+0x1e10>
 80127f8:	2500      	movs	r5, #0
 80127fa:	e799      	b.n	8012730 <dwt_ioctl+0x1e10>
 80127fc:	2500      	movs	r5, #0
 80127fe:	e797      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012800:	2500      	movs	r5, #0
 8012802:	e795      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012804:	2500      	movs	r5, #0
 8012806:	e793      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012808:	2500      	movs	r5, #0
 801280a:	e791      	b.n	8012730 <dwt_ioctl+0x1e10>
 801280c:	2500      	movs	r5, #0
 801280e:	e78f      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012810:	2500      	movs	r5, #0
 8012812:	e78d      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012814:	2500      	movs	r5, #0
 8012816:	e78b      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012818:	2500      	movs	r5, #0
 801281a:	e789      	b.n	8012730 <dwt_ioctl+0x1e10>
 801281c:	2500      	movs	r5, #0
 801281e:	e787      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012820:	2500      	movs	r5, #0
 8012822:	e785      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012824:	2500      	movs	r5, #0
 8012826:	e783      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012828:	2500      	movs	r5, #0
 801282a:	e781      	b.n	8012730 <dwt_ioctl+0x1e10>
 801282c:	2500      	movs	r5, #0
 801282e:	e77f      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012830:	2500      	movs	r5, #0
 8012832:	e77d      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012834:	2500      	movs	r5, #0
 8012836:	e77b      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012838:	2500      	movs	r5, #0
 801283a:	e779      	b.n	8012730 <dwt_ioctl+0x1e10>
 801283c:	2500      	movs	r5, #0
 801283e:	e777      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012840:	2500      	movs	r5, #0
 8012842:	e775      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012844:	2500      	movs	r5, #0
 8012846:	e773      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012848:	2500      	movs	r5, #0
 801284a:	e771      	b.n	8012730 <dwt_ioctl+0x1e10>
 801284c:	2500      	movs	r5, #0
 801284e:	e76f      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012850:	2500      	movs	r5, #0
 8012852:	e76d      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012854:	2500      	movs	r5, #0
 8012856:	e76b      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012858:	2500      	movs	r5, #0
 801285a:	e769      	b.n	8012730 <dwt_ioctl+0x1e10>
 801285c:	2500      	movs	r5, #0
 801285e:	e767      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012860:	2500      	movs	r5, #0
 8012862:	e765      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012864:	2500      	movs	r5, #0
 8012866:	e763      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012868:	2500      	movs	r5, #0
 801286a:	e761      	b.n	8012730 <dwt_ioctl+0x1e10>
 801286c:	2500      	movs	r5, #0
 801286e:	e75f      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012870:	2500      	movs	r5, #0
 8012872:	e75d      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012874:	2500      	movs	r5, #0
 8012876:	e75b      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012878:	2500      	movs	r5, #0
 801287a:	e759      	b.n	8012730 <dwt_ioctl+0x1e10>
 801287c:	2500      	movs	r5, #0
 801287e:	e757      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012880:	2500      	movs	r5, #0
 8012882:	e755      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012884:	2500      	movs	r5, #0
 8012886:	e753      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012888:	2500      	movs	r5, #0
 801288a:	e751      	b.n	8012730 <dwt_ioctl+0x1e10>
 801288c:	2500      	movs	r5, #0
 801288e:	e74f      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012890:	2500      	movs	r5, #0
 8012892:	e74d      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012894:	2500      	movs	r5, #0
 8012896:	e74b      	b.n	8012730 <dwt_ioctl+0x1e10>
 8012898:	2500      	movs	r5, #0
 801289a:	e749      	b.n	8012730 <dwt_ioctl+0x1e10>
 801289c:	2500      	movs	r5, #0
 801289e:	e747      	b.n	8012730 <dwt_ioctl+0x1e10>
 80128a0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80128a4:	e744      	b.n	8012730 <dwt_ioctl+0x1e10>
 80128a6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80128aa:	e741      	b.n	8012730 <dwt_ioctl+0x1e10>
 80128ac:	2500      	movs	r5, #0
 80128ae:	e73f      	b.n	8012730 <dwt_ioctl+0x1e10>
 80128b0:	2500      	movs	r5, #0
 80128b2:	e73d      	b.n	8012730 <dwt_ioctl+0x1e10>
 80128b4:	2500      	movs	r5, #0
 80128b6:	e73b      	b.n	8012730 <dwt_ioctl+0x1e10>
 80128b8:	2500      	movs	r5, #0
 80128ba:	e739      	b.n	8012730 <dwt_ioctl+0x1e10>
 80128bc:	2500      	movs	r5, #0
 80128be:	e737      	b.n	8012730 <dwt_ioctl+0x1e10>
 80128c0:	2500      	movs	r5, #0
 80128c2:	e735      	b.n	8012730 <dwt_ioctl+0x1e10>
 80128c4:	2500      	movs	r5, #0
 80128c6:	e733      	b.n	8012730 <dwt_ioctl+0x1e10>
 80128c8:	2500      	movs	r5, #0
 80128ca:	e731      	b.n	8012730 <dwt_ioctl+0x1e10>
 80128cc:	2500      	movs	r5, #0
 80128ce:	e72f      	b.n	8012730 <dwt_ioctl+0x1e10>
 80128d0:	2500      	movs	r5, #0
 80128d2:	e72d      	b.n	8012730 <dwt_ioctl+0x1e10>
 80128d4:	2500      	movs	r5, #0
 80128d6:	e72b      	b.n	8012730 <dwt_ioctl+0x1e10>
 80128d8:	2500      	movs	r5, #0
 80128da:	e729      	b.n	8012730 <dwt_ioctl+0x1e10>
 80128dc:	2500      	movs	r5, #0
 80128de:	e727      	b.n	8012730 <dwt_ioctl+0x1e10>
 80128e0:	2500      	movs	r5, #0
 80128e2:	e725      	b.n	8012730 <dwt_ioctl+0x1e10>
 80128e4:	2500      	movs	r5, #0
 80128e6:	e723      	b.n	8012730 <dwt_ioctl+0x1e10>
 80128e8:	2500      	movs	r5, #0
 80128ea:	e721      	b.n	8012730 <dwt_ioctl+0x1e10>
 80128ec:	2500      	movs	r5, #0
 80128ee:	e71f      	b.n	8012730 <dwt_ioctl+0x1e10>
 80128f0:	2500      	movs	r5, #0
 80128f2:	e71d      	b.n	8012730 <dwt_ioctl+0x1e10>
 80128f4:	2500      	movs	r5, #0
 80128f6:	e71b      	b.n	8012730 <dwt_ioctl+0x1e10>
 80128f8:	2500      	movs	r5, #0
 80128fa:	e719      	b.n	8012730 <dwt_ioctl+0x1e10>
 80128fc:	f899 3011 	ldrb.w	r3, [r9, #17]
 8012900:	1e5a      	subs	r2, r3, #1
 8012902:	b2d2      	uxtb	r2, r2
 8012904:	2a01      	cmp	r2, #1
 8012906:	f67e ae60 	bls.w	80115ca <dwt_ioctl+0xcaa>
 801290a:	2202      	movs	r2, #2
 801290c:	f7fe be07 	b.w	801151e <dwt_ioctl+0xbfe>
 8012910:	4d12      	ldr	r5, [pc, #72]	; (801295c <dwt_ioctl+0x203c>)
 8012912:	e57c      	b.n	801240e <dwt_ioctl+0x1aee>
 8012914:	2400      	movs	r4, #0
 8012916:	9400      	str	r4, [sp, #0]
 8012918:	f06f 73c0 	mvn.w	r3, #25165824	; 0x1800000
 801291c:	4622      	mov	r2, r4
 801291e:	2110      	movs	r1, #16
 8012920:	f7fc fe62 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 8012924:	9400      	str	r4, [sp, #0]
 8012926:	4b0e      	ldr	r3, [pc, #56]	; (8012960 <dwt_ioctl+0x2040>)
 8012928:	4622      	mov	r2, r4
 801292a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801292e:	4630      	mov	r0, r6
 8012930:	f7fc fe5a 	bl	800f5e8 <dwt_modify32bitoffsetreg>
 8012934:	e57e      	b.n	8012434 <dwt_ioctl+0x1b14>
 8012936:	bf00      	nop
 8012938:	000d0020 	.word	0x000d0020
 801293c:	000c0064 	.word	0x000c0064
 8012940:	000c0068 	.word	0x000c0068
 8012944:	000c0060 	.word	0x000c0060
 8012948:	000d0068 	.word	0x000d0068
 801294c:	000d0040 	.word	0x000d0040
 8012950:	000d0044 	.word	0x000d0044
 8012954:	000d0048 	.word	0x000d0048
 8012958:	000d003c 	.word	0x000d003c
 801295c:	08001000 	.word	0x08001000
 8012960:	f7fc0fff 	.word	0xf7fc0fff

08012964 <_init>:
 8012964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012966:	b085      	sub	sp, #20
 8012968:	4604      	mov	r4, r0
 801296a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801296c:	6819      	ldr	r1, [r3, #0]
 801296e:	f7fd fea1 	bl	80106b4 <ull_initialise>
 8012972:	4606      	mov	r6, r0
 8012974:	6823      	ldr	r3, [r4, #0]
 8012976:	691b      	ldr	r3, [r3, #16]
 8012978:	4798      	blx	r3
 801297a:	ab03      	add	r3, sp, #12
 801297c:	2200      	movs	r2, #0
 801297e:	4611      	mov	r1, r2
 8012980:	4620      	mov	r0, r4
 8012982:	f7fd ffcd 	bl	8010920 <dwt_ioctl>
 8012986:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801298a:	6819      	ldr	r1, [r3, #0]
 801298c:	4620      	mov	r0, r4
 801298e:	f7fd fc43 	bl	8010218 <ull_configure>
 8012992:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012996:	6859      	ldr	r1, [r3, #4]
 8012998:	4620      	mov	r0, r4
 801299a:	f7fd f993 	bl	800fcc4 <ull_configuretxrf>
 801299e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80129a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129a2:	89d9      	ldrh	r1, [r3, #14]
 80129a4:	4620      	mov	r0, r4
 80129a6:	f7fc f8be 	bl	800eb26 <ull_setrxantennadelay>
 80129aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80129ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129ae:	8999      	ldrh	r1, [r3, #12]
 80129b0:	4620      	mov	r0, r4
 80129b2:	f7fc f8c0 	bl	800eb36 <ull_settxantennadelay>
 80129b6:	2100      	movs	r1, #0
 80129b8:	4620      	mov	r0, r4
 80129ba:	f7fc f94a 	bl	800ec52 <ull_setrxaftertxdelay>
 80129be:	2500      	movs	r5, #0
 80129c0:	9500      	str	r5, [sp, #0]
 80129c2:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 80129c6:	462a      	mov	r2, r5
 80129c8:	2110      	movs	r1, #16
 80129ca:	4620      	mov	r0, r4
 80129cc:	f7fd fb0c 	bl	800ffe8 <dwt_modify16bitoffsetreg>
 80129d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80129d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129d4:	895a      	ldrh	r2, [r3, #10]
 80129d6:	8919      	ldrh	r1, [r3, #8]
 80129d8:	4620      	mov	r0, r4
 80129da:	f7fd fa03 	bl	800fde4 <ull_configureframefilter>
 80129de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80129e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129e2:	8a1b      	ldrh	r3, [r3, #16]
 80129e4:	2202      	movs	r2, #2
 80129e6:	210c      	movs	r1, #12
 80129e8:	4620      	mov	r0, r4
 80129ea:	f7fc f88c 	bl	800eb06 <dwt_write16bitoffsetreg>
 80129ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80129f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129f2:	8a5b      	ldrh	r3, [r3, #18]
 80129f4:	462a      	mov	r2, r5
 80129f6:	210c      	movs	r1, #12
 80129f8:	4620      	mov	r0, r4
 80129fa:	f7fc f884 	bl	800eb06 <dwt_write16bitoffsetreg>
 80129fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012a00:	7a19      	ldrb	r1, [r3, #8]
 8012a02:	4620      	mov	r0, r4
 8012a04:	f7fd fb2e 	bl	8010064 <ull_setleds>
 8012a08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012a0a:	68d9      	ldr	r1, [r3, #12]
 8012a0c:	4620      	mov	r0, r4
 8012a0e:	f7fc f949 	bl	800eca4 <ull_setlnapamode>
 8012a12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012a14:	7e0b      	ldrb	r3, [r1, #24]
 8012a16:	694a      	ldr	r2, [r1, #20]
 8012a18:	6909      	ldr	r1, [r1, #16]
 8012a1a:	4620      	mov	r0, r4
 8012a1c:	f7fd fa68 	bl	800fef0 <ull_setinterrupt>
 8012a20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012a22:	7f9a      	ldrb	r2, [r3, #30]
 8012a24:	8b99      	ldrh	r1, [r3, #28]
 8012a26:	4620      	mov	r0, r4
 8012a28:	f7fc fb90 	bl	800f14c <ull_configuresleep>
 8012a2c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8012a2e:	7b53      	ldrb	r3, [r2, #13]
 8012a30:	2b2e      	cmp	r3, #46	; 0x2e
 8012a32:	d005      	beq.n	8012a40 <_init+0xdc>
 8012a34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012a36:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012a3a:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 8012a3e:	d00a      	beq.n	8012a56 <_init+0xf2>
 8012a40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012a42:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012a46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012a4a:	7353      	strb	r3, [r2, #13]
 8012a4c:	2200      	movs	r2, #0
 8012a4e:	4928      	ldr	r1, [pc, #160]	; (8012af0 <_init+0x18c>)
 8012a50:	4620      	mov	r0, r4
 8012a52:	f7fc faa7 	bl	800efa4 <dwt_write8bitoffsetreg>
 8012a56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012a58:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 8012a5c:	4620      	mov	r0, r4
 8012a5e:	f7fc ff63 	bl	800f928 <ull_configciadiag>
 8012a62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012a64:	6a19      	ldr	r1, [r3, #32]
 8012a66:	4620      	mov	r0, r4
 8012a68:	f7fc f93c 	bl	800ece4 <ull_configurestskey>
 8012a6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012a6e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8012a70:	4620      	mov	r0, r4
 8012a72:	f7fc f95b 	bl	800ed2c <ull_configurestsiv>
 8012a76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012a78:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8012a7c:	bb9b      	cbnz	r3, 8012ae6 <_init+0x182>
 8012a7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012a80:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8012a84:	4620      	mov	r0, r4
 8012a86:	f7fc fb05 	bl	800f094 <ull_configeventcounters>
 8012a8a:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
 8012a8e:	2d00      	cmp	r5, #0
 8012a90:	db26      	blt.n	8012ae0 <_init+0x17c>
 8012a92:	2301      	movs	r3, #1
 8012a94:	fa03 f505 	lsl.w	r5, r3, r5
 8012a98:	b2af      	uxth	r7, r5
 8012a9a:	4a16      	ldr	r2, [pc, #88]	; (8012af4 <_init+0x190>)
 8012a9c:	4639      	mov	r1, r7
 8012a9e:	4620      	mov	r0, r4
 8012aa0:	f7fc fed4 	bl	800f84c <ull_setgpiomode>
 8012aa4:	f10d 030a 	add.w	r3, sp, #10
 8012aa8:	9300      	str	r3, [sp, #0]
 8012aaa:	2302      	movs	r3, #2
 8012aac:	2200      	movs	r2, #0
 8012aae:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8012ab2:	4620      	mov	r0, r4
 8012ab4:	f7fb fba9 	bl	800e20a <dwt_readfromdevice>
 8012ab8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8012abc:	ea23 0305 	bic.w	r3, r3, r5
 8012ac0:	f8ad 300a 	strh.w	r3, [sp, #10]
 8012ac4:	2200      	movs	r2, #0
 8012ac6:	490c      	ldr	r1, [pc, #48]	; (8012af8 <_init+0x194>)
 8012ac8:	4620      	mov	r0, r4
 8012aca:	f7fc f81c 	bl	800eb06 <dwt_write16bitoffsetreg>
 8012ace:	f994 204d 	ldrsb.w	r2, [r4, #77]	; 0x4d
 8012ad2:	fab2 f282 	clz	r2, r2
 8012ad6:	0952      	lsrs	r2, r2, #5
 8012ad8:	4639      	mov	r1, r7
 8012ada:	4620      	mov	r0, r4
 8012adc:	f7fd fb40 	bl	8010160 <ull_setgpiovalue>
 8012ae0:	4630      	mov	r0, r6
 8012ae2:	b005      	add	sp, #20
 8012ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ae6:	4620      	mov	r0, r4
 8012ae8:	f7fc ff54 	bl	800f994 <ull_configurestsloadiv>
 8012aec:	e7c7      	b.n	8012a7e <_init+0x11a>
 8012aee:	bf00      	nop
 8012af0:	00090014 	.word	0x00090014
 8012af4:	01200492 	.word	0x01200492
 8012af8:	00050008 	.word	0x00050008

08012afc <__register_exitproc>:
 8012afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b00:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8012bbc <__register_exitproc+0xc0>
 8012b04:	4606      	mov	r6, r0
 8012b06:	f8d8 0000 	ldr.w	r0, [r8]
 8012b0a:	461f      	mov	r7, r3
 8012b0c:	460d      	mov	r5, r1
 8012b0e:	4691      	mov	r9, r2
 8012b10:	f001 f93b 	bl	8013d8a <__retarget_lock_acquire_recursive>
 8012b14:	4b25      	ldr	r3, [pc, #148]	; (8012bac <__register_exitproc+0xb0>)
 8012b16:	681c      	ldr	r4, [r3, #0]
 8012b18:	b934      	cbnz	r4, 8012b28 <__register_exitproc+0x2c>
 8012b1a:	4c25      	ldr	r4, [pc, #148]	; (8012bb0 <__register_exitproc+0xb4>)
 8012b1c:	601c      	str	r4, [r3, #0]
 8012b1e:	4b25      	ldr	r3, [pc, #148]	; (8012bb4 <__register_exitproc+0xb8>)
 8012b20:	b113      	cbz	r3, 8012b28 <__register_exitproc+0x2c>
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8012b28:	6863      	ldr	r3, [r4, #4]
 8012b2a:	2b1f      	cmp	r3, #31
 8012b2c:	dd07      	ble.n	8012b3e <__register_exitproc+0x42>
 8012b2e:	f8d8 0000 	ldr.w	r0, [r8]
 8012b32:	f001 f92c 	bl	8013d8e <__retarget_lock_release_recursive>
 8012b36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b3e:	b34e      	cbz	r6, 8012b94 <__register_exitproc+0x98>
 8012b40:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8012b44:	b988      	cbnz	r0, 8012b6a <__register_exitproc+0x6e>
 8012b46:	4b1c      	ldr	r3, [pc, #112]	; (8012bb8 <__register_exitproc+0xbc>)
 8012b48:	b923      	cbnz	r3, 8012b54 <__register_exitproc+0x58>
 8012b4a:	f8d8 0000 	ldr.w	r0, [r8]
 8012b4e:	f001 f91d 	bl	8013d8c <__retarget_lock_release>
 8012b52:	e7f0      	b.n	8012b36 <__register_exitproc+0x3a>
 8012b54:	f44f 7084 	mov.w	r0, #264	; 0x108
 8012b58:	f001 f992 	bl	8013e80 <malloc>
 8012b5c:	2800      	cmp	r0, #0
 8012b5e:	d0f4      	beq.n	8012b4a <__register_exitproc+0x4e>
 8012b60:	2300      	movs	r3, #0
 8012b62:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8012b66:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8012b6a:	6863      	ldr	r3, [r4, #4]
 8012b6c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8012b70:	2201      	movs	r2, #1
 8012b72:	409a      	lsls	r2, r3
 8012b74:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8012b78:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8012b7c:	4313      	orrs	r3, r2
 8012b7e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8012b82:	2e02      	cmp	r6, #2
 8012b84:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8012b88:	bf02      	ittt	eq
 8012b8a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8012b8e:	4313      	orreq	r3, r2
 8012b90:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8012b94:	6863      	ldr	r3, [r4, #4]
 8012b96:	f8d8 0000 	ldr.w	r0, [r8]
 8012b9a:	1c5a      	adds	r2, r3, #1
 8012b9c:	3302      	adds	r3, #2
 8012b9e:	6062      	str	r2, [r4, #4]
 8012ba0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8012ba4:	f001 f8f3 	bl	8013d8e <__retarget_lock_release_recursive>
 8012ba8:	2000      	movs	r0, #0
 8012baa:	e7c6      	b.n	8012b3a <__register_exitproc+0x3e>
 8012bac:	20000510 	.word	0x20000510
 8012bb0:	20000484 	.word	0x20000484
 8012bb4:	08016850 	.word	0x08016850
 8012bb8:	08013e81 	.word	0x08013e81
 8012bbc:	2000005c 	.word	0x2000005c

08012bc0 <abort>:
 8012bc0:	b508      	push	{r3, lr}
 8012bc2:	2006      	movs	r0, #6
 8012bc4:	f002 fddc 	bl	8015780 <raise>
 8012bc8:	2001      	movs	r0, #1
 8012bca:	f7ef fca3 	bl	8002514 <_exit>
	...

08012bd0 <__assert_func>:
 8012bd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012bd2:	4614      	mov	r4, r2
 8012bd4:	461a      	mov	r2, r3
 8012bd6:	4b09      	ldr	r3, [pc, #36]	; (8012bfc <__assert_func+0x2c>)
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	4605      	mov	r5, r0
 8012bdc:	68d8      	ldr	r0, [r3, #12]
 8012bde:	b14c      	cbz	r4, 8012bf4 <__assert_func+0x24>
 8012be0:	4b07      	ldr	r3, [pc, #28]	; (8012c00 <__assert_func+0x30>)
 8012be2:	9100      	str	r1, [sp, #0]
 8012be4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012be8:	4906      	ldr	r1, [pc, #24]	; (8012c04 <__assert_func+0x34>)
 8012bea:	462b      	mov	r3, r5
 8012bec:	f001 f850 	bl	8013c90 <fiprintf>
 8012bf0:	f7ff ffe6 	bl	8012bc0 <abort>
 8012bf4:	4b04      	ldr	r3, [pc, #16]	; (8012c08 <__assert_func+0x38>)
 8012bf6:	461c      	mov	r4, r3
 8012bf8:	e7f3      	b.n	8012be2 <__assert_func+0x12>
 8012bfa:	bf00      	nop
 8012bfc:	20000060 	.word	0x20000060
 8012c00:	08016472 	.word	0x08016472
 8012c04:	0801647f 	.word	0x0801647f
 8012c08:	080164ad 	.word	0x080164ad

08012c0c <atexit>:
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	4601      	mov	r1, r0
 8012c10:	461a      	mov	r2, r3
 8012c12:	4618      	mov	r0, r3
 8012c14:	f7ff bf72 	b.w	8012afc <__register_exitproc>

08012c18 <_close_r>:
 8012c18:	b538      	push	{r3, r4, r5, lr}
 8012c1a:	4d06      	ldr	r5, [pc, #24]	; (8012c34 <_close_r+0x1c>)
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	4604      	mov	r4, r0
 8012c20:	4608      	mov	r0, r1
 8012c22:	602b      	str	r3, [r5, #0]
 8012c24:	f7ef fc80 	bl	8002528 <_close>
 8012c28:	1c43      	adds	r3, r0, #1
 8012c2a:	d102      	bne.n	8012c32 <_close_r+0x1a>
 8012c2c:	682b      	ldr	r3, [r5, #0]
 8012c2e:	b103      	cbz	r3, 8012c32 <_close_r+0x1a>
 8012c30:	6023      	str	r3, [r4, #0]
 8012c32:	bd38      	pop	{r3, r4, r5, pc}
 8012c34:	20000628 	.word	0x20000628

08012c38 <quorem>:
 8012c38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c3c:	6903      	ldr	r3, [r0, #16]
 8012c3e:	690c      	ldr	r4, [r1, #16]
 8012c40:	42a3      	cmp	r3, r4
 8012c42:	4607      	mov	r7, r0
 8012c44:	f2c0 8081 	blt.w	8012d4a <quorem+0x112>
 8012c48:	3c01      	subs	r4, #1
 8012c4a:	f101 0814 	add.w	r8, r1, #20
 8012c4e:	f100 0514 	add.w	r5, r0, #20
 8012c52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012c56:	9301      	str	r3, [sp, #4]
 8012c58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012c5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012c60:	3301      	adds	r3, #1
 8012c62:	429a      	cmp	r2, r3
 8012c64:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012c68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012c6c:	fbb2 f6f3 	udiv	r6, r2, r3
 8012c70:	d331      	bcc.n	8012cd6 <quorem+0x9e>
 8012c72:	f04f 0e00 	mov.w	lr, #0
 8012c76:	4640      	mov	r0, r8
 8012c78:	46ac      	mov	ip, r5
 8012c7a:	46f2      	mov	sl, lr
 8012c7c:	f850 2b04 	ldr.w	r2, [r0], #4
 8012c80:	b293      	uxth	r3, r2
 8012c82:	fb06 e303 	mla	r3, r6, r3, lr
 8012c86:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012c8a:	b29b      	uxth	r3, r3
 8012c8c:	ebaa 0303 	sub.w	r3, sl, r3
 8012c90:	f8dc a000 	ldr.w	sl, [ip]
 8012c94:	0c12      	lsrs	r2, r2, #16
 8012c96:	fa13 f38a 	uxtah	r3, r3, sl
 8012c9a:	fb06 e202 	mla	r2, r6, r2, lr
 8012c9e:	9300      	str	r3, [sp, #0]
 8012ca0:	9b00      	ldr	r3, [sp, #0]
 8012ca2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012ca6:	b292      	uxth	r2, r2
 8012ca8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012cac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012cb0:	f8bd 3000 	ldrh.w	r3, [sp]
 8012cb4:	4581      	cmp	r9, r0
 8012cb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012cba:	f84c 3b04 	str.w	r3, [ip], #4
 8012cbe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012cc2:	d2db      	bcs.n	8012c7c <quorem+0x44>
 8012cc4:	f855 300b 	ldr.w	r3, [r5, fp]
 8012cc8:	b92b      	cbnz	r3, 8012cd6 <quorem+0x9e>
 8012cca:	9b01      	ldr	r3, [sp, #4]
 8012ccc:	3b04      	subs	r3, #4
 8012cce:	429d      	cmp	r5, r3
 8012cd0:	461a      	mov	r2, r3
 8012cd2:	d32e      	bcc.n	8012d32 <quorem+0xfa>
 8012cd4:	613c      	str	r4, [r7, #16]
 8012cd6:	4638      	mov	r0, r7
 8012cd8:	f001 fbba 	bl	8014450 <__mcmp>
 8012cdc:	2800      	cmp	r0, #0
 8012cde:	db24      	blt.n	8012d2a <quorem+0xf2>
 8012ce0:	3601      	adds	r6, #1
 8012ce2:	4628      	mov	r0, r5
 8012ce4:	f04f 0c00 	mov.w	ip, #0
 8012ce8:	f858 2b04 	ldr.w	r2, [r8], #4
 8012cec:	f8d0 e000 	ldr.w	lr, [r0]
 8012cf0:	b293      	uxth	r3, r2
 8012cf2:	ebac 0303 	sub.w	r3, ip, r3
 8012cf6:	0c12      	lsrs	r2, r2, #16
 8012cf8:	fa13 f38e 	uxtah	r3, r3, lr
 8012cfc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012d00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012d04:	b29b      	uxth	r3, r3
 8012d06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012d0a:	45c1      	cmp	r9, r8
 8012d0c:	f840 3b04 	str.w	r3, [r0], #4
 8012d10:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012d14:	d2e8      	bcs.n	8012ce8 <quorem+0xb0>
 8012d16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012d1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012d1e:	b922      	cbnz	r2, 8012d2a <quorem+0xf2>
 8012d20:	3b04      	subs	r3, #4
 8012d22:	429d      	cmp	r5, r3
 8012d24:	461a      	mov	r2, r3
 8012d26:	d30a      	bcc.n	8012d3e <quorem+0x106>
 8012d28:	613c      	str	r4, [r7, #16]
 8012d2a:	4630      	mov	r0, r6
 8012d2c:	b003      	add	sp, #12
 8012d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d32:	6812      	ldr	r2, [r2, #0]
 8012d34:	3b04      	subs	r3, #4
 8012d36:	2a00      	cmp	r2, #0
 8012d38:	d1cc      	bne.n	8012cd4 <quorem+0x9c>
 8012d3a:	3c01      	subs	r4, #1
 8012d3c:	e7c7      	b.n	8012cce <quorem+0x96>
 8012d3e:	6812      	ldr	r2, [r2, #0]
 8012d40:	3b04      	subs	r3, #4
 8012d42:	2a00      	cmp	r2, #0
 8012d44:	d1f0      	bne.n	8012d28 <quorem+0xf0>
 8012d46:	3c01      	subs	r4, #1
 8012d48:	e7eb      	b.n	8012d22 <quorem+0xea>
 8012d4a:	2000      	movs	r0, #0
 8012d4c:	e7ee      	b.n	8012d2c <quorem+0xf4>
	...

08012d50 <_dtoa_r>:
 8012d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d54:	ed2d 8b04 	vpush	{d8-d9}
 8012d58:	ec57 6b10 	vmov	r6, r7, d0
 8012d5c:	b093      	sub	sp, #76	; 0x4c
 8012d5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012d60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012d64:	9106      	str	r1, [sp, #24]
 8012d66:	ee10 aa10 	vmov	sl, s0
 8012d6a:	4604      	mov	r4, r0
 8012d6c:	9209      	str	r2, [sp, #36]	; 0x24
 8012d6e:	930c      	str	r3, [sp, #48]	; 0x30
 8012d70:	46bb      	mov	fp, r7
 8012d72:	b975      	cbnz	r5, 8012d92 <_dtoa_r+0x42>
 8012d74:	2010      	movs	r0, #16
 8012d76:	f001 f883 	bl	8013e80 <malloc>
 8012d7a:	4602      	mov	r2, r0
 8012d7c:	6260      	str	r0, [r4, #36]	; 0x24
 8012d7e:	b920      	cbnz	r0, 8012d8a <_dtoa_r+0x3a>
 8012d80:	4ba7      	ldr	r3, [pc, #668]	; (8013020 <_dtoa_r+0x2d0>)
 8012d82:	21ea      	movs	r1, #234	; 0xea
 8012d84:	48a7      	ldr	r0, [pc, #668]	; (8013024 <_dtoa_r+0x2d4>)
 8012d86:	f7ff ff23 	bl	8012bd0 <__assert_func>
 8012d8a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012d8e:	6005      	str	r5, [r0, #0]
 8012d90:	60c5      	str	r5, [r0, #12]
 8012d92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d94:	6819      	ldr	r1, [r3, #0]
 8012d96:	b151      	cbz	r1, 8012dae <_dtoa_r+0x5e>
 8012d98:	685a      	ldr	r2, [r3, #4]
 8012d9a:	604a      	str	r2, [r1, #4]
 8012d9c:	2301      	movs	r3, #1
 8012d9e:	4093      	lsls	r3, r2
 8012da0:	608b      	str	r3, [r1, #8]
 8012da2:	4620      	mov	r0, r4
 8012da4:	f001 f912 	bl	8013fcc <_Bfree>
 8012da8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012daa:	2200      	movs	r2, #0
 8012dac:	601a      	str	r2, [r3, #0]
 8012dae:	1e3b      	subs	r3, r7, #0
 8012db0:	bfaa      	itet	ge
 8012db2:	2300      	movge	r3, #0
 8012db4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8012db8:	f8c8 3000 	strge.w	r3, [r8]
 8012dbc:	4b9a      	ldr	r3, [pc, #616]	; (8013028 <_dtoa_r+0x2d8>)
 8012dbe:	bfbc      	itt	lt
 8012dc0:	2201      	movlt	r2, #1
 8012dc2:	f8c8 2000 	strlt.w	r2, [r8]
 8012dc6:	ea33 030b 	bics.w	r3, r3, fp
 8012dca:	d11b      	bne.n	8012e04 <_dtoa_r+0xb4>
 8012dcc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012dce:	f242 730f 	movw	r3, #9999	; 0x270f
 8012dd2:	6013      	str	r3, [r2, #0]
 8012dd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012dd8:	4333      	orrs	r3, r6
 8012dda:	f000 8592 	beq.w	8013902 <_dtoa_r+0xbb2>
 8012dde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012de0:	b963      	cbnz	r3, 8012dfc <_dtoa_r+0xac>
 8012de2:	4b92      	ldr	r3, [pc, #584]	; (801302c <_dtoa_r+0x2dc>)
 8012de4:	e022      	b.n	8012e2c <_dtoa_r+0xdc>
 8012de6:	4b92      	ldr	r3, [pc, #584]	; (8013030 <_dtoa_r+0x2e0>)
 8012de8:	9301      	str	r3, [sp, #4]
 8012dea:	3308      	adds	r3, #8
 8012dec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012dee:	6013      	str	r3, [r2, #0]
 8012df0:	9801      	ldr	r0, [sp, #4]
 8012df2:	b013      	add	sp, #76	; 0x4c
 8012df4:	ecbd 8b04 	vpop	{d8-d9}
 8012df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dfc:	4b8b      	ldr	r3, [pc, #556]	; (801302c <_dtoa_r+0x2dc>)
 8012dfe:	9301      	str	r3, [sp, #4]
 8012e00:	3303      	adds	r3, #3
 8012e02:	e7f3      	b.n	8012dec <_dtoa_r+0x9c>
 8012e04:	2200      	movs	r2, #0
 8012e06:	2300      	movs	r3, #0
 8012e08:	4650      	mov	r0, sl
 8012e0a:	4659      	mov	r1, fp
 8012e0c:	f7ed fe96 	bl	8000b3c <__aeabi_dcmpeq>
 8012e10:	ec4b ab19 	vmov	d9, sl, fp
 8012e14:	4680      	mov	r8, r0
 8012e16:	b158      	cbz	r0, 8012e30 <_dtoa_r+0xe0>
 8012e18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012e1a:	2301      	movs	r3, #1
 8012e1c:	6013      	str	r3, [r2, #0]
 8012e1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	f000 856b 	beq.w	80138fc <_dtoa_r+0xbac>
 8012e26:	4883      	ldr	r0, [pc, #524]	; (8013034 <_dtoa_r+0x2e4>)
 8012e28:	6018      	str	r0, [r3, #0]
 8012e2a:	1e43      	subs	r3, r0, #1
 8012e2c:	9301      	str	r3, [sp, #4]
 8012e2e:	e7df      	b.n	8012df0 <_dtoa_r+0xa0>
 8012e30:	ec4b ab10 	vmov	d0, sl, fp
 8012e34:	aa10      	add	r2, sp, #64	; 0x40
 8012e36:	a911      	add	r1, sp, #68	; 0x44
 8012e38:	4620      	mov	r0, r4
 8012e3a:	f001 fbaf 	bl	801459c <__d2b>
 8012e3e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8012e42:	ee08 0a10 	vmov	s16, r0
 8012e46:	2d00      	cmp	r5, #0
 8012e48:	f000 8084 	beq.w	8012f54 <_dtoa_r+0x204>
 8012e4c:	ee19 3a90 	vmov	r3, s19
 8012e50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012e54:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012e58:	4656      	mov	r6, sl
 8012e5a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8012e5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012e62:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8012e66:	4b74      	ldr	r3, [pc, #464]	; (8013038 <_dtoa_r+0x2e8>)
 8012e68:	2200      	movs	r2, #0
 8012e6a:	4630      	mov	r0, r6
 8012e6c:	4639      	mov	r1, r7
 8012e6e:	f7ed fa45 	bl	80002fc <__aeabi_dsub>
 8012e72:	a365      	add	r3, pc, #404	; (adr r3, 8013008 <_dtoa_r+0x2b8>)
 8012e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e78:	f7ed fbf8 	bl	800066c <__aeabi_dmul>
 8012e7c:	a364      	add	r3, pc, #400	; (adr r3, 8013010 <_dtoa_r+0x2c0>)
 8012e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e82:	f7ed fa3d 	bl	8000300 <__adddf3>
 8012e86:	4606      	mov	r6, r0
 8012e88:	4628      	mov	r0, r5
 8012e8a:	460f      	mov	r7, r1
 8012e8c:	f7ed fb84 	bl	8000598 <__aeabi_i2d>
 8012e90:	a361      	add	r3, pc, #388	; (adr r3, 8013018 <_dtoa_r+0x2c8>)
 8012e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e96:	f7ed fbe9 	bl	800066c <__aeabi_dmul>
 8012e9a:	4602      	mov	r2, r0
 8012e9c:	460b      	mov	r3, r1
 8012e9e:	4630      	mov	r0, r6
 8012ea0:	4639      	mov	r1, r7
 8012ea2:	f7ed fa2d 	bl	8000300 <__adddf3>
 8012ea6:	4606      	mov	r6, r0
 8012ea8:	460f      	mov	r7, r1
 8012eaa:	f7ed fe8f 	bl	8000bcc <__aeabi_d2iz>
 8012eae:	2200      	movs	r2, #0
 8012eb0:	9000      	str	r0, [sp, #0]
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	4630      	mov	r0, r6
 8012eb6:	4639      	mov	r1, r7
 8012eb8:	f7ed fe4a 	bl	8000b50 <__aeabi_dcmplt>
 8012ebc:	b150      	cbz	r0, 8012ed4 <_dtoa_r+0x184>
 8012ebe:	9800      	ldr	r0, [sp, #0]
 8012ec0:	f7ed fb6a 	bl	8000598 <__aeabi_i2d>
 8012ec4:	4632      	mov	r2, r6
 8012ec6:	463b      	mov	r3, r7
 8012ec8:	f7ed fe38 	bl	8000b3c <__aeabi_dcmpeq>
 8012ecc:	b910      	cbnz	r0, 8012ed4 <_dtoa_r+0x184>
 8012ece:	9b00      	ldr	r3, [sp, #0]
 8012ed0:	3b01      	subs	r3, #1
 8012ed2:	9300      	str	r3, [sp, #0]
 8012ed4:	9b00      	ldr	r3, [sp, #0]
 8012ed6:	2b16      	cmp	r3, #22
 8012ed8:	d85a      	bhi.n	8012f90 <_dtoa_r+0x240>
 8012eda:	9a00      	ldr	r2, [sp, #0]
 8012edc:	4b57      	ldr	r3, [pc, #348]	; (801303c <_dtoa_r+0x2ec>)
 8012ede:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ee6:	ec51 0b19 	vmov	r0, r1, d9
 8012eea:	f7ed fe31 	bl	8000b50 <__aeabi_dcmplt>
 8012eee:	2800      	cmp	r0, #0
 8012ef0:	d050      	beq.n	8012f94 <_dtoa_r+0x244>
 8012ef2:	9b00      	ldr	r3, [sp, #0]
 8012ef4:	3b01      	subs	r3, #1
 8012ef6:	9300      	str	r3, [sp, #0]
 8012ef8:	2300      	movs	r3, #0
 8012efa:	930b      	str	r3, [sp, #44]	; 0x2c
 8012efc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012efe:	1b5d      	subs	r5, r3, r5
 8012f00:	1e6b      	subs	r3, r5, #1
 8012f02:	9305      	str	r3, [sp, #20]
 8012f04:	bf45      	ittet	mi
 8012f06:	f1c5 0301 	rsbmi	r3, r5, #1
 8012f0a:	9304      	strmi	r3, [sp, #16]
 8012f0c:	2300      	movpl	r3, #0
 8012f0e:	2300      	movmi	r3, #0
 8012f10:	bf4c      	ite	mi
 8012f12:	9305      	strmi	r3, [sp, #20]
 8012f14:	9304      	strpl	r3, [sp, #16]
 8012f16:	9b00      	ldr	r3, [sp, #0]
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	db3d      	blt.n	8012f98 <_dtoa_r+0x248>
 8012f1c:	9b05      	ldr	r3, [sp, #20]
 8012f1e:	9a00      	ldr	r2, [sp, #0]
 8012f20:	920a      	str	r2, [sp, #40]	; 0x28
 8012f22:	4413      	add	r3, r2
 8012f24:	9305      	str	r3, [sp, #20]
 8012f26:	2300      	movs	r3, #0
 8012f28:	9307      	str	r3, [sp, #28]
 8012f2a:	9b06      	ldr	r3, [sp, #24]
 8012f2c:	2b09      	cmp	r3, #9
 8012f2e:	f200 8089 	bhi.w	8013044 <_dtoa_r+0x2f4>
 8012f32:	2b05      	cmp	r3, #5
 8012f34:	bfc4      	itt	gt
 8012f36:	3b04      	subgt	r3, #4
 8012f38:	9306      	strgt	r3, [sp, #24]
 8012f3a:	9b06      	ldr	r3, [sp, #24]
 8012f3c:	f1a3 0302 	sub.w	r3, r3, #2
 8012f40:	bfcc      	ite	gt
 8012f42:	2500      	movgt	r5, #0
 8012f44:	2501      	movle	r5, #1
 8012f46:	2b03      	cmp	r3, #3
 8012f48:	f200 8087 	bhi.w	801305a <_dtoa_r+0x30a>
 8012f4c:	e8df f003 	tbb	[pc, r3]
 8012f50:	59383a2d 	.word	0x59383a2d
 8012f54:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012f58:	441d      	add	r5, r3
 8012f5a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012f5e:	2b20      	cmp	r3, #32
 8012f60:	bfc1      	itttt	gt
 8012f62:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012f66:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012f6a:	fa0b f303 	lslgt.w	r3, fp, r3
 8012f6e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012f72:	bfda      	itte	le
 8012f74:	f1c3 0320 	rsble	r3, r3, #32
 8012f78:	fa06 f003 	lslle.w	r0, r6, r3
 8012f7c:	4318      	orrgt	r0, r3
 8012f7e:	f7ed fafb 	bl	8000578 <__aeabi_ui2d>
 8012f82:	2301      	movs	r3, #1
 8012f84:	4606      	mov	r6, r0
 8012f86:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012f8a:	3d01      	subs	r5, #1
 8012f8c:	930e      	str	r3, [sp, #56]	; 0x38
 8012f8e:	e76a      	b.n	8012e66 <_dtoa_r+0x116>
 8012f90:	2301      	movs	r3, #1
 8012f92:	e7b2      	b.n	8012efa <_dtoa_r+0x1aa>
 8012f94:	900b      	str	r0, [sp, #44]	; 0x2c
 8012f96:	e7b1      	b.n	8012efc <_dtoa_r+0x1ac>
 8012f98:	9b04      	ldr	r3, [sp, #16]
 8012f9a:	9a00      	ldr	r2, [sp, #0]
 8012f9c:	1a9b      	subs	r3, r3, r2
 8012f9e:	9304      	str	r3, [sp, #16]
 8012fa0:	4253      	negs	r3, r2
 8012fa2:	9307      	str	r3, [sp, #28]
 8012fa4:	2300      	movs	r3, #0
 8012fa6:	930a      	str	r3, [sp, #40]	; 0x28
 8012fa8:	e7bf      	b.n	8012f2a <_dtoa_r+0x1da>
 8012faa:	2300      	movs	r3, #0
 8012fac:	9308      	str	r3, [sp, #32]
 8012fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	dc55      	bgt.n	8013060 <_dtoa_r+0x310>
 8012fb4:	2301      	movs	r3, #1
 8012fb6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012fba:	461a      	mov	r2, r3
 8012fbc:	9209      	str	r2, [sp, #36]	; 0x24
 8012fbe:	e00c      	b.n	8012fda <_dtoa_r+0x28a>
 8012fc0:	2301      	movs	r3, #1
 8012fc2:	e7f3      	b.n	8012fac <_dtoa_r+0x25c>
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012fc8:	9308      	str	r3, [sp, #32]
 8012fca:	9b00      	ldr	r3, [sp, #0]
 8012fcc:	4413      	add	r3, r2
 8012fce:	9302      	str	r3, [sp, #8]
 8012fd0:	3301      	adds	r3, #1
 8012fd2:	2b01      	cmp	r3, #1
 8012fd4:	9303      	str	r3, [sp, #12]
 8012fd6:	bfb8      	it	lt
 8012fd8:	2301      	movlt	r3, #1
 8012fda:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012fdc:	2200      	movs	r2, #0
 8012fde:	6042      	str	r2, [r0, #4]
 8012fe0:	2204      	movs	r2, #4
 8012fe2:	f102 0614 	add.w	r6, r2, #20
 8012fe6:	429e      	cmp	r6, r3
 8012fe8:	6841      	ldr	r1, [r0, #4]
 8012fea:	d93d      	bls.n	8013068 <_dtoa_r+0x318>
 8012fec:	4620      	mov	r0, r4
 8012fee:	f000 ffad 	bl	8013f4c <_Balloc>
 8012ff2:	9001      	str	r0, [sp, #4]
 8012ff4:	2800      	cmp	r0, #0
 8012ff6:	d13b      	bne.n	8013070 <_dtoa_r+0x320>
 8012ff8:	4b11      	ldr	r3, [pc, #68]	; (8013040 <_dtoa_r+0x2f0>)
 8012ffa:	4602      	mov	r2, r0
 8012ffc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013000:	e6c0      	b.n	8012d84 <_dtoa_r+0x34>
 8013002:	2301      	movs	r3, #1
 8013004:	e7df      	b.n	8012fc6 <_dtoa_r+0x276>
 8013006:	bf00      	nop
 8013008:	636f4361 	.word	0x636f4361
 801300c:	3fd287a7 	.word	0x3fd287a7
 8013010:	8b60c8b3 	.word	0x8b60c8b3
 8013014:	3fc68a28 	.word	0x3fc68a28
 8013018:	509f79fb 	.word	0x509f79fb
 801301c:	3fd34413 	.word	0x3fd34413
 8013020:	080165be 	.word	0x080165be
 8013024:	080165d5 	.word	0x080165d5
 8013028:	7ff00000 	.word	0x7ff00000
 801302c:	080165b8 	.word	0x080165b8
 8013030:	080165af 	.word	0x080165af
 8013034:	080165bd 	.word	0x080165bd
 8013038:	3ff80000 	.word	0x3ff80000
 801303c:	08016738 	.word	0x08016738
 8013040:	08016630 	.word	0x08016630
 8013044:	2501      	movs	r5, #1
 8013046:	2300      	movs	r3, #0
 8013048:	9306      	str	r3, [sp, #24]
 801304a:	9508      	str	r5, [sp, #32]
 801304c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013050:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8013054:	2200      	movs	r2, #0
 8013056:	2312      	movs	r3, #18
 8013058:	e7b0      	b.n	8012fbc <_dtoa_r+0x26c>
 801305a:	2301      	movs	r3, #1
 801305c:	9308      	str	r3, [sp, #32]
 801305e:	e7f5      	b.n	801304c <_dtoa_r+0x2fc>
 8013060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013062:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8013066:	e7b8      	b.n	8012fda <_dtoa_r+0x28a>
 8013068:	3101      	adds	r1, #1
 801306a:	6041      	str	r1, [r0, #4]
 801306c:	0052      	lsls	r2, r2, #1
 801306e:	e7b8      	b.n	8012fe2 <_dtoa_r+0x292>
 8013070:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013072:	9a01      	ldr	r2, [sp, #4]
 8013074:	601a      	str	r2, [r3, #0]
 8013076:	9b03      	ldr	r3, [sp, #12]
 8013078:	2b0e      	cmp	r3, #14
 801307a:	f200 809d 	bhi.w	80131b8 <_dtoa_r+0x468>
 801307e:	2d00      	cmp	r5, #0
 8013080:	f000 809a 	beq.w	80131b8 <_dtoa_r+0x468>
 8013084:	9b00      	ldr	r3, [sp, #0]
 8013086:	2b00      	cmp	r3, #0
 8013088:	dd32      	ble.n	80130f0 <_dtoa_r+0x3a0>
 801308a:	4ab7      	ldr	r2, [pc, #732]	; (8013368 <_dtoa_r+0x618>)
 801308c:	f003 030f 	and.w	r3, r3, #15
 8013090:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013094:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013098:	9b00      	ldr	r3, [sp, #0]
 801309a:	05d8      	lsls	r0, r3, #23
 801309c:	ea4f 1723 	mov.w	r7, r3, asr #4
 80130a0:	d516      	bpl.n	80130d0 <_dtoa_r+0x380>
 80130a2:	4bb2      	ldr	r3, [pc, #712]	; (801336c <_dtoa_r+0x61c>)
 80130a4:	ec51 0b19 	vmov	r0, r1, d9
 80130a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80130ac:	f7ed fc08 	bl	80008c0 <__aeabi_ddiv>
 80130b0:	f007 070f 	and.w	r7, r7, #15
 80130b4:	4682      	mov	sl, r0
 80130b6:	468b      	mov	fp, r1
 80130b8:	2503      	movs	r5, #3
 80130ba:	4eac      	ldr	r6, [pc, #688]	; (801336c <_dtoa_r+0x61c>)
 80130bc:	b957      	cbnz	r7, 80130d4 <_dtoa_r+0x384>
 80130be:	4642      	mov	r2, r8
 80130c0:	464b      	mov	r3, r9
 80130c2:	4650      	mov	r0, sl
 80130c4:	4659      	mov	r1, fp
 80130c6:	f7ed fbfb 	bl	80008c0 <__aeabi_ddiv>
 80130ca:	4682      	mov	sl, r0
 80130cc:	468b      	mov	fp, r1
 80130ce:	e028      	b.n	8013122 <_dtoa_r+0x3d2>
 80130d0:	2502      	movs	r5, #2
 80130d2:	e7f2      	b.n	80130ba <_dtoa_r+0x36a>
 80130d4:	07f9      	lsls	r1, r7, #31
 80130d6:	d508      	bpl.n	80130ea <_dtoa_r+0x39a>
 80130d8:	4640      	mov	r0, r8
 80130da:	4649      	mov	r1, r9
 80130dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80130e0:	f7ed fac4 	bl	800066c <__aeabi_dmul>
 80130e4:	3501      	adds	r5, #1
 80130e6:	4680      	mov	r8, r0
 80130e8:	4689      	mov	r9, r1
 80130ea:	107f      	asrs	r7, r7, #1
 80130ec:	3608      	adds	r6, #8
 80130ee:	e7e5      	b.n	80130bc <_dtoa_r+0x36c>
 80130f0:	f000 809b 	beq.w	801322a <_dtoa_r+0x4da>
 80130f4:	9b00      	ldr	r3, [sp, #0]
 80130f6:	4f9d      	ldr	r7, [pc, #628]	; (801336c <_dtoa_r+0x61c>)
 80130f8:	425e      	negs	r6, r3
 80130fa:	4b9b      	ldr	r3, [pc, #620]	; (8013368 <_dtoa_r+0x618>)
 80130fc:	f006 020f 	and.w	r2, r6, #15
 8013100:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013108:	ec51 0b19 	vmov	r0, r1, d9
 801310c:	f7ed faae 	bl	800066c <__aeabi_dmul>
 8013110:	1136      	asrs	r6, r6, #4
 8013112:	4682      	mov	sl, r0
 8013114:	468b      	mov	fp, r1
 8013116:	2300      	movs	r3, #0
 8013118:	2502      	movs	r5, #2
 801311a:	2e00      	cmp	r6, #0
 801311c:	d17a      	bne.n	8013214 <_dtoa_r+0x4c4>
 801311e:	2b00      	cmp	r3, #0
 8013120:	d1d3      	bne.n	80130ca <_dtoa_r+0x37a>
 8013122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013124:	2b00      	cmp	r3, #0
 8013126:	f000 8082 	beq.w	801322e <_dtoa_r+0x4de>
 801312a:	4b91      	ldr	r3, [pc, #580]	; (8013370 <_dtoa_r+0x620>)
 801312c:	2200      	movs	r2, #0
 801312e:	4650      	mov	r0, sl
 8013130:	4659      	mov	r1, fp
 8013132:	f7ed fd0d 	bl	8000b50 <__aeabi_dcmplt>
 8013136:	2800      	cmp	r0, #0
 8013138:	d079      	beq.n	801322e <_dtoa_r+0x4de>
 801313a:	9b03      	ldr	r3, [sp, #12]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d076      	beq.n	801322e <_dtoa_r+0x4de>
 8013140:	9b02      	ldr	r3, [sp, #8]
 8013142:	2b00      	cmp	r3, #0
 8013144:	dd36      	ble.n	80131b4 <_dtoa_r+0x464>
 8013146:	9b00      	ldr	r3, [sp, #0]
 8013148:	4650      	mov	r0, sl
 801314a:	4659      	mov	r1, fp
 801314c:	1e5f      	subs	r7, r3, #1
 801314e:	2200      	movs	r2, #0
 8013150:	4b88      	ldr	r3, [pc, #544]	; (8013374 <_dtoa_r+0x624>)
 8013152:	f7ed fa8b 	bl	800066c <__aeabi_dmul>
 8013156:	9e02      	ldr	r6, [sp, #8]
 8013158:	4682      	mov	sl, r0
 801315a:	468b      	mov	fp, r1
 801315c:	3501      	adds	r5, #1
 801315e:	4628      	mov	r0, r5
 8013160:	f7ed fa1a 	bl	8000598 <__aeabi_i2d>
 8013164:	4652      	mov	r2, sl
 8013166:	465b      	mov	r3, fp
 8013168:	f7ed fa80 	bl	800066c <__aeabi_dmul>
 801316c:	4b82      	ldr	r3, [pc, #520]	; (8013378 <_dtoa_r+0x628>)
 801316e:	2200      	movs	r2, #0
 8013170:	f7ed f8c6 	bl	8000300 <__adddf3>
 8013174:	46d0      	mov	r8, sl
 8013176:	46d9      	mov	r9, fp
 8013178:	4682      	mov	sl, r0
 801317a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801317e:	2e00      	cmp	r6, #0
 8013180:	d158      	bne.n	8013234 <_dtoa_r+0x4e4>
 8013182:	4b7e      	ldr	r3, [pc, #504]	; (801337c <_dtoa_r+0x62c>)
 8013184:	2200      	movs	r2, #0
 8013186:	4640      	mov	r0, r8
 8013188:	4649      	mov	r1, r9
 801318a:	f7ed f8b7 	bl	80002fc <__aeabi_dsub>
 801318e:	4652      	mov	r2, sl
 8013190:	465b      	mov	r3, fp
 8013192:	4680      	mov	r8, r0
 8013194:	4689      	mov	r9, r1
 8013196:	f7ed fcf9 	bl	8000b8c <__aeabi_dcmpgt>
 801319a:	2800      	cmp	r0, #0
 801319c:	f040 8295 	bne.w	80136ca <_dtoa_r+0x97a>
 80131a0:	4652      	mov	r2, sl
 80131a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80131a6:	4640      	mov	r0, r8
 80131a8:	4649      	mov	r1, r9
 80131aa:	f7ed fcd1 	bl	8000b50 <__aeabi_dcmplt>
 80131ae:	2800      	cmp	r0, #0
 80131b0:	f040 8289 	bne.w	80136c6 <_dtoa_r+0x976>
 80131b4:	ec5b ab19 	vmov	sl, fp, d9
 80131b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	f2c0 8148 	blt.w	8013450 <_dtoa_r+0x700>
 80131c0:	9a00      	ldr	r2, [sp, #0]
 80131c2:	2a0e      	cmp	r2, #14
 80131c4:	f300 8144 	bgt.w	8013450 <_dtoa_r+0x700>
 80131c8:	4b67      	ldr	r3, [pc, #412]	; (8013368 <_dtoa_r+0x618>)
 80131ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80131ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80131d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	f280 80d5 	bge.w	8013384 <_dtoa_r+0x634>
 80131da:	9b03      	ldr	r3, [sp, #12]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	f300 80d1 	bgt.w	8013384 <_dtoa_r+0x634>
 80131e2:	f040 826f 	bne.w	80136c4 <_dtoa_r+0x974>
 80131e6:	4b65      	ldr	r3, [pc, #404]	; (801337c <_dtoa_r+0x62c>)
 80131e8:	2200      	movs	r2, #0
 80131ea:	4640      	mov	r0, r8
 80131ec:	4649      	mov	r1, r9
 80131ee:	f7ed fa3d 	bl	800066c <__aeabi_dmul>
 80131f2:	4652      	mov	r2, sl
 80131f4:	465b      	mov	r3, fp
 80131f6:	f7ed fcbf 	bl	8000b78 <__aeabi_dcmpge>
 80131fa:	9e03      	ldr	r6, [sp, #12]
 80131fc:	4637      	mov	r7, r6
 80131fe:	2800      	cmp	r0, #0
 8013200:	f040 8245 	bne.w	801368e <_dtoa_r+0x93e>
 8013204:	9d01      	ldr	r5, [sp, #4]
 8013206:	2331      	movs	r3, #49	; 0x31
 8013208:	f805 3b01 	strb.w	r3, [r5], #1
 801320c:	9b00      	ldr	r3, [sp, #0]
 801320e:	3301      	adds	r3, #1
 8013210:	9300      	str	r3, [sp, #0]
 8013212:	e240      	b.n	8013696 <_dtoa_r+0x946>
 8013214:	07f2      	lsls	r2, r6, #31
 8013216:	d505      	bpl.n	8013224 <_dtoa_r+0x4d4>
 8013218:	e9d7 2300 	ldrd	r2, r3, [r7]
 801321c:	f7ed fa26 	bl	800066c <__aeabi_dmul>
 8013220:	3501      	adds	r5, #1
 8013222:	2301      	movs	r3, #1
 8013224:	1076      	asrs	r6, r6, #1
 8013226:	3708      	adds	r7, #8
 8013228:	e777      	b.n	801311a <_dtoa_r+0x3ca>
 801322a:	2502      	movs	r5, #2
 801322c:	e779      	b.n	8013122 <_dtoa_r+0x3d2>
 801322e:	9f00      	ldr	r7, [sp, #0]
 8013230:	9e03      	ldr	r6, [sp, #12]
 8013232:	e794      	b.n	801315e <_dtoa_r+0x40e>
 8013234:	9901      	ldr	r1, [sp, #4]
 8013236:	4b4c      	ldr	r3, [pc, #304]	; (8013368 <_dtoa_r+0x618>)
 8013238:	4431      	add	r1, r6
 801323a:	910d      	str	r1, [sp, #52]	; 0x34
 801323c:	9908      	ldr	r1, [sp, #32]
 801323e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8013242:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013246:	2900      	cmp	r1, #0
 8013248:	d043      	beq.n	80132d2 <_dtoa_r+0x582>
 801324a:	494d      	ldr	r1, [pc, #308]	; (8013380 <_dtoa_r+0x630>)
 801324c:	2000      	movs	r0, #0
 801324e:	f7ed fb37 	bl	80008c0 <__aeabi_ddiv>
 8013252:	4652      	mov	r2, sl
 8013254:	465b      	mov	r3, fp
 8013256:	f7ed f851 	bl	80002fc <__aeabi_dsub>
 801325a:	9d01      	ldr	r5, [sp, #4]
 801325c:	4682      	mov	sl, r0
 801325e:	468b      	mov	fp, r1
 8013260:	4649      	mov	r1, r9
 8013262:	4640      	mov	r0, r8
 8013264:	f7ed fcb2 	bl	8000bcc <__aeabi_d2iz>
 8013268:	4606      	mov	r6, r0
 801326a:	f7ed f995 	bl	8000598 <__aeabi_i2d>
 801326e:	4602      	mov	r2, r0
 8013270:	460b      	mov	r3, r1
 8013272:	4640      	mov	r0, r8
 8013274:	4649      	mov	r1, r9
 8013276:	f7ed f841 	bl	80002fc <__aeabi_dsub>
 801327a:	3630      	adds	r6, #48	; 0x30
 801327c:	f805 6b01 	strb.w	r6, [r5], #1
 8013280:	4652      	mov	r2, sl
 8013282:	465b      	mov	r3, fp
 8013284:	4680      	mov	r8, r0
 8013286:	4689      	mov	r9, r1
 8013288:	f7ed fc62 	bl	8000b50 <__aeabi_dcmplt>
 801328c:	2800      	cmp	r0, #0
 801328e:	d163      	bne.n	8013358 <_dtoa_r+0x608>
 8013290:	4642      	mov	r2, r8
 8013292:	464b      	mov	r3, r9
 8013294:	4936      	ldr	r1, [pc, #216]	; (8013370 <_dtoa_r+0x620>)
 8013296:	2000      	movs	r0, #0
 8013298:	f7ed f830 	bl	80002fc <__aeabi_dsub>
 801329c:	4652      	mov	r2, sl
 801329e:	465b      	mov	r3, fp
 80132a0:	f7ed fc56 	bl	8000b50 <__aeabi_dcmplt>
 80132a4:	2800      	cmp	r0, #0
 80132a6:	f040 80b5 	bne.w	8013414 <_dtoa_r+0x6c4>
 80132aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80132ac:	429d      	cmp	r5, r3
 80132ae:	d081      	beq.n	80131b4 <_dtoa_r+0x464>
 80132b0:	4b30      	ldr	r3, [pc, #192]	; (8013374 <_dtoa_r+0x624>)
 80132b2:	2200      	movs	r2, #0
 80132b4:	4650      	mov	r0, sl
 80132b6:	4659      	mov	r1, fp
 80132b8:	f7ed f9d8 	bl	800066c <__aeabi_dmul>
 80132bc:	4b2d      	ldr	r3, [pc, #180]	; (8013374 <_dtoa_r+0x624>)
 80132be:	4682      	mov	sl, r0
 80132c0:	468b      	mov	fp, r1
 80132c2:	4640      	mov	r0, r8
 80132c4:	4649      	mov	r1, r9
 80132c6:	2200      	movs	r2, #0
 80132c8:	f7ed f9d0 	bl	800066c <__aeabi_dmul>
 80132cc:	4680      	mov	r8, r0
 80132ce:	4689      	mov	r9, r1
 80132d0:	e7c6      	b.n	8013260 <_dtoa_r+0x510>
 80132d2:	4650      	mov	r0, sl
 80132d4:	4659      	mov	r1, fp
 80132d6:	f7ed f9c9 	bl	800066c <__aeabi_dmul>
 80132da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80132dc:	9d01      	ldr	r5, [sp, #4]
 80132de:	930f      	str	r3, [sp, #60]	; 0x3c
 80132e0:	4682      	mov	sl, r0
 80132e2:	468b      	mov	fp, r1
 80132e4:	4649      	mov	r1, r9
 80132e6:	4640      	mov	r0, r8
 80132e8:	f7ed fc70 	bl	8000bcc <__aeabi_d2iz>
 80132ec:	4606      	mov	r6, r0
 80132ee:	f7ed f953 	bl	8000598 <__aeabi_i2d>
 80132f2:	3630      	adds	r6, #48	; 0x30
 80132f4:	4602      	mov	r2, r0
 80132f6:	460b      	mov	r3, r1
 80132f8:	4640      	mov	r0, r8
 80132fa:	4649      	mov	r1, r9
 80132fc:	f7ec fffe 	bl	80002fc <__aeabi_dsub>
 8013300:	f805 6b01 	strb.w	r6, [r5], #1
 8013304:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013306:	429d      	cmp	r5, r3
 8013308:	4680      	mov	r8, r0
 801330a:	4689      	mov	r9, r1
 801330c:	f04f 0200 	mov.w	r2, #0
 8013310:	d124      	bne.n	801335c <_dtoa_r+0x60c>
 8013312:	4b1b      	ldr	r3, [pc, #108]	; (8013380 <_dtoa_r+0x630>)
 8013314:	4650      	mov	r0, sl
 8013316:	4659      	mov	r1, fp
 8013318:	f7ec fff2 	bl	8000300 <__adddf3>
 801331c:	4602      	mov	r2, r0
 801331e:	460b      	mov	r3, r1
 8013320:	4640      	mov	r0, r8
 8013322:	4649      	mov	r1, r9
 8013324:	f7ed fc32 	bl	8000b8c <__aeabi_dcmpgt>
 8013328:	2800      	cmp	r0, #0
 801332a:	d173      	bne.n	8013414 <_dtoa_r+0x6c4>
 801332c:	4652      	mov	r2, sl
 801332e:	465b      	mov	r3, fp
 8013330:	4913      	ldr	r1, [pc, #76]	; (8013380 <_dtoa_r+0x630>)
 8013332:	2000      	movs	r0, #0
 8013334:	f7ec ffe2 	bl	80002fc <__aeabi_dsub>
 8013338:	4602      	mov	r2, r0
 801333a:	460b      	mov	r3, r1
 801333c:	4640      	mov	r0, r8
 801333e:	4649      	mov	r1, r9
 8013340:	f7ed fc06 	bl	8000b50 <__aeabi_dcmplt>
 8013344:	2800      	cmp	r0, #0
 8013346:	f43f af35 	beq.w	80131b4 <_dtoa_r+0x464>
 801334a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801334c:	1e6b      	subs	r3, r5, #1
 801334e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013350:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013354:	2b30      	cmp	r3, #48	; 0x30
 8013356:	d0f8      	beq.n	801334a <_dtoa_r+0x5fa>
 8013358:	9700      	str	r7, [sp, #0]
 801335a:	e049      	b.n	80133f0 <_dtoa_r+0x6a0>
 801335c:	4b05      	ldr	r3, [pc, #20]	; (8013374 <_dtoa_r+0x624>)
 801335e:	f7ed f985 	bl	800066c <__aeabi_dmul>
 8013362:	4680      	mov	r8, r0
 8013364:	4689      	mov	r9, r1
 8013366:	e7bd      	b.n	80132e4 <_dtoa_r+0x594>
 8013368:	08016738 	.word	0x08016738
 801336c:	08016710 	.word	0x08016710
 8013370:	3ff00000 	.word	0x3ff00000
 8013374:	40240000 	.word	0x40240000
 8013378:	401c0000 	.word	0x401c0000
 801337c:	40140000 	.word	0x40140000
 8013380:	3fe00000 	.word	0x3fe00000
 8013384:	9d01      	ldr	r5, [sp, #4]
 8013386:	4656      	mov	r6, sl
 8013388:	465f      	mov	r7, fp
 801338a:	4642      	mov	r2, r8
 801338c:	464b      	mov	r3, r9
 801338e:	4630      	mov	r0, r6
 8013390:	4639      	mov	r1, r7
 8013392:	f7ed fa95 	bl	80008c0 <__aeabi_ddiv>
 8013396:	f7ed fc19 	bl	8000bcc <__aeabi_d2iz>
 801339a:	4682      	mov	sl, r0
 801339c:	f7ed f8fc 	bl	8000598 <__aeabi_i2d>
 80133a0:	4642      	mov	r2, r8
 80133a2:	464b      	mov	r3, r9
 80133a4:	f7ed f962 	bl	800066c <__aeabi_dmul>
 80133a8:	4602      	mov	r2, r0
 80133aa:	460b      	mov	r3, r1
 80133ac:	4630      	mov	r0, r6
 80133ae:	4639      	mov	r1, r7
 80133b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80133b4:	f7ec ffa2 	bl	80002fc <__aeabi_dsub>
 80133b8:	f805 6b01 	strb.w	r6, [r5], #1
 80133bc:	9e01      	ldr	r6, [sp, #4]
 80133be:	9f03      	ldr	r7, [sp, #12]
 80133c0:	1bae      	subs	r6, r5, r6
 80133c2:	42b7      	cmp	r7, r6
 80133c4:	4602      	mov	r2, r0
 80133c6:	460b      	mov	r3, r1
 80133c8:	d135      	bne.n	8013436 <_dtoa_r+0x6e6>
 80133ca:	f7ec ff99 	bl	8000300 <__adddf3>
 80133ce:	4642      	mov	r2, r8
 80133d0:	464b      	mov	r3, r9
 80133d2:	4606      	mov	r6, r0
 80133d4:	460f      	mov	r7, r1
 80133d6:	f7ed fbd9 	bl	8000b8c <__aeabi_dcmpgt>
 80133da:	b9d0      	cbnz	r0, 8013412 <_dtoa_r+0x6c2>
 80133dc:	4642      	mov	r2, r8
 80133de:	464b      	mov	r3, r9
 80133e0:	4630      	mov	r0, r6
 80133e2:	4639      	mov	r1, r7
 80133e4:	f7ed fbaa 	bl	8000b3c <__aeabi_dcmpeq>
 80133e8:	b110      	cbz	r0, 80133f0 <_dtoa_r+0x6a0>
 80133ea:	f01a 0f01 	tst.w	sl, #1
 80133ee:	d110      	bne.n	8013412 <_dtoa_r+0x6c2>
 80133f0:	4620      	mov	r0, r4
 80133f2:	ee18 1a10 	vmov	r1, s16
 80133f6:	f000 fde9 	bl	8013fcc <_Bfree>
 80133fa:	2300      	movs	r3, #0
 80133fc:	9800      	ldr	r0, [sp, #0]
 80133fe:	702b      	strb	r3, [r5, #0]
 8013400:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013402:	3001      	adds	r0, #1
 8013404:	6018      	str	r0, [r3, #0]
 8013406:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013408:	2b00      	cmp	r3, #0
 801340a:	f43f acf1 	beq.w	8012df0 <_dtoa_r+0xa0>
 801340e:	601d      	str	r5, [r3, #0]
 8013410:	e4ee      	b.n	8012df0 <_dtoa_r+0xa0>
 8013412:	9f00      	ldr	r7, [sp, #0]
 8013414:	462b      	mov	r3, r5
 8013416:	461d      	mov	r5, r3
 8013418:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801341c:	2a39      	cmp	r2, #57	; 0x39
 801341e:	d106      	bne.n	801342e <_dtoa_r+0x6de>
 8013420:	9a01      	ldr	r2, [sp, #4]
 8013422:	429a      	cmp	r2, r3
 8013424:	d1f7      	bne.n	8013416 <_dtoa_r+0x6c6>
 8013426:	9901      	ldr	r1, [sp, #4]
 8013428:	2230      	movs	r2, #48	; 0x30
 801342a:	3701      	adds	r7, #1
 801342c:	700a      	strb	r2, [r1, #0]
 801342e:	781a      	ldrb	r2, [r3, #0]
 8013430:	3201      	adds	r2, #1
 8013432:	701a      	strb	r2, [r3, #0]
 8013434:	e790      	b.n	8013358 <_dtoa_r+0x608>
 8013436:	4ba6      	ldr	r3, [pc, #664]	; (80136d0 <_dtoa_r+0x980>)
 8013438:	2200      	movs	r2, #0
 801343a:	f7ed f917 	bl	800066c <__aeabi_dmul>
 801343e:	2200      	movs	r2, #0
 8013440:	2300      	movs	r3, #0
 8013442:	4606      	mov	r6, r0
 8013444:	460f      	mov	r7, r1
 8013446:	f7ed fb79 	bl	8000b3c <__aeabi_dcmpeq>
 801344a:	2800      	cmp	r0, #0
 801344c:	d09d      	beq.n	801338a <_dtoa_r+0x63a>
 801344e:	e7cf      	b.n	80133f0 <_dtoa_r+0x6a0>
 8013450:	9a08      	ldr	r2, [sp, #32]
 8013452:	2a00      	cmp	r2, #0
 8013454:	f000 80d7 	beq.w	8013606 <_dtoa_r+0x8b6>
 8013458:	9a06      	ldr	r2, [sp, #24]
 801345a:	2a01      	cmp	r2, #1
 801345c:	f300 80ba 	bgt.w	80135d4 <_dtoa_r+0x884>
 8013460:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013462:	2a00      	cmp	r2, #0
 8013464:	f000 80b2 	beq.w	80135cc <_dtoa_r+0x87c>
 8013468:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801346c:	9e07      	ldr	r6, [sp, #28]
 801346e:	9d04      	ldr	r5, [sp, #16]
 8013470:	9a04      	ldr	r2, [sp, #16]
 8013472:	441a      	add	r2, r3
 8013474:	9204      	str	r2, [sp, #16]
 8013476:	9a05      	ldr	r2, [sp, #20]
 8013478:	2101      	movs	r1, #1
 801347a:	441a      	add	r2, r3
 801347c:	4620      	mov	r0, r4
 801347e:	9205      	str	r2, [sp, #20]
 8013480:	f000 fe5c 	bl	801413c <__i2b>
 8013484:	4607      	mov	r7, r0
 8013486:	2d00      	cmp	r5, #0
 8013488:	dd0c      	ble.n	80134a4 <_dtoa_r+0x754>
 801348a:	9b05      	ldr	r3, [sp, #20]
 801348c:	2b00      	cmp	r3, #0
 801348e:	dd09      	ble.n	80134a4 <_dtoa_r+0x754>
 8013490:	42ab      	cmp	r3, r5
 8013492:	9a04      	ldr	r2, [sp, #16]
 8013494:	bfa8      	it	ge
 8013496:	462b      	movge	r3, r5
 8013498:	1ad2      	subs	r2, r2, r3
 801349a:	9204      	str	r2, [sp, #16]
 801349c:	9a05      	ldr	r2, [sp, #20]
 801349e:	1aed      	subs	r5, r5, r3
 80134a0:	1ad3      	subs	r3, r2, r3
 80134a2:	9305      	str	r3, [sp, #20]
 80134a4:	9b07      	ldr	r3, [sp, #28]
 80134a6:	b31b      	cbz	r3, 80134f0 <_dtoa_r+0x7a0>
 80134a8:	9b08      	ldr	r3, [sp, #32]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	f000 80af 	beq.w	801360e <_dtoa_r+0x8be>
 80134b0:	2e00      	cmp	r6, #0
 80134b2:	dd13      	ble.n	80134dc <_dtoa_r+0x78c>
 80134b4:	4639      	mov	r1, r7
 80134b6:	4632      	mov	r2, r6
 80134b8:	4620      	mov	r0, r4
 80134ba:	f000 feff 	bl	80142bc <__pow5mult>
 80134be:	ee18 2a10 	vmov	r2, s16
 80134c2:	4601      	mov	r1, r0
 80134c4:	4607      	mov	r7, r0
 80134c6:	4620      	mov	r0, r4
 80134c8:	f000 fe4e 	bl	8014168 <__multiply>
 80134cc:	ee18 1a10 	vmov	r1, s16
 80134d0:	4680      	mov	r8, r0
 80134d2:	4620      	mov	r0, r4
 80134d4:	f000 fd7a 	bl	8013fcc <_Bfree>
 80134d8:	ee08 8a10 	vmov	s16, r8
 80134dc:	9b07      	ldr	r3, [sp, #28]
 80134de:	1b9a      	subs	r2, r3, r6
 80134e0:	d006      	beq.n	80134f0 <_dtoa_r+0x7a0>
 80134e2:	ee18 1a10 	vmov	r1, s16
 80134e6:	4620      	mov	r0, r4
 80134e8:	f000 fee8 	bl	80142bc <__pow5mult>
 80134ec:	ee08 0a10 	vmov	s16, r0
 80134f0:	2101      	movs	r1, #1
 80134f2:	4620      	mov	r0, r4
 80134f4:	f000 fe22 	bl	801413c <__i2b>
 80134f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	4606      	mov	r6, r0
 80134fe:	f340 8088 	ble.w	8013612 <_dtoa_r+0x8c2>
 8013502:	461a      	mov	r2, r3
 8013504:	4601      	mov	r1, r0
 8013506:	4620      	mov	r0, r4
 8013508:	f000 fed8 	bl	80142bc <__pow5mult>
 801350c:	9b06      	ldr	r3, [sp, #24]
 801350e:	2b01      	cmp	r3, #1
 8013510:	4606      	mov	r6, r0
 8013512:	f340 8081 	ble.w	8013618 <_dtoa_r+0x8c8>
 8013516:	f04f 0800 	mov.w	r8, #0
 801351a:	6933      	ldr	r3, [r6, #16]
 801351c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013520:	6918      	ldr	r0, [r3, #16]
 8013522:	f000 fdbb 	bl	801409c <__hi0bits>
 8013526:	f1c0 0020 	rsb	r0, r0, #32
 801352a:	9b05      	ldr	r3, [sp, #20]
 801352c:	4418      	add	r0, r3
 801352e:	f010 001f 	ands.w	r0, r0, #31
 8013532:	f000 8092 	beq.w	801365a <_dtoa_r+0x90a>
 8013536:	f1c0 0320 	rsb	r3, r0, #32
 801353a:	2b04      	cmp	r3, #4
 801353c:	f340 808a 	ble.w	8013654 <_dtoa_r+0x904>
 8013540:	f1c0 001c 	rsb	r0, r0, #28
 8013544:	9b04      	ldr	r3, [sp, #16]
 8013546:	4403      	add	r3, r0
 8013548:	9304      	str	r3, [sp, #16]
 801354a:	9b05      	ldr	r3, [sp, #20]
 801354c:	4403      	add	r3, r0
 801354e:	4405      	add	r5, r0
 8013550:	9305      	str	r3, [sp, #20]
 8013552:	9b04      	ldr	r3, [sp, #16]
 8013554:	2b00      	cmp	r3, #0
 8013556:	dd07      	ble.n	8013568 <_dtoa_r+0x818>
 8013558:	ee18 1a10 	vmov	r1, s16
 801355c:	461a      	mov	r2, r3
 801355e:	4620      	mov	r0, r4
 8013560:	f000 ff06 	bl	8014370 <__lshift>
 8013564:	ee08 0a10 	vmov	s16, r0
 8013568:	9b05      	ldr	r3, [sp, #20]
 801356a:	2b00      	cmp	r3, #0
 801356c:	dd05      	ble.n	801357a <_dtoa_r+0x82a>
 801356e:	4631      	mov	r1, r6
 8013570:	461a      	mov	r2, r3
 8013572:	4620      	mov	r0, r4
 8013574:	f000 fefc 	bl	8014370 <__lshift>
 8013578:	4606      	mov	r6, r0
 801357a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801357c:	2b00      	cmp	r3, #0
 801357e:	d06e      	beq.n	801365e <_dtoa_r+0x90e>
 8013580:	ee18 0a10 	vmov	r0, s16
 8013584:	4631      	mov	r1, r6
 8013586:	f000 ff63 	bl	8014450 <__mcmp>
 801358a:	2800      	cmp	r0, #0
 801358c:	da67      	bge.n	801365e <_dtoa_r+0x90e>
 801358e:	9b00      	ldr	r3, [sp, #0]
 8013590:	3b01      	subs	r3, #1
 8013592:	ee18 1a10 	vmov	r1, s16
 8013596:	9300      	str	r3, [sp, #0]
 8013598:	220a      	movs	r2, #10
 801359a:	2300      	movs	r3, #0
 801359c:	4620      	mov	r0, r4
 801359e:	f000 fd37 	bl	8014010 <__multadd>
 80135a2:	9b08      	ldr	r3, [sp, #32]
 80135a4:	ee08 0a10 	vmov	s16, r0
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	f000 81b1 	beq.w	8013910 <_dtoa_r+0xbc0>
 80135ae:	2300      	movs	r3, #0
 80135b0:	4639      	mov	r1, r7
 80135b2:	220a      	movs	r2, #10
 80135b4:	4620      	mov	r0, r4
 80135b6:	f000 fd2b 	bl	8014010 <__multadd>
 80135ba:	9b02      	ldr	r3, [sp, #8]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	4607      	mov	r7, r0
 80135c0:	f300 808e 	bgt.w	80136e0 <_dtoa_r+0x990>
 80135c4:	9b06      	ldr	r3, [sp, #24]
 80135c6:	2b02      	cmp	r3, #2
 80135c8:	dc51      	bgt.n	801366e <_dtoa_r+0x91e>
 80135ca:	e089      	b.n	80136e0 <_dtoa_r+0x990>
 80135cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80135ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80135d2:	e74b      	b.n	801346c <_dtoa_r+0x71c>
 80135d4:	9b03      	ldr	r3, [sp, #12]
 80135d6:	1e5e      	subs	r6, r3, #1
 80135d8:	9b07      	ldr	r3, [sp, #28]
 80135da:	42b3      	cmp	r3, r6
 80135dc:	bfbf      	itttt	lt
 80135de:	9b07      	ldrlt	r3, [sp, #28]
 80135e0:	9607      	strlt	r6, [sp, #28]
 80135e2:	1af2      	sublt	r2, r6, r3
 80135e4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80135e6:	bfb6      	itet	lt
 80135e8:	189b      	addlt	r3, r3, r2
 80135ea:	1b9e      	subge	r6, r3, r6
 80135ec:	930a      	strlt	r3, [sp, #40]	; 0x28
 80135ee:	9b03      	ldr	r3, [sp, #12]
 80135f0:	bfb8      	it	lt
 80135f2:	2600      	movlt	r6, #0
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	bfb7      	itett	lt
 80135f8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80135fc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8013600:	1a9d      	sublt	r5, r3, r2
 8013602:	2300      	movlt	r3, #0
 8013604:	e734      	b.n	8013470 <_dtoa_r+0x720>
 8013606:	9e07      	ldr	r6, [sp, #28]
 8013608:	9d04      	ldr	r5, [sp, #16]
 801360a:	9f08      	ldr	r7, [sp, #32]
 801360c:	e73b      	b.n	8013486 <_dtoa_r+0x736>
 801360e:	9a07      	ldr	r2, [sp, #28]
 8013610:	e767      	b.n	80134e2 <_dtoa_r+0x792>
 8013612:	9b06      	ldr	r3, [sp, #24]
 8013614:	2b01      	cmp	r3, #1
 8013616:	dc18      	bgt.n	801364a <_dtoa_r+0x8fa>
 8013618:	f1ba 0f00 	cmp.w	sl, #0
 801361c:	d115      	bne.n	801364a <_dtoa_r+0x8fa>
 801361e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013622:	b993      	cbnz	r3, 801364a <_dtoa_r+0x8fa>
 8013624:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013628:	0d1b      	lsrs	r3, r3, #20
 801362a:	051b      	lsls	r3, r3, #20
 801362c:	b183      	cbz	r3, 8013650 <_dtoa_r+0x900>
 801362e:	9b04      	ldr	r3, [sp, #16]
 8013630:	3301      	adds	r3, #1
 8013632:	9304      	str	r3, [sp, #16]
 8013634:	9b05      	ldr	r3, [sp, #20]
 8013636:	3301      	adds	r3, #1
 8013638:	9305      	str	r3, [sp, #20]
 801363a:	f04f 0801 	mov.w	r8, #1
 801363e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013640:	2b00      	cmp	r3, #0
 8013642:	f47f af6a 	bne.w	801351a <_dtoa_r+0x7ca>
 8013646:	2001      	movs	r0, #1
 8013648:	e76f      	b.n	801352a <_dtoa_r+0x7da>
 801364a:	f04f 0800 	mov.w	r8, #0
 801364e:	e7f6      	b.n	801363e <_dtoa_r+0x8ee>
 8013650:	4698      	mov	r8, r3
 8013652:	e7f4      	b.n	801363e <_dtoa_r+0x8ee>
 8013654:	f43f af7d 	beq.w	8013552 <_dtoa_r+0x802>
 8013658:	4618      	mov	r0, r3
 801365a:	301c      	adds	r0, #28
 801365c:	e772      	b.n	8013544 <_dtoa_r+0x7f4>
 801365e:	9b03      	ldr	r3, [sp, #12]
 8013660:	2b00      	cmp	r3, #0
 8013662:	dc37      	bgt.n	80136d4 <_dtoa_r+0x984>
 8013664:	9b06      	ldr	r3, [sp, #24]
 8013666:	2b02      	cmp	r3, #2
 8013668:	dd34      	ble.n	80136d4 <_dtoa_r+0x984>
 801366a:	9b03      	ldr	r3, [sp, #12]
 801366c:	9302      	str	r3, [sp, #8]
 801366e:	9b02      	ldr	r3, [sp, #8]
 8013670:	b96b      	cbnz	r3, 801368e <_dtoa_r+0x93e>
 8013672:	4631      	mov	r1, r6
 8013674:	2205      	movs	r2, #5
 8013676:	4620      	mov	r0, r4
 8013678:	f000 fcca 	bl	8014010 <__multadd>
 801367c:	4601      	mov	r1, r0
 801367e:	4606      	mov	r6, r0
 8013680:	ee18 0a10 	vmov	r0, s16
 8013684:	f000 fee4 	bl	8014450 <__mcmp>
 8013688:	2800      	cmp	r0, #0
 801368a:	f73f adbb 	bgt.w	8013204 <_dtoa_r+0x4b4>
 801368e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013690:	9d01      	ldr	r5, [sp, #4]
 8013692:	43db      	mvns	r3, r3
 8013694:	9300      	str	r3, [sp, #0]
 8013696:	f04f 0800 	mov.w	r8, #0
 801369a:	4631      	mov	r1, r6
 801369c:	4620      	mov	r0, r4
 801369e:	f000 fc95 	bl	8013fcc <_Bfree>
 80136a2:	2f00      	cmp	r7, #0
 80136a4:	f43f aea4 	beq.w	80133f0 <_dtoa_r+0x6a0>
 80136a8:	f1b8 0f00 	cmp.w	r8, #0
 80136ac:	d005      	beq.n	80136ba <_dtoa_r+0x96a>
 80136ae:	45b8      	cmp	r8, r7
 80136b0:	d003      	beq.n	80136ba <_dtoa_r+0x96a>
 80136b2:	4641      	mov	r1, r8
 80136b4:	4620      	mov	r0, r4
 80136b6:	f000 fc89 	bl	8013fcc <_Bfree>
 80136ba:	4639      	mov	r1, r7
 80136bc:	4620      	mov	r0, r4
 80136be:	f000 fc85 	bl	8013fcc <_Bfree>
 80136c2:	e695      	b.n	80133f0 <_dtoa_r+0x6a0>
 80136c4:	2600      	movs	r6, #0
 80136c6:	4637      	mov	r7, r6
 80136c8:	e7e1      	b.n	801368e <_dtoa_r+0x93e>
 80136ca:	9700      	str	r7, [sp, #0]
 80136cc:	4637      	mov	r7, r6
 80136ce:	e599      	b.n	8013204 <_dtoa_r+0x4b4>
 80136d0:	40240000 	.word	0x40240000
 80136d4:	9b08      	ldr	r3, [sp, #32]
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	f000 80ca 	beq.w	8013870 <_dtoa_r+0xb20>
 80136dc:	9b03      	ldr	r3, [sp, #12]
 80136de:	9302      	str	r3, [sp, #8]
 80136e0:	2d00      	cmp	r5, #0
 80136e2:	dd05      	ble.n	80136f0 <_dtoa_r+0x9a0>
 80136e4:	4639      	mov	r1, r7
 80136e6:	462a      	mov	r2, r5
 80136e8:	4620      	mov	r0, r4
 80136ea:	f000 fe41 	bl	8014370 <__lshift>
 80136ee:	4607      	mov	r7, r0
 80136f0:	f1b8 0f00 	cmp.w	r8, #0
 80136f4:	d05b      	beq.n	80137ae <_dtoa_r+0xa5e>
 80136f6:	6879      	ldr	r1, [r7, #4]
 80136f8:	4620      	mov	r0, r4
 80136fa:	f000 fc27 	bl	8013f4c <_Balloc>
 80136fe:	4605      	mov	r5, r0
 8013700:	b928      	cbnz	r0, 801370e <_dtoa_r+0x9be>
 8013702:	4b87      	ldr	r3, [pc, #540]	; (8013920 <_dtoa_r+0xbd0>)
 8013704:	4602      	mov	r2, r0
 8013706:	f240 21ea 	movw	r1, #746	; 0x2ea
 801370a:	f7ff bb3b 	b.w	8012d84 <_dtoa_r+0x34>
 801370e:	693a      	ldr	r2, [r7, #16]
 8013710:	3202      	adds	r2, #2
 8013712:	0092      	lsls	r2, r2, #2
 8013714:	f107 010c 	add.w	r1, r7, #12
 8013718:	300c      	adds	r0, #12
 801371a:	f000 fbdb 	bl	8013ed4 <memcpy>
 801371e:	2201      	movs	r2, #1
 8013720:	4629      	mov	r1, r5
 8013722:	4620      	mov	r0, r4
 8013724:	f000 fe24 	bl	8014370 <__lshift>
 8013728:	9b01      	ldr	r3, [sp, #4]
 801372a:	f103 0901 	add.w	r9, r3, #1
 801372e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8013732:	4413      	add	r3, r2
 8013734:	9305      	str	r3, [sp, #20]
 8013736:	f00a 0301 	and.w	r3, sl, #1
 801373a:	46b8      	mov	r8, r7
 801373c:	9304      	str	r3, [sp, #16]
 801373e:	4607      	mov	r7, r0
 8013740:	4631      	mov	r1, r6
 8013742:	ee18 0a10 	vmov	r0, s16
 8013746:	f7ff fa77 	bl	8012c38 <quorem>
 801374a:	4641      	mov	r1, r8
 801374c:	9002      	str	r0, [sp, #8]
 801374e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8013752:	ee18 0a10 	vmov	r0, s16
 8013756:	f000 fe7b 	bl	8014450 <__mcmp>
 801375a:	463a      	mov	r2, r7
 801375c:	9003      	str	r0, [sp, #12]
 801375e:	4631      	mov	r1, r6
 8013760:	4620      	mov	r0, r4
 8013762:	f000 fe91 	bl	8014488 <__mdiff>
 8013766:	68c2      	ldr	r2, [r0, #12]
 8013768:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 801376c:	4605      	mov	r5, r0
 801376e:	bb02      	cbnz	r2, 80137b2 <_dtoa_r+0xa62>
 8013770:	4601      	mov	r1, r0
 8013772:	ee18 0a10 	vmov	r0, s16
 8013776:	f000 fe6b 	bl	8014450 <__mcmp>
 801377a:	4602      	mov	r2, r0
 801377c:	4629      	mov	r1, r5
 801377e:	4620      	mov	r0, r4
 8013780:	9207      	str	r2, [sp, #28]
 8013782:	f000 fc23 	bl	8013fcc <_Bfree>
 8013786:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801378a:	ea43 0102 	orr.w	r1, r3, r2
 801378e:	9b04      	ldr	r3, [sp, #16]
 8013790:	430b      	orrs	r3, r1
 8013792:	464d      	mov	r5, r9
 8013794:	d10f      	bne.n	80137b6 <_dtoa_r+0xa66>
 8013796:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801379a:	d02a      	beq.n	80137f2 <_dtoa_r+0xaa2>
 801379c:	9b03      	ldr	r3, [sp, #12]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	dd02      	ble.n	80137a8 <_dtoa_r+0xa58>
 80137a2:	9b02      	ldr	r3, [sp, #8]
 80137a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80137a8:	f88b a000 	strb.w	sl, [fp]
 80137ac:	e775      	b.n	801369a <_dtoa_r+0x94a>
 80137ae:	4638      	mov	r0, r7
 80137b0:	e7ba      	b.n	8013728 <_dtoa_r+0x9d8>
 80137b2:	2201      	movs	r2, #1
 80137b4:	e7e2      	b.n	801377c <_dtoa_r+0xa2c>
 80137b6:	9b03      	ldr	r3, [sp, #12]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	db04      	blt.n	80137c6 <_dtoa_r+0xa76>
 80137bc:	9906      	ldr	r1, [sp, #24]
 80137be:	430b      	orrs	r3, r1
 80137c0:	9904      	ldr	r1, [sp, #16]
 80137c2:	430b      	orrs	r3, r1
 80137c4:	d122      	bne.n	801380c <_dtoa_r+0xabc>
 80137c6:	2a00      	cmp	r2, #0
 80137c8:	ddee      	ble.n	80137a8 <_dtoa_r+0xa58>
 80137ca:	ee18 1a10 	vmov	r1, s16
 80137ce:	2201      	movs	r2, #1
 80137d0:	4620      	mov	r0, r4
 80137d2:	f000 fdcd 	bl	8014370 <__lshift>
 80137d6:	4631      	mov	r1, r6
 80137d8:	ee08 0a10 	vmov	s16, r0
 80137dc:	f000 fe38 	bl	8014450 <__mcmp>
 80137e0:	2800      	cmp	r0, #0
 80137e2:	dc03      	bgt.n	80137ec <_dtoa_r+0xa9c>
 80137e4:	d1e0      	bne.n	80137a8 <_dtoa_r+0xa58>
 80137e6:	f01a 0f01 	tst.w	sl, #1
 80137ea:	d0dd      	beq.n	80137a8 <_dtoa_r+0xa58>
 80137ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80137f0:	d1d7      	bne.n	80137a2 <_dtoa_r+0xa52>
 80137f2:	2339      	movs	r3, #57	; 0x39
 80137f4:	f88b 3000 	strb.w	r3, [fp]
 80137f8:	462b      	mov	r3, r5
 80137fa:	461d      	mov	r5, r3
 80137fc:	3b01      	subs	r3, #1
 80137fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013802:	2a39      	cmp	r2, #57	; 0x39
 8013804:	d071      	beq.n	80138ea <_dtoa_r+0xb9a>
 8013806:	3201      	adds	r2, #1
 8013808:	701a      	strb	r2, [r3, #0]
 801380a:	e746      	b.n	801369a <_dtoa_r+0x94a>
 801380c:	2a00      	cmp	r2, #0
 801380e:	dd07      	ble.n	8013820 <_dtoa_r+0xad0>
 8013810:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013814:	d0ed      	beq.n	80137f2 <_dtoa_r+0xaa2>
 8013816:	f10a 0301 	add.w	r3, sl, #1
 801381a:	f88b 3000 	strb.w	r3, [fp]
 801381e:	e73c      	b.n	801369a <_dtoa_r+0x94a>
 8013820:	9b05      	ldr	r3, [sp, #20]
 8013822:	f809 ac01 	strb.w	sl, [r9, #-1]
 8013826:	4599      	cmp	r9, r3
 8013828:	d047      	beq.n	80138ba <_dtoa_r+0xb6a>
 801382a:	ee18 1a10 	vmov	r1, s16
 801382e:	2300      	movs	r3, #0
 8013830:	220a      	movs	r2, #10
 8013832:	4620      	mov	r0, r4
 8013834:	f000 fbec 	bl	8014010 <__multadd>
 8013838:	45b8      	cmp	r8, r7
 801383a:	ee08 0a10 	vmov	s16, r0
 801383e:	f04f 0300 	mov.w	r3, #0
 8013842:	f04f 020a 	mov.w	r2, #10
 8013846:	4641      	mov	r1, r8
 8013848:	4620      	mov	r0, r4
 801384a:	d106      	bne.n	801385a <_dtoa_r+0xb0a>
 801384c:	f000 fbe0 	bl	8014010 <__multadd>
 8013850:	4680      	mov	r8, r0
 8013852:	4607      	mov	r7, r0
 8013854:	f109 0901 	add.w	r9, r9, #1
 8013858:	e772      	b.n	8013740 <_dtoa_r+0x9f0>
 801385a:	f000 fbd9 	bl	8014010 <__multadd>
 801385e:	4639      	mov	r1, r7
 8013860:	4680      	mov	r8, r0
 8013862:	2300      	movs	r3, #0
 8013864:	220a      	movs	r2, #10
 8013866:	4620      	mov	r0, r4
 8013868:	f000 fbd2 	bl	8014010 <__multadd>
 801386c:	4607      	mov	r7, r0
 801386e:	e7f1      	b.n	8013854 <_dtoa_r+0xb04>
 8013870:	9b03      	ldr	r3, [sp, #12]
 8013872:	9302      	str	r3, [sp, #8]
 8013874:	9d01      	ldr	r5, [sp, #4]
 8013876:	ee18 0a10 	vmov	r0, s16
 801387a:	4631      	mov	r1, r6
 801387c:	f7ff f9dc 	bl	8012c38 <quorem>
 8013880:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8013884:	9b01      	ldr	r3, [sp, #4]
 8013886:	f805 ab01 	strb.w	sl, [r5], #1
 801388a:	1aea      	subs	r2, r5, r3
 801388c:	9b02      	ldr	r3, [sp, #8]
 801388e:	4293      	cmp	r3, r2
 8013890:	dd09      	ble.n	80138a6 <_dtoa_r+0xb56>
 8013892:	ee18 1a10 	vmov	r1, s16
 8013896:	2300      	movs	r3, #0
 8013898:	220a      	movs	r2, #10
 801389a:	4620      	mov	r0, r4
 801389c:	f000 fbb8 	bl	8014010 <__multadd>
 80138a0:	ee08 0a10 	vmov	s16, r0
 80138a4:	e7e7      	b.n	8013876 <_dtoa_r+0xb26>
 80138a6:	9b02      	ldr	r3, [sp, #8]
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	bfc8      	it	gt
 80138ac:	461d      	movgt	r5, r3
 80138ae:	9b01      	ldr	r3, [sp, #4]
 80138b0:	bfd8      	it	le
 80138b2:	2501      	movle	r5, #1
 80138b4:	441d      	add	r5, r3
 80138b6:	f04f 0800 	mov.w	r8, #0
 80138ba:	ee18 1a10 	vmov	r1, s16
 80138be:	2201      	movs	r2, #1
 80138c0:	4620      	mov	r0, r4
 80138c2:	f000 fd55 	bl	8014370 <__lshift>
 80138c6:	4631      	mov	r1, r6
 80138c8:	ee08 0a10 	vmov	s16, r0
 80138cc:	f000 fdc0 	bl	8014450 <__mcmp>
 80138d0:	2800      	cmp	r0, #0
 80138d2:	dc91      	bgt.n	80137f8 <_dtoa_r+0xaa8>
 80138d4:	d102      	bne.n	80138dc <_dtoa_r+0xb8c>
 80138d6:	f01a 0f01 	tst.w	sl, #1
 80138da:	d18d      	bne.n	80137f8 <_dtoa_r+0xaa8>
 80138dc:	462b      	mov	r3, r5
 80138de:	461d      	mov	r5, r3
 80138e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80138e4:	2a30      	cmp	r2, #48	; 0x30
 80138e6:	d0fa      	beq.n	80138de <_dtoa_r+0xb8e>
 80138e8:	e6d7      	b.n	801369a <_dtoa_r+0x94a>
 80138ea:	9a01      	ldr	r2, [sp, #4]
 80138ec:	429a      	cmp	r2, r3
 80138ee:	d184      	bne.n	80137fa <_dtoa_r+0xaaa>
 80138f0:	9b00      	ldr	r3, [sp, #0]
 80138f2:	3301      	adds	r3, #1
 80138f4:	9300      	str	r3, [sp, #0]
 80138f6:	2331      	movs	r3, #49	; 0x31
 80138f8:	7013      	strb	r3, [r2, #0]
 80138fa:	e6ce      	b.n	801369a <_dtoa_r+0x94a>
 80138fc:	4b09      	ldr	r3, [pc, #36]	; (8013924 <_dtoa_r+0xbd4>)
 80138fe:	f7ff ba95 	b.w	8012e2c <_dtoa_r+0xdc>
 8013902:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013904:	2b00      	cmp	r3, #0
 8013906:	f47f aa6e 	bne.w	8012de6 <_dtoa_r+0x96>
 801390a:	4b07      	ldr	r3, [pc, #28]	; (8013928 <_dtoa_r+0xbd8>)
 801390c:	f7ff ba8e 	b.w	8012e2c <_dtoa_r+0xdc>
 8013910:	9b02      	ldr	r3, [sp, #8]
 8013912:	2b00      	cmp	r3, #0
 8013914:	dcae      	bgt.n	8013874 <_dtoa_r+0xb24>
 8013916:	9b06      	ldr	r3, [sp, #24]
 8013918:	2b02      	cmp	r3, #2
 801391a:	f73f aea8 	bgt.w	801366e <_dtoa_r+0x91e>
 801391e:	e7a9      	b.n	8013874 <_dtoa_r+0xb24>
 8013920:	08016630 	.word	0x08016630
 8013924:	080165bc 	.word	0x080165bc
 8013928:	080165af 	.word	0x080165af

0801392c <__errno>:
 801392c:	4b01      	ldr	r3, [pc, #4]	; (8013934 <__errno+0x8>)
 801392e:	6818      	ldr	r0, [r3, #0]
 8013930:	4770      	bx	lr
 8013932:	bf00      	nop
 8013934:	20000060 	.word	0x20000060

08013938 <__sflush_r>:
 8013938:	898a      	ldrh	r2, [r1, #12]
 801393a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801393e:	4605      	mov	r5, r0
 8013940:	0710      	lsls	r0, r2, #28
 8013942:	460c      	mov	r4, r1
 8013944:	d458      	bmi.n	80139f8 <__sflush_r+0xc0>
 8013946:	684b      	ldr	r3, [r1, #4]
 8013948:	2b00      	cmp	r3, #0
 801394a:	dc05      	bgt.n	8013958 <__sflush_r+0x20>
 801394c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801394e:	2b00      	cmp	r3, #0
 8013950:	dc02      	bgt.n	8013958 <__sflush_r+0x20>
 8013952:	2000      	movs	r0, #0
 8013954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013958:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801395a:	2e00      	cmp	r6, #0
 801395c:	d0f9      	beq.n	8013952 <__sflush_r+0x1a>
 801395e:	2300      	movs	r3, #0
 8013960:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013964:	682f      	ldr	r7, [r5, #0]
 8013966:	602b      	str	r3, [r5, #0]
 8013968:	d032      	beq.n	80139d0 <__sflush_r+0x98>
 801396a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801396c:	89a3      	ldrh	r3, [r4, #12]
 801396e:	075a      	lsls	r2, r3, #29
 8013970:	d505      	bpl.n	801397e <__sflush_r+0x46>
 8013972:	6863      	ldr	r3, [r4, #4]
 8013974:	1ac0      	subs	r0, r0, r3
 8013976:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013978:	b10b      	cbz	r3, 801397e <__sflush_r+0x46>
 801397a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801397c:	1ac0      	subs	r0, r0, r3
 801397e:	2300      	movs	r3, #0
 8013980:	4602      	mov	r2, r0
 8013982:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013984:	6a21      	ldr	r1, [r4, #32]
 8013986:	4628      	mov	r0, r5
 8013988:	47b0      	blx	r6
 801398a:	1c43      	adds	r3, r0, #1
 801398c:	89a3      	ldrh	r3, [r4, #12]
 801398e:	d106      	bne.n	801399e <__sflush_r+0x66>
 8013990:	6829      	ldr	r1, [r5, #0]
 8013992:	291d      	cmp	r1, #29
 8013994:	d82c      	bhi.n	80139f0 <__sflush_r+0xb8>
 8013996:	4a2a      	ldr	r2, [pc, #168]	; (8013a40 <__sflush_r+0x108>)
 8013998:	40ca      	lsrs	r2, r1
 801399a:	07d6      	lsls	r6, r2, #31
 801399c:	d528      	bpl.n	80139f0 <__sflush_r+0xb8>
 801399e:	2200      	movs	r2, #0
 80139a0:	6062      	str	r2, [r4, #4]
 80139a2:	04d9      	lsls	r1, r3, #19
 80139a4:	6922      	ldr	r2, [r4, #16]
 80139a6:	6022      	str	r2, [r4, #0]
 80139a8:	d504      	bpl.n	80139b4 <__sflush_r+0x7c>
 80139aa:	1c42      	adds	r2, r0, #1
 80139ac:	d101      	bne.n	80139b2 <__sflush_r+0x7a>
 80139ae:	682b      	ldr	r3, [r5, #0]
 80139b0:	b903      	cbnz	r3, 80139b4 <__sflush_r+0x7c>
 80139b2:	6560      	str	r0, [r4, #84]	; 0x54
 80139b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80139b6:	602f      	str	r7, [r5, #0]
 80139b8:	2900      	cmp	r1, #0
 80139ba:	d0ca      	beq.n	8013952 <__sflush_r+0x1a>
 80139bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80139c0:	4299      	cmp	r1, r3
 80139c2:	d002      	beq.n	80139ca <__sflush_r+0x92>
 80139c4:	4628      	mov	r0, r5
 80139c6:	f000 fe5b 	bl	8014680 <_free_r>
 80139ca:	2000      	movs	r0, #0
 80139cc:	6360      	str	r0, [r4, #52]	; 0x34
 80139ce:	e7c1      	b.n	8013954 <__sflush_r+0x1c>
 80139d0:	6a21      	ldr	r1, [r4, #32]
 80139d2:	2301      	movs	r3, #1
 80139d4:	4628      	mov	r0, r5
 80139d6:	47b0      	blx	r6
 80139d8:	1c41      	adds	r1, r0, #1
 80139da:	d1c7      	bne.n	801396c <__sflush_r+0x34>
 80139dc:	682b      	ldr	r3, [r5, #0]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d0c4      	beq.n	801396c <__sflush_r+0x34>
 80139e2:	2b1d      	cmp	r3, #29
 80139e4:	d001      	beq.n	80139ea <__sflush_r+0xb2>
 80139e6:	2b16      	cmp	r3, #22
 80139e8:	d101      	bne.n	80139ee <__sflush_r+0xb6>
 80139ea:	602f      	str	r7, [r5, #0]
 80139ec:	e7b1      	b.n	8013952 <__sflush_r+0x1a>
 80139ee:	89a3      	ldrh	r3, [r4, #12]
 80139f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80139f4:	81a3      	strh	r3, [r4, #12]
 80139f6:	e7ad      	b.n	8013954 <__sflush_r+0x1c>
 80139f8:	690f      	ldr	r7, [r1, #16]
 80139fa:	2f00      	cmp	r7, #0
 80139fc:	d0a9      	beq.n	8013952 <__sflush_r+0x1a>
 80139fe:	0793      	lsls	r3, r2, #30
 8013a00:	680e      	ldr	r6, [r1, #0]
 8013a02:	bf08      	it	eq
 8013a04:	694b      	ldreq	r3, [r1, #20]
 8013a06:	600f      	str	r7, [r1, #0]
 8013a08:	bf18      	it	ne
 8013a0a:	2300      	movne	r3, #0
 8013a0c:	eba6 0807 	sub.w	r8, r6, r7
 8013a10:	608b      	str	r3, [r1, #8]
 8013a12:	f1b8 0f00 	cmp.w	r8, #0
 8013a16:	dd9c      	ble.n	8013952 <__sflush_r+0x1a>
 8013a18:	6a21      	ldr	r1, [r4, #32]
 8013a1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013a1c:	4643      	mov	r3, r8
 8013a1e:	463a      	mov	r2, r7
 8013a20:	4628      	mov	r0, r5
 8013a22:	47b0      	blx	r6
 8013a24:	2800      	cmp	r0, #0
 8013a26:	dc06      	bgt.n	8013a36 <__sflush_r+0xfe>
 8013a28:	89a3      	ldrh	r3, [r4, #12]
 8013a2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a2e:	81a3      	strh	r3, [r4, #12]
 8013a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013a34:	e78e      	b.n	8013954 <__sflush_r+0x1c>
 8013a36:	4407      	add	r7, r0
 8013a38:	eba8 0800 	sub.w	r8, r8, r0
 8013a3c:	e7e9      	b.n	8013a12 <__sflush_r+0xda>
 8013a3e:	bf00      	nop
 8013a40:	20400001 	.word	0x20400001

08013a44 <_fflush_r>:
 8013a44:	b538      	push	{r3, r4, r5, lr}
 8013a46:	690b      	ldr	r3, [r1, #16]
 8013a48:	4605      	mov	r5, r0
 8013a4a:	460c      	mov	r4, r1
 8013a4c:	b913      	cbnz	r3, 8013a54 <_fflush_r+0x10>
 8013a4e:	2500      	movs	r5, #0
 8013a50:	4628      	mov	r0, r5
 8013a52:	bd38      	pop	{r3, r4, r5, pc}
 8013a54:	b118      	cbz	r0, 8013a5e <_fflush_r+0x1a>
 8013a56:	6983      	ldr	r3, [r0, #24]
 8013a58:	b90b      	cbnz	r3, 8013a5e <_fflush_r+0x1a>
 8013a5a:	f000 f887 	bl	8013b6c <__sinit>
 8013a5e:	4b14      	ldr	r3, [pc, #80]	; (8013ab0 <_fflush_r+0x6c>)
 8013a60:	429c      	cmp	r4, r3
 8013a62:	d11b      	bne.n	8013a9c <_fflush_r+0x58>
 8013a64:	686c      	ldr	r4, [r5, #4]
 8013a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d0ef      	beq.n	8013a4e <_fflush_r+0xa>
 8013a6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013a70:	07d0      	lsls	r0, r2, #31
 8013a72:	d404      	bmi.n	8013a7e <_fflush_r+0x3a>
 8013a74:	0599      	lsls	r1, r3, #22
 8013a76:	d402      	bmi.n	8013a7e <_fflush_r+0x3a>
 8013a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013a7a:	f000 f986 	bl	8013d8a <__retarget_lock_acquire_recursive>
 8013a7e:	4628      	mov	r0, r5
 8013a80:	4621      	mov	r1, r4
 8013a82:	f7ff ff59 	bl	8013938 <__sflush_r>
 8013a86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013a88:	07da      	lsls	r2, r3, #31
 8013a8a:	4605      	mov	r5, r0
 8013a8c:	d4e0      	bmi.n	8013a50 <_fflush_r+0xc>
 8013a8e:	89a3      	ldrh	r3, [r4, #12]
 8013a90:	059b      	lsls	r3, r3, #22
 8013a92:	d4dd      	bmi.n	8013a50 <_fflush_r+0xc>
 8013a94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013a96:	f000 f97a 	bl	8013d8e <__retarget_lock_release_recursive>
 8013a9a:	e7d9      	b.n	8013a50 <_fflush_r+0xc>
 8013a9c:	4b05      	ldr	r3, [pc, #20]	; (8013ab4 <_fflush_r+0x70>)
 8013a9e:	429c      	cmp	r4, r3
 8013aa0:	d101      	bne.n	8013aa6 <_fflush_r+0x62>
 8013aa2:	68ac      	ldr	r4, [r5, #8]
 8013aa4:	e7df      	b.n	8013a66 <_fflush_r+0x22>
 8013aa6:	4b04      	ldr	r3, [pc, #16]	; (8013ab8 <_fflush_r+0x74>)
 8013aa8:	429c      	cmp	r4, r3
 8013aaa:	bf08      	it	eq
 8013aac:	68ec      	ldreq	r4, [r5, #12]
 8013aae:	e7da      	b.n	8013a66 <_fflush_r+0x22>
 8013ab0:	08016664 	.word	0x08016664
 8013ab4:	08016684 	.word	0x08016684
 8013ab8:	08016644 	.word	0x08016644

08013abc <std>:
 8013abc:	2300      	movs	r3, #0
 8013abe:	b510      	push	{r4, lr}
 8013ac0:	4604      	mov	r4, r0
 8013ac2:	e9c0 3300 	strd	r3, r3, [r0]
 8013ac6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013aca:	6083      	str	r3, [r0, #8]
 8013acc:	8181      	strh	r1, [r0, #12]
 8013ace:	6643      	str	r3, [r0, #100]	; 0x64
 8013ad0:	81c2      	strh	r2, [r0, #14]
 8013ad2:	6183      	str	r3, [r0, #24]
 8013ad4:	4619      	mov	r1, r3
 8013ad6:	2208      	movs	r2, #8
 8013ad8:	305c      	adds	r0, #92	; 0x5c
 8013ada:	f000 fa23 	bl	8013f24 <memset>
 8013ade:	4b05      	ldr	r3, [pc, #20]	; (8013af4 <std+0x38>)
 8013ae0:	6263      	str	r3, [r4, #36]	; 0x24
 8013ae2:	4b05      	ldr	r3, [pc, #20]	; (8013af8 <std+0x3c>)
 8013ae4:	62a3      	str	r3, [r4, #40]	; 0x28
 8013ae6:	4b05      	ldr	r3, [pc, #20]	; (8013afc <std+0x40>)
 8013ae8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013aea:	4b05      	ldr	r3, [pc, #20]	; (8013b00 <std+0x44>)
 8013aec:	6224      	str	r4, [r4, #32]
 8013aee:	6323      	str	r3, [r4, #48]	; 0x30
 8013af0:	bd10      	pop	{r4, pc}
 8013af2:	bf00      	nop
 8013af4:	0801580d 	.word	0x0801580d
 8013af8:	0801582f 	.word	0x0801582f
 8013afc:	08015867 	.word	0x08015867
 8013b00:	0801588b 	.word	0x0801588b

08013b04 <_cleanup_r>:
 8013b04:	4901      	ldr	r1, [pc, #4]	; (8013b0c <_cleanup_r+0x8>)
 8013b06:	f000 b8e7 	b.w	8013cd8 <_fwalk_reent>
 8013b0a:	bf00      	nop
 8013b0c:	08013a45 	.word	0x08013a45

08013b10 <__sfmoreglue>:
 8013b10:	b570      	push	{r4, r5, r6, lr}
 8013b12:	2268      	movs	r2, #104	; 0x68
 8013b14:	1e4d      	subs	r5, r1, #1
 8013b16:	4355      	muls	r5, r2
 8013b18:	460e      	mov	r6, r1
 8013b1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013b1e:	f000 fe1b 	bl	8014758 <_malloc_r>
 8013b22:	4604      	mov	r4, r0
 8013b24:	b140      	cbz	r0, 8013b38 <__sfmoreglue+0x28>
 8013b26:	2100      	movs	r1, #0
 8013b28:	e9c0 1600 	strd	r1, r6, [r0]
 8013b2c:	300c      	adds	r0, #12
 8013b2e:	60a0      	str	r0, [r4, #8]
 8013b30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013b34:	f000 f9f6 	bl	8013f24 <memset>
 8013b38:	4620      	mov	r0, r4
 8013b3a:	bd70      	pop	{r4, r5, r6, pc}

08013b3c <__sfp_lock_acquire>:
 8013b3c:	4801      	ldr	r0, [pc, #4]	; (8013b44 <__sfp_lock_acquire+0x8>)
 8013b3e:	f000 b924 	b.w	8013d8a <__retarget_lock_acquire_recursive>
 8013b42:	bf00      	nop
 8013b44:	20000516 	.word	0x20000516

08013b48 <__sfp_lock_release>:
 8013b48:	4801      	ldr	r0, [pc, #4]	; (8013b50 <__sfp_lock_release+0x8>)
 8013b4a:	f000 b920 	b.w	8013d8e <__retarget_lock_release_recursive>
 8013b4e:	bf00      	nop
 8013b50:	20000516 	.word	0x20000516

08013b54 <__sinit_lock_acquire>:
 8013b54:	4801      	ldr	r0, [pc, #4]	; (8013b5c <__sinit_lock_acquire+0x8>)
 8013b56:	f000 b918 	b.w	8013d8a <__retarget_lock_acquire_recursive>
 8013b5a:	bf00      	nop
 8013b5c:	20000517 	.word	0x20000517

08013b60 <__sinit_lock_release>:
 8013b60:	4801      	ldr	r0, [pc, #4]	; (8013b68 <__sinit_lock_release+0x8>)
 8013b62:	f000 b914 	b.w	8013d8e <__retarget_lock_release_recursive>
 8013b66:	bf00      	nop
 8013b68:	20000517 	.word	0x20000517

08013b6c <__sinit>:
 8013b6c:	b510      	push	{r4, lr}
 8013b6e:	4604      	mov	r4, r0
 8013b70:	f7ff fff0 	bl	8013b54 <__sinit_lock_acquire>
 8013b74:	69a3      	ldr	r3, [r4, #24]
 8013b76:	b11b      	cbz	r3, 8013b80 <__sinit+0x14>
 8013b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b7c:	f7ff bff0 	b.w	8013b60 <__sinit_lock_release>
 8013b80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013b84:	6523      	str	r3, [r4, #80]	; 0x50
 8013b86:	4b13      	ldr	r3, [pc, #76]	; (8013bd4 <__sinit+0x68>)
 8013b88:	4a13      	ldr	r2, [pc, #76]	; (8013bd8 <__sinit+0x6c>)
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	62a2      	str	r2, [r4, #40]	; 0x28
 8013b8e:	42a3      	cmp	r3, r4
 8013b90:	bf04      	itt	eq
 8013b92:	2301      	moveq	r3, #1
 8013b94:	61a3      	streq	r3, [r4, #24]
 8013b96:	4620      	mov	r0, r4
 8013b98:	f000 f820 	bl	8013bdc <__sfp>
 8013b9c:	6060      	str	r0, [r4, #4]
 8013b9e:	4620      	mov	r0, r4
 8013ba0:	f000 f81c 	bl	8013bdc <__sfp>
 8013ba4:	60a0      	str	r0, [r4, #8]
 8013ba6:	4620      	mov	r0, r4
 8013ba8:	f000 f818 	bl	8013bdc <__sfp>
 8013bac:	2200      	movs	r2, #0
 8013bae:	60e0      	str	r0, [r4, #12]
 8013bb0:	2104      	movs	r1, #4
 8013bb2:	6860      	ldr	r0, [r4, #4]
 8013bb4:	f7ff ff82 	bl	8013abc <std>
 8013bb8:	68a0      	ldr	r0, [r4, #8]
 8013bba:	2201      	movs	r2, #1
 8013bbc:	2109      	movs	r1, #9
 8013bbe:	f7ff ff7d 	bl	8013abc <std>
 8013bc2:	68e0      	ldr	r0, [r4, #12]
 8013bc4:	2202      	movs	r2, #2
 8013bc6:	2112      	movs	r1, #18
 8013bc8:	f7ff ff78 	bl	8013abc <std>
 8013bcc:	2301      	movs	r3, #1
 8013bce:	61a3      	str	r3, [r4, #24]
 8013bd0:	e7d2      	b.n	8013b78 <__sinit+0xc>
 8013bd2:	bf00      	nop
 8013bd4:	080166a4 	.word	0x080166a4
 8013bd8:	08013b05 	.word	0x08013b05

08013bdc <__sfp>:
 8013bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bde:	4607      	mov	r7, r0
 8013be0:	f7ff ffac 	bl	8013b3c <__sfp_lock_acquire>
 8013be4:	4b1e      	ldr	r3, [pc, #120]	; (8013c60 <__sfp+0x84>)
 8013be6:	681e      	ldr	r6, [r3, #0]
 8013be8:	69b3      	ldr	r3, [r6, #24]
 8013bea:	b913      	cbnz	r3, 8013bf2 <__sfp+0x16>
 8013bec:	4630      	mov	r0, r6
 8013bee:	f7ff ffbd 	bl	8013b6c <__sinit>
 8013bf2:	3648      	adds	r6, #72	; 0x48
 8013bf4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013bf8:	3b01      	subs	r3, #1
 8013bfa:	d503      	bpl.n	8013c04 <__sfp+0x28>
 8013bfc:	6833      	ldr	r3, [r6, #0]
 8013bfe:	b30b      	cbz	r3, 8013c44 <__sfp+0x68>
 8013c00:	6836      	ldr	r6, [r6, #0]
 8013c02:	e7f7      	b.n	8013bf4 <__sfp+0x18>
 8013c04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013c08:	b9d5      	cbnz	r5, 8013c40 <__sfp+0x64>
 8013c0a:	4b16      	ldr	r3, [pc, #88]	; (8013c64 <__sfp+0x88>)
 8013c0c:	60e3      	str	r3, [r4, #12]
 8013c0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013c12:	6665      	str	r5, [r4, #100]	; 0x64
 8013c14:	f000 f8b8 	bl	8013d88 <__retarget_lock_init_recursive>
 8013c18:	f7ff ff96 	bl	8013b48 <__sfp_lock_release>
 8013c1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013c20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013c24:	6025      	str	r5, [r4, #0]
 8013c26:	61a5      	str	r5, [r4, #24]
 8013c28:	2208      	movs	r2, #8
 8013c2a:	4629      	mov	r1, r5
 8013c2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013c30:	f000 f978 	bl	8013f24 <memset>
 8013c34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013c38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013c3c:	4620      	mov	r0, r4
 8013c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c40:	3468      	adds	r4, #104	; 0x68
 8013c42:	e7d9      	b.n	8013bf8 <__sfp+0x1c>
 8013c44:	2104      	movs	r1, #4
 8013c46:	4638      	mov	r0, r7
 8013c48:	f7ff ff62 	bl	8013b10 <__sfmoreglue>
 8013c4c:	4604      	mov	r4, r0
 8013c4e:	6030      	str	r0, [r6, #0]
 8013c50:	2800      	cmp	r0, #0
 8013c52:	d1d5      	bne.n	8013c00 <__sfp+0x24>
 8013c54:	f7ff ff78 	bl	8013b48 <__sfp_lock_release>
 8013c58:	230c      	movs	r3, #12
 8013c5a:	603b      	str	r3, [r7, #0]
 8013c5c:	e7ee      	b.n	8013c3c <__sfp+0x60>
 8013c5e:	bf00      	nop
 8013c60:	080166a4 	.word	0x080166a4
 8013c64:	ffff0001 	.word	0xffff0001

08013c68 <__libc_fini_array>:
 8013c68:	b538      	push	{r3, r4, r5, lr}
 8013c6a:	4d07      	ldr	r5, [pc, #28]	; (8013c88 <__libc_fini_array+0x20>)
 8013c6c:	4c07      	ldr	r4, [pc, #28]	; (8013c8c <__libc_fini_array+0x24>)
 8013c6e:	1b64      	subs	r4, r4, r5
 8013c70:	10a4      	asrs	r4, r4, #2
 8013c72:	b91c      	cbnz	r4, 8013c7c <__libc_fini_array+0x14>
 8013c74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013c78:	f002 b92a 	b.w	8015ed0 <_fini>
 8013c7c:	3c01      	subs	r4, #1
 8013c7e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8013c82:	4798      	blx	r3
 8013c84:	e7f5      	b.n	8013c72 <__libc_fini_array+0xa>
 8013c86:	bf00      	nop
 8013c88:	08016888 	.word	0x08016888
 8013c8c:	0801688c 	.word	0x0801688c

08013c90 <fiprintf>:
 8013c90:	b40e      	push	{r1, r2, r3}
 8013c92:	b503      	push	{r0, r1, lr}
 8013c94:	4601      	mov	r1, r0
 8013c96:	ab03      	add	r3, sp, #12
 8013c98:	4805      	ldr	r0, [pc, #20]	; (8013cb0 <fiprintf+0x20>)
 8013c9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c9e:	6800      	ldr	r0, [r0, #0]
 8013ca0:	9301      	str	r3, [sp, #4]
 8013ca2:	f000 ff89 	bl	8014bb8 <_vfiprintf_r>
 8013ca6:	b002      	add	sp, #8
 8013ca8:	f85d eb04 	ldr.w	lr, [sp], #4
 8013cac:	b003      	add	sp, #12
 8013cae:	4770      	bx	lr
 8013cb0:	20000060 	.word	0x20000060

08013cb4 <_fstat_r>:
 8013cb4:	b538      	push	{r3, r4, r5, lr}
 8013cb6:	4d07      	ldr	r5, [pc, #28]	; (8013cd4 <_fstat_r+0x20>)
 8013cb8:	2300      	movs	r3, #0
 8013cba:	4604      	mov	r4, r0
 8013cbc:	4608      	mov	r0, r1
 8013cbe:	4611      	mov	r1, r2
 8013cc0:	602b      	str	r3, [r5, #0]
 8013cc2:	f7ee fc3d 	bl	8002540 <_fstat>
 8013cc6:	1c43      	adds	r3, r0, #1
 8013cc8:	d102      	bne.n	8013cd0 <_fstat_r+0x1c>
 8013cca:	682b      	ldr	r3, [r5, #0]
 8013ccc:	b103      	cbz	r3, 8013cd0 <_fstat_r+0x1c>
 8013cce:	6023      	str	r3, [r4, #0]
 8013cd0:	bd38      	pop	{r3, r4, r5, pc}
 8013cd2:	bf00      	nop
 8013cd4:	20000628 	.word	0x20000628

08013cd8 <_fwalk_reent>:
 8013cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013cdc:	4606      	mov	r6, r0
 8013cde:	4688      	mov	r8, r1
 8013ce0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013ce4:	2700      	movs	r7, #0
 8013ce6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013cea:	f1b9 0901 	subs.w	r9, r9, #1
 8013cee:	d505      	bpl.n	8013cfc <_fwalk_reent+0x24>
 8013cf0:	6824      	ldr	r4, [r4, #0]
 8013cf2:	2c00      	cmp	r4, #0
 8013cf4:	d1f7      	bne.n	8013ce6 <_fwalk_reent+0xe>
 8013cf6:	4638      	mov	r0, r7
 8013cf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cfc:	89ab      	ldrh	r3, [r5, #12]
 8013cfe:	2b01      	cmp	r3, #1
 8013d00:	d907      	bls.n	8013d12 <_fwalk_reent+0x3a>
 8013d02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013d06:	3301      	adds	r3, #1
 8013d08:	d003      	beq.n	8013d12 <_fwalk_reent+0x3a>
 8013d0a:	4629      	mov	r1, r5
 8013d0c:	4630      	mov	r0, r6
 8013d0e:	47c0      	blx	r8
 8013d10:	4307      	orrs	r7, r0
 8013d12:	3568      	adds	r5, #104	; 0x68
 8013d14:	e7e9      	b.n	8013cea <_fwalk_reent+0x12>
	...

08013d18 <__libc_init_array>:
 8013d18:	b570      	push	{r4, r5, r6, lr}
 8013d1a:	4d0d      	ldr	r5, [pc, #52]	; (8013d50 <__libc_init_array+0x38>)
 8013d1c:	4c0d      	ldr	r4, [pc, #52]	; (8013d54 <__libc_init_array+0x3c>)
 8013d1e:	1b64      	subs	r4, r4, r5
 8013d20:	10a4      	asrs	r4, r4, #2
 8013d22:	2600      	movs	r6, #0
 8013d24:	42a6      	cmp	r6, r4
 8013d26:	d109      	bne.n	8013d3c <__libc_init_array+0x24>
 8013d28:	4d0b      	ldr	r5, [pc, #44]	; (8013d58 <__libc_init_array+0x40>)
 8013d2a:	4c0c      	ldr	r4, [pc, #48]	; (8013d5c <__libc_init_array+0x44>)
 8013d2c:	f002 f8ca 	bl	8015ec4 <_init>
 8013d30:	1b64      	subs	r4, r4, r5
 8013d32:	10a4      	asrs	r4, r4, #2
 8013d34:	2600      	movs	r6, #0
 8013d36:	42a6      	cmp	r6, r4
 8013d38:	d105      	bne.n	8013d46 <__libc_init_array+0x2e>
 8013d3a:	bd70      	pop	{r4, r5, r6, pc}
 8013d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013d40:	4798      	blx	r3
 8013d42:	3601      	adds	r6, #1
 8013d44:	e7ee      	b.n	8013d24 <__libc_init_array+0xc>
 8013d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8013d4a:	4798      	blx	r3
 8013d4c:	3601      	adds	r6, #1
 8013d4e:	e7f2      	b.n	8013d36 <__libc_init_array+0x1e>
 8013d50:	08016870 	.word	0x08016870
 8013d54:	08016870 	.word	0x08016870
 8013d58:	08016870 	.word	0x08016870
 8013d5c:	08016888 	.word	0x08016888

08013d60 <_isatty_r>:
 8013d60:	b538      	push	{r3, r4, r5, lr}
 8013d62:	4d06      	ldr	r5, [pc, #24]	; (8013d7c <_isatty_r+0x1c>)
 8013d64:	2300      	movs	r3, #0
 8013d66:	4604      	mov	r4, r0
 8013d68:	4608      	mov	r0, r1
 8013d6a:	602b      	str	r3, [r5, #0]
 8013d6c:	f7ee fbf8 	bl	8002560 <_isatty>
 8013d70:	1c43      	adds	r3, r0, #1
 8013d72:	d102      	bne.n	8013d7a <_isatty_r+0x1a>
 8013d74:	682b      	ldr	r3, [r5, #0]
 8013d76:	b103      	cbz	r3, 8013d7a <_isatty_r+0x1a>
 8013d78:	6023      	str	r3, [r4, #0]
 8013d7a:	bd38      	pop	{r3, r4, r5, pc}
 8013d7c:	20000628 	.word	0x20000628

08013d80 <_localeconv_r>:
 8013d80:	4800      	ldr	r0, [pc, #0]	; (8013d84 <_localeconv_r+0x4>)
 8013d82:	4770      	bx	lr
 8013d84:	200001b4 	.word	0x200001b4

08013d88 <__retarget_lock_init_recursive>:
 8013d88:	4770      	bx	lr

08013d8a <__retarget_lock_acquire_recursive>:
 8013d8a:	4770      	bx	lr

08013d8c <__retarget_lock_release>:
 8013d8c:	4770      	bx	lr

08013d8e <__retarget_lock_release_recursive>:
 8013d8e:	4770      	bx	lr

08013d90 <_lseek_r>:
 8013d90:	b538      	push	{r3, r4, r5, lr}
 8013d92:	4d07      	ldr	r5, [pc, #28]	; (8013db0 <_lseek_r+0x20>)
 8013d94:	4604      	mov	r4, r0
 8013d96:	4608      	mov	r0, r1
 8013d98:	4611      	mov	r1, r2
 8013d9a:	2200      	movs	r2, #0
 8013d9c:	602a      	str	r2, [r5, #0]
 8013d9e:	461a      	mov	r2, r3
 8013da0:	f7ee fbe9 	bl	8002576 <_lseek>
 8013da4:	1c43      	adds	r3, r0, #1
 8013da6:	d102      	bne.n	8013dae <_lseek_r+0x1e>
 8013da8:	682b      	ldr	r3, [r5, #0]
 8013daa:	b103      	cbz	r3, 8013dae <_lseek_r+0x1e>
 8013dac:	6023      	str	r3, [r4, #0]
 8013dae:	bd38      	pop	{r3, r4, r5, pc}
 8013db0:	20000628 	.word	0x20000628

08013db4 <__swhatbuf_r>:
 8013db4:	b570      	push	{r4, r5, r6, lr}
 8013db6:	460e      	mov	r6, r1
 8013db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013dbc:	2900      	cmp	r1, #0
 8013dbe:	b096      	sub	sp, #88	; 0x58
 8013dc0:	4614      	mov	r4, r2
 8013dc2:	461d      	mov	r5, r3
 8013dc4:	da08      	bge.n	8013dd8 <__swhatbuf_r+0x24>
 8013dc6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013dca:	2200      	movs	r2, #0
 8013dcc:	602a      	str	r2, [r5, #0]
 8013dce:	061a      	lsls	r2, r3, #24
 8013dd0:	d410      	bmi.n	8013df4 <__swhatbuf_r+0x40>
 8013dd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013dd6:	e00e      	b.n	8013df6 <__swhatbuf_r+0x42>
 8013dd8:	466a      	mov	r2, sp
 8013dda:	f7ff ff6b 	bl	8013cb4 <_fstat_r>
 8013dde:	2800      	cmp	r0, #0
 8013de0:	dbf1      	blt.n	8013dc6 <__swhatbuf_r+0x12>
 8013de2:	9a01      	ldr	r2, [sp, #4]
 8013de4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013de8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013dec:	425a      	negs	r2, r3
 8013dee:	415a      	adcs	r2, r3
 8013df0:	602a      	str	r2, [r5, #0]
 8013df2:	e7ee      	b.n	8013dd2 <__swhatbuf_r+0x1e>
 8013df4:	2340      	movs	r3, #64	; 0x40
 8013df6:	2000      	movs	r0, #0
 8013df8:	6023      	str	r3, [r4, #0]
 8013dfa:	b016      	add	sp, #88	; 0x58
 8013dfc:	bd70      	pop	{r4, r5, r6, pc}
	...

08013e00 <__smakebuf_r>:
 8013e00:	898b      	ldrh	r3, [r1, #12]
 8013e02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013e04:	079d      	lsls	r5, r3, #30
 8013e06:	4606      	mov	r6, r0
 8013e08:	460c      	mov	r4, r1
 8013e0a:	d507      	bpl.n	8013e1c <__smakebuf_r+0x1c>
 8013e0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013e10:	6023      	str	r3, [r4, #0]
 8013e12:	6123      	str	r3, [r4, #16]
 8013e14:	2301      	movs	r3, #1
 8013e16:	6163      	str	r3, [r4, #20]
 8013e18:	b002      	add	sp, #8
 8013e1a:	bd70      	pop	{r4, r5, r6, pc}
 8013e1c:	ab01      	add	r3, sp, #4
 8013e1e:	466a      	mov	r2, sp
 8013e20:	f7ff ffc8 	bl	8013db4 <__swhatbuf_r>
 8013e24:	9900      	ldr	r1, [sp, #0]
 8013e26:	4605      	mov	r5, r0
 8013e28:	4630      	mov	r0, r6
 8013e2a:	f000 fc95 	bl	8014758 <_malloc_r>
 8013e2e:	b948      	cbnz	r0, 8013e44 <__smakebuf_r+0x44>
 8013e30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e34:	059a      	lsls	r2, r3, #22
 8013e36:	d4ef      	bmi.n	8013e18 <__smakebuf_r+0x18>
 8013e38:	f023 0303 	bic.w	r3, r3, #3
 8013e3c:	f043 0302 	orr.w	r3, r3, #2
 8013e40:	81a3      	strh	r3, [r4, #12]
 8013e42:	e7e3      	b.n	8013e0c <__smakebuf_r+0xc>
 8013e44:	4b0d      	ldr	r3, [pc, #52]	; (8013e7c <__smakebuf_r+0x7c>)
 8013e46:	62b3      	str	r3, [r6, #40]	; 0x28
 8013e48:	89a3      	ldrh	r3, [r4, #12]
 8013e4a:	6020      	str	r0, [r4, #0]
 8013e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013e50:	81a3      	strh	r3, [r4, #12]
 8013e52:	9b00      	ldr	r3, [sp, #0]
 8013e54:	6163      	str	r3, [r4, #20]
 8013e56:	9b01      	ldr	r3, [sp, #4]
 8013e58:	6120      	str	r0, [r4, #16]
 8013e5a:	b15b      	cbz	r3, 8013e74 <__smakebuf_r+0x74>
 8013e5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013e60:	4630      	mov	r0, r6
 8013e62:	f7ff ff7d 	bl	8013d60 <_isatty_r>
 8013e66:	b128      	cbz	r0, 8013e74 <__smakebuf_r+0x74>
 8013e68:	89a3      	ldrh	r3, [r4, #12]
 8013e6a:	f023 0303 	bic.w	r3, r3, #3
 8013e6e:	f043 0301 	orr.w	r3, r3, #1
 8013e72:	81a3      	strh	r3, [r4, #12]
 8013e74:	89a0      	ldrh	r0, [r4, #12]
 8013e76:	4305      	orrs	r5, r0
 8013e78:	81a5      	strh	r5, [r4, #12]
 8013e7a:	e7cd      	b.n	8013e18 <__smakebuf_r+0x18>
 8013e7c:	08013b05 	.word	0x08013b05

08013e80 <malloc>:
 8013e80:	4b02      	ldr	r3, [pc, #8]	; (8013e8c <malloc+0xc>)
 8013e82:	4601      	mov	r1, r0
 8013e84:	6818      	ldr	r0, [r3, #0]
 8013e86:	f000 bc67 	b.w	8014758 <_malloc_r>
 8013e8a:	bf00      	nop
 8013e8c:	20000060 	.word	0x20000060

08013e90 <__ascii_mbtowc>:
 8013e90:	b082      	sub	sp, #8
 8013e92:	b901      	cbnz	r1, 8013e96 <__ascii_mbtowc+0x6>
 8013e94:	a901      	add	r1, sp, #4
 8013e96:	b142      	cbz	r2, 8013eaa <__ascii_mbtowc+0x1a>
 8013e98:	b14b      	cbz	r3, 8013eae <__ascii_mbtowc+0x1e>
 8013e9a:	7813      	ldrb	r3, [r2, #0]
 8013e9c:	600b      	str	r3, [r1, #0]
 8013e9e:	7812      	ldrb	r2, [r2, #0]
 8013ea0:	1e10      	subs	r0, r2, #0
 8013ea2:	bf18      	it	ne
 8013ea4:	2001      	movne	r0, #1
 8013ea6:	b002      	add	sp, #8
 8013ea8:	4770      	bx	lr
 8013eaa:	4610      	mov	r0, r2
 8013eac:	e7fb      	b.n	8013ea6 <__ascii_mbtowc+0x16>
 8013eae:	f06f 0001 	mvn.w	r0, #1
 8013eb2:	e7f8      	b.n	8013ea6 <__ascii_mbtowc+0x16>

08013eb4 <memcmp>:
 8013eb4:	b510      	push	{r4, lr}
 8013eb6:	3901      	subs	r1, #1
 8013eb8:	4402      	add	r2, r0
 8013eba:	4290      	cmp	r0, r2
 8013ebc:	d101      	bne.n	8013ec2 <memcmp+0xe>
 8013ebe:	2000      	movs	r0, #0
 8013ec0:	e005      	b.n	8013ece <memcmp+0x1a>
 8013ec2:	7803      	ldrb	r3, [r0, #0]
 8013ec4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013ec8:	42a3      	cmp	r3, r4
 8013eca:	d001      	beq.n	8013ed0 <memcmp+0x1c>
 8013ecc:	1b18      	subs	r0, r3, r4
 8013ece:	bd10      	pop	{r4, pc}
 8013ed0:	3001      	adds	r0, #1
 8013ed2:	e7f2      	b.n	8013eba <memcmp+0x6>

08013ed4 <memcpy>:
 8013ed4:	440a      	add	r2, r1
 8013ed6:	4291      	cmp	r1, r2
 8013ed8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8013edc:	d100      	bne.n	8013ee0 <memcpy+0xc>
 8013ede:	4770      	bx	lr
 8013ee0:	b510      	push	{r4, lr}
 8013ee2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013ee6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013eea:	4291      	cmp	r1, r2
 8013eec:	d1f9      	bne.n	8013ee2 <memcpy+0xe>
 8013eee:	bd10      	pop	{r4, pc}

08013ef0 <memmove>:
 8013ef0:	4288      	cmp	r0, r1
 8013ef2:	b510      	push	{r4, lr}
 8013ef4:	eb01 0402 	add.w	r4, r1, r2
 8013ef8:	d902      	bls.n	8013f00 <memmove+0x10>
 8013efa:	4284      	cmp	r4, r0
 8013efc:	4623      	mov	r3, r4
 8013efe:	d807      	bhi.n	8013f10 <memmove+0x20>
 8013f00:	1e43      	subs	r3, r0, #1
 8013f02:	42a1      	cmp	r1, r4
 8013f04:	d008      	beq.n	8013f18 <memmove+0x28>
 8013f06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013f0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013f0e:	e7f8      	b.n	8013f02 <memmove+0x12>
 8013f10:	4402      	add	r2, r0
 8013f12:	4601      	mov	r1, r0
 8013f14:	428a      	cmp	r2, r1
 8013f16:	d100      	bne.n	8013f1a <memmove+0x2a>
 8013f18:	bd10      	pop	{r4, pc}
 8013f1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013f1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013f22:	e7f7      	b.n	8013f14 <memmove+0x24>

08013f24 <memset>:
 8013f24:	4402      	add	r2, r0
 8013f26:	4603      	mov	r3, r0
 8013f28:	4293      	cmp	r3, r2
 8013f2a:	d100      	bne.n	8013f2e <memset+0xa>
 8013f2c:	4770      	bx	lr
 8013f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8013f32:	e7f9      	b.n	8013f28 <memset+0x4>

08013f34 <__malloc_lock>:
 8013f34:	4801      	ldr	r0, [pc, #4]	; (8013f3c <__malloc_lock+0x8>)
 8013f36:	f7ff bf28 	b.w	8013d8a <__retarget_lock_acquire_recursive>
 8013f3a:	bf00      	nop
 8013f3c:	20000515 	.word	0x20000515

08013f40 <__malloc_unlock>:
 8013f40:	4801      	ldr	r0, [pc, #4]	; (8013f48 <__malloc_unlock+0x8>)
 8013f42:	f7ff bf24 	b.w	8013d8e <__retarget_lock_release_recursive>
 8013f46:	bf00      	nop
 8013f48:	20000515 	.word	0x20000515

08013f4c <_Balloc>:
 8013f4c:	b570      	push	{r4, r5, r6, lr}
 8013f4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013f50:	4604      	mov	r4, r0
 8013f52:	460d      	mov	r5, r1
 8013f54:	b976      	cbnz	r6, 8013f74 <_Balloc+0x28>
 8013f56:	2010      	movs	r0, #16
 8013f58:	f7ff ff92 	bl	8013e80 <malloc>
 8013f5c:	4602      	mov	r2, r0
 8013f5e:	6260      	str	r0, [r4, #36]	; 0x24
 8013f60:	b920      	cbnz	r0, 8013f6c <_Balloc+0x20>
 8013f62:	4b18      	ldr	r3, [pc, #96]	; (8013fc4 <_Balloc+0x78>)
 8013f64:	4818      	ldr	r0, [pc, #96]	; (8013fc8 <_Balloc+0x7c>)
 8013f66:	2166      	movs	r1, #102	; 0x66
 8013f68:	f7fe fe32 	bl	8012bd0 <__assert_func>
 8013f6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013f70:	6006      	str	r6, [r0, #0]
 8013f72:	60c6      	str	r6, [r0, #12]
 8013f74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013f76:	68f3      	ldr	r3, [r6, #12]
 8013f78:	b183      	cbz	r3, 8013f9c <_Balloc+0x50>
 8013f7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013f7c:	68db      	ldr	r3, [r3, #12]
 8013f7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013f82:	b9b8      	cbnz	r0, 8013fb4 <_Balloc+0x68>
 8013f84:	2101      	movs	r1, #1
 8013f86:	fa01 f605 	lsl.w	r6, r1, r5
 8013f8a:	1d72      	adds	r2, r6, #5
 8013f8c:	0092      	lsls	r2, r2, #2
 8013f8e:	4620      	mov	r0, r4
 8013f90:	f000 fb60 	bl	8014654 <_calloc_r>
 8013f94:	b160      	cbz	r0, 8013fb0 <_Balloc+0x64>
 8013f96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013f9a:	e00e      	b.n	8013fba <_Balloc+0x6e>
 8013f9c:	2221      	movs	r2, #33	; 0x21
 8013f9e:	2104      	movs	r1, #4
 8013fa0:	4620      	mov	r0, r4
 8013fa2:	f000 fb57 	bl	8014654 <_calloc_r>
 8013fa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013fa8:	60f0      	str	r0, [r6, #12]
 8013faa:	68db      	ldr	r3, [r3, #12]
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d1e4      	bne.n	8013f7a <_Balloc+0x2e>
 8013fb0:	2000      	movs	r0, #0
 8013fb2:	bd70      	pop	{r4, r5, r6, pc}
 8013fb4:	6802      	ldr	r2, [r0, #0]
 8013fb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013fba:	2300      	movs	r3, #0
 8013fbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013fc0:	e7f7      	b.n	8013fb2 <_Balloc+0x66>
 8013fc2:	bf00      	nop
 8013fc4:	080165be 	.word	0x080165be
 8013fc8:	080166b2 	.word	0x080166b2

08013fcc <_Bfree>:
 8013fcc:	b570      	push	{r4, r5, r6, lr}
 8013fce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013fd0:	4605      	mov	r5, r0
 8013fd2:	460c      	mov	r4, r1
 8013fd4:	b976      	cbnz	r6, 8013ff4 <_Bfree+0x28>
 8013fd6:	2010      	movs	r0, #16
 8013fd8:	f7ff ff52 	bl	8013e80 <malloc>
 8013fdc:	4602      	mov	r2, r0
 8013fde:	6268      	str	r0, [r5, #36]	; 0x24
 8013fe0:	b920      	cbnz	r0, 8013fec <_Bfree+0x20>
 8013fe2:	4b09      	ldr	r3, [pc, #36]	; (8014008 <_Bfree+0x3c>)
 8013fe4:	4809      	ldr	r0, [pc, #36]	; (801400c <_Bfree+0x40>)
 8013fe6:	218a      	movs	r1, #138	; 0x8a
 8013fe8:	f7fe fdf2 	bl	8012bd0 <__assert_func>
 8013fec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013ff0:	6006      	str	r6, [r0, #0]
 8013ff2:	60c6      	str	r6, [r0, #12]
 8013ff4:	b13c      	cbz	r4, 8014006 <_Bfree+0x3a>
 8013ff6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013ff8:	6862      	ldr	r2, [r4, #4]
 8013ffa:	68db      	ldr	r3, [r3, #12]
 8013ffc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014000:	6021      	str	r1, [r4, #0]
 8014002:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014006:	bd70      	pop	{r4, r5, r6, pc}
 8014008:	080165be 	.word	0x080165be
 801400c:	080166b2 	.word	0x080166b2

08014010 <__multadd>:
 8014010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014014:	690d      	ldr	r5, [r1, #16]
 8014016:	4607      	mov	r7, r0
 8014018:	460c      	mov	r4, r1
 801401a:	461e      	mov	r6, r3
 801401c:	f101 0c14 	add.w	ip, r1, #20
 8014020:	2000      	movs	r0, #0
 8014022:	f8dc 3000 	ldr.w	r3, [ip]
 8014026:	b299      	uxth	r1, r3
 8014028:	fb02 6101 	mla	r1, r2, r1, r6
 801402c:	0c1e      	lsrs	r6, r3, #16
 801402e:	0c0b      	lsrs	r3, r1, #16
 8014030:	fb02 3306 	mla	r3, r2, r6, r3
 8014034:	b289      	uxth	r1, r1
 8014036:	3001      	adds	r0, #1
 8014038:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801403c:	4285      	cmp	r5, r0
 801403e:	f84c 1b04 	str.w	r1, [ip], #4
 8014042:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014046:	dcec      	bgt.n	8014022 <__multadd+0x12>
 8014048:	b30e      	cbz	r6, 801408e <__multadd+0x7e>
 801404a:	68a3      	ldr	r3, [r4, #8]
 801404c:	42ab      	cmp	r3, r5
 801404e:	dc19      	bgt.n	8014084 <__multadd+0x74>
 8014050:	6861      	ldr	r1, [r4, #4]
 8014052:	4638      	mov	r0, r7
 8014054:	3101      	adds	r1, #1
 8014056:	f7ff ff79 	bl	8013f4c <_Balloc>
 801405a:	4680      	mov	r8, r0
 801405c:	b928      	cbnz	r0, 801406a <__multadd+0x5a>
 801405e:	4602      	mov	r2, r0
 8014060:	4b0c      	ldr	r3, [pc, #48]	; (8014094 <__multadd+0x84>)
 8014062:	480d      	ldr	r0, [pc, #52]	; (8014098 <__multadd+0x88>)
 8014064:	21b5      	movs	r1, #181	; 0xb5
 8014066:	f7fe fdb3 	bl	8012bd0 <__assert_func>
 801406a:	6922      	ldr	r2, [r4, #16]
 801406c:	3202      	adds	r2, #2
 801406e:	f104 010c 	add.w	r1, r4, #12
 8014072:	0092      	lsls	r2, r2, #2
 8014074:	300c      	adds	r0, #12
 8014076:	f7ff ff2d 	bl	8013ed4 <memcpy>
 801407a:	4621      	mov	r1, r4
 801407c:	4638      	mov	r0, r7
 801407e:	f7ff ffa5 	bl	8013fcc <_Bfree>
 8014082:	4644      	mov	r4, r8
 8014084:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014088:	3501      	adds	r5, #1
 801408a:	615e      	str	r6, [r3, #20]
 801408c:	6125      	str	r5, [r4, #16]
 801408e:	4620      	mov	r0, r4
 8014090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014094:	08016630 	.word	0x08016630
 8014098:	080166b2 	.word	0x080166b2

0801409c <__hi0bits>:
 801409c:	0c03      	lsrs	r3, r0, #16
 801409e:	041b      	lsls	r3, r3, #16
 80140a0:	b9d3      	cbnz	r3, 80140d8 <__hi0bits+0x3c>
 80140a2:	0400      	lsls	r0, r0, #16
 80140a4:	2310      	movs	r3, #16
 80140a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80140aa:	bf04      	itt	eq
 80140ac:	0200      	lsleq	r0, r0, #8
 80140ae:	3308      	addeq	r3, #8
 80140b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80140b4:	bf04      	itt	eq
 80140b6:	0100      	lsleq	r0, r0, #4
 80140b8:	3304      	addeq	r3, #4
 80140ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80140be:	bf04      	itt	eq
 80140c0:	0080      	lsleq	r0, r0, #2
 80140c2:	3302      	addeq	r3, #2
 80140c4:	2800      	cmp	r0, #0
 80140c6:	db05      	blt.n	80140d4 <__hi0bits+0x38>
 80140c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80140cc:	f103 0301 	add.w	r3, r3, #1
 80140d0:	bf08      	it	eq
 80140d2:	2320      	moveq	r3, #32
 80140d4:	4618      	mov	r0, r3
 80140d6:	4770      	bx	lr
 80140d8:	2300      	movs	r3, #0
 80140da:	e7e4      	b.n	80140a6 <__hi0bits+0xa>

080140dc <__lo0bits>:
 80140dc:	6803      	ldr	r3, [r0, #0]
 80140de:	f013 0207 	ands.w	r2, r3, #7
 80140e2:	4601      	mov	r1, r0
 80140e4:	d00b      	beq.n	80140fe <__lo0bits+0x22>
 80140e6:	07da      	lsls	r2, r3, #31
 80140e8:	d423      	bmi.n	8014132 <__lo0bits+0x56>
 80140ea:	0798      	lsls	r0, r3, #30
 80140ec:	bf49      	itett	mi
 80140ee:	085b      	lsrmi	r3, r3, #1
 80140f0:	089b      	lsrpl	r3, r3, #2
 80140f2:	2001      	movmi	r0, #1
 80140f4:	600b      	strmi	r3, [r1, #0]
 80140f6:	bf5c      	itt	pl
 80140f8:	600b      	strpl	r3, [r1, #0]
 80140fa:	2002      	movpl	r0, #2
 80140fc:	4770      	bx	lr
 80140fe:	b298      	uxth	r0, r3
 8014100:	b9a8      	cbnz	r0, 801412e <__lo0bits+0x52>
 8014102:	0c1b      	lsrs	r3, r3, #16
 8014104:	2010      	movs	r0, #16
 8014106:	b2da      	uxtb	r2, r3
 8014108:	b90a      	cbnz	r2, 801410e <__lo0bits+0x32>
 801410a:	3008      	adds	r0, #8
 801410c:	0a1b      	lsrs	r3, r3, #8
 801410e:	071a      	lsls	r2, r3, #28
 8014110:	bf04      	itt	eq
 8014112:	091b      	lsreq	r3, r3, #4
 8014114:	3004      	addeq	r0, #4
 8014116:	079a      	lsls	r2, r3, #30
 8014118:	bf04      	itt	eq
 801411a:	089b      	lsreq	r3, r3, #2
 801411c:	3002      	addeq	r0, #2
 801411e:	07da      	lsls	r2, r3, #31
 8014120:	d403      	bmi.n	801412a <__lo0bits+0x4e>
 8014122:	085b      	lsrs	r3, r3, #1
 8014124:	f100 0001 	add.w	r0, r0, #1
 8014128:	d005      	beq.n	8014136 <__lo0bits+0x5a>
 801412a:	600b      	str	r3, [r1, #0]
 801412c:	4770      	bx	lr
 801412e:	4610      	mov	r0, r2
 8014130:	e7e9      	b.n	8014106 <__lo0bits+0x2a>
 8014132:	2000      	movs	r0, #0
 8014134:	4770      	bx	lr
 8014136:	2020      	movs	r0, #32
 8014138:	4770      	bx	lr
	...

0801413c <__i2b>:
 801413c:	b510      	push	{r4, lr}
 801413e:	460c      	mov	r4, r1
 8014140:	2101      	movs	r1, #1
 8014142:	f7ff ff03 	bl	8013f4c <_Balloc>
 8014146:	4602      	mov	r2, r0
 8014148:	b928      	cbnz	r0, 8014156 <__i2b+0x1a>
 801414a:	4b05      	ldr	r3, [pc, #20]	; (8014160 <__i2b+0x24>)
 801414c:	4805      	ldr	r0, [pc, #20]	; (8014164 <__i2b+0x28>)
 801414e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014152:	f7fe fd3d 	bl	8012bd0 <__assert_func>
 8014156:	2301      	movs	r3, #1
 8014158:	6144      	str	r4, [r0, #20]
 801415a:	6103      	str	r3, [r0, #16]
 801415c:	bd10      	pop	{r4, pc}
 801415e:	bf00      	nop
 8014160:	08016630 	.word	0x08016630
 8014164:	080166b2 	.word	0x080166b2

08014168 <__multiply>:
 8014168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801416c:	4691      	mov	r9, r2
 801416e:	690a      	ldr	r2, [r1, #16]
 8014170:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014174:	429a      	cmp	r2, r3
 8014176:	bfb8      	it	lt
 8014178:	460b      	movlt	r3, r1
 801417a:	460c      	mov	r4, r1
 801417c:	bfbc      	itt	lt
 801417e:	464c      	movlt	r4, r9
 8014180:	4699      	movlt	r9, r3
 8014182:	6927      	ldr	r7, [r4, #16]
 8014184:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014188:	68a3      	ldr	r3, [r4, #8]
 801418a:	6861      	ldr	r1, [r4, #4]
 801418c:	eb07 060a 	add.w	r6, r7, sl
 8014190:	42b3      	cmp	r3, r6
 8014192:	b085      	sub	sp, #20
 8014194:	bfb8      	it	lt
 8014196:	3101      	addlt	r1, #1
 8014198:	f7ff fed8 	bl	8013f4c <_Balloc>
 801419c:	b930      	cbnz	r0, 80141ac <__multiply+0x44>
 801419e:	4602      	mov	r2, r0
 80141a0:	4b44      	ldr	r3, [pc, #272]	; (80142b4 <__multiply+0x14c>)
 80141a2:	4845      	ldr	r0, [pc, #276]	; (80142b8 <__multiply+0x150>)
 80141a4:	f240 115d 	movw	r1, #349	; 0x15d
 80141a8:	f7fe fd12 	bl	8012bd0 <__assert_func>
 80141ac:	f100 0514 	add.w	r5, r0, #20
 80141b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80141b4:	462b      	mov	r3, r5
 80141b6:	2200      	movs	r2, #0
 80141b8:	4543      	cmp	r3, r8
 80141ba:	d321      	bcc.n	8014200 <__multiply+0x98>
 80141bc:	f104 0314 	add.w	r3, r4, #20
 80141c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80141c4:	f109 0314 	add.w	r3, r9, #20
 80141c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80141cc:	9202      	str	r2, [sp, #8]
 80141ce:	1b3a      	subs	r2, r7, r4
 80141d0:	3a15      	subs	r2, #21
 80141d2:	f022 0203 	bic.w	r2, r2, #3
 80141d6:	3204      	adds	r2, #4
 80141d8:	f104 0115 	add.w	r1, r4, #21
 80141dc:	428f      	cmp	r7, r1
 80141de:	bf38      	it	cc
 80141e0:	2204      	movcc	r2, #4
 80141e2:	9201      	str	r2, [sp, #4]
 80141e4:	9a02      	ldr	r2, [sp, #8]
 80141e6:	9303      	str	r3, [sp, #12]
 80141e8:	429a      	cmp	r2, r3
 80141ea:	d80c      	bhi.n	8014206 <__multiply+0x9e>
 80141ec:	2e00      	cmp	r6, #0
 80141ee:	dd03      	ble.n	80141f8 <__multiply+0x90>
 80141f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d05a      	beq.n	80142ae <__multiply+0x146>
 80141f8:	6106      	str	r6, [r0, #16]
 80141fa:	b005      	add	sp, #20
 80141fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014200:	f843 2b04 	str.w	r2, [r3], #4
 8014204:	e7d8      	b.n	80141b8 <__multiply+0x50>
 8014206:	f8b3 a000 	ldrh.w	sl, [r3]
 801420a:	f1ba 0f00 	cmp.w	sl, #0
 801420e:	d024      	beq.n	801425a <__multiply+0xf2>
 8014210:	f104 0e14 	add.w	lr, r4, #20
 8014214:	46a9      	mov	r9, r5
 8014216:	f04f 0c00 	mov.w	ip, #0
 801421a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801421e:	f8d9 1000 	ldr.w	r1, [r9]
 8014222:	fa1f fb82 	uxth.w	fp, r2
 8014226:	b289      	uxth	r1, r1
 8014228:	fb0a 110b 	mla	r1, sl, fp, r1
 801422c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8014230:	f8d9 2000 	ldr.w	r2, [r9]
 8014234:	4461      	add	r1, ip
 8014236:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801423a:	fb0a c20b 	mla	r2, sl, fp, ip
 801423e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014242:	b289      	uxth	r1, r1
 8014244:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014248:	4577      	cmp	r7, lr
 801424a:	f849 1b04 	str.w	r1, [r9], #4
 801424e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014252:	d8e2      	bhi.n	801421a <__multiply+0xb2>
 8014254:	9a01      	ldr	r2, [sp, #4]
 8014256:	f845 c002 	str.w	ip, [r5, r2]
 801425a:	9a03      	ldr	r2, [sp, #12]
 801425c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014260:	3304      	adds	r3, #4
 8014262:	f1b9 0f00 	cmp.w	r9, #0
 8014266:	d020      	beq.n	80142aa <__multiply+0x142>
 8014268:	6829      	ldr	r1, [r5, #0]
 801426a:	f104 0c14 	add.w	ip, r4, #20
 801426e:	46ae      	mov	lr, r5
 8014270:	f04f 0a00 	mov.w	sl, #0
 8014274:	f8bc b000 	ldrh.w	fp, [ip]
 8014278:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801427c:	fb09 220b 	mla	r2, r9, fp, r2
 8014280:	4492      	add	sl, r2
 8014282:	b289      	uxth	r1, r1
 8014284:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8014288:	f84e 1b04 	str.w	r1, [lr], #4
 801428c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8014290:	f8be 1000 	ldrh.w	r1, [lr]
 8014294:	0c12      	lsrs	r2, r2, #16
 8014296:	fb09 1102 	mla	r1, r9, r2, r1
 801429a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801429e:	4567      	cmp	r7, ip
 80142a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80142a4:	d8e6      	bhi.n	8014274 <__multiply+0x10c>
 80142a6:	9a01      	ldr	r2, [sp, #4]
 80142a8:	50a9      	str	r1, [r5, r2]
 80142aa:	3504      	adds	r5, #4
 80142ac:	e79a      	b.n	80141e4 <__multiply+0x7c>
 80142ae:	3e01      	subs	r6, #1
 80142b0:	e79c      	b.n	80141ec <__multiply+0x84>
 80142b2:	bf00      	nop
 80142b4:	08016630 	.word	0x08016630
 80142b8:	080166b2 	.word	0x080166b2

080142bc <__pow5mult>:
 80142bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80142c0:	4615      	mov	r5, r2
 80142c2:	f012 0203 	ands.w	r2, r2, #3
 80142c6:	4606      	mov	r6, r0
 80142c8:	460f      	mov	r7, r1
 80142ca:	d007      	beq.n	80142dc <__pow5mult+0x20>
 80142cc:	4c25      	ldr	r4, [pc, #148]	; (8014364 <__pow5mult+0xa8>)
 80142ce:	3a01      	subs	r2, #1
 80142d0:	2300      	movs	r3, #0
 80142d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80142d6:	f7ff fe9b 	bl	8014010 <__multadd>
 80142da:	4607      	mov	r7, r0
 80142dc:	10ad      	asrs	r5, r5, #2
 80142de:	d03d      	beq.n	801435c <__pow5mult+0xa0>
 80142e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80142e2:	b97c      	cbnz	r4, 8014304 <__pow5mult+0x48>
 80142e4:	2010      	movs	r0, #16
 80142e6:	f7ff fdcb 	bl	8013e80 <malloc>
 80142ea:	4602      	mov	r2, r0
 80142ec:	6270      	str	r0, [r6, #36]	; 0x24
 80142ee:	b928      	cbnz	r0, 80142fc <__pow5mult+0x40>
 80142f0:	4b1d      	ldr	r3, [pc, #116]	; (8014368 <__pow5mult+0xac>)
 80142f2:	481e      	ldr	r0, [pc, #120]	; (801436c <__pow5mult+0xb0>)
 80142f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80142f8:	f7fe fc6a 	bl	8012bd0 <__assert_func>
 80142fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014300:	6004      	str	r4, [r0, #0]
 8014302:	60c4      	str	r4, [r0, #12]
 8014304:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014308:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801430c:	b94c      	cbnz	r4, 8014322 <__pow5mult+0x66>
 801430e:	f240 2171 	movw	r1, #625	; 0x271
 8014312:	4630      	mov	r0, r6
 8014314:	f7ff ff12 	bl	801413c <__i2b>
 8014318:	2300      	movs	r3, #0
 801431a:	f8c8 0008 	str.w	r0, [r8, #8]
 801431e:	4604      	mov	r4, r0
 8014320:	6003      	str	r3, [r0, #0]
 8014322:	f04f 0900 	mov.w	r9, #0
 8014326:	07eb      	lsls	r3, r5, #31
 8014328:	d50a      	bpl.n	8014340 <__pow5mult+0x84>
 801432a:	4639      	mov	r1, r7
 801432c:	4622      	mov	r2, r4
 801432e:	4630      	mov	r0, r6
 8014330:	f7ff ff1a 	bl	8014168 <__multiply>
 8014334:	4639      	mov	r1, r7
 8014336:	4680      	mov	r8, r0
 8014338:	4630      	mov	r0, r6
 801433a:	f7ff fe47 	bl	8013fcc <_Bfree>
 801433e:	4647      	mov	r7, r8
 8014340:	106d      	asrs	r5, r5, #1
 8014342:	d00b      	beq.n	801435c <__pow5mult+0xa0>
 8014344:	6820      	ldr	r0, [r4, #0]
 8014346:	b938      	cbnz	r0, 8014358 <__pow5mult+0x9c>
 8014348:	4622      	mov	r2, r4
 801434a:	4621      	mov	r1, r4
 801434c:	4630      	mov	r0, r6
 801434e:	f7ff ff0b 	bl	8014168 <__multiply>
 8014352:	6020      	str	r0, [r4, #0]
 8014354:	f8c0 9000 	str.w	r9, [r0]
 8014358:	4604      	mov	r4, r0
 801435a:	e7e4      	b.n	8014326 <__pow5mult+0x6a>
 801435c:	4638      	mov	r0, r7
 801435e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014362:	bf00      	nop
 8014364:	08016800 	.word	0x08016800
 8014368:	080165be 	.word	0x080165be
 801436c:	080166b2 	.word	0x080166b2

08014370 <__lshift>:
 8014370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014374:	460c      	mov	r4, r1
 8014376:	6849      	ldr	r1, [r1, #4]
 8014378:	6923      	ldr	r3, [r4, #16]
 801437a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801437e:	68a3      	ldr	r3, [r4, #8]
 8014380:	4607      	mov	r7, r0
 8014382:	4691      	mov	r9, r2
 8014384:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014388:	f108 0601 	add.w	r6, r8, #1
 801438c:	42b3      	cmp	r3, r6
 801438e:	db0b      	blt.n	80143a8 <__lshift+0x38>
 8014390:	4638      	mov	r0, r7
 8014392:	f7ff fddb 	bl	8013f4c <_Balloc>
 8014396:	4605      	mov	r5, r0
 8014398:	b948      	cbnz	r0, 80143ae <__lshift+0x3e>
 801439a:	4602      	mov	r2, r0
 801439c:	4b2a      	ldr	r3, [pc, #168]	; (8014448 <__lshift+0xd8>)
 801439e:	482b      	ldr	r0, [pc, #172]	; (801444c <__lshift+0xdc>)
 80143a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80143a4:	f7fe fc14 	bl	8012bd0 <__assert_func>
 80143a8:	3101      	adds	r1, #1
 80143aa:	005b      	lsls	r3, r3, #1
 80143ac:	e7ee      	b.n	801438c <__lshift+0x1c>
 80143ae:	2300      	movs	r3, #0
 80143b0:	f100 0114 	add.w	r1, r0, #20
 80143b4:	f100 0210 	add.w	r2, r0, #16
 80143b8:	4618      	mov	r0, r3
 80143ba:	4553      	cmp	r3, sl
 80143bc:	db37      	blt.n	801442e <__lshift+0xbe>
 80143be:	6920      	ldr	r0, [r4, #16]
 80143c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80143c4:	f104 0314 	add.w	r3, r4, #20
 80143c8:	f019 091f 	ands.w	r9, r9, #31
 80143cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80143d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80143d4:	d02f      	beq.n	8014436 <__lshift+0xc6>
 80143d6:	f1c9 0e20 	rsb	lr, r9, #32
 80143da:	468a      	mov	sl, r1
 80143dc:	f04f 0c00 	mov.w	ip, #0
 80143e0:	681a      	ldr	r2, [r3, #0]
 80143e2:	fa02 f209 	lsl.w	r2, r2, r9
 80143e6:	ea42 020c 	orr.w	r2, r2, ip
 80143ea:	f84a 2b04 	str.w	r2, [sl], #4
 80143ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80143f2:	4298      	cmp	r0, r3
 80143f4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80143f8:	d8f2      	bhi.n	80143e0 <__lshift+0x70>
 80143fa:	1b03      	subs	r3, r0, r4
 80143fc:	3b15      	subs	r3, #21
 80143fe:	f023 0303 	bic.w	r3, r3, #3
 8014402:	3304      	adds	r3, #4
 8014404:	f104 0215 	add.w	r2, r4, #21
 8014408:	4290      	cmp	r0, r2
 801440a:	bf38      	it	cc
 801440c:	2304      	movcc	r3, #4
 801440e:	f841 c003 	str.w	ip, [r1, r3]
 8014412:	f1bc 0f00 	cmp.w	ip, #0
 8014416:	d001      	beq.n	801441c <__lshift+0xac>
 8014418:	f108 0602 	add.w	r6, r8, #2
 801441c:	3e01      	subs	r6, #1
 801441e:	4638      	mov	r0, r7
 8014420:	612e      	str	r6, [r5, #16]
 8014422:	4621      	mov	r1, r4
 8014424:	f7ff fdd2 	bl	8013fcc <_Bfree>
 8014428:	4628      	mov	r0, r5
 801442a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801442e:	f842 0f04 	str.w	r0, [r2, #4]!
 8014432:	3301      	adds	r3, #1
 8014434:	e7c1      	b.n	80143ba <__lshift+0x4a>
 8014436:	3904      	subs	r1, #4
 8014438:	f853 2b04 	ldr.w	r2, [r3], #4
 801443c:	f841 2f04 	str.w	r2, [r1, #4]!
 8014440:	4298      	cmp	r0, r3
 8014442:	d8f9      	bhi.n	8014438 <__lshift+0xc8>
 8014444:	e7ea      	b.n	801441c <__lshift+0xac>
 8014446:	bf00      	nop
 8014448:	08016630 	.word	0x08016630
 801444c:	080166b2 	.word	0x080166b2

08014450 <__mcmp>:
 8014450:	b530      	push	{r4, r5, lr}
 8014452:	6902      	ldr	r2, [r0, #16]
 8014454:	690c      	ldr	r4, [r1, #16]
 8014456:	1b12      	subs	r2, r2, r4
 8014458:	d10e      	bne.n	8014478 <__mcmp+0x28>
 801445a:	f100 0314 	add.w	r3, r0, #20
 801445e:	3114      	adds	r1, #20
 8014460:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014464:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014468:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801446c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014470:	42a5      	cmp	r5, r4
 8014472:	d003      	beq.n	801447c <__mcmp+0x2c>
 8014474:	d305      	bcc.n	8014482 <__mcmp+0x32>
 8014476:	2201      	movs	r2, #1
 8014478:	4610      	mov	r0, r2
 801447a:	bd30      	pop	{r4, r5, pc}
 801447c:	4283      	cmp	r3, r0
 801447e:	d3f3      	bcc.n	8014468 <__mcmp+0x18>
 8014480:	e7fa      	b.n	8014478 <__mcmp+0x28>
 8014482:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014486:	e7f7      	b.n	8014478 <__mcmp+0x28>

08014488 <__mdiff>:
 8014488:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801448c:	460c      	mov	r4, r1
 801448e:	4606      	mov	r6, r0
 8014490:	4611      	mov	r1, r2
 8014492:	4620      	mov	r0, r4
 8014494:	4690      	mov	r8, r2
 8014496:	f7ff ffdb 	bl	8014450 <__mcmp>
 801449a:	1e05      	subs	r5, r0, #0
 801449c:	d110      	bne.n	80144c0 <__mdiff+0x38>
 801449e:	4629      	mov	r1, r5
 80144a0:	4630      	mov	r0, r6
 80144a2:	f7ff fd53 	bl	8013f4c <_Balloc>
 80144a6:	b930      	cbnz	r0, 80144b6 <__mdiff+0x2e>
 80144a8:	4b3a      	ldr	r3, [pc, #232]	; (8014594 <__mdiff+0x10c>)
 80144aa:	4602      	mov	r2, r0
 80144ac:	f240 2132 	movw	r1, #562	; 0x232
 80144b0:	4839      	ldr	r0, [pc, #228]	; (8014598 <__mdiff+0x110>)
 80144b2:	f7fe fb8d 	bl	8012bd0 <__assert_func>
 80144b6:	2301      	movs	r3, #1
 80144b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80144bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144c0:	bfa4      	itt	ge
 80144c2:	4643      	movge	r3, r8
 80144c4:	46a0      	movge	r8, r4
 80144c6:	4630      	mov	r0, r6
 80144c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80144cc:	bfa6      	itte	ge
 80144ce:	461c      	movge	r4, r3
 80144d0:	2500      	movge	r5, #0
 80144d2:	2501      	movlt	r5, #1
 80144d4:	f7ff fd3a 	bl	8013f4c <_Balloc>
 80144d8:	b920      	cbnz	r0, 80144e4 <__mdiff+0x5c>
 80144da:	4b2e      	ldr	r3, [pc, #184]	; (8014594 <__mdiff+0x10c>)
 80144dc:	4602      	mov	r2, r0
 80144de:	f44f 7110 	mov.w	r1, #576	; 0x240
 80144e2:	e7e5      	b.n	80144b0 <__mdiff+0x28>
 80144e4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80144e8:	6926      	ldr	r6, [r4, #16]
 80144ea:	60c5      	str	r5, [r0, #12]
 80144ec:	f104 0914 	add.w	r9, r4, #20
 80144f0:	f108 0514 	add.w	r5, r8, #20
 80144f4:	f100 0e14 	add.w	lr, r0, #20
 80144f8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80144fc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014500:	f108 0210 	add.w	r2, r8, #16
 8014504:	46f2      	mov	sl, lr
 8014506:	2100      	movs	r1, #0
 8014508:	f859 3b04 	ldr.w	r3, [r9], #4
 801450c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014510:	fa1f f883 	uxth.w	r8, r3
 8014514:	fa11 f18b 	uxtah	r1, r1, fp
 8014518:	0c1b      	lsrs	r3, r3, #16
 801451a:	eba1 0808 	sub.w	r8, r1, r8
 801451e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014522:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014526:	fa1f f888 	uxth.w	r8, r8
 801452a:	1419      	asrs	r1, r3, #16
 801452c:	454e      	cmp	r6, r9
 801452e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014532:	f84a 3b04 	str.w	r3, [sl], #4
 8014536:	d8e7      	bhi.n	8014508 <__mdiff+0x80>
 8014538:	1b33      	subs	r3, r6, r4
 801453a:	3b15      	subs	r3, #21
 801453c:	f023 0303 	bic.w	r3, r3, #3
 8014540:	3304      	adds	r3, #4
 8014542:	3415      	adds	r4, #21
 8014544:	42a6      	cmp	r6, r4
 8014546:	bf38      	it	cc
 8014548:	2304      	movcc	r3, #4
 801454a:	441d      	add	r5, r3
 801454c:	4473      	add	r3, lr
 801454e:	469e      	mov	lr, r3
 8014550:	462e      	mov	r6, r5
 8014552:	4566      	cmp	r6, ip
 8014554:	d30e      	bcc.n	8014574 <__mdiff+0xec>
 8014556:	f10c 0203 	add.w	r2, ip, #3
 801455a:	1b52      	subs	r2, r2, r5
 801455c:	f022 0203 	bic.w	r2, r2, #3
 8014560:	3d03      	subs	r5, #3
 8014562:	45ac      	cmp	ip, r5
 8014564:	bf38      	it	cc
 8014566:	2200      	movcc	r2, #0
 8014568:	441a      	add	r2, r3
 801456a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801456e:	b17b      	cbz	r3, 8014590 <__mdiff+0x108>
 8014570:	6107      	str	r7, [r0, #16]
 8014572:	e7a3      	b.n	80144bc <__mdiff+0x34>
 8014574:	f856 8b04 	ldr.w	r8, [r6], #4
 8014578:	fa11 f288 	uxtah	r2, r1, r8
 801457c:	1414      	asrs	r4, r2, #16
 801457e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014582:	b292      	uxth	r2, r2
 8014584:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8014588:	f84e 2b04 	str.w	r2, [lr], #4
 801458c:	1421      	asrs	r1, r4, #16
 801458e:	e7e0      	b.n	8014552 <__mdiff+0xca>
 8014590:	3f01      	subs	r7, #1
 8014592:	e7ea      	b.n	801456a <__mdiff+0xe2>
 8014594:	08016630 	.word	0x08016630
 8014598:	080166b2 	.word	0x080166b2

0801459c <__d2b>:
 801459c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80145a0:	4689      	mov	r9, r1
 80145a2:	2101      	movs	r1, #1
 80145a4:	ec57 6b10 	vmov	r6, r7, d0
 80145a8:	4690      	mov	r8, r2
 80145aa:	f7ff fccf 	bl	8013f4c <_Balloc>
 80145ae:	4604      	mov	r4, r0
 80145b0:	b930      	cbnz	r0, 80145c0 <__d2b+0x24>
 80145b2:	4602      	mov	r2, r0
 80145b4:	4b25      	ldr	r3, [pc, #148]	; (801464c <__d2b+0xb0>)
 80145b6:	4826      	ldr	r0, [pc, #152]	; (8014650 <__d2b+0xb4>)
 80145b8:	f240 310a 	movw	r1, #778	; 0x30a
 80145bc:	f7fe fb08 	bl	8012bd0 <__assert_func>
 80145c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80145c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80145c8:	bb35      	cbnz	r5, 8014618 <__d2b+0x7c>
 80145ca:	2e00      	cmp	r6, #0
 80145cc:	9301      	str	r3, [sp, #4]
 80145ce:	d028      	beq.n	8014622 <__d2b+0x86>
 80145d0:	4668      	mov	r0, sp
 80145d2:	9600      	str	r6, [sp, #0]
 80145d4:	f7ff fd82 	bl	80140dc <__lo0bits>
 80145d8:	9900      	ldr	r1, [sp, #0]
 80145da:	b300      	cbz	r0, 801461e <__d2b+0x82>
 80145dc:	9a01      	ldr	r2, [sp, #4]
 80145de:	f1c0 0320 	rsb	r3, r0, #32
 80145e2:	fa02 f303 	lsl.w	r3, r2, r3
 80145e6:	430b      	orrs	r3, r1
 80145e8:	40c2      	lsrs	r2, r0
 80145ea:	6163      	str	r3, [r4, #20]
 80145ec:	9201      	str	r2, [sp, #4]
 80145ee:	9b01      	ldr	r3, [sp, #4]
 80145f0:	61a3      	str	r3, [r4, #24]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	bf14      	ite	ne
 80145f6:	2202      	movne	r2, #2
 80145f8:	2201      	moveq	r2, #1
 80145fa:	6122      	str	r2, [r4, #16]
 80145fc:	b1d5      	cbz	r5, 8014634 <__d2b+0x98>
 80145fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014602:	4405      	add	r5, r0
 8014604:	f8c9 5000 	str.w	r5, [r9]
 8014608:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801460c:	f8c8 0000 	str.w	r0, [r8]
 8014610:	4620      	mov	r0, r4
 8014612:	b003      	add	sp, #12
 8014614:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801461c:	e7d5      	b.n	80145ca <__d2b+0x2e>
 801461e:	6161      	str	r1, [r4, #20]
 8014620:	e7e5      	b.n	80145ee <__d2b+0x52>
 8014622:	a801      	add	r0, sp, #4
 8014624:	f7ff fd5a 	bl	80140dc <__lo0bits>
 8014628:	9b01      	ldr	r3, [sp, #4]
 801462a:	6163      	str	r3, [r4, #20]
 801462c:	2201      	movs	r2, #1
 801462e:	6122      	str	r2, [r4, #16]
 8014630:	3020      	adds	r0, #32
 8014632:	e7e3      	b.n	80145fc <__d2b+0x60>
 8014634:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014638:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801463c:	f8c9 0000 	str.w	r0, [r9]
 8014640:	6918      	ldr	r0, [r3, #16]
 8014642:	f7ff fd2b 	bl	801409c <__hi0bits>
 8014646:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801464a:	e7df      	b.n	801460c <__d2b+0x70>
 801464c:	08016630 	.word	0x08016630
 8014650:	080166b2 	.word	0x080166b2

08014654 <_calloc_r>:
 8014654:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014656:	fba1 2402 	umull	r2, r4, r1, r2
 801465a:	b94c      	cbnz	r4, 8014670 <_calloc_r+0x1c>
 801465c:	4611      	mov	r1, r2
 801465e:	9201      	str	r2, [sp, #4]
 8014660:	f000 f87a 	bl	8014758 <_malloc_r>
 8014664:	9a01      	ldr	r2, [sp, #4]
 8014666:	4605      	mov	r5, r0
 8014668:	b930      	cbnz	r0, 8014678 <_calloc_r+0x24>
 801466a:	4628      	mov	r0, r5
 801466c:	b003      	add	sp, #12
 801466e:	bd30      	pop	{r4, r5, pc}
 8014670:	220c      	movs	r2, #12
 8014672:	6002      	str	r2, [r0, #0]
 8014674:	2500      	movs	r5, #0
 8014676:	e7f8      	b.n	801466a <_calloc_r+0x16>
 8014678:	4621      	mov	r1, r4
 801467a:	f7ff fc53 	bl	8013f24 <memset>
 801467e:	e7f4      	b.n	801466a <_calloc_r+0x16>

08014680 <_free_r>:
 8014680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014682:	2900      	cmp	r1, #0
 8014684:	d044      	beq.n	8014710 <_free_r+0x90>
 8014686:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801468a:	9001      	str	r0, [sp, #4]
 801468c:	2b00      	cmp	r3, #0
 801468e:	f1a1 0404 	sub.w	r4, r1, #4
 8014692:	bfb8      	it	lt
 8014694:	18e4      	addlt	r4, r4, r3
 8014696:	f7ff fc4d 	bl	8013f34 <__malloc_lock>
 801469a:	4a1e      	ldr	r2, [pc, #120]	; (8014714 <_free_r+0x94>)
 801469c:	9801      	ldr	r0, [sp, #4]
 801469e:	6813      	ldr	r3, [r2, #0]
 80146a0:	b933      	cbnz	r3, 80146b0 <_free_r+0x30>
 80146a2:	6063      	str	r3, [r4, #4]
 80146a4:	6014      	str	r4, [r2, #0]
 80146a6:	b003      	add	sp, #12
 80146a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80146ac:	f7ff bc48 	b.w	8013f40 <__malloc_unlock>
 80146b0:	42a3      	cmp	r3, r4
 80146b2:	d908      	bls.n	80146c6 <_free_r+0x46>
 80146b4:	6825      	ldr	r5, [r4, #0]
 80146b6:	1961      	adds	r1, r4, r5
 80146b8:	428b      	cmp	r3, r1
 80146ba:	bf01      	itttt	eq
 80146bc:	6819      	ldreq	r1, [r3, #0]
 80146be:	685b      	ldreq	r3, [r3, #4]
 80146c0:	1949      	addeq	r1, r1, r5
 80146c2:	6021      	streq	r1, [r4, #0]
 80146c4:	e7ed      	b.n	80146a2 <_free_r+0x22>
 80146c6:	461a      	mov	r2, r3
 80146c8:	685b      	ldr	r3, [r3, #4]
 80146ca:	b10b      	cbz	r3, 80146d0 <_free_r+0x50>
 80146cc:	42a3      	cmp	r3, r4
 80146ce:	d9fa      	bls.n	80146c6 <_free_r+0x46>
 80146d0:	6811      	ldr	r1, [r2, #0]
 80146d2:	1855      	adds	r5, r2, r1
 80146d4:	42a5      	cmp	r5, r4
 80146d6:	d10b      	bne.n	80146f0 <_free_r+0x70>
 80146d8:	6824      	ldr	r4, [r4, #0]
 80146da:	4421      	add	r1, r4
 80146dc:	1854      	adds	r4, r2, r1
 80146de:	42a3      	cmp	r3, r4
 80146e0:	6011      	str	r1, [r2, #0]
 80146e2:	d1e0      	bne.n	80146a6 <_free_r+0x26>
 80146e4:	681c      	ldr	r4, [r3, #0]
 80146e6:	685b      	ldr	r3, [r3, #4]
 80146e8:	6053      	str	r3, [r2, #4]
 80146ea:	4421      	add	r1, r4
 80146ec:	6011      	str	r1, [r2, #0]
 80146ee:	e7da      	b.n	80146a6 <_free_r+0x26>
 80146f0:	d902      	bls.n	80146f8 <_free_r+0x78>
 80146f2:	230c      	movs	r3, #12
 80146f4:	6003      	str	r3, [r0, #0]
 80146f6:	e7d6      	b.n	80146a6 <_free_r+0x26>
 80146f8:	6825      	ldr	r5, [r4, #0]
 80146fa:	1961      	adds	r1, r4, r5
 80146fc:	428b      	cmp	r3, r1
 80146fe:	bf04      	itt	eq
 8014700:	6819      	ldreq	r1, [r3, #0]
 8014702:	685b      	ldreq	r3, [r3, #4]
 8014704:	6063      	str	r3, [r4, #4]
 8014706:	bf04      	itt	eq
 8014708:	1949      	addeq	r1, r1, r5
 801470a:	6021      	streq	r1, [r4, #0]
 801470c:	6054      	str	r4, [r2, #4]
 801470e:	e7ca      	b.n	80146a6 <_free_r+0x26>
 8014710:	b003      	add	sp, #12
 8014712:	bd30      	pop	{r4, r5, pc}
 8014714:	20000518 	.word	0x20000518

08014718 <sbrk_aligned>:
 8014718:	b570      	push	{r4, r5, r6, lr}
 801471a:	4e0e      	ldr	r6, [pc, #56]	; (8014754 <sbrk_aligned+0x3c>)
 801471c:	460c      	mov	r4, r1
 801471e:	6831      	ldr	r1, [r6, #0]
 8014720:	4605      	mov	r5, r0
 8014722:	b911      	cbnz	r1, 801472a <sbrk_aligned+0x12>
 8014724:	f000 fff4 	bl	8015710 <_sbrk_r>
 8014728:	6030      	str	r0, [r6, #0]
 801472a:	4621      	mov	r1, r4
 801472c:	4628      	mov	r0, r5
 801472e:	f000 ffef 	bl	8015710 <_sbrk_r>
 8014732:	1c43      	adds	r3, r0, #1
 8014734:	d00a      	beq.n	801474c <sbrk_aligned+0x34>
 8014736:	1cc4      	adds	r4, r0, #3
 8014738:	f024 0403 	bic.w	r4, r4, #3
 801473c:	42a0      	cmp	r0, r4
 801473e:	d007      	beq.n	8014750 <sbrk_aligned+0x38>
 8014740:	1a21      	subs	r1, r4, r0
 8014742:	4628      	mov	r0, r5
 8014744:	f000 ffe4 	bl	8015710 <_sbrk_r>
 8014748:	3001      	adds	r0, #1
 801474a:	d101      	bne.n	8014750 <sbrk_aligned+0x38>
 801474c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014750:	4620      	mov	r0, r4
 8014752:	bd70      	pop	{r4, r5, r6, pc}
 8014754:	2000051c 	.word	0x2000051c

08014758 <_malloc_r>:
 8014758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801475c:	1ccd      	adds	r5, r1, #3
 801475e:	f025 0503 	bic.w	r5, r5, #3
 8014762:	3508      	adds	r5, #8
 8014764:	2d0c      	cmp	r5, #12
 8014766:	bf38      	it	cc
 8014768:	250c      	movcc	r5, #12
 801476a:	2d00      	cmp	r5, #0
 801476c:	4607      	mov	r7, r0
 801476e:	db01      	blt.n	8014774 <_malloc_r+0x1c>
 8014770:	42a9      	cmp	r1, r5
 8014772:	d905      	bls.n	8014780 <_malloc_r+0x28>
 8014774:	230c      	movs	r3, #12
 8014776:	603b      	str	r3, [r7, #0]
 8014778:	2600      	movs	r6, #0
 801477a:	4630      	mov	r0, r6
 801477c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014780:	4e2e      	ldr	r6, [pc, #184]	; (801483c <_malloc_r+0xe4>)
 8014782:	f7ff fbd7 	bl	8013f34 <__malloc_lock>
 8014786:	6833      	ldr	r3, [r6, #0]
 8014788:	461c      	mov	r4, r3
 801478a:	bb34      	cbnz	r4, 80147da <_malloc_r+0x82>
 801478c:	4629      	mov	r1, r5
 801478e:	4638      	mov	r0, r7
 8014790:	f7ff ffc2 	bl	8014718 <sbrk_aligned>
 8014794:	1c43      	adds	r3, r0, #1
 8014796:	4604      	mov	r4, r0
 8014798:	d14d      	bne.n	8014836 <_malloc_r+0xde>
 801479a:	6834      	ldr	r4, [r6, #0]
 801479c:	4626      	mov	r6, r4
 801479e:	2e00      	cmp	r6, #0
 80147a0:	d140      	bne.n	8014824 <_malloc_r+0xcc>
 80147a2:	6823      	ldr	r3, [r4, #0]
 80147a4:	4631      	mov	r1, r6
 80147a6:	4638      	mov	r0, r7
 80147a8:	eb04 0803 	add.w	r8, r4, r3
 80147ac:	f000 ffb0 	bl	8015710 <_sbrk_r>
 80147b0:	4580      	cmp	r8, r0
 80147b2:	d13a      	bne.n	801482a <_malloc_r+0xd2>
 80147b4:	6821      	ldr	r1, [r4, #0]
 80147b6:	3503      	adds	r5, #3
 80147b8:	1a6d      	subs	r5, r5, r1
 80147ba:	f025 0503 	bic.w	r5, r5, #3
 80147be:	3508      	adds	r5, #8
 80147c0:	2d0c      	cmp	r5, #12
 80147c2:	bf38      	it	cc
 80147c4:	250c      	movcc	r5, #12
 80147c6:	4629      	mov	r1, r5
 80147c8:	4638      	mov	r0, r7
 80147ca:	f7ff ffa5 	bl	8014718 <sbrk_aligned>
 80147ce:	3001      	adds	r0, #1
 80147d0:	d02b      	beq.n	801482a <_malloc_r+0xd2>
 80147d2:	6823      	ldr	r3, [r4, #0]
 80147d4:	442b      	add	r3, r5
 80147d6:	6023      	str	r3, [r4, #0]
 80147d8:	e00e      	b.n	80147f8 <_malloc_r+0xa0>
 80147da:	6822      	ldr	r2, [r4, #0]
 80147dc:	1b52      	subs	r2, r2, r5
 80147de:	d41e      	bmi.n	801481e <_malloc_r+0xc6>
 80147e0:	2a0b      	cmp	r2, #11
 80147e2:	d916      	bls.n	8014812 <_malloc_r+0xba>
 80147e4:	1961      	adds	r1, r4, r5
 80147e6:	42a3      	cmp	r3, r4
 80147e8:	6025      	str	r5, [r4, #0]
 80147ea:	bf18      	it	ne
 80147ec:	6059      	strne	r1, [r3, #4]
 80147ee:	6863      	ldr	r3, [r4, #4]
 80147f0:	bf08      	it	eq
 80147f2:	6031      	streq	r1, [r6, #0]
 80147f4:	5162      	str	r2, [r4, r5]
 80147f6:	604b      	str	r3, [r1, #4]
 80147f8:	4638      	mov	r0, r7
 80147fa:	f104 060b 	add.w	r6, r4, #11
 80147fe:	f7ff fb9f 	bl	8013f40 <__malloc_unlock>
 8014802:	f026 0607 	bic.w	r6, r6, #7
 8014806:	1d23      	adds	r3, r4, #4
 8014808:	1af2      	subs	r2, r6, r3
 801480a:	d0b6      	beq.n	801477a <_malloc_r+0x22>
 801480c:	1b9b      	subs	r3, r3, r6
 801480e:	50a3      	str	r3, [r4, r2]
 8014810:	e7b3      	b.n	801477a <_malloc_r+0x22>
 8014812:	6862      	ldr	r2, [r4, #4]
 8014814:	42a3      	cmp	r3, r4
 8014816:	bf0c      	ite	eq
 8014818:	6032      	streq	r2, [r6, #0]
 801481a:	605a      	strne	r2, [r3, #4]
 801481c:	e7ec      	b.n	80147f8 <_malloc_r+0xa0>
 801481e:	4623      	mov	r3, r4
 8014820:	6864      	ldr	r4, [r4, #4]
 8014822:	e7b2      	b.n	801478a <_malloc_r+0x32>
 8014824:	4634      	mov	r4, r6
 8014826:	6876      	ldr	r6, [r6, #4]
 8014828:	e7b9      	b.n	801479e <_malloc_r+0x46>
 801482a:	230c      	movs	r3, #12
 801482c:	603b      	str	r3, [r7, #0]
 801482e:	4638      	mov	r0, r7
 8014830:	f7ff fb86 	bl	8013f40 <__malloc_unlock>
 8014834:	e7a1      	b.n	801477a <_malloc_r+0x22>
 8014836:	6025      	str	r5, [r4, #0]
 8014838:	e7de      	b.n	80147f8 <_malloc_r+0xa0>
 801483a:	bf00      	nop
 801483c:	20000518 	.word	0x20000518

08014840 <_malloc_usable_size_r>:
 8014840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014844:	1f18      	subs	r0, r3, #4
 8014846:	2b00      	cmp	r3, #0
 8014848:	bfbc      	itt	lt
 801484a:	580b      	ldrlt	r3, [r1, r0]
 801484c:	18c0      	addlt	r0, r0, r3
 801484e:	4770      	bx	lr

08014850 <_realloc_r>:
 8014850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014854:	4680      	mov	r8, r0
 8014856:	4614      	mov	r4, r2
 8014858:	460e      	mov	r6, r1
 801485a:	b921      	cbnz	r1, 8014866 <_realloc_r+0x16>
 801485c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014860:	4611      	mov	r1, r2
 8014862:	f7ff bf79 	b.w	8014758 <_malloc_r>
 8014866:	b92a      	cbnz	r2, 8014874 <_realloc_r+0x24>
 8014868:	f7ff ff0a 	bl	8014680 <_free_r>
 801486c:	4625      	mov	r5, r4
 801486e:	4628      	mov	r0, r5
 8014870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014874:	f7ff ffe4 	bl	8014840 <_malloc_usable_size_r>
 8014878:	4284      	cmp	r4, r0
 801487a:	4607      	mov	r7, r0
 801487c:	d802      	bhi.n	8014884 <_realloc_r+0x34>
 801487e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014882:	d812      	bhi.n	80148aa <_realloc_r+0x5a>
 8014884:	4621      	mov	r1, r4
 8014886:	4640      	mov	r0, r8
 8014888:	f7ff ff66 	bl	8014758 <_malloc_r>
 801488c:	4605      	mov	r5, r0
 801488e:	2800      	cmp	r0, #0
 8014890:	d0ed      	beq.n	801486e <_realloc_r+0x1e>
 8014892:	42bc      	cmp	r4, r7
 8014894:	4622      	mov	r2, r4
 8014896:	4631      	mov	r1, r6
 8014898:	bf28      	it	cs
 801489a:	463a      	movcs	r2, r7
 801489c:	f7ff fb1a 	bl	8013ed4 <memcpy>
 80148a0:	4631      	mov	r1, r6
 80148a2:	4640      	mov	r0, r8
 80148a4:	f7ff feec 	bl	8014680 <_free_r>
 80148a8:	e7e1      	b.n	801486e <_realloc_r+0x1e>
 80148aa:	4635      	mov	r5, r6
 80148ac:	e7df      	b.n	801486e <_realloc_r+0x1e>

080148ae <__ssputs_r>:
 80148ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80148b2:	688e      	ldr	r6, [r1, #8]
 80148b4:	429e      	cmp	r6, r3
 80148b6:	4682      	mov	sl, r0
 80148b8:	460c      	mov	r4, r1
 80148ba:	4690      	mov	r8, r2
 80148bc:	461f      	mov	r7, r3
 80148be:	d838      	bhi.n	8014932 <__ssputs_r+0x84>
 80148c0:	898a      	ldrh	r2, [r1, #12]
 80148c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80148c6:	d032      	beq.n	801492e <__ssputs_r+0x80>
 80148c8:	6825      	ldr	r5, [r4, #0]
 80148ca:	6909      	ldr	r1, [r1, #16]
 80148cc:	eba5 0901 	sub.w	r9, r5, r1
 80148d0:	6965      	ldr	r5, [r4, #20]
 80148d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80148d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80148da:	3301      	adds	r3, #1
 80148dc:	444b      	add	r3, r9
 80148de:	106d      	asrs	r5, r5, #1
 80148e0:	429d      	cmp	r5, r3
 80148e2:	bf38      	it	cc
 80148e4:	461d      	movcc	r5, r3
 80148e6:	0553      	lsls	r3, r2, #21
 80148e8:	d531      	bpl.n	801494e <__ssputs_r+0xa0>
 80148ea:	4629      	mov	r1, r5
 80148ec:	f7ff ff34 	bl	8014758 <_malloc_r>
 80148f0:	4606      	mov	r6, r0
 80148f2:	b950      	cbnz	r0, 801490a <__ssputs_r+0x5c>
 80148f4:	230c      	movs	r3, #12
 80148f6:	f8ca 3000 	str.w	r3, [sl]
 80148fa:	89a3      	ldrh	r3, [r4, #12]
 80148fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014900:	81a3      	strh	r3, [r4, #12]
 8014902:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801490a:	6921      	ldr	r1, [r4, #16]
 801490c:	464a      	mov	r2, r9
 801490e:	f7ff fae1 	bl	8013ed4 <memcpy>
 8014912:	89a3      	ldrh	r3, [r4, #12]
 8014914:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801491c:	81a3      	strh	r3, [r4, #12]
 801491e:	6126      	str	r6, [r4, #16]
 8014920:	6165      	str	r5, [r4, #20]
 8014922:	444e      	add	r6, r9
 8014924:	eba5 0509 	sub.w	r5, r5, r9
 8014928:	6026      	str	r6, [r4, #0]
 801492a:	60a5      	str	r5, [r4, #8]
 801492c:	463e      	mov	r6, r7
 801492e:	42be      	cmp	r6, r7
 8014930:	d900      	bls.n	8014934 <__ssputs_r+0x86>
 8014932:	463e      	mov	r6, r7
 8014934:	6820      	ldr	r0, [r4, #0]
 8014936:	4632      	mov	r2, r6
 8014938:	4641      	mov	r1, r8
 801493a:	f7ff fad9 	bl	8013ef0 <memmove>
 801493e:	68a3      	ldr	r3, [r4, #8]
 8014940:	1b9b      	subs	r3, r3, r6
 8014942:	60a3      	str	r3, [r4, #8]
 8014944:	6823      	ldr	r3, [r4, #0]
 8014946:	4433      	add	r3, r6
 8014948:	6023      	str	r3, [r4, #0]
 801494a:	2000      	movs	r0, #0
 801494c:	e7db      	b.n	8014906 <__ssputs_r+0x58>
 801494e:	462a      	mov	r2, r5
 8014950:	f7ff ff7e 	bl	8014850 <_realloc_r>
 8014954:	4606      	mov	r6, r0
 8014956:	2800      	cmp	r0, #0
 8014958:	d1e1      	bne.n	801491e <__ssputs_r+0x70>
 801495a:	6921      	ldr	r1, [r4, #16]
 801495c:	4650      	mov	r0, sl
 801495e:	f7ff fe8f 	bl	8014680 <_free_r>
 8014962:	e7c7      	b.n	80148f4 <__ssputs_r+0x46>

08014964 <_svfiprintf_r>:
 8014964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014968:	4698      	mov	r8, r3
 801496a:	898b      	ldrh	r3, [r1, #12]
 801496c:	061b      	lsls	r3, r3, #24
 801496e:	b09d      	sub	sp, #116	; 0x74
 8014970:	4607      	mov	r7, r0
 8014972:	460d      	mov	r5, r1
 8014974:	4614      	mov	r4, r2
 8014976:	d50e      	bpl.n	8014996 <_svfiprintf_r+0x32>
 8014978:	690b      	ldr	r3, [r1, #16]
 801497a:	b963      	cbnz	r3, 8014996 <_svfiprintf_r+0x32>
 801497c:	2140      	movs	r1, #64	; 0x40
 801497e:	f7ff feeb 	bl	8014758 <_malloc_r>
 8014982:	6028      	str	r0, [r5, #0]
 8014984:	6128      	str	r0, [r5, #16]
 8014986:	b920      	cbnz	r0, 8014992 <_svfiprintf_r+0x2e>
 8014988:	230c      	movs	r3, #12
 801498a:	603b      	str	r3, [r7, #0]
 801498c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014990:	e0d1      	b.n	8014b36 <_svfiprintf_r+0x1d2>
 8014992:	2340      	movs	r3, #64	; 0x40
 8014994:	616b      	str	r3, [r5, #20]
 8014996:	2300      	movs	r3, #0
 8014998:	9309      	str	r3, [sp, #36]	; 0x24
 801499a:	2320      	movs	r3, #32
 801499c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80149a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80149a4:	2330      	movs	r3, #48	; 0x30
 80149a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014b50 <_svfiprintf_r+0x1ec>
 80149aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80149ae:	f04f 0901 	mov.w	r9, #1
 80149b2:	4623      	mov	r3, r4
 80149b4:	469a      	mov	sl, r3
 80149b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80149ba:	b10a      	cbz	r2, 80149c0 <_svfiprintf_r+0x5c>
 80149bc:	2a25      	cmp	r2, #37	; 0x25
 80149be:	d1f9      	bne.n	80149b4 <_svfiprintf_r+0x50>
 80149c0:	ebba 0b04 	subs.w	fp, sl, r4
 80149c4:	d00b      	beq.n	80149de <_svfiprintf_r+0x7a>
 80149c6:	465b      	mov	r3, fp
 80149c8:	4622      	mov	r2, r4
 80149ca:	4629      	mov	r1, r5
 80149cc:	4638      	mov	r0, r7
 80149ce:	f7ff ff6e 	bl	80148ae <__ssputs_r>
 80149d2:	3001      	adds	r0, #1
 80149d4:	f000 80aa 	beq.w	8014b2c <_svfiprintf_r+0x1c8>
 80149d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80149da:	445a      	add	r2, fp
 80149dc:	9209      	str	r2, [sp, #36]	; 0x24
 80149de:	f89a 3000 	ldrb.w	r3, [sl]
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	f000 80a2 	beq.w	8014b2c <_svfiprintf_r+0x1c8>
 80149e8:	2300      	movs	r3, #0
 80149ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80149ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80149f2:	f10a 0a01 	add.w	sl, sl, #1
 80149f6:	9304      	str	r3, [sp, #16]
 80149f8:	9307      	str	r3, [sp, #28]
 80149fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80149fe:	931a      	str	r3, [sp, #104]	; 0x68
 8014a00:	4654      	mov	r4, sl
 8014a02:	2205      	movs	r2, #5
 8014a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a08:	4851      	ldr	r0, [pc, #324]	; (8014b50 <_svfiprintf_r+0x1ec>)
 8014a0a:	f7eb fc19 	bl	8000240 <memchr>
 8014a0e:	9a04      	ldr	r2, [sp, #16]
 8014a10:	b9d8      	cbnz	r0, 8014a4a <_svfiprintf_r+0xe6>
 8014a12:	06d0      	lsls	r0, r2, #27
 8014a14:	bf44      	itt	mi
 8014a16:	2320      	movmi	r3, #32
 8014a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014a1c:	0711      	lsls	r1, r2, #28
 8014a1e:	bf44      	itt	mi
 8014a20:	232b      	movmi	r3, #43	; 0x2b
 8014a22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014a26:	f89a 3000 	ldrb.w	r3, [sl]
 8014a2a:	2b2a      	cmp	r3, #42	; 0x2a
 8014a2c:	d015      	beq.n	8014a5a <_svfiprintf_r+0xf6>
 8014a2e:	9a07      	ldr	r2, [sp, #28]
 8014a30:	4654      	mov	r4, sl
 8014a32:	2000      	movs	r0, #0
 8014a34:	f04f 0c0a 	mov.w	ip, #10
 8014a38:	4621      	mov	r1, r4
 8014a3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014a3e:	3b30      	subs	r3, #48	; 0x30
 8014a40:	2b09      	cmp	r3, #9
 8014a42:	d94e      	bls.n	8014ae2 <_svfiprintf_r+0x17e>
 8014a44:	b1b0      	cbz	r0, 8014a74 <_svfiprintf_r+0x110>
 8014a46:	9207      	str	r2, [sp, #28]
 8014a48:	e014      	b.n	8014a74 <_svfiprintf_r+0x110>
 8014a4a:	eba0 0308 	sub.w	r3, r0, r8
 8014a4e:	fa09 f303 	lsl.w	r3, r9, r3
 8014a52:	4313      	orrs	r3, r2
 8014a54:	9304      	str	r3, [sp, #16]
 8014a56:	46a2      	mov	sl, r4
 8014a58:	e7d2      	b.n	8014a00 <_svfiprintf_r+0x9c>
 8014a5a:	9b03      	ldr	r3, [sp, #12]
 8014a5c:	1d19      	adds	r1, r3, #4
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	9103      	str	r1, [sp, #12]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	bfbb      	ittet	lt
 8014a66:	425b      	neglt	r3, r3
 8014a68:	f042 0202 	orrlt.w	r2, r2, #2
 8014a6c:	9307      	strge	r3, [sp, #28]
 8014a6e:	9307      	strlt	r3, [sp, #28]
 8014a70:	bfb8      	it	lt
 8014a72:	9204      	strlt	r2, [sp, #16]
 8014a74:	7823      	ldrb	r3, [r4, #0]
 8014a76:	2b2e      	cmp	r3, #46	; 0x2e
 8014a78:	d10c      	bne.n	8014a94 <_svfiprintf_r+0x130>
 8014a7a:	7863      	ldrb	r3, [r4, #1]
 8014a7c:	2b2a      	cmp	r3, #42	; 0x2a
 8014a7e:	d135      	bne.n	8014aec <_svfiprintf_r+0x188>
 8014a80:	9b03      	ldr	r3, [sp, #12]
 8014a82:	1d1a      	adds	r2, r3, #4
 8014a84:	681b      	ldr	r3, [r3, #0]
 8014a86:	9203      	str	r2, [sp, #12]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	bfb8      	it	lt
 8014a8c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014a90:	3402      	adds	r4, #2
 8014a92:	9305      	str	r3, [sp, #20]
 8014a94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014b60 <_svfiprintf_r+0x1fc>
 8014a98:	7821      	ldrb	r1, [r4, #0]
 8014a9a:	2203      	movs	r2, #3
 8014a9c:	4650      	mov	r0, sl
 8014a9e:	f7eb fbcf 	bl	8000240 <memchr>
 8014aa2:	b140      	cbz	r0, 8014ab6 <_svfiprintf_r+0x152>
 8014aa4:	2340      	movs	r3, #64	; 0x40
 8014aa6:	eba0 000a 	sub.w	r0, r0, sl
 8014aaa:	fa03 f000 	lsl.w	r0, r3, r0
 8014aae:	9b04      	ldr	r3, [sp, #16]
 8014ab0:	4303      	orrs	r3, r0
 8014ab2:	3401      	adds	r4, #1
 8014ab4:	9304      	str	r3, [sp, #16]
 8014ab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014aba:	4826      	ldr	r0, [pc, #152]	; (8014b54 <_svfiprintf_r+0x1f0>)
 8014abc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014ac0:	2206      	movs	r2, #6
 8014ac2:	f7eb fbbd 	bl	8000240 <memchr>
 8014ac6:	2800      	cmp	r0, #0
 8014ac8:	d038      	beq.n	8014b3c <_svfiprintf_r+0x1d8>
 8014aca:	4b23      	ldr	r3, [pc, #140]	; (8014b58 <_svfiprintf_r+0x1f4>)
 8014acc:	bb1b      	cbnz	r3, 8014b16 <_svfiprintf_r+0x1b2>
 8014ace:	9b03      	ldr	r3, [sp, #12]
 8014ad0:	3307      	adds	r3, #7
 8014ad2:	f023 0307 	bic.w	r3, r3, #7
 8014ad6:	3308      	adds	r3, #8
 8014ad8:	9303      	str	r3, [sp, #12]
 8014ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014adc:	4433      	add	r3, r6
 8014ade:	9309      	str	r3, [sp, #36]	; 0x24
 8014ae0:	e767      	b.n	80149b2 <_svfiprintf_r+0x4e>
 8014ae2:	fb0c 3202 	mla	r2, ip, r2, r3
 8014ae6:	460c      	mov	r4, r1
 8014ae8:	2001      	movs	r0, #1
 8014aea:	e7a5      	b.n	8014a38 <_svfiprintf_r+0xd4>
 8014aec:	2300      	movs	r3, #0
 8014aee:	3401      	adds	r4, #1
 8014af0:	9305      	str	r3, [sp, #20]
 8014af2:	4619      	mov	r1, r3
 8014af4:	f04f 0c0a 	mov.w	ip, #10
 8014af8:	4620      	mov	r0, r4
 8014afa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014afe:	3a30      	subs	r2, #48	; 0x30
 8014b00:	2a09      	cmp	r2, #9
 8014b02:	d903      	bls.n	8014b0c <_svfiprintf_r+0x1a8>
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d0c5      	beq.n	8014a94 <_svfiprintf_r+0x130>
 8014b08:	9105      	str	r1, [sp, #20]
 8014b0a:	e7c3      	b.n	8014a94 <_svfiprintf_r+0x130>
 8014b0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8014b10:	4604      	mov	r4, r0
 8014b12:	2301      	movs	r3, #1
 8014b14:	e7f0      	b.n	8014af8 <_svfiprintf_r+0x194>
 8014b16:	ab03      	add	r3, sp, #12
 8014b18:	9300      	str	r3, [sp, #0]
 8014b1a:	462a      	mov	r2, r5
 8014b1c:	4b0f      	ldr	r3, [pc, #60]	; (8014b5c <_svfiprintf_r+0x1f8>)
 8014b1e:	a904      	add	r1, sp, #16
 8014b20:	4638      	mov	r0, r7
 8014b22:	f000 fa19 	bl	8014f58 <_printf_float>
 8014b26:	1c42      	adds	r2, r0, #1
 8014b28:	4606      	mov	r6, r0
 8014b2a:	d1d6      	bne.n	8014ada <_svfiprintf_r+0x176>
 8014b2c:	89ab      	ldrh	r3, [r5, #12]
 8014b2e:	065b      	lsls	r3, r3, #25
 8014b30:	f53f af2c 	bmi.w	801498c <_svfiprintf_r+0x28>
 8014b34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014b36:	b01d      	add	sp, #116	; 0x74
 8014b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b3c:	ab03      	add	r3, sp, #12
 8014b3e:	9300      	str	r3, [sp, #0]
 8014b40:	462a      	mov	r2, r5
 8014b42:	4b06      	ldr	r3, [pc, #24]	; (8014b5c <_svfiprintf_r+0x1f8>)
 8014b44:	a904      	add	r1, sp, #16
 8014b46:	4638      	mov	r0, r7
 8014b48:	f000 fcaa 	bl	80154a0 <_printf_i>
 8014b4c:	e7eb      	b.n	8014b26 <_svfiprintf_r+0x1c2>
 8014b4e:	bf00      	nop
 8014b50:	0801680c 	.word	0x0801680c
 8014b54:	08016816 	.word	0x08016816
 8014b58:	08014f59 	.word	0x08014f59
 8014b5c:	080148af 	.word	0x080148af
 8014b60:	08016812 	.word	0x08016812

08014b64 <__sfputc_r>:
 8014b64:	6893      	ldr	r3, [r2, #8]
 8014b66:	3b01      	subs	r3, #1
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	b410      	push	{r4}
 8014b6c:	6093      	str	r3, [r2, #8]
 8014b6e:	da08      	bge.n	8014b82 <__sfputc_r+0x1e>
 8014b70:	6994      	ldr	r4, [r2, #24]
 8014b72:	42a3      	cmp	r3, r4
 8014b74:	db01      	blt.n	8014b7a <__sfputc_r+0x16>
 8014b76:	290a      	cmp	r1, #10
 8014b78:	d103      	bne.n	8014b82 <__sfputc_r+0x1e>
 8014b7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014b7e:	f000 be89 	b.w	8015894 <__swbuf_r>
 8014b82:	6813      	ldr	r3, [r2, #0]
 8014b84:	1c58      	adds	r0, r3, #1
 8014b86:	6010      	str	r0, [r2, #0]
 8014b88:	7019      	strb	r1, [r3, #0]
 8014b8a:	4608      	mov	r0, r1
 8014b8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014b90:	4770      	bx	lr

08014b92 <__sfputs_r>:
 8014b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b94:	4606      	mov	r6, r0
 8014b96:	460f      	mov	r7, r1
 8014b98:	4614      	mov	r4, r2
 8014b9a:	18d5      	adds	r5, r2, r3
 8014b9c:	42ac      	cmp	r4, r5
 8014b9e:	d101      	bne.n	8014ba4 <__sfputs_r+0x12>
 8014ba0:	2000      	movs	r0, #0
 8014ba2:	e007      	b.n	8014bb4 <__sfputs_r+0x22>
 8014ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ba8:	463a      	mov	r2, r7
 8014baa:	4630      	mov	r0, r6
 8014bac:	f7ff ffda 	bl	8014b64 <__sfputc_r>
 8014bb0:	1c43      	adds	r3, r0, #1
 8014bb2:	d1f3      	bne.n	8014b9c <__sfputs_r+0xa>
 8014bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014bb8 <_vfiprintf_r>:
 8014bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bbc:	460d      	mov	r5, r1
 8014bbe:	b09d      	sub	sp, #116	; 0x74
 8014bc0:	4614      	mov	r4, r2
 8014bc2:	4698      	mov	r8, r3
 8014bc4:	4606      	mov	r6, r0
 8014bc6:	b118      	cbz	r0, 8014bd0 <_vfiprintf_r+0x18>
 8014bc8:	6983      	ldr	r3, [r0, #24]
 8014bca:	b90b      	cbnz	r3, 8014bd0 <_vfiprintf_r+0x18>
 8014bcc:	f7fe ffce 	bl	8013b6c <__sinit>
 8014bd0:	4b89      	ldr	r3, [pc, #548]	; (8014df8 <_vfiprintf_r+0x240>)
 8014bd2:	429d      	cmp	r5, r3
 8014bd4:	d11b      	bne.n	8014c0e <_vfiprintf_r+0x56>
 8014bd6:	6875      	ldr	r5, [r6, #4]
 8014bd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014bda:	07d9      	lsls	r1, r3, #31
 8014bdc:	d405      	bmi.n	8014bea <_vfiprintf_r+0x32>
 8014bde:	89ab      	ldrh	r3, [r5, #12]
 8014be0:	059a      	lsls	r2, r3, #22
 8014be2:	d402      	bmi.n	8014bea <_vfiprintf_r+0x32>
 8014be4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014be6:	f7ff f8d0 	bl	8013d8a <__retarget_lock_acquire_recursive>
 8014bea:	89ab      	ldrh	r3, [r5, #12]
 8014bec:	071b      	lsls	r3, r3, #28
 8014bee:	d501      	bpl.n	8014bf4 <_vfiprintf_r+0x3c>
 8014bf0:	692b      	ldr	r3, [r5, #16]
 8014bf2:	b9eb      	cbnz	r3, 8014c30 <_vfiprintf_r+0x78>
 8014bf4:	4629      	mov	r1, r5
 8014bf6:	4630      	mov	r0, r6
 8014bf8:	f000 febe 	bl	8015978 <__swsetup_r>
 8014bfc:	b1c0      	cbz	r0, 8014c30 <_vfiprintf_r+0x78>
 8014bfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014c00:	07dc      	lsls	r4, r3, #31
 8014c02:	d50e      	bpl.n	8014c22 <_vfiprintf_r+0x6a>
 8014c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014c08:	b01d      	add	sp, #116	; 0x74
 8014c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c0e:	4b7b      	ldr	r3, [pc, #492]	; (8014dfc <_vfiprintf_r+0x244>)
 8014c10:	429d      	cmp	r5, r3
 8014c12:	d101      	bne.n	8014c18 <_vfiprintf_r+0x60>
 8014c14:	68b5      	ldr	r5, [r6, #8]
 8014c16:	e7df      	b.n	8014bd8 <_vfiprintf_r+0x20>
 8014c18:	4b79      	ldr	r3, [pc, #484]	; (8014e00 <_vfiprintf_r+0x248>)
 8014c1a:	429d      	cmp	r5, r3
 8014c1c:	bf08      	it	eq
 8014c1e:	68f5      	ldreq	r5, [r6, #12]
 8014c20:	e7da      	b.n	8014bd8 <_vfiprintf_r+0x20>
 8014c22:	89ab      	ldrh	r3, [r5, #12]
 8014c24:	0598      	lsls	r0, r3, #22
 8014c26:	d4ed      	bmi.n	8014c04 <_vfiprintf_r+0x4c>
 8014c28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014c2a:	f7ff f8b0 	bl	8013d8e <__retarget_lock_release_recursive>
 8014c2e:	e7e9      	b.n	8014c04 <_vfiprintf_r+0x4c>
 8014c30:	2300      	movs	r3, #0
 8014c32:	9309      	str	r3, [sp, #36]	; 0x24
 8014c34:	2320      	movs	r3, #32
 8014c36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014c3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8014c3e:	2330      	movs	r3, #48	; 0x30
 8014c40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014e04 <_vfiprintf_r+0x24c>
 8014c44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014c48:	f04f 0901 	mov.w	r9, #1
 8014c4c:	4623      	mov	r3, r4
 8014c4e:	469a      	mov	sl, r3
 8014c50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014c54:	b10a      	cbz	r2, 8014c5a <_vfiprintf_r+0xa2>
 8014c56:	2a25      	cmp	r2, #37	; 0x25
 8014c58:	d1f9      	bne.n	8014c4e <_vfiprintf_r+0x96>
 8014c5a:	ebba 0b04 	subs.w	fp, sl, r4
 8014c5e:	d00b      	beq.n	8014c78 <_vfiprintf_r+0xc0>
 8014c60:	465b      	mov	r3, fp
 8014c62:	4622      	mov	r2, r4
 8014c64:	4629      	mov	r1, r5
 8014c66:	4630      	mov	r0, r6
 8014c68:	f7ff ff93 	bl	8014b92 <__sfputs_r>
 8014c6c:	3001      	adds	r0, #1
 8014c6e:	f000 80aa 	beq.w	8014dc6 <_vfiprintf_r+0x20e>
 8014c72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014c74:	445a      	add	r2, fp
 8014c76:	9209      	str	r2, [sp, #36]	; 0x24
 8014c78:	f89a 3000 	ldrb.w	r3, [sl]
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	f000 80a2 	beq.w	8014dc6 <_vfiprintf_r+0x20e>
 8014c82:	2300      	movs	r3, #0
 8014c84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014c88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014c8c:	f10a 0a01 	add.w	sl, sl, #1
 8014c90:	9304      	str	r3, [sp, #16]
 8014c92:	9307      	str	r3, [sp, #28]
 8014c94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014c98:	931a      	str	r3, [sp, #104]	; 0x68
 8014c9a:	4654      	mov	r4, sl
 8014c9c:	2205      	movs	r2, #5
 8014c9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ca2:	4858      	ldr	r0, [pc, #352]	; (8014e04 <_vfiprintf_r+0x24c>)
 8014ca4:	f7eb facc 	bl	8000240 <memchr>
 8014ca8:	9a04      	ldr	r2, [sp, #16]
 8014caa:	b9d8      	cbnz	r0, 8014ce4 <_vfiprintf_r+0x12c>
 8014cac:	06d1      	lsls	r1, r2, #27
 8014cae:	bf44      	itt	mi
 8014cb0:	2320      	movmi	r3, #32
 8014cb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014cb6:	0713      	lsls	r3, r2, #28
 8014cb8:	bf44      	itt	mi
 8014cba:	232b      	movmi	r3, #43	; 0x2b
 8014cbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014cc0:	f89a 3000 	ldrb.w	r3, [sl]
 8014cc4:	2b2a      	cmp	r3, #42	; 0x2a
 8014cc6:	d015      	beq.n	8014cf4 <_vfiprintf_r+0x13c>
 8014cc8:	9a07      	ldr	r2, [sp, #28]
 8014cca:	4654      	mov	r4, sl
 8014ccc:	2000      	movs	r0, #0
 8014cce:	f04f 0c0a 	mov.w	ip, #10
 8014cd2:	4621      	mov	r1, r4
 8014cd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014cd8:	3b30      	subs	r3, #48	; 0x30
 8014cda:	2b09      	cmp	r3, #9
 8014cdc:	d94e      	bls.n	8014d7c <_vfiprintf_r+0x1c4>
 8014cde:	b1b0      	cbz	r0, 8014d0e <_vfiprintf_r+0x156>
 8014ce0:	9207      	str	r2, [sp, #28]
 8014ce2:	e014      	b.n	8014d0e <_vfiprintf_r+0x156>
 8014ce4:	eba0 0308 	sub.w	r3, r0, r8
 8014ce8:	fa09 f303 	lsl.w	r3, r9, r3
 8014cec:	4313      	orrs	r3, r2
 8014cee:	9304      	str	r3, [sp, #16]
 8014cf0:	46a2      	mov	sl, r4
 8014cf2:	e7d2      	b.n	8014c9a <_vfiprintf_r+0xe2>
 8014cf4:	9b03      	ldr	r3, [sp, #12]
 8014cf6:	1d19      	adds	r1, r3, #4
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	9103      	str	r1, [sp, #12]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	bfbb      	ittet	lt
 8014d00:	425b      	neglt	r3, r3
 8014d02:	f042 0202 	orrlt.w	r2, r2, #2
 8014d06:	9307      	strge	r3, [sp, #28]
 8014d08:	9307      	strlt	r3, [sp, #28]
 8014d0a:	bfb8      	it	lt
 8014d0c:	9204      	strlt	r2, [sp, #16]
 8014d0e:	7823      	ldrb	r3, [r4, #0]
 8014d10:	2b2e      	cmp	r3, #46	; 0x2e
 8014d12:	d10c      	bne.n	8014d2e <_vfiprintf_r+0x176>
 8014d14:	7863      	ldrb	r3, [r4, #1]
 8014d16:	2b2a      	cmp	r3, #42	; 0x2a
 8014d18:	d135      	bne.n	8014d86 <_vfiprintf_r+0x1ce>
 8014d1a:	9b03      	ldr	r3, [sp, #12]
 8014d1c:	1d1a      	adds	r2, r3, #4
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	9203      	str	r2, [sp, #12]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	bfb8      	it	lt
 8014d26:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014d2a:	3402      	adds	r4, #2
 8014d2c:	9305      	str	r3, [sp, #20]
 8014d2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014e14 <_vfiprintf_r+0x25c>
 8014d32:	7821      	ldrb	r1, [r4, #0]
 8014d34:	2203      	movs	r2, #3
 8014d36:	4650      	mov	r0, sl
 8014d38:	f7eb fa82 	bl	8000240 <memchr>
 8014d3c:	b140      	cbz	r0, 8014d50 <_vfiprintf_r+0x198>
 8014d3e:	2340      	movs	r3, #64	; 0x40
 8014d40:	eba0 000a 	sub.w	r0, r0, sl
 8014d44:	fa03 f000 	lsl.w	r0, r3, r0
 8014d48:	9b04      	ldr	r3, [sp, #16]
 8014d4a:	4303      	orrs	r3, r0
 8014d4c:	3401      	adds	r4, #1
 8014d4e:	9304      	str	r3, [sp, #16]
 8014d50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d54:	482c      	ldr	r0, [pc, #176]	; (8014e08 <_vfiprintf_r+0x250>)
 8014d56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014d5a:	2206      	movs	r2, #6
 8014d5c:	f7eb fa70 	bl	8000240 <memchr>
 8014d60:	2800      	cmp	r0, #0
 8014d62:	d03f      	beq.n	8014de4 <_vfiprintf_r+0x22c>
 8014d64:	4b29      	ldr	r3, [pc, #164]	; (8014e0c <_vfiprintf_r+0x254>)
 8014d66:	bb1b      	cbnz	r3, 8014db0 <_vfiprintf_r+0x1f8>
 8014d68:	9b03      	ldr	r3, [sp, #12]
 8014d6a:	3307      	adds	r3, #7
 8014d6c:	f023 0307 	bic.w	r3, r3, #7
 8014d70:	3308      	adds	r3, #8
 8014d72:	9303      	str	r3, [sp, #12]
 8014d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d76:	443b      	add	r3, r7
 8014d78:	9309      	str	r3, [sp, #36]	; 0x24
 8014d7a:	e767      	b.n	8014c4c <_vfiprintf_r+0x94>
 8014d7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014d80:	460c      	mov	r4, r1
 8014d82:	2001      	movs	r0, #1
 8014d84:	e7a5      	b.n	8014cd2 <_vfiprintf_r+0x11a>
 8014d86:	2300      	movs	r3, #0
 8014d88:	3401      	adds	r4, #1
 8014d8a:	9305      	str	r3, [sp, #20]
 8014d8c:	4619      	mov	r1, r3
 8014d8e:	f04f 0c0a 	mov.w	ip, #10
 8014d92:	4620      	mov	r0, r4
 8014d94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014d98:	3a30      	subs	r2, #48	; 0x30
 8014d9a:	2a09      	cmp	r2, #9
 8014d9c:	d903      	bls.n	8014da6 <_vfiprintf_r+0x1ee>
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d0c5      	beq.n	8014d2e <_vfiprintf_r+0x176>
 8014da2:	9105      	str	r1, [sp, #20]
 8014da4:	e7c3      	b.n	8014d2e <_vfiprintf_r+0x176>
 8014da6:	fb0c 2101 	mla	r1, ip, r1, r2
 8014daa:	4604      	mov	r4, r0
 8014dac:	2301      	movs	r3, #1
 8014dae:	e7f0      	b.n	8014d92 <_vfiprintf_r+0x1da>
 8014db0:	ab03      	add	r3, sp, #12
 8014db2:	9300      	str	r3, [sp, #0]
 8014db4:	462a      	mov	r2, r5
 8014db6:	4b16      	ldr	r3, [pc, #88]	; (8014e10 <_vfiprintf_r+0x258>)
 8014db8:	a904      	add	r1, sp, #16
 8014dba:	4630      	mov	r0, r6
 8014dbc:	f000 f8cc 	bl	8014f58 <_printf_float>
 8014dc0:	4607      	mov	r7, r0
 8014dc2:	1c78      	adds	r0, r7, #1
 8014dc4:	d1d6      	bne.n	8014d74 <_vfiprintf_r+0x1bc>
 8014dc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014dc8:	07d9      	lsls	r1, r3, #31
 8014dca:	d405      	bmi.n	8014dd8 <_vfiprintf_r+0x220>
 8014dcc:	89ab      	ldrh	r3, [r5, #12]
 8014dce:	059a      	lsls	r2, r3, #22
 8014dd0:	d402      	bmi.n	8014dd8 <_vfiprintf_r+0x220>
 8014dd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014dd4:	f7fe ffdb 	bl	8013d8e <__retarget_lock_release_recursive>
 8014dd8:	89ab      	ldrh	r3, [r5, #12]
 8014dda:	065b      	lsls	r3, r3, #25
 8014ddc:	f53f af12 	bmi.w	8014c04 <_vfiprintf_r+0x4c>
 8014de0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014de2:	e711      	b.n	8014c08 <_vfiprintf_r+0x50>
 8014de4:	ab03      	add	r3, sp, #12
 8014de6:	9300      	str	r3, [sp, #0]
 8014de8:	462a      	mov	r2, r5
 8014dea:	4b09      	ldr	r3, [pc, #36]	; (8014e10 <_vfiprintf_r+0x258>)
 8014dec:	a904      	add	r1, sp, #16
 8014dee:	4630      	mov	r0, r6
 8014df0:	f000 fb56 	bl	80154a0 <_printf_i>
 8014df4:	e7e4      	b.n	8014dc0 <_vfiprintf_r+0x208>
 8014df6:	bf00      	nop
 8014df8:	08016664 	.word	0x08016664
 8014dfc:	08016684 	.word	0x08016684
 8014e00:	08016644 	.word	0x08016644
 8014e04:	0801680c 	.word	0x0801680c
 8014e08:	08016816 	.word	0x08016816
 8014e0c:	08014f59 	.word	0x08014f59
 8014e10:	08014b93 	.word	0x08014b93
 8014e14:	08016812 	.word	0x08016812

08014e18 <__cvt>:
 8014e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014e1c:	ec55 4b10 	vmov	r4, r5, d0
 8014e20:	2d00      	cmp	r5, #0
 8014e22:	460e      	mov	r6, r1
 8014e24:	4619      	mov	r1, r3
 8014e26:	462b      	mov	r3, r5
 8014e28:	bfbb      	ittet	lt
 8014e2a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8014e2e:	461d      	movlt	r5, r3
 8014e30:	2300      	movge	r3, #0
 8014e32:	232d      	movlt	r3, #45	; 0x2d
 8014e34:	700b      	strb	r3, [r1, #0]
 8014e36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014e38:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014e3c:	4691      	mov	r9, r2
 8014e3e:	f023 0820 	bic.w	r8, r3, #32
 8014e42:	bfbc      	itt	lt
 8014e44:	4622      	movlt	r2, r4
 8014e46:	4614      	movlt	r4, r2
 8014e48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014e4c:	d005      	beq.n	8014e5a <__cvt+0x42>
 8014e4e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8014e52:	d100      	bne.n	8014e56 <__cvt+0x3e>
 8014e54:	3601      	adds	r6, #1
 8014e56:	2102      	movs	r1, #2
 8014e58:	e000      	b.n	8014e5c <__cvt+0x44>
 8014e5a:	2103      	movs	r1, #3
 8014e5c:	ab03      	add	r3, sp, #12
 8014e5e:	9301      	str	r3, [sp, #4]
 8014e60:	ab02      	add	r3, sp, #8
 8014e62:	9300      	str	r3, [sp, #0]
 8014e64:	ec45 4b10 	vmov	d0, r4, r5
 8014e68:	4653      	mov	r3, sl
 8014e6a:	4632      	mov	r2, r6
 8014e6c:	f7fd ff70 	bl	8012d50 <_dtoa_r>
 8014e70:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8014e74:	4607      	mov	r7, r0
 8014e76:	d102      	bne.n	8014e7e <__cvt+0x66>
 8014e78:	f019 0f01 	tst.w	r9, #1
 8014e7c:	d022      	beq.n	8014ec4 <__cvt+0xac>
 8014e7e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014e82:	eb07 0906 	add.w	r9, r7, r6
 8014e86:	d110      	bne.n	8014eaa <__cvt+0x92>
 8014e88:	783b      	ldrb	r3, [r7, #0]
 8014e8a:	2b30      	cmp	r3, #48	; 0x30
 8014e8c:	d10a      	bne.n	8014ea4 <__cvt+0x8c>
 8014e8e:	2200      	movs	r2, #0
 8014e90:	2300      	movs	r3, #0
 8014e92:	4620      	mov	r0, r4
 8014e94:	4629      	mov	r1, r5
 8014e96:	f7eb fe51 	bl	8000b3c <__aeabi_dcmpeq>
 8014e9a:	b918      	cbnz	r0, 8014ea4 <__cvt+0x8c>
 8014e9c:	f1c6 0601 	rsb	r6, r6, #1
 8014ea0:	f8ca 6000 	str.w	r6, [sl]
 8014ea4:	f8da 3000 	ldr.w	r3, [sl]
 8014ea8:	4499      	add	r9, r3
 8014eaa:	2200      	movs	r2, #0
 8014eac:	2300      	movs	r3, #0
 8014eae:	4620      	mov	r0, r4
 8014eb0:	4629      	mov	r1, r5
 8014eb2:	f7eb fe43 	bl	8000b3c <__aeabi_dcmpeq>
 8014eb6:	b108      	cbz	r0, 8014ebc <__cvt+0xa4>
 8014eb8:	f8cd 900c 	str.w	r9, [sp, #12]
 8014ebc:	2230      	movs	r2, #48	; 0x30
 8014ebe:	9b03      	ldr	r3, [sp, #12]
 8014ec0:	454b      	cmp	r3, r9
 8014ec2:	d307      	bcc.n	8014ed4 <__cvt+0xbc>
 8014ec4:	9b03      	ldr	r3, [sp, #12]
 8014ec6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014ec8:	1bdb      	subs	r3, r3, r7
 8014eca:	4638      	mov	r0, r7
 8014ecc:	6013      	str	r3, [r2, #0]
 8014ece:	b004      	add	sp, #16
 8014ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ed4:	1c59      	adds	r1, r3, #1
 8014ed6:	9103      	str	r1, [sp, #12]
 8014ed8:	701a      	strb	r2, [r3, #0]
 8014eda:	e7f0      	b.n	8014ebe <__cvt+0xa6>

08014edc <__exponent>:
 8014edc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014ede:	4603      	mov	r3, r0
 8014ee0:	2900      	cmp	r1, #0
 8014ee2:	bfb8      	it	lt
 8014ee4:	4249      	neglt	r1, r1
 8014ee6:	f803 2b02 	strb.w	r2, [r3], #2
 8014eea:	bfb4      	ite	lt
 8014eec:	222d      	movlt	r2, #45	; 0x2d
 8014eee:	222b      	movge	r2, #43	; 0x2b
 8014ef0:	2909      	cmp	r1, #9
 8014ef2:	7042      	strb	r2, [r0, #1]
 8014ef4:	dd2a      	ble.n	8014f4c <__exponent+0x70>
 8014ef6:	f10d 0407 	add.w	r4, sp, #7
 8014efa:	46a4      	mov	ip, r4
 8014efc:	270a      	movs	r7, #10
 8014efe:	46a6      	mov	lr, r4
 8014f00:	460a      	mov	r2, r1
 8014f02:	fb91 f6f7 	sdiv	r6, r1, r7
 8014f06:	fb07 1516 	mls	r5, r7, r6, r1
 8014f0a:	3530      	adds	r5, #48	; 0x30
 8014f0c:	2a63      	cmp	r2, #99	; 0x63
 8014f0e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8014f12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8014f16:	4631      	mov	r1, r6
 8014f18:	dcf1      	bgt.n	8014efe <__exponent+0x22>
 8014f1a:	3130      	adds	r1, #48	; 0x30
 8014f1c:	f1ae 0502 	sub.w	r5, lr, #2
 8014f20:	f804 1c01 	strb.w	r1, [r4, #-1]
 8014f24:	1c44      	adds	r4, r0, #1
 8014f26:	4629      	mov	r1, r5
 8014f28:	4561      	cmp	r1, ip
 8014f2a:	d30a      	bcc.n	8014f42 <__exponent+0x66>
 8014f2c:	f10d 0209 	add.w	r2, sp, #9
 8014f30:	eba2 020e 	sub.w	r2, r2, lr
 8014f34:	4565      	cmp	r5, ip
 8014f36:	bf88      	it	hi
 8014f38:	2200      	movhi	r2, #0
 8014f3a:	4413      	add	r3, r2
 8014f3c:	1a18      	subs	r0, r3, r0
 8014f3e:	b003      	add	sp, #12
 8014f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014f46:	f804 2f01 	strb.w	r2, [r4, #1]!
 8014f4a:	e7ed      	b.n	8014f28 <__exponent+0x4c>
 8014f4c:	2330      	movs	r3, #48	; 0x30
 8014f4e:	3130      	adds	r1, #48	; 0x30
 8014f50:	7083      	strb	r3, [r0, #2]
 8014f52:	70c1      	strb	r1, [r0, #3]
 8014f54:	1d03      	adds	r3, r0, #4
 8014f56:	e7f1      	b.n	8014f3c <__exponent+0x60>

08014f58 <_printf_float>:
 8014f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f5c:	ed2d 8b02 	vpush	{d8}
 8014f60:	b08d      	sub	sp, #52	; 0x34
 8014f62:	460c      	mov	r4, r1
 8014f64:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014f68:	4616      	mov	r6, r2
 8014f6a:	461f      	mov	r7, r3
 8014f6c:	4605      	mov	r5, r0
 8014f6e:	f7fe ff07 	bl	8013d80 <_localeconv_r>
 8014f72:	f8d0 a000 	ldr.w	sl, [r0]
 8014f76:	4650      	mov	r0, sl
 8014f78:	f7eb f9b2 	bl	80002e0 <strlen>
 8014f7c:	2300      	movs	r3, #0
 8014f7e:	930a      	str	r3, [sp, #40]	; 0x28
 8014f80:	6823      	ldr	r3, [r4, #0]
 8014f82:	9305      	str	r3, [sp, #20]
 8014f84:	f8d8 3000 	ldr.w	r3, [r8]
 8014f88:	f894 b018 	ldrb.w	fp, [r4, #24]
 8014f8c:	3307      	adds	r3, #7
 8014f8e:	f023 0307 	bic.w	r3, r3, #7
 8014f92:	f103 0208 	add.w	r2, r3, #8
 8014f96:	f8c8 2000 	str.w	r2, [r8]
 8014f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f9e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014fa2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014fa6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014faa:	9307      	str	r3, [sp, #28]
 8014fac:	f8cd 8018 	str.w	r8, [sp, #24]
 8014fb0:	ee08 0a10 	vmov	s16, r0
 8014fb4:	4b9f      	ldr	r3, [pc, #636]	; (8015234 <_printf_float+0x2dc>)
 8014fb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014fba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014fbe:	f7eb fdef 	bl	8000ba0 <__aeabi_dcmpun>
 8014fc2:	bb88      	cbnz	r0, 8015028 <_printf_float+0xd0>
 8014fc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014fc8:	4b9a      	ldr	r3, [pc, #616]	; (8015234 <_printf_float+0x2dc>)
 8014fca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014fce:	f7eb fdc9 	bl	8000b64 <__aeabi_dcmple>
 8014fd2:	bb48      	cbnz	r0, 8015028 <_printf_float+0xd0>
 8014fd4:	2200      	movs	r2, #0
 8014fd6:	2300      	movs	r3, #0
 8014fd8:	4640      	mov	r0, r8
 8014fda:	4649      	mov	r1, r9
 8014fdc:	f7eb fdb8 	bl	8000b50 <__aeabi_dcmplt>
 8014fe0:	b110      	cbz	r0, 8014fe8 <_printf_float+0x90>
 8014fe2:	232d      	movs	r3, #45	; 0x2d
 8014fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014fe8:	4b93      	ldr	r3, [pc, #588]	; (8015238 <_printf_float+0x2e0>)
 8014fea:	4894      	ldr	r0, [pc, #592]	; (801523c <_printf_float+0x2e4>)
 8014fec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8014ff0:	bf94      	ite	ls
 8014ff2:	4698      	movls	r8, r3
 8014ff4:	4680      	movhi	r8, r0
 8014ff6:	2303      	movs	r3, #3
 8014ff8:	6123      	str	r3, [r4, #16]
 8014ffa:	9b05      	ldr	r3, [sp, #20]
 8014ffc:	f023 0204 	bic.w	r2, r3, #4
 8015000:	6022      	str	r2, [r4, #0]
 8015002:	f04f 0900 	mov.w	r9, #0
 8015006:	9700      	str	r7, [sp, #0]
 8015008:	4633      	mov	r3, r6
 801500a:	aa0b      	add	r2, sp, #44	; 0x2c
 801500c:	4621      	mov	r1, r4
 801500e:	4628      	mov	r0, r5
 8015010:	f000 f9d8 	bl	80153c4 <_printf_common>
 8015014:	3001      	adds	r0, #1
 8015016:	f040 8090 	bne.w	801513a <_printf_float+0x1e2>
 801501a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801501e:	b00d      	add	sp, #52	; 0x34
 8015020:	ecbd 8b02 	vpop	{d8}
 8015024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015028:	4642      	mov	r2, r8
 801502a:	464b      	mov	r3, r9
 801502c:	4640      	mov	r0, r8
 801502e:	4649      	mov	r1, r9
 8015030:	f7eb fdb6 	bl	8000ba0 <__aeabi_dcmpun>
 8015034:	b140      	cbz	r0, 8015048 <_printf_float+0xf0>
 8015036:	464b      	mov	r3, r9
 8015038:	2b00      	cmp	r3, #0
 801503a:	bfbc      	itt	lt
 801503c:	232d      	movlt	r3, #45	; 0x2d
 801503e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8015042:	487f      	ldr	r0, [pc, #508]	; (8015240 <_printf_float+0x2e8>)
 8015044:	4b7f      	ldr	r3, [pc, #508]	; (8015244 <_printf_float+0x2ec>)
 8015046:	e7d1      	b.n	8014fec <_printf_float+0x94>
 8015048:	6863      	ldr	r3, [r4, #4]
 801504a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801504e:	9206      	str	r2, [sp, #24]
 8015050:	1c5a      	adds	r2, r3, #1
 8015052:	d13f      	bne.n	80150d4 <_printf_float+0x17c>
 8015054:	2306      	movs	r3, #6
 8015056:	6063      	str	r3, [r4, #4]
 8015058:	9b05      	ldr	r3, [sp, #20]
 801505a:	6861      	ldr	r1, [r4, #4]
 801505c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8015060:	2300      	movs	r3, #0
 8015062:	9303      	str	r3, [sp, #12]
 8015064:	ab0a      	add	r3, sp, #40	; 0x28
 8015066:	e9cd b301 	strd	fp, r3, [sp, #4]
 801506a:	ab09      	add	r3, sp, #36	; 0x24
 801506c:	ec49 8b10 	vmov	d0, r8, r9
 8015070:	9300      	str	r3, [sp, #0]
 8015072:	6022      	str	r2, [r4, #0]
 8015074:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015078:	4628      	mov	r0, r5
 801507a:	f7ff fecd 	bl	8014e18 <__cvt>
 801507e:	9b06      	ldr	r3, [sp, #24]
 8015080:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015082:	2b47      	cmp	r3, #71	; 0x47
 8015084:	4680      	mov	r8, r0
 8015086:	d108      	bne.n	801509a <_printf_float+0x142>
 8015088:	1cc8      	adds	r0, r1, #3
 801508a:	db02      	blt.n	8015092 <_printf_float+0x13a>
 801508c:	6863      	ldr	r3, [r4, #4]
 801508e:	4299      	cmp	r1, r3
 8015090:	dd41      	ble.n	8015116 <_printf_float+0x1be>
 8015092:	f1ab 0b02 	sub.w	fp, fp, #2
 8015096:	fa5f fb8b 	uxtb.w	fp, fp
 801509a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801509e:	d820      	bhi.n	80150e2 <_printf_float+0x18a>
 80150a0:	3901      	subs	r1, #1
 80150a2:	465a      	mov	r2, fp
 80150a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80150a8:	9109      	str	r1, [sp, #36]	; 0x24
 80150aa:	f7ff ff17 	bl	8014edc <__exponent>
 80150ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80150b0:	1813      	adds	r3, r2, r0
 80150b2:	2a01      	cmp	r2, #1
 80150b4:	4681      	mov	r9, r0
 80150b6:	6123      	str	r3, [r4, #16]
 80150b8:	dc02      	bgt.n	80150c0 <_printf_float+0x168>
 80150ba:	6822      	ldr	r2, [r4, #0]
 80150bc:	07d2      	lsls	r2, r2, #31
 80150be:	d501      	bpl.n	80150c4 <_printf_float+0x16c>
 80150c0:	3301      	adds	r3, #1
 80150c2:	6123      	str	r3, [r4, #16]
 80150c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d09c      	beq.n	8015006 <_printf_float+0xae>
 80150cc:	232d      	movs	r3, #45	; 0x2d
 80150ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80150d2:	e798      	b.n	8015006 <_printf_float+0xae>
 80150d4:	9a06      	ldr	r2, [sp, #24]
 80150d6:	2a47      	cmp	r2, #71	; 0x47
 80150d8:	d1be      	bne.n	8015058 <_printf_float+0x100>
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d1bc      	bne.n	8015058 <_printf_float+0x100>
 80150de:	2301      	movs	r3, #1
 80150e0:	e7b9      	b.n	8015056 <_printf_float+0xfe>
 80150e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80150e6:	d118      	bne.n	801511a <_printf_float+0x1c2>
 80150e8:	2900      	cmp	r1, #0
 80150ea:	6863      	ldr	r3, [r4, #4]
 80150ec:	dd0b      	ble.n	8015106 <_printf_float+0x1ae>
 80150ee:	6121      	str	r1, [r4, #16]
 80150f0:	b913      	cbnz	r3, 80150f8 <_printf_float+0x1a0>
 80150f2:	6822      	ldr	r2, [r4, #0]
 80150f4:	07d0      	lsls	r0, r2, #31
 80150f6:	d502      	bpl.n	80150fe <_printf_float+0x1a6>
 80150f8:	3301      	adds	r3, #1
 80150fa:	440b      	add	r3, r1
 80150fc:	6123      	str	r3, [r4, #16]
 80150fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8015100:	f04f 0900 	mov.w	r9, #0
 8015104:	e7de      	b.n	80150c4 <_printf_float+0x16c>
 8015106:	b913      	cbnz	r3, 801510e <_printf_float+0x1b6>
 8015108:	6822      	ldr	r2, [r4, #0]
 801510a:	07d2      	lsls	r2, r2, #31
 801510c:	d501      	bpl.n	8015112 <_printf_float+0x1ba>
 801510e:	3302      	adds	r3, #2
 8015110:	e7f4      	b.n	80150fc <_printf_float+0x1a4>
 8015112:	2301      	movs	r3, #1
 8015114:	e7f2      	b.n	80150fc <_printf_float+0x1a4>
 8015116:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801511a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801511c:	4299      	cmp	r1, r3
 801511e:	db05      	blt.n	801512c <_printf_float+0x1d4>
 8015120:	6823      	ldr	r3, [r4, #0]
 8015122:	6121      	str	r1, [r4, #16]
 8015124:	07d8      	lsls	r0, r3, #31
 8015126:	d5ea      	bpl.n	80150fe <_printf_float+0x1a6>
 8015128:	1c4b      	adds	r3, r1, #1
 801512a:	e7e7      	b.n	80150fc <_printf_float+0x1a4>
 801512c:	2900      	cmp	r1, #0
 801512e:	bfd4      	ite	le
 8015130:	f1c1 0202 	rsble	r2, r1, #2
 8015134:	2201      	movgt	r2, #1
 8015136:	4413      	add	r3, r2
 8015138:	e7e0      	b.n	80150fc <_printf_float+0x1a4>
 801513a:	6823      	ldr	r3, [r4, #0]
 801513c:	055a      	lsls	r2, r3, #21
 801513e:	d407      	bmi.n	8015150 <_printf_float+0x1f8>
 8015140:	6923      	ldr	r3, [r4, #16]
 8015142:	4642      	mov	r2, r8
 8015144:	4631      	mov	r1, r6
 8015146:	4628      	mov	r0, r5
 8015148:	47b8      	blx	r7
 801514a:	3001      	adds	r0, #1
 801514c:	d12c      	bne.n	80151a8 <_printf_float+0x250>
 801514e:	e764      	b.n	801501a <_printf_float+0xc2>
 8015150:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015154:	f240 80e0 	bls.w	8015318 <_printf_float+0x3c0>
 8015158:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801515c:	2200      	movs	r2, #0
 801515e:	2300      	movs	r3, #0
 8015160:	f7eb fcec 	bl	8000b3c <__aeabi_dcmpeq>
 8015164:	2800      	cmp	r0, #0
 8015166:	d034      	beq.n	80151d2 <_printf_float+0x27a>
 8015168:	4a37      	ldr	r2, [pc, #220]	; (8015248 <_printf_float+0x2f0>)
 801516a:	2301      	movs	r3, #1
 801516c:	4631      	mov	r1, r6
 801516e:	4628      	mov	r0, r5
 8015170:	47b8      	blx	r7
 8015172:	3001      	adds	r0, #1
 8015174:	f43f af51 	beq.w	801501a <_printf_float+0xc2>
 8015178:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801517c:	429a      	cmp	r2, r3
 801517e:	db02      	blt.n	8015186 <_printf_float+0x22e>
 8015180:	6823      	ldr	r3, [r4, #0]
 8015182:	07d8      	lsls	r0, r3, #31
 8015184:	d510      	bpl.n	80151a8 <_printf_float+0x250>
 8015186:	ee18 3a10 	vmov	r3, s16
 801518a:	4652      	mov	r2, sl
 801518c:	4631      	mov	r1, r6
 801518e:	4628      	mov	r0, r5
 8015190:	47b8      	blx	r7
 8015192:	3001      	adds	r0, #1
 8015194:	f43f af41 	beq.w	801501a <_printf_float+0xc2>
 8015198:	f04f 0800 	mov.w	r8, #0
 801519c:	f104 091a 	add.w	r9, r4, #26
 80151a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80151a2:	3b01      	subs	r3, #1
 80151a4:	4543      	cmp	r3, r8
 80151a6:	dc09      	bgt.n	80151bc <_printf_float+0x264>
 80151a8:	6823      	ldr	r3, [r4, #0]
 80151aa:	079b      	lsls	r3, r3, #30
 80151ac:	f100 8105 	bmi.w	80153ba <_printf_float+0x462>
 80151b0:	68e0      	ldr	r0, [r4, #12]
 80151b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80151b4:	4298      	cmp	r0, r3
 80151b6:	bfb8      	it	lt
 80151b8:	4618      	movlt	r0, r3
 80151ba:	e730      	b.n	801501e <_printf_float+0xc6>
 80151bc:	2301      	movs	r3, #1
 80151be:	464a      	mov	r2, r9
 80151c0:	4631      	mov	r1, r6
 80151c2:	4628      	mov	r0, r5
 80151c4:	47b8      	blx	r7
 80151c6:	3001      	adds	r0, #1
 80151c8:	f43f af27 	beq.w	801501a <_printf_float+0xc2>
 80151cc:	f108 0801 	add.w	r8, r8, #1
 80151d0:	e7e6      	b.n	80151a0 <_printf_float+0x248>
 80151d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	dc39      	bgt.n	801524c <_printf_float+0x2f4>
 80151d8:	4a1b      	ldr	r2, [pc, #108]	; (8015248 <_printf_float+0x2f0>)
 80151da:	2301      	movs	r3, #1
 80151dc:	4631      	mov	r1, r6
 80151de:	4628      	mov	r0, r5
 80151e0:	47b8      	blx	r7
 80151e2:	3001      	adds	r0, #1
 80151e4:	f43f af19 	beq.w	801501a <_printf_float+0xc2>
 80151e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80151ec:	4313      	orrs	r3, r2
 80151ee:	d102      	bne.n	80151f6 <_printf_float+0x29e>
 80151f0:	6823      	ldr	r3, [r4, #0]
 80151f2:	07d9      	lsls	r1, r3, #31
 80151f4:	d5d8      	bpl.n	80151a8 <_printf_float+0x250>
 80151f6:	ee18 3a10 	vmov	r3, s16
 80151fa:	4652      	mov	r2, sl
 80151fc:	4631      	mov	r1, r6
 80151fe:	4628      	mov	r0, r5
 8015200:	47b8      	blx	r7
 8015202:	3001      	adds	r0, #1
 8015204:	f43f af09 	beq.w	801501a <_printf_float+0xc2>
 8015208:	f04f 0900 	mov.w	r9, #0
 801520c:	f104 0a1a 	add.w	sl, r4, #26
 8015210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015212:	425b      	negs	r3, r3
 8015214:	454b      	cmp	r3, r9
 8015216:	dc01      	bgt.n	801521c <_printf_float+0x2c4>
 8015218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801521a:	e792      	b.n	8015142 <_printf_float+0x1ea>
 801521c:	2301      	movs	r3, #1
 801521e:	4652      	mov	r2, sl
 8015220:	4631      	mov	r1, r6
 8015222:	4628      	mov	r0, r5
 8015224:	47b8      	blx	r7
 8015226:	3001      	adds	r0, #1
 8015228:	f43f aef7 	beq.w	801501a <_printf_float+0xc2>
 801522c:	f109 0901 	add.w	r9, r9, #1
 8015230:	e7ee      	b.n	8015210 <_printf_float+0x2b8>
 8015232:	bf00      	nop
 8015234:	7fefffff 	.word	0x7fefffff
 8015238:	0801681d 	.word	0x0801681d
 801523c:	08016821 	.word	0x08016821
 8015240:	08016829 	.word	0x08016829
 8015244:	08016825 	.word	0x08016825
 8015248:	080165bc 	.word	0x080165bc
 801524c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801524e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015250:	429a      	cmp	r2, r3
 8015252:	bfa8      	it	ge
 8015254:	461a      	movge	r2, r3
 8015256:	2a00      	cmp	r2, #0
 8015258:	4691      	mov	r9, r2
 801525a:	dc37      	bgt.n	80152cc <_printf_float+0x374>
 801525c:	f04f 0b00 	mov.w	fp, #0
 8015260:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015264:	f104 021a 	add.w	r2, r4, #26
 8015268:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801526a:	9305      	str	r3, [sp, #20]
 801526c:	eba3 0309 	sub.w	r3, r3, r9
 8015270:	455b      	cmp	r3, fp
 8015272:	dc33      	bgt.n	80152dc <_printf_float+0x384>
 8015274:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015278:	429a      	cmp	r2, r3
 801527a:	db3b      	blt.n	80152f4 <_printf_float+0x39c>
 801527c:	6823      	ldr	r3, [r4, #0]
 801527e:	07da      	lsls	r2, r3, #31
 8015280:	d438      	bmi.n	80152f4 <_printf_float+0x39c>
 8015282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015284:	9a05      	ldr	r2, [sp, #20]
 8015286:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015288:	1a9a      	subs	r2, r3, r2
 801528a:	eba3 0901 	sub.w	r9, r3, r1
 801528e:	4591      	cmp	r9, r2
 8015290:	bfa8      	it	ge
 8015292:	4691      	movge	r9, r2
 8015294:	f1b9 0f00 	cmp.w	r9, #0
 8015298:	dc35      	bgt.n	8015306 <_printf_float+0x3ae>
 801529a:	f04f 0800 	mov.w	r8, #0
 801529e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80152a2:	f104 0a1a 	add.w	sl, r4, #26
 80152a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80152aa:	1a9b      	subs	r3, r3, r2
 80152ac:	eba3 0309 	sub.w	r3, r3, r9
 80152b0:	4543      	cmp	r3, r8
 80152b2:	f77f af79 	ble.w	80151a8 <_printf_float+0x250>
 80152b6:	2301      	movs	r3, #1
 80152b8:	4652      	mov	r2, sl
 80152ba:	4631      	mov	r1, r6
 80152bc:	4628      	mov	r0, r5
 80152be:	47b8      	blx	r7
 80152c0:	3001      	adds	r0, #1
 80152c2:	f43f aeaa 	beq.w	801501a <_printf_float+0xc2>
 80152c6:	f108 0801 	add.w	r8, r8, #1
 80152ca:	e7ec      	b.n	80152a6 <_printf_float+0x34e>
 80152cc:	4613      	mov	r3, r2
 80152ce:	4631      	mov	r1, r6
 80152d0:	4642      	mov	r2, r8
 80152d2:	4628      	mov	r0, r5
 80152d4:	47b8      	blx	r7
 80152d6:	3001      	adds	r0, #1
 80152d8:	d1c0      	bne.n	801525c <_printf_float+0x304>
 80152da:	e69e      	b.n	801501a <_printf_float+0xc2>
 80152dc:	2301      	movs	r3, #1
 80152de:	4631      	mov	r1, r6
 80152e0:	4628      	mov	r0, r5
 80152e2:	9205      	str	r2, [sp, #20]
 80152e4:	47b8      	blx	r7
 80152e6:	3001      	adds	r0, #1
 80152e8:	f43f ae97 	beq.w	801501a <_printf_float+0xc2>
 80152ec:	9a05      	ldr	r2, [sp, #20]
 80152ee:	f10b 0b01 	add.w	fp, fp, #1
 80152f2:	e7b9      	b.n	8015268 <_printf_float+0x310>
 80152f4:	ee18 3a10 	vmov	r3, s16
 80152f8:	4652      	mov	r2, sl
 80152fa:	4631      	mov	r1, r6
 80152fc:	4628      	mov	r0, r5
 80152fe:	47b8      	blx	r7
 8015300:	3001      	adds	r0, #1
 8015302:	d1be      	bne.n	8015282 <_printf_float+0x32a>
 8015304:	e689      	b.n	801501a <_printf_float+0xc2>
 8015306:	9a05      	ldr	r2, [sp, #20]
 8015308:	464b      	mov	r3, r9
 801530a:	4442      	add	r2, r8
 801530c:	4631      	mov	r1, r6
 801530e:	4628      	mov	r0, r5
 8015310:	47b8      	blx	r7
 8015312:	3001      	adds	r0, #1
 8015314:	d1c1      	bne.n	801529a <_printf_float+0x342>
 8015316:	e680      	b.n	801501a <_printf_float+0xc2>
 8015318:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801531a:	2a01      	cmp	r2, #1
 801531c:	dc01      	bgt.n	8015322 <_printf_float+0x3ca>
 801531e:	07db      	lsls	r3, r3, #31
 8015320:	d538      	bpl.n	8015394 <_printf_float+0x43c>
 8015322:	2301      	movs	r3, #1
 8015324:	4642      	mov	r2, r8
 8015326:	4631      	mov	r1, r6
 8015328:	4628      	mov	r0, r5
 801532a:	47b8      	blx	r7
 801532c:	3001      	adds	r0, #1
 801532e:	f43f ae74 	beq.w	801501a <_printf_float+0xc2>
 8015332:	ee18 3a10 	vmov	r3, s16
 8015336:	4652      	mov	r2, sl
 8015338:	4631      	mov	r1, r6
 801533a:	4628      	mov	r0, r5
 801533c:	47b8      	blx	r7
 801533e:	3001      	adds	r0, #1
 8015340:	f43f ae6b 	beq.w	801501a <_printf_float+0xc2>
 8015344:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015348:	2200      	movs	r2, #0
 801534a:	2300      	movs	r3, #0
 801534c:	f7eb fbf6 	bl	8000b3c <__aeabi_dcmpeq>
 8015350:	b9d8      	cbnz	r0, 801538a <_printf_float+0x432>
 8015352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015354:	f108 0201 	add.w	r2, r8, #1
 8015358:	3b01      	subs	r3, #1
 801535a:	4631      	mov	r1, r6
 801535c:	4628      	mov	r0, r5
 801535e:	47b8      	blx	r7
 8015360:	3001      	adds	r0, #1
 8015362:	d10e      	bne.n	8015382 <_printf_float+0x42a>
 8015364:	e659      	b.n	801501a <_printf_float+0xc2>
 8015366:	2301      	movs	r3, #1
 8015368:	4652      	mov	r2, sl
 801536a:	4631      	mov	r1, r6
 801536c:	4628      	mov	r0, r5
 801536e:	47b8      	blx	r7
 8015370:	3001      	adds	r0, #1
 8015372:	f43f ae52 	beq.w	801501a <_printf_float+0xc2>
 8015376:	f108 0801 	add.w	r8, r8, #1
 801537a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801537c:	3b01      	subs	r3, #1
 801537e:	4543      	cmp	r3, r8
 8015380:	dcf1      	bgt.n	8015366 <_printf_float+0x40e>
 8015382:	464b      	mov	r3, r9
 8015384:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015388:	e6dc      	b.n	8015144 <_printf_float+0x1ec>
 801538a:	f04f 0800 	mov.w	r8, #0
 801538e:	f104 0a1a 	add.w	sl, r4, #26
 8015392:	e7f2      	b.n	801537a <_printf_float+0x422>
 8015394:	2301      	movs	r3, #1
 8015396:	4642      	mov	r2, r8
 8015398:	e7df      	b.n	801535a <_printf_float+0x402>
 801539a:	2301      	movs	r3, #1
 801539c:	464a      	mov	r2, r9
 801539e:	4631      	mov	r1, r6
 80153a0:	4628      	mov	r0, r5
 80153a2:	47b8      	blx	r7
 80153a4:	3001      	adds	r0, #1
 80153a6:	f43f ae38 	beq.w	801501a <_printf_float+0xc2>
 80153aa:	f108 0801 	add.w	r8, r8, #1
 80153ae:	68e3      	ldr	r3, [r4, #12]
 80153b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80153b2:	1a5b      	subs	r3, r3, r1
 80153b4:	4543      	cmp	r3, r8
 80153b6:	dcf0      	bgt.n	801539a <_printf_float+0x442>
 80153b8:	e6fa      	b.n	80151b0 <_printf_float+0x258>
 80153ba:	f04f 0800 	mov.w	r8, #0
 80153be:	f104 0919 	add.w	r9, r4, #25
 80153c2:	e7f4      	b.n	80153ae <_printf_float+0x456>

080153c4 <_printf_common>:
 80153c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80153c8:	4616      	mov	r6, r2
 80153ca:	4699      	mov	r9, r3
 80153cc:	688a      	ldr	r2, [r1, #8]
 80153ce:	690b      	ldr	r3, [r1, #16]
 80153d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80153d4:	4293      	cmp	r3, r2
 80153d6:	bfb8      	it	lt
 80153d8:	4613      	movlt	r3, r2
 80153da:	6033      	str	r3, [r6, #0]
 80153dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80153e0:	4607      	mov	r7, r0
 80153e2:	460c      	mov	r4, r1
 80153e4:	b10a      	cbz	r2, 80153ea <_printf_common+0x26>
 80153e6:	3301      	adds	r3, #1
 80153e8:	6033      	str	r3, [r6, #0]
 80153ea:	6823      	ldr	r3, [r4, #0]
 80153ec:	0699      	lsls	r1, r3, #26
 80153ee:	bf42      	ittt	mi
 80153f0:	6833      	ldrmi	r3, [r6, #0]
 80153f2:	3302      	addmi	r3, #2
 80153f4:	6033      	strmi	r3, [r6, #0]
 80153f6:	6825      	ldr	r5, [r4, #0]
 80153f8:	f015 0506 	ands.w	r5, r5, #6
 80153fc:	d106      	bne.n	801540c <_printf_common+0x48>
 80153fe:	f104 0a19 	add.w	sl, r4, #25
 8015402:	68e3      	ldr	r3, [r4, #12]
 8015404:	6832      	ldr	r2, [r6, #0]
 8015406:	1a9b      	subs	r3, r3, r2
 8015408:	42ab      	cmp	r3, r5
 801540a:	dc26      	bgt.n	801545a <_printf_common+0x96>
 801540c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015410:	1e13      	subs	r3, r2, #0
 8015412:	6822      	ldr	r2, [r4, #0]
 8015414:	bf18      	it	ne
 8015416:	2301      	movne	r3, #1
 8015418:	0692      	lsls	r2, r2, #26
 801541a:	d42b      	bmi.n	8015474 <_printf_common+0xb0>
 801541c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015420:	4649      	mov	r1, r9
 8015422:	4638      	mov	r0, r7
 8015424:	47c0      	blx	r8
 8015426:	3001      	adds	r0, #1
 8015428:	d01e      	beq.n	8015468 <_printf_common+0xa4>
 801542a:	6823      	ldr	r3, [r4, #0]
 801542c:	68e5      	ldr	r5, [r4, #12]
 801542e:	6832      	ldr	r2, [r6, #0]
 8015430:	f003 0306 	and.w	r3, r3, #6
 8015434:	2b04      	cmp	r3, #4
 8015436:	bf08      	it	eq
 8015438:	1aad      	subeq	r5, r5, r2
 801543a:	68a3      	ldr	r3, [r4, #8]
 801543c:	6922      	ldr	r2, [r4, #16]
 801543e:	bf0c      	ite	eq
 8015440:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015444:	2500      	movne	r5, #0
 8015446:	4293      	cmp	r3, r2
 8015448:	bfc4      	itt	gt
 801544a:	1a9b      	subgt	r3, r3, r2
 801544c:	18ed      	addgt	r5, r5, r3
 801544e:	2600      	movs	r6, #0
 8015450:	341a      	adds	r4, #26
 8015452:	42b5      	cmp	r5, r6
 8015454:	d11a      	bne.n	801548c <_printf_common+0xc8>
 8015456:	2000      	movs	r0, #0
 8015458:	e008      	b.n	801546c <_printf_common+0xa8>
 801545a:	2301      	movs	r3, #1
 801545c:	4652      	mov	r2, sl
 801545e:	4649      	mov	r1, r9
 8015460:	4638      	mov	r0, r7
 8015462:	47c0      	blx	r8
 8015464:	3001      	adds	r0, #1
 8015466:	d103      	bne.n	8015470 <_printf_common+0xac>
 8015468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801546c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015470:	3501      	adds	r5, #1
 8015472:	e7c6      	b.n	8015402 <_printf_common+0x3e>
 8015474:	18e1      	adds	r1, r4, r3
 8015476:	1c5a      	adds	r2, r3, #1
 8015478:	2030      	movs	r0, #48	; 0x30
 801547a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801547e:	4422      	add	r2, r4
 8015480:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015484:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015488:	3302      	adds	r3, #2
 801548a:	e7c7      	b.n	801541c <_printf_common+0x58>
 801548c:	2301      	movs	r3, #1
 801548e:	4622      	mov	r2, r4
 8015490:	4649      	mov	r1, r9
 8015492:	4638      	mov	r0, r7
 8015494:	47c0      	blx	r8
 8015496:	3001      	adds	r0, #1
 8015498:	d0e6      	beq.n	8015468 <_printf_common+0xa4>
 801549a:	3601      	adds	r6, #1
 801549c:	e7d9      	b.n	8015452 <_printf_common+0x8e>
	...

080154a0 <_printf_i>:
 80154a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80154a4:	7e0f      	ldrb	r7, [r1, #24]
 80154a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80154a8:	2f78      	cmp	r7, #120	; 0x78
 80154aa:	4691      	mov	r9, r2
 80154ac:	4680      	mov	r8, r0
 80154ae:	460c      	mov	r4, r1
 80154b0:	469a      	mov	sl, r3
 80154b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80154b6:	d807      	bhi.n	80154c8 <_printf_i+0x28>
 80154b8:	2f62      	cmp	r7, #98	; 0x62
 80154ba:	d80a      	bhi.n	80154d2 <_printf_i+0x32>
 80154bc:	2f00      	cmp	r7, #0
 80154be:	f000 80d8 	beq.w	8015672 <_printf_i+0x1d2>
 80154c2:	2f58      	cmp	r7, #88	; 0x58
 80154c4:	f000 80a3 	beq.w	801560e <_printf_i+0x16e>
 80154c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80154cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80154d0:	e03a      	b.n	8015548 <_printf_i+0xa8>
 80154d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80154d6:	2b15      	cmp	r3, #21
 80154d8:	d8f6      	bhi.n	80154c8 <_printf_i+0x28>
 80154da:	a101      	add	r1, pc, #4	; (adr r1, 80154e0 <_printf_i+0x40>)
 80154dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80154e0:	08015539 	.word	0x08015539
 80154e4:	0801554d 	.word	0x0801554d
 80154e8:	080154c9 	.word	0x080154c9
 80154ec:	080154c9 	.word	0x080154c9
 80154f0:	080154c9 	.word	0x080154c9
 80154f4:	080154c9 	.word	0x080154c9
 80154f8:	0801554d 	.word	0x0801554d
 80154fc:	080154c9 	.word	0x080154c9
 8015500:	080154c9 	.word	0x080154c9
 8015504:	080154c9 	.word	0x080154c9
 8015508:	080154c9 	.word	0x080154c9
 801550c:	08015659 	.word	0x08015659
 8015510:	0801557d 	.word	0x0801557d
 8015514:	0801563b 	.word	0x0801563b
 8015518:	080154c9 	.word	0x080154c9
 801551c:	080154c9 	.word	0x080154c9
 8015520:	0801567b 	.word	0x0801567b
 8015524:	080154c9 	.word	0x080154c9
 8015528:	0801557d 	.word	0x0801557d
 801552c:	080154c9 	.word	0x080154c9
 8015530:	080154c9 	.word	0x080154c9
 8015534:	08015643 	.word	0x08015643
 8015538:	682b      	ldr	r3, [r5, #0]
 801553a:	1d1a      	adds	r2, r3, #4
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	602a      	str	r2, [r5, #0]
 8015540:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015544:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015548:	2301      	movs	r3, #1
 801554a:	e0a3      	b.n	8015694 <_printf_i+0x1f4>
 801554c:	6820      	ldr	r0, [r4, #0]
 801554e:	6829      	ldr	r1, [r5, #0]
 8015550:	0606      	lsls	r6, r0, #24
 8015552:	f101 0304 	add.w	r3, r1, #4
 8015556:	d50a      	bpl.n	801556e <_printf_i+0xce>
 8015558:	680e      	ldr	r6, [r1, #0]
 801555a:	602b      	str	r3, [r5, #0]
 801555c:	2e00      	cmp	r6, #0
 801555e:	da03      	bge.n	8015568 <_printf_i+0xc8>
 8015560:	232d      	movs	r3, #45	; 0x2d
 8015562:	4276      	negs	r6, r6
 8015564:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015568:	485e      	ldr	r0, [pc, #376]	; (80156e4 <_printf_i+0x244>)
 801556a:	230a      	movs	r3, #10
 801556c:	e019      	b.n	80155a2 <_printf_i+0x102>
 801556e:	680e      	ldr	r6, [r1, #0]
 8015570:	602b      	str	r3, [r5, #0]
 8015572:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015576:	bf18      	it	ne
 8015578:	b236      	sxthne	r6, r6
 801557a:	e7ef      	b.n	801555c <_printf_i+0xbc>
 801557c:	682b      	ldr	r3, [r5, #0]
 801557e:	6820      	ldr	r0, [r4, #0]
 8015580:	1d19      	adds	r1, r3, #4
 8015582:	6029      	str	r1, [r5, #0]
 8015584:	0601      	lsls	r1, r0, #24
 8015586:	d501      	bpl.n	801558c <_printf_i+0xec>
 8015588:	681e      	ldr	r6, [r3, #0]
 801558a:	e002      	b.n	8015592 <_printf_i+0xf2>
 801558c:	0646      	lsls	r6, r0, #25
 801558e:	d5fb      	bpl.n	8015588 <_printf_i+0xe8>
 8015590:	881e      	ldrh	r6, [r3, #0]
 8015592:	4854      	ldr	r0, [pc, #336]	; (80156e4 <_printf_i+0x244>)
 8015594:	2f6f      	cmp	r7, #111	; 0x6f
 8015596:	bf0c      	ite	eq
 8015598:	2308      	moveq	r3, #8
 801559a:	230a      	movne	r3, #10
 801559c:	2100      	movs	r1, #0
 801559e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80155a2:	6865      	ldr	r5, [r4, #4]
 80155a4:	60a5      	str	r5, [r4, #8]
 80155a6:	2d00      	cmp	r5, #0
 80155a8:	bfa2      	ittt	ge
 80155aa:	6821      	ldrge	r1, [r4, #0]
 80155ac:	f021 0104 	bicge.w	r1, r1, #4
 80155b0:	6021      	strge	r1, [r4, #0]
 80155b2:	b90e      	cbnz	r6, 80155b8 <_printf_i+0x118>
 80155b4:	2d00      	cmp	r5, #0
 80155b6:	d04d      	beq.n	8015654 <_printf_i+0x1b4>
 80155b8:	4615      	mov	r5, r2
 80155ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80155be:	fb03 6711 	mls	r7, r3, r1, r6
 80155c2:	5dc7      	ldrb	r7, [r0, r7]
 80155c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80155c8:	4637      	mov	r7, r6
 80155ca:	42bb      	cmp	r3, r7
 80155cc:	460e      	mov	r6, r1
 80155ce:	d9f4      	bls.n	80155ba <_printf_i+0x11a>
 80155d0:	2b08      	cmp	r3, #8
 80155d2:	d10b      	bne.n	80155ec <_printf_i+0x14c>
 80155d4:	6823      	ldr	r3, [r4, #0]
 80155d6:	07de      	lsls	r6, r3, #31
 80155d8:	d508      	bpl.n	80155ec <_printf_i+0x14c>
 80155da:	6923      	ldr	r3, [r4, #16]
 80155dc:	6861      	ldr	r1, [r4, #4]
 80155de:	4299      	cmp	r1, r3
 80155e0:	bfde      	ittt	le
 80155e2:	2330      	movle	r3, #48	; 0x30
 80155e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80155e8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80155ec:	1b52      	subs	r2, r2, r5
 80155ee:	6122      	str	r2, [r4, #16]
 80155f0:	f8cd a000 	str.w	sl, [sp]
 80155f4:	464b      	mov	r3, r9
 80155f6:	aa03      	add	r2, sp, #12
 80155f8:	4621      	mov	r1, r4
 80155fa:	4640      	mov	r0, r8
 80155fc:	f7ff fee2 	bl	80153c4 <_printf_common>
 8015600:	3001      	adds	r0, #1
 8015602:	d14c      	bne.n	801569e <_printf_i+0x1fe>
 8015604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015608:	b004      	add	sp, #16
 801560a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801560e:	4835      	ldr	r0, [pc, #212]	; (80156e4 <_printf_i+0x244>)
 8015610:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015614:	6829      	ldr	r1, [r5, #0]
 8015616:	6823      	ldr	r3, [r4, #0]
 8015618:	f851 6b04 	ldr.w	r6, [r1], #4
 801561c:	6029      	str	r1, [r5, #0]
 801561e:	061d      	lsls	r5, r3, #24
 8015620:	d514      	bpl.n	801564c <_printf_i+0x1ac>
 8015622:	07df      	lsls	r7, r3, #31
 8015624:	bf44      	itt	mi
 8015626:	f043 0320 	orrmi.w	r3, r3, #32
 801562a:	6023      	strmi	r3, [r4, #0]
 801562c:	b91e      	cbnz	r6, 8015636 <_printf_i+0x196>
 801562e:	6823      	ldr	r3, [r4, #0]
 8015630:	f023 0320 	bic.w	r3, r3, #32
 8015634:	6023      	str	r3, [r4, #0]
 8015636:	2310      	movs	r3, #16
 8015638:	e7b0      	b.n	801559c <_printf_i+0xfc>
 801563a:	6823      	ldr	r3, [r4, #0]
 801563c:	f043 0320 	orr.w	r3, r3, #32
 8015640:	6023      	str	r3, [r4, #0]
 8015642:	2378      	movs	r3, #120	; 0x78
 8015644:	4828      	ldr	r0, [pc, #160]	; (80156e8 <_printf_i+0x248>)
 8015646:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801564a:	e7e3      	b.n	8015614 <_printf_i+0x174>
 801564c:	0659      	lsls	r1, r3, #25
 801564e:	bf48      	it	mi
 8015650:	b2b6      	uxthmi	r6, r6
 8015652:	e7e6      	b.n	8015622 <_printf_i+0x182>
 8015654:	4615      	mov	r5, r2
 8015656:	e7bb      	b.n	80155d0 <_printf_i+0x130>
 8015658:	682b      	ldr	r3, [r5, #0]
 801565a:	6826      	ldr	r6, [r4, #0]
 801565c:	6961      	ldr	r1, [r4, #20]
 801565e:	1d18      	adds	r0, r3, #4
 8015660:	6028      	str	r0, [r5, #0]
 8015662:	0635      	lsls	r5, r6, #24
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	d501      	bpl.n	801566c <_printf_i+0x1cc>
 8015668:	6019      	str	r1, [r3, #0]
 801566a:	e002      	b.n	8015672 <_printf_i+0x1d2>
 801566c:	0670      	lsls	r0, r6, #25
 801566e:	d5fb      	bpl.n	8015668 <_printf_i+0x1c8>
 8015670:	8019      	strh	r1, [r3, #0]
 8015672:	2300      	movs	r3, #0
 8015674:	6123      	str	r3, [r4, #16]
 8015676:	4615      	mov	r5, r2
 8015678:	e7ba      	b.n	80155f0 <_printf_i+0x150>
 801567a:	682b      	ldr	r3, [r5, #0]
 801567c:	1d1a      	adds	r2, r3, #4
 801567e:	602a      	str	r2, [r5, #0]
 8015680:	681d      	ldr	r5, [r3, #0]
 8015682:	6862      	ldr	r2, [r4, #4]
 8015684:	2100      	movs	r1, #0
 8015686:	4628      	mov	r0, r5
 8015688:	f7ea fdda 	bl	8000240 <memchr>
 801568c:	b108      	cbz	r0, 8015692 <_printf_i+0x1f2>
 801568e:	1b40      	subs	r0, r0, r5
 8015690:	6060      	str	r0, [r4, #4]
 8015692:	6863      	ldr	r3, [r4, #4]
 8015694:	6123      	str	r3, [r4, #16]
 8015696:	2300      	movs	r3, #0
 8015698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801569c:	e7a8      	b.n	80155f0 <_printf_i+0x150>
 801569e:	6923      	ldr	r3, [r4, #16]
 80156a0:	462a      	mov	r2, r5
 80156a2:	4649      	mov	r1, r9
 80156a4:	4640      	mov	r0, r8
 80156a6:	47d0      	blx	sl
 80156a8:	3001      	adds	r0, #1
 80156aa:	d0ab      	beq.n	8015604 <_printf_i+0x164>
 80156ac:	6823      	ldr	r3, [r4, #0]
 80156ae:	079b      	lsls	r3, r3, #30
 80156b0:	d413      	bmi.n	80156da <_printf_i+0x23a>
 80156b2:	68e0      	ldr	r0, [r4, #12]
 80156b4:	9b03      	ldr	r3, [sp, #12]
 80156b6:	4298      	cmp	r0, r3
 80156b8:	bfb8      	it	lt
 80156ba:	4618      	movlt	r0, r3
 80156bc:	e7a4      	b.n	8015608 <_printf_i+0x168>
 80156be:	2301      	movs	r3, #1
 80156c0:	4632      	mov	r2, r6
 80156c2:	4649      	mov	r1, r9
 80156c4:	4640      	mov	r0, r8
 80156c6:	47d0      	blx	sl
 80156c8:	3001      	adds	r0, #1
 80156ca:	d09b      	beq.n	8015604 <_printf_i+0x164>
 80156cc:	3501      	adds	r5, #1
 80156ce:	68e3      	ldr	r3, [r4, #12]
 80156d0:	9903      	ldr	r1, [sp, #12]
 80156d2:	1a5b      	subs	r3, r3, r1
 80156d4:	42ab      	cmp	r3, r5
 80156d6:	dcf2      	bgt.n	80156be <_printf_i+0x21e>
 80156d8:	e7eb      	b.n	80156b2 <_printf_i+0x212>
 80156da:	2500      	movs	r5, #0
 80156dc:	f104 0619 	add.w	r6, r4, #25
 80156e0:	e7f5      	b.n	80156ce <_printf_i+0x22e>
 80156e2:	bf00      	nop
 80156e4:	0801682d 	.word	0x0801682d
 80156e8:	0801683e 	.word	0x0801683e

080156ec <_read_r>:
 80156ec:	b538      	push	{r3, r4, r5, lr}
 80156ee:	4d07      	ldr	r5, [pc, #28]	; (801570c <_read_r+0x20>)
 80156f0:	4604      	mov	r4, r0
 80156f2:	4608      	mov	r0, r1
 80156f4:	4611      	mov	r1, r2
 80156f6:	2200      	movs	r2, #0
 80156f8:	602a      	str	r2, [r5, #0]
 80156fa:	461a      	mov	r2, r3
 80156fc:	f000 fbc8 	bl	8015e90 <_read>
 8015700:	1c43      	adds	r3, r0, #1
 8015702:	d102      	bne.n	801570a <_read_r+0x1e>
 8015704:	682b      	ldr	r3, [r5, #0]
 8015706:	b103      	cbz	r3, 801570a <_read_r+0x1e>
 8015708:	6023      	str	r3, [r4, #0]
 801570a:	bd38      	pop	{r3, r4, r5, pc}
 801570c:	20000628 	.word	0x20000628

08015710 <_sbrk_r>:
 8015710:	b538      	push	{r3, r4, r5, lr}
 8015712:	4d06      	ldr	r5, [pc, #24]	; (801572c <_sbrk_r+0x1c>)
 8015714:	2300      	movs	r3, #0
 8015716:	4604      	mov	r4, r0
 8015718:	4608      	mov	r0, r1
 801571a:	602b      	str	r3, [r5, #0]
 801571c:	f7ec ff38 	bl	8002590 <_sbrk>
 8015720:	1c43      	adds	r3, r0, #1
 8015722:	d102      	bne.n	801572a <_sbrk_r+0x1a>
 8015724:	682b      	ldr	r3, [r5, #0]
 8015726:	b103      	cbz	r3, 801572a <_sbrk_r+0x1a>
 8015728:	6023      	str	r3, [r4, #0]
 801572a:	bd38      	pop	{r3, r4, r5, pc}
 801572c:	20000628 	.word	0x20000628

08015730 <_raise_r>:
 8015730:	291f      	cmp	r1, #31
 8015732:	b538      	push	{r3, r4, r5, lr}
 8015734:	4604      	mov	r4, r0
 8015736:	460d      	mov	r5, r1
 8015738:	d904      	bls.n	8015744 <_raise_r+0x14>
 801573a:	2316      	movs	r3, #22
 801573c:	6003      	str	r3, [r0, #0]
 801573e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015742:	bd38      	pop	{r3, r4, r5, pc}
 8015744:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015746:	b112      	cbz	r2, 801574e <_raise_r+0x1e>
 8015748:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801574c:	b94b      	cbnz	r3, 8015762 <_raise_r+0x32>
 801574e:	4620      	mov	r0, r4
 8015750:	f000 f830 	bl	80157b4 <_getpid_r>
 8015754:	462a      	mov	r2, r5
 8015756:	4601      	mov	r1, r0
 8015758:	4620      	mov	r0, r4
 801575a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801575e:	f000 b817 	b.w	8015790 <_kill_r>
 8015762:	2b01      	cmp	r3, #1
 8015764:	d00a      	beq.n	801577c <_raise_r+0x4c>
 8015766:	1c59      	adds	r1, r3, #1
 8015768:	d103      	bne.n	8015772 <_raise_r+0x42>
 801576a:	2316      	movs	r3, #22
 801576c:	6003      	str	r3, [r0, #0]
 801576e:	2001      	movs	r0, #1
 8015770:	e7e7      	b.n	8015742 <_raise_r+0x12>
 8015772:	2400      	movs	r4, #0
 8015774:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015778:	4628      	mov	r0, r5
 801577a:	4798      	blx	r3
 801577c:	2000      	movs	r0, #0
 801577e:	e7e0      	b.n	8015742 <_raise_r+0x12>

08015780 <raise>:
 8015780:	4b02      	ldr	r3, [pc, #8]	; (801578c <raise+0xc>)
 8015782:	4601      	mov	r1, r0
 8015784:	6818      	ldr	r0, [r3, #0]
 8015786:	f7ff bfd3 	b.w	8015730 <_raise_r>
 801578a:	bf00      	nop
 801578c:	20000060 	.word	0x20000060

08015790 <_kill_r>:
 8015790:	b538      	push	{r3, r4, r5, lr}
 8015792:	4d07      	ldr	r5, [pc, #28]	; (80157b0 <_kill_r+0x20>)
 8015794:	2300      	movs	r3, #0
 8015796:	4604      	mov	r4, r0
 8015798:	4608      	mov	r0, r1
 801579a:	4611      	mov	r1, r2
 801579c:	602b      	str	r3, [r5, #0]
 801579e:	f7ec fea9 	bl	80024f4 <_kill>
 80157a2:	1c43      	adds	r3, r0, #1
 80157a4:	d102      	bne.n	80157ac <_kill_r+0x1c>
 80157a6:	682b      	ldr	r3, [r5, #0]
 80157a8:	b103      	cbz	r3, 80157ac <_kill_r+0x1c>
 80157aa:	6023      	str	r3, [r4, #0]
 80157ac:	bd38      	pop	{r3, r4, r5, pc}
 80157ae:	bf00      	nop
 80157b0:	20000628 	.word	0x20000628

080157b4 <_getpid_r>:
 80157b4:	f7ec be96 	b.w	80024e4 <_getpid>

080157b8 <siprintf>:
 80157b8:	b40e      	push	{r1, r2, r3}
 80157ba:	b500      	push	{lr}
 80157bc:	b09c      	sub	sp, #112	; 0x70
 80157be:	ab1d      	add	r3, sp, #116	; 0x74
 80157c0:	9002      	str	r0, [sp, #8]
 80157c2:	9006      	str	r0, [sp, #24]
 80157c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80157c8:	4809      	ldr	r0, [pc, #36]	; (80157f0 <siprintf+0x38>)
 80157ca:	9107      	str	r1, [sp, #28]
 80157cc:	9104      	str	r1, [sp, #16]
 80157ce:	4909      	ldr	r1, [pc, #36]	; (80157f4 <siprintf+0x3c>)
 80157d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80157d4:	9105      	str	r1, [sp, #20]
 80157d6:	6800      	ldr	r0, [r0, #0]
 80157d8:	9301      	str	r3, [sp, #4]
 80157da:	a902      	add	r1, sp, #8
 80157dc:	f7ff f8c2 	bl	8014964 <_svfiprintf_r>
 80157e0:	9b02      	ldr	r3, [sp, #8]
 80157e2:	2200      	movs	r2, #0
 80157e4:	701a      	strb	r2, [r3, #0]
 80157e6:	b01c      	add	sp, #112	; 0x70
 80157e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80157ec:	b003      	add	sp, #12
 80157ee:	4770      	bx	lr
 80157f0:	20000060 	.word	0x20000060
 80157f4:	ffff0208 	.word	0xffff0208

080157f8 <__stack_chk_init>:
 80157f8:	4b03      	ldr	r3, [pc, #12]	; (8015808 <__stack_chk_init+0x10>)
 80157fa:	681a      	ldr	r2, [r3, #0]
 80157fc:	b912      	cbnz	r2, 8015804 <__stack_chk_init+0xc>
 80157fe:	f5a2 0276 	sub.w	r2, r2, #16121856	; 0xf60000
 8015802:	601a      	str	r2, [r3, #0]
 8015804:	4770      	bx	lr
 8015806:	bf00      	nop
 8015808:	2000062c 	.word	0x2000062c

0801580c <__sread>:
 801580c:	b510      	push	{r4, lr}
 801580e:	460c      	mov	r4, r1
 8015810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015814:	f7ff ff6a 	bl	80156ec <_read_r>
 8015818:	2800      	cmp	r0, #0
 801581a:	bfab      	itete	ge
 801581c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801581e:	89a3      	ldrhlt	r3, [r4, #12]
 8015820:	181b      	addge	r3, r3, r0
 8015822:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015826:	bfac      	ite	ge
 8015828:	6563      	strge	r3, [r4, #84]	; 0x54
 801582a:	81a3      	strhlt	r3, [r4, #12]
 801582c:	bd10      	pop	{r4, pc}

0801582e <__swrite>:
 801582e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015832:	461f      	mov	r7, r3
 8015834:	898b      	ldrh	r3, [r1, #12]
 8015836:	05db      	lsls	r3, r3, #23
 8015838:	4605      	mov	r5, r0
 801583a:	460c      	mov	r4, r1
 801583c:	4616      	mov	r6, r2
 801583e:	d505      	bpl.n	801584c <__swrite+0x1e>
 8015840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015844:	2302      	movs	r3, #2
 8015846:	2200      	movs	r2, #0
 8015848:	f7fe faa2 	bl	8013d90 <_lseek_r>
 801584c:	89a3      	ldrh	r3, [r4, #12]
 801584e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015852:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015856:	81a3      	strh	r3, [r4, #12]
 8015858:	4632      	mov	r2, r6
 801585a:	463b      	mov	r3, r7
 801585c:	4628      	mov	r0, r5
 801585e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015862:	f000 b877 	b.w	8015954 <_write_r>

08015866 <__sseek>:
 8015866:	b510      	push	{r4, lr}
 8015868:	460c      	mov	r4, r1
 801586a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801586e:	f7fe fa8f 	bl	8013d90 <_lseek_r>
 8015872:	1c43      	adds	r3, r0, #1
 8015874:	89a3      	ldrh	r3, [r4, #12]
 8015876:	bf15      	itete	ne
 8015878:	6560      	strne	r0, [r4, #84]	; 0x54
 801587a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801587e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015882:	81a3      	strheq	r3, [r4, #12]
 8015884:	bf18      	it	ne
 8015886:	81a3      	strhne	r3, [r4, #12]
 8015888:	bd10      	pop	{r4, pc}

0801588a <__sclose>:
 801588a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801588e:	f7fd b9c3 	b.w	8012c18 <_close_r>
	...

08015894 <__swbuf_r>:
 8015894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015896:	460e      	mov	r6, r1
 8015898:	4614      	mov	r4, r2
 801589a:	4605      	mov	r5, r0
 801589c:	b118      	cbz	r0, 80158a6 <__swbuf_r+0x12>
 801589e:	6983      	ldr	r3, [r0, #24]
 80158a0:	b90b      	cbnz	r3, 80158a6 <__swbuf_r+0x12>
 80158a2:	f7fe f963 	bl	8013b6c <__sinit>
 80158a6:	4b21      	ldr	r3, [pc, #132]	; (801592c <__swbuf_r+0x98>)
 80158a8:	429c      	cmp	r4, r3
 80158aa:	d12b      	bne.n	8015904 <__swbuf_r+0x70>
 80158ac:	686c      	ldr	r4, [r5, #4]
 80158ae:	69a3      	ldr	r3, [r4, #24]
 80158b0:	60a3      	str	r3, [r4, #8]
 80158b2:	89a3      	ldrh	r3, [r4, #12]
 80158b4:	071a      	lsls	r2, r3, #28
 80158b6:	d52f      	bpl.n	8015918 <__swbuf_r+0x84>
 80158b8:	6923      	ldr	r3, [r4, #16]
 80158ba:	b36b      	cbz	r3, 8015918 <__swbuf_r+0x84>
 80158bc:	6923      	ldr	r3, [r4, #16]
 80158be:	6820      	ldr	r0, [r4, #0]
 80158c0:	1ac0      	subs	r0, r0, r3
 80158c2:	6963      	ldr	r3, [r4, #20]
 80158c4:	b2f6      	uxtb	r6, r6
 80158c6:	4283      	cmp	r3, r0
 80158c8:	4637      	mov	r7, r6
 80158ca:	dc04      	bgt.n	80158d6 <__swbuf_r+0x42>
 80158cc:	4621      	mov	r1, r4
 80158ce:	4628      	mov	r0, r5
 80158d0:	f7fe f8b8 	bl	8013a44 <_fflush_r>
 80158d4:	bb30      	cbnz	r0, 8015924 <__swbuf_r+0x90>
 80158d6:	68a3      	ldr	r3, [r4, #8]
 80158d8:	3b01      	subs	r3, #1
 80158da:	60a3      	str	r3, [r4, #8]
 80158dc:	6823      	ldr	r3, [r4, #0]
 80158de:	1c5a      	adds	r2, r3, #1
 80158e0:	6022      	str	r2, [r4, #0]
 80158e2:	701e      	strb	r6, [r3, #0]
 80158e4:	6963      	ldr	r3, [r4, #20]
 80158e6:	3001      	adds	r0, #1
 80158e8:	4283      	cmp	r3, r0
 80158ea:	d004      	beq.n	80158f6 <__swbuf_r+0x62>
 80158ec:	89a3      	ldrh	r3, [r4, #12]
 80158ee:	07db      	lsls	r3, r3, #31
 80158f0:	d506      	bpl.n	8015900 <__swbuf_r+0x6c>
 80158f2:	2e0a      	cmp	r6, #10
 80158f4:	d104      	bne.n	8015900 <__swbuf_r+0x6c>
 80158f6:	4621      	mov	r1, r4
 80158f8:	4628      	mov	r0, r5
 80158fa:	f7fe f8a3 	bl	8013a44 <_fflush_r>
 80158fe:	b988      	cbnz	r0, 8015924 <__swbuf_r+0x90>
 8015900:	4638      	mov	r0, r7
 8015902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015904:	4b0a      	ldr	r3, [pc, #40]	; (8015930 <__swbuf_r+0x9c>)
 8015906:	429c      	cmp	r4, r3
 8015908:	d101      	bne.n	801590e <__swbuf_r+0x7a>
 801590a:	68ac      	ldr	r4, [r5, #8]
 801590c:	e7cf      	b.n	80158ae <__swbuf_r+0x1a>
 801590e:	4b09      	ldr	r3, [pc, #36]	; (8015934 <__swbuf_r+0xa0>)
 8015910:	429c      	cmp	r4, r3
 8015912:	bf08      	it	eq
 8015914:	68ec      	ldreq	r4, [r5, #12]
 8015916:	e7ca      	b.n	80158ae <__swbuf_r+0x1a>
 8015918:	4621      	mov	r1, r4
 801591a:	4628      	mov	r0, r5
 801591c:	f000 f82c 	bl	8015978 <__swsetup_r>
 8015920:	2800      	cmp	r0, #0
 8015922:	d0cb      	beq.n	80158bc <__swbuf_r+0x28>
 8015924:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015928:	e7ea      	b.n	8015900 <__swbuf_r+0x6c>
 801592a:	bf00      	nop
 801592c:	08016664 	.word	0x08016664
 8015930:	08016684 	.word	0x08016684
 8015934:	08016644 	.word	0x08016644

08015938 <__ascii_wctomb>:
 8015938:	b149      	cbz	r1, 801594e <__ascii_wctomb+0x16>
 801593a:	2aff      	cmp	r2, #255	; 0xff
 801593c:	bf85      	ittet	hi
 801593e:	238a      	movhi	r3, #138	; 0x8a
 8015940:	6003      	strhi	r3, [r0, #0]
 8015942:	700a      	strbls	r2, [r1, #0]
 8015944:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8015948:	bf98      	it	ls
 801594a:	2001      	movls	r0, #1
 801594c:	4770      	bx	lr
 801594e:	4608      	mov	r0, r1
 8015950:	4770      	bx	lr
	...

08015954 <_write_r>:
 8015954:	b538      	push	{r3, r4, r5, lr}
 8015956:	4d07      	ldr	r5, [pc, #28]	; (8015974 <_write_r+0x20>)
 8015958:	4604      	mov	r4, r0
 801595a:	4608      	mov	r0, r1
 801595c:	4611      	mov	r1, r2
 801595e:	2200      	movs	r2, #0
 8015960:	602a      	str	r2, [r5, #0]
 8015962:	461a      	mov	r2, r3
 8015964:	f000 fa9c 	bl	8015ea0 <_write>
 8015968:	1c43      	adds	r3, r0, #1
 801596a:	d102      	bne.n	8015972 <_write_r+0x1e>
 801596c:	682b      	ldr	r3, [r5, #0]
 801596e:	b103      	cbz	r3, 8015972 <_write_r+0x1e>
 8015970:	6023      	str	r3, [r4, #0]
 8015972:	bd38      	pop	{r3, r4, r5, pc}
 8015974:	20000628 	.word	0x20000628

08015978 <__swsetup_r>:
 8015978:	4b32      	ldr	r3, [pc, #200]	; (8015a44 <__swsetup_r+0xcc>)
 801597a:	b570      	push	{r4, r5, r6, lr}
 801597c:	681d      	ldr	r5, [r3, #0]
 801597e:	4606      	mov	r6, r0
 8015980:	460c      	mov	r4, r1
 8015982:	b125      	cbz	r5, 801598e <__swsetup_r+0x16>
 8015984:	69ab      	ldr	r3, [r5, #24]
 8015986:	b913      	cbnz	r3, 801598e <__swsetup_r+0x16>
 8015988:	4628      	mov	r0, r5
 801598a:	f7fe f8ef 	bl	8013b6c <__sinit>
 801598e:	4b2e      	ldr	r3, [pc, #184]	; (8015a48 <__swsetup_r+0xd0>)
 8015990:	429c      	cmp	r4, r3
 8015992:	d10f      	bne.n	80159b4 <__swsetup_r+0x3c>
 8015994:	686c      	ldr	r4, [r5, #4]
 8015996:	89a3      	ldrh	r3, [r4, #12]
 8015998:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801599c:	0719      	lsls	r1, r3, #28
 801599e:	d42c      	bmi.n	80159fa <__swsetup_r+0x82>
 80159a0:	06dd      	lsls	r5, r3, #27
 80159a2:	d411      	bmi.n	80159c8 <__swsetup_r+0x50>
 80159a4:	2309      	movs	r3, #9
 80159a6:	6033      	str	r3, [r6, #0]
 80159a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80159ac:	81a3      	strh	r3, [r4, #12]
 80159ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80159b2:	e03e      	b.n	8015a32 <__swsetup_r+0xba>
 80159b4:	4b25      	ldr	r3, [pc, #148]	; (8015a4c <__swsetup_r+0xd4>)
 80159b6:	429c      	cmp	r4, r3
 80159b8:	d101      	bne.n	80159be <__swsetup_r+0x46>
 80159ba:	68ac      	ldr	r4, [r5, #8]
 80159bc:	e7eb      	b.n	8015996 <__swsetup_r+0x1e>
 80159be:	4b24      	ldr	r3, [pc, #144]	; (8015a50 <__swsetup_r+0xd8>)
 80159c0:	429c      	cmp	r4, r3
 80159c2:	bf08      	it	eq
 80159c4:	68ec      	ldreq	r4, [r5, #12]
 80159c6:	e7e6      	b.n	8015996 <__swsetup_r+0x1e>
 80159c8:	0758      	lsls	r0, r3, #29
 80159ca:	d512      	bpl.n	80159f2 <__swsetup_r+0x7a>
 80159cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80159ce:	b141      	cbz	r1, 80159e2 <__swsetup_r+0x6a>
 80159d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80159d4:	4299      	cmp	r1, r3
 80159d6:	d002      	beq.n	80159de <__swsetup_r+0x66>
 80159d8:	4630      	mov	r0, r6
 80159da:	f7fe fe51 	bl	8014680 <_free_r>
 80159de:	2300      	movs	r3, #0
 80159e0:	6363      	str	r3, [r4, #52]	; 0x34
 80159e2:	89a3      	ldrh	r3, [r4, #12]
 80159e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80159e8:	81a3      	strh	r3, [r4, #12]
 80159ea:	2300      	movs	r3, #0
 80159ec:	6063      	str	r3, [r4, #4]
 80159ee:	6923      	ldr	r3, [r4, #16]
 80159f0:	6023      	str	r3, [r4, #0]
 80159f2:	89a3      	ldrh	r3, [r4, #12]
 80159f4:	f043 0308 	orr.w	r3, r3, #8
 80159f8:	81a3      	strh	r3, [r4, #12]
 80159fa:	6923      	ldr	r3, [r4, #16]
 80159fc:	b94b      	cbnz	r3, 8015a12 <__swsetup_r+0x9a>
 80159fe:	89a3      	ldrh	r3, [r4, #12]
 8015a00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015a08:	d003      	beq.n	8015a12 <__swsetup_r+0x9a>
 8015a0a:	4621      	mov	r1, r4
 8015a0c:	4630      	mov	r0, r6
 8015a0e:	f7fe f9f7 	bl	8013e00 <__smakebuf_r>
 8015a12:	89a0      	ldrh	r0, [r4, #12]
 8015a14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015a18:	f010 0301 	ands.w	r3, r0, #1
 8015a1c:	d00a      	beq.n	8015a34 <__swsetup_r+0xbc>
 8015a1e:	2300      	movs	r3, #0
 8015a20:	60a3      	str	r3, [r4, #8]
 8015a22:	6963      	ldr	r3, [r4, #20]
 8015a24:	425b      	negs	r3, r3
 8015a26:	61a3      	str	r3, [r4, #24]
 8015a28:	6923      	ldr	r3, [r4, #16]
 8015a2a:	b943      	cbnz	r3, 8015a3e <__swsetup_r+0xc6>
 8015a2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015a30:	d1ba      	bne.n	80159a8 <__swsetup_r+0x30>
 8015a32:	bd70      	pop	{r4, r5, r6, pc}
 8015a34:	0781      	lsls	r1, r0, #30
 8015a36:	bf58      	it	pl
 8015a38:	6963      	ldrpl	r3, [r4, #20]
 8015a3a:	60a3      	str	r3, [r4, #8]
 8015a3c:	e7f4      	b.n	8015a28 <__swsetup_r+0xb0>
 8015a3e:	2000      	movs	r0, #0
 8015a40:	e7f7      	b.n	8015a32 <__swsetup_r+0xba>
 8015a42:	bf00      	nop
 8015a44:	20000060 	.word	0x20000060
 8015a48:	08016664 	.word	0x08016664
 8015a4c:	08016684 	.word	0x08016684
 8015a50:	08016644 	.word	0x08016644

08015a54 <__ieee754_fmod>:
 8015a54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a58:	ec53 2b11 	vmov	r2, r3, d1
 8015a5c:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8015a60:	ea5e 0402 	orrs.w	r4, lr, r2
 8015a64:	ec51 0b10 	vmov	r0, r1, d0
 8015a68:	ee11 7a10 	vmov	r7, s2
 8015a6c:	ee11 ca10 	vmov	ip, s2
 8015a70:	461e      	mov	r6, r3
 8015a72:	d00d      	beq.n	8015a90 <__ieee754_fmod+0x3c>
 8015a74:	4c7a      	ldr	r4, [pc, #488]	; (8015c60 <__ieee754_fmod+0x20c>)
 8015a76:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8015a7a:	45a0      	cmp	r8, r4
 8015a7c:	4689      	mov	r9, r1
 8015a7e:	dc07      	bgt.n	8015a90 <__ieee754_fmod+0x3c>
 8015a80:	4254      	negs	r4, r2
 8015a82:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 8015c6c <__ieee754_fmod+0x218>
 8015a86:	4314      	orrs	r4, r2
 8015a88:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8015a8c:	455c      	cmp	r4, fp
 8015a8e:	d909      	bls.n	8015aa4 <__ieee754_fmod+0x50>
 8015a90:	f7ea fdec 	bl	800066c <__aeabi_dmul>
 8015a94:	4602      	mov	r2, r0
 8015a96:	460b      	mov	r3, r1
 8015a98:	f7ea ff12 	bl	80008c0 <__aeabi_ddiv>
 8015a9c:	ec41 0b10 	vmov	d0, r0, r1
 8015aa0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015aa4:	45f0      	cmp	r8, lr
 8015aa6:	ee10 aa10 	vmov	sl, s0
 8015aaa:	ee10 4a10 	vmov	r4, s0
 8015aae:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8015ab2:	dc09      	bgt.n	8015ac8 <__ieee754_fmod+0x74>
 8015ab4:	dbf2      	blt.n	8015a9c <__ieee754_fmod+0x48>
 8015ab6:	4290      	cmp	r0, r2
 8015ab8:	d3f0      	bcc.n	8015a9c <__ieee754_fmod+0x48>
 8015aba:	d105      	bne.n	8015ac8 <__ieee754_fmod+0x74>
 8015abc:	4b69      	ldr	r3, [pc, #420]	; (8015c64 <__ieee754_fmod+0x210>)
 8015abe:	eb03 7515 	add.w	r5, r3, r5, lsr #28
 8015ac2:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015ac6:	e7e9      	b.n	8015a9c <__ieee754_fmod+0x48>
 8015ac8:	ea19 0f0b 	tst.w	r9, fp
 8015acc:	d14a      	bne.n	8015b64 <__ieee754_fmod+0x110>
 8015ace:	f1b8 0f00 	cmp.w	r8, #0
 8015ad2:	d13f      	bne.n	8015b54 <__ieee754_fmod+0x100>
 8015ad4:	4964      	ldr	r1, [pc, #400]	; (8015c68 <__ieee754_fmod+0x214>)
 8015ad6:	4653      	mov	r3, sl
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	dc38      	bgt.n	8015b4e <__ieee754_fmod+0xfa>
 8015adc:	4b63      	ldr	r3, [pc, #396]	; (8015c6c <__ieee754_fmod+0x218>)
 8015ade:	4033      	ands	r3, r6
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d14f      	bne.n	8015b84 <__ieee754_fmod+0x130>
 8015ae4:	f1be 0f00 	cmp.w	lr, #0
 8015ae8:	d144      	bne.n	8015b74 <__ieee754_fmod+0x120>
 8015aea:	4a5f      	ldr	r2, [pc, #380]	; (8015c68 <__ieee754_fmod+0x214>)
 8015aec:	463b      	mov	r3, r7
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	dc3d      	bgt.n	8015b6e <__ieee754_fmod+0x11a>
 8015af2:	4b5f      	ldr	r3, [pc, #380]	; (8015c70 <__ieee754_fmod+0x21c>)
 8015af4:	4299      	cmp	r1, r3
 8015af6:	db4a      	blt.n	8015b8e <__ieee754_fmod+0x13a>
 8015af8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015afc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015b00:	485b      	ldr	r0, [pc, #364]	; (8015c70 <__ieee754_fmod+0x21c>)
 8015b02:	4282      	cmp	r2, r0
 8015b04:	db57      	blt.n	8015bb6 <__ieee754_fmod+0x162>
 8015b06:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8015b0a:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8015b0e:	1a89      	subs	r1, r1, r2
 8015b10:	1b98      	subs	r0, r3, r6
 8015b12:	eba4 070c 	sub.w	r7, r4, ip
 8015b16:	2900      	cmp	r1, #0
 8015b18:	d164      	bne.n	8015be4 <__ieee754_fmod+0x190>
 8015b1a:	4564      	cmp	r4, ip
 8015b1c:	bf38      	it	cc
 8015b1e:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 8015b22:	2800      	cmp	r0, #0
 8015b24:	bfa4      	itt	ge
 8015b26:	463c      	movge	r4, r7
 8015b28:	4603      	movge	r3, r0
 8015b2a:	ea53 0104 	orrs.w	r1, r3, r4
 8015b2e:	d0c5      	beq.n	8015abc <__ieee754_fmod+0x68>
 8015b30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015b34:	db6b      	blt.n	8015c0e <__ieee754_fmod+0x1ba>
 8015b36:	494e      	ldr	r1, [pc, #312]	; (8015c70 <__ieee754_fmod+0x21c>)
 8015b38:	428a      	cmp	r2, r1
 8015b3a:	db6e      	blt.n	8015c1a <__ieee754_fmod+0x1c6>
 8015b3c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015b40:	431d      	orrs	r5, r3
 8015b42:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8015b46:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 8015b4a:	4620      	mov	r0, r4
 8015b4c:	e7a6      	b.n	8015a9c <__ieee754_fmod+0x48>
 8015b4e:	3901      	subs	r1, #1
 8015b50:	005b      	lsls	r3, r3, #1
 8015b52:	e7c1      	b.n	8015ad8 <__ieee754_fmod+0x84>
 8015b54:	4946      	ldr	r1, [pc, #280]	; (8015c70 <__ieee754_fmod+0x21c>)
 8015b56:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	ddbe      	ble.n	8015adc <__ieee754_fmod+0x88>
 8015b5e:	3901      	subs	r1, #1
 8015b60:	005b      	lsls	r3, r3, #1
 8015b62:	e7fa      	b.n	8015b5a <__ieee754_fmod+0x106>
 8015b64:	ea4f 5128 	mov.w	r1, r8, asr #20
 8015b68:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8015b6c:	e7b6      	b.n	8015adc <__ieee754_fmod+0x88>
 8015b6e:	3a01      	subs	r2, #1
 8015b70:	005b      	lsls	r3, r3, #1
 8015b72:	e7bc      	b.n	8015aee <__ieee754_fmod+0x9a>
 8015b74:	4a3e      	ldr	r2, [pc, #248]	; (8015c70 <__ieee754_fmod+0x21c>)
 8015b76:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	ddb9      	ble.n	8015af2 <__ieee754_fmod+0x9e>
 8015b7e:	3a01      	subs	r2, #1
 8015b80:	005b      	lsls	r3, r3, #1
 8015b82:	e7fa      	b.n	8015b7a <__ieee754_fmod+0x126>
 8015b84:	ea4f 522e 	mov.w	r2, lr, asr #20
 8015b88:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8015b8c:	e7b1      	b.n	8015af2 <__ieee754_fmod+0x9e>
 8015b8e:	1a5c      	subs	r4, r3, r1
 8015b90:	2c1f      	cmp	r4, #31
 8015b92:	dc0a      	bgt.n	8015baa <__ieee754_fmod+0x156>
 8015b94:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8015b98:	fa08 f804 	lsl.w	r8, r8, r4
 8015b9c:	fa2a f303 	lsr.w	r3, sl, r3
 8015ba0:	ea43 0308 	orr.w	r3, r3, r8
 8015ba4:	fa0a f404 	lsl.w	r4, sl, r4
 8015ba8:	e7aa      	b.n	8015b00 <__ieee754_fmod+0xac>
 8015baa:	4b32      	ldr	r3, [pc, #200]	; (8015c74 <__ieee754_fmod+0x220>)
 8015bac:	1a5b      	subs	r3, r3, r1
 8015bae:	fa0a f303 	lsl.w	r3, sl, r3
 8015bb2:	2400      	movs	r4, #0
 8015bb4:	e7a4      	b.n	8015b00 <__ieee754_fmod+0xac>
 8015bb6:	eba0 0c02 	sub.w	ip, r0, r2
 8015bba:	f1bc 0f1f 	cmp.w	ip, #31
 8015bbe:	dc0a      	bgt.n	8015bd6 <__ieee754_fmod+0x182>
 8015bc0:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 8015bc4:	fa0e fe0c 	lsl.w	lr, lr, ip
 8015bc8:	fa27 f606 	lsr.w	r6, r7, r6
 8015bcc:	ea46 060e 	orr.w	r6, r6, lr
 8015bd0:	fa07 fc0c 	lsl.w	ip, r7, ip
 8015bd4:	e79b      	b.n	8015b0e <__ieee754_fmod+0xba>
 8015bd6:	4e27      	ldr	r6, [pc, #156]	; (8015c74 <__ieee754_fmod+0x220>)
 8015bd8:	1ab6      	subs	r6, r6, r2
 8015bda:	fa07 f606 	lsl.w	r6, r7, r6
 8015bde:	f04f 0c00 	mov.w	ip, #0
 8015be2:	e794      	b.n	8015b0e <__ieee754_fmod+0xba>
 8015be4:	4564      	cmp	r4, ip
 8015be6:	bf38      	it	cc
 8015be8:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 8015bec:	2800      	cmp	r0, #0
 8015bee:	da05      	bge.n	8015bfc <__ieee754_fmod+0x1a8>
 8015bf0:	0fe0      	lsrs	r0, r4, #31
 8015bf2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8015bf6:	0064      	lsls	r4, r4, #1
 8015bf8:	3901      	subs	r1, #1
 8015bfa:	e789      	b.n	8015b10 <__ieee754_fmod+0xbc>
 8015bfc:	ea50 0307 	orrs.w	r3, r0, r7
 8015c00:	f43f af5c 	beq.w	8015abc <__ieee754_fmod+0x68>
 8015c04:	0ffb      	lsrs	r3, r7, #31
 8015c06:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8015c0a:	007c      	lsls	r4, r7, #1
 8015c0c:	e7f4      	b.n	8015bf8 <__ieee754_fmod+0x1a4>
 8015c0e:	0fe1      	lsrs	r1, r4, #31
 8015c10:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8015c14:	0064      	lsls	r4, r4, #1
 8015c16:	3a01      	subs	r2, #1
 8015c18:	e78a      	b.n	8015b30 <__ieee754_fmod+0xdc>
 8015c1a:	1a89      	subs	r1, r1, r2
 8015c1c:	2914      	cmp	r1, #20
 8015c1e:	dc0a      	bgt.n	8015c36 <__ieee754_fmod+0x1e2>
 8015c20:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8015c24:	fa03 f202 	lsl.w	r2, r3, r2
 8015c28:	40cc      	lsrs	r4, r1
 8015c2a:	4322      	orrs	r2, r4
 8015c2c:	410b      	asrs	r3, r1
 8015c2e:	ea43 0105 	orr.w	r1, r3, r5
 8015c32:	4610      	mov	r0, r2
 8015c34:	e732      	b.n	8015a9c <__ieee754_fmod+0x48>
 8015c36:	291f      	cmp	r1, #31
 8015c38:	dc07      	bgt.n	8015c4a <__ieee754_fmod+0x1f6>
 8015c3a:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8015c3e:	40cc      	lsrs	r4, r1
 8015c40:	fa03 f202 	lsl.w	r2, r3, r2
 8015c44:	4322      	orrs	r2, r4
 8015c46:	462b      	mov	r3, r5
 8015c48:	e7f1      	b.n	8015c2e <__ieee754_fmod+0x1da>
 8015c4a:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8015c4e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8015c52:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8015c56:	32e2      	adds	r2, #226	; 0xe2
 8015c58:	fa43 f202 	asr.w	r2, r3, r2
 8015c5c:	e7f3      	b.n	8015c46 <__ieee754_fmod+0x1f2>
 8015c5e:	bf00      	nop
 8015c60:	7fefffff 	.word	0x7fefffff
 8015c64:	08016858 	.word	0x08016858
 8015c68:	fffffbed 	.word	0xfffffbed
 8015c6c:	7ff00000 	.word	0x7ff00000
 8015c70:	fffffc02 	.word	0xfffffc02
 8015c74:	fffffbe2 	.word	0xfffffbe2

08015c78 <__ieee754_sqrt>:
 8015c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c7c:	ec55 4b10 	vmov	r4, r5, d0
 8015c80:	4e55      	ldr	r6, [pc, #340]	; (8015dd8 <__ieee754_sqrt+0x160>)
 8015c82:	43ae      	bics	r6, r5
 8015c84:	ee10 0a10 	vmov	r0, s0
 8015c88:	ee10 3a10 	vmov	r3, s0
 8015c8c:	462a      	mov	r2, r5
 8015c8e:	4629      	mov	r1, r5
 8015c90:	d110      	bne.n	8015cb4 <__ieee754_sqrt+0x3c>
 8015c92:	ee10 2a10 	vmov	r2, s0
 8015c96:	462b      	mov	r3, r5
 8015c98:	f7ea fce8 	bl	800066c <__aeabi_dmul>
 8015c9c:	4602      	mov	r2, r0
 8015c9e:	460b      	mov	r3, r1
 8015ca0:	4620      	mov	r0, r4
 8015ca2:	4629      	mov	r1, r5
 8015ca4:	f7ea fb2c 	bl	8000300 <__adddf3>
 8015ca8:	4604      	mov	r4, r0
 8015caa:	460d      	mov	r5, r1
 8015cac:	ec45 4b10 	vmov	d0, r4, r5
 8015cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cb4:	2d00      	cmp	r5, #0
 8015cb6:	dc10      	bgt.n	8015cda <__ieee754_sqrt+0x62>
 8015cb8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015cbc:	4330      	orrs	r0, r6
 8015cbe:	d0f5      	beq.n	8015cac <__ieee754_sqrt+0x34>
 8015cc0:	b15d      	cbz	r5, 8015cda <__ieee754_sqrt+0x62>
 8015cc2:	ee10 2a10 	vmov	r2, s0
 8015cc6:	462b      	mov	r3, r5
 8015cc8:	ee10 0a10 	vmov	r0, s0
 8015ccc:	f7ea fb16 	bl	80002fc <__aeabi_dsub>
 8015cd0:	4602      	mov	r2, r0
 8015cd2:	460b      	mov	r3, r1
 8015cd4:	f7ea fdf4 	bl	80008c0 <__aeabi_ddiv>
 8015cd8:	e7e6      	b.n	8015ca8 <__ieee754_sqrt+0x30>
 8015cda:	1512      	asrs	r2, r2, #20
 8015cdc:	d074      	beq.n	8015dc8 <__ieee754_sqrt+0x150>
 8015cde:	07d4      	lsls	r4, r2, #31
 8015ce0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8015ce4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8015ce8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8015cec:	bf5e      	ittt	pl
 8015cee:	0fda      	lsrpl	r2, r3, #31
 8015cf0:	005b      	lslpl	r3, r3, #1
 8015cf2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8015cf6:	2400      	movs	r4, #0
 8015cf8:	0fda      	lsrs	r2, r3, #31
 8015cfa:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8015cfe:	107f      	asrs	r7, r7, #1
 8015d00:	005b      	lsls	r3, r3, #1
 8015d02:	2516      	movs	r5, #22
 8015d04:	4620      	mov	r0, r4
 8015d06:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8015d0a:	1886      	adds	r6, r0, r2
 8015d0c:	428e      	cmp	r6, r1
 8015d0e:	bfde      	ittt	le
 8015d10:	1b89      	suble	r1, r1, r6
 8015d12:	18b0      	addle	r0, r6, r2
 8015d14:	18a4      	addle	r4, r4, r2
 8015d16:	0049      	lsls	r1, r1, #1
 8015d18:	3d01      	subs	r5, #1
 8015d1a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8015d1e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8015d22:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015d26:	d1f0      	bne.n	8015d0a <__ieee754_sqrt+0x92>
 8015d28:	462a      	mov	r2, r5
 8015d2a:	f04f 0e20 	mov.w	lr, #32
 8015d2e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8015d32:	4281      	cmp	r1, r0
 8015d34:	eb06 0c05 	add.w	ip, r6, r5
 8015d38:	dc02      	bgt.n	8015d40 <__ieee754_sqrt+0xc8>
 8015d3a:	d113      	bne.n	8015d64 <__ieee754_sqrt+0xec>
 8015d3c:	459c      	cmp	ip, r3
 8015d3e:	d811      	bhi.n	8015d64 <__ieee754_sqrt+0xec>
 8015d40:	f1bc 0f00 	cmp.w	ip, #0
 8015d44:	eb0c 0506 	add.w	r5, ip, r6
 8015d48:	da43      	bge.n	8015dd2 <__ieee754_sqrt+0x15a>
 8015d4a:	2d00      	cmp	r5, #0
 8015d4c:	db41      	blt.n	8015dd2 <__ieee754_sqrt+0x15a>
 8015d4e:	f100 0801 	add.w	r8, r0, #1
 8015d52:	1a09      	subs	r1, r1, r0
 8015d54:	459c      	cmp	ip, r3
 8015d56:	bf88      	it	hi
 8015d58:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8015d5c:	eba3 030c 	sub.w	r3, r3, ip
 8015d60:	4432      	add	r2, r6
 8015d62:	4640      	mov	r0, r8
 8015d64:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8015d68:	f1be 0e01 	subs.w	lr, lr, #1
 8015d6c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8015d70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015d74:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8015d78:	d1db      	bne.n	8015d32 <__ieee754_sqrt+0xba>
 8015d7a:	430b      	orrs	r3, r1
 8015d7c:	d006      	beq.n	8015d8c <__ieee754_sqrt+0x114>
 8015d7e:	1c50      	adds	r0, r2, #1
 8015d80:	bf13      	iteet	ne
 8015d82:	3201      	addne	r2, #1
 8015d84:	3401      	addeq	r4, #1
 8015d86:	4672      	moveq	r2, lr
 8015d88:	f022 0201 	bicne.w	r2, r2, #1
 8015d8c:	1063      	asrs	r3, r4, #1
 8015d8e:	0852      	lsrs	r2, r2, #1
 8015d90:	07e1      	lsls	r1, r4, #31
 8015d92:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8015d96:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8015d9a:	bf48      	it	mi
 8015d9c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8015da0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8015da4:	4614      	mov	r4, r2
 8015da6:	e781      	b.n	8015cac <__ieee754_sqrt+0x34>
 8015da8:	0ad9      	lsrs	r1, r3, #11
 8015daa:	3815      	subs	r0, #21
 8015dac:	055b      	lsls	r3, r3, #21
 8015dae:	2900      	cmp	r1, #0
 8015db0:	d0fa      	beq.n	8015da8 <__ieee754_sqrt+0x130>
 8015db2:	02cd      	lsls	r5, r1, #11
 8015db4:	d50a      	bpl.n	8015dcc <__ieee754_sqrt+0x154>
 8015db6:	f1c2 0420 	rsb	r4, r2, #32
 8015dba:	fa23 f404 	lsr.w	r4, r3, r4
 8015dbe:	1e55      	subs	r5, r2, #1
 8015dc0:	4093      	lsls	r3, r2
 8015dc2:	4321      	orrs	r1, r4
 8015dc4:	1b42      	subs	r2, r0, r5
 8015dc6:	e78a      	b.n	8015cde <__ieee754_sqrt+0x66>
 8015dc8:	4610      	mov	r0, r2
 8015dca:	e7f0      	b.n	8015dae <__ieee754_sqrt+0x136>
 8015dcc:	0049      	lsls	r1, r1, #1
 8015dce:	3201      	adds	r2, #1
 8015dd0:	e7ef      	b.n	8015db2 <__ieee754_sqrt+0x13a>
 8015dd2:	4680      	mov	r8, r0
 8015dd4:	e7bd      	b.n	8015d52 <__ieee754_sqrt+0xda>
 8015dd6:	bf00      	nop
 8015dd8:	7ff00000 	.word	0x7ff00000

08015ddc <fmod>:
 8015ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015dde:	ed2d 8b02 	vpush	{d8}
 8015de2:	ec57 6b10 	vmov	r6, r7, d0
 8015de6:	ec55 4b11 	vmov	r4, r5, d1
 8015dea:	f7ff fe33 	bl	8015a54 <__ieee754_fmod>
 8015dee:	4622      	mov	r2, r4
 8015df0:	462b      	mov	r3, r5
 8015df2:	4630      	mov	r0, r6
 8015df4:	4639      	mov	r1, r7
 8015df6:	eeb0 8a40 	vmov.f32	s16, s0
 8015dfa:	eef0 8a60 	vmov.f32	s17, s1
 8015dfe:	f7ea fecf 	bl	8000ba0 <__aeabi_dcmpun>
 8015e02:	b990      	cbnz	r0, 8015e2a <fmod+0x4e>
 8015e04:	2200      	movs	r2, #0
 8015e06:	2300      	movs	r3, #0
 8015e08:	4620      	mov	r0, r4
 8015e0a:	4629      	mov	r1, r5
 8015e0c:	f7ea fe96 	bl	8000b3c <__aeabi_dcmpeq>
 8015e10:	b158      	cbz	r0, 8015e2a <fmod+0x4e>
 8015e12:	f7fd fd8b 	bl	801392c <__errno>
 8015e16:	2321      	movs	r3, #33	; 0x21
 8015e18:	6003      	str	r3, [r0, #0]
 8015e1a:	2200      	movs	r2, #0
 8015e1c:	2300      	movs	r3, #0
 8015e1e:	4610      	mov	r0, r2
 8015e20:	4619      	mov	r1, r3
 8015e22:	f7ea fd4d 	bl	80008c0 <__aeabi_ddiv>
 8015e26:	ec41 0b18 	vmov	d8, r0, r1
 8015e2a:	eeb0 0a48 	vmov.f32	s0, s16
 8015e2e:	eef0 0a68 	vmov.f32	s1, s17
 8015e32:	ecbd 8b02 	vpop	{d8}
 8015e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015e38 <sqrt>:
 8015e38:	b538      	push	{r3, r4, r5, lr}
 8015e3a:	ed2d 8b02 	vpush	{d8}
 8015e3e:	ec55 4b10 	vmov	r4, r5, d0
 8015e42:	f7ff ff19 	bl	8015c78 <__ieee754_sqrt>
 8015e46:	4622      	mov	r2, r4
 8015e48:	462b      	mov	r3, r5
 8015e4a:	4620      	mov	r0, r4
 8015e4c:	4629      	mov	r1, r5
 8015e4e:	eeb0 8a40 	vmov.f32	s16, s0
 8015e52:	eef0 8a60 	vmov.f32	s17, s1
 8015e56:	f7ea fea3 	bl	8000ba0 <__aeabi_dcmpun>
 8015e5a:	b990      	cbnz	r0, 8015e82 <sqrt+0x4a>
 8015e5c:	2200      	movs	r2, #0
 8015e5e:	2300      	movs	r3, #0
 8015e60:	4620      	mov	r0, r4
 8015e62:	4629      	mov	r1, r5
 8015e64:	f7ea fe74 	bl	8000b50 <__aeabi_dcmplt>
 8015e68:	b158      	cbz	r0, 8015e82 <sqrt+0x4a>
 8015e6a:	f7fd fd5f 	bl	801392c <__errno>
 8015e6e:	2321      	movs	r3, #33	; 0x21
 8015e70:	6003      	str	r3, [r0, #0]
 8015e72:	2200      	movs	r2, #0
 8015e74:	2300      	movs	r3, #0
 8015e76:	4610      	mov	r0, r2
 8015e78:	4619      	mov	r1, r3
 8015e7a:	f7ea fd21 	bl	80008c0 <__aeabi_ddiv>
 8015e7e:	ec41 0b18 	vmov	d8, r0, r1
 8015e82:	eeb0 0a48 	vmov.f32	s0, s16
 8015e86:	eef0 0a68 	vmov.f32	s1, s17
 8015e8a:	ecbd 8b02 	vpop	{d8}
 8015e8e:	bd38      	pop	{r3, r4, r5, pc}

08015e90 <_read>:
 8015e90:	4b02      	ldr	r3, [pc, #8]	; (8015e9c <_read+0xc>)
 8015e92:	2258      	movs	r2, #88	; 0x58
 8015e94:	601a      	str	r2, [r3, #0]
 8015e96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015e9a:	4770      	bx	lr
 8015e9c:	20000628 	.word	0x20000628

08015ea0 <_write>:
 8015ea0:	4b02      	ldr	r3, [pc, #8]	; (8015eac <_write+0xc>)
 8015ea2:	2258      	movs	r2, #88	; 0x58
 8015ea4:	601a      	str	r2, [r3, #0]
 8015ea6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015eaa:	4770      	bx	lr
 8015eac:	20000628 	.word	0x20000628

08015eb0 <register_fini>:
 8015eb0:	4b02      	ldr	r3, [pc, #8]	; (8015ebc <register_fini+0xc>)
 8015eb2:	b113      	cbz	r3, 8015eba <register_fini+0xa>
 8015eb4:	4802      	ldr	r0, [pc, #8]	; (8015ec0 <register_fini+0x10>)
 8015eb6:	f7fc bea9 	b.w	8012c0c <atexit>
 8015eba:	4770      	bx	lr
 8015ebc:	00000000 	.word	0x00000000
 8015ec0:	08013c69 	.word	0x08013c69

08015ec4 <_init>:
 8015ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ec6:	bf00      	nop
 8015ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015eca:	bc08      	pop	{r3}
 8015ecc:	469e      	mov	lr, r3
 8015ece:	4770      	bx	lr

08015ed0 <_fini>:
 8015ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ed2:	bf00      	nop
 8015ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015ed6:	bc08      	pop	{r3}
 8015ed8:	469e      	mov	lr, r3
 8015eda:	4770      	bx	lr
