
F411CEU6_CAR_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000159a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000970  08015b48  08015b48  00025b48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080164b8  080164b8  00030230  2**0
                  CONTENTS
  4 .ARM          00000008  080164b8  080164b8  000264b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080164c0  080164c0  00030230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000018  080164c0  080164c0  000264c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080164d8  080164d8  000264d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  080164dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e8  20000230  0801670c  00030230  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000618  0801670c  00030618  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY
 12 .debug_info   000140b0  00000000  00000000  00030260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f77  00000000  00000000  00044310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  00047288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f68  00000000  00000000  00048348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fab  00000000  00000000  000492b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015312  00000000  00000000  0006325b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000957f9  00000000  00000000  0007856d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cf  00000000  00000000  0010dd66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005928  00000000  00000000  0010de38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000030  00000000  00000000  00113bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000453  00000000  00000000  00113760  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <dw3000_driver>:
 80001a0:	12 03 ca de 0f ff ff ff 64 5e 01 08 6c 5e 01 08     ........d^..l^..
 80001b0:	a0 5d 01 08 64 5d 01 08 07 00 06 00                 .]..d]......

080001bc <dw3700_driver>:
 80001bc:	13 03 ca de 0f ff ff ff 64 5e 01 08 6c 5e 01 08     ........d^..l^..
 80001cc:	e0 5e 01 08 a4 5e 01 08 07 00 06 00                 .^...^......

080001d8 <dw3720_driver>:
 80001d8:	14 03 ca de 0f ff ff ff 64 5e 01 08 6c 5e 01 08     ........d^..l^..
 80001e8:	f0 5f 01 08 b4 5f 01 08 07 00 06 00                 ._..._......

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000230 	.word	0x20000230
 8000210:	00000000 	.word	0x00000000
 8000214:	08015b30 	.word	0x08015b30

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000234 	.word	0x20000234
 8000230:	08015b30 	.word	0x08015b30
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_idiv0>:
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop

080002f4 <__aeabi_drsub>:
 80002f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f8:	e002      	b.n	8000300 <__adddf3>
 80002fa:	bf00      	nop

080002fc <__aeabi_dsub>:
 80002fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000300 <__adddf3>:
 8000300:	b530      	push	{r4, r5, lr}
 8000302:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000306:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800030a:	ea94 0f05 	teq	r4, r5
 800030e:	bf08      	it	eq
 8000310:	ea90 0f02 	teqeq	r0, r2
 8000314:	bf1f      	itttt	ne
 8000316:	ea54 0c00 	orrsne.w	ip, r4, r0
 800031a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000322:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000326:	f000 80e2 	beq.w	80004ee <__adddf3+0x1ee>
 800032a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000332:	bfb8      	it	lt
 8000334:	426d      	neglt	r5, r5
 8000336:	dd0c      	ble.n	8000352 <__adddf3+0x52>
 8000338:	442c      	add	r4, r5
 800033a:	ea80 0202 	eor.w	r2, r0, r2
 800033e:	ea81 0303 	eor.w	r3, r1, r3
 8000342:	ea82 0000 	eor.w	r0, r2, r0
 8000346:	ea83 0101 	eor.w	r1, r3, r1
 800034a:	ea80 0202 	eor.w	r2, r0, r2
 800034e:	ea81 0303 	eor.w	r3, r1, r3
 8000352:	2d36      	cmp	r5, #54	; 0x36
 8000354:	bf88      	it	hi
 8000356:	bd30      	pophi	{r4, r5, pc}
 8000358:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800035c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000360:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000364:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x70>
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000374:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000378:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800037c:	d002      	beq.n	8000384 <__adddf3+0x84>
 800037e:	4252      	negs	r2, r2
 8000380:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000384:	ea94 0f05 	teq	r4, r5
 8000388:	f000 80a7 	beq.w	80004da <__adddf3+0x1da>
 800038c:	f1a4 0401 	sub.w	r4, r4, #1
 8000390:	f1d5 0e20 	rsbs	lr, r5, #32
 8000394:	db0d      	blt.n	80003b2 <__adddf3+0xb2>
 8000396:	fa02 fc0e 	lsl.w	ip, r2, lr
 800039a:	fa22 f205 	lsr.w	r2, r2, r5
 800039e:	1880      	adds	r0, r0, r2
 80003a0:	f141 0100 	adc.w	r1, r1, #0
 80003a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a8:	1880      	adds	r0, r0, r2
 80003aa:	fa43 f305 	asr.w	r3, r3, r5
 80003ae:	4159      	adcs	r1, r3
 80003b0:	e00e      	b.n	80003d0 <__adddf3+0xd0>
 80003b2:	f1a5 0520 	sub.w	r5, r5, #32
 80003b6:	f10e 0e20 	add.w	lr, lr, #32
 80003ba:	2a01      	cmp	r2, #1
 80003bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003c0:	bf28      	it	cs
 80003c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	18c0      	adds	r0, r0, r3
 80003cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	d507      	bpl.n	80003e6 <__adddf3+0xe6>
 80003d6:	f04f 0e00 	mov.w	lr, #0
 80003da:	f1dc 0c00 	rsbs	ip, ip, #0
 80003de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ea:	d31b      	bcc.n	8000424 <__adddf3+0x124>
 80003ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003f0:	d30c      	bcc.n	800040c <__adddf3+0x10c>
 80003f2:	0849      	lsrs	r1, r1, #1
 80003f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003fc:	f104 0401 	add.w	r4, r4, #1
 8000400:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000404:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000408:	f080 809a 	bcs.w	8000540 <__adddf3+0x240>
 800040c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000410:	bf08      	it	eq
 8000412:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000416:	f150 0000 	adcs.w	r0, r0, #0
 800041a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041e:	ea41 0105 	orr.w	r1, r1, r5
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000428:	4140      	adcs	r0, r0
 800042a:	eb41 0101 	adc.w	r1, r1, r1
 800042e:	3c01      	subs	r4, #1
 8000430:	bf28      	it	cs
 8000432:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000436:	d2e9      	bcs.n	800040c <__adddf3+0x10c>
 8000438:	f091 0f00 	teq	r1, #0
 800043c:	bf04      	itt	eq
 800043e:	4601      	moveq	r1, r0
 8000440:	2000      	moveq	r0, #0
 8000442:	fab1 f381 	clz	r3, r1
 8000446:	bf08      	it	eq
 8000448:	3320      	addeq	r3, #32
 800044a:	f1a3 030b 	sub.w	r3, r3, #11
 800044e:	f1b3 0220 	subs.w	r2, r3, #32
 8000452:	da0c      	bge.n	800046e <__adddf3+0x16e>
 8000454:	320c      	adds	r2, #12
 8000456:	dd08      	ble.n	800046a <__adddf3+0x16a>
 8000458:	f102 0c14 	add.w	ip, r2, #20
 800045c:	f1c2 020c 	rsb	r2, r2, #12
 8000460:	fa01 f00c 	lsl.w	r0, r1, ip
 8000464:	fa21 f102 	lsr.w	r1, r1, r2
 8000468:	e00c      	b.n	8000484 <__adddf3+0x184>
 800046a:	f102 0214 	add.w	r2, r2, #20
 800046e:	bfd8      	it	le
 8000470:	f1c2 0c20 	rsble	ip, r2, #32
 8000474:	fa01 f102 	lsl.w	r1, r1, r2
 8000478:	fa20 fc0c 	lsr.w	ip, r0, ip
 800047c:	bfdc      	itt	le
 800047e:	ea41 010c 	orrle.w	r1, r1, ip
 8000482:	4090      	lslle	r0, r2
 8000484:	1ae4      	subs	r4, r4, r3
 8000486:	bfa2      	ittt	ge
 8000488:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800048c:	4329      	orrge	r1, r5
 800048e:	bd30      	popge	{r4, r5, pc}
 8000490:	ea6f 0404 	mvn.w	r4, r4
 8000494:	3c1f      	subs	r4, #31
 8000496:	da1c      	bge.n	80004d2 <__adddf3+0x1d2>
 8000498:	340c      	adds	r4, #12
 800049a:	dc0e      	bgt.n	80004ba <__adddf3+0x1ba>
 800049c:	f104 0414 	add.w	r4, r4, #20
 80004a0:	f1c4 0220 	rsb	r2, r4, #32
 80004a4:	fa20 f004 	lsr.w	r0, r0, r4
 80004a8:	fa01 f302 	lsl.w	r3, r1, r2
 80004ac:	ea40 0003 	orr.w	r0, r0, r3
 80004b0:	fa21 f304 	lsr.w	r3, r1, r4
 80004b4:	ea45 0103 	orr.w	r1, r5, r3
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	f1c4 040c 	rsb	r4, r4, #12
 80004be:	f1c4 0220 	rsb	r2, r4, #32
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 f304 	lsl.w	r3, r1, r4
 80004ca:	ea40 0003 	orr.w	r0, r0, r3
 80004ce:	4629      	mov	r1, r5
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	fa21 f004 	lsr.w	r0, r1, r4
 80004d6:	4629      	mov	r1, r5
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	f094 0f00 	teq	r4, #0
 80004de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004e2:	bf06      	itte	eq
 80004e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e8:	3401      	addeq	r4, #1
 80004ea:	3d01      	subne	r5, #1
 80004ec:	e74e      	b.n	800038c <__adddf3+0x8c>
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf18      	it	ne
 80004f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f8:	d029      	beq.n	800054e <__adddf3+0x24e>
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	d005      	beq.n	8000512 <__adddf3+0x212>
 8000506:	ea54 0c00 	orrs.w	ip, r4, r0
 800050a:	bf04      	itt	eq
 800050c:	4619      	moveq	r1, r3
 800050e:	4610      	moveq	r0, r2
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea91 0f03 	teq	r1, r3
 8000516:	bf1e      	ittt	ne
 8000518:	2100      	movne	r1, #0
 800051a:	2000      	movne	r0, #0
 800051c:	bd30      	popne	{r4, r5, pc}
 800051e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000522:	d105      	bne.n	8000530 <__adddf3+0x230>
 8000524:	0040      	lsls	r0, r0, #1
 8000526:	4149      	adcs	r1, r1
 8000528:	bf28      	it	cs
 800052a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052e:	bd30      	pop	{r4, r5, pc}
 8000530:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000534:	bf3c      	itt	cc
 8000536:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800053a:	bd30      	popcc	{r4, r5, pc}
 800053c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000540:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000544:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000548:	f04f 0000 	mov.w	r0, #0
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000552:	bf1a      	itte	ne
 8000554:	4619      	movne	r1, r3
 8000556:	4610      	movne	r0, r2
 8000558:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800055c:	bf1c      	itt	ne
 800055e:	460b      	movne	r3, r1
 8000560:	4602      	movne	r2, r0
 8000562:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000566:	bf06      	itte	eq
 8000568:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800056c:	ea91 0f03 	teqeq	r1, r3
 8000570:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	bf00      	nop

08000578 <__aeabi_ui2d>:
 8000578:	f090 0f00 	teq	r0, #0
 800057c:	bf04      	itt	eq
 800057e:	2100      	moveq	r1, #0
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000588:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058c:	f04f 0500 	mov.w	r5, #0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e750      	b.n	8000438 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_i2d>:
 8000598:	f090 0f00 	teq	r0, #0
 800059c:	bf04      	itt	eq
 800059e:	2100      	moveq	r1, #0
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005b0:	bf48      	it	mi
 80005b2:	4240      	negmi	r0, r0
 80005b4:	f04f 0100 	mov.w	r1, #0
 80005b8:	e73e      	b.n	8000438 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_f2d>:
 80005bc:	0042      	lsls	r2, r0, #1
 80005be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ca:	bf1f      	itttt	ne
 80005cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d8:	4770      	bxne	lr
 80005da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005de:	bf08      	it	eq
 80005e0:	4770      	bxeq	lr
 80005e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e6:	bf04      	itt	eq
 80005e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005fc:	e71c      	b.n	8000438 <__adddf3+0x138>
 80005fe:	bf00      	nop

08000600 <__aeabi_ul2d>:
 8000600:	ea50 0201 	orrs.w	r2, r0, r1
 8000604:	bf08      	it	eq
 8000606:	4770      	bxeq	lr
 8000608:	b530      	push	{r4, r5, lr}
 800060a:	f04f 0500 	mov.w	r5, #0
 800060e:	e00a      	b.n	8000626 <__aeabi_l2d+0x16>

08000610 <__aeabi_l2d>:
 8000610:	ea50 0201 	orrs.w	r2, r0, r1
 8000614:	bf08      	it	eq
 8000616:	4770      	bxeq	lr
 8000618:	b530      	push	{r4, r5, lr}
 800061a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061e:	d502      	bpl.n	8000626 <__aeabi_l2d+0x16>
 8000620:	4240      	negs	r0, r0
 8000622:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000626:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800062a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000632:	f43f aed8 	beq.w	80003e6 <__adddf3+0xe6>
 8000636:	f04f 0203 	mov.w	r2, #3
 800063a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063e:	bf18      	it	ne
 8000640:	3203      	addne	r2, #3
 8000642:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000646:	bf18      	it	ne
 8000648:	3203      	addne	r2, #3
 800064a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064e:	f1c2 0320 	rsb	r3, r2, #32
 8000652:	fa00 fc03 	lsl.w	ip, r0, r3
 8000656:	fa20 f002 	lsr.w	r0, r0, r2
 800065a:	fa01 fe03 	lsl.w	lr, r1, r3
 800065e:	ea40 000e 	orr.w	r0, r0, lr
 8000662:	fa21 f102 	lsr.w	r1, r1, r2
 8000666:	4414      	add	r4, r2
 8000668:	e6bd      	b.n	80003e6 <__adddf3+0xe6>
 800066a:	bf00      	nop

0800066c <__aeabi_dmul>:
 800066c:	b570      	push	{r4, r5, r6, lr}
 800066e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000672:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000676:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800067a:	bf1d      	ittte	ne
 800067c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000680:	ea94 0f0c 	teqne	r4, ip
 8000684:	ea95 0f0c 	teqne	r5, ip
 8000688:	f000 f8de 	bleq	8000848 <__aeabi_dmul+0x1dc>
 800068c:	442c      	add	r4, r5
 800068e:	ea81 0603 	eor.w	r6, r1, r3
 8000692:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000696:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800069a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069e:	bf18      	it	ne
 80006a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006ac:	d038      	beq.n	8000720 <__aeabi_dmul+0xb4>
 80006ae:	fba0 ce02 	umull	ip, lr, r0, r2
 80006b2:	f04f 0500 	mov.w	r5, #0
 80006b6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006ba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006be:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006c2:	f04f 0600 	mov.w	r6, #0
 80006c6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ca:	f09c 0f00 	teq	ip, #0
 80006ce:	bf18      	it	ne
 80006d0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006dc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006e0:	d204      	bcs.n	80006ec <__aeabi_dmul+0x80>
 80006e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e6:	416d      	adcs	r5, r5
 80006e8:	eb46 0606 	adc.w	r6, r6, r6
 80006ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000700:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000704:	bf88      	it	hi
 8000706:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800070a:	d81e      	bhi.n	800074a <__aeabi_dmul+0xde>
 800070c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000710:	bf08      	it	eq
 8000712:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000716:	f150 0000 	adcs.w	r0, r0, #0
 800071a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071e:	bd70      	pop	{r4, r5, r6, pc}
 8000720:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000724:	ea46 0101 	orr.w	r1, r6, r1
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000734:	bfc2      	ittt	gt
 8000736:	ebd4 050c 	rsbsgt	r5, r4, ip
 800073a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073e:	bd70      	popgt	{r4, r5, r6, pc}
 8000740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000744:	f04f 0e00 	mov.w	lr, #0
 8000748:	3c01      	subs	r4, #1
 800074a:	f300 80ab 	bgt.w	80008a4 <__aeabi_dmul+0x238>
 800074e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000752:	bfde      	ittt	le
 8000754:	2000      	movle	r0, #0
 8000756:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800075a:	bd70      	pople	{r4, r5, r6, pc}
 800075c:	f1c4 0400 	rsb	r4, r4, #0
 8000760:	3c20      	subs	r4, #32
 8000762:	da35      	bge.n	80007d0 <__aeabi_dmul+0x164>
 8000764:	340c      	adds	r4, #12
 8000766:	dc1b      	bgt.n	80007a0 <__aeabi_dmul+0x134>
 8000768:	f104 0414 	add.w	r4, r4, #20
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f305 	lsl.w	r3, r0, r5
 8000774:	fa20 f004 	lsr.w	r0, r0, r4
 8000778:	fa01 f205 	lsl.w	r2, r1, r5
 800077c:	ea40 0002 	orr.w	r0, r0, r2
 8000780:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000784:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	fa21 f604 	lsr.w	r6, r1, r4
 8000790:	eb42 0106 	adc.w	r1, r2, r6
 8000794:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000798:	bf08      	it	eq
 800079a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079e:	bd70      	pop	{r4, r5, r6, pc}
 80007a0:	f1c4 040c 	rsb	r4, r4, #12
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f304 	lsl.w	r3, r0, r4
 80007ac:	fa20 f005 	lsr.w	r0, r0, r5
 80007b0:	fa01 f204 	lsl.w	r2, r1, r4
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c0:	f141 0100 	adc.w	r1, r1, #0
 80007c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c8:	bf08      	it	eq
 80007ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ce:	bd70      	pop	{r4, r5, r6, pc}
 80007d0:	f1c4 0520 	rsb	r5, r4, #32
 80007d4:	fa00 f205 	lsl.w	r2, r0, r5
 80007d8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007dc:	fa20 f304 	lsr.w	r3, r0, r4
 80007e0:	fa01 f205 	lsl.w	r2, r1, r5
 80007e4:	ea43 0302 	orr.w	r3, r3, r2
 80007e8:	fa21 f004 	lsr.w	r0, r1, r4
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	fa21 f204 	lsr.w	r2, r1, r4
 80007f4:	ea20 0002 	bic.w	r0, r0, r2
 80007f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000800:	bf08      	it	eq
 8000802:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000806:	bd70      	pop	{r4, r5, r6, pc}
 8000808:	f094 0f00 	teq	r4, #0
 800080c:	d10f      	bne.n	800082e <__aeabi_dmul+0x1c2>
 800080e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000812:	0040      	lsls	r0, r0, #1
 8000814:	eb41 0101 	adc.w	r1, r1, r1
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	bf08      	it	eq
 800081e:	3c01      	subeq	r4, #1
 8000820:	d0f7      	beq.n	8000812 <__aeabi_dmul+0x1a6>
 8000822:	ea41 0106 	orr.w	r1, r1, r6
 8000826:	f095 0f00 	teq	r5, #0
 800082a:	bf18      	it	ne
 800082c:	4770      	bxne	lr
 800082e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000832:	0052      	lsls	r2, r2, #1
 8000834:	eb43 0303 	adc.w	r3, r3, r3
 8000838:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800083c:	bf08      	it	eq
 800083e:	3d01      	subeq	r5, #1
 8000840:	d0f7      	beq.n	8000832 <__aeabi_dmul+0x1c6>
 8000842:	ea43 0306 	orr.w	r3, r3, r6
 8000846:	4770      	bx	lr
 8000848:	ea94 0f0c 	teq	r4, ip
 800084c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000850:	bf18      	it	ne
 8000852:	ea95 0f0c 	teqne	r5, ip
 8000856:	d00c      	beq.n	8000872 <__aeabi_dmul+0x206>
 8000858:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800085c:	bf18      	it	ne
 800085e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000862:	d1d1      	bne.n	8000808 <__aeabi_dmul+0x19c>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000876:	bf06      	itte	eq
 8000878:	4610      	moveq	r0, r2
 800087a:	4619      	moveq	r1, r3
 800087c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000880:	d019      	beq.n	80008b6 <__aeabi_dmul+0x24a>
 8000882:	ea94 0f0c 	teq	r4, ip
 8000886:	d102      	bne.n	800088e <__aeabi_dmul+0x222>
 8000888:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800088c:	d113      	bne.n	80008b6 <__aeabi_dmul+0x24a>
 800088e:	ea95 0f0c 	teq	r5, ip
 8000892:	d105      	bne.n	80008a0 <__aeabi_dmul+0x234>
 8000894:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000898:	bf1c      	itt	ne
 800089a:	4610      	movne	r0, r2
 800089c:	4619      	movne	r1, r3
 800089e:	d10a      	bne.n	80008b6 <__aeabi_dmul+0x24a>
 80008a0:	ea81 0103 	eor.w	r1, r1, r3
 80008a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008b0:	f04f 0000 	mov.w	r0, #0
 80008b4:	bd70      	pop	{r4, r5, r6, pc}
 80008b6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008ba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008be:	bd70      	pop	{r4, r5, r6, pc}

080008c0 <__aeabi_ddiv>:
 80008c0:	b570      	push	{r4, r5, r6, lr}
 80008c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ce:	bf1d      	ittte	ne
 80008d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d4:	ea94 0f0c 	teqne	r4, ip
 80008d8:	ea95 0f0c 	teqne	r5, ip
 80008dc:	f000 f8a7 	bleq	8000a2e <__aeabi_ddiv+0x16e>
 80008e0:	eba4 0405 	sub.w	r4, r4, r5
 80008e4:	ea81 0e03 	eor.w	lr, r1, r3
 80008e8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008f0:	f000 8088 	beq.w	8000a04 <__aeabi_ddiv+0x144>
 80008f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008fc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000900:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000904:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000908:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800090c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000910:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000914:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000918:	429d      	cmp	r5, r3
 800091a:	bf08      	it	eq
 800091c:	4296      	cmpeq	r6, r2
 800091e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000922:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000926:	d202      	bcs.n	800092e <__aeabi_ddiv+0x6e>
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	1ab6      	subs	r6, r6, r2
 8000930:	eb65 0503 	sbc.w	r5, r5, r3
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000942:	ebb6 0e02 	subs.w	lr, r6, r2
 8000946:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094a:	bf22      	ittt	cs
 800094c:	1ab6      	subcs	r6, r6, r2
 800094e:	4675      	movcs	r5, lr
 8000950:	ea40 000c 	orrcs.w	r0, r0, ip
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	ea4f 0232 	mov.w	r2, r2, rrx
 800095a:	ebb6 0e02 	subs.w	lr, r6, r2
 800095e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000962:	bf22      	ittt	cs
 8000964:	1ab6      	subcs	r6, r6, r2
 8000966:	4675      	movcs	r5, lr
 8000968:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800096c:	085b      	lsrs	r3, r3, #1
 800096e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000972:	ebb6 0e02 	subs.w	lr, r6, r2
 8000976:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097a:	bf22      	ittt	cs
 800097c:	1ab6      	subcs	r6, r6, r2
 800097e:	4675      	movcs	r5, lr
 8000980:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000984:	085b      	lsrs	r3, r3, #1
 8000986:	ea4f 0232 	mov.w	r2, r2, rrx
 800098a:	ebb6 0e02 	subs.w	lr, r6, r2
 800098e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000992:	bf22      	ittt	cs
 8000994:	1ab6      	subcs	r6, r6, r2
 8000996:	4675      	movcs	r5, lr
 8000998:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800099c:	ea55 0e06 	orrs.w	lr, r5, r6
 80009a0:	d018      	beq.n	80009d4 <__aeabi_ddiv+0x114>
 80009a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009b2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009ba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009be:	d1c0      	bne.n	8000942 <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	d10b      	bne.n	80009de <__aeabi_ddiv+0x11e>
 80009c6:	ea41 0100 	orr.w	r1, r1, r0
 80009ca:	f04f 0000 	mov.w	r0, #0
 80009ce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009d2:	e7b6      	b.n	8000942 <__aeabi_ddiv+0x82>
 80009d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d8:	bf04      	itt	eq
 80009da:	4301      	orreq	r1, r0
 80009dc:	2000      	moveq	r0, #0
 80009de:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009e2:	bf88      	it	hi
 80009e4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e8:	f63f aeaf 	bhi.w	800074a <__aeabi_dmul+0xde>
 80009ec:	ebb5 0c03 	subs.w	ip, r5, r3
 80009f0:	bf04      	itt	eq
 80009f2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009fa:	f150 0000 	adcs.w	r0, r0, #0
 80009fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a02:	bd70      	pop	{r4, r5, r6, pc}
 8000a04:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a08:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a0c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a10:	bfc2      	ittt	gt
 8000a12:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a1a:	bd70      	popgt	{r4, r5, r6, pc}
 8000a1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a20:	f04f 0e00 	mov.w	lr, #0
 8000a24:	3c01      	subs	r4, #1
 8000a26:	e690      	b.n	800074a <__aeabi_dmul+0xde>
 8000a28:	ea45 0e06 	orr.w	lr, r5, r6
 8000a2c:	e68d      	b.n	800074a <__aeabi_dmul+0xde>
 8000a2e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a32:	ea94 0f0c 	teq	r4, ip
 8000a36:	bf08      	it	eq
 8000a38:	ea95 0f0c 	teqeq	r5, ip
 8000a3c:	f43f af3b 	beq.w	80008b6 <__aeabi_dmul+0x24a>
 8000a40:	ea94 0f0c 	teq	r4, ip
 8000a44:	d10a      	bne.n	8000a5c <__aeabi_ddiv+0x19c>
 8000a46:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a4a:	f47f af34 	bne.w	80008b6 <__aeabi_dmul+0x24a>
 8000a4e:	ea95 0f0c 	teq	r5, ip
 8000a52:	f47f af25 	bne.w	80008a0 <__aeabi_dmul+0x234>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e72c      	b.n	80008b6 <__aeabi_dmul+0x24a>
 8000a5c:	ea95 0f0c 	teq	r5, ip
 8000a60:	d106      	bne.n	8000a70 <__aeabi_ddiv+0x1b0>
 8000a62:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a66:	f43f aefd 	beq.w	8000864 <__aeabi_dmul+0x1f8>
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	e722      	b.n	80008b6 <__aeabi_dmul+0x24a>
 8000a70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a74:	bf18      	it	ne
 8000a76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a7a:	f47f aec5 	bne.w	8000808 <__aeabi_dmul+0x19c>
 8000a7e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a82:	f47f af0d 	bne.w	80008a0 <__aeabi_dmul+0x234>
 8000a86:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a8a:	f47f aeeb 	bne.w	8000864 <__aeabi_dmul+0x1f8>
 8000a8e:	e712      	b.n	80008b6 <__aeabi_dmul+0x24a>

08000a90 <__gedf2>:
 8000a90:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a94:	e006      	b.n	8000aa4 <__cmpdf2+0x4>
 8000a96:	bf00      	nop

08000a98 <__ledf2>:
 8000a98:	f04f 0c01 	mov.w	ip, #1
 8000a9c:	e002      	b.n	8000aa4 <__cmpdf2+0x4>
 8000a9e:	bf00      	nop

08000aa0 <__cmpdf2>:
 8000aa0:	f04f 0c01 	mov.w	ip, #1
 8000aa4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	bf18      	it	ne
 8000ab6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aba:	d01b      	beq.n	8000af4 <__cmpdf2+0x54>
 8000abc:	b001      	add	sp, #4
 8000abe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ac2:	bf0c      	ite	eq
 8000ac4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac8:	ea91 0f03 	teqne	r1, r3
 8000acc:	bf02      	ittt	eq
 8000ace:	ea90 0f02 	teqeq	r0, r2
 8000ad2:	2000      	moveq	r0, #0
 8000ad4:	4770      	bxeq	lr
 8000ad6:	f110 0f00 	cmn.w	r0, #0
 8000ada:	ea91 0f03 	teq	r1, r3
 8000ade:	bf58      	it	pl
 8000ae0:	4299      	cmppl	r1, r3
 8000ae2:	bf08      	it	eq
 8000ae4:	4290      	cmpeq	r0, r2
 8000ae6:	bf2c      	ite	cs
 8000ae8:	17d8      	asrcs	r0, r3, #31
 8000aea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aee:	f040 0001 	orr.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__cmpdf2+0x64>
 8000afe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b02:	d107      	bne.n	8000b14 <__cmpdf2+0x74>
 8000b04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b0c:	d1d6      	bne.n	8000abc <__cmpdf2+0x1c>
 8000b0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b12:	d0d3      	beq.n	8000abc <__cmpdf2+0x1c>
 8000b14:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_cdrcmple>:
 8000b1c:	4684      	mov	ip, r0
 8000b1e:	4610      	mov	r0, r2
 8000b20:	4662      	mov	r2, ip
 8000b22:	468c      	mov	ip, r1
 8000b24:	4619      	mov	r1, r3
 8000b26:	4663      	mov	r3, ip
 8000b28:	e000      	b.n	8000b2c <__aeabi_cdcmpeq>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_cdcmpeq>:
 8000b2c:	b501      	push	{r0, lr}
 8000b2e:	f7ff ffb7 	bl	8000aa0 <__cmpdf2>
 8000b32:	2800      	cmp	r0, #0
 8000b34:	bf48      	it	mi
 8000b36:	f110 0f00 	cmnmi.w	r0, #0
 8000b3a:	bd01      	pop	{r0, pc}

08000b3c <__aeabi_dcmpeq>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff fff4 	bl	8000b2c <__aeabi_cdcmpeq>
 8000b44:	bf0c      	ite	eq
 8000b46:	2001      	moveq	r0, #1
 8000b48:	2000      	movne	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmplt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffea 	bl	8000b2c <__aeabi_cdcmpeq>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmple>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffe0 	bl	8000b2c <__aeabi_cdcmpeq>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpge>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffce 	bl	8000b1c <__aeabi_cdrcmple>
 8000b80:	bf94      	ite	ls
 8000b82:	2001      	movls	r0, #1
 8000b84:	2000      	movhi	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpgt>:
 8000b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b90:	f7ff ffc4 	bl	8000b1c <__aeabi_cdrcmple>
 8000b94:	bf34      	ite	cc
 8000b96:	2001      	movcc	r0, #1
 8000b98:	2000      	movcs	r0, #0
 8000b9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_dcmpun>:
 8000ba0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d102      	bne.n	8000bb0 <__aeabi_dcmpun+0x10>
 8000baa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bae:	d10a      	bne.n	8000bc6 <__aeabi_dcmpun+0x26>
 8000bb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb8:	d102      	bne.n	8000bc0 <__aeabi_dcmpun+0x20>
 8000bba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_dcmpun+0x26>
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0001 	mov.w	r0, #1
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2iz>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd4:	d215      	bcs.n	8000c02 <__aeabi_d2iz+0x36>
 8000bd6:	d511      	bpl.n	8000bfc <__aeabi_d2iz+0x30>
 8000bd8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bdc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be0:	d912      	bls.n	8000c08 <__aeabi_d2iz+0x3c>
 8000be2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf6:	bf18      	it	ne
 8000bf8:	4240      	negne	r0, r0
 8000bfa:	4770      	bx	lr
 8000bfc:	f04f 0000 	mov.w	r0, #0
 8000c00:	4770      	bx	lr
 8000c02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c06:	d105      	bne.n	8000c14 <__aeabi_d2iz+0x48>
 8000c08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	bf08      	it	eq
 8000c0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c12:	4770      	bx	lr
 8000c14:	f04f 0000 	mov.w	r0, #0
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_d2f>:
 8000c1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c24:	bf24      	itt	cs
 8000c26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2e:	d90d      	bls.n	8000c4c <__aeabi_d2f+0x30>
 8000c30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c44:	bf08      	it	eq
 8000c46:	f020 0001 	biceq.w	r0, r0, #1
 8000c4a:	4770      	bx	lr
 8000c4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c50:	d121      	bne.n	8000c96 <__aeabi_d2f+0x7a>
 8000c52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c56:	bfbc      	itt	lt
 8000c58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	4770      	bxlt	lr
 8000c5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c66:	f1c2 0218 	rsb	r2, r2, #24
 8000c6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c72:	fa20 f002 	lsr.w	r0, r0, r2
 8000c76:	bf18      	it	ne
 8000c78:	f040 0001 	orrne.w	r0, r0, #1
 8000c7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c88:	ea40 000c 	orr.w	r0, r0, ip
 8000c8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c94:	e7cc      	b.n	8000c30 <__aeabi_d2f+0x14>
 8000c96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c9a:	d107      	bne.n	8000cac <__aeabi_d2f+0x90>
 8000c9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ca0:	bf1e      	ittt	ne
 8000ca2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000caa:	4770      	bxne	lr
 8000cac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <__aeabi_uldivmod>:
 8000cbc:	b953      	cbnz	r3, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cbe:	b94a      	cbnz	r2, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cc0:	2900      	cmp	r1, #0
 8000cc2:	bf08      	it	eq
 8000cc4:	2800      	cmpeq	r0, #0
 8000cc6:	bf1c      	itt	ne
 8000cc8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ccc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cd0:	f7ff bb0e 	b.w	80002f0 <__aeabi_idiv0>
 8000cd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cdc:	f000 f806 	bl	8000cec <__udivmoddi4>
 8000ce0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce8:	b004      	add	sp, #16
 8000cea:	4770      	bx	lr

08000cec <__udivmoddi4>:
 8000cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf0:	9d08      	ldr	r5, [sp, #32]
 8000cf2:	4604      	mov	r4, r0
 8000cf4:	468e      	mov	lr, r1
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d14d      	bne.n	8000d96 <__udivmoddi4+0xaa>
 8000cfa:	428a      	cmp	r2, r1
 8000cfc:	4694      	mov	ip, r2
 8000cfe:	d969      	bls.n	8000dd4 <__udivmoddi4+0xe8>
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	b152      	cbz	r2, 8000d1c <__udivmoddi4+0x30>
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	f1c2 0120 	rsb	r1, r2, #32
 8000d0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000d12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d16:	ea41 0e03 	orr.w	lr, r1, r3
 8000d1a:	4094      	lsls	r4, r2
 8000d1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d20:	0c21      	lsrs	r1, r4, #16
 8000d22:	fbbe f6f8 	udiv	r6, lr, r8
 8000d26:	fa1f f78c 	uxth.w	r7, ip
 8000d2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000d2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d32:	fb06 f107 	mul.w	r1, r6, r7
 8000d36:	4299      	cmp	r1, r3
 8000d38:	d90a      	bls.n	8000d50 <__udivmoddi4+0x64>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d42:	f080 811f 	bcs.w	8000f84 <__udivmoddi4+0x298>
 8000d46:	4299      	cmp	r1, r3
 8000d48:	f240 811c 	bls.w	8000f84 <__udivmoddi4+0x298>
 8000d4c:	3e02      	subs	r6, #2
 8000d4e:	4463      	add	r3, ip
 8000d50:	1a5b      	subs	r3, r3, r1
 8000d52:	b2a4      	uxth	r4, r4
 8000d54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d58:	fb08 3310 	mls	r3, r8, r0, r3
 8000d5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d60:	fb00 f707 	mul.w	r7, r0, r7
 8000d64:	42a7      	cmp	r7, r4
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x92>
 8000d68:	eb1c 0404 	adds.w	r4, ip, r4
 8000d6c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d70:	f080 810a 	bcs.w	8000f88 <__udivmoddi4+0x29c>
 8000d74:	42a7      	cmp	r7, r4
 8000d76:	f240 8107 	bls.w	8000f88 <__udivmoddi4+0x29c>
 8000d7a:	4464      	add	r4, ip
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d82:	1be4      	subs	r4, r4, r7
 8000d84:	2600      	movs	r6, #0
 8000d86:	b11d      	cbz	r5, 8000d90 <__udivmoddi4+0xa4>
 8000d88:	40d4      	lsrs	r4, r2
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d909      	bls.n	8000dae <__udivmoddi4+0xc2>
 8000d9a:	2d00      	cmp	r5, #0
 8000d9c:	f000 80ef 	beq.w	8000f7e <__udivmoddi4+0x292>
 8000da0:	2600      	movs	r6, #0
 8000da2:	e9c5 0100 	strd	r0, r1, [r5]
 8000da6:	4630      	mov	r0, r6
 8000da8:	4631      	mov	r1, r6
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	fab3 f683 	clz	r6, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d14a      	bne.n	8000e4c <__udivmoddi4+0x160>
 8000db6:	428b      	cmp	r3, r1
 8000db8:	d302      	bcc.n	8000dc0 <__udivmoddi4+0xd4>
 8000dba:	4282      	cmp	r2, r0
 8000dbc:	f200 80f9 	bhi.w	8000fb2 <__udivmoddi4+0x2c6>
 8000dc0:	1a84      	subs	r4, r0, r2
 8000dc2:	eb61 0303 	sbc.w	r3, r1, r3
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	469e      	mov	lr, r3
 8000dca:	2d00      	cmp	r5, #0
 8000dcc:	d0e0      	beq.n	8000d90 <__udivmoddi4+0xa4>
 8000dce:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dd2:	e7dd      	b.n	8000d90 <__udivmoddi4+0xa4>
 8000dd4:	b902      	cbnz	r2, 8000dd8 <__udivmoddi4+0xec>
 8000dd6:	deff      	udf	#255	; 0xff
 8000dd8:	fab2 f282 	clz	r2, r2
 8000ddc:	2a00      	cmp	r2, #0
 8000dde:	f040 8092 	bne.w	8000f06 <__udivmoddi4+0x21a>
 8000de2:	eba1 010c 	sub.w	r1, r1, ip
 8000de6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dea:	fa1f fe8c 	uxth.w	lr, ip
 8000dee:	2601      	movs	r6, #1
 8000df0:	0c20      	lsrs	r0, r4, #16
 8000df2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000df6:	fb07 1113 	mls	r1, r7, r3, r1
 8000dfa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfe:	fb0e f003 	mul.w	r0, lr, r3
 8000e02:	4288      	cmp	r0, r1
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x12c>
 8000e06:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0x12a>
 8000e10:	4288      	cmp	r0, r1
 8000e12:	f200 80cb 	bhi.w	8000fac <__udivmoddi4+0x2c0>
 8000e16:	4643      	mov	r3, r8
 8000e18:	1a09      	subs	r1, r1, r0
 8000e1a:	b2a4      	uxth	r4, r4
 8000e1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e20:	fb07 1110 	mls	r1, r7, r0, r1
 8000e24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e28:	fb0e fe00 	mul.w	lr, lr, r0
 8000e2c:	45a6      	cmp	lr, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x156>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x154>
 8000e3a:	45a6      	cmp	lr, r4
 8000e3c:	f200 80bb 	bhi.w	8000fb6 <__udivmoddi4+0x2ca>
 8000e40:	4608      	mov	r0, r1
 8000e42:	eba4 040e 	sub.w	r4, r4, lr
 8000e46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e4a:	e79c      	b.n	8000d86 <__udivmoddi4+0x9a>
 8000e4c:	f1c6 0720 	rsb	r7, r6, #32
 8000e50:	40b3      	lsls	r3, r6
 8000e52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000e5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e62:	431c      	orrs	r4, r3
 8000e64:	40f9      	lsrs	r1, r7
 8000e66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000e6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e72:	0c20      	lsrs	r0, r4, #16
 8000e74:	fa1f fe8c 	uxth.w	lr, ip
 8000e78:	fb09 1118 	mls	r1, r9, r8, r1
 8000e7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e80:	fb08 f00e 	mul.w	r0, r8, lr
 8000e84:	4288      	cmp	r0, r1
 8000e86:	fa02 f206 	lsl.w	r2, r2, r6
 8000e8a:	d90b      	bls.n	8000ea4 <__udivmoddi4+0x1b8>
 8000e8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e90:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e94:	f080 8088 	bcs.w	8000fa8 <__udivmoddi4+0x2bc>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f240 8085 	bls.w	8000fa8 <__udivmoddi4+0x2bc>
 8000e9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea2:	4461      	add	r1, ip
 8000ea4:	1a09      	subs	r1, r1, r0
 8000ea6:	b2a4      	uxth	r4, r4
 8000ea8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eac:	fb09 1110 	mls	r1, r9, r0, r1
 8000eb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb8:	458e      	cmp	lr, r1
 8000eba:	d908      	bls.n	8000ece <__udivmoddi4+0x1e2>
 8000ebc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ec4:	d26c      	bcs.n	8000fa0 <__udivmoddi4+0x2b4>
 8000ec6:	458e      	cmp	lr, r1
 8000ec8:	d96a      	bls.n	8000fa0 <__udivmoddi4+0x2b4>
 8000eca:	3802      	subs	r0, #2
 8000ecc:	4461      	add	r1, ip
 8000ece:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ed2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ed6:	eba1 010e 	sub.w	r1, r1, lr
 8000eda:	42a1      	cmp	r1, r4
 8000edc:	46c8      	mov	r8, r9
 8000ede:	46a6      	mov	lr, r4
 8000ee0:	d356      	bcc.n	8000f90 <__udivmoddi4+0x2a4>
 8000ee2:	d053      	beq.n	8000f8c <__udivmoddi4+0x2a0>
 8000ee4:	b15d      	cbz	r5, 8000efe <__udivmoddi4+0x212>
 8000ee6:	ebb3 0208 	subs.w	r2, r3, r8
 8000eea:	eb61 010e 	sbc.w	r1, r1, lr
 8000eee:	fa01 f707 	lsl.w	r7, r1, r7
 8000ef2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ef6:	40f1      	lsrs	r1, r6
 8000ef8:	431f      	orrs	r7, r3
 8000efa:	e9c5 7100 	strd	r7, r1, [r5]
 8000efe:	2600      	movs	r6, #0
 8000f00:	4631      	mov	r1, r6
 8000f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f06:	f1c2 0320 	rsb	r3, r2, #32
 8000f0a:	40d8      	lsrs	r0, r3
 8000f0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f10:	fa21 f303 	lsr.w	r3, r1, r3
 8000f14:	4091      	lsls	r1, r2
 8000f16:	4301      	orrs	r1, r0
 8000f18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f1c:	fa1f fe8c 	uxth.w	lr, ip
 8000f20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f24:	fb07 3610 	mls	r6, r7, r0, r3
 8000f28:	0c0b      	lsrs	r3, r1, #16
 8000f2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000f32:	429e      	cmp	r6, r3
 8000f34:	fa04 f402 	lsl.w	r4, r4, r2
 8000f38:	d908      	bls.n	8000f4c <__udivmoddi4+0x260>
 8000f3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f42:	d22f      	bcs.n	8000fa4 <__udivmoddi4+0x2b8>
 8000f44:	429e      	cmp	r6, r3
 8000f46:	d92d      	bls.n	8000fa4 <__udivmoddi4+0x2b8>
 8000f48:	3802      	subs	r0, #2
 8000f4a:	4463      	add	r3, ip
 8000f4c:	1b9b      	subs	r3, r3, r6
 8000f4e:	b289      	uxth	r1, r1
 8000f50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f54:	fb07 3316 	mls	r3, r7, r6, r3
 8000f58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000f60:	428b      	cmp	r3, r1
 8000f62:	d908      	bls.n	8000f76 <__udivmoddi4+0x28a>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f6c:	d216      	bcs.n	8000f9c <__udivmoddi4+0x2b0>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d914      	bls.n	8000f9c <__udivmoddi4+0x2b0>
 8000f72:	3e02      	subs	r6, #2
 8000f74:	4461      	add	r1, ip
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f7c:	e738      	b.n	8000df0 <__udivmoddi4+0x104>
 8000f7e:	462e      	mov	r6, r5
 8000f80:	4628      	mov	r0, r5
 8000f82:	e705      	b.n	8000d90 <__udivmoddi4+0xa4>
 8000f84:	4606      	mov	r6, r0
 8000f86:	e6e3      	b.n	8000d50 <__udivmoddi4+0x64>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6f8      	b.n	8000d7e <__udivmoddi4+0x92>
 8000f8c:	454b      	cmp	r3, r9
 8000f8e:	d2a9      	bcs.n	8000ee4 <__udivmoddi4+0x1f8>
 8000f90:	ebb9 0802 	subs.w	r8, r9, r2
 8000f94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f98:	3801      	subs	r0, #1
 8000f9a:	e7a3      	b.n	8000ee4 <__udivmoddi4+0x1f8>
 8000f9c:	4646      	mov	r6, r8
 8000f9e:	e7ea      	b.n	8000f76 <__udivmoddi4+0x28a>
 8000fa0:	4620      	mov	r0, r4
 8000fa2:	e794      	b.n	8000ece <__udivmoddi4+0x1e2>
 8000fa4:	4640      	mov	r0, r8
 8000fa6:	e7d1      	b.n	8000f4c <__udivmoddi4+0x260>
 8000fa8:	46d0      	mov	r8, sl
 8000faa:	e77b      	b.n	8000ea4 <__udivmoddi4+0x1b8>
 8000fac:	3b02      	subs	r3, #2
 8000fae:	4461      	add	r1, ip
 8000fb0:	e732      	b.n	8000e18 <__udivmoddi4+0x12c>
 8000fb2:	4630      	mov	r0, r6
 8000fb4:	e709      	b.n	8000dca <__udivmoddi4+0xde>
 8000fb6:	4464      	add	r4, ip
 8000fb8:	3802      	subs	r0, #2
 8000fba:	e742      	b.n	8000e42 <__udivmoddi4+0x156>
 8000fbc:	0000      	movs	r0, r0
	...

08000fc0 <UWB_pdoa>:
uint8_t pdoa_message_data[40]; // Will hold the data to send to the virtual COM
//static uint8_t rx_buffer[FRAME_LEN_MAX];
/**
 * Application entry point.
 */
int UWB_pdoa(void){
 8000fc0:	b5b0      	push	{r4, r5, r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af04      	add	r7, sp, #16

    uint32_t dev_id;
    uint16_t frame_len;

    unsigned char car_f = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	73fb      	strb	r3, [r7, #15]
    unsigned char tli_f = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	73bb      	strb	r3, [r7, #14]


    /* Sends application name to test_run_info function. */

    port_set_dw_ic_spi_fastrate();
 8000fce:	f000 fce9 	bl	80019a4 <port_set_dw_ic_spi_fastrate>

    /* Reset DW IC */
    reset_DWIC(); /* Target specific drive of RSTn line into DW IC low for a period. */
 8000fd2:	f000 fc67 	bl	80018a4 <reset_DWIC>

    Sleep(2); // Time needed for DW3000 to start up (transition from INIT_RC to IDLE_RC
 8000fd6:	2002      	movs	r0, #2
 8000fd8:	f000 fc38 	bl	800184c <Sleep>

    /* Probe for the correct device driver. */
    dwt_probe((struct dwt_probe_s *)&dw3000_probe_interf);
 8000fdc:	488e      	ldr	r0, [pc, #568]	; (8001218 <UWB_pdoa+0x258>)
 8000fde:	f004 f941 	bl	8005264 <dwt_probe>

    dev_id = dwt_readdevid();
 8000fe2:	f004 f98b 	bl	80052fc <dwt_readdevid>
 8000fe6:	60b8      	str	r0, [r7, #8]


    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */ { };
 8000fe8:	bf00      	nop
 8000fea:	f004 fa93 	bl	8005514 <dwt_checkidlerc>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d0fa      	beq.n	8000fea <UWB_pdoa+0x2a>

    if (dwt_initialise(DWT_DW_IDLE) == DWT_ERROR)
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f004 f9a1 	bl	800533c <dwt_initialise>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001000:	d103      	bne.n	800100a <UWB_pdoa+0x4a>
    {
        test_run_info((unsigned char *)"INIT FAILED");
 8001002:	4886      	ldr	r0, [pc, #536]	; (800121c <UWB_pdoa+0x25c>)
 8001004:	f000 fd9c 	bl	8001b40 <test_run_info>
        while (1) { };
 8001008:	e7fe      	b.n	8001008 <UWB_pdoa+0x48>
    }

    /* Configure DW3000. */
    /* if the dwt_configure returns DWT_ERROR either the PLL or RX calibration has failed the host should reset the device */
    if (dwt_configure(&config_PDOA))
 800100a:	4885      	ldr	r0, [pc, #532]	; (8001220 <UWB_pdoa+0x260>)
 800100c:	f004 f9a2 	bl	8005354 <dwt_configure>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <UWB_pdoa+0x5e>
    {
        test_run_info((unsigned char *)"CONFIG FAILED     ");
 8001016:	4883      	ldr	r0, [pc, #524]	; (8001224 <UWB_pdoa+0x264>)
 8001018:	f000 fd92 	bl	8001b40 <test_run_info>
        while (1) { };
 800101c:	e7fe      	b.n	800101c <UWB_pdoa+0x5c>
    }

    /* Register RX call-back. */
    dwt_setcallbacks(NULL, *rx_ok_cb, *rx_err_cb, *rx_err_cb, NULL, NULL, NULL);
 800101e:	2300      	movs	r3, #0
 8001020:	9302      	str	r3, [sp, #8]
 8001022:	2300      	movs	r3, #0
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	2300      	movs	r3, #0
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	4b7f      	ldr	r3, [pc, #508]	; (8001228 <UWB_pdoa+0x268>)
 800102c:	4a7e      	ldr	r2, [pc, #504]	; (8001228 <UWB_pdoa+0x268>)
 800102e:	497f      	ldr	r1, [pc, #508]	; (800122c <UWB_pdoa+0x26c>)
 8001030:	2000      	movs	r0, #0
 8001032:	f004 fa5d 	bl	80054f0 <dwt_setcallbacks>

    /* Enable wanted interrupts (RX good frames and RX errors). */
    dwt_setinterrupt(DWT_INT_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_ERR, 0, DWT_ENABLE_INT);
 8001036:	2201      	movs	r2, #1
 8001038:	2100      	movs	r1, #0
 800103a:	487d      	ldr	r0, [pc, #500]	; (8001230 <UWB_pdoa+0x270>)
 800103c:	f004 fa88 	bl	8005550 <dwt_setinterrupt>

    /*Clearing the SPI ready interrupt*/
    dwt_writesysstatuslo(DWT_INT_RCINIT_BIT_MASK | DWT_INT_SPIRDY_BIT_MASK);
 8001040:	f04f 70c0 	mov.w	r0, #25165824	; 0x1800000
 8001044:	f004 fafa 	bl	800563c <dwt_writesysstatuslo>

    /* Install DW IC IRQ handler. */
    port_set_dwic_isr(dwt_isr);
 8001048:	487a      	ldr	r0, [pc, #488]	; (8001234 <UWB_pdoa+0x274>)
 800104a:	f000 fcf9 	bl	8001a40 <port_set_dwic_isr>

    /* Activate reception immediately. See NOTE 1 below. */
    dwt_rxenable(DWT_START_RX_IMMEDIATE);
 800104e:	2000      	movs	r0, #0
 8001050:	f004 fa30 	bl	80054b4 <dwt_rxenable>

    dwt_setleds(DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK);
 8001054:	2003      	movs	r0, #3
 8001056:	f004 fadf 	bl	8005618 <dwt_setleds>
    /*loop forever receiving frames*/

    while (!(tli_f && car_f)){
 800105a:	e0c5      	b.n	80011e8 <UWB_pdoa+0x228>

    	int goodSts = 0; /* Used for checking STS quality in received signal */
 800105c:	2300      	movs	r3, #0
 800105e:	607b      	str	r3, [r7, #4]
    	int16_t stsQual; /* This will contain STS quality index */

    	    // Checking STS quality and STS status. See note 4
    	if (((goodSts = dwt_readstsquality(&stsQual)) >= 0)){
 8001060:	463b      	mov	r3, r7
 8001062:	4618      	mov	r0, r3
 8001064:	f004 faca 	bl	80055fc <dwt_readstsquality>
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	db05      	blt.n	800107c <UWB_pdoa+0xbc>
    	        pdoa_val = dwt_readpdoa();
 8001070:	f004 f9ec 	bl	800544c <dwt_readpdoa>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	4b6f      	ldr	r3, [pc, #444]	; (8001238 <UWB_pdoa+0x278>)
 800107a:	801a      	strh	r2, [r3, #0]
    	    }

    	memset(rx_buffer2, 0, sizeof(rx_buffer2)); //meg_rx
 800107c:	227f      	movs	r2, #127	; 0x7f
 800107e:	2100      	movs	r1, #0
 8001080:	486e      	ldr	r0, [pc, #440]	; (800123c <UWB_pdoa+0x27c>)
 8001082:	f012 fe63 	bl	8013d4c <memset>
    	dwt_rxenable(DWT_START_RX_IMMEDIATE);
 8001086:	2000      	movs	r0, #0
 8001088:	f004 fa14 	bl	80054b4 <dwt_rxenable>
    	frame_len = dwt_getframelength();
 800108c:	f004 fb0c 	bl	80056a8 <dwt_getframelength>
 8001090:	4603      	mov	r3, r0
 8001092:	807b      	strh	r3, [r7, #2]

    	if (frame_len <= FRAME_LEN_MAX){
 8001094:	887b      	ldrh	r3, [r7, #2]
 8001096:	2b7f      	cmp	r3, #127	; 0x7f
 8001098:	d807      	bhi.n	80010aa <UWB_pdoa+0xea>

    		dwt_readrxdata(rx_buffer2, frame_len - FCS_LEN, 0); /* No need to read the FCS/CRC. */
 800109a:	887b      	ldrh	r3, [r7, #2]
 800109c:	3b02      	subs	r3, #2
 800109e:	b29b      	uxth	r3, r3
 80010a0:	2200      	movs	r2, #0
 80010a2:	4619      	mov	r1, r3
 80010a4:	4865      	ldr	r0, [pc, #404]	; (800123c <UWB_pdoa+0x27c>)
 80010a6:	f004 fa87 	bl	80055b8 <dwt_readrxdata>
		}

		/* Clear good RX frame event in the DW IC status register. */
		dwt_writesysstatuslo(DWT_INT_RXFCG_BIT_MASK);
 80010aa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80010ae:	f004 fac5 	bl	800563c <dwt_writesysstatuslo>


        if ((last_pdoa_val != pdoa_val)&&(pdoa_val != 0)){
 80010b2:	4b63      	ldr	r3, [pc, #396]	; (8001240 <UWB_pdoa+0x280>)
 80010b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010b8:	4b5f      	ldr	r3, [pc, #380]	; (8001238 <UWB_pdoa+0x278>)
 80010ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010be:	429a      	cmp	r2, r3
 80010c0:	f000 8092 	beq.w	80011e8 <UWB_pdoa+0x228>
 80010c4:	4b5c      	ldr	r3, [pc, #368]	; (8001238 <UWB_pdoa+0x278>)
 80010c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f000 808c 	beq.w	80011e8 <UWB_pdoa+0x228>

    		last_pdoa_val = pdoa_val;
 80010d0:	4b59      	ldr	r3, [pc, #356]	; (8001238 <UWB_pdoa+0x278>)
 80010d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010d6:	4b5a      	ldr	r3, [pc, #360]	; (8001240 <UWB_pdoa+0x280>)
 80010d8:	801a      	strh	r2, [r3, #0]

    		pdoa_deg  = ((float)last_pdoa_val / (1 << 11)) * 180 / M_PI;
 80010da:	4b59      	ldr	r3, [pc, #356]	; (8001240 <UWB_pdoa+0x280>)
 80010dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e0:	ee07 3a90 	vmov	s15, r3
 80010e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010e8:	eddf 6a56 	vldr	s13, [pc, #344]	; 8001244 <UWB_pdoa+0x284>
 80010ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010f0:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8001248 <UWB_pdoa+0x288>
 80010f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010f8:	ee17 0a90 	vmov	r0, s15
 80010fc:	f7ff fa5e 	bl	80005bc <__aeabi_f2d>
 8001100:	a341      	add	r3, pc, #260	; (adr r3, 8001208 <UWB_pdoa+0x248>)
 8001102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001106:	f7ff fbdb 	bl	80008c0 <__aeabi_ddiv>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4610      	mov	r0, r2
 8001110:	4619      	mov	r1, r3
 8001112:	f7ff fd83 	bl	8000c1c <__aeabi_d2f>
 8001116:	4603      	mov	r3, r0
 8001118:	4a4c      	ldr	r2, [pc, #304]	; (800124c <UWB_pdoa+0x28c>)
 800111a:	6013      	str	r3, [r2, #0]
    		pdoa_deg = fmod(pdoa_deg - pdoa_interval_shift + 540.0f, 360.0f) + pdoa_interval_shift - 180.0f;
 800111c:	4b4b      	ldr	r3, [pc, #300]	; (800124c <UWB_pdoa+0x28c>)
 800111e:	edd3 7a00 	vldr	s15, [r3]
 8001122:	eebb 7a06 	vmov.f32	s14, #182	; 0xc1b00000 -22.0
 8001126:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800112a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8001250 <UWB_pdoa+0x290>
 800112e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001132:	ee17 0a90 	vmov	r0, s15
 8001136:	f7ff fa41 	bl	80005bc <__aeabi_f2d>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	ed9f 1b34 	vldr	d1, [pc, #208]	; 8001210 <UWB_pdoa+0x250>
 8001142:	ec43 2b10 	vmov	d0, r2, r3
 8001146:	f014 fcab 	bl	8015aa0 <fmod>
 800114a:	ec55 4b10 	vmov	r4, r5, d0
 800114e:	4b41      	ldr	r3, [pc, #260]	; (8001254 <UWB_pdoa+0x294>)
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fa33 	bl	80005bc <__aeabi_f2d>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4620      	mov	r0, r4
 800115c:	4629      	mov	r1, r5
 800115e:	f7ff f8cf 	bl	8000300 <__adddf3>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4610      	mov	r0, r2
 8001168:	4619      	mov	r1, r3
 800116a:	f04f 0200 	mov.w	r2, #0
 800116e:	4b3a      	ldr	r3, [pc, #232]	; (8001258 <UWB_pdoa+0x298>)
 8001170:	f7ff f8c4 	bl	80002fc <__aeabi_dsub>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4610      	mov	r0, r2
 800117a:	4619      	mov	r1, r3
 800117c:	f7ff fd4e 	bl	8000c1c <__aeabi_d2f>
 8001180:	4603      	mov	r3, r0
 8001182:	4a32      	ldr	r2, [pc, #200]	; (800124c <UWB_pdoa+0x28c>)
 8001184:	6013      	str	r3, [r2, #0]


            if (rx_buffer2[2] == 'T' && tli_f == 0){
 8001186:	4b2d      	ldr	r3, [pc, #180]	; (800123c <UWB_pdoa+0x27c>)
 8001188:	789b      	ldrb	r3, [r3, #2]
 800118a:	2b54      	cmp	r3, #84	; 0x54
 800118c:	d118      	bne.n	80011c0 <UWB_pdoa+0x200>
 800118e:	7bbb      	ldrb	r3, [r7, #14]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d115      	bne.n	80011c0 <UWB_pdoa+0x200>
            	sprintf((char *)&data_rx.T_pdoa, "%d", (int)pdoa_deg);
 8001194:	4b2d      	ldr	r3, [pc, #180]	; (800124c <UWB_pdoa+0x28c>)
 8001196:	edd3 7a00 	vldr	s15, [r3]
 800119a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800119e:	ee17 2a90 	vmov	r2, s15
 80011a2:	492e      	ldr	r1, [pc, #184]	; (800125c <UWB_pdoa+0x29c>)
 80011a4:	482e      	ldr	r0, [pc, #184]	; (8001260 <UWB_pdoa+0x2a0>)
 80011a6:	f014 fa1b 	bl	80155e0 <siprintf>
            	data_rx.T_data[0] = (unsigned char)rx_buffer2[9];
 80011aa:	4b24      	ldr	r3, [pc, #144]	; (800123c <UWB_pdoa+0x27c>)
 80011ac:	7a5a      	ldrb	r2, [r3, #9]
 80011ae:	4b2d      	ldr	r3, [pc, #180]	; (8001264 <UWB_pdoa+0x2a4>)
 80011b0:	765a      	strb	r2, [r3, #25]
            	data_rx.T_time[0] = (unsigned char)rx_buffer2[8];
 80011b2:	4b22      	ldr	r3, [pc, #136]	; (800123c <UWB_pdoa+0x27c>)
 80011b4:	7a1a      	ldrb	r2, [r3, #8]
 80011b6:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <UWB_pdoa+0x2a4>)
 80011b8:	76da      	strb	r2, [r3, #27]
            	tli_f = 1;
 80011ba:	2301      	movs	r3, #1
 80011bc:	73bb      	strb	r3, [r7, #14]
 80011be:	e013      	b.n	80011e8 <UWB_pdoa+0x228>

//            	test_run_info((unsigned char *)&rx_buffer2 + 9);
            }
            else if (rx_buffer2[2] == 'D' && car_f == 0){
 80011c0:	4b1e      	ldr	r3, [pc, #120]	; (800123c <UWB_pdoa+0x27c>)
 80011c2:	789b      	ldrb	r3, [r3, #2]
 80011c4:	2b44      	cmp	r3, #68	; 0x44
 80011c6:	d10f      	bne.n	80011e8 <UWB_pdoa+0x228>
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d10c      	bne.n	80011e8 <UWB_pdoa+0x228>
            	sprintf((char *)&data_rx.C_pdoa, "%d", (int)pdoa_deg);
 80011ce:	4b1f      	ldr	r3, [pc, #124]	; (800124c <UWB_pdoa+0x28c>)
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011d8:	ee17 2a90 	vmov	r2, s15
 80011dc:	491f      	ldr	r1, [pc, #124]	; (800125c <UWB_pdoa+0x29c>)
 80011de:	4822      	ldr	r0, [pc, #136]	; (8001268 <UWB_pdoa+0x2a8>)
 80011e0:	f014 f9fe 	bl	80155e0 <siprintf>
            	car_f = 1;
 80011e4:	2301      	movs	r3, #1
 80011e6:	73fb      	strb	r3, [r7, #15]
    while (!(tli_f && car_f)){
 80011e8:	7bbb      	ldrb	r3, [r7, #14]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f43f af36 	beq.w	800105c <UWB_pdoa+0x9c>
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f43f af32 	beq.w	800105c <UWB_pdoa+0x9c>
            }
        }
    }
    return DWT_SUCCESS;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bdb0      	pop	{r4, r5, r7, pc}
 8001202:	bf00      	nop
 8001204:	f3af 8000 	nop.w
 8001208:	54442d18 	.word	0x54442d18
 800120c:	400921fb 	.word	0x400921fb
 8001210:	00000000 	.word	0x00000000
 8001214:	40768000 	.word	0x40768000
 8001218:	08015c40 	.word	0x08015c40
 800121c:	08015b48 	.word	0x08015b48
 8001220:	20000000 	.word	0x20000000
 8001224:	08015b54 	.word	0x08015b54
 8001228:	080012a9 	.word	0x080012a9
 800122c:	0800126d 	.word	0x0800126d
 8001230:	3405d000 	.word	0x3405d000
 8001234:	0800553d 	.word	0x0800553d
 8001238:	2000000e 	.word	0x2000000e
 800123c:	20000270 	.word	0x20000270
 8001240:	200002f0 	.word	0x200002f0
 8001244:	45000000 	.word	0x45000000
 8001248:	43340000 	.word	0x43340000
 800124c:	2000026c 	.word	0x2000026c
 8001250:	44070000 	.word	0x44070000
 8001254:	c1b00000 	.word	0xc1b00000
 8001258:	40668000 	.word	0x40668000
 800125c:	08015b68 	.word	0x08015b68
 8001260:	2000025f 	.word	0x2000025f
 8001264:	2000024c 	.word	0x2000024c
 8001268:	20000252 	.word	0x20000252

0800126c <rx_ok_cb>:
 *
 * @param  cb_data  callback data
 *
 * @return  none
 */
static void rx_ok_cb(const dwt_cb_data_t *cb_data){
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]


    int goodSts = 0; /* Used for checking STS quality in received signal */
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
    int16_t stsQual; /* This will contain STS quality index */

    (void)cb_data;
    // Checking STS quality and STS status. See note 4
    if (((goodSts = dwt_readstsquality(&stsQual)) >= 0))
 8001278:	f107 030a 	add.w	r3, r7, #10
 800127c:	4618      	mov	r0, r3
 800127e:	f004 f9bd 	bl	80055fc <dwt_readstsquality>
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2b00      	cmp	r3, #0
 8001288:	db05      	blt.n	8001296 <rx_ok_cb+0x2a>
    {
        pdoa_val = dwt_readpdoa();
 800128a:	f004 f8df 	bl	800544c <dwt_readpdoa>
 800128e:	4603      	mov	r3, r0
 8001290:	461a      	mov	r2, r3
 8001292:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <rx_ok_cb+0x38>)
 8001294:	801a      	strh	r2, [r3, #0]
    }

    dwt_rxenable(DWT_START_RX_IMMEDIATE);
 8001296:	2000      	movs	r0, #0
 8001298:	f004 f90c 	bl	80054b4 <dwt_rxenable>
}
 800129c:	bf00      	nop
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	2000000e 	.word	0x2000000e

080012a8 <rx_err_cb>:
 * @param  cb_data  callback data
 *
 * @return  none
 */
static void rx_err_cb(const dwt_cb_data_t *cb_data)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
    (void)cb_data;
    dwt_rxenable(DWT_START_RX_IMMEDIATE);
 80012b0:	2000      	movs	r0, #0
 80012b2:	f004 f8ff 	bl	80054b4 <dwt_rxenable>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <ss_twr_initiator_RX>:
 *
 * @param  none
 *
 * @return none
 */
int ss_twr_initiator_RX(uint8_t *data){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	; 0x28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]


    /* Display application name on LCD. */

    /* Configure SPI rate, DW3000 supports up to 36 MHz */
    port_set_dw_ic_spi_fastrate();
 80012c8:	f000 fb6c 	bl	80019a4 <port_set_dw_ic_spi_fastrate>

    /* Reset and initialize DW chip. */
    reset_DWIC(); /* Target specific drive of RSTn line into DW3000 low for a period. */
 80012cc:	f000 faea 	bl	80018a4 <reset_DWIC>

    Sleep(2); // Time needed for DW3000 to start up (transition from INIT_RC to IDLE_RC, or could wait for SPIRDY event)
 80012d0:	2002      	movs	r0, #2
 80012d2:	f000 fabb 	bl	800184c <Sleep>

    /* Probe for the correct device driver. */
    dwt_probe((struct dwt_probe_s *)&dw3000_probe_interf);
 80012d6:	487a      	ldr	r0, [pc, #488]	; (80014c0 <ss_twr_initiator_RX+0x200>)
 80012d8:	f003 ffc4 	bl	8005264 <dwt_probe>

    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */ { };
 80012dc:	bf00      	nop
 80012de:	f004 f919 	bl	8005514 <dwt_checkidlerc>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0fa      	beq.n	80012de <ss_twr_initiator_RX+0x1e>
    if (dwt_initialise(DWT_DW_INIT) == DWT_ERROR)
 80012e8:	2000      	movs	r0, #0
 80012ea:	f004 f827 	bl	800533c <dwt_initialise>
 80012ee:	4603      	mov	r3, r0
 80012f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012f4:	d103      	bne.n	80012fe <ss_twr_initiator_RX+0x3e>
    {
        test_run_info((unsigned char *)"INIT FAILED     ");
 80012f6:	4873      	ldr	r0, [pc, #460]	; (80014c4 <ss_twr_initiator_RX+0x204>)
 80012f8:	f000 fc22 	bl	8001b40 <test_run_info>
        while (1) { };
 80012fc:	e7fe      	b.n	80012fc <ss_twr_initiator_RX+0x3c>
    }

    /* Enabling LEDs here for debug so that for each TX the D1 LED will flash on DW3000 red eval-shield boards. */
    dwt_setleds(DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK);
 80012fe:	2003      	movs	r0, #3
 8001300:	f004 f98a 	bl	8005618 <dwt_setleds>

    /* Configure DW IC. See NOTE 13 below. */
    /* if the dwt_configure returns DWT_ERROR either the PLL or RX calibration has failed the host should reset the device */
    if (dwt_configure(&config))
 8001304:	4870      	ldr	r0, [pc, #448]	; (80014c8 <ss_twr_initiator_RX+0x208>)
 8001306:	f004 f825 	bl	8005354 <dwt_configure>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <ss_twr_initiator_RX+0x58>
    {
        test_run_info((unsigned char *)"CONFIG FAILED     ");
 8001310:	486e      	ldr	r0, [pc, #440]	; (80014cc <ss_twr_initiator_RX+0x20c>)
 8001312:	f000 fc15 	bl	8001b40 <test_run_info>
        while (1) { };
 8001316:	e7fe      	b.n	8001316 <ss_twr_initiator_RX+0x56>
    }

    /* Configure the TX spectrum parameters (power, PG delay and PG count) */
    dwt_configuretxrf(&txconfig_options);
 8001318:	486d      	ldr	r0, [pc, #436]	; (80014d0 <ss_twr_initiator_RX+0x210>)
 800131a:	f004 f827 	bl	800536c <dwt_configuretxrf>

    /* Apply default antenna delay value. See NOTE 2 below. */
    dwt_setrxantennadelay(RX_ANT_DLY);
 800131e:	f244 0001 	movw	r0, #16385	; 0x4001
 8001322:	f004 f82f 	bl	8005384 <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
 8001326:	f244 0001 	movw	r0, #16385	; 0x4001
 800132a:	f004 f83d 	bl	80053a8 <dwt_settxantennadelay>

    /* Set expected response's delay and timeout. See NOTE 1 and 5 below.
     * As this example only handles one incoming frame with always the same delay and timeout, those values can be set here once for all. */
    dwt_setrxaftertxdelay(POLL_TX_TO_RESP_RX_DLY_UUS);
 800132e:	20f0      	movs	r0, #240	; 0xf0
 8001330:	f004 f930 	bl	8005594 <dwt_setrxaftertxdelay>
    dwt_setrxtimeout(RESP_RX_TIMEOUT_UUS);
 8001334:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001338:	f004 f8c8 	bl	80054cc <dwt_setrxtimeout>

    /* Next can enable TX/RX states output on GPIOs 5 and 6 to help debug, and also TX/RX LEDs
     * Note, in real low power applications the LEDs should not be used. */
    dwt_setlnapamode(DWT_LNA_ENABLE | DWT_PA_ENABLE);
 800133c:	2003      	movs	r0, #3
 800133e:	f003 ffef 	bl	8005320 <dwt_setlnapamode>

    /* Loop forever initiating ranging exchanges. */
    while (1)
    {
        /* Write frame data to DW IC and prepare transmission. See NOTE 7 below. */
        tx_poll_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8001342:	4b64      	ldr	r3, [pc, #400]	; (80014d4 <ss_twr_initiator_RX+0x214>)
 8001344:	781a      	ldrb	r2, [r3, #0]
 8001346:	4b64      	ldr	r3, [pc, #400]	; (80014d8 <ss_twr_initiator_RX+0x218>)
 8001348:	709a      	strb	r2, [r3, #2]
        dwt_writesysstatuslo(DWT_INT_TXFRS_BIT_MASK);
 800134a:	2080      	movs	r0, #128	; 0x80
 800134c:	f004 f976 	bl	800563c <dwt_writesysstatuslo>
        dwt_writetxdata(sizeof(tx_poll_msg), tx_poll_msg, 0); /* Zero offset in TX buffer. */
 8001350:	2200      	movs	r2, #0
 8001352:	4961      	ldr	r1, [pc, #388]	; (80014d8 <ss_twr_initiator_RX+0x218>)
 8001354:	200c      	movs	r0, #12
 8001356:	f004 f839 	bl	80053cc <dwt_writetxdata>
        dwt_writetxfctrl(sizeof(tx_poll_msg), 0, 1);          /* Zero offset in TX buffer, ranging. */
 800135a:	2201      	movs	r2, #1
 800135c:	2100      	movs	r1, #0
 800135e:	200c      	movs	r0, #12
 8001360:	f004 f842 	bl	80053e8 <dwt_writetxfctrl>

        /* Start transmission, indicating that a response is expected so that reception is enabled automatically after the frame is sent and the delay
         * set by dwt_setrxaftertxdelay() has elapsed. */
        dwt_starttx(DWT_START_TX_IMMEDIATE | DWT_RESPONSE_EXPECTED);
 8001364:	2002      	movs	r0, #2
 8001366:	f004 f84d 	bl	8005404 <dwt_starttx>

        /* We assume that the transmission is achieved correctly, poll for reception of a frame or error/timeout. See NOTE 8 below. */
        waitforsysstatus(&status_reg, NULL, (DWT_INT_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR), 0);
 800136a:	2300      	movs	r3, #0
 800136c:	4a5b      	ldr	r2, [pc, #364]	; (80014dc <ss_twr_initiator_RX+0x21c>)
 800136e:	2100      	movs	r1, #0
 8001370:	485b      	ldr	r0, [pc, #364]	; (80014e0 <ss_twr_initiator_RX+0x220>)
 8001372:	f000 fba3 	bl	8001abc <waitforsysstatus>

        /* Increment frame sequence number after transmission of the poll message (modulo 256). */
        frame_seq_nb++;
 8001376:	4b57      	ldr	r3, [pc, #348]	; (80014d4 <ss_twr_initiator_RX+0x214>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	3301      	adds	r3, #1
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4b55      	ldr	r3, [pc, #340]	; (80014d4 <ss_twr_initiator_RX+0x214>)
 8001380:	701a      	strb	r2, [r3, #0]

        if (status_reg & DWT_INT_RXFCG_BIT_MASK)
 8001382:	4b57      	ldr	r3, [pc, #348]	; (80014e0 <ss_twr_initiator_RX+0x220>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 8085 	beq.w	800149a <ss_twr_initiator_RX+0x1da>
        {
            uint16_t frame_len;

            /* Clear good RX frame event in the DW IC status register. */
            dwt_writesysstatuslo(DWT_INT_RXFCG_BIT_MASK);
 8001390:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001394:	f004 f952 	bl	800563c <dwt_writesysstatuslo>

            /* A frame has been received, read it into the local buffer. */
            frame_len = dwt_getframelength();
 8001398:	f004 f986 	bl	80056a8 <dwt_getframelength>
 800139c:	4603      	mov	r3, r0
 800139e:	84fb      	strh	r3, [r7, #38]	; 0x26
            if (frame_len <= sizeof(rx_buffer))
 80013a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013a2:	2b14      	cmp	r3, #20
 80013a4:	d87c      	bhi.n	80014a0 <ss_twr_initiator_RX+0x1e0>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 80013a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013a8:	2200      	movs	r2, #0
 80013aa:	4619      	mov	r1, r3
 80013ac:	484d      	ldr	r0, [pc, #308]	; (80014e4 <ss_twr_initiator_RX+0x224>)
 80013ae:	f004 f903 	bl	80055b8 <dwt_readrxdata>

                /* Check that the frame is the expected response from the companion "SS TWR responder" example.
                 * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
                rx_buffer[ALL_MSG_SN_IDX] = 0;
 80013b2:	4b4c      	ldr	r3, [pc, #304]	; (80014e4 <ss_twr_initiator_RX+0x224>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	709a      	strb	r2, [r3, #2]
                if (memcmp(rx_buffer, rx_resp_msg, ALL_MSG_COMMON_LEN) == 0)
 80013b8:	220a      	movs	r2, #10
 80013ba:	494b      	ldr	r1, [pc, #300]	; (80014e8 <ss_twr_initiator_RX+0x228>)
 80013bc:	4849      	ldr	r0, [pc, #292]	; (80014e4 <ss_twr_initiator_RX+0x224>)
 80013be:	f012 fc8d 	bl	8013cdc <memcmp>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d16b      	bne.n	80014a0 <ss_twr_initiator_RX+0x1e0>
                    uint32_t poll_tx_ts, resp_rx_ts, poll_rx_ts, resp_tx_ts;
                    int32_t rtd_init, rtd_resp;
                    float clockOffsetRatio;

                    /* Retrieve poll transmission and response reception timestamps. See NOTE 9 below. */
                    poll_tx_ts = dwt_readtxtimestamplo32();
 80013c8:	f004 f82e 	bl	8005428 <dwt_readtxtimestamplo32>
 80013cc:	6238      	str	r0, [r7, #32]
                    resp_rx_ts = dwt_readrxtimestamplo32();
 80013ce:	f004 f851 	bl	8005474 <dwt_readrxtimestamplo32>
 80013d2:	61f8      	str	r0, [r7, #28]

                    /* Read carrier integrator value and calculate clock offset ratio. See NOTE 11 below. */
                    clockOffsetRatio = ((float)dwt_readclockoffset()) / (uint32_t)(1 << 26);
 80013d4:	f004 f8fe 	bl	80055d4 <dwt_readclockoffset>
 80013d8:	4603      	mov	r3, r0
 80013da:	ee07 3a90 	vmov	s15, r3
 80013de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013e2:	eddf 6a42 	vldr	s13, [pc, #264]	; 80014ec <ss_twr_initiator_RX+0x22c>
 80013e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013ea:	edc7 7a06 	vstr	s15, [r7, #24]

                    /* Get timestamps embedded in response message. */
                    resp_msg_get_ts(&rx_buffer[RESP_MSG_POLL_RX_TS_IDX], &poll_rx_ts);
 80013ee:	f107 030c 	add.w	r3, r7, #12
 80013f2:	4619      	mov	r1, r3
 80013f4:	483e      	ldr	r0, [pc, #248]	; (80014f0 <ss_twr_initiator_RX+0x230>)
 80013f6:	f000 fb3b 	bl	8001a70 <resp_msg_get_ts>
                    resp_msg_get_ts(&rx_buffer[RESP_MSG_RESP_TX_TS_IDX], &resp_tx_ts);
 80013fa:	f107 0308 	add.w	r3, r7, #8
 80013fe:	4619      	mov	r1, r3
 8001400:	483c      	ldr	r0, [pc, #240]	; (80014f4 <ss_twr_initiator_RX+0x234>)
 8001402:	f000 fb35 	bl	8001a70 <resp_msg_get_ts>

                    /* Compute time of flight and distance, using clock offset ratio to correct for differing local and remote clock rates */
                    rtd_init = resp_rx_ts - poll_tx_ts;
 8001406:	69fa      	ldr	r2, [r7, #28]
 8001408:	6a3b      	ldr	r3, [r7, #32]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	617b      	str	r3, [r7, #20]
                    rtd_resp = resp_tx_ts - poll_rx_ts;
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	613b      	str	r3, [r7, #16]

                    tof = ((rtd_init - rtd_resp * (1 - clockOffsetRatio)) / 2.0) * DWT_TIME_UNITS;
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	ee07 3a90 	vmov	s15, r3
 800141c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	ee07 3a90 	vmov	s15, r3
 8001426:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800142a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800142e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001432:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001436:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800143a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143e:	ee17 0a90 	vmov	r0, s15
 8001442:	f7ff f8bb 	bl	80005bc <__aeabi_f2d>
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800144e:	f7ff fa37 	bl	80008c0 <__aeabi_ddiv>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	a315      	add	r3, pc, #84	; (adr r3, 80014b0 <ss_twr_initiator_RX+0x1f0>)
 800145c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001460:	f7ff f904 	bl	800066c <__aeabi_dmul>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4923      	ldr	r1, [pc, #140]	; (80014f8 <ss_twr_initiator_RX+0x238>)
 800146a:	e9c1 2300 	strd	r2, r3, [r1]
                    distance = tof * SPEED_OF_LIGHT;
 800146e:	4b22      	ldr	r3, [pc, #136]	; (80014f8 <ss_twr_initiator_RX+0x238>)
 8001470:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001474:	a310      	add	r3, pc, #64	; (adr r3, 80014b8 <ss_twr_initiator_RX+0x1f8>)
 8001476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147a:	f7ff f8f7 	bl	800066c <__aeabi_dmul>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	491e      	ldr	r1, [pc, #120]	; (80014fc <ss_twr_initiator_RX+0x23c>)
 8001484:	e9c1 2300 	strd	r2, r3, [r1]
                    /* Display computed distance on LCD. */
                    //snprintf(dist_str, sizeof(dist_str), "DIST: %3.2f m", distance);
                    sprintf((char *)data, "%3.2f",distance);
 8001488:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <ss_twr_initiator_RX+0x23c>)
 800148a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148e:	491c      	ldr	r1, [pc, #112]	; (8001500 <ss_twr_initiator_RX+0x240>)
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f014 f8a5 	bl	80155e0 <siprintf>

                    return 0;
 8001496:	2300      	movs	r3, #0
 8001498:	e006      	b.n	80014a8 <ss_twr_initiator_RX+0x1e8>
            }
        }
        else
        {
            /* Clear RX error/timeout events in the DW IC status register. */
            dwt_writesysstatuslo(SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 800149a:	481a      	ldr	r0, [pc, #104]	; (8001504 <ss_twr_initiator_RX+0x244>)
 800149c:	f004 f8ce 	bl	800563c <dwt_writesysstatuslo>
        }

        /* Execute a delay between ranging exchanges. */
        Sleep(RNG_DELAY_MS);
 80014a0:	2064      	movs	r0, #100	; 0x64
 80014a2:	f000 f9d3 	bl	800184c <Sleep>
        tx_poll_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 80014a6:	e74c      	b.n	8001342 <ss_twr_initiator_RX+0x82>
    }
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3728      	adds	r7, #40	; 0x28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	3bce48fa 	.word	0x3bce48fa
 80014b4:	3db13518 	.word	0x3db13518
 80014b8:	13000000 	.word	0x13000000
 80014bc:	41b1dd19 	.word	0x41b1dd19
 80014c0:	08015c40 	.word	0x08015c40
 80014c4:	08015b6c 	.word	0x08015b6c
 80014c8:	20000010 	.word	0x20000010
 80014cc:	08015b80 	.word	0x08015b80
 80014d0:	20000040 	.word	0x20000040
 80014d4:	200002f2 	.word	0x200002f2
 80014d8:	20000020 	.word	0x20000020
 80014dc:	3427d000 	.word	0x3427d000
 80014e0:	20000308 	.word	0x20000308
 80014e4:	200002f4 	.word	0x200002f4
 80014e8:	2000002c 	.word	0x2000002c
 80014ec:	4c800000 	.word	0x4c800000
 80014f0:	200002fe 	.word	0x200002fe
 80014f4:	20000302 	.word	0x20000302
 80014f8:	20000310 	.word	0x20000310
 80014fc:	20000318 	.word	0x20000318
 8001500:	08015b94 	.word	0x08015b94
 8001504:	34279000 	.word	0x34279000

08001508 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
    decaIrqStatus_t s = port_GetEXT_IRQStatus();
 800150e:	f000 fa7d 	bl	8001a0c <port_GetEXT_IRQStatus>
 8001512:	4603      	mov	r3, r0
 8001514:	607b      	str	r3, [r7, #4]

    if (s)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <decamutexon+0x18>
    {
        port_DisableEXT_IRQ(); // disable the external interrupt line
 800151c:	f000 fa52 	bl	80019c4 <port_DisableEXT_IRQ>
    }
    return s; // return state before disable, value is used to re-enable in decamutexoff call
 8001520:	687b      	ldr	r3, [r7, #4]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s) // put a function here that re-enables the interrupt at the end of the critical section
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
    if (s)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <decamutexoff+0x12>
    { // need to check the port state as we can't use level sensitive interrupt on the STM ARM
        port_EnableEXT_IRQ();
 8001538:	f000 fa56 	bl	80019e8 <port_EnableEXT_IRQ>
    }
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <deca_sleep>:
#include <deca_device_api.h>
#include <port.h>

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_sleep(unsigned int time_ms)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
    Sleep(time_ms);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 f97d 	bl	800184c <Sleep>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <deca_usleep>:

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_usleep(unsigned long time_us)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
    usleep(time_us);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 f956 	bl	8001814 <usleep>
}
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <writetospiwithcrc>:
 * Low level abstract function to write to the SPI when SPI CRC mode is used
 * Takes two separate byte buffers for write header and write data, and a CRC8 byte which is written last
 * returns 0 for success, or -1 for error
 */
int writetospiwithcrc(uint16_t headerLength, const uint8_t *headerBuffer, uint16_t bodyLength, const uint8_t *bodyBuffer, uint8_t crc8)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	4603      	mov	r3, r0
 800157c:	81fb      	strh	r3, [r7, #14]
 800157e:	4613      	mov	r3, r2
 8001580:	81bb      	strh	r3, [r7, #12]
#ifdef DWT_ENABLE_CRC
    decaIrqStatus_t stat;
    stat = decamutexon();
 8001582:	f7ff ffc1 	bl	8001508 <decamutexon>
 8001586:	6178      	str	r0, [r7, #20]
    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 8001588:	bf00      	nop
 800158a:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <writetospiwithcrc+0x90>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f002 f919 	bl	80037c6 <HAL_SPI_GetState>
 8001594:	4603      	mov	r3, r0
 8001596:	2b01      	cmp	r3, #1
 8001598:	d1f7      	bne.n	800158a <writetospiwithcrc+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, SPI_CS_state); /**< Put chip select line low */
 800159a:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <writetospiwithcrc+0x94>)
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	4a1a      	ldr	r2, [pc, #104]	; (8001608 <writetospiwithcrc+0x98>)
 80015a0:	7812      	ldrb	r2, [r2, #0]
 80015a2:	4619      	mov	r1, r3
 80015a4:	4819      	ldr	r0, [pc, #100]	; (800160c <writetospiwithcrc+0x9c>)
 80015a6:	f001 fad7 	bl	8002b58 <HAL_GPIO_WritePin>


    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)headerBuffer, headerLength, 10);    /* Send header in polling mode */
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <writetospiwithcrc+0x90>)
 80015ac:	6818      	ldr	r0, [r3, #0]
 80015ae:	89fa      	ldrh	r2, [r7, #14]
 80015b0:	230a      	movs	r3, #10
 80015b2:	68b9      	ldr	r1, [r7, #8]
 80015b4:	f001 ffcb 	bl	800354e <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)bodyBuffer, bodyLength, 10);        /* Send data in polling mode */
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <writetospiwithcrc+0x90>)
 80015ba:	6818      	ldr	r0, [r3, #0]
 80015bc:	89ba      	ldrh	r2, [r7, #12]
 80015be:	230a      	movs	r3, #10
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	f001 ffc4 	bl	800354e <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)&crc8, 1, 10);      /* Send data in polling mode */
 80015c6:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <writetospiwithcrc+0x90>)
 80015c8:	6818      	ldr	r0, [r3, #0]
 80015ca:	230a      	movs	r3, #10
 80015cc:	2201      	movs	r2, #1
 80015ce:	f107 0120 	add.w	r1, r7, #32
 80015d2:	f001 ffbc 	bl	800354e <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi,(GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <writetospiwithcrc+0x94>)
 80015d8:	8819      	ldrh	r1, [r3, #0]
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <writetospiwithcrc+0x98>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	bf0c      	ite	eq
 80015e2:	2301      	moveq	r3, #1
 80015e4:	2300      	movne	r3, #0
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	461a      	mov	r2, r3
 80015ea:	4808      	ldr	r0, [pc, #32]	; (800160c <writetospiwithcrc+0x9c>)
 80015ec:	f001 fab4 	bl	8002b58 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80015f0:	6978      	ldr	r0, [r7, #20]
 80015f2:	f7ff ff9a 	bl	800152a <decamutexoff>
#endif //DWT_ENABLE_CRC
    return 0;
 80015f6:	2300      	movs	r3, #0
} // end writetospiwithcrc()
 80015f8:	4618      	mov	r0, r3
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000048 	.word	0x20000048
 8001604:	2000004c 	.word	0x2000004c
 8001608:	20000408 	.word	0x20000408
 800160c:	40020000 	.word	0x40020000

08001610 <writetospi>:
 * Low level abstract function to write to the SPI
 * Takes two separate byte buffers for write header and write data
 * returns 0 for success, or -1 for error
 */
int writetospi(uint16_t headerLength, const uint8_t *headerBuffer, uint16_t bodyLength, const uint8_t *bodyBuffer)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	4603      	mov	r3, r0
 800161c:	81fb      	strh	r3, [r7, #14]
 800161e:	4613      	mov	r3, r2
 8001620:	81bb      	strh	r3, [r7, #12]
    decaIrqStatus_t stat;
    stat = decamutexon();
 8001622:	f7ff ff71 	bl	8001508 <decamutexon>
 8001626:	6178      	str	r0, [r7, #20]

    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 8001628:	bf00      	nop
 800162a:	4b1c      	ldr	r3, [pc, #112]	; (800169c <writetospi+0x8c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f002 f8c9 	bl	80037c6 <HAL_SPI_GetState>
 8001634:	4603      	mov	r3, r0
 8001636:	2b01      	cmp	r3, #1
 8001638:	d1f7      	bne.n	800162a <writetospi+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, SPI_CS_state); /**< Put chip select line low */
 800163a:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <writetospi+0x90>)
 800163c:	881b      	ldrh	r3, [r3, #0]
 800163e:	4a19      	ldr	r2, [pc, #100]	; (80016a4 <writetospi+0x94>)
 8001640:	7812      	ldrb	r2, [r2, #0]
 8001642:	4619      	mov	r1, r3
 8001644:	4818      	ldr	r0, [pc, #96]	; (80016a8 <writetospi+0x98>)
 8001646:	f001 fa87 	bl	8002b58 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)headerBuffer, headerLength, HAL_MAX_DELAY); /* Send header in polling mode */
 800164a:	4b14      	ldr	r3, [pc, #80]	; (800169c <writetospi+0x8c>)
 800164c:	6818      	ldr	r0, [r3, #0]
 800164e:	89fa      	ldrh	r2, [r7, #14]
 8001650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	f001 ff7a 	bl	800354e <HAL_SPI_Transmit>

    if(bodyLength != 0)
 800165a:	89bb      	ldrh	r3, [r7, #12]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d007      	beq.n	8001670 <writetospi+0x60>
    {
        HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)bodyBuffer,   bodyLength, HAL_MAX_DELAY);     /* Send data in polling mode */
 8001660:	4b0e      	ldr	r3, [pc, #56]	; (800169c <writetospi+0x8c>)
 8001662:	6818      	ldr	r0, [r3, #0]
 8001664:	89ba      	ldrh	r2, [r7, #12]
 8001666:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	f001 ff6f 	bl	800354e <HAL_SPI_Transmit>
    }

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, (GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 8001670:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <writetospi+0x90>)
 8001672:	8819      	ldrh	r1, [r3, #0]
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <writetospi+0x94>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	bf0c      	ite	eq
 800167c:	2301      	moveq	r3, #1
 800167e:	2300      	movne	r3, #0
 8001680:	b2db      	uxtb	r3, r3
 8001682:	461a      	mov	r2, r3
 8001684:	4808      	ldr	r0, [pc, #32]	; (80016a8 <writetospi+0x98>)
 8001686:	f001 fa67 	bl	8002b58 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 800168a:	6978      	ldr	r0, [r7, #20]
 800168c:	f7ff ff4d 	bl	800152a <decamutexoff>

    return 0;
 8001690:	2300      	movs	r3, #0
} // end writetospi()
 8001692:	4618      	mov	r0, r3
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000048 	.word	0x20000048
 80016a0:	2000004c 	.word	0x2000004c
 80016a4:	20000408 	.word	0x20000408
 80016a8:	40020000 	.word	0x40020000

080016ac <readfromspi>:
 * returns the offset into read buffer where first byte of read data may be found,
 * or returns -1 if there was an error
 */
//#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength, uint8_t *headerBuffer, uint16_t readlength, uint8_t *readBuffer)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	4603      	mov	r3, r0
 80016b8:	81fb      	strh	r3, [r7, #14]
 80016ba:	4613      	mov	r3, r2
 80016bc:	81bb      	strh	r3, [r7, #12]

    decaIrqStatus_t stat;
    stat = decamutexon();
 80016be:	f7ff ff23 	bl	8001508 <decamutexon>
 80016c2:	6178      	str	r0, [r7, #20]

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 80016c4:	bf00      	nop
 80016c6:	4b2e      	ldr	r3, [pc, #184]	; (8001780 <readfromspi+0xd4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f002 f87b 	bl	80037c6 <HAL_SPI_GetState>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d1f7      	bne.n	80016c6 <readfromspi+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, SPI_CS_state); /**< Put chip select line low */
 80016d6:	4b2b      	ldr	r3, [pc, #172]	; (8001784 <readfromspi+0xd8>)
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	4a2b      	ldr	r2, [pc, #172]	; (8001788 <readfromspi+0xdc>)
 80016dc:	7812      	ldrb	r2, [r2, #0]
 80016de:	4619      	mov	r1, r3
 80016e0:	482a      	ldr	r0, [pc, #168]	; (800178c <readfromspi+0xe0>)
 80016e2:	f001 fa39 	bl	8002b58 <HAL_GPIO_WritePin>

    /* Send header */
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t*)headerBuffer, headerLength, HAL_MAX_DELAY); //No timeout
 80016e6:	4b26      	ldr	r3, [pc, #152]	; (8001780 <readfromspi+0xd4>)
 80016e8:	6818      	ldr	r0, [r3, #0]
 80016ea:	89fa      	ldrh	r2, [r7, #14]
 80016ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016f0:	68b9      	ldr	r1, [r7, #8]
 80016f2:	f001 ff2c 	bl	800354e <HAL_SPI_Transmit>

    while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_TXE) == RESET)//Verify that the transmit was ended
 80016f6:	bf00      	nop
 80016f8:	4b21      	ldr	r3, [pc, #132]	; (8001780 <readfromspi+0xd4>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b02      	cmp	r3, #2
 8001706:	d1f7      	bne.n	80016f8 <readfromspi+0x4c>
    {
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while (readlength-- > 0)
 8001708:	e01f      	b.n	800174a <readfromspi+0x9e>
    {
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_TXE) == RESET)
 800170a:	bf00      	nop
 800170c:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <readfromspi+0xd4>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b02      	cmp	r3, #2
 800171a:	d1f7      	bne.n	800170c <readfromspi+0x60>
        {
        }

        hcurrent_active_spi->Instance->DR=0;
 800171c:	4b18      	ldr	r3, [pc, #96]	; (8001780 <readfromspi+0xd4>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2200      	movs	r2, #0
 8001724:	60da      	str	r2, [r3, #12]
        /* set output to 0 (MOSI), this is necessary for
        e.g. when waking up DW3000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_RXNE) == RESET)
 8001726:	bf00      	nop
 8001728:	4b15      	ldr	r3, [pc, #84]	; (8001780 <readfromspi+0xd4>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b01      	cmp	r3, #1
 8001736:	d1f7      	bne.n	8001728 <readfromspi+0x7c>
        {
        }

        (*readBuffer++) = hcurrent_active_spi->Instance->DR;  //copy data read form (MISO)
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <readfromspi+0xd4>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68d9      	ldr	r1, [r3, #12]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	1c5a      	adds	r2, r3, #1
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	b2ca      	uxtb	r2, r1
 8001748:	701a      	strb	r2, [r3, #0]
    while (readlength-- > 0)
 800174a:	89bb      	ldrh	r3, [r7, #12]
 800174c:	1e5a      	subs	r2, r3, #1
 800174e:	81ba      	strh	r2, [r7, #12]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1da      	bne.n	800170a <readfromspi+0x5e>
    }


    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, (GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <readfromspi+0xd8>)
 8001756:	8819      	ldrh	r1, [r3, #0]
 8001758:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <readfromspi+0xdc>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	bf0c      	ite	eq
 8001760:	2301      	moveq	r3, #1
 8001762:	2300      	movne	r3, #0
 8001764:	b2db      	uxtb	r3, r3
 8001766:	461a      	mov	r2, r3
 8001768:	4808      	ldr	r0, [pc, #32]	; (800178c <readfromspi+0xe0>)
 800176a:	f001 f9f5 	bl	8002b58 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 800176e:	6978      	ldr	r0, [r7, #20]
 8001770:	f7ff fedb 	bl	800152a <decamutexoff>

    return 0;
 8001774:	2300      	movs	r3, #0
} // end readfromspi()
 8001776:	4618      	mov	r0, r3
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000048 	.word	0x20000048
 8001784:	2000004c 	.word	0x2000004c
 8001788:	20000408 	.word	0x20000408
 800178c:	40020000 	.word	0x40020000

08001790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	db0b      	blt.n	80017ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	f003 021f 	and.w	r2, r3, #31
 80017a8:	4907      	ldr	r1, [pc, #28]	; (80017c8 <__NVIC_EnableIRQ+0x38>)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	095b      	lsrs	r3, r3, #5
 80017b0:	2001      	movs	r0, #1
 80017b2:	fa00 f202 	lsl.w	r2, r0, r2
 80017b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000e100 	.word	0xe000e100

080017cc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	db12      	blt.n	8001804 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	f003 021f 	and.w	r2, r3, #31
 80017e4:	490a      	ldr	r1, [pc, #40]	; (8001810 <__NVIC_DisableIRQ+0x44>)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	095b      	lsrs	r3, r3, #5
 80017ec:	2001      	movs	r0, #1
 80017ee:	fa00 f202 	lsl.w	r2, r0, r2
 80017f2:	3320      	adds	r3, #32
 80017f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80017f8:	f3bf 8f4f 	dsb	sy
}
 80017fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017fe:	f3bf 8f6f 	isb	sy
}
 8001802:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000e100 	.word	0xe000e100

08001814 <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize("O0")
int usleep(useconds_t usec)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
    unsigned int i;

    usec *= 12;
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	4613      	mov	r3, r2
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	4413      	add	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	607b      	str	r3, [r7, #4]
    for (i = 0; i < usec; i++)
 8001828:	2300      	movs	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	e003      	b.n	8001836 <usleep+0x22>
    {
        __NOP();
 800182e:	bf00      	nop
    for (i = 0; i < usec; i++)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	3301      	adds	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	429a      	cmp	r2, r3
 800183c:	d3f7      	bcc.n	800182e <usleep+0x1a>
    }
    return 0;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <Sleep>:

/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void Sleep(uint32_t x)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 fe93 	bl	8002580 <HAL_Delay>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <EXTI_GetITEnStatus>:
 * @brief  Checks whether the specified IRQn line is enabled or not.
 * @param  IRQn: specifies the IRQn line to check.
 * @return "0" when IRQn is "not enabled" and !0 otherwise
 */
ITStatus EXTI_GetITEnStatus(IRQn_Type IRQn)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	71fb      	strb	r3, [r7, #7]
    return ((NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) == (uint32_t)RESET) ? (RESET) : (SET);
 800186e:	4a0c      	ldr	r2, [pc, #48]	; (80018a0 <EXTI_GetITEnStatus+0x3c>)
 8001870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001874:	095b      	lsrs	r3, r3, #5
 8001876:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	f003 031f 	and.w	r3, r3, #31
 8001880:	fa22 f303 	lsr.w	r3, r2, r3
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b00      	cmp	r3, #0
 800188a:	bf14      	ite	ne
 800188c:	2301      	movne	r3, #1
 800188e:	2300      	moveq	r3, #0
 8001890:	b2db      	uxtb	r3, r3
}
 8001892:	4618      	mov	r0, r3
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000e100 	.word	0xe000e100

080018a4 <reset_DWIC>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW IC by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DWIC(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RESET_Pin;
 80018aa:	2301      	movs	r3, #1
 80018ac:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80018ae:	2311      	movs	r3, #17
 80018b0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	4619      	mov	r1, r3
 80018ba:	480a      	ldr	r0, [pc, #40]	; (80018e4 <reset_DWIC+0x40>)
 80018bc:	f000 ffc8 	bl	8002850 <HAL_GPIO_Init>

    // drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 80018c0:	2200      	movs	r2, #0
 80018c2:	2101      	movs	r1, #1
 80018c4:	4807      	ldr	r0, [pc, #28]	; (80018e4 <reset_DWIC+0x40>)
 80018c6:	f001 f947 	bl	8002b58 <HAL_GPIO_WritePin>

    usleep(1);
 80018ca:	2001      	movs	r0, #1
 80018cc:	f7ff ffa2 	bl	8001814 <usleep>

    // put the pin back to output open-drain (not active)
    setup_DWICRSTnIRQ(0);
 80018d0:	2000      	movs	r0, #0
 80018d2:	f000 f809 	bl	80018e8 <setup_DWICRSTnIRQ>
    Sleep(2);
 80018d6:	2002      	movs	r0, #2
 80018d8:	f7ff ffb8 	bl	800184c <Sleep>
}
 80018dc:	bf00      	nop
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40020400 	.word	0x40020400

080018e8 <setup_DWICRSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DWICRSTnIRQ(int enable)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if (enable)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d015      	beq.n	8001922 <setup_DWICRSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 80018f6:	2301      	movs	r3, #1
 80018f8:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018fe:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8001904:	f107 030c 	add.w	r3, r7, #12
 8001908:	4619      	mov	r1, r3
 800190a:	4813      	ldr	r0, [pc, #76]	; (8001958 <setup_DWICRSTnIRQ+0x70>)
 800190c:	f000 ffa0 	bl	8002850 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn); // pin #0 -> EXTI #0
 8001910:	2006      	movs	r0, #6
 8001912:	f000 ff74 	bl	80027fe <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	2105      	movs	r1, #5
 800191a:	2006      	movs	r0, #6
 800191c:	f000 ff53 	bl	80027c6 <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
    }
}
 8001920:	e015      	b.n	800194e <setup_DWICRSTnIRQ+0x66>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn); // pin #0 -> EXTI #0
 8001922:	2006      	movs	r0, #6
 8001924:	f000 ff79 	bl	800281a <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 8001928:	2301      	movs	r3, #1
 800192a:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800192c:	2311      	movs	r3, #17
 800192e:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001934:	2302      	movs	r3, #2
 8001936:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8001938:	f107 030c 	add.w	r3, r7, #12
 800193c:	4619      	mov	r1, r3
 800193e:	4806      	ldr	r0, [pc, #24]	; (8001958 <setup_DWICRSTnIRQ+0x70>)
 8001940:	f000 ff86 	bl	8002850 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 8001944:	2201      	movs	r2, #1
 8001946:	2101      	movs	r1, #1
 8001948:	4803      	ldr	r0, [pc, #12]	; (8001958 <setup_DWICRSTnIRQ+0x70>)
 800194a:	f001 f905 	bl	8002b58 <HAL_GPIO_WritePin>
}
 800194e:	bf00      	nop
 8001950:	3720      	adds	r7, #32
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40020400 	.word	0x40020400

0800195c <wakeup_device_with_io>:
 *
 * output -None
 *
 */
void wakeup_device_with_io(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
    SET_WAKEUP_PIN_IO_HIGH;
 8001960:	2201      	movs	r2, #1
 8001962:	2102      	movs	r1, #2
 8001964:	4806      	ldr	r0, [pc, #24]	; (8001980 <wakeup_device_with_io+0x24>)
 8001966:	f001 f8f7 	bl	8002b58 <HAL_GPIO_WritePin>
    WAIT_200uSEC;
 800196a:	2001      	movs	r0, #1
 800196c:	f7ff ff6e 	bl	800184c <Sleep>
    SET_WAKEUP_PIN_IO_LOW;
 8001970:	2200      	movs	r2, #0
 8001972:	2102      	movs	r1, #2
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <wakeup_device_with_io+0x24>)
 8001976:	f001 f8ef 	bl	8002b58 <HAL_GPIO_WritePin>
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40020400 	.word	0x40020400

08001984 <port_set_dw_ic_spi_slowrate>:
/* @fn      port_set_dw_ic_spi_slowrate
 * @brief   set 4.5MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw_ic_spi_slowrate(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
    hcurrent_active_spi->Init.BaudRatePrescaler=SPI_BAUDRATEPRESCALER_16;
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <port_set_dw_ic_spi_slowrate+0x1c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2218      	movs	r2, #24
 800198e:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(hcurrent_active_spi);
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <port_set_dw_ic_spi_slowrate+0x1c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f001 fd51 	bl	800343c <HAL_SPI_Init>
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000048 	.word	0x20000048

080019a4 <port_set_dw_ic_spi_fastrate>:
/* @fn      port_set_dw_ic_spi_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw_ic_spi_fastrate(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
    hcurrent_active_spi->Init.BaudRatePrescaler=SPI_BAUDRATEPRESCALER_2;
 80019a8:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <port_set_dw_ic_spi_fastrate+0x1c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2200      	movs	r2, #0
 80019ae:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(hcurrent_active_spi);
 80019b0:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <port_set_dw_ic_spi_fastrate+0x1c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f001 fd41 	bl	800343c <HAL_SPI_Init>
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000048 	.word	0x20000048

080019c4 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
    if(SPI_1 == host_spi)
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <port_DisableEXT_IRQ+0x20>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d103      	bne.n	80019d8 <port_DisableEXT_IRQ+0x14>
    {
        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 80019d0:	2028      	movs	r0, #40	; 0x28
 80019d2:	f7ff fefb 	bl	80017cc <__NVIC_DisableIRQ>
    else
    {
        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn2);
    }

}
 80019d6:	e002      	b.n	80019de <port_DisableEXT_IRQ+0x1a>
        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn2);
 80019d8:	2017      	movs	r0, #23
 80019da:	f7ff fef7 	bl	80017cc <__NVIC_DisableIRQ>
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000409 	.word	0x20000409

080019e8 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
    if(SPI_1 == host_spi)
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <port_EnableEXT_IRQ+0x20>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d103      	bne.n	80019fc <port_EnableEXT_IRQ+0x14>
    {
        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 80019f4:	2028      	movs	r0, #40	; 0x28
 80019f6:	f7ff fecb 	bl	8001790 <__NVIC_EnableIRQ>
    }
    else
    {
        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn2);
    }
}
 80019fa:	e002      	b.n	8001a02 <port_EnableEXT_IRQ+0x1a>
        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn2);
 80019fc:	2017      	movs	r0, #23
 80019fe:	f7ff fec7 	bl	8001790 <__NVIC_EnableIRQ>
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000409 	.word	0x20000409

08001a0c <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
    uint32_t status;

    if(SPI_1 == host_spi)
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <port_GetEXT_IRQStatus+0x30>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d105      	bne.n	8001a26 <port_GetEXT_IRQStatus+0x1a>
    {
        status = EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 8001a1a:	2028      	movs	r0, #40	; 0x28
 8001a1c:	f7ff ff22 	bl	8001864 <EXTI_GetITEnStatus>
 8001a20:	4603      	mov	r3, r0
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	e004      	b.n	8001a30 <port_GetEXT_IRQStatus+0x24>
    }
    else
    {
        status = EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn2);
 8001a26:	2017      	movs	r0, #23
 8001a28:	f7ff ff1c 	bl	8001864 <EXTI_GetITEnStatus>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	607b      	str	r3, [r7, #4]
    }
    return status;
 8001a30:	687b      	ldr	r3, [r7, #4]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000409 	.word	0x20000409

08001a40 <port_set_dwic_isr>:
// * @param deca_isr function pointer to DW IC interrupt handler to install
// *
// * @return none
// */
void port_set_dwic_isr(port_dwic_isr_t dwic_isr)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
    /* Check DW IC IRQ activation status. */
    ITStatus en = port_GetEXT_IRQStatus();
 8001a48:	f7ff ffe0 	bl	8001a0c <port_GetEXT_IRQStatus>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	73fb      	strb	r3, [r7, #15]

    /* If needed, deactivate DW IC IRQ during the installation of the new handler. */
    port_DisableEXT_IRQ();
 8001a50:	f7ff ffb8 	bl	80019c4 <port_DisableEXT_IRQ>

    port_dwic_isr = dwic_isr;
 8001a54:	4a05      	ldr	r2, [pc, #20]	; (8001a6c <port_set_dwic_isr+0x2c>)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6013      	str	r3, [r2, #0]

    if (!en)
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <port_set_dwic_isr+0x24>
    {
        port_EnableEXT_IRQ();
 8001a60:	f7ff ffc2 	bl	80019e8 <port_EnableEXT_IRQ>
    }
}
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000320 	.word	0x20000320

08001a70 <resp_msg_get_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
void resp_msg_get_ts(uint8_t *ts_field, uint32_t *ts)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
    int i;
    *ts = 0;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
    for (i = 0; i < RESP_MSG_TS_LEN; i++)
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	e010      	b.n	8001aa8 <resp_msg_get_ts+0x38>
    {
        *ts += (uint32_t)ts_field[i] << (i * 8);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	440b      	add	r3, r1
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	4619      	mov	r1, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9c:	441a      	add	r2, r3
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	601a      	str	r2, [r3, #0]
    for (i = 0; i < RESP_MSG_TS_LEN; i++)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	ddeb      	ble.n	8001a86 <resp_msg_get_ts+0x16>
    }
}
 8001aae:	bf00      	nop
 8001ab0:	bf00      	nop
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <waitforsysstatus>:
 *               0 - The function will not wait for any bits in the system status register (lower 32 bits).
 *
 * return None
 */
void waitforsysstatus(uint32_t *lo_result, uint32_t *hi_result, uint32_t lo_mask, uint32_t hi_mask)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
 8001ac8:	603b      	str	r3, [r7, #0]
    uint32_t lo_result_tmp = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
    uint32_t hi_result_tmp = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]

    // If a mask has been passed into the function for the system status register (lower 32-bits)
    if (lo_mask)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d014      	beq.n	8001b02 <waitforsysstatus+0x46>
    {
        while (!((lo_result_tmp = dwt_readsysstatuslo()) & (lo_mask)))
 8001ad8:	e00a      	b.n	8001af0 <waitforsysstatus+0x34>
        {
            // If a mask value is set for the system status register (higher 32-bits)
            if (hi_mask)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d007      	beq.n	8001af0 <waitforsysstatus+0x34>
            {
                // If mask value for the system status register (higher 32-bits) is found
                if ((hi_result_tmp = dwt_readsysstatushi()) & hi_mask)
 8001ae0:	f003 fdd0 	bl	8005684 <dwt_readsysstatushi>
 8001ae4:	6138      	str	r0, [r7, #16]
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	4013      	ands	r3, r2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d115      	bne.n	8001b1c <waitforsysstatus+0x60>
        while (!((lo_result_tmp = dwt_readsysstatuslo()) & (lo_mask)))
 8001af0:	f003 fdb6 	bl	8005660 <dwt_readsysstatuslo>
 8001af4:	6178      	str	r0, [r7, #20]
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4013      	ands	r3, r2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0ec      	beq.n	8001ada <waitforsysstatus+0x1e>
 8001b00:	e00d      	b.n	8001b1e <waitforsysstatus+0x62>
                }
            }
        }
    }
    // if only a mask value for the system status register (higher 32-bits) is set
    else if (hi_mask)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00a      	beq.n	8001b1e <waitforsysstatus+0x62>
    {
        while (!((hi_result_tmp = dwt_readsysstatushi()) & (hi_mask))) { };
 8001b08:	bf00      	nop
 8001b0a:	f003 fdbb 	bl	8005684 <dwt_readsysstatushi>
 8001b0e:	6138      	str	r0, [r7, #16]
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	4013      	ands	r3, r2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f7      	beq.n	8001b0a <waitforsysstatus+0x4e>
 8001b1a:	e000      	b.n	8001b1e <waitforsysstatus+0x62>
                    break;
 8001b1c:	bf00      	nop
    }

    if (lo_result != NULL)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d002      	beq.n	8001b2a <waitforsysstatus+0x6e>
    {
        *lo_result = lo_result_tmp;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	601a      	str	r2, [r3, #0]
    }

    if (hi_result != NULL)
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d002      	beq.n	8001b36 <waitforsysstatus+0x7a>
    {
        *hi_result = hi_result_tmp;
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	601a      	str	r2, [r3, #0]
    }
}
 8001b36:	bf00      	nop
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <test_run_info>:
extern struct data data_rx;

extern int unit_test_main(void);


void test_run_info(unsigned char *data){
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]

	uint16_t data_length = strlen((const char *)data);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7fe fbc9 	bl	80002e0 <strlen>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart1, data, data_length, 1000);
 8001b52:	89fa      	ldrh	r2, [r7, #14]
 8001b54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	4803      	ldr	r0, [pc, #12]	; (8001b68 <test_run_info+0x28>)
 8001b5c:	f002 fead 	bl	80048ba <HAL_UART_Transmit>
}
 8001b60:	bf00      	nop
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	200003c4 	.word	0x200003c4

08001b6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b70:	f000 fc94 	bl	800249c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b74:	f000 f856 	bl	8001c24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b78:	f000 f9d6 	bl	8001f28 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001b7c:	f000 f8bc 	bl	8001cf8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001b80:	f000 f9a8 	bl	8001ed4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001b84:	f000 f8ee 	bl	8001d64 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE BEGIN 2 */
  port_DisableEXT_IRQ();
 8001b88:	f7ff ff1c 	bl	80019c4 <port_DisableEXT_IRQ>
  setup_DWICRSTnIRQ(0);
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	f7ff feab 	bl	80018e8 <setup_DWICRSTnIRQ>

  HAL_GPIO_WritePin(GPIOB,  GPIO_PIN_13, GPIO_PIN_RESET);
 8001b92:	2200      	movs	r2, #0
 8001b94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b98:	4816      	ldr	r0, [pc, #88]	; (8001bf4 <main+0x88>)
 8001b9a:	f000 ffdd 	bl	8002b58 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){

	  UWB_pdoa();
 8001b9e:	f7ff fa0f 	bl	8000fc0 <UWB_pdoa>

	  test_run_info((unsigned char *)"[type:Tli, PDoA : ");
 8001ba2:	4815      	ldr	r0, [pc, #84]	; (8001bf8 <main+0x8c>)
 8001ba4:	f7ff ffcc 	bl	8001b40 <test_run_info>
	  test_run_info((unsigned char *)&data_rx.T_pdoa);
 8001ba8:	4814      	ldr	r0, [pc, #80]	; (8001bfc <main+0x90>)
 8001baa:	f7ff ffc9 	bl	8001b40 <test_run_info>
	  test_run_info((unsigned char *)", data : ");
 8001bae:	4814      	ldr	r0, [pc, #80]	; (8001c00 <main+0x94>)
 8001bb0:	f7ff ffc6 	bl	8001b40 <test_run_info>
	  test_run_info((unsigned char *)&data_rx.T_data);
 8001bb4:	4813      	ldr	r0, [pc, #76]	; (8001c04 <main+0x98>)
 8001bb6:	f7ff ffc3 	bl	8001b40 <test_run_info>
	  test_run_info((unsigned char *)", Time : ");
 8001bba:	4813      	ldr	r0, [pc, #76]	; (8001c08 <main+0x9c>)
 8001bbc:	f7ff ffc0 	bl	8001b40 <test_run_info>
	  test_run_info((unsigned char *)&data_rx.T_time);
 8001bc0:	4812      	ldr	r0, [pc, #72]	; (8001c0c <main+0xa0>)
 8001bc2:	f7ff ffbd 	bl	8001b40 <test_run_info>
	  test_run_info((unsigned char *)"]\n");
 8001bc6:	4812      	ldr	r0, [pc, #72]	; (8001c10 <main+0xa4>)
 8001bc8:	f7ff ffba 	bl	8001b40 <test_run_info>

	  ss_twr_initiator_RX(data_rx.C_dist);
 8001bcc:	4811      	ldr	r0, [pc, #68]	; (8001c14 <main+0xa8>)
 8001bce:	f7ff fb77 	bl	80012c0 <ss_twr_initiator_RX>


	  test_run_info((unsigned char *)"[type:car, PDoA : ");
 8001bd2:	4811      	ldr	r0, [pc, #68]	; (8001c18 <main+0xac>)
 8001bd4:	f7ff ffb4 	bl	8001b40 <test_run_info>
	  test_run_info((unsigned char *)&data_rx.C_pdoa);
 8001bd8:	4810      	ldr	r0, [pc, #64]	; (8001c1c <main+0xb0>)
 8001bda:	f7ff ffb1 	bl	8001b40 <test_run_info>
	  test_run_info((unsigned char *)", DIST : ");
 8001bde:	4810      	ldr	r0, [pc, #64]	; (8001c20 <main+0xb4>)
 8001be0:	f7ff ffae 	bl	8001b40 <test_run_info>
	  test_run_info((unsigned char *)&data_rx.C_dist);
 8001be4:	480b      	ldr	r0, [pc, #44]	; (8001c14 <main+0xa8>)
 8001be6:	f7ff ffab 	bl	8001b40 <test_run_info>
	  test_run_info((unsigned char *)"]\n");
 8001bea:	4809      	ldr	r0, [pc, #36]	; (8001c10 <main+0xa4>)
 8001bec:	f7ff ffa8 	bl	8001b40 <test_run_info>
	  UWB_pdoa();
 8001bf0:	e7d5      	b.n	8001b9e <main+0x32>
 8001bf2:	bf00      	nop
 8001bf4:	40020400 	.word	0x40020400
 8001bf8:	08015bdc 	.word	0x08015bdc
 8001bfc:	2000025f 	.word	0x2000025f
 8001c00:	08015bf0 	.word	0x08015bf0
 8001c04:	20000265 	.word	0x20000265
 8001c08:	08015bfc 	.word	0x08015bfc
 8001c0c:	20000267 	.word	0x20000267
 8001c10:	08015c08 	.word	0x08015c08
 8001c14:	2000024c 	.word	0x2000024c
 8001c18:	08015c0c 	.word	0x08015c0c
 8001c1c:	20000252 	.word	0x20000252
 8001c20:	08015c20 	.word	0x08015c20

08001c24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b094      	sub	sp, #80	; 0x50
 8001c28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c2a:	f107 0320 	add.w	r3, r7, #32
 8001c2e:	2230      	movs	r2, #48	; 0x30
 8001c30:	2100      	movs	r1, #0
 8001c32:	4618      	mov	r0, r3
 8001c34:	f012 f88a 	bl	8013d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c38:	f107 030c 	add.w	r3, r7, #12
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60bb      	str	r3, [r7, #8]
 8001c4c:	4b28      	ldr	r3, [pc, #160]	; (8001cf0 <SystemClock_Config+0xcc>)
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	4a27      	ldr	r2, [pc, #156]	; (8001cf0 <SystemClock_Config+0xcc>)
 8001c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c56:	6413      	str	r3, [r2, #64]	; 0x40
 8001c58:	4b25      	ldr	r3, [pc, #148]	; (8001cf0 <SystemClock_Config+0xcc>)
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c64:	2300      	movs	r3, #0
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	4b22      	ldr	r3, [pc, #136]	; (8001cf4 <SystemClock_Config+0xd0>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a21      	ldr	r2, [pc, #132]	; (8001cf4 <SystemClock_Config+0xd0>)
 8001c6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	4b1f      	ldr	r3, [pc, #124]	; (8001cf4 <SystemClock_Config+0xd0>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c80:	2301      	movs	r3, #1
 8001c82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 20;
 8001c94:	2314      	movs	r3, #20
 8001c96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001c98:	23a0      	movs	r3, #160	; 0xa0
 8001c9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c9c:	2304      	movs	r3, #4
 8001c9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ca0:	2304      	movs	r3, #4
 8001ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ca4:	f107 0320 	add.w	r3, r7, #32
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f000 ff6f 	bl	8002b8c <HAL_RCC_OscConfig>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001cb4:	f000 f9e4 	bl	8002080 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cb8:	230f      	movs	r3, #15
 8001cba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001cd0:	f107 030c 	add.w	r3, r7, #12
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f001 f9d0 	bl	800307c <HAL_RCC_ClockConfig>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001ce2:	f000 f9cd 	bl	8002080 <Error_Handler>
  }
}
 8001ce6:	bf00      	nop
 8001ce8:	3750      	adds	r7, #80	; 0x50
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40007000 	.word	0x40007000

08001cf8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cfc:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <MX_SPI1_Init+0x64>)
 8001cfe:	4a18      	ldr	r2, [pc, #96]	; (8001d60 <MX_SPI1_Init+0x68>)
 8001d00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d02:	4b16      	ldr	r3, [pc, #88]	; (8001d5c <MX_SPI1_Init+0x64>)
 8001d04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d0a:	4b14      	ldr	r3, [pc, #80]	; (8001d5c <MX_SPI1_Init+0x64>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <MX_SPI1_Init+0x64>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d16:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <MX_SPI1_Init+0x64>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <MX_SPI1_Init+0x64>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d22:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <MX_SPI1_Init+0x64>)
 8001d24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <MX_SPI1_Init+0x64>)
 8001d2c:	2210      	movs	r2, #16
 8001d2e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d30:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <MX_SPI1_Init+0x64>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <MX_SPI1_Init+0x64>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d3c:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <MX_SPI1_Init+0x64>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <MX_SPI1_Init+0x64>)
 8001d44:	220a      	movs	r2, #10
 8001d46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d48:	4804      	ldr	r0, [pc, #16]	; (8001d5c <MX_SPI1_Init+0x64>)
 8001d4a:	f001 fb77 	bl	800343c <HAL_SPI_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d54:	f000 f994 	bl	8002080 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d58:	bf00      	nop
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000324 	.word	0x20000324
 8001d60:	40013000 	.word	0x40013000

08001d64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b09a      	sub	sp, #104	; 0x68
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d6a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	609a      	str	r2, [r3, #8]
 8001d76:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001d78:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d88:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d92:	f107 0320 	add.w	r3, r7, #32
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
 8001da0:	611a      	str	r2, [r3, #16]
 8001da2:	615a      	str	r2, [r3, #20]
 8001da4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001da6:	463b      	mov	r3, r7
 8001da8:	2220      	movs	r2, #32
 8001daa:	2100      	movs	r1, #0
 8001dac:	4618      	mov	r0, r3
 8001dae:	f011 ffcd 	bl	8013d4c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001db2:	4b46      	ldr	r3, [pc, #280]	; (8001ecc <MX_TIM1_Init+0x168>)
 8001db4:	4a46      	ldr	r2, [pc, #280]	; (8001ed0 <MX_TIM1_Init+0x16c>)
 8001db6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001db8:	4b44      	ldr	r3, [pc, #272]	; (8001ecc <MX_TIM1_Init+0x168>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dbe:	4b43      	ldr	r3, [pc, #268]	; (8001ecc <MX_TIM1_Init+0x168>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001dc4:	4b41      	ldr	r3, [pc, #260]	; (8001ecc <MX_TIM1_Init+0x168>)
 8001dc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001dcc:	4b3f      	ldr	r3, [pc, #252]	; (8001ecc <MX_TIM1_Init+0x168>)
 8001dce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dd2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001dd4:	4b3d      	ldr	r3, [pc, #244]	; (8001ecc <MX_TIM1_Init+0x168>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dda:	4b3c      	ldr	r3, [pc, #240]	; (8001ecc <MX_TIM1_Init+0x168>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001de0:	483a      	ldr	r0, [pc, #232]	; (8001ecc <MX_TIM1_Init+0x168>)
 8001de2:	f001 fdc9 	bl	8003978 <HAL_TIM_Base_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001dec:	f000 f948 	bl	8002080 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001df0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001df6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4833      	ldr	r0, [pc, #204]	; (8001ecc <MX_TIM1_Init+0x168>)
 8001dfe:	f001 ffc7 	bl	8003d90 <HAL_TIM_ConfigClockSource>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001e08:	f000 f93a 	bl	8002080 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001e0c:	482f      	ldr	r0, [pc, #188]	; (8001ecc <MX_TIM1_Init+0x168>)
 8001e0e:	f001 fe02 	bl	8003a16 <HAL_TIM_OC_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8001e18:	f000 f932 	bl	8002080 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001e1c:	2306      	movs	r3, #6
 8001e1e:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001e24:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4828      	ldr	r0, [pc, #160]	; (8001ecc <MX_TIM1_Init+0x168>)
 8001e2c:	f002 f877 	bl	8003f1e <HAL_TIM_SlaveConfigSynchro>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001e36:	f000 f923 	bl	8002080 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e42:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e46:	4619      	mov	r1, r3
 8001e48:	4820      	ldr	r0, [pc, #128]	; (8001ecc <MX_TIM1_Init+0x168>)
 8001e4a:	f002 fc15 	bl	8004678 <HAL_TIMEx_MasterConfigSynchronization>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001e54:	f000 f914 	bl	8002080 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e60:	2300      	movs	r3, #0
 8001e62:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e64:	2300      	movs	r3, #0
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e70:	2300      	movs	r3, #0
 8001e72:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e74:	f107 0320 	add.w	r3, r7, #32
 8001e78:	2200      	movs	r2, #0
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4813      	ldr	r0, [pc, #76]	; (8001ecc <MX_TIM1_Init+0x168>)
 8001e7e:	f001 ff2b 	bl	8003cd8 <HAL_TIM_OC_ConfigChannel>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001e88:	f000 f8fa 	bl	8002080 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e94:	2300      	movs	r3, #0
 8001e96:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ea0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ea4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001eaa:	463b      	mov	r3, r7
 8001eac:	4619      	mov	r1, r3
 8001eae:	4807      	ldr	r0, [pc, #28]	; (8001ecc <MX_TIM1_Init+0x168>)
 8001eb0:	f002 fc50 	bl	8004754 <HAL_TIMEx_ConfigBreakDeadTime>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001eba:	f000 f8e1 	bl	8002080 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ebe:	4803      	ldr	r0, [pc, #12]	; (8001ecc <MX_TIM1_Init+0x168>)
 8001ec0:	f000 f97c 	bl	80021bc <HAL_TIM_MspPostInit>

}
 8001ec4:	bf00      	nop
 8001ec6:	3768      	adds	r7, #104	; 0x68
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	2000037c 	.word	0x2000037c
 8001ed0:	40010000 	.word	0x40010000

08001ed4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ed8:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <MX_USART1_UART_Init+0x4c>)
 8001eda:	4a12      	ldr	r2, [pc, #72]	; (8001f24 <MX_USART1_UART_Init+0x50>)
 8001edc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <MX_USART1_UART_Init+0x4c>)
 8001ee0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ee4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ee6:	4b0e      	ldr	r3, [pc, #56]	; (8001f20 <MX_USART1_UART_Init+0x4c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <MX_USART1_UART_Init+0x4c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ef2:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <MX_USART1_UART_Init+0x4c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ef8:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <MX_USART1_UART_Init+0x4c>)
 8001efa:	220c      	movs	r2, #12
 8001efc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001efe:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <MX_USART1_UART_Init+0x4c>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <MX_USART1_UART_Init+0x4c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f0a:	4805      	ldr	r0, [pc, #20]	; (8001f20 <MX_USART1_UART_Init+0x4c>)
 8001f0c:	f002 fc88 	bl	8004820 <HAL_UART_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f16:	f000 f8b3 	bl	8002080 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	200003c4 	.word	0x200003c4
 8001f24:	40011000 	.word	0x40011000

08001f28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08a      	sub	sp, #40	; 0x28
 8001f2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	609a      	str	r2, [r3, #8]
 8001f3a:	60da      	str	r2, [r3, #12]
 8001f3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	4b4b      	ldr	r3, [pc, #300]	; (8002070 <MX_GPIO_Init+0x148>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a4a      	ldr	r2, [pc, #296]	; (8002070 <MX_GPIO_Init+0x148>)
 8001f48:	f043 0304 	orr.w	r3, r3, #4
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b48      	ldr	r3, [pc, #288]	; (8002070 <MX_GPIO_Init+0x148>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	4b44      	ldr	r3, [pc, #272]	; (8002070 <MX_GPIO_Init+0x148>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a43      	ldr	r2, [pc, #268]	; (8002070 <MX_GPIO_Init+0x148>)
 8001f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4b41      	ldr	r3, [pc, #260]	; (8002070 <MX_GPIO_Init+0x148>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	4b3d      	ldr	r3, [pc, #244]	; (8002070 <MX_GPIO_Init+0x148>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a3c      	ldr	r2, [pc, #240]	; (8002070 <MX_GPIO_Init+0x148>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b3a      	ldr	r3, [pc, #232]	; (8002070 <MX_GPIO_Init+0x148>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	607b      	str	r3, [r7, #4]
 8001f96:	4b36      	ldr	r3, [pc, #216]	; (8002070 <MX_GPIO_Init+0x148>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a35      	ldr	r2, [pc, #212]	; (8002070 <MX_GPIO_Init+0x148>)
 8001f9c:	f043 0302 	orr.w	r3, r3, #2
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b33      	ldr	r3, [pc, #204]	; (8002070 <MX_GPIO_Init+0x148>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	607b      	str	r3, [r7, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_S_GPIO_Port, LED_S_Pin, GPIO_PIN_RESET);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fb4:	482f      	ldr	r0, [pc, #188]	; (8002074 <MX_GPIO_Init+0x14c>)
 8001fb6:	f000 fdcf 	bl	8002b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2110      	movs	r1, #16
 8001fbe:	482e      	ldr	r0, [pc, #184]	; (8002078 <MX_GPIO_Init+0x150>)
 8001fc0:	f000 fdca 	bl	8002b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DW_RESET_Pin|DW_NSS1_WAKEUP_Pin, GPIO_PIN_RESET);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2103      	movs	r1, #3
 8001fc8:	482c      	ldr	r0, [pc, #176]	; (800207c <MX_GPIO_Init+0x154>)
 8001fca:	f000 fdc5 	bl	8002b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_r_Pin|LED_y_Pin|LED_g_Pin, GPIO_PIN_SET);
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001fd4:	4829      	ldr	r0, [pc, #164]	; (800207c <MX_GPIO_Init+0x154>)
 8001fd6:	f000 fdbf 	bl	8002b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_S_Pin */
  GPIO_InitStruct.Pin = LED_S_Pin;
 8001fda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_S_GPIO_Port, &GPIO_InitStruct);
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4820      	ldr	r0, [pc, #128]	; (8002074 <MX_GPIO_Init+0x14c>)
 8001ff4:	f000 fc2c 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pins : DW_IRQ2_Pin DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQ2_Pin|DW_IRQn_Pin;
 8001ff8:	2306      	movs	r3, #6
 8001ffa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ffc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002000:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002006:	f107 0314 	add.w	r3, r7, #20
 800200a:	4619      	mov	r1, r3
 800200c:	481a      	ldr	r0, [pc, #104]	; (8002078 <MX_GPIO_Init+0x150>)
 800200e:	f000 fc1f 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_NSS_Pin */
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 8002012:	2310      	movs	r3, #16
 8002014:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002016:	2301      	movs	r3, #1
 8002018:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201e:	2300      	movs	r3, #0
 8002020:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 8002022:	f107 0314 	add.w	r3, r7, #20
 8002026:	4619      	mov	r1, r3
 8002028:	4813      	ldr	r0, [pc, #76]	; (8002078 <MX_GPIO_Init+0x150>)
 800202a:	f000 fc11 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pins : DW_RESET_Pin DW_NSS1_WAKEUP_Pin */
  GPIO_InitStruct.Pin = DW_RESET_Pin|DW_NSS1_WAKEUP_Pin;
 800202e:	2303      	movs	r3, #3
 8002030:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002032:	2301      	movs	r3, #1
 8002034:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203a:	2300      	movs	r3, #0
 800203c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203e:	f107 0314 	add.w	r3, r7, #20
 8002042:	4619      	mov	r1, r3
 8002044:	480d      	ldr	r0, [pc, #52]	; (800207c <MX_GPIO_Init+0x154>)
 8002046:	f000 fc03 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_r_Pin LED_y_Pin LED_g_Pin */
  GPIO_InitStruct.Pin = LED_r_Pin|LED_y_Pin|LED_g_Pin;
 800204a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800204e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002050:	2301      	movs	r3, #1
 8002052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002054:	2301      	movs	r3, #1
 8002056:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002058:	2300      	movs	r3, #0
 800205a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	4619      	mov	r1, r3
 8002062:	4806      	ldr	r0, [pc, #24]	; (800207c <MX_GPIO_Init+0x154>)
 8002064:	f000 fbf4 	bl	8002850 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002068:	bf00      	nop
 800206a:	3728      	adds	r7, #40	; 0x28
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40023800 	.word	0x40023800
 8002074:	40020800 	.word	0x40020800
 8002078:	40020000 	.word	0x40020000
 800207c:	40020400 	.word	0x40020400

08002080 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002084:	b672      	cpsid	i
}
 8002086:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002088:	e7fe      	b.n	8002088 <Error_Handler+0x8>
	...

0800208c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	607b      	str	r3, [r7, #4]
 8002096:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <HAL_MspInit+0x4c>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	4a0f      	ldr	r2, [pc, #60]	; (80020d8 <HAL_MspInit+0x4c>)
 800209c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020a0:	6453      	str	r3, [r2, #68]	; 0x44
 80020a2:	4b0d      	ldr	r3, [pc, #52]	; (80020d8 <HAL_MspInit+0x4c>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020aa:	607b      	str	r3, [r7, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	603b      	str	r3, [r7, #0]
 80020b2:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <HAL_MspInit+0x4c>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	4a08      	ldr	r2, [pc, #32]	; (80020d8 <HAL_MspInit+0x4c>)
 80020b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020bc:	6413      	str	r3, [r2, #64]	; 0x40
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_MspInit+0x4c>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c6:	603b      	str	r3, [r7, #0]
 80020c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40023800 	.word	0x40023800

080020dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08a      	sub	sp, #40	; 0x28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a19      	ldr	r2, [pc, #100]	; (8002160 <HAL_SPI_MspInit+0x84>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d12b      	bne.n	8002156 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	4b18      	ldr	r3, [pc, #96]	; (8002164 <HAL_SPI_MspInit+0x88>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	4a17      	ldr	r2, [pc, #92]	; (8002164 <HAL_SPI_MspInit+0x88>)
 8002108:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800210c:	6453      	str	r3, [r2, #68]	; 0x44
 800210e:	4b15      	ldr	r3, [pc, #84]	; (8002164 <HAL_SPI_MspInit+0x88>)
 8002110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002112:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	4b11      	ldr	r3, [pc, #68]	; (8002164 <HAL_SPI_MspInit+0x88>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	4a10      	ldr	r2, [pc, #64]	; (8002164 <HAL_SPI_MspInit+0x88>)
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	6313      	str	r3, [r2, #48]	; 0x30
 800212a:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <HAL_SPI_MspInit+0x88>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002136:	23e0      	movs	r3, #224	; 0xe0
 8002138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213a:	2302      	movs	r3, #2
 800213c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002142:	2303      	movs	r3, #3
 8002144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002146:	2305      	movs	r3, #5
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214a:	f107 0314 	add.w	r3, r7, #20
 800214e:	4619      	mov	r1, r3
 8002150:	4805      	ldr	r0, [pc, #20]	; (8002168 <HAL_SPI_MspInit+0x8c>)
 8002152:	f000 fb7d 	bl	8002850 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002156:	bf00      	nop
 8002158:	3728      	adds	r7, #40	; 0x28
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40013000 	.word	0x40013000
 8002164:	40023800 	.word	0x40023800
 8002168:	40020000 	.word	0x40020000

0800216c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a0e      	ldr	r2, [pc, #56]	; (80021b4 <HAL_TIM_Base_MspInit+0x48>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d115      	bne.n	80021aa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	4b0d      	ldr	r3, [pc, #52]	; (80021b8 <HAL_TIM_Base_MspInit+0x4c>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002186:	4a0c      	ldr	r2, [pc, #48]	; (80021b8 <HAL_TIM_Base_MspInit+0x4c>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	6453      	str	r3, [r2, #68]	; 0x44
 800218e:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <HAL_TIM_Base_MspInit+0x4c>)
 8002190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800219a:	2200      	movs	r2, #0
 800219c:	2105      	movs	r1, #5
 800219e:	201b      	movs	r0, #27
 80021a0:	f000 fb11 	bl	80027c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80021a4:	201b      	movs	r0, #27
 80021a6:	f000 fb2a 	bl	80027fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40010000 	.word	0x40010000
 80021b8:	40023800 	.word	0x40023800

080021bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c4:	f107 030c 	add.w	r3, r7, #12
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]
 80021d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a12      	ldr	r2, [pc, #72]	; (8002224 <HAL_TIM_MspPostInit+0x68>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d11e      	bne.n	800221c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	4b11      	ldr	r3, [pc, #68]	; (8002228 <HAL_TIM_MspPostInit+0x6c>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	4a10      	ldr	r2, [pc, #64]	; (8002228 <HAL_TIM_MspPostInit+0x6c>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6313      	str	r3, [r2, #48]	; 0x30
 80021ee:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <HAL_TIM_MspPostInit+0x6c>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002200:	2302      	movs	r3, #2
 8002202:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002208:	2300      	movs	r3, #0
 800220a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800220c:	2301      	movs	r3, #1
 800220e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002210:	f107 030c 	add.w	r3, r7, #12
 8002214:	4619      	mov	r1, r3
 8002216:	4805      	ldr	r0, [pc, #20]	; (800222c <HAL_TIM_MspPostInit+0x70>)
 8002218:	f000 fb1a 	bl	8002850 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800221c:	bf00      	nop
 800221e:	3720      	adds	r7, #32
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40010000 	.word	0x40010000
 8002228:	40023800 	.word	0x40023800
 800222c:	40020000 	.word	0x40020000

08002230 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08a      	sub	sp, #40	; 0x28
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002238:	f107 0314 	add.w	r3, r7, #20
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a19      	ldr	r2, [pc, #100]	; (80022b4 <HAL_UART_MspInit+0x84>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d12b      	bne.n	80022aa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	4b18      	ldr	r3, [pc, #96]	; (80022b8 <HAL_UART_MspInit+0x88>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225a:	4a17      	ldr	r2, [pc, #92]	; (80022b8 <HAL_UART_MspInit+0x88>)
 800225c:	f043 0310 	orr.w	r3, r3, #16
 8002260:	6453      	str	r3, [r2, #68]	; 0x44
 8002262:	4b15      	ldr	r3, [pc, #84]	; (80022b8 <HAL_UART_MspInit+0x88>)
 8002264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002266:	f003 0310 	and.w	r3, r3, #16
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <HAL_UART_MspInit+0x88>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	4a10      	ldr	r2, [pc, #64]	; (80022b8 <HAL_UART_MspInit+0x88>)
 8002278:	f043 0302 	orr.w	r3, r3, #2
 800227c:	6313      	str	r3, [r2, #48]	; 0x30
 800227e:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <HAL_UART_MspInit+0x88>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800228a:	23c0      	movs	r3, #192	; 0xc0
 800228c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228e:	2302      	movs	r3, #2
 8002290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002296:	2303      	movs	r3, #3
 8002298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800229a:	2307      	movs	r3, #7
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800229e:	f107 0314 	add.w	r3, r7, #20
 80022a2:	4619      	mov	r1, r3
 80022a4:	4805      	ldr	r0, [pc, #20]	; (80022bc <HAL_UART_MspInit+0x8c>)
 80022a6:	f000 fad3 	bl	8002850 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80022aa:	bf00      	nop
 80022ac:	3728      	adds	r7, #40	; 0x28
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40011000 	.word	0x40011000
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40020400 	.word	0x40020400

080022c0 <SVC_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ce:	b480      	push	{r7}
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022ee:	f000 f927 	bl	8002540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022fc:	4802      	ldr	r0, [pc, #8]	; (8002308 <TIM1_CC_IRQHandler+0x10>)
 80022fe:	f001 fbe3 	bl	8003ac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	2000037c 	.word	0x2000037c

0800230c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return 1;
 8002310:	2301      	movs	r3, #1
}
 8002312:	4618      	mov	r0, r3
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <_kill>:

int _kill(int pid, int sig)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002326:	f011 fa15 	bl	8013754 <__errno>
 800232a:	4603      	mov	r3, r0
 800232c:	2216      	movs	r2, #22
 800232e:	601a      	str	r2, [r3, #0]
  return -1;
 8002330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002334:	4618      	mov	r0, r3
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <_exit>:

void _exit (int status)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002344:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff ffe7 	bl	800231c <_kill>
  while (1) {}    /* Make sure we hang here */
 800234e:	e7fe      	b.n	800234e <_exit+0x12>

08002350 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002358:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800235c:	4618      	mov	r0, r3
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002378:	605a      	str	r2, [r3, #4]
  return 0;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <_isatty>:

int _isatty(int file)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002390:	2301      	movs	r3, #1
}
 8002392:	4618      	mov	r0, r3
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800239e:	b480      	push	{r7}
 80023a0:	b085      	sub	sp, #20
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	60f8      	str	r0, [r7, #12]
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023c0:	4a14      	ldr	r2, [pc, #80]	; (8002414 <_sbrk+0x5c>)
 80023c2:	4b15      	ldr	r3, [pc, #84]	; (8002418 <_sbrk+0x60>)
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023cc:	4b13      	ldr	r3, [pc, #76]	; (800241c <_sbrk+0x64>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d102      	bne.n	80023da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023d4:	4b11      	ldr	r3, [pc, #68]	; (800241c <_sbrk+0x64>)
 80023d6:	4a12      	ldr	r2, [pc, #72]	; (8002420 <_sbrk+0x68>)
 80023d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023da:	4b10      	ldr	r3, [pc, #64]	; (800241c <_sbrk+0x64>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4413      	add	r3, r2
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d207      	bcs.n	80023f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023e8:	f011 f9b4 	bl	8013754 <__errno>
 80023ec:	4603      	mov	r3, r0
 80023ee:	220c      	movs	r2, #12
 80023f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023f6:	e009      	b.n	800240c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023f8:	4b08      	ldr	r3, [pc, #32]	; (800241c <_sbrk+0x64>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023fe:	4b07      	ldr	r3, [pc, #28]	; (800241c <_sbrk+0x64>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	4a05      	ldr	r2, [pc, #20]	; (800241c <_sbrk+0x64>)
 8002408:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800240a:	68fb      	ldr	r3, [r7, #12]
}
 800240c:	4618      	mov	r0, r3
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	20020000 	.word	0x20020000
 8002418:	00000400 	.word	0x00000400
 800241c:	2000040c 	.word	0x2000040c
 8002420:	20000618 	.word	0x20000618

08002424 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002428:	4b06      	ldr	r3, [pc, #24]	; (8002444 <SystemInit+0x20>)
 800242a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242e:	4a05      	ldr	r2, [pc, #20]	; (8002444 <SystemInit+0x20>)
 8002430:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002434:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002438:	bf00      	nop
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002448:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002480 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800244c:	480d      	ldr	r0, [pc, #52]	; (8002484 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800244e:	490e      	ldr	r1, [pc, #56]	; (8002488 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002450:	4a0e      	ldr	r2, [pc, #56]	; (800248c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002454:	e002      	b.n	800245c <LoopCopyDataInit>

08002456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800245a:	3304      	adds	r3, #4

0800245c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800245c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800245e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002460:	d3f9      	bcc.n	8002456 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002462:	4a0b      	ldr	r2, [pc, #44]	; (8002490 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002464:	4c0b      	ldr	r4, [pc, #44]	; (8002494 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002468:	e001      	b.n	800246e <LoopFillZerobss>

0800246a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800246a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800246c:	3204      	adds	r2, #4

0800246e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800246e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002470:	d3fb      	bcc.n	800246a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002472:	f7ff ffd7 	bl	8002424 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002476:	f011 fb63 	bl	8013b40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800247a:	f7ff fb77 	bl	8001b6c <main>
  bx  lr    
 800247e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002480:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002488:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 800248c:	080164dc 	.word	0x080164dc
  ldr r2, =_sbss
 8002490:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8002494:	20000618 	.word	0x20000618

08002498 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002498:	e7fe      	b.n	8002498 <ADC_IRQHandler>
	...

0800249c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024a0:	4b0e      	ldr	r3, [pc, #56]	; (80024dc <HAL_Init+0x40>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a0d      	ldr	r2, [pc, #52]	; (80024dc <HAL_Init+0x40>)
 80024a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024ac:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <HAL_Init+0x40>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a0a      	ldr	r2, [pc, #40]	; (80024dc <HAL_Init+0x40>)
 80024b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024b8:	4b08      	ldr	r3, [pc, #32]	; (80024dc <HAL_Init+0x40>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a07      	ldr	r2, [pc, #28]	; (80024dc <HAL_Init+0x40>)
 80024be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024c4:	2003      	movs	r0, #3
 80024c6:	f000 f973 	bl	80027b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ca:	2000      	movs	r0, #0
 80024cc:	f000 f808 	bl	80024e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024d0:	f7ff fddc 	bl	800208c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40023c00 	.word	0x40023c00

080024e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024e8:	4b12      	ldr	r3, [pc, #72]	; (8002534 <HAL_InitTick+0x54>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4b12      	ldr	r3, [pc, #72]	; (8002538 <HAL_InitTick+0x58>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	4619      	mov	r1, r3
 80024f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 f999 	bl	8002836 <HAL_SYSTICK_Config>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e00e      	b.n	800252c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b0f      	cmp	r3, #15
 8002512:	d80a      	bhi.n	800252a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002514:	2200      	movs	r2, #0
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800251c:	f000 f953 	bl	80027c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002520:	4a06      	ldr	r2, [pc, #24]	; (800253c <HAL_InitTick+0x5c>)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	e000      	b.n	800252c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
}
 800252c:	4618      	mov	r0, r3
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	20000050 	.word	0x20000050
 8002538:	20000058 	.word	0x20000058
 800253c:	20000054 	.word	0x20000054

08002540 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002544:	4b06      	ldr	r3, [pc, #24]	; (8002560 <HAL_IncTick+0x20>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	461a      	mov	r2, r3
 800254a:	4b06      	ldr	r3, [pc, #24]	; (8002564 <HAL_IncTick+0x24>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4413      	add	r3, r2
 8002550:	4a04      	ldr	r2, [pc, #16]	; (8002564 <HAL_IncTick+0x24>)
 8002552:	6013      	str	r3, [r2, #0]
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	20000058 	.word	0x20000058
 8002564:	20000410 	.word	0x20000410

08002568 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return uwTick;
 800256c:	4b03      	ldr	r3, [pc, #12]	; (800257c <HAL_GetTick+0x14>)
 800256e:	681b      	ldr	r3, [r3, #0]
}
 8002570:	4618      	mov	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	20000410 	.word	0x20000410

08002580 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002588:	f7ff ffee 	bl	8002568 <HAL_GetTick>
 800258c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002598:	d005      	beq.n	80025a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800259a:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <HAL_Delay+0x44>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	461a      	mov	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4413      	add	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025a6:	bf00      	nop
 80025a8:	f7ff ffde 	bl	8002568 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d8f7      	bhi.n	80025a8 <HAL_Delay+0x28>
  {
  }
}
 80025b8:	bf00      	nop
 80025ba:	bf00      	nop
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20000058 	.word	0x20000058

080025c8 <__NVIC_SetPriorityGrouping>:
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025d8:	4b0c      	ldr	r3, [pc, #48]	; (800260c <__NVIC_SetPriorityGrouping+0x44>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025e4:	4013      	ands	r3, r2
 80025e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025fa:	4a04      	ldr	r2, [pc, #16]	; (800260c <__NVIC_SetPriorityGrouping+0x44>)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	60d3      	str	r3, [r2, #12]
}
 8002600:	bf00      	nop
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <__NVIC_GetPriorityGrouping>:
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002614:	4b04      	ldr	r3, [pc, #16]	; (8002628 <__NVIC_GetPriorityGrouping+0x18>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	0a1b      	lsrs	r3, r3, #8
 800261a:	f003 0307 	and.w	r3, r3, #7
}
 800261e:	4618      	mov	r0, r3
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <__NVIC_EnableIRQ>:
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263a:	2b00      	cmp	r3, #0
 800263c:	db0b      	blt.n	8002656 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	f003 021f 	and.w	r2, r3, #31
 8002644:	4907      	ldr	r1, [pc, #28]	; (8002664 <__NVIC_EnableIRQ+0x38>)
 8002646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264a:	095b      	lsrs	r3, r3, #5
 800264c:	2001      	movs	r0, #1
 800264e:	fa00 f202 	lsl.w	r2, r0, r2
 8002652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	e000e100 	.word	0xe000e100

08002668 <__NVIC_DisableIRQ>:
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002676:	2b00      	cmp	r3, #0
 8002678:	db12      	blt.n	80026a0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800267a:	79fb      	ldrb	r3, [r7, #7]
 800267c:	f003 021f 	and.w	r2, r3, #31
 8002680:	490a      	ldr	r1, [pc, #40]	; (80026ac <__NVIC_DisableIRQ+0x44>)
 8002682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002686:	095b      	lsrs	r3, r3, #5
 8002688:	2001      	movs	r0, #1
 800268a:	fa00 f202 	lsl.w	r2, r0, r2
 800268e:	3320      	adds	r3, #32
 8002690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002694:	f3bf 8f4f 	dsb	sy
}
 8002698:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800269a:	f3bf 8f6f 	isb	sy
}
 800269e:	bf00      	nop
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	e000e100 	.word	0xe000e100

080026b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	6039      	str	r1, [r7, #0]
 80026ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	db0a      	blt.n	80026da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	490c      	ldr	r1, [pc, #48]	; (80026fc <__NVIC_SetPriority+0x4c>)
 80026ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ce:	0112      	lsls	r2, r2, #4
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	440b      	add	r3, r1
 80026d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026d8:	e00a      	b.n	80026f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	4908      	ldr	r1, [pc, #32]	; (8002700 <__NVIC_SetPriority+0x50>)
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	3b04      	subs	r3, #4
 80026e8:	0112      	lsls	r2, r2, #4
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	440b      	add	r3, r1
 80026ee:	761a      	strb	r2, [r3, #24]
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	e000e100 	.word	0xe000e100
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002704:	b480      	push	{r7}
 8002706:	b089      	sub	sp, #36	; 0x24
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f1c3 0307 	rsb	r3, r3, #7
 800271e:	2b04      	cmp	r3, #4
 8002720:	bf28      	it	cs
 8002722:	2304      	movcs	r3, #4
 8002724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	3304      	adds	r3, #4
 800272a:	2b06      	cmp	r3, #6
 800272c:	d902      	bls.n	8002734 <NVIC_EncodePriority+0x30>
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3b03      	subs	r3, #3
 8002732:	e000      	b.n	8002736 <NVIC_EncodePriority+0x32>
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002738:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43da      	mvns	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	401a      	ands	r2, r3
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800274c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	fa01 f303 	lsl.w	r3, r1, r3
 8002756:	43d9      	mvns	r1, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800275c:	4313      	orrs	r3, r2
         );
}
 800275e:	4618      	mov	r0, r3
 8002760:	3724      	adds	r7, #36	; 0x24
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
	...

0800276c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3b01      	subs	r3, #1
 8002778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800277c:	d301      	bcc.n	8002782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800277e:	2301      	movs	r3, #1
 8002780:	e00f      	b.n	80027a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002782:	4a0a      	ldr	r2, [pc, #40]	; (80027ac <SysTick_Config+0x40>)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3b01      	subs	r3, #1
 8002788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800278a:	210f      	movs	r1, #15
 800278c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002790:	f7ff ff8e 	bl	80026b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002794:	4b05      	ldr	r3, [pc, #20]	; (80027ac <SysTick_Config+0x40>)
 8002796:	2200      	movs	r2, #0
 8002798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800279a:	4b04      	ldr	r3, [pc, #16]	; (80027ac <SysTick_Config+0x40>)
 800279c:	2207      	movs	r2, #7
 800279e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	e000e010 	.word	0xe000e010

080027b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7ff ff05 	bl	80025c8 <__NVIC_SetPriorityGrouping>
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b086      	sub	sp, #24
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	4603      	mov	r3, r0
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	607a      	str	r2, [r7, #4]
 80027d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027d8:	f7ff ff1a 	bl	8002610 <__NVIC_GetPriorityGrouping>
 80027dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68b9      	ldr	r1, [r7, #8]
 80027e2:	6978      	ldr	r0, [r7, #20]
 80027e4:	f7ff ff8e 	bl	8002704 <NVIC_EncodePriority>
 80027e8:	4602      	mov	r2, r0
 80027ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ee:	4611      	mov	r1, r2
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ff5d 	bl	80026b0 <__NVIC_SetPriority>
}
 80027f6:	bf00      	nop
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	4603      	mov	r3, r0
 8002806:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff ff0d 	bl	800262c <__NVIC_EnableIRQ>
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
 8002820:	4603      	mov	r3, r0
 8002822:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff ff1d 	bl	8002668 <__NVIC_DisableIRQ>
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7ff ff94 	bl	800276c <SysTick_Config>
 8002844:	4603      	mov	r3, r0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002850:	b480      	push	{r7}
 8002852:	b089      	sub	sp, #36	; 0x24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800285e:	2300      	movs	r3, #0
 8002860:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002862:	2300      	movs	r3, #0
 8002864:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002866:	2300      	movs	r3, #0
 8002868:	61fb      	str	r3, [r7, #28]
 800286a:	e159      	b.n	8002b20 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800286c:	2201      	movs	r2, #1
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	4013      	ands	r3, r2
 800287e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	429a      	cmp	r2, r3
 8002886:	f040 8148 	bne.w	8002b1a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	2b01      	cmp	r3, #1
 8002894:	d005      	beq.n	80028a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d130      	bne.n	8002904 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	2203      	movs	r2, #3
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	43db      	mvns	r3, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4013      	ands	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028d8:	2201      	movs	r2, #1
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	091b      	lsrs	r3, r3, #4
 80028ee:	f003 0201 	and.w	r2, r3, #1
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 0303 	and.w	r3, r3, #3
 800290c:	2b03      	cmp	r3, #3
 800290e:	d017      	beq.n	8002940 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	2203      	movs	r2, #3
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	43db      	mvns	r3, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4013      	ands	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 0303 	and.w	r3, r3, #3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d123      	bne.n	8002994 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	08da      	lsrs	r2, r3, #3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3208      	adds	r2, #8
 8002954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002958:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	220f      	movs	r2, #15
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	43db      	mvns	r3, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4013      	ands	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	691a      	ldr	r2, [r3, #16]
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4313      	orrs	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	08da      	lsrs	r2, r3, #3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	3208      	adds	r2, #8
 800298e:	69b9      	ldr	r1, [r7, #24]
 8002990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	2203      	movs	r2, #3
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4013      	ands	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 0203 	and.w	r2, r3, #3
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4313      	orrs	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 80a2 	beq.w	8002b1a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	4b57      	ldr	r3, [pc, #348]	; (8002b38 <HAL_GPIO_Init+0x2e8>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	4a56      	ldr	r2, [pc, #344]	; (8002b38 <HAL_GPIO_Init+0x2e8>)
 80029e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029e4:	6453      	str	r3, [r2, #68]	; 0x44
 80029e6:	4b54      	ldr	r3, [pc, #336]	; (8002b38 <HAL_GPIO_Init+0x2e8>)
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029f2:	4a52      	ldr	r2, [pc, #328]	; (8002b3c <HAL_GPIO_Init+0x2ec>)
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	089b      	lsrs	r3, r3, #2
 80029f8:	3302      	adds	r3, #2
 80029fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	220f      	movs	r2, #15
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4013      	ands	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a49      	ldr	r2, [pc, #292]	; (8002b40 <HAL_GPIO_Init+0x2f0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d019      	beq.n	8002a52 <HAL_GPIO_Init+0x202>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a48      	ldr	r2, [pc, #288]	; (8002b44 <HAL_GPIO_Init+0x2f4>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d013      	beq.n	8002a4e <HAL_GPIO_Init+0x1fe>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a47      	ldr	r2, [pc, #284]	; (8002b48 <HAL_GPIO_Init+0x2f8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d00d      	beq.n	8002a4a <HAL_GPIO_Init+0x1fa>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a46      	ldr	r2, [pc, #280]	; (8002b4c <HAL_GPIO_Init+0x2fc>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d007      	beq.n	8002a46 <HAL_GPIO_Init+0x1f6>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a45      	ldr	r2, [pc, #276]	; (8002b50 <HAL_GPIO_Init+0x300>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d101      	bne.n	8002a42 <HAL_GPIO_Init+0x1f2>
 8002a3e:	2304      	movs	r3, #4
 8002a40:	e008      	b.n	8002a54 <HAL_GPIO_Init+0x204>
 8002a42:	2307      	movs	r3, #7
 8002a44:	e006      	b.n	8002a54 <HAL_GPIO_Init+0x204>
 8002a46:	2303      	movs	r3, #3
 8002a48:	e004      	b.n	8002a54 <HAL_GPIO_Init+0x204>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	e002      	b.n	8002a54 <HAL_GPIO_Init+0x204>
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e000      	b.n	8002a54 <HAL_GPIO_Init+0x204>
 8002a52:	2300      	movs	r3, #0
 8002a54:	69fa      	ldr	r2, [r7, #28]
 8002a56:	f002 0203 	and.w	r2, r2, #3
 8002a5a:	0092      	lsls	r2, r2, #2
 8002a5c:	4093      	lsls	r3, r2
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a64:	4935      	ldr	r1, [pc, #212]	; (8002b3c <HAL_GPIO_Init+0x2ec>)
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	089b      	lsrs	r3, r3, #2
 8002a6a:	3302      	adds	r3, #2
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a72:	4b38      	ldr	r3, [pc, #224]	; (8002b54 <HAL_GPIO_Init+0x304>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a96:	4a2f      	ldr	r2, [pc, #188]	; (8002b54 <HAL_GPIO_Init+0x304>)
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a9c:	4b2d      	ldr	r3, [pc, #180]	; (8002b54 <HAL_GPIO_Init+0x304>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ac0:	4a24      	ldr	r2, [pc, #144]	; (8002b54 <HAL_GPIO_Init+0x304>)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ac6:	4b23      	ldr	r3, [pc, #140]	; (8002b54 <HAL_GPIO_Init+0x304>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aea:	4a1a      	ldr	r2, [pc, #104]	; (8002b54 <HAL_GPIO_Init+0x304>)
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002af0:	4b18      	ldr	r3, [pc, #96]	; (8002b54 <HAL_GPIO_Init+0x304>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	43db      	mvns	r3, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b14:	4a0f      	ldr	r2, [pc, #60]	; (8002b54 <HAL_GPIO_Init+0x304>)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	61fb      	str	r3, [r7, #28]
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	2b0f      	cmp	r3, #15
 8002b24:	f67f aea2 	bls.w	800286c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b28:	bf00      	nop
 8002b2a:	bf00      	nop
 8002b2c:	3724      	adds	r7, #36	; 0x24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	40013800 	.word	0x40013800
 8002b40:	40020000 	.word	0x40020000
 8002b44:	40020400 	.word	0x40020400
 8002b48:	40020800 	.word	0x40020800
 8002b4c:	40020c00 	.word	0x40020c00
 8002b50:	40021000 	.word	0x40021000
 8002b54:	40013c00 	.word	0x40013c00

08002b58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	807b      	strh	r3, [r7, #2]
 8002b64:	4613      	mov	r3, r2
 8002b66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b68:	787b      	ldrb	r3, [r7, #1]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b6e:	887a      	ldrh	r2, [r7, #2]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b74:	e003      	b.n	8002b7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b76:	887b      	ldrh	r3, [r7, #2]
 8002b78:	041a      	lsls	r2, r3, #16
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	619a      	str	r2, [r3, #24]
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
	...

08002b8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e267      	b.n	800306e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d075      	beq.n	8002c96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002baa:	4b88      	ldr	r3, [pc, #544]	; (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d00c      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bb6:	4b85      	ldr	r3, [pc, #532]	; (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bbe:	2b08      	cmp	r3, #8
 8002bc0:	d112      	bne.n	8002be8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bc2:	4b82      	ldr	r3, [pc, #520]	; (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bce:	d10b      	bne.n	8002be8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd0:	4b7e      	ldr	r3, [pc, #504]	; (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d05b      	beq.n	8002c94 <HAL_RCC_OscConfig+0x108>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d157      	bne.n	8002c94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e242      	b.n	800306e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf0:	d106      	bne.n	8002c00 <HAL_RCC_OscConfig+0x74>
 8002bf2:	4b76      	ldr	r3, [pc, #472]	; (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a75      	ldr	r2, [pc, #468]	; (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	e01d      	b.n	8002c3c <HAL_RCC_OscConfig+0xb0>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c08:	d10c      	bne.n	8002c24 <HAL_RCC_OscConfig+0x98>
 8002c0a:	4b70      	ldr	r3, [pc, #448]	; (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a6f      	ldr	r2, [pc, #444]	; (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	4b6d      	ldr	r3, [pc, #436]	; (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a6c      	ldr	r2, [pc, #432]	; (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	e00b      	b.n	8002c3c <HAL_RCC_OscConfig+0xb0>
 8002c24:	4b69      	ldr	r3, [pc, #420]	; (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a68      	ldr	r2, [pc, #416]	; (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c2e:	6013      	str	r3, [r2, #0]
 8002c30:	4b66      	ldr	r3, [pc, #408]	; (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a65      	ldr	r2, [pc, #404]	; (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d013      	beq.n	8002c6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c44:	f7ff fc90 	bl	8002568 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c4c:	f7ff fc8c 	bl	8002568 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b64      	cmp	r3, #100	; 0x64
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e207      	b.n	800306e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5e:	4b5b      	ldr	r3, [pc, #364]	; (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0f0      	beq.n	8002c4c <HAL_RCC_OscConfig+0xc0>
 8002c6a:	e014      	b.n	8002c96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6c:	f7ff fc7c 	bl	8002568 <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c74:	f7ff fc78 	bl	8002568 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b64      	cmp	r3, #100	; 0x64
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e1f3      	b.n	800306e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c86:	4b51      	ldr	r3, [pc, #324]	; (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1f0      	bne.n	8002c74 <HAL_RCC_OscConfig+0xe8>
 8002c92:	e000      	b.n	8002c96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d063      	beq.n	8002d6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ca2:	4b4a      	ldr	r3, [pc, #296]	; (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00b      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cae:	4b47      	ldr	r3, [pc, #284]	; (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d11c      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cba:	4b44      	ldr	r3, [pc, #272]	; (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d116      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc6:	4b41      	ldr	r3, [pc, #260]	; (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d005      	beq.n	8002cde <HAL_RCC_OscConfig+0x152>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d001      	beq.n	8002cde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e1c7      	b.n	800306e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cde:	4b3b      	ldr	r3, [pc, #236]	; (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	4937      	ldr	r1, [pc, #220]	; (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf2:	e03a      	b.n	8002d6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d020      	beq.n	8002d3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cfc:	4b34      	ldr	r3, [pc, #208]	; (8002dd0 <HAL_RCC_OscConfig+0x244>)
 8002cfe:	2201      	movs	r2, #1
 8002d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d02:	f7ff fc31 	bl	8002568 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d0a:	f7ff fc2d 	bl	8002568 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e1a8      	b.n	800306e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1c:	4b2b      	ldr	r3, [pc, #172]	; (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0f0      	beq.n	8002d0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d28:	4b28      	ldr	r3, [pc, #160]	; (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	4925      	ldr	r1, [pc, #148]	; (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	600b      	str	r3, [r1, #0]
 8002d3c:	e015      	b.n	8002d6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d3e:	4b24      	ldr	r3, [pc, #144]	; (8002dd0 <HAL_RCC_OscConfig+0x244>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d44:	f7ff fc10 	bl	8002568 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d4c:	f7ff fc0c 	bl	8002568 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e187      	b.n	800306e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d5e:	4b1b      	ldr	r3, [pc, #108]	; (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d036      	beq.n	8002de4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d016      	beq.n	8002dac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d7e:	4b15      	ldr	r3, [pc, #84]	; (8002dd4 <HAL_RCC_OscConfig+0x248>)
 8002d80:	2201      	movs	r2, #1
 8002d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d84:	f7ff fbf0 	bl	8002568 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d8c:	f7ff fbec 	bl	8002568 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e167      	b.n	800306e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d9e:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0f0      	beq.n	8002d8c <HAL_RCC_OscConfig+0x200>
 8002daa:	e01b      	b.n	8002de4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dac:	4b09      	ldr	r3, [pc, #36]	; (8002dd4 <HAL_RCC_OscConfig+0x248>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db2:	f7ff fbd9 	bl	8002568 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db8:	e00e      	b.n	8002dd8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dba:	f7ff fbd5 	bl	8002568 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d907      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e150      	b.n	800306e <HAL_RCC_OscConfig+0x4e2>
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	42470000 	.word	0x42470000
 8002dd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd8:	4b88      	ldr	r3, [pc, #544]	; (8002ffc <HAL_RCC_OscConfig+0x470>)
 8002dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1ea      	bne.n	8002dba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 8097 	beq.w	8002f20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002df2:	2300      	movs	r3, #0
 8002df4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002df6:	4b81      	ldr	r3, [pc, #516]	; (8002ffc <HAL_RCC_OscConfig+0x470>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10f      	bne.n	8002e22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	4b7d      	ldr	r3, [pc, #500]	; (8002ffc <HAL_RCC_OscConfig+0x470>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	4a7c      	ldr	r2, [pc, #496]	; (8002ffc <HAL_RCC_OscConfig+0x470>)
 8002e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e10:	6413      	str	r3, [r2, #64]	; 0x40
 8002e12:	4b7a      	ldr	r3, [pc, #488]	; (8002ffc <HAL_RCC_OscConfig+0x470>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1a:	60bb      	str	r3, [r7, #8]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e22:	4b77      	ldr	r3, [pc, #476]	; (8003000 <HAL_RCC_OscConfig+0x474>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d118      	bne.n	8002e60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e2e:	4b74      	ldr	r3, [pc, #464]	; (8003000 <HAL_RCC_OscConfig+0x474>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a73      	ldr	r2, [pc, #460]	; (8003000 <HAL_RCC_OscConfig+0x474>)
 8002e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e3a:	f7ff fb95 	bl	8002568 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e42:	f7ff fb91 	bl	8002568 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e10c      	b.n	800306e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e54:	4b6a      	ldr	r3, [pc, #424]	; (8003000 <HAL_RCC_OscConfig+0x474>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0f0      	beq.n	8002e42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d106      	bne.n	8002e76 <HAL_RCC_OscConfig+0x2ea>
 8002e68:	4b64      	ldr	r3, [pc, #400]	; (8002ffc <HAL_RCC_OscConfig+0x470>)
 8002e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6c:	4a63      	ldr	r2, [pc, #396]	; (8002ffc <HAL_RCC_OscConfig+0x470>)
 8002e6e:	f043 0301 	orr.w	r3, r3, #1
 8002e72:	6713      	str	r3, [r2, #112]	; 0x70
 8002e74:	e01c      	b.n	8002eb0 <HAL_RCC_OscConfig+0x324>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	2b05      	cmp	r3, #5
 8002e7c:	d10c      	bne.n	8002e98 <HAL_RCC_OscConfig+0x30c>
 8002e7e:	4b5f      	ldr	r3, [pc, #380]	; (8002ffc <HAL_RCC_OscConfig+0x470>)
 8002e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e82:	4a5e      	ldr	r2, [pc, #376]	; (8002ffc <HAL_RCC_OscConfig+0x470>)
 8002e84:	f043 0304 	orr.w	r3, r3, #4
 8002e88:	6713      	str	r3, [r2, #112]	; 0x70
 8002e8a:	4b5c      	ldr	r3, [pc, #368]	; (8002ffc <HAL_RCC_OscConfig+0x470>)
 8002e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8e:	4a5b      	ldr	r2, [pc, #364]	; (8002ffc <HAL_RCC_OscConfig+0x470>)
 8002e90:	f043 0301 	orr.w	r3, r3, #1
 8002e94:	6713      	str	r3, [r2, #112]	; 0x70
 8002e96:	e00b      	b.n	8002eb0 <HAL_RCC_OscConfig+0x324>
 8002e98:	4b58      	ldr	r3, [pc, #352]	; (8002ffc <HAL_RCC_OscConfig+0x470>)
 8002e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9c:	4a57      	ldr	r2, [pc, #348]	; (8002ffc <HAL_RCC_OscConfig+0x470>)
 8002e9e:	f023 0301 	bic.w	r3, r3, #1
 8002ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea4:	4b55      	ldr	r3, [pc, #340]	; (8002ffc <HAL_RCC_OscConfig+0x470>)
 8002ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea8:	4a54      	ldr	r2, [pc, #336]	; (8002ffc <HAL_RCC_OscConfig+0x470>)
 8002eaa:	f023 0304 	bic.w	r3, r3, #4
 8002eae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d015      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb8:	f7ff fb56 	bl	8002568 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ebe:	e00a      	b.n	8002ed6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec0:	f7ff fb52 	bl	8002568 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e0cb      	b.n	800306e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed6:	4b49      	ldr	r3, [pc, #292]	; (8002ffc <HAL_RCC_OscConfig+0x470>)
 8002ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0ee      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x334>
 8002ee2:	e014      	b.n	8002f0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee4:	f7ff fb40 	bl	8002568 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eea:	e00a      	b.n	8002f02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eec:	f7ff fb3c 	bl	8002568 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e0b5      	b.n	800306e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f02:	4b3e      	ldr	r3, [pc, #248]	; (8002ffc <HAL_RCC_OscConfig+0x470>)
 8002f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1ee      	bne.n	8002eec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f0e:	7dfb      	ldrb	r3, [r7, #23]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d105      	bne.n	8002f20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f14:	4b39      	ldr	r3, [pc, #228]	; (8002ffc <HAL_RCC_OscConfig+0x470>)
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	4a38      	ldr	r2, [pc, #224]	; (8002ffc <HAL_RCC_OscConfig+0x470>)
 8002f1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 80a1 	beq.w	800306c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f2a:	4b34      	ldr	r3, [pc, #208]	; (8002ffc <HAL_RCC_OscConfig+0x470>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 030c 	and.w	r3, r3, #12
 8002f32:	2b08      	cmp	r3, #8
 8002f34:	d05c      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d141      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f3e:	4b31      	ldr	r3, [pc, #196]	; (8003004 <HAL_RCC_OscConfig+0x478>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f44:	f7ff fb10 	bl	8002568 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f4c:	f7ff fb0c 	bl	8002568 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e087      	b.n	800306e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f5e:	4b27      	ldr	r3, [pc, #156]	; (8002ffc <HAL_RCC_OscConfig+0x470>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1f0      	bne.n	8002f4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69da      	ldr	r2, [r3, #28]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	019b      	lsls	r3, r3, #6
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f80:	085b      	lsrs	r3, r3, #1
 8002f82:	3b01      	subs	r3, #1
 8002f84:	041b      	lsls	r3, r3, #16
 8002f86:	431a      	orrs	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8c:	061b      	lsls	r3, r3, #24
 8002f8e:	491b      	ldr	r1, [pc, #108]	; (8002ffc <HAL_RCC_OscConfig+0x470>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f94:	4b1b      	ldr	r3, [pc, #108]	; (8003004 <HAL_RCC_OscConfig+0x478>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9a:	f7ff fae5 	bl	8002568 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa2:	f7ff fae1 	bl	8002568 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e05c      	b.n	800306e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb4:	4b11      	ldr	r3, [pc, #68]	; (8002ffc <HAL_RCC_OscConfig+0x470>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0f0      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x416>
 8002fc0:	e054      	b.n	800306c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc2:	4b10      	ldr	r3, [pc, #64]	; (8003004 <HAL_RCC_OscConfig+0x478>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc8:	f7ff face 	bl	8002568 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd0:	f7ff faca 	bl	8002568 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e045      	b.n	800306e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe2:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <HAL_RCC_OscConfig+0x470>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x444>
 8002fee:	e03d      	b.n	800306c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d107      	bne.n	8003008 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e038      	b.n	800306e <HAL_RCC_OscConfig+0x4e2>
 8002ffc:	40023800 	.word	0x40023800
 8003000:	40007000 	.word	0x40007000
 8003004:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003008:	4b1b      	ldr	r3, [pc, #108]	; (8003078 <HAL_RCC_OscConfig+0x4ec>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d028      	beq.n	8003068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003020:	429a      	cmp	r2, r3
 8003022:	d121      	bne.n	8003068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800302e:	429a      	cmp	r2, r3
 8003030:	d11a      	bne.n	8003068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003038:	4013      	ands	r3, r2
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800303e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003040:	4293      	cmp	r3, r2
 8003042:	d111      	bne.n	8003068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304e:	085b      	lsrs	r3, r3, #1
 8003050:	3b01      	subs	r3, #1
 8003052:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003054:	429a      	cmp	r2, r3
 8003056:	d107      	bne.n	8003068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003062:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003064:	429a      	cmp	r2, r3
 8003066:	d001      	beq.n	800306c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e000      	b.n	800306e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40023800 	.word	0x40023800

0800307c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0cc      	b.n	800322a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003090:	4b68      	ldr	r3, [pc, #416]	; (8003234 <HAL_RCC_ClockConfig+0x1b8>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d90c      	bls.n	80030b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309e:	4b65      	ldr	r3, [pc, #404]	; (8003234 <HAL_RCC_ClockConfig+0x1b8>)
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a6:	4b63      	ldr	r3, [pc, #396]	; (8003234 <HAL_RCC_ClockConfig+0x1b8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d001      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e0b8      	b.n	800322a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d020      	beq.n	8003106 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d005      	beq.n	80030dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030d0:	4b59      	ldr	r3, [pc, #356]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	4a58      	ldr	r2, [pc, #352]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 80030d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030e8:	4b53      	ldr	r3, [pc, #332]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	4a52      	ldr	r2, [pc, #328]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 80030ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f4:	4b50      	ldr	r3, [pc, #320]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	494d      	ldr	r1, [pc, #308]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	4313      	orrs	r3, r2
 8003104:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d044      	beq.n	800319c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d107      	bne.n	800312a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311a:	4b47      	ldr	r3, [pc, #284]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d119      	bne.n	800315a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e07f      	b.n	800322a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b02      	cmp	r3, #2
 8003130:	d003      	beq.n	800313a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003136:	2b03      	cmp	r3, #3
 8003138:	d107      	bne.n	800314a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800313a:	4b3f      	ldr	r3, [pc, #252]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d109      	bne.n	800315a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e06f      	b.n	800322a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314a:	4b3b      	ldr	r3, [pc, #236]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e067      	b.n	800322a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800315a:	4b37      	ldr	r3, [pc, #220]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f023 0203 	bic.w	r2, r3, #3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	4934      	ldr	r1, [pc, #208]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 8003168:	4313      	orrs	r3, r2
 800316a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800316c:	f7ff f9fc 	bl	8002568 <HAL_GetTick>
 8003170:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003172:	e00a      	b.n	800318a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003174:	f7ff f9f8 	bl	8002568 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003182:	4293      	cmp	r3, r2
 8003184:	d901      	bls.n	800318a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e04f      	b.n	800322a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318a:	4b2b      	ldr	r3, [pc, #172]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 020c 	and.w	r2, r3, #12
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	429a      	cmp	r2, r3
 800319a:	d1eb      	bne.n	8003174 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800319c:	4b25      	ldr	r3, [pc, #148]	; (8003234 <HAL_RCC_ClockConfig+0x1b8>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d20c      	bcs.n	80031c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031aa:	4b22      	ldr	r3, [pc, #136]	; (8003234 <HAL_RCC_ClockConfig+0x1b8>)
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b2:	4b20      	ldr	r3, [pc, #128]	; (8003234 <HAL_RCC_ClockConfig+0x1b8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d001      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e032      	b.n	800322a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d008      	beq.n	80031e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031d0:	4b19      	ldr	r3, [pc, #100]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	4916      	ldr	r1, [pc, #88]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d009      	beq.n	8003202 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ee:	4b12      	ldr	r3, [pc, #72]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	490e      	ldr	r1, [pc, #56]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003202:	f000 f821 	bl	8003248 <HAL_RCC_GetSysClockFreq>
 8003206:	4602      	mov	r2, r0
 8003208:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	091b      	lsrs	r3, r3, #4
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	490a      	ldr	r1, [pc, #40]	; (800323c <HAL_RCC_ClockConfig+0x1c0>)
 8003214:	5ccb      	ldrb	r3, [r1, r3]
 8003216:	fa22 f303 	lsr.w	r3, r2, r3
 800321a:	4a09      	ldr	r2, [pc, #36]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 800321c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800321e:	4b09      	ldr	r3, [pc, #36]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff f95c 	bl	80024e0 <HAL_InitTick>

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	40023c00 	.word	0x40023c00
 8003238:	40023800 	.word	0x40023800
 800323c:	08015c4c 	.word	0x08015c4c
 8003240:	20000050 	.word	0x20000050
 8003244:	20000054 	.word	0x20000054

08003248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800324c:	b090      	sub	sp, #64	; 0x40
 800324e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	637b      	str	r3, [r7, #52]	; 0x34
 8003254:	2300      	movs	r3, #0
 8003256:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003258:	2300      	movs	r3, #0
 800325a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003260:	4b59      	ldr	r3, [pc, #356]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 030c 	and.w	r3, r3, #12
 8003268:	2b08      	cmp	r3, #8
 800326a:	d00d      	beq.n	8003288 <HAL_RCC_GetSysClockFreq+0x40>
 800326c:	2b08      	cmp	r3, #8
 800326e:	f200 80a1 	bhi.w	80033b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <HAL_RCC_GetSysClockFreq+0x34>
 8003276:	2b04      	cmp	r3, #4
 8003278:	d003      	beq.n	8003282 <HAL_RCC_GetSysClockFreq+0x3a>
 800327a:	e09b      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800327c:	4b53      	ldr	r3, [pc, #332]	; (80033cc <HAL_RCC_GetSysClockFreq+0x184>)
 800327e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003280:	e09b      	b.n	80033ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003282:	4b53      	ldr	r3, [pc, #332]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003284:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003286:	e098      	b.n	80033ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003288:	4b4f      	ldr	r3, [pc, #316]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003290:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003292:	4b4d      	ldr	r3, [pc, #308]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d028      	beq.n	80032f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800329e:	4b4a      	ldr	r3, [pc, #296]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	099b      	lsrs	r3, r3, #6
 80032a4:	2200      	movs	r2, #0
 80032a6:	623b      	str	r3, [r7, #32]
 80032a8:	627a      	str	r2, [r7, #36]	; 0x24
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80032b0:	2100      	movs	r1, #0
 80032b2:	4b47      	ldr	r3, [pc, #284]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80032b4:	fb03 f201 	mul.w	r2, r3, r1
 80032b8:	2300      	movs	r3, #0
 80032ba:	fb00 f303 	mul.w	r3, r0, r3
 80032be:	4413      	add	r3, r2
 80032c0:	4a43      	ldr	r2, [pc, #268]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80032c2:	fba0 1202 	umull	r1, r2, r0, r2
 80032c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032c8:	460a      	mov	r2, r1
 80032ca:	62ba      	str	r2, [r7, #40]	; 0x28
 80032cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032ce:	4413      	add	r3, r2
 80032d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d4:	2200      	movs	r2, #0
 80032d6:	61bb      	str	r3, [r7, #24]
 80032d8:	61fa      	str	r2, [r7, #28]
 80032da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80032e2:	f7fd fceb 	bl	8000cbc <__aeabi_uldivmod>
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	4613      	mov	r3, r2
 80032ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032ee:	e053      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032f0:	4b35      	ldr	r3, [pc, #212]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	099b      	lsrs	r3, r3, #6
 80032f6:	2200      	movs	r2, #0
 80032f8:	613b      	str	r3, [r7, #16]
 80032fa:	617a      	str	r2, [r7, #20]
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003302:	f04f 0b00 	mov.w	fp, #0
 8003306:	4652      	mov	r2, sl
 8003308:	465b      	mov	r3, fp
 800330a:	f04f 0000 	mov.w	r0, #0
 800330e:	f04f 0100 	mov.w	r1, #0
 8003312:	0159      	lsls	r1, r3, #5
 8003314:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003318:	0150      	lsls	r0, r2, #5
 800331a:	4602      	mov	r2, r0
 800331c:	460b      	mov	r3, r1
 800331e:	ebb2 080a 	subs.w	r8, r2, sl
 8003322:	eb63 090b 	sbc.w	r9, r3, fp
 8003326:	f04f 0200 	mov.w	r2, #0
 800332a:	f04f 0300 	mov.w	r3, #0
 800332e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003332:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003336:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800333a:	ebb2 0408 	subs.w	r4, r2, r8
 800333e:	eb63 0509 	sbc.w	r5, r3, r9
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	f04f 0300 	mov.w	r3, #0
 800334a:	00eb      	lsls	r3, r5, #3
 800334c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003350:	00e2      	lsls	r2, r4, #3
 8003352:	4614      	mov	r4, r2
 8003354:	461d      	mov	r5, r3
 8003356:	eb14 030a 	adds.w	r3, r4, sl
 800335a:	603b      	str	r3, [r7, #0]
 800335c:	eb45 030b 	adc.w	r3, r5, fp
 8003360:	607b      	str	r3, [r7, #4]
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	f04f 0300 	mov.w	r3, #0
 800336a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800336e:	4629      	mov	r1, r5
 8003370:	028b      	lsls	r3, r1, #10
 8003372:	4621      	mov	r1, r4
 8003374:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003378:	4621      	mov	r1, r4
 800337a:	028a      	lsls	r2, r1, #10
 800337c:	4610      	mov	r0, r2
 800337e:	4619      	mov	r1, r3
 8003380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003382:	2200      	movs	r2, #0
 8003384:	60bb      	str	r3, [r7, #8]
 8003386:	60fa      	str	r2, [r7, #12]
 8003388:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800338c:	f7fd fc96 	bl	8000cbc <__aeabi_uldivmod>
 8003390:	4602      	mov	r2, r0
 8003392:	460b      	mov	r3, r1
 8003394:	4613      	mov	r3, r2
 8003396:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003398:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	0c1b      	lsrs	r3, r3, #16
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	3301      	adds	r3, #1
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80033a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033b2:	e002      	b.n	80033ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033b4:	4b05      	ldr	r3, [pc, #20]	; (80033cc <HAL_RCC_GetSysClockFreq+0x184>)
 80033b6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3740      	adds	r7, #64	; 0x40
 80033c0:	46bd      	mov	sp, r7
 80033c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033c6:	bf00      	nop
 80033c8:	40023800 	.word	0x40023800
 80033cc:	00f42400 	.word	0x00f42400
 80033d0:	017d7840 	.word	0x017d7840

080033d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033d8:	4b03      	ldr	r3, [pc, #12]	; (80033e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80033da:	681b      	ldr	r3, [r3, #0]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	20000050 	.word	0x20000050

080033ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033f0:	f7ff fff0 	bl	80033d4 <HAL_RCC_GetHCLKFreq>
 80033f4:	4602      	mov	r2, r0
 80033f6:	4b05      	ldr	r3, [pc, #20]	; (800340c <HAL_RCC_GetPCLK1Freq+0x20>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	0a9b      	lsrs	r3, r3, #10
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	4903      	ldr	r1, [pc, #12]	; (8003410 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003402:	5ccb      	ldrb	r3, [r1, r3]
 8003404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003408:	4618      	mov	r0, r3
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40023800 	.word	0x40023800
 8003410:	08015c5c 	.word	0x08015c5c

08003414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003418:	f7ff ffdc 	bl	80033d4 <HAL_RCC_GetHCLKFreq>
 800341c:	4602      	mov	r2, r0
 800341e:	4b05      	ldr	r3, [pc, #20]	; (8003434 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	0b5b      	lsrs	r3, r3, #13
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	4903      	ldr	r1, [pc, #12]	; (8003438 <HAL_RCC_GetPCLK2Freq+0x24>)
 800342a:	5ccb      	ldrb	r3, [r1, r3]
 800342c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003430:	4618      	mov	r0, r3
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40023800 	.word	0x40023800
 8003438:	08015c5c 	.word	0x08015c5c

0800343c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e07b      	b.n	8003546 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	2b00      	cmp	r3, #0
 8003454:	d108      	bne.n	8003468 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800345e:	d009      	beq.n	8003474 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	61da      	str	r2, [r3, #28]
 8003466:	e005      	b.n	8003474 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d106      	bne.n	8003494 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7fe fe24 	bl	80020dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	431a      	orrs	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034e4:	431a      	orrs	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f8:	ea42 0103 	orr.w	r1, r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003500:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	0c1b      	lsrs	r3, r3, #16
 8003512:	f003 0104 	and.w	r1, r3, #4
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	f003 0210 	and.w	r2, r3, #16
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	69da      	ldr	r2, [r3, #28]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003534:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b088      	sub	sp, #32
 8003552:	af00      	add	r7, sp, #0
 8003554:	60f8      	str	r0, [r7, #12]
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	603b      	str	r3, [r7, #0]
 800355a:	4613      	mov	r3, r2
 800355c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800355e:	2300      	movs	r3, #0
 8003560:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003568:	2b01      	cmp	r3, #1
 800356a:	d101      	bne.n	8003570 <HAL_SPI_Transmit+0x22>
 800356c:	2302      	movs	r3, #2
 800356e:	e126      	b.n	80037be <HAL_SPI_Transmit+0x270>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003578:	f7fe fff6 	bl	8002568 <HAL_GetTick>
 800357c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800357e:	88fb      	ldrh	r3, [r7, #6]
 8003580:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b01      	cmp	r3, #1
 800358c:	d002      	beq.n	8003594 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800358e:	2302      	movs	r3, #2
 8003590:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003592:	e10b      	b.n	80037ac <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d002      	beq.n	80035a0 <HAL_SPI_Transmit+0x52>
 800359a:	88fb      	ldrh	r3, [r7, #6]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d102      	bne.n	80035a6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035a4:	e102      	b.n	80037ac <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2203      	movs	r2, #3
 80035aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	88fa      	ldrh	r2, [r7, #6]
 80035be:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	88fa      	ldrh	r2, [r7, #6]
 80035c4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ec:	d10f      	bne.n	800360e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800360c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003618:	2b40      	cmp	r3, #64	; 0x40
 800361a:	d007      	beq.n	800362c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800362a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003634:	d14b      	bne.n	80036ce <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <HAL_SPI_Transmit+0xf6>
 800363e:	8afb      	ldrh	r3, [r7, #22]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d13e      	bne.n	80036c2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003648:	881a      	ldrh	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	1c9a      	adds	r2, r3, #2
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800365e:	b29b      	uxth	r3, r3
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003668:	e02b      	b.n	80036c2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b02      	cmp	r3, #2
 8003676:	d112      	bne.n	800369e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367c:	881a      	ldrh	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003688:	1c9a      	adds	r2, r3, #2
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003692:	b29b      	uxth	r3, r3
 8003694:	3b01      	subs	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	86da      	strh	r2, [r3, #54]	; 0x36
 800369c:	e011      	b.n	80036c2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800369e:	f7fe ff63 	bl	8002568 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d803      	bhi.n	80036b6 <HAL_SPI_Transmit+0x168>
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036b4:	d102      	bne.n	80036bc <HAL_SPI_Transmit+0x16e>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d102      	bne.n	80036c2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036c0:	e074      	b.n	80037ac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1ce      	bne.n	800366a <HAL_SPI_Transmit+0x11c>
 80036cc:	e04c      	b.n	8003768 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d002      	beq.n	80036dc <HAL_SPI_Transmit+0x18e>
 80036d6:	8afb      	ldrh	r3, [r7, #22]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d140      	bne.n	800375e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	330c      	adds	r3, #12
 80036e6:	7812      	ldrb	r2, [r2, #0]
 80036e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	1c5a      	adds	r2, r3, #1
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003702:	e02c      	b.n	800375e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b02      	cmp	r3, #2
 8003710:	d113      	bne.n	800373a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	330c      	adds	r3, #12
 800371c:	7812      	ldrb	r2, [r2, #0]
 800371e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003724:	1c5a      	adds	r2, r3, #1
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	86da      	strh	r2, [r3, #54]	; 0x36
 8003738:	e011      	b.n	800375e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800373a:	f7fe ff15 	bl	8002568 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d803      	bhi.n	8003752 <HAL_SPI_Transmit+0x204>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003750:	d102      	bne.n	8003758 <HAL_SPI_Transmit+0x20a>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d102      	bne.n	800375e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800375c:	e026      	b.n	80037ac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003762:	b29b      	uxth	r3, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1cd      	bne.n	8003704 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	6839      	ldr	r1, [r7, #0]
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 f8c1 	bl	80038f4 <SPI_EndRxTxTransaction>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d002      	beq.n	800377e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10a      	bne.n	800379c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003786:	2300      	movs	r3, #0
 8003788:	613b      	str	r3, [r7, #16]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	613b      	str	r3, [r7, #16]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	613b      	str	r3, [r7, #16]
 800379a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d002      	beq.n	80037aa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	77fb      	strb	r3, [r7, #31]
 80037a8:	e000      	b.n	80037ac <HAL_SPI_Transmit+0x25e>
  }

error:
 80037aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3720      	adds	r7, #32
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b083      	sub	sp, #12
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037d4:	b2db      	uxtb	r3, r3
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
	...

080037e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b088      	sub	sp, #32
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	603b      	str	r3, [r7, #0]
 80037f0:	4613      	mov	r3, r2
 80037f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037f4:	f7fe feb8 	bl	8002568 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fc:	1a9b      	subs	r3, r3, r2
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	4413      	add	r3, r2
 8003802:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003804:	f7fe feb0 	bl	8002568 <HAL_GetTick>
 8003808:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800380a:	4b39      	ldr	r3, [pc, #228]	; (80038f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	015b      	lsls	r3, r3, #5
 8003810:	0d1b      	lsrs	r3, r3, #20
 8003812:	69fa      	ldr	r2, [r7, #28]
 8003814:	fb02 f303 	mul.w	r3, r2, r3
 8003818:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800381a:	e054      	b.n	80038c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003822:	d050      	beq.n	80038c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003824:	f7fe fea0 	bl	8002568 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	69fa      	ldr	r2, [r7, #28]
 8003830:	429a      	cmp	r2, r3
 8003832:	d902      	bls.n	800383a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d13d      	bne.n	80038b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003848:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003852:	d111      	bne.n	8003878 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800385c:	d004      	beq.n	8003868 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003866:	d107      	bne.n	8003878 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003876:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003880:	d10f      	bne.n	80038a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e017      	b.n	80038e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038bc:	2300      	movs	r3, #0
 80038be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	4013      	ands	r3, r2
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	bf0c      	ite	eq
 80038d6:	2301      	moveq	r3, #1
 80038d8:	2300      	movne	r3, #0
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	461a      	mov	r2, r3
 80038de:	79fb      	ldrb	r3, [r7, #7]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d19b      	bne.n	800381c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3720      	adds	r7, #32
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	20000050 	.word	0x20000050

080038f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af02      	add	r7, sp, #8
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003900:	4b1b      	ldr	r3, [pc, #108]	; (8003970 <SPI_EndRxTxTransaction+0x7c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a1b      	ldr	r2, [pc, #108]	; (8003974 <SPI_EndRxTxTransaction+0x80>)
 8003906:	fba2 2303 	umull	r2, r3, r2, r3
 800390a:	0d5b      	lsrs	r3, r3, #21
 800390c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003910:	fb02 f303 	mul.w	r3, r2, r3
 8003914:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800391e:	d112      	bne.n	8003946 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	2200      	movs	r2, #0
 8003928:	2180      	movs	r1, #128	; 0x80
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f7ff ff5a 	bl	80037e4 <SPI_WaitFlagStateUntilTimeout>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d016      	beq.n	8003964 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393a:	f043 0220 	orr.w	r2, r3, #32
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e00f      	b.n	8003966 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00a      	beq.n	8003962 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	3b01      	subs	r3, #1
 8003950:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395c:	2b80      	cmp	r3, #128	; 0x80
 800395e:	d0f2      	beq.n	8003946 <SPI_EndRxTxTransaction+0x52>
 8003960:	e000      	b.n	8003964 <SPI_EndRxTxTransaction+0x70>
        break;
 8003962:	bf00      	nop
  }

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	20000050 	.word	0x20000050
 8003974:	165e9f81 	.word	0x165e9f81

08003978 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e041      	b.n	8003a0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d106      	bne.n	80039a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7fe fbe4 	bl	800216c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2202      	movs	r2, #2
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	3304      	adds	r3, #4
 80039b4:	4619      	mov	r1, r3
 80039b6:	4610      	mov	r0, r2
 80039b8:	f000 fb26 	bl	8004008 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b082      	sub	sp, #8
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e041      	b.n	8003aac <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d106      	bne.n	8003a42 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f839 	bl	8003ab4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2202      	movs	r2, #2
 8003a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	3304      	adds	r3, #4
 8003a52:	4619      	mov	r1, r3
 8003a54:	4610      	mov	r0, r2
 8003a56:	f000 fad7 	bl	8004008 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d122      	bne.n	8003b24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d11b      	bne.n	8003b24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f06f 0202 	mvn.w	r2, #2
 8003af4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 fa5d 	bl	8003fca <HAL_TIM_IC_CaptureCallback>
 8003b10:	e005      	b.n	8003b1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 fa4f 	bl	8003fb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 fa60 	bl	8003fde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	f003 0304 	and.w	r3, r3, #4
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d122      	bne.n	8003b78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d11b      	bne.n	8003b78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f06f 0204 	mvn.w	r2, #4
 8003b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 fa33 	bl	8003fca <HAL_TIM_IC_CaptureCallback>
 8003b64:	e005      	b.n	8003b72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 fa25 	bl	8003fb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 fa36 	bl	8003fde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b08      	cmp	r3, #8
 8003b84:	d122      	bne.n	8003bcc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	f003 0308 	and.w	r3, r3, #8
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d11b      	bne.n	8003bcc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f06f 0208 	mvn.w	r2, #8
 8003b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2204      	movs	r2, #4
 8003ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 fa09 	bl	8003fca <HAL_TIM_IC_CaptureCallback>
 8003bb8:	e005      	b.n	8003bc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f9fb 	bl	8003fb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 fa0c 	bl	8003fde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	f003 0310 	and.w	r3, r3, #16
 8003bd6:	2b10      	cmp	r3, #16
 8003bd8:	d122      	bne.n	8003c20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f003 0310 	and.w	r3, r3, #16
 8003be4:	2b10      	cmp	r3, #16
 8003be6:	d11b      	bne.n	8003c20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f06f 0210 	mvn.w	r2, #16
 8003bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2208      	movs	r2, #8
 8003bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f9df 	bl	8003fca <HAL_TIM_IC_CaptureCallback>
 8003c0c:	e005      	b.n	8003c1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f9d1 	bl	8003fb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 f9e2 	bl	8003fde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d10e      	bne.n	8003c4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d107      	bne.n	8003c4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f06f 0201 	mvn.w	r2, #1
 8003c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f9ab 	bl	8003fa2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c56:	2b80      	cmp	r3, #128	; 0x80
 8003c58:	d10e      	bne.n	8003c78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c64:	2b80      	cmp	r3, #128	; 0x80
 8003c66:	d107      	bne.n	8003c78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 fdca 	bl	800480c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c82:	2b40      	cmp	r3, #64	; 0x40
 8003c84:	d10e      	bne.n	8003ca4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c90:	2b40      	cmp	r3, #64	; 0x40
 8003c92:	d107      	bne.n	8003ca4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f9a7 	bl	8003ff2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b20      	cmp	r3, #32
 8003cb0:	d10e      	bne.n	8003cd0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f003 0320 	and.w	r3, r3, #32
 8003cbc:	2b20      	cmp	r3, #32
 8003cbe:	d107      	bne.n	8003cd0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f06f 0220 	mvn.w	r2, #32
 8003cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 fd94 	bl	80047f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cd0:	bf00      	nop
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d101      	bne.n	8003cf6 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	e048      	b.n	8003d88 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b0c      	cmp	r3, #12
 8003d02:	d839      	bhi.n	8003d78 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003d04:	a201      	add	r2, pc, #4	; (adr r2, 8003d0c <HAL_TIM_OC_ConfigChannel+0x34>)
 8003d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0a:	bf00      	nop
 8003d0c:	08003d41 	.word	0x08003d41
 8003d10:	08003d79 	.word	0x08003d79
 8003d14:	08003d79 	.word	0x08003d79
 8003d18:	08003d79 	.word	0x08003d79
 8003d1c:	08003d4f 	.word	0x08003d4f
 8003d20:	08003d79 	.word	0x08003d79
 8003d24:	08003d79 	.word	0x08003d79
 8003d28:	08003d79 	.word	0x08003d79
 8003d2c:	08003d5d 	.word	0x08003d5d
 8003d30:	08003d79 	.word	0x08003d79
 8003d34:	08003d79 	.word	0x08003d79
 8003d38:	08003d79 	.word	0x08003d79
 8003d3c:	08003d6b 	.word	0x08003d6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68b9      	ldr	r1, [r7, #8]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 f9de 	bl	8004108 <TIM_OC1_SetConfig>
      break;
 8003d4c:	e017      	b.n	8003d7e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68b9      	ldr	r1, [r7, #8]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 fa3d 	bl	80041d4 <TIM_OC2_SetConfig>
      break;
 8003d5a:	e010      	b.n	8003d7e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68b9      	ldr	r1, [r7, #8]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 faa2 	bl	80042ac <TIM_OC3_SetConfig>
      break;
 8003d68:	e009      	b.n	8003d7e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68b9      	ldr	r1, [r7, #8]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 fb05 	bl	8004380 <TIM_OC4_SetConfig>
      break;
 8003d76:	e002      	b.n	8003d7e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d101      	bne.n	8003dac <HAL_TIM_ConfigClockSource+0x1c>
 8003da8:	2302      	movs	r3, #2
 8003daa:	e0b4      	b.n	8003f16 <HAL_TIM_ConfigClockSource+0x186>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003dca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de4:	d03e      	beq.n	8003e64 <HAL_TIM_ConfigClockSource+0xd4>
 8003de6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dea:	f200 8087 	bhi.w	8003efc <HAL_TIM_ConfigClockSource+0x16c>
 8003dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df2:	f000 8086 	beq.w	8003f02 <HAL_TIM_ConfigClockSource+0x172>
 8003df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dfa:	d87f      	bhi.n	8003efc <HAL_TIM_ConfigClockSource+0x16c>
 8003dfc:	2b70      	cmp	r3, #112	; 0x70
 8003dfe:	d01a      	beq.n	8003e36 <HAL_TIM_ConfigClockSource+0xa6>
 8003e00:	2b70      	cmp	r3, #112	; 0x70
 8003e02:	d87b      	bhi.n	8003efc <HAL_TIM_ConfigClockSource+0x16c>
 8003e04:	2b60      	cmp	r3, #96	; 0x60
 8003e06:	d050      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0x11a>
 8003e08:	2b60      	cmp	r3, #96	; 0x60
 8003e0a:	d877      	bhi.n	8003efc <HAL_TIM_ConfigClockSource+0x16c>
 8003e0c:	2b50      	cmp	r3, #80	; 0x50
 8003e0e:	d03c      	beq.n	8003e8a <HAL_TIM_ConfigClockSource+0xfa>
 8003e10:	2b50      	cmp	r3, #80	; 0x50
 8003e12:	d873      	bhi.n	8003efc <HAL_TIM_ConfigClockSource+0x16c>
 8003e14:	2b40      	cmp	r3, #64	; 0x40
 8003e16:	d058      	beq.n	8003eca <HAL_TIM_ConfigClockSource+0x13a>
 8003e18:	2b40      	cmp	r3, #64	; 0x40
 8003e1a:	d86f      	bhi.n	8003efc <HAL_TIM_ConfigClockSource+0x16c>
 8003e1c:	2b30      	cmp	r3, #48	; 0x30
 8003e1e:	d064      	beq.n	8003eea <HAL_TIM_ConfigClockSource+0x15a>
 8003e20:	2b30      	cmp	r3, #48	; 0x30
 8003e22:	d86b      	bhi.n	8003efc <HAL_TIM_ConfigClockSource+0x16c>
 8003e24:	2b20      	cmp	r3, #32
 8003e26:	d060      	beq.n	8003eea <HAL_TIM_ConfigClockSource+0x15a>
 8003e28:	2b20      	cmp	r3, #32
 8003e2a:	d867      	bhi.n	8003efc <HAL_TIM_ConfigClockSource+0x16c>
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d05c      	beq.n	8003eea <HAL_TIM_ConfigClockSource+0x15a>
 8003e30:	2b10      	cmp	r3, #16
 8003e32:	d05a      	beq.n	8003eea <HAL_TIM_ConfigClockSource+0x15a>
 8003e34:	e062      	b.n	8003efc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6818      	ldr	r0, [r3, #0]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	6899      	ldr	r1, [r3, #8]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f000 fbf6 	bl	8004636 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	609a      	str	r2, [r3, #8]
      break;
 8003e62:	e04f      	b.n	8003f04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6818      	ldr	r0, [r3, #0]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	6899      	ldr	r1, [r3, #8]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f000 fbdf 	bl	8004636 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e86:	609a      	str	r2, [r3, #8]
      break;
 8003e88:	e03c      	b.n	8003f04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6818      	ldr	r0, [r3, #0]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	6859      	ldr	r1, [r3, #4]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	461a      	mov	r2, r3
 8003e98:	f000 fb53 	bl	8004542 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2150      	movs	r1, #80	; 0x50
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 fbac 	bl	8004600 <TIM_ITRx_SetConfig>
      break;
 8003ea8:	e02c      	b.n	8003f04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6818      	ldr	r0, [r3, #0]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	6859      	ldr	r1, [r3, #4]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	f000 fb72 	bl	80045a0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2160      	movs	r1, #96	; 0x60
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 fb9c 	bl	8004600 <TIM_ITRx_SetConfig>
      break;
 8003ec8:	e01c      	b.n	8003f04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6818      	ldr	r0, [r3, #0]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	6859      	ldr	r1, [r3, #4]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	f000 fb33 	bl	8004542 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2140      	movs	r1, #64	; 0x40
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 fb8c 	bl	8004600 <TIM_ITRx_SetConfig>
      break;
 8003ee8:	e00c      	b.n	8003f04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	4610      	mov	r0, r2
 8003ef6:	f000 fb83 	bl	8004600 <TIM_ITRx_SetConfig>
      break;
 8003efa:	e003      	b.n	8003f04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	73fb      	strb	r3, [r7, #15]
      break;
 8003f00:	e000      	b.n	8003f04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b082      	sub	sp, #8
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
 8003f26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d101      	bne.n	8003f36 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003f32:	2302      	movs	r3, #2
 8003f34:	e031      	b.n	8003f9a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2202      	movs	r2, #2
 8003f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003f46:	6839      	ldr	r1, [r7, #0]
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 fa69 	bl	8004420 <TIM_SlaveTimer_SetConfig>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d009      	beq.n	8003f68 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e018      	b.n	8003f9a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68da      	ldr	r2, [r3, #12]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f76:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f86:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fd2:	bf00      	nop
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
	...

08004008 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a34      	ldr	r2, [pc, #208]	; (80040ec <TIM_Base_SetConfig+0xe4>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d00f      	beq.n	8004040 <TIM_Base_SetConfig+0x38>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004026:	d00b      	beq.n	8004040 <TIM_Base_SetConfig+0x38>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a31      	ldr	r2, [pc, #196]	; (80040f0 <TIM_Base_SetConfig+0xe8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d007      	beq.n	8004040 <TIM_Base_SetConfig+0x38>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a30      	ldr	r2, [pc, #192]	; (80040f4 <TIM_Base_SetConfig+0xec>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d003      	beq.n	8004040 <TIM_Base_SetConfig+0x38>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a2f      	ldr	r2, [pc, #188]	; (80040f8 <TIM_Base_SetConfig+0xf0>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d108      	bne.n	8004052 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004046:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	4313      	orrs	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a25      	ldr	r2, [pc, #148]	; (80040ec <TIM_Base_SetConfig+0xe4>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d01b      	beq.n	8004092 <TIM_Base_SetConfig+0x8a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004060:	d017      	beq.n	8004092 <TIM_Base_SetConfig+0x8a>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a22      	ldr	r2, [pc, #136]	; (80040f0 <TIM_Base_SetConfig+0xe8>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d013      	beq.n	8004092 <TIM_Base_SetConfig+0x8a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a21      	ldr	r2, [pc, #132]	; (80040f4 <TIM_Base_SetConfig+0xec>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d00f      	beq.n	8004092 <TIM_Base_SetConfig+0x8a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a20      	ldr	r2, [pc, #128]	; (80040f8 <TIM_Base_SetConfig+0xf0>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d00b      	beq.n	8004092 <TIM_Base_SetConfig+0x8a>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a1f      	ldr	r2, [pc, #124]	; (80040fc <TIM_Base_SetConfig+0xf4>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d007      	beq.n	8004092 <TIM_Base_SetConfig+0x8a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a1e      	ldr	r2, [pc, #120]	; (8004100 <TIM_Base_SetConfig+0xf8>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d003      	beq.n	8004092 <TIM_Base_SetConfig+0x8a>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a1d      	ldr	r2, [pc, #116]	; (8004104 <TIM_Base_SetConfig+0xfc>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d108      	bne.n	80040a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004098:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a08      	ldr	r2, [pc, #32]	; (80040ec <TIM_Base_SetConfig+0xe4>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d103      	bne.n	80040d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	691a      	ldr	r2, [r3, #16]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	615a      	str	r2, [r3, #20]
}
 80040de:	bf00      	nop
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	40010000 	.word	0x40010000
 80040f0:	40000400 	.word	0x40000400
 80040f4:	40000800 	.word	0x40000800
 80040f8:	40000c00 	.word	0x40000c00
 80040fc:	40014000 	.word	0x40014000
 8004100:	40014400 	.word	0x40014400
 8004104:	40014800 	.word	0x40014800

08004108 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004108:	b480      	push	{r7}
 800410a:	b087      	sub	sp, #28
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	f023 0201 	bic.w	r2, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f023 0303 	bic.w	r3, r3, #3
 800413e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f023 0302 	bic.w	r3, r3, #2
 8004150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	4313      	orrs	r3, r2
 800415a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a1c      	ldr	r2, [pc, #112]	; (80041d0 <TIM_OC1_SetConfig+0xc8>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d10c      	bne.n	800417e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f023 0308 	bic.w	r3, r3, #8
 800416a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	4313      	orrs	r3, r2
 8004174:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f023 0304 	bic.w	r3, r3, #4
 800417c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a13      	ldr	r2, [pc, #76]	; (80041d0 <TIM_OC1_SetConfig+0xc8>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d111      	bne.n	80041aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800418c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004194:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	4313      	orrs	r3, r2
 800419e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	621a      	str	r2, [r3, #32]
}
 80041c4:	bf00      	nop
 80041c6:	371c      	adds	r7, #28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	40010000 	.word	0x40010000

080041d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	f023 0210 	bic.w	r2, r3, #16
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800420a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	021b      	lsls	r3, r3, #8
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	4313      	orrs	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f023 0320 	bic.w	r3, r3, #32
 800421e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a1e      	ldr	r2, [pc, #120]	; (80042a8 <TIM_OC2_SetConfig+0xd4>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d10d      	bne.n	8004250 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800423a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	011b      	lsls	r3, r3, #4
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	4313      	orrs	r3, r2
 8004246:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800424e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a15      	ldr	r2, [pc, #84]	; (80042a8 <TIM_OC2_SetConfig+0xd4>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d113      	bne.n	8004280 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800425e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004266:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4313      	orrs	r3, r2
 8004272:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	4313      	orrs	r3, r2
 800427e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	621a      	str	r2, [r3, #32]
}
 800429a:	bf00      	nop
 800429c:	371c      	adds	r7, #28
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	40010000 	.word	0x40010000

080042ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b087      	sub	sp, #28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f023 0303 	bic.w	r3, r3, #3
 80042e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	021b      	lsls	r3, r3, #8
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	4313      	orrs	r3, r2
 8004300:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a1d      	ldr	r2, [pc, #116]	; (800437c <TIM_OC3_SetConfig+0xd0>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d10d      	bne.n	8004326 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004310:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	021b      	lsls	r3, r3, #8
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	4313      	orrs	r3, r2
 800431c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004324:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a14      	ldr	r2, [pc, #80]	; (800437c <TIM_OC3_SetConfig+0xd0>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d113      	bne.n	8004356 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800433c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	011b      	lsls	r3, r3, #4
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	4313      	orrs	r3, r2
 8004348:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	011b      	lsls	r3, r3, #4
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4313      	orrs	r3, r2
 8004354:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	621a      	str	r2, [r3, #32]
}
 8004370:	bf00      	nop
 8004372:	371c      	adds	r7, #28
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	40010000 	.word	0x40010000

08004380 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004380:	b480      	push	{r7}
 8004382:	b087      	sub	sp, #28
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	021b      	lsls	r3, r3, #8
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	031b      	lsls	r3, r3, #12
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a10      	ldr	r2, [pc, #64]	; (800441c <TIM_OC4_SetConfig+0x9c>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d109      	bne.n	80043f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	019b      	lsls	r3, r3, #6
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	621a      	str	r2, [r3, #32]
}
 800440e:	bf00      	nop
 8004410:	371c      	adds	r7, #28
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	40010000 	.word	0x40010000

08004420 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800442a:	2300      	movs	r3, #0
 800442c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800443c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	4313      	orrs	r3, r2
 8004446:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f023 0307 	bic.w	r3, r3, #7
 800444e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	4313      	orrs	r3, r2
 8004458:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2b70      	cmp	r3, #112	; 0x70
 8004468:	d01a      	beq.n	80044a0 <TIM_SlaveTimer_SetConfig+0x80>
 800446a:	2b70      	cmp	r3, #112	; 0x70
 800446c:	d860      	bhi.n	8004530 <TIM_SlaveTimer_SetConfig+0x110>
 800446e:	2b60      	cmp	r3, #96	; 0x60
 8004470:	d054      	beq.n	800451c <TIM_SlaveTimer_SetConfig+0xfc>
 8004472:	2b60      	cmp	r3, #96	; 0x60
 8004474:	d85c      	bhi.n	8004530 <TIM_SlaveTimer_SetConfig+0x110>
 8004476:	2b50      	cmp	r3, #80	; 0x50
 8004478:	d046      	beq.n	8004508 <TIM_SlaveTimer_SetConfig+0xe8>
 800447a:	2b50      	cmp	r3, #80	; 0x50
 800447c:	d858      	bhi.n	8004530 <TIM_SlaveTimer_SetConfig+0x110>
 800447e:	2b40      	cmp	r3, #64	; 0x40
 8004480:	d019      	beq.n	80044b6 <TIM_SlaveTimer_SetConfig+0x96>
 8004482:	2b40      	cmp	r3, #64	; 0x40
 8004484:	d854      	bhi.n	8004530 <TIM_SlaveTimer_SetConfig+0x110>
 8004486:	2b30      	cmp	r3, #48	; 0x30
 8004488:	d055      	beq.n	8004536 <TIM_SlaveTimer_SetConfig+0x116>
 800448a:	2b30      	cmp	r3, #48	; 0x30
 800448c:	d850      	bhi.n	8004530 <TIM_SlaveTimer_SetConfig+0x110>
 800448e:	2b20      	cmp	r3, #32
 8004490:	d051      	beq.n	8004536 <TIM_SlaveTimer_SetConfig+0x116>
 8004492:	2b20      	cmp	r3, #32
 8004494:	d84c      	bhi.n	8004530 <TIM_SlaveTimer_SetConfig+0x110>
 8004496:	2b00      	cmp	r3, #0
 8004498:	d04d      	beq.n	8004536 <TIM_SlaveTimer_SetConfig+0x116>
 800449a:	2b10      	cmp	r3, #16
 800449c:	d04b      	beq.n	8004536 <TIM_SlaveTimer_SetConfig+0x116>
 800449e:	e047      	b.n	8004530 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6818      	ldr	r0, [r3, #0]
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	68d9      	ldr	r1, [r3, #12]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	f000 f8c1 	bl	8004636 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80044b4:	e040      	b.n	8004538 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b05      	cmp	r3, #5
 80044bc:	d101      	bne.n	80044c2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e03b      	b.n	800453a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6a1a      	ldr	r2, [r3, #32]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 0201 	bic.w	r2, r2, #1
 80044d8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044e8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	621a      	str	r2, [r3, #32]
      break;
 8004506:	e017      	b.n	8004538 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6818      	ldr	r0, [r3, #0]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	6899      	ldr	r1, [r3, #8]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	461a      	mov	r2, r3
 8004516:	f000 f814 	bl	8004542 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800451a:	e00d      	b.n	8004538 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6818      	ldr	r0, [r3, #0]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	6899      	ldr	r1, [r3, #8]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	461a      	mov	r2, r3
 800452a:	f000 f839 	bl	80045a0 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800452e:	e003      	b.n	8004538 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	75fb      	strb	r3, [r7, #23]
      break;
 8004534:	e000      	b.n	8004538 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004536:	bf00      	nop
  }

  return status;
 8004538:	7dfb      	ldrb	r3, [r7, #23]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3718      	adds	r7, #24
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004542:	b480      	push	{r7}
 8004544:	b087      	sub	sp, #28
 8004546:	af00      	add	r7, sp, #0
 8004548:	60f8      	str	r0, [r7, #12]
 800454a:	60b9      	str	r1, [r7, #8]
 800454c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	f023 0201 	bic.w	r2, r3, #1
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800456c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	011b      	lsls	r3, r3, #4
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	4313      	orrs	r3, r2
 8004576:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f023 030a 	bic.w	r3, r3, #10
 800457e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	4313      	orrs	r3, r2
 8004586:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	621a      	str	r2, [r3, #32]
}
 8004594:	bf00      	nop
 8004596:	371c      	adds	r7, #28
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b087      	sub	sp, #28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	f023 0210 	bic.w	r2, r3, #16
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	031b      	lsls	r3, r3, #12
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	011b      	lsls	r3, r3, #4
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	621a      	str	r2, [r3, #32]
}
 80045f4:	bf00      	nop
 80045f6:	371c      	adds	r7, #28
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004616:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	4313      	orrs	r3, r2
 800461e:	f043 0307 	orr.w	r3, r3, #7
 8004622:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	609a      	str	r2, [r3, #8]
}
 800462a:	bf00      	nop
 800462c:	3714      	adds	r7, #20
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004636:	b480      	push	{r7}
 8004638:	b087      	sub	sp, #28
 800463a:	af00      	add	r7, sp, #0
 800463c:	60f8      	str	r0, [r7, #12]
 800463e:	60b9      	str	r1, [r7, #8]
 8004640:	607a      	str	r2, [r7, #4]
 8004642:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004650:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	021a      	lsls	r2, r3, #8
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	431a      	orrs	r2, r3
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	4313      	orrs	r3, r2
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	4313      	orrs	r3, r2
 8004662:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	609a      	str	r2, [r3, #8]
}
 800466a:	bf00      	nop
 800466c:	371c      	adds	r7, #28
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
	...

08004678 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004688:	2b01      	cmp	r3, #1
 800468a:	d101      	bne.n	8004690 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800468c:	2302      	movs	r3, #2
 800468e:	e050      	b.n	8004732 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	4313      	orrs	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a1c      	ldr	r2, [pc, #112]	; (8004740 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d018      	beq.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046dc:	d013      	beq.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a18      	ldr	r2, [pc, #96]	; (8004744 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00e      	beq.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a16      	ldr	r2, [pc, #88]	; (8004748 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d009      	beq.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a15      	ldr	r2, [pc, #84]	; (800474c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d004      	beq.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a13      	ldr	r2, [pc, #76]	; (8004750 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d10c      	bne.n	8004720 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800470c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	68ba      	ldr	r2, [r7, #8]
 8004714:	4313      	orrs	r3, r2
 8004716:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	40010000 	.word	0x40010000
 8004744:	40000400 	.word	0x40000400
 8004748:	40000800 	.word	0x40000800
 800474c:	40000c00 	.word	0x40000c00
 8004750:	40014000 	.word	0x40014000

08004754 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800475e:	2300      	movs	r3, #0
 8004760:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004768:	2b01      	cmp	r3, #1
 800476a:	d101      	bne.n	8004770 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800476c:	2302      	movs	r3, #2
 800476e:	e03d      	b.n	80047ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	4313      	orrs	r3, r2
 8004792:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	4313      	orrs	r3, r2
 80047a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e03f      	b.n	80048b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d106      	bne.n	800484c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7fd fcf2 	bl	8002230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2224      	movs	r2, #36	; 0x24
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68da      	ldr	r2, [r3, #12]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004862:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f929 	bl	8004abc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	691a      	ldr	r2, [r3, #16]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004878:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	695a      	ldr	r2, [r3, #20]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004888:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68da      	ldr	r2, [r3, #12]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004898:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2220      	movs	r2, #32
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2220      	movs	r2, #32
 80048ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b08a      	sub	sp, #40	; 0x28
 80048be:	af02      	add	r7, sp, #8
 80048c0:	60f8      	str	r0, [r7, #12]
 80048c2:	60b9      	str	r1, [r7, #8]
 80048c4:	603b      	str	r3, [r7, #0]
 80048c6:	4613      	mov	r3, r2
 80048c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b20      	cmp	r3, #32
 80048d8:	d17c      	bne.n	80049d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <HAL_UART_Transmit+0x2c>
 80048e0:	88fb      	ldrh	r3, [r7, #6]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e075      	b.n	80049d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d101      	bne.n	80048f8 <HAL_UART_Transmit+0x3e>
 80048f4:	2302      	movs	r3, #2
 80048f6:	e06e      	b.n	80049d6 <HAL_UART_Transmit+0x11c>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2221      	movs	r2, #33	; 0x21
 800490a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800490e:	f7fd fe2b 	bl	8002568 <HAL_GetTick>
 8004912:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	88fa      	ldrh	r2, [r7, #6]
 8004918:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	88fa      	ldrh	r2, [r7, #6]
 800491e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004928:	d108      	bne.n	800493c <HAL_UART_Transmit+0x82>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d104      	bne.n	800493c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004932:	2300      	movs	r3, #0
 8004934:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	61bb      	str	r3, [r7, #24]
 800493a:	e003      	b.n	8004944 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004940:	2300      	movs	r3, #0
 8004942:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800494c:	e02a      	b.n	80049a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	2200      	movs	r2, #0
 8004956:	2180      	movs	r1, #128	; 0x80
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f000 f840 	bl	80049de <UART_WaitOnFlagUntilTimeout>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e036      	b.n	80049d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10b      	bne.n	8004986 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	881b      	ldrh	r3, [r3, #0]
 8004972:	461a      	mov	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800497c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	3302      	adds	r3, #2
 8004982:	61bb      	str	r3, [r7, #24]
 8004984:	e007      	b.n	8004996 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	781a      	ldrb	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	3301      	adds	r3, #1
 8004994:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800499a:	b29b      	uxth	r3, r3
 800499c:	3b01      	subs	r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1cf      	bne.n	800494e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	2200      	movs	r2, #0
 80049b6:	2140      	movs	r1, #64	; 0x40
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 f810 	bl	80049de <UART_WaitOnFlagUntilTimeout>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e006      	b.n	80049d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80049d0:	2300      	movs	r3, #0
 80049d2:	e000      	b.n	80049d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80049d4:	2302      	movs	r3, #2
  }
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3720      	adds	r7, #32
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b090      	sub	sp, #64	; 0x40
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	60f8      	str	r0, [r7, #12]
 80049e6:	60b9      	str	r1, [r7, #8]
 80049e8:	603b      	str	r3, [r7, #0]
 80049ea:	4613      	mov	r3, r2
 80049ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ee:	e050      	b.n	8004a92 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049f6:	d04c      	beq.n	8004a92 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d007      	beq.n	8004a0e <UART_WaitOnFlagUntilTimeout+0x30>
 80049fe:	f7fd fdb3 	bl	8002568 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d241      	bcs.n	8004a92 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	330c      	adds	r3, #12
 8004a14:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a18:	e853 3f00 	ldrex	r3, [r3]
 8004a1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	330c      	adds	r3, #12
 8004a2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a2e:	637a      	str	r2, [r7, #52]	; 0x34
 8004a30:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a36:	e841 2300 	strex	r3, r2, [r1]
 8004a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1e5      	bne.n	8004a0e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3314      	adds	r3, #20
 8004a48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	e853 3f00 	ldrex	r3, [r3]
 8004a50:	613b      	str	r3, [r7, #16]
   return(result);
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	f023 0301 	bic.w	r3, r3, #1
 8004a58:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	3314      	adds	r3, #20
 8004a60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a62:	623a      	str	r2, [r7, #32]
 8004a64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a66:	69f9      	ldr	r1, [r7, #28]
 8004a68:	6a3a      	ldr	r2, [r7, #32]
 8004a6a:	e841 2300 	strex	r3, r2, [r1]
 8004a6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1e5      	bne.n	8004a42 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2220      	movs	r2, #32
 8004a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2220      	movs	r2, #32
 8004a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e00f      	b.n	8004ab2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	bf0c      	ite	eq
 8004aa2:	2301      	moveq	r3, #1
 8004aa4:	2300      	movne	r3, #0
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	79fb      	ldrb	r3, [r7, #7]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d09f      	beq.n	80049f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3740      	adds	r7, #64	; 0x40
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
	...

08004abc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004abc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ac0:	b0c0      	sub	sp, #256	; 0x100
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad8:	68d9      	ldr	r1, [r3, #12]
 8004ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	ea40 0301 	orr.w	r3, r0, r1
 8004ae4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aea:	689a      	ldr	r2, [r3, #8]
 8004aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	431a      	orrs	r2, r3
 8004af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	431a      	orrs	r2, r3
 8004afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b14:	f021 010c 	bic.w	r1, r1, #12
 8004b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b22:	430b      	orrs	r3, r1
 8004b24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b36:	6999      	ldr	r1, [r3, #24]
 8004b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	ea40 0301 	orr.w	r3, r0, r1
 8004b42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	4b8f      	ldr	r3, [pc, #572]	; (8004d88 <UART_SetConfig+0x2cc>)
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d005      	beq.n	8004b5c <UART_SetConfig+0xa0>
 8004b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	4b8d      	ldr	r3, [pc, #564]	; (8004d8c <UART_SetConfig+0x2d0>)
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d104      	bne.n	8004b66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b5c:	f7fe fc5a 	bl	8003414 <HAL_RCC_GetPCLK2Freq>
 8004b60:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b64:	e003      	b.n	8004b6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b66:	f7fe fc41 	bl	80033ec <HAL_RCC_GetPCLK1Freq>
 8004b6a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b78:	f040 810c 	bne.w	8004d94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b80:	2200      	movs	r2, #0
 8004b82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b86:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004b8e:	4622      	mov	r2, r4
 8004b90:	462b      	mov	r3, r5
 8004b92:	1891      	adds	r1, r2, r2
 8004b94:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b96:	415b      	adcs	r3, r3
 8004b98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b9e:	4621      	mov	r1, r4
 8004ba0:	eb12 0801 	adds.w	r8, r2, r1
 8004ba4:	4629      	mov	r1, r5
 8004ba6:	eb43 0901 	adc.w	r9, r3, r1
 8004baa:	f04f 0200 	mov.w	r2, #0
 8004bae:	f04f 0300 	mov.w	r3, #0
 8004bb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bbe:	4690      	mov	r8, r2
 8004bc0:	4699      	mov	r9, r3
 8004bc2:	4623      	mov	r3, r4
 8004bc4:	eb18 0303 	adds.w	r3, r8, r3
 8004bc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004bcc:	462b      	mov	r3, r5
 8004bce:	eb49 0303 	adc.w	r3, r9, r3
 8004bd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004be2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004be6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004bea:	460b      	mov	r3, r1
 8004bec:	18db      	adds	r3, r3, r3
 8004bee:	653b      	str	r3, [r7, #80]	; 0x50
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	eb42 0303 	adc.w	r3, r2, r3
 8004bf6:	657b      	str	r3, [r7, #84]	; 0x54
 8004bf8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004bfc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c00:	f7fc f85c 	bl	8000cbc <__aeabi_uldivmod>
 8004c04:	4602      	mov	r2, r0
 8004c06:	460b      	mov	r3, r1
 8004c08:	4b61      	ldr	r3, [pc, #388]	; (8004d90 <UART_SetConfig+0x2d4>)
 8004c0a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c0e:	095b      	lsrs	r3, r3, #5
 8004c10:	011c      	lsls	r4, r3, #4
 8004c12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c16:	2200      	movs	r2, #0
 8004c18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c1c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c24:	4642      	mov	r2, r8
 8004c26:	464b      	mov	r3, r9
 8004c28:	1891      	adds	r1, r2, r2
 8004c2a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c2c:	415b      	adcs	r3, r3
 8004c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c34:	4641      	mov	r1, r8
 8004c36:	eb12 0a01 	adds.w	sl, r2, r1
 8004c3a:	4649      	mov	r1, r9
 8004c3c:	eb43 0b01 	adc.w	fp, r3, r1
 8004c40:	f04f 0200 	mov.w	r2, #0
 8004c44:	f04f 0300 	mov.w	r3, #0
 8004c48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c54:	4692      	mov	sl, r2
 8004c56:	469b      	mov	fp, r3
 8004c58:	4643      	mov	r3, r8
 8004c5a:	eb1a 0303 	adds.w	r3, sl, r3
 8004c5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c62:	464b      	mov	r3, r9
 8004c64:	eb4b 0303 	adc.w	r3, fp, r3
 8004c68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c78:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c80:	460b      	mov	r3, r1
 8004c82:	18db      	adds	r3, r3, r3
 8004c84:	643b      	str	r3, [r7, #64]	; 0x40
 8004c86:	4613      	mov	r3, r2
 8004c88:	eb42 0303 	adc.w	r3, r2, r3
 8004c8c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004c96:	f7fc f811 	bl	8000cbc <__aeabi_uldivmod>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	4611      	mov	r1, r2
 8004ca0:	4b3b      	ldr	r3, [pc, #236]	; (8004d90 <UART_SetConfig+0x2d4>)
 8004ca2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ca6:	095b      	lsrs	r3, r3, #5
 8004ca8:	2264      	movs	r2, #100	; 0x64
 8004caa:	fb02 f303 	mul.w	r3, r2, r3
 8004cae:	1acb      	subs	r3, r1, r3
 8004cb0:	00db      	lsls	r3, r3, #3
 8004cb2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004cb6:	4b36      	ldr	r3, [pc, #216]	; (8004d90 <UART_SetConfig+0x2d4>)
 8004cb8:	fba3 2302 	umull	r2, r3, r3, r2
 8004cbc:	095b      	lsrs	r3, r3, #5
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004cc4:	441c      	add	r4, r3
 8004cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cd0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004cd4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004cd8:	4642      	mov	r2, r8
 8004cda:	464b      	mov	r3, r9
 8004cdc:	1891      	adds	r1, r2, r2
 8004cde:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ce0:	415b      	adcs	r3, r3
 8004ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ce4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ce8:	4641      	mov	r1, r8
 8004cea:	1851      	adds	r1, r2, r1
 8004cec:	6339      	str	r1, [r7, #48]	; 0x30
 8004cee:	4649      	mov	r1, r9
 8004cf0:	414b      	adcs	r3, r1
 8004cf2:	637b      	str	r3, [r7, #52]	; 0x34
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	f04f 0300 	mov.w	r3, #0
 8004cfc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d00:	4659      	mov	r1, fp
 8004d02:	00cb      	lsls	r3, r1, #3
 8004d04:	4651      	mov	r1, sl
 8004d06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d0a:	4651      	mov	r1, sl
 8004d0c:	00ca      	lsls	r2, r1, #3
 8004d0e:	4610      	mov	r0, r2
 8004d10:	4619      	mov	r1, r3
 8004d12:	4603      	mov	r3, r0
 8004d14:	4642      	mov	r2, r8
 8004d16:	189b      	adds	r3, r3, r2
 8004d18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d1c:	464b      	mov	r3, r9
 8004d1e:	460a      	mov	r2, r1
 8004d20:	eb42 0303 	adc.w	r3, r2, r3
 8004d24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	18db      	adds	r3, r3, r3
 8004d40:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d42:	4613      	mov	r3, r2
 8004d44:	eb42 0303 	adc.w	r3, r2, r3
 8004d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d52:	f7fb ffb3 	bl	8000cbc <__aeabi_uldivmod>
 8004d56:	4602      	mov	r2, r0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	4b0d      	ldr	r3, [pc, #52]	; (8004d90 <UART_SetConfig+0x2d4>)
 8004d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d60:	095b      	lsrs	r3, r3, #5
 8004d62:	2164      	movs	r1, #100	; 0x64
 8004d64:	fb01 f303 	mul.w	r3, r1, r3
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	3332      	adds	r3, #50	; 0x32
 8004d6e:	4a08      	ldr	r2, [pc, #32]	; (8004d90 <UART_SetConfig+0x2d4>)
 8004d70:	fba2 2303 	umull	r2, r3, r2, r3
 8004d74:	095b      	lsrs	r3, r3, #5
 8004d76:	f003 0207 	and.w	r2, r3, #7
 8004d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4422      	add	r2, r4
 8004d82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d84:	e105      	b.n	8004f92 <UART_SetConfig+0x4d6>
 8004d86:	bf00      	nop
 8004d88:	40011000 	.word	0x40011000
 8004d8c:	40011400 	.word	0x40011400
 8004d90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004da2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004da6:	4642      	mov	r2, r8
 8004da8:	464b      	mov	r3, r9
 8004daa:	1891      	adds	r1, r2, r2
 8004dac:	6239      	str	r1, [r7, #32]
 8004dae:	415b      	adcs	r3, r3
 8004db0:	627b      	str	r3, [r7, #36]	; 0x24
 8004db2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004db6:	4641      	mov	r1, r8
 8004db8:	1854      	adds	r4, r2, r1
 8004dba:	4649      	mov	r1, r9
 8004dbc:	eb43 0501 	adc.w	r5, r3, r1
 8004dc0:	f04f 0200 	mov.w	r2, #0
 8004dc4:	f04f 0300 	mov.w	r3, #0
 8004dc8:	00eb      	lsls	r3, r5, #3
 8004dca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dce:	00e2      	lsls	r2, r4, #3
 8004dd0:	4614      	mov	r4, r2
 8004dd2:	461d      	mov	r5, r3
 8004dd4:	4643      	mov	r3, r8
 8004dd6:	18e3      	adds	r3, r4, r3
 8004dd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ddc:	464b      	mov	r3, r9
 8004dde:	eb45 0303 	adc.w	r3, r5, r3
 8004de2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004df2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004df6:	f04f 0200 	mov.w	r2, #0
 8004dfa:	f04f 0300 	mov.w	r3, #0
 8004dfe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e02:	4629      	mov	r1, r5
 8004e04:	008b      	lsls	r3, r1, #2
 8004e06:	4621      	mov	r1, r4
 8004e08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e0c:	4621      	mov	r1, r4
 8004e0e:	008a      	lsls	r2, r1, #2
 8004e10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e14:	f7fb ff52 	bl	8000cbc <__aeabi_uldivmod>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	4b60      	ldr	r3, [pc, #384]	; (8004fa0 <UART_SetConfig+0x4e4>)
 8004e1e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e22:	095b      	lsrs	r3, r3, #5
 8004e24:	011c      	lsls	r4, r3, #4
 8004e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e38:	4642      	mov	r2, r8
 8004e3a:	464b      	mov	r3, r9
 8004e3c:	1891      	adds	r1, r2, r2
 8004e3e:	61b9      	str	r1, [r7, #24]
 8004e40:	415b      	adcs	r3, r3
 8004e42:	61fb      	str	r3, [r7, #28]
 8004e44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e48:	4641      	mov	r1, r8
 8004e4a:	1851      	adds	r1, r2, r1
 8004e4c:	6139      	str	r1, [r7, #16]
 8004e4e:	4649      	mov	r1, r9
 8004e50:	414b      	adcs	r3, r1
 8004e52:	617b      	str	r3, [r7, #20]
 8004e54:	f04f 0200 	mov.w	r2, #0
 8004e58:	f04f 0300 	mov.w	r3, #0
 8004e5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e60:	4659      	mov	r1, fp
 8004e62:	00cb      	lsls	r3, r1, #3
 8004e64:	4651      	mov	r1, sl
 8004e66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e6a:	4651      	mov	r1, sl
 8004e6c:	00ca      	lsls	r2, r1, #3
 8004e6e:	4610      	mov	r0, r2
 8004e70:	4619      	mov	r1, r3
 8004e72:	4603      	mov	r3, r0
 8004e74:	4642      	mov	r2, r8
 8004e76:	189b      	adds	r3, r3, r2
 8004e78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e7c:	464b      	mov	r3, r9
 8004e7e:	460a      	mov	r2, r1
 8004e80:	eb42 0303 	adc.w	r3, r2, r3
 8004e84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e92:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004e94:	f04f 0200 	mov.w	r2, #0
 8004e98:	f04f 0300 	mov.w	r3, #0
 8004e9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ea0:	4649      	mov	r1, r9
 8004ea2:	008b      	lsls	r3, r1, #2
 8004ea4:	4641      	mov	r1, r8
 8004ea6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eaa:	4641      	mov	r1, r8
 8004eac:	008a      	lsls	r2, r1, #2
 8004eae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004eb2:	f7fb ff03 	bl	8000cbc <__aeabi_uldivmod>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	460b      	mov	r3, r1
 8004eba:	4b39      	ldr	r3, [pc, #228]	; (8004fa0 <UART_SetConfig+0x4e4>)
 8004ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ec0:	095b      	lsrs	r3, r3, #5
 8004ec2:	2164      	movs	r1, #100	; 0x64
 8004ec4:	fb01 f303 	mul.w	r3, r1, r3
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	011b      	lsls	r3, r3, #4
 8004ecc:	3332      	adds	r3, #50	; 0x32
 8004ece:	4a34      	ldr	r2, [pc, #208]	; (8004fa0 <UART_SetConfig+0x4e4>)
 8004ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed4:	095b      	lsrs	r3, r3, #5
 8004ed6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004eda:	441c      	add	r4, r3
 8004edc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	673b      	str	r3, [r7, #112]	; 0x70
 8004ee4:	677a      	str	r2, [r7, #116]	; 0x74
 8004ee6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004eea:	4642      	mov	r2, r8
 8004eec:	464b      	mov	r3, r9
 8004eee:	1891      	adds	r1, r2, r2
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	415b      	adcs	r3, r3
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004efa:	4641      	mov	r1, r8
 8004efc:	1851      	adds	r1, r2, r1
 8004efe:	6039      	str	r1, [r7, #0]
 8004f00:	4649      	mov	r1, r9
 8004f02:	414b      	adcs	r3, r1
 8004f04:	607b      	str	r3, [r7, #4]
 8004f06:	f04f 0200 	mov.w	r2, #0
 8004f0a:	f04f 0300 	mov.w	r3, #0
 8004f0e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f12:	4659      	mov	r1, fp
 8004f14:	00cb      	lsls	r3, r1, #3
 8004f16:	4651      	mov	r1, sl
 8004f18:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f1c:	4651      	mov	r1, sl
 8004f1e:	00ca      	lsls	r2, r1, #3
 8004f20:	4610      	mov	r0, r2
 8004f22:	4619      	mov	r1, r3
 8004f24:	4603      	mov	r3, r0
 8004f26:	4642      	mov	r2, r8
 8004f28:	189b      	adds	r3, r3, r2
 8004f2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f2c:	464b      	mov	r3, r9
 8004f2e:	460a      	mov	r2, r1
 8004f30:	eb42 0303 	adc.w	r3, r2, r3
 8004f34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	663b      	str	r3, [r7, #96]	; 0x60
 8004f40:	667a      	str	r2, [r7, #100]	; 0x64
 8004f42:	f04f 0200 	mov.w	r2, #0
 8004f46:	f04f 0300 	mov.w	r3, #0
 8004f4a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f4e:	4649      	mov	r1, r9
 8004f50:	008b      	lsls	r3, r1, #2
 8004f52:	4641      	mov	r1, r8
 8004f54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f58:	4641      	mov	r1, r8
 8004f5a:	008a      	lsls	r2, r1, #2
 8004f5c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f60:	f7fb feac 	bl	8000cbc <__aeabi_uldivmod>
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	4b0d      	ldr	r3, [pc, #52]	; (8004fa0 <UART_SetConfig+0x4e4>)
 8004f6a:	fba3 1302 	umull	r1, r3, r3, r2
 8004f6e:	095b      	lsrs	r3, r3, #5
 8004f70:	2164      	movs	r1, #100	; 0x64
 8004f72:	fb01 f303 	mul.w	r3, r1, r3
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	011b      	lsls	r3, r3, #4
 8004f7a:	3332      	adds	r3, #50	; 0x32
 8004f7c:	4a08      	ldr	r2, [pc, #32]	; (8004fa0 <UART_SetConfig+0x4e4>)
 8004f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f82:	095b      	lsrs	r3, r3, #5
 8004f84:	f003 020f 	and.w	r2, r3, #15
 8004f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4422      	add	r2, r4
 8004f90:	609a      	str	r2, [r3, #8]
}
 8004f92:	bf00      	nop
 8004f94:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f9e:	bf00      	nop
 8004fa0:	51eb851f 	.word	0x51eb851f

08004fa4 <interface_tx_frame>:
 8004fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fa8:	b085      	sub	sp, #20
 8004faa:	4605      	mov	r5, r0
 8004fac:	461c      	mov	r4, r3
 8004fae:	6883      	ldr	r3, [r0, #8]
 8004fb0:	695e      	ldr	r6, [r3, #20]
 8004fb2:	b1e2      	cbz	r2, 8004fee <interface_tx_frame+0x4a>
 8004fb4:	9102      	str	r1, [sp, #8]
 8004fb6:	fa1f f882 	uxth.w	r8, r2
 8004fba:	f8ad 800c 	strh.w	r8, [sp, #12]
 8004fbe:	f04f 0900 	mov.w	r9, #0
 8004fc2:	f8ad 900e 	strh.w	r9, [sp, #14]
 8004fc6:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8004fc8:	ab02      	add	r3, sp, #8
 8004fca:	464a      	mov	r2, r9
 8004fcc:	2120      	movs	r1, #32
 8004fce:	47b8      	blx	r7
 8004fd0:	f8ad 8000 	strh.w	r8, [sp]
 8004fd4:	f8ad 9002 	strh.w	r9, [sp, #2]
 8004fd8:	68e3      	ldr	r3, [r4, #12]
 8004fda:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004fde:	f88d 3004 	strb.w	r3, [sp, #4]
 8004fe2:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8004fe4:	466b      	mov	r3, sp
 8004fe6:	464a      	mov	r2, r9
 8004fe8:	2137      	movs	r1, #55	; 0x37
 8004fea:	4628      	mov	r0, r5
 8004fec:	47b8      	blx	r7
 8004fee:	68e3      	ldr	r3, [r4, #12]
 8004ff0:	f013 0f1d 	tst.w	r3, #29
 8004ff4:	d005      	beq.n	8005002 <interface_tx_frame+0x5e>
 8004ff6:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8004ff8:	4623      	mov	r3, r4
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	2105      	movs	r1, #5
 8004ffe:	4628      	mov	r0, r5
 8005000:	47b8      	blx	r7
 8005002:	6863      	ldr	r3, [r4, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	db0c      	blt.n	8005022 <interface_tx_frame+0x7e>
 8005008:	6b77      	ldr	r7, [r6, #52]	; 0x34
 800500a:	1d23      	adds	r3, r4, #4
 800500c:	2200      	movs	r2, #0
 800500e:	2110      	movs	r1, #16
 8005010:	4628      	mov	r0, r5
 8005012:	47b8      	blx	r7
 8005014:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8005016:	f104 0308 	add.w	r3, r4, #8
 800501a:	2200      	movs	r2, #0
 800501c:	2151      	movs	r1, #81	; 0x51
 800501e:	4628      	mov	r0, r5
 8005020:	47b8      	blx	r7
 8005022:	6b76      	ldr	r6, [r6, #52]	; 0x34
 8005024:	f104 030c 	add.w	r3, r4, #12
 8005028:	2200      	movs	r2, #0
 800502a:	2104      	movs	r1, #4
 800502c:	4628      	mov	r0, r5
 800502e:	47b0      	blx	r6
 8005030:	b005      	add	sp, #20
 8005032:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005036 <interface_get_timestamp>:
 8005036:	b530      	push	{r4, r5, lr}
 8005038:	b083      	sub	sp, #12
 800503a:	ab02      	add	r3, sp, #8
 800503c:	2400      	movs	r4, #0
 800503e:	2500      	movs	r5, #0
 8005040:	e963 4502 	strd	r4, r5, [r3, #-8]!
 8005044:	6882      	ldr	r2, [r0, #8]
 8005046:	6952      	ldr	r2, [r2, #20]
 8005048:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800504a:	2200      	movs	r2, #0
 800504c:	215f      	movs	r1, #95	; 0x5f
 800504e:	47a0      	blx	r4
 8005050:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005054:	b003      	add	sp, #12
 8005056:	bd30      	pop	{r4, r5, pc}

08005058 <interface_rx_disable>:
 8005058:	b510      	push	{r4, lr}
 800505a:	6883      	ldr	r3, [r0, #8]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8005060:	2300      	movs	r3, #0
 8005062:	461a      	mov	r2, r3
 8005064:	2103      	movs	r1, #3
 8005066:	47a0      	blx	r4
 8005068:	bd10      	pop	{r4, pc}
	...

0800506c <interface_rx_enable>:
 800506c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005070:	b084      	sub	sp, #16
 8005072:	4604      	mov	r4, r0
 8005074:	6883      	ldr	r3, [r0, #8]
 8005076:	695d      	ldr	r5, [r3, #20]
 8005078:	f8d1 a008 	ldr.w	sl, [r1, #8]
 800507c:	680b      	ldr	r3, [r1, #0]
 800507e:	9303      	str	r3, [sp, #12]
 8005080:	684a      	ldr	r2, [r1, #4]
 8005082:	ab04      	add	r3, sp, #16
 8005084:	f843 2d08 	str.w	r2, [r3, #-8]!
 8005088:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 800508a:	2200      	movs	r2, #0
 800508c:	214f      	movs	r1, #79	; 0x4f
 800508e:	47b8      	blx	r7
 8005090:	4607      	mov	r7, r0
 8005092:	b118      	cbz	r0, 800509c <interface_rx_enable+0x30>
 8005094:	4638      	mov	r0, r7
 8005096:	b004      	add	sp, #16
 8005098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800509c:	68a3      	ldr	r3, [r4, #8]
 800509e:	695a      	ldr	r2, [r3, #20]
 80050a0:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	db3c      	blt.n	8005122 <interface_rx_enable+0xb6>
 80050a8:	6b57      	ldr	r7, [r2, #52]	; 0x34
 80050aa:	ab01      	add	r3, sp, #4
 80050ac:	2200      	movs	r2, #0
 80050ae:	2157      	movs	r1, #87	; 0x57
 80050b0:	4620      	mov	r0, r4
 80050b2:	47b8      	blx	r7
 80050b4:	bba8      	cbnz	r0, 8005122 <interface_rx_enable+0xb6>
 80050b6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80050ba:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80050be:	041b      	lsls	r3, r3, #16
 80050c0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80050c4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80050ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80050d2:	f1ba 0f00 	cmp.w	sl, #0
 80050d6:	d131      	bne.n	800513c <interface_rx_enable+0xd0>
 80050d8:	f503 3378 	add.w	r3, r3, #253952	; 0x3e000
 80050dc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80050e0:	9303      	str	r3, [sp, #12]
 80050e2:	f04f 0a01 	mov.w	sl, #1
 80050e6:	68a3      	ldr	r3, [r4, #8]
 80050e8:	695f      	ldr	r7, [r3, #20]
 80050ea:	f10d 0302 	add.w	r3, sp, #2
 80050ee:	2200      	movs	r2, #0
 80050f0:	217b      	movs	r1, #123	; 0x7b
 80050f2:	4620      	mov	r0, r4
 80050f4:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 80050f6:	47b0      	blx	r6
 80050f8:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d04e      	beq.n	800519e <interface_rx_enable+0x132>
 8005100:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 8005104:	2201      	movs	r2, #1
 8005106:	fa02 f303 	lsl.w	r3, r2, r3
 800510a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800510e:	ea22 0203 	bic.w	r2, r2, r3
 8005112:	ab04      	add	r3, sp, #16
 8005114:	f823 2d0e 	strh.w	r2, [r3, #-14]!
 8005118:	6b7f      	ldr	r7, [r7, #52]	; 0x34
 800511a:	2200      	movs	r2, #0
 800511c:	216b      	movs	r1, #107	; 0x6b
 800511e:	4620      	mov	r0, r4
 8005120:	47b8      	blx	r7
 8005122:	f1ba 0f00 	cmp.w	sl, #0
 8005126:	d14a      	bne.n	80051be <interface_rx_enable+0x152>
 8005128:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800512a:	2300      	movs	r3, #0
 800512c:	461a      	mov	r2, r3
 800512e:	211f      	movs	r1, #31
 8005130:	4620      	mov	r0, r4
 8005132:	47a8      	blx	r5
 8005134:	4607      	mov	r7, r0
 8005136:	2800      	cmp	r0, #0
 8005138:	d150      	bne.n	80051dc <interface_rx_enable+0x170>
 800513a:	e7ab      	b.n	8005094 <interface_rx_enable+0x28>
 800513c:	9a03      	ldr	r2, [sp, #12]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	4698      	mov	r8, r3
 8005142:	ea4f 79e3 	mov.w	r9, r3, asr #31
 8005146:	ea4f 1249 	mov.w	r2, r9, lsl #5
 800514a:	0158      	lsls	r0, r3, #5
 800514c:	ea42 61d3 	orr.w	r1, r2, r3, lsr #27
 8005150:	1ac0      	subs	r0, r0, r3
 8005152:	eb61 0109 	sbc.w	r1, r1, r9
 8005156:	024b      	lsls	r3, r1, #9
 8005158:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800515c:	0242      	lsls	r2, r0, #9
 800515e:	eb12 0008 	adds.w	r0, r2, r8
 8005162:	eb43 0109 	adc.w	r1, r3, r9
 8005166:	018b      	lsls	r3, r1, #6
 8005168:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800516c:	0182      	lsls	r2, r0, #6
 800516e:	1a12      	subs	r2, r2, r0
 8005170:	eb63 0301 	sbc.w	r3, r3, r1
 8005174:	4616      	mov	r6, r2
 8005176:	461f      	mov	r7, r3
 8005178:	4a31      	ldr	r2, [pc, #196]	; (8005240 <interface_rx_enable+0x1d4>)
 800517a:	2300      	movs	r3, #0
 800517c:	eb16 0008 	adds.w	r0, r6, r8
 8005180:	eb47 0109 	adc.w	r1, r7, r9
 8005184:	f7fb fd9a 	bl	8000cbc <__aeabi_uldivmod>
 8005188:	f5b0 7f7f 	cmp.w	r0, #1020	; 0x3fc
 800518c:	ddab      	ble.n	80050e6 <interface_rx_enable+0x7a>
 800518e:	68a3      	ldr	r3, [r4, #8]
 8005190:	695f      	ldr	r7, [r3, #20]
 8005192:	f5b0 707f 	subs.w	r0, r0, #1020	; 0x3fc
 8005196:	d0a8      	beq.n	80050ea <interface_rx_enable+0x7e>
 8005198:	f7fc f9df 	bl	800155a <deca_usleep>
 800519c:	e7a5      	b.n	80050ea <interface_rx_enable+0x7e>
 800519e:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 80051a2:	2201      	movs	r2, #1
 80051a4:	409a      	lsls	r2, r3
 80051a6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80051aa:	431a      	orrs	r2, r3
 80051ac:	ab04      	add	r3, sp, #16
 80051ae:	f823 2d0e 	strh.w	r2, [r3, #-14]!
 80051b2:	6b7f      	ldr	r7, [r7, #52]	; 0x34
 80051b4:	2200      	movs	r2, #0
 80051b6:	216b      	movs	r1, #107	; 0x6b
 80051b8:	4620      	mov	r0, r4
 80051ba:	47b8      	blx	r7
 80051bc:	e7b1      	b.n	8005122 <interface_rx_enable+0xb6>
 80051be:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 80051c0:	ab03      	add	r3, sp, #12
 80051c2:	2200      	movs	r2, #0
 80051c4:	2105      	movs	r1, #5
 80051c6:	4620      	mov	r0, r4
 80051c8:	47b0      	blx	r6
 80051ca:	4607      	mov	r7, r0
 80051cc:	b930      	cbnz	r0, 80051dc <interface_rx_enable+0x170>
 80051ce:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 80051d0:	2300      	movs	r3, #0
 80051d2:	2201      	movs	r2, #1
 80051d4:	211f      	movs	r1, #31
 80051d6:	4620      	mov	r0, r4
 80051d8:	47a8      	blx	r5
 80051da:	4607      	mov	r7, r0
 80051dc:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f6ff af57 	blt.w	8005094 <interface_rx_enable+0x28>
 80051e6:	68a3      	ldr	r3, [r4, #8]
 80051e8:	695d      	ldr	r5, [r3, #20]
 80051ea:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 80051ec:	ab01      	add	r3, sp, #4
 80051ee:	2200      	movs	r2, #0
 80051f0:	217b      	movs	r1, #123	; 0x7b
 80051f2:	4620      	mov	r0, r4
 80051f4:	47b0      	blx	r6
 80051f6:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 80051fa:	b18b      	cbz	r3, 8005220 <interface_rx_enable+0x1b4>
 80051fc:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 8005200:	2201      	movs	r2, #1
 8005202:	fa02 f303 	lsl.w	r3, r2, r3
 8005206:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800520a:	ea22 0203 	bic.w	r2, r2, r3
 800520e:	ab04      	add	r3, sp, #16
 8005210:	f823 2d0c 	strh.w	r2, [r3, #-12]!
 8005214:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8005216:	2200      	movs	r2, #0
 8005218:	216b      	movs	r1, #107	; 0x6b
 800521a:	4620      	mov	r0, r4
 800521c:	47a8      	blx	r5
 800521e:	e739      	b.n	8005094 <interface_rx_enable+0x28>
 8005220:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 8005224:	2201      	movs	r2, #1
 8005226:	409a      	lsls	r2, r3
 8005228:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800522c:	431a      	orrs	r2, r3
 800522e:	ab04      	add	r3, sp, #16
 8005230:	f823 2d0c 	strh.w	r2, [r3, #-12]!
 8005234:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8005236:	2200      	movs	r2, #0
 8005238:	216b      	movs	r1, #107	; 0x6b
 800523a:	4620      	mov	r0, r4
 800523c:	47a8      	blx	r5
 800523e:	e729      	b.n	8005094 <interface_rx_enable+0x28>
 8005240:	0ee09800 	.word	0x0ee09800

08005244 <interface_read_rx_frame>:
 8005244:	b510      	push	{r4, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	9100      	str	r1, [sp, #0]
 800524a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f8ad 2006 	strh.w	r2, [sp, #6]
 8005254:	6883      	ldr	r3, [r0, #8]
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800525a:	466b      	mov	r3, sp
 800525c:	2121      	movs	r1, #33	; 0x21
 800525e:	47a0      	blx	r4
 8005260:	b002      	add	sp, #8
 8005262:	bd10      	pop	{r4, pc}

08005264 <dwt_probe>:
 8005264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005266:	b083      	sub	sp, #12
 8005268:	6803      	ldr	r3, [r0, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d037      	beq.n	80052de <dwt_probe+0x7a>
 800526e:	4a1f      	ldr	r2, [pc, #124]	; (80052ec <dwt_probe+0x88>)
 8005270:	6013      	str	r3, [r2, #0]
 8005272:	4b1e      	ldr	r3, [pc, #120]	; (80052ec <dwt_probe+0x88>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6842      	ldr	r2, [r0, #4]
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	6882      	ldr	r2, [r0, #8]
 800527c:	605a      	str	r2, [r3, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f88d 2003 	strb.w	r2, [sp, #3]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681c      	ldr	r4, [r3, #0]
 8005288:	ab01      	add	r3, sp, #4
 800528a:	2204      	movs	r2, #4
 800528c:	f10d 0103 	add.w	r1, sp, #3
 8005290:	2001      	movs	r0, #1
 8005292:	47a0      	blx	r4
 8005294:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005298:	f89d 1006 	ldrb.w	r1, [sp, #6]
 800529c:	0409      	lsls	r1, r1, #16
 800529e:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
 80052a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80052a6:	4319      	orrs	r1, r3
 80052a8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80052ac:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 80052b0:	4a0f      	ldr	r2, [pc, #60]	; (80052f0 <dwt_probe+0x8c>)
 80052b2:	4b10      	ldr	r3, [pc, #64]	; (80052f4 <dwt_probe+0x90>)
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d216      	bcs.n	80052e6 <dwt_probe+0x82>
 80052b8:	4b0c      	ldr	r3, [pc, #48]	; (80052ec <dwt_probe+0x88>)
 80052ba:	681f      	ldr	r7, [r3, #0]
 80052bc:	4613      	mov	r3, r2
 80052be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052c2:	2600      	movs	r6, #0
 80052c4:	4d0b      	ldr	r5, [pc, #44]	; (80052f4 <dwt_probe+0x90>)
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	404a      	eors	r2, r1
 80052ca:	685c      	ldr	r4, [r3, #4]
 80052cc:	4222      	tst	r2, r4
 80052ce:	bf04      	itt	eq
 80052d0:	60bb      	streq	r3, [r7, #8]
 80052d2:	4630      	moveq	r0, r6
 80052d4:	331c      	adds	r3, #28
 80052d6:	42ab      	cmp	r3, r5
 80052d8:	d3f5      	bcc.n	80052c6 <dwt_probe+0x62>
 80052da:	b003      	add	sp, #12
 80052dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052de:	4b03      	ldr	r3, [pc, #12]	; (80052ec <dwt_probe+0x88>)
 80052e0:	4a05      	ldr	r2, [pc, #20]	; (80052f8 <dwt_probe+0x94>)
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	e7c5      	b.n	8005272 <dwt_probe+0xe>
 80052e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052ea:	e7f6      	b.n	80052da <dwt_probe+0x76>
 80052ec:	20000414 	.word	0x20000414
 80052f0:	080001a0 	.word	0x080001a0
 80052f4:	080001f4 	.word	0x080001f4
 80052f8:	20000418 	.word	0x20000418

080052fc <dwt_readdevid>:
 80052fc:	b510      	push	{r4, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	2100      	movs	r1, #0
 8005302:	ab02      	add	r3, sp, #8
 8005304:	f843 1d04 	str.w	r1, [r3, #-4]!
 8005308:	4a04      	ldr	r2, [pc, #16]	; (800531c <dwt_readdevid+0x20>)
 800530a:	6810      	ldr	r0, [r2, #0]
 800530c:	6882      	ldr	r2, [r0, #8]
 800530e:	6912      	ldr	r2, [r2, #16]
 8005310:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8005312:	460a      	mov	r2, r1
 8005314:	47a0      	blx	r4
 8005316:	9801      	ldr	r0, [sp, #4]
 8005318:	b002      	add	sp, #8
 800531a:	bd10      	pop	{r4, pc}
 800531c:	20000414 	.word	0x20000414

08005320 <dwt_setlnapamode>:
 8005320:	b538      	push	{r3, r4, r5, lr}
 8005322:	4b05      	ldr	r3, [pc, #20]	; (8005338 <dwt_setlnapamode+0x18>)
 8005324:	681c      	ldr	r4, [r3, #0]
 8005326:	68a3      	ldr	r3, [r4, #8]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800532c:	2300      	movs	r3, #0
 800532e:	4602      	mov	r2, r0
 8005330:	2113      	movs	r1, #19
 8005332:	4620      	mov	r0, r4
 8005334:	47a8      	blx	r5
 8005336:	bd38      	pop	{r3, r4, r5, pc}
 8005338:	20000414 	.word	0x20000414

0800533c <dwt_initialise>:
 800533c:	b508      	push	{r3, lr}
 800533e:	4b04      	ldr	r3, [pc, #16]	; (8005350 <dwt_initialise+0x14>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689a      	ldr	r2, [r3, #8]
 8005344:	6912      	ldr	r2, [r2, #16]
 8005346:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005348:	4601      	mov	r1, r0
 800534a:	4618      	mov	r0, r3
 800534c:	4790      	blx	r2
 800534e:	bd08      	pop	{r3, pc}
 8005350:	20000414 	.word	0x20000414

08005354 <dwt_configure>:
 8005354:	b508      	push	{r3, lr}
 8005356:	4b04      	ldr	r3, [pc, #16]	; (8005368 <dwt_configure+0x14>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	6912      	ldr	r2, [r2, #16]
 800535e:	6812      	ldr	r2, [r2, #0]
 8005360:	4601      	mov	r1, r0
 8005362:	4618      	mov	r0, r3
 8005364:	4790      	blx	r2
 8005366:	bd08      	pop	{r3, pc}
 8005368:	20000414 	.word	0x20000414

0800536c <dwt_configuretxrf>:
 800536c:	b508      	push	{r3, lr}
 800536e:	4b04      	ldr	r3, [pc, #16]	; (8005380 <dwt_configuretxrf+0x14>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	6912      	ldr	r2, [r2, #16]
 8005376:	6992      	ldr	r2, [r2, #24]
 8005378:	4601      	mov	r1, r0
 800537a:	4618      	mov	r0, r3
 800537c:	4790      	blx	r2
 800537e:	bd08      	pop	{r3, pc}
 8005380:	20000414 	.word	0x20000414

08005384 <dwt_setrxantennadelay>:
 8005384:	b510      	push	{r4, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	ab02      	add	r3, sp, #8
 800538a:	f823 0d02 	strh.w	r0, [r3, #-2]!
 800538e:	4a05      	ldr	r2, [pc, #20]	; (80053a4 <dwt_setrxantennadelay+0x20>)
 8005390:	6810      	ldr	r0, [r2, #0]
 8005392:	6882      	ldr	r2, [r0, #8]
 8005394:	6912      	ldr	r2, [r2, #16]
 8005396:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8005398:	2200      	movs	r2, #0
 800539a:	211b      	movs	r1, #27
 800539c:	47a0      	blx	r4
 800539e:	b002      	add	sp, #8
 80053a0:	bd10      	pop	{r4, pc}
 80053a2:	bf00      	nop
 80053a4:	20000414 	.word	0x20000414

080053a8 <dwt_settxantennadelay>:
 80053a8:	b510      	push	{r4, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	ab02      	add	r3, sp, #8
 80053ae:	f823 0d02 	strh.w	r0, [r3, #-2]!
 80053b2:	4a05      	ldr	r2, [pc, #20]	; (80053c8 <dwt_settxantennadelay+0x20>)
 80053b4:	6810      	ldr	r0, [r2, #0]
 80053b6:	6882      	ldr	r2, [r0, #8]
 80053b8:	6912      	ldr	r2, [r2, #16]
 80053ba:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80053bc:	2200      	movs	r2, #0
 80053be:	211d      	movs	r1, #29
 80053c0:	47a0      	blx	r4
 80053c2:	b002      	add	sp, #8
 80053c4:	bd10      	pop	{r4, pc}
 80053c6:	bf00      	nop
 80053c8:	20000414 	.word	0x20000414

080053cc <dwt_writetxdata>:
 80053cc:	b538      	push	{r3, r4, r5, lr}
 80053ce:	4b05      	ldr	r3, [pc, #20]	; (80053e4 <dwt_writetxdata+0x18>)
 80053d0:	681c      	ldr	r4, [r3, #0]
 80053d2:	68a3      	ldr	r3, [r4, #8]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	685d      	ldr	r5, [r3, #4]
 80053d8:	4613      	mov	r3, r2
 80053da:	460a      	mov	r2, r1
 80053dc:	4601      	mov	r1, r0
 80053de:	4620      	mov	r0, r4
 80053e0:	47a8      	blx	r5
 80053e2:	bd38      	pop	{r3, r4, r5, pc}
 80053e4:	20000414 	.word	0x20000414

080053e8 <dwt_writetxfctrl>:
 80053e8:	b538      	push	{r3, r4, r5, lr}
 80053ea:	4b05      	ldr	r3, [pc, #20]	; (8005400 <dwt_writetxfctrl+0x18>)
 80053ec:	681c      	ldr	r4, [r3, #0]
 80053ee:	68a3      	ldr	r3, [r4, #8]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	689d      	ldr	r5, [r3, #8]
 80053f4:	4613      	mov	r3, r2
 80053f6:	460a      	mov	r2, r1
 80053f8:	4601      	mov	r1, r0
 80053fa:	4620      	mov	r0, r4
 80053fc:	47a8      	blx	r5
 80053fe:	bd38      	pop	{r3, r4, r5, pc}
 8005400:	20000414 	.word	0x20000414

08005404 <dwt_starttx>:
 8005404:	b510      	push	{r4, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	ab02      	add	r3, sp, #8
 800540a:	f803 0d01 	strb.w	r0, [r3, #-1]!
 800540e:	4a05      	ldr	r2, [pc, #20]	; (8005424 <dwt_starttx+0x20>)
 8005410:	6810      	ldr	r0, [r2, #0]
 8005412:	6882      	ldr	r2, [r0, #8]
 8005414:	6912      	ldr	r2, [r2, #16]
 8005416:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8005418:	2200      	movs	r2, #0
 800541a:	2104      	movs	r1, #4
 800541c:	47a0      	blx	r4
 800541e:	b002      	add	sp, #8
 8005420:	bd10      	pop	{r4, pc}
 8005422:	bf00      	nop
 8005424:	20000414 	.word	0x20000414

08005428 <dwt_readtxtimestamplo32>:
 8005428:	b510      	push	{r4, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	2200      	movs	r2, #0
 800542e:	ab02      	add	r3, sp, #8
 8005430:	f843 2d04 	str.w	r2, [r3, #-4]!
 8005434:	4904      	ldr	r1, [pc, #16]	; (8005448 <dwt_readtxtimestamplo32+0x20>)
 8005436:	6808      	ldr	r0, [r1, #0]
 8005438:	6881      	ldr	r1, [r0, #8]
 800543a:	6909      	ldr	r1, [r1, #16]
 800543c:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800543e:	2131      	movs	r1, #49	; 0x31
 8005440:	47a0      	blx	r4
 8005442:	9801      	ldr	r0, [sp, #4]
 8005444:	b002      	add	sp, #8
 8005446:	bd10      	pop	{r4, pc}
 8005448:	20000414 	.word	0x20000414

0800544c <dwt_readpdoa>:
 800544c:	b510      	push	{r4, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	2200      	movs	r2, #0
 8005452:	ab02      	add	r3, sp, #8
 8005454:	f823 2d02 	strh.w	r2, [r3, #-2]!
 8005458:	4905      	ldr	r1, [pc, #20]	; (8005470 <dwt_readpdoa+0x24>)
 800545a:	6808      	ldr	r0, [r1, #0]
 800545c:	6881      	ldr	r1, [r0, #8]
 800545e:	6909      	ldr	r1, [r1, #16]
 8005460:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8005462:	2133      	movs	r1, #51	; 0x33
 8005464:	47a0      	blx	r4
 8005466:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 800546a:	b002      	add	sp, #8
 800546c:	bd10      	pop	{r4, pc}
 800546e:	bf00      	nop
 8005470:	20000414 	.word	0x20000414

08005474 <dwt_readrxtimestamplo32>:
 8005474:	b510      	push	{r4, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	2200      	movs	r2, #0
 800547a:	ab02      	add	r3, sp, #8
 800547c:	f843 2d04 	str.w	r2, [r3, #-4]!
 8005480:	4904      	ldr	r1, [pc, #16]	; (8005494 <dwt_readrxtimestamplo32+0x20>)
 8005482:	6808      	ldr	r0, [r1, #0]
 8005484:	6881      	ldr	r1, [r0, #8]
 8005486:	6909      	ldr	r1, [r1, #16]
 8005488:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800548a:	2163      	movs	r1, #99	; 0x63
 800548c:	47a0      	blx	r4
 800548e:	9801      	ldr	r0, [sp, #4]
 8005490:	b002      	add	sp, #8
 8005492:	bd10      	pop	{r4, pc}
 8005494:	20000414 	.word	0x20000414

08005498 <dwt_forcetrxoff>:
 8005498:	b510      	push	{r4, lr}
 800549a:	4b05      	ldr	r3, [pc, #20]	; (80054b0 <dwt_forcetrxoff+0x18>)
 800549c:	6818      	ldr	r0, [r3, #0]
 800549e:	6883      	ldr	r3, [r0, #8]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80054a4:	2300      	movs	r3, #0
 80054a6:	461a      	mov	r2, r3
 80054a8:	2103      	movs	r1, #3
 80054aa:	47a0      	blx	r4
 80054ac:	bd10      	pop	{r4, pc}
 80054ae:	bf00      	nop
 80054b0:	20000414 	.word	0x20000414

080054b4 <dwt_rxenable>:
 80054b4:	b508      	push	{r3, lr}
 80054b6:	4b04      	ldr	r3, [pc, #16]	; (80054c8 <dwt_rxenable+0x14>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	6912      	ldr	r2, [r2, #16]
 80054be:	6a12      	ldr	r2, [r2, #32]
 80054c0:	4601      	mov	r1, r0
 80054c2:	4618      	mov	r0, r3
 80054c4:	4790      	blx	r2
 80054c6:	bd08      	pop	{r3, pc}
 80054c8:	20000414 	.word	0x20000414

080054cc <dwt_setrxtimeout>:
 80054cc:	b510      	push	{r4, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	ab02      	add	r3, sp, #8
 80054d2:	f843 0d04 	str.w	r0, [r3, #-4]!
 80054d6:	4a05      	ldr	r2, [pc, #20]	; (80054ec <dwt_setrxtimeout+0x20>)
 80054d8:	6810      	ldr	r0, [r2, #0]
 80054da:	6882      	ldr	r2, [r0, #8]
 80054dc:	6912      	ldr	r2, [r2, #16]
 80054de:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80054e0:	2200      	movs	r2, #0
 80054e2:	2151      	movs	r1, #81	; 0x51
 80054e4:	47a0      	blx	r4
 80054e6:	b002      	add	sp, #8
 80054e8:	bd10      	pop	{r4, pc}
 80054ea:	bf00      	nop
 80054ec:	20000414 	.word	0x20000414

080054f0 <dwt_setcallbacks>:
 80054f0:	b410      	push	{r4}
 80054f2:	4c07      	ldr	r4, [pc, #28]	; (8005510 <dwt_setcallbacks+0x20>)
 80054f4:	6824      	ldr	r4, [r4, #0]
 80054f6:	6120      	str	r0, [r4, #16]
 80054f8:	6161      	str	r1, [r4, #20]
 80054fa:	61a2      	str	r2, [r4, #24]
 80054fc:	61e3      	str	r3, [r4, #28]
 80054fe:	9b01      	ldr	r3, [sp, #4]
 8005500:	6223      	str	r3, [r4, #32]
 8005502:	9b02      	ldr	r3, [sp, #8]
 8005504:	6263      	str	r3, [r4, #36]	; 0x24
 8005506:	9b03      	ldr	r3, [sp, #12]
 8005508:	62a3      	str	r3, [r4, #40]	; 0x28
 800550a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	20000414 	.word	0x20000414

08005514 <dwt_checkidlerc>:
 8005514:	b510      	push	{r4, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	2200      	movs	r2, #0
 800551a:	ab02      	add	r3, sp, #8
 800551c:	f803 2d01 	strb.w	r2, [r3, #-1]!
 8005520:	4905      	ldr	r1, [pc, #20]	; (8005538 <dwt_checkidlerc+0x24>)
 8005522:	6808      	ldr	r0, [r1, #0]
 8005524:	6881      	ldr	r1, [r0, #8]
 8005526:	6909      	ldr	r1, [r1, #16]
 8005528:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800552a:	2158      	movs	r1, #88	; 0x58
 800552c:	47a0      	blx	r4
 800552e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8005532:	b002      	add	sp, #8
 8005534:	bd10      	pop	{r4, pc}
 8005536:	bf00      	nop
 8005538:	20000414 	.word	0x20000414

0800553c <dwt_isr>:
 800553c:	b508      	push	{r3, lr}
 800553e:	4b03      	ldr	r3, [pc, #12]	; (800554c <dwt_isr+0x10>)
 8005540:	6818      	ldr	r0, [r3, #0]
 8005542:	6883      	ldr	r3, [r0, #8]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005548:	4798      	blx	r3
 800554a:	bd08      	pop	{r3, pc}
 800554c:	20000414 	.word	0x20000414

08005550 <dwt_setinterrupt>:
 8005550:	b538      	push	{r3, r4, r5, lr}
 8005552:	4b05      	ldr	r3, [pc, #20]	; (8005568 <dwt_setinterrupt+0x18>)
 8005554:	681c      	ldr	r4, [r3, #0]
 8005556:	68a3      	ldr	r3, [r4, #8]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	69dd      	ldr	r5, [r3, #28]
 800555c:	4613      	mov	r3, r2
 800555e:	460a      	mov	r2, r1
 8005560:	4601      	mov	r1, r0
 8005562:	4620      	mov	r0, r4
 8005564:	47a8      	blx	r5
 8005566:	bd38      	pop	{r3, r4, r5, pc}
 8005568:	20000414 	.word	0x20000414

0800556c <dwt_generatecrc8>:
 800556c:	2900      	cmp	r1, #0
 800556e:	dd0d      	ble.n	800558c <dwt_generatecrc8+0x20>
 8005570:	b410      	push	{r4}
 8005572:	1e43      	subs	r3, r0, #1
 8005574:	4419      	add	r1, r3
 8005576:	4610      	mov	r0, r2
 8005578:	4c05      	ldr	r4, [pc, #20]	; (8005590 <dwt_generatecrc8+0x24>)
 800557a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800557e:	4050      	eors	r0, r2
 8005580:	5c20      	ldrb	r0, [r4, r0]
 8005582:	428b      	cmp	r3, r1
 8005584:	d1f9      	bne.n	800557a <dwt_generatecrc8+0xe>
 8005586:	f85d 4b04 	ldr.w	r4, [sp], #4
 800558a:	4770      	bx	lr
 800558c:	4610      	mov	r0, r2
 800558e:	4770      	bx	lr
 8005590:	08015c64 	.word	0x08015c64

08005594 <dwt_setrxaftertxdelay>:
 8005594:	b510      	push	{r4, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	ab02      	add	r3, sp, #8
 800559a:	f843 0d04 	str.w	r0, [r3, #-4]!
 800559e:	4a05      	ldr	r2, [pc, #20]	; (80055b4 <dwt_setrxaftertxdelay+0x20>)
 80055a0:	6810      	ldr	r0, [r2, #0]
 80055a2:	6882      	ldr	r2, [r0, #8]
 80055a4:	6912      	ldr	r2, [r2, #16]
 80055a6:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80055a8:	2200      	movs	r2, #0
 80055aa:	2110      	movs	r1, #16
 80055ac:	47a0      	blx	r4
 80055ae:	b002      	add	sp, #8
 80055b0:	bd10      	pop	{r4, pc}
 80055b2:	bf00      	nop
 80055b4:	20000414 	.word	0x20000414

080055b8 <dwt_readrxdata>:
 80055b8:	b538      	push	{r3, r4, r5, lr}
 80055ba:	4b05      	ldr	r3, [pc, #20]	; (80055d0 <dwt_readrxdata+0x18>)
 80055bc:	681c      	ldr	r4, [r3, #0]
 80055be:	68a3      	ldr	r3, [r4, #8]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	68dd      	ldr	r5, [r3, #12]
 80055c4:	4613      	mov	r3, r2
 80055c6:	460a      	mov	r2, r1
 80055c8:	4601      	mov	r1, r0
 80055ca:	4620      	mov	r0, r4
 80055cc:	47a8      	blx	r5
 80055ce:	bd38      	pop	{r3, r4, r5, pc}
 80055d0:	20000414 	.word	0x20000414

080055d4 <dwt_readclockoffset>:
 80055d4:	b510      	push	{r4, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	2200      	movs	r2, #0
 80055da:	ab02      	add	r3, sp, #8
 80055dc:	f823 2d02 	strh.w	r2, [r3, #-2]!
 80055e0:	4905      	ldr	r1, [pc, #20]	; (80055f8 <dwt_readclockoffset+0x24>)
 80055e2:	6808      	ldr	r0, [r1, #0]
 80055e4:	6881      	ldr	r1, [r0, #8]
 80055e6:	6909      	ldr	r1, [r1, #16]
 80055e8:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80055ea:	212c      	movs	r1, #44	; 0x2c
 80055ec:	47a0      	blx	r4
 80055ee:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 80055f2:	b002      	add	sp, #8
 80055f4:	bd10      	pop	{r4, pc}
 80055f6:	bf00      	nop
 80055f8:	20000414 	.word	0x20000414

080055fc <dwt_readstsquality>:
 80055fc:	b538      	push	{r3, r4, r5, lr}
 80055fe:	4b05      	ldr	r3, [pc, #20]	; (8005614 <dwt_readstsquality+0x18>)
 8005600:	681c      	ldr	r4, [r3, #0]
 8005602:	68a3      	ldr	r3, [r4, #8]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8005608:	4603      	mov	r3, r0
 800560a:	2200      	movs	r2, #0
 800560c:	214b      	movs	r1, #75	; 0x4b
 800560e:	4620      	mov	r0, r4
 8005610:	47a8      	blx	r5
 8005612:	bd38      	pop	{r3, r4, r5, pc}
 8005614:	20000414 	.word	0x20000414

08005618 <dwt_setleds>:
 8005618:	b510      	push	{r4, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	ab02      	add	r3, sp, #8
 800561e:	f803 0d01 	strb.w	r0, [r3, #-1]!
 8005622:	4a05      	ldr	r2, [pc, #20]	; (8005638 <dwt_setleds+0x20>)
 8005624:	6810      	ldr	r0, [r2, #0]
 8005626:	6882      	ldr	r2, [r0, #8]
 8005628:	6912      	ldr	r2, [r2, #16]
 800562a:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800562c:	2200      	movs	r2, #0
 800562e:	2155      	movs	r1, #85	; 0x55
 8005630:	47a0      	blx	r4
 8005632:	b002      	add	sp, #8
 8005634:	bd10      	pop	{r4, pc}
 8005636:	bf00      	nop
 8005638:	20000414 	.word	0x20000414

0800563c <dwt_writesysstatuslo>:
 800563c:	b510      	push	{r4, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	ab02      	add	r3, sp, #8
 8005642:	f843 0d04 	str.w	r0, [r3, #-4]!
 8005646:	4a05      	ldr	r2, [pc, #20]	; (800565c <dwt_writesysstatuslo+0x20>)
 8005648:	6810      	ldr	r0, [r2, #0]
 800564a:	6882      	ldr	r2, [r0, #8]
 800564c:	6912      	ldr	r2, [r2, #16]
 800564e:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8005650:	2200      	movs	r2, #0
 8005652:	2174      	movs	r1, #116	; 0x74
 8005654:	47a0      	blx	r4
 8005656:	b002      	add	sp, #8
 8005658:	bd10      	pop	{r4, pc}
 800565a:	bf00      	nop
 800565c:	20000414 	.word	0x20000414

08005660 <dwt_readsysstatuslo>:
 8005660:	b510      	push	{r4, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	2200      	movs	r2, #0
 8005666:	ab02      	add	r3, sp, #8
 8005668:	f843 2d04 	str.w	r2, [r3, #-4]!
 800566c:	4904      	ldr	r1, [pc, #16]	; (8005680 <dwt_readsysstatuslo+0x20>)
 800566e:	6808      	ldr	r0, [r1, #0]
 8005670:	6881      	ldr	r1, [r0, #8]
 8005672:	6909      	ldr	r1, [r1, #16]
 8005674:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8005676:	2176      	movs	r1, #118	; 0x76
 8005678:	47a0      	blx	r4
 800567a:	9801      	ldr	r0, [sp, #4]
 800567c:	b002      	add	sp, #8
 800567e:	bd10      	pop	{r4, pc}
 8005680:	20000414 	.word	0x20000414

08005684 <dwt_readsysstatushi>:
 8005684:	b510      	push	{r4, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	2200      	movs	r2, #0
 800568a:	ab02      	add	r3, sp, #8
 800568c:	f843 2d04 	str.w	r2, [r3, #-4]!
 8005690:	4904      	ldr	r1, [pc, #16]	; (80056a4 <dwt_readsysstatushi+0x20>)
 8005692:	6808      	ldr	r0, [r1, #0]
 8005694:	6881      	ldr	r1, [r0, #8]
 8005696:	6909      	ldr	r1, [r1, #16]
 8005698:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800569a:	2177      	movs	r1, #119	; 0x77
 800569c:	47a0      	blx	r4
 800569e:	9801      	ldr	r0, [sp, #4]
 80056a0:	b002      	add	sp, #8
 80056a2:	bd10      	pop	{r4, pc}
 80056a4:	20000414 	.word	0x20000414

080056a8 <dwt_getframelength>:
 80056a8:	b510      	push	{r4, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	2200      	movs	r2, #0
 80056ae:	ab02      	add	r3, sp, #8
 80056b0:	f823 2d02 	strh.w	r2, [r3, #-2]!
 80056b4:	4905      	ldr	r1, [pc, #20]	; (80056cc <dwt_getframelength+0x24>)
 80056b6:	6808      	ldr	r0, [r1, #0]
 80056b8:	6881      	ldr	r1, [r0, #8]
 80056ba:	6909      	ldr	r1, [r1, #16]
 80056bc:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80056be:	217a      	movs	r1, #122	; 0x7a
 80056c0:	47a0      	blx	r4
 80056c2:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80056c6:	b002      	add	sp, #8
 80056c8:	bd10      	pop	{r4, pc}
 80056ca:	bf00      	nop
 80056cc:	20000414 	.word	0x20000414

080056d0 <dwt_dbg_fn>:
 80056d0:	2998      	cmp	r1, #152	; 0x98
 80056d2:	4802      	ldr	r0, [pc, #8]	; (80056dc <dwt_dbg_fn+0xc>)
 80056d4:	bf18      	it	ne
 80056d6:	2000      	movne	r0, #0
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	08015e5c 	.word	0x08015e5c

080056e0 <_deinit>:
 80056e0:	4770      	bx	lr

080056e2 <dwt_xfer3xxx>:
 80056e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	4605      	mov	r5, r0
 80056ea:	460e      	mov	r6, r1
 80056ec:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80056f0:	1990      	adds	r0, r2, r6
 80056f2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80056f6:	4432      	add	r2, r6
 80056f8:	f3c2 4204 	ubfx	r2, r2, #16, #5
 80056fc:	0084      	lsls	r4, r0, #2
 80056fe:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
 8005702:	ea41 0204 	orr.w	r2, r1, r4
 8005706:	0a12      	lsrs	r2, r2, #8
 8005708:	f88d 200c 	strb.w	r2, [sp, #12]
 800570c:	f001 0703 	and.w	r7, r1, #3
 8005710:	433c      	orrs	r4, r7
 8005712:	f88d 400d 	strb.w	r4, [sp, #13]
 8005716:	461f      	mov	r7, r3
 8005718:	b973      	cbnz	r3, 8005738 <dwt_xfer3xxx+0x56>
 800571a:	2900      	cmp	r1, #0
 800571c:	d05c      	beq.n	80057d8 <dwt_xfer3xxx+0xf6>
 800571e:	0073      	lsls	r3, r6, #1
 8005720:	f063 037e 	orn	r3, r3, #126	; 0x7e
 8005724:	f88d 300c 	strb.w	r3, [sp, #12]
 8005728:	2401      	movs	r4, #1
 800572a:	2900      	cmp	r1, #0
 800572c:	d02f      	beq.n	800578e <dwt_xfer3xxx+0xac>
 800572e:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 8005732:	2903      	cmp	r1, #3
 8005734:	d90a      	bls.n	800574c <dwt_xfer3xxx+0x6a>
 8005736:	e7fe      	b.n	8005736 <dwt_xfer3xxx+0x54>
 8005738:	2800      	cmp	r0, #0
 800573a:	d14f      	bne.n	80057dc <dwt_xfer3xxx+0xfa>
 800573c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005740:	d003      	beq.n	800574a <dwt_xfer3xxx+0x68>
 8005742:	2900      	cmp	r1, #0
 8005744:	d14a      	bne.n	80057dc <dwt_xfer3xxx+0xfa>
 8005746:	2401      	movs	r4, #1
 8005748:	e021      	b.n	800578e <dwt_xfer3xxx+0xac>
 800574a:	2401      	movs	r4, #1
 800574c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800574e:	7d9b      	ldrb	r3, [r3, #22]
 8005750:	b94b      	cbnz	r3, 8005766 <dwt_xfer3xxx+0x84>
 8005752:	682b      	ldr	r3, [r5, #0]
 8005754:	685d      	ldr	r5, [r3, #4]
 8005756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005758:	463a      	mov	r2, r7
 800575a:	a903      	add	r1, sp, #12
 800575c:	4620      	mov	r0, r4
 800575e:	47a8      	blx	r5
 8005760:	b004      	add	sp, #16
 8005762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005766:	2200      	movs	r2, #0
 8005768:	4621      	mov	r1, r4
 800576a:	a803      	add	r0, sp, #12
 800576c:	f7ff fefe 	bl	800556c <dwt_generatecrc8>
 8005770:	4602      	mov	r2, r0
 8005772:	4639      	mov	r1, r7
 8005774:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005776:	f7ff fef9 	bl	800556c <dwt_generatecrc8>
 800577a:	682b      	ldr	r3, [r5, #0]
 800577c:	9000      	str	r0, [sp, #0]
 800577e:	689d      	ldr	r5, [r3, #8]
 8005780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005782:	463a      	mov	r2, r7
 8005784:	a903      	add	r1, sp, #12
 8005786:	4620      	mov	r0, r4
 8005788:	47a8      	blx	r5
 800578a:	e7e9      	b.n	8005760 <dwt_xfer3xxx+0x7e>
 800578c:	2401      	movs	r4, #1
 800578e:	682b      	ldr	r3, [r5, #0]
 8005790:	f8d3 8000 	ldr.w	r8, [r3]
 8005794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005796:	463a      	mov	r2, r7
 8005798:	a903      	add	r1, sp, #12
 800579a:	4620      	mov	r0, r4
 800579c:	47c0      	blx	r8
 800579e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80057a0:	7d9b      	ldrb	r3, [r3, #22]
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d1dc      	bne.n	8005760 <dwt_xfer3xxx+0x7e>
 80057a6:	2e18      	cmp	r6, #24
 80057a8:	d0da      	beq.n	8005760 <dwt_xfer3xxx+0x7e>
 80057aa:	2200      	movs	r2, #0
 80057ac:	4621      	mov	r1, r4
 80057ae:	a803      	add	r0, sp, #12
 80057b0:	f7ff fedc 	bl	800556c <dwt_generatecrc8>
 80057b4:	4602      	mov	r2, r0
 80057b6:	4639      	mov	r1, r7
 80057b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80057ba:	f7ff fed7 	bl	800556c <dwt_generatecrc8>
 80057be:	4604      	mov	r4, r0
 80057c0:	2200      	movs	r2, #0
 80057c2:	2118      	movs	r1, #24
 80057c4:	4628      	mov	r0, r5
 80057c6:	f000 f841 	bl	800584c <dwt_read8bitoffsetreg>
 80057ca:	4284      	cmp	r4, r0
 80057cc:	d0c8      	beq.n	8005760 <dwt_xfer3xxx+0x7e>
 80057ce:	68eb      	ldr	r3, [r5, #12]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d0c5      	beq.n	8005760 <dwt_xfer3xxx+0x7e>
 80057d4:	4798      	blx	r3
 80057d6:	e7c3      	b.n	8005760 <dwt_xfer3xxx+0x7e>
 80057d8:	2800      	cmp	r0, #0
 80057da:	d0d7      	beq.n	800578c <dwt_xfer3xxx+0xaa>
 80057dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057e0:	f88d 200c 	strb.w	r2, [sp, #12]
 80057e4:	2402      	movs	r4, #2
 80057e6:	e7a0      	b.n	800572a <dwt_xfer3xxx+0x48>

080057e8 <dwt_readfromdevice>:
 80057e8:	b510      	push	{r4, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	2400      	movs	r4, #0
 80057ee:	9401      	str	r4, [sp, #4]
 80057f0:	9c04      	ldr	r4, [sp, #16]
 80057f2:	9400      	str	r4, [sp, #0]
 80057f4:	f7ff ff75 	bl	80056e2 <dwt_xfer3xxx>
 80057f8:	b002      	add	sp, #8
 80057fa:	bd10      	pop	{r4, pc}

080057fc <dwt_read32bitoffsetreg>:
 80057fc:	b500      	push	{lr}
 80057fe:	b085      	sub	sp, #20
 8005800:	ab03      	add	r3, sp, #12
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	2304      	movs	r3, #4
 8005806:	b292      	uxth	r2, r2
 8005808:	f7ff ffee 	bl	80057e8 <dwt_readfromdevice>
 800580c:	f10d 030f 	add.w	r3, sp, #15
 8005810:	f10d 010b 	add.w	r1, sp, #11
 8005814:	2000      	movs	r0, #0
 8005816:	f813 2901 	ldrb.w	r2, [r3], #-1
 800581a:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 800581e:	428b      	cmp	r3, r1
 8005820:	d1f9      	bne.n	8005816 <dwt_read32bitoffsetreg+0x1a>
 8005822:	b005      	add	sp, #20
 8005824:	f85d fb04 	ldr.w	pc, [sp], #4

08005828 <dwt_read16bitoffsetreg>:
 8005828:	b500      	push	{lr}
 800582a:	b085      	sub	sp, #20
 800582c:	ab03      	add	r3, sp, #12
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	2302      	movs	r3, #2
 8005832:	b292      	uxth	r2, r2
 8005834:	f7ff ffd8 	bl	80057e8 <dwt_readfromdevice>
 8005838:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800583c:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8005840:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8005844:	b280      	uxth	r0, r0
 8005846:	b005      	add	sp, #20
 8005848:	f85d fb04 	ldr.w	pc, [sp], #4

0800584c <dwt_read8bitoffsetreg>:
 800584c:	b500      	push	{lr}
 800584e:	b085      	sub	sp, #20
 8005850:	f10d 030f 	add.w	r3, sp, #15
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	2301      	movs	r3, #1
 8005858:	b292      	uxth	r2, r2
 800585a:	f7ff ffc5 	bl	80057e8 <dwt_readfromdevice>
 800585e:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8005862:	b005      	add	sp, #20
 8005864:	f85d fb04 	ldr.w	pc, [sp], #4

08005868 <ull_readdiagnostics>:
 8005868:	b530      	push	{r4, r5, lr}
 800586a:	b0bd      	sub	sp, #244	; 0xf4
 800586c:	4605      	mov	r5, r0
 800586e:	460c      	mov	r4, r1
 8005870:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005872:	7bda      	ldrb	r2, [r3, #15]
 8005874:	2a01      	cmp	r2, #1
 8005876:	d01c      	beq.n	80058b2 <ull_readdiagnostics+0x4a>
 8005878:	2a03      	cmp	r2, #3
 800587a:	f040 81d4 	bne.w	8005c26 <ull_readdiagnostics+0x3be>
 800587e:	7e1b      	ldrb	r3, [r3, #24]
 8005880:	f013 0f08 	tst.w	r3, #8
 8005884:	d10c      	bne.n	80058a0 <ull_readdiagnostics+0x38>
 8005886:	f013 0f04 	tst.w	r3, #4
 800588a:	ab02      	add	r3, sp, #8
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	bf14      	ite	ne
 8005890:	2338      	movne	r3, #56	; 0x38
 8005892:	2320      	moveq	r3, #32
 8005894:	2200      	movs	r2, #0
 8005896:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800589a:	f7ff ffa5 	bl	80057e8 <dwt_readfromdevice>
 800589e:	e019      	b.n	80058d4 <ull_readdiagnostics+0x6c>
 80058a0:	ab02      	add	r3, sp, #8
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	23e8      	movs	r3, #232	; 0xe8
 80058a6:	2200      	movs	r2, #0
 80058a8:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80058ac:	f7ff ff9c 	bl	80057e8 <dwt_readfromdevice>
 80058b0:	e010      	b.n	80058d4 <ull_readdiagnostics+0x6c>
 80058b2:	7e1b      	ldrb	r3, [r3, #24]
 80058b4:	f013 0f08 	tst.w	r3, #8
 80058b8:	f040 81ac 	bne.w	8005c14 <ull_readdiagnostics+0x3ac>
 80058bc:	f013 0f04 	tst.w	r3, #4
 80058c0:	ab02      	add	r3, sp, #8
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	bf14      	ite	ne
 80058c6:	2338      	movne	r3, #56	; 0x38
 80058c8:	2320      	moveq	r3, #32
 80058ca:	2200      	movs	r2, #0
 80058cc:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 80058d0:	f7ff ff8a 	bl	80057e8 <dwt_readfromdevice>
 80058d4:	f10d 0217 	add.w	r2, sp, #23
 80058d8:	f104 031a 	add.w	r3, r4, #26
 80058dc:	f104 0020 	add.w	r0, r4, #32
 80058e0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80058e4:	f803 1b01 	strb.w	r1, [r3], #1
 80058e8:	4283      	cmp	r3, r0
 80058ea:	d1f9      	bne.n	80058e0 <ull_readdiagnostics+0x78>
 80058ec:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80058f0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80058f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80058f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058fc:	8463      	strh	r3, [r4, #34]	; 0x22
 80058fe:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8005902:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8005906:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800590a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800590e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005912:	bf1c      	itt	ne
 8005914:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 8005918:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 800591c:	8423      	strh	r3, [r4, #32]
 800591e:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 8005922:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8005926:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800592a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800592e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005930:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005932:	7e1b      	ldrb	r3, [r3, #24]
 8005934:	f013 0f02 	tst.w	r3, #2
 8005938:	f040 816a 	bne.w	8005c10 <ull_readdiagnostics+0x3a8>
 800593c:	aa0a      	add	r2, sp, #40	; 0x28
 800593e:	1e63      	subs	r3, r4, #1
 8005940:	1d20      	adds	r0, r4, #4
 8005942:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005946:	f803 1f01 	strb.w	r1, [r3, #1]!
 800594a:	79d1      	ldrb	r1, [r2, #7]
 800594c:	7219      	strb	r1, [r3, #8]
 800594e:	7bd1      	ldrb	r1, [r2, #15]
 8005950:	7459      	strb	r1, [r3, #17]
 8005952:	4283      	cmp	r3, r0
 8005954:	d1f5      	bne.n	8005942 <ull_readdiagnostics+0xda>
 8005956:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800595a:	7163      	strb	r3, [r4, #5]
 800595c:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8005960:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8005964:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005968:	80e3      	strh	r3, [r4, #6]
 800596a:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800596e:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8005972:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005976:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800597a:	f8a4 300d 	strh.w	r3, [r4, #13]
 800597e:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8005982:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8005986:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800598a:	f8a4 300f 	strh.w	r3, [r4, #15]
 800598e:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8005992:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8005996:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800599a:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800599e:	82e3      	strh	r3, [r4, #22]
 80059a0:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 80059a4:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 80059a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80059ac:	8323      	strh	r3, [r4, #24]
 80059ae:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80059b0:	7e1b      	ldrb	r3, [r3, #24]
 80059b2:	f013 0f04 	tst.w	r3, #4
 80059b6:	f040 812b 	bne.w	8005c10 <ull_readdiagnostics+0x3a8>
 80059ba:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 80059be:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 80059c2:	041b      	lsls	r3, r3, #16
 80059c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80059c8:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80059cc:	4313      	orrs	r3, r2
 80059ce:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80059d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80059d6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80059da:	6263      	str	r3, [r4, #36]	; 0x24
 80059dc:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 80059e0:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 80059e4:	041b      	lsls	r3, r3, #16
 80059e6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80059ea:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80059ee:	4313      	orrs	r3, r2
 80059f0:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 80059f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80059f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80059fe:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 8005a02:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8005a06:	041b      	lsls	r3, r3, #16
 8005a08:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005a0c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8005a10:	4313      	orrs	r3, r2
 8005a12:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8005a16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005a1a:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8005a1e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a20:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 8005a24:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 8005a28:	041b      	lsls	r3, r3, #16
 8005a2a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005a2e:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8005a32:	4313      	orrs	r3, r2
 8005a34:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 8005a38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005a3c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005a40:	6323      	str	r3, [r4, #48]	; 0x30
 8005a42:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 8005a46:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 8005a4a:	041b      	lsls	r3, r3, #16
 8005a4c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005a50:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8005a54:	4313      	orrs	r3, r2
 8005a56:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 8005a5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005a5e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005a62:	6363      	str	r3, [r4, #52]	; 0x34
 8005a64:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 8005a68:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 8005a6c:	041b      	lsls	r3, r3, #16
 8005a6e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005a72:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8005a76:	4313      	orrs	r3, r2
 8005a78:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 8005a7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005a80:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005a84:	63a3      	str	r3, [r4, #56]	; 0x38
 8005a86:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 8005a8a:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8005a8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005a92:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8005a94:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 8005a98:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8005a9c:	041b      	lsls	r3, r3, #16
 8005a9e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005aa2:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 8005aac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005ab0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005ab4:	6423      	str	r3, [r4, #64]	; 0x40
 8005ab6:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
 8005aba:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 8005abe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005ac2:	6463      	str	r3, [r4, #68]	; 0x44
 8005ac4:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 8005ac8:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8005acc:	041b      	lsls	r3, r3, #16
 8005ace:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005ad2:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 8005adc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005ae0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005ae4:	64a3      	str	r3, [r4, #72]	; 0x48
 8005ae6:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8005aea:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8005aee:	041b      	lsls	r3, r3, #16
 8005af0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005af4:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 8005af8:	4313      	orrs	r3, r2
 8005afa:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
 8005afe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005b02:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005b06:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005b08:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 8005b0c:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
 8005b10:	041b      	lsls	r3, r3, #16
 8005b12:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005b16:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 8005b20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005b24:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005b28:	6523      	str	r3, [r4, #80]	; 0x50
 8005b2a:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 8005b2e:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8005b32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005b36:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005b3a:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8005b3e:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 8005b42:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8005b46:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b4e:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8005b52:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 8005b56:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 8005b5a:	041b      	lsls	r3, r3, #16
 8005b5c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005b60:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 8005b64:	4313      	orrs	r3, r2
 8005b66:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 8005b6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005b6e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005b72:	65a3      	str	r3, [r4, #88]	; 0x58
 8005b74:	f89d 20c1 	ldrb.w	r2, [sp, #193]	; 0xc1
 8005b78:	f89d 30c0 	ldrb.w	r3, [sp, #192]	; 0xc0
 8005b7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005b80:	65e3      	str	r3, [r4, #92]	; 0x5c
 8005b82:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
 8005b86:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
 8005b8a:	041b      	lsls	r3, r3, #16
 8005b8c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005b90:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 8005b94:	4313      	orrs	r3, r2
 8005b96:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
 8005b9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005b9e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005ba2:	6623      	str	r3, [r4, #96]	; 0x60
 8005ba4:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
 8005ba8:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 8005bac:	041b      	lsls	r3, r3, #16
 8005bae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005bb2:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 8005bbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005bc0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005bc4:	6663      	str	r3, [r4, #100]	; 0x64
 8005bc6:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
 8005bca:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
 8005bce:	041b      	lsls	r3, r3, #16
 8005bd0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005bd4:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 8005bde:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005be2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005be6:	66a3      	str	r3, [r4, #104]	; 0x68
 8005be8:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 8005bec:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8005bf0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005bf4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005bf8:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 8005bfc:	f89d 20ed 	ldrb.w	r2, [sp, #237]	; 0xed
 8005c00:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 8005c04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c0c:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 8005c10:	b03d      	add	sp, #244	; 0xf4
 8005c12:	bd30      	pop	{r4, r5, pc}
 8005c14:	ab02      	add	r3, sp, #8
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	23e8      	movs	r3, #232	; 0xe8
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8005c20:	f7ff fde2 	bl	80057e8 <dwt_readfromdevice>
 8005c24:	e656      	b.n	80058d4 <ull_readdiagnostics+0x6c>
 8005c26:	7e1b      	ldrb	r3, [r3, #24]
 8005c28:	f013 0f01 	tst.w	r3, #1
 8005c2c:	f000 819f 	beq.w	8005f6e <ull_readdiagnostics+0x706>
 8005c30:	ab02      	add	r3, sp, #8
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	236c      	movs	r3, #108	; 0x6c
 8005c36:	2200      	movs	r2, #0
 8005c38:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8005c3c:	f7ff fdd4 	bl	80057e8 <dwt_readfromdevice>
 8005c40:	ab1d      	add	r3, sp, #116	; 0x74
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	236c      	movs	r3, #108	; 0x6c
 8005c46:	2200      	movs	r2, #0
 8005c48:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 8005c4c:	4628      	mov	r0, r5
 8005c4e:	f7ff fdcb 	bl	80057e8 <dwt_readfromdevice>
 8005c52:	aa02      	add	r2, sp, #8
 8005c54:	1e63      	subs	r3, r4, #1
 8005c56:	1d20      	adds	r0, r4, #4
 8005c58:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005c5c:	f803 1f01 	strb.w	r1, [r3, #1]!
 8005c60:	79d1      	ldrb	r1, [r2, #7]
 8005c62:	7219      	strb	r1, [r3, #8]
 8005c64:	7bd1      	ldrb	r1, [r2, #15]
 8005c66:	7459      	strb	r1, [r3, #17]
 8005c68:	7dd1      	ldrb	r1, [r2, #23]
 8005c6a:	7699      	strb	r1, [r3, #26]
 8005c6c:	4283      	cmp	r3, r0
 8005c6e:	d1f3      	bne.n	8005c58 <ull_readdiagnostics+0x3f0>
 8005c70:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8005c74:	77e3      	strb	r3, [r4, #31]
 8005c76:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005c7a:	7163      	strb	r3, [r4, #5]
 8005c7c:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8005c80:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8005c84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005c88:	80e3      	strh	r3, [r4, #6]
 8005c8a:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8005c8e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8005c92:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8005c96:	f3c2 12cf 	ubfx	r2, r2, #7, #16
 8005c9a:	f8a4 200d 	strh.w	r2, [r4, #13]
 8005c9e:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8005ca2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8005ca6:	f8a4 200f 	strh.w	r2, [r4, #15]
 8005caa:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8005cae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005cb2:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8005cb6:	82e3      	strh	r3, [r4, #22]
 8005cb8:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8005cbc:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8005cc0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005cc4:	8323      	strh	r3, [r4, #24]
 8005cc6:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8005cca:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8005cce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005cd2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005cd6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005cda:	bf1c      	itt	ne
 8005cdc:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 8005ce0:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 8005ce4:	8423      	strh	r3, [r4, #32]
 8005ce6:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 8005cea:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8005cee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005cf2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005cf6:	8463      	strh	r3, [r4, #34]	; 0x22
 8005cf8:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8005cfc:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8005d00:	041b      	lsls	r3, r3, #16
 8005d02:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005d06:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 8005d10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005d14:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8005d18:	6263      	str	r3, [r4, #36]	; 0x24
 8005d1a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005d1c:	7e1b      	ldrb	r3, [r3, #24]
 8005d1e:	f013 0f01 	tst.w	r3, #1
 8005d22:	f43f af75 	beq.w	8005c10 <ull_readdiagnostics+0x3a8>
 8005d26:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 8005d2a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8005d2e:	041b      	lsls	r3, r3, #16
 8005d30:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005d34:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8005d3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005d42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d46:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d48:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8005d4c:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8005d50:	041b      	lsls	r3, r3, #16
 8005d52:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005d56:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 8005d60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005d64:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8005d68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d6a:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 8005d6e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8005d72:	041b      	lsls	r3, r3, #16
 8005d74:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005d78:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8005d82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005d86:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005d8a:	6323      	str	r3, [r4, #48]	; 0x30
 8005d8c:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8005d90:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8005d94:	041b      	lsls	r3, r3, #16
 8005d96:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005d9a:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 8005da4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005da8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005dac:	6363      	str	r3, [r4, #52]	; 0x34
 8005dae:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 8005db2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8005db6:	041b      	lsls	r3, r3, #16
 8005db8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005dbc:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8005dc6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005dca:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005dce:	63a3      	str	r3, [r4, #56]	; 0x38
 8005dd0:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 8005dd4:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8005dd8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005ddc:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8005dde:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 8005de2:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8005de6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005dea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dee:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005df0:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 8005df4:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 8005df8:	041b      	lsls	r3, r3, #16
 8005dfa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005dfe:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8005e02:	4313      	orrs	r3, r2
 8005e04:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 8005e08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e0c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005e10:	6423      	str	r3, [r4, #64]	; 0x40
 8005e12:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 8005e16:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 8005e1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e1e:	6463      	str	r3, [r4, #68]	; 0x44
 8005e20:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
 8005e24:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 8005e28:	041b      	lsls	r3, r3, #16
 8005e2a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005e2e:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8005e32:	4313      	orrs	r3, r2
 8005e34:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 8005e38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e3c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005e40:	64a3      	str	r3, [r4, #72]	; 0x48
 8005e42:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 8005e46:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 8005e4a:	041b      	lsls	r3, r3, #16
 8005e4c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005e50:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 8005e54:	4313      	orrs	r3, r2
 8005e56:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
 8005e5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e5e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005e62:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005e64:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 8005e68:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8005e6c:	041b      	lsls	r3, r3, #16
 8005e6e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005e72:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8005e76:	4313      	orrs	r3, r2
 8005e78:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 8005e7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e80:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005e84:	6523      	str	r3, [r4, #80]	; 0x50
 8005e86:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 8005e8a:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8005e8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e92:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005e96:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8005e9a:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 8005e9e:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8005ea2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005ea6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005eaa:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8005eae:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 8005eb2:	f89d 30ae 	ldrb.w	r3, [sp, #174]	; 0xae
 8005eb6:	041b      	lsls	r3, r3, #16
 8005eb8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005ebc:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	f89d 20ad 	ldrb.w	r2, [sp, #173]	; 0xad
 8005ec6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005eca:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005ece:	65a3      	str	r3, [r4, #88]	; 0x58
 8005ed0:	f89d 20b1 	ldrb.w	r2, [sp, #177]	; 0xb1
 8005ed4:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 8005ed8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005edc:	65e3      	str	r3, [r4, #92]	; 0x5c
 8005ede:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 8005ee2:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
 8005ee6:	041b      	lsls	r3, r3, #16
 8005ee8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005eec:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	f89d 20b5 	ldrb.w	r2, [sp, #181]	; 0xb5
 8005ef6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005efa:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005efe:	6623      	str	r3, [r4, #96]	; 0x60
 8005f00:	f89d 20bb 	ldrb.w	r2, [sp, #187]	; 0xbb
 8005f04:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
 8005f08:	041b      	lsls	r3, r3, #16
 8005f0a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005f0e:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8005f12:	4313      	orrs	r3, r2
 8005f14:	f89d 20b9 	ldrb.w	r2, [sp, #185]	; 0xb9
 8005f18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005f1c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005f20:	6663      	str	r3, [r4, #100]	; 0x64
 8005f22:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 8005f26:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 8005f2a:	041b      	lsls	r3, r3, #16
 8005f2c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005f30:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 8005f34:	4313      	orrs	r3, r2
 8005f36:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 8005f3a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005f3e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005f42:	66a3      	str	r3, [r4, #104]	; 0x68
 8005f44:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 8005f48:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8005f4c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005f50:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005f54:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 8005f58:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 8005f5c:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8005f60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f68:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 8005f6c:	e650      	b.n	8005c10 <ull_readdiagnostics+0x3a8>
 8005f6e:	ab02      	add	r3, sp, #8
 8005f70:	9300      	str	r3, [sp, #0]
 8005f72:	2328      	movs	r3, #40	; 0x28
 8005f74:	2200      	movs	r2, #0
 8005f76:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8005f7a:	f7ff fc35 	bl	80057e8 <dwt_readfromdevice>
 8005f7e:	e668      	b.n	8005c52 <ull_readdiagnostics+0x3ea>

08005f80 <ull_readrxtimestamp>:
 8005f80:	b500      	push	{lr}
 8005f82:	b083      	sub	sp, #12
 8005f84:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005f86:	7bdb      	ldrb	r3, [r3, #15]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d00b      	beq.n	8005fa4 <ull_readrxtimestamp+0x24>
 8005f8c:	2b03      	cmp	r3, #3
 8005f8e:	d110      	bne.n	8005fb2 <ull_readrxtimestamp+0x32>
 8005f90:	9100      	str	r1, [sp, #0]
 8005f92:	2305      	movs	r3, #5
 8005f94:	2204      	movs	r2, #4
 8005f96:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8005f9a:	f7ff fc25 	bl	80057e8 <dwt_readfromdevice>
 8005f9e:	b003      	add	sp, #12
 8005fa0:	f85d fb04 	ldr.w	pc, [sp], #4
 8005fa4:	9100      	str	r1, [sp, #0]
 8005fa6:	2305      	movs	r3, #5
 8005fa8:	2200      	movs	r2, #0
 8005faa:	4905      	ldr	r1, [pc, #20]	; (8005fc0 <ull_readrxtimestamp+0x40>)
 8005fac:	f7ff fc1c 	bl	80057e8 <dwt_readfromdevice>
 8005fb0:	e7f5      	b.n	8005f9e <ull_readrxtimestamp+0x1e>
 8005fb2:	9100      	str	r1, [sp, #0]
 8005fb4:	2305      	movs	r3, #5
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	2164      	movs	r1, #100	; 0x64
 8005fba:	f7ff fc15 	bl	80057e8 <dwt_readfromdevice>
 8005fbe:	e7ee      	b.n	8005f9e <ull_readrxtimestamp+0x1e>
 8005fc0:	00180004 	.word	0x00180004

08005fc4 <dwt_writetodevice>:
 8005fc4:	b510      	push	{r4, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 8005fcc:	9401      	str	r4, [sp, #4]
 8005fce:	9c04      	ldr	r4, [sp, #16]
 8005fd0:	9400      	str	r4, [sp, #0]
 8005fd2:	f7ff fb86 	bl	80056e2 <dwt_xfer3xxx>
 8005fd6:	b002      	add	sp, #8
 8005fd8:	bd10      	pop	{r4, pc}

08005fda <dwt_write8bitoffsetreg>:
 8005fda:	b510      	push	{r4, lr}
 8005fdc:	b084      	sub	sp, #16
 8005fde:	ac04      	add	r4, sp, #16
 8005fe0:	f804 3d01 	strb.w	r3, [r4, #-1]!
 8005fe4:	9400      	str	r4, [sp, #0]
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	b292      	uxth	r2, r2
 8005fea:	f7ff ffeb 	bl	8005fc4 <dwt_writetodevice>
 8005fee:	b004      	add	sp, #16
 8005ff0:	bd10      	pop	{r4, pc}
	...

08005ff4 <ull_getframelength>:
 8005ff4:	b510      	push	{r4, lr}
 8005ff6:	4604      	mov	r4, r0
 8005ff8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005ffa:	7bdb      	ldrb	r3, [r3, #15]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d013      	beq.n	8006028 <ull_getframelength+0x34>
 8006000:	2b03      	cmp	r3, #3
 8006002:	d11d      	bne.n	8006040 <ull_getframelength+0x4c>
 8006004:	23f0      	movs	r3, #240	; 0xf0
 8006006:	2200      	movs	r2, #0
 8006008:	4912      	ldr	r1, [pc, #72]	; (8006054 <ull_getframelength+0x60>)
 800600a:	f7ff ffe6 	bl	8005fda <dwt_write8bitoffsetreg>
 800600e:	2200      	movs	r2, #0
 8006010:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8006014:	4620      	mov	r0, r4
 8006016:	f7ff fc07 	bl	8005828 <dwt_read16bitoffsetreg>
 800601a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800601c:	7b1a      	ldrb	r2, [r3, #12]
 800601e:	b1a2      	cbz	r2, 800604a <ull_getframelength+0x56>
 8006020:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8006024:	8458      	strh	r0, [r3, #34]	; 0x22
 8006026:	bd10      	pop	{r4, pc}
 8006028:	230f      	movs	r3, #15
 800602a:	2200      	movs	r2, #0
 800602c:	4909      	ldr	r1, [pc, #36]	; (8006054 <ull_getframelength+0x60>)
 800602e:	f7ff ffd4 	bl	8005fda <dwt_write8bitoffsetreg>
 8006032:	2200      	movs	r2, #0
 8006034:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8006038:	4620      	mov	r0, r4
 800603a:	f7ff fbf5 	bl	8005828 <dwt_read16bitoffsetreg>
 800603e:	e7ec      	b.n	800601a <ull_getframelength+0x26>
 8006040:	2200      	movs	r2, #0
 8006042:	214c      	movs	r1, #76	; 0x4c
 8006044:	f7ff fbf0 	bl	8005828 <dwt_read16bitoffsetreg>
 8006048:	e7e7      	b.n	800601a <ull_getframelength+0x26>
 800604a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800604e:	8458      	strh	r0, [r3, #34]	; 0x22
 8006050:	e7e9      	b.n	8006026 <ull_getframelength+0x32>
 8006052:	bf00      	nop
 8006054:	00010024 	.word	0x00010024

08006058 <ull_configeventcounters>:
 8006058:	b538      	push	{r3, r4, r5, lr}
 800605a:	4605      	mov	r5, r0
 800605c:	460c      	mov	r4, r1
 800605e:	2302      	movs	r3, #2
 8006060:	2200      	movs	r2, #0
 8006062:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8006066:	f7ff ffb8 	bl	8005fda <dwt_write8bitoffsetreg>
 800606a:	b904      	cbnz	r4, 800606e <ull_configeventcounters+0x16>
 800606c:	bd38      	pop	{r3, r4, r5, pc}
 800606e:	2301      	movs	r3, #1
 8006070:	2200      	movs	r2, #0
 8006072:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8006076:	4628      	mov	r0, r5
 8006078:	f7ff ffaf 	bl	8005fda <dwt_write8bitoffsetreg>
 800607c:	e7f6      	b.n	800606c <ull_configeventcounters+0x14>

0800607e <dwt_write16bitoffsetreg>:
 800607e:	b500      	push	{lr}
 8006080:	b085      	sub	sp, #20
 8006082:	f88d 300c 	strb.w	r3, [sp, #12]
 8006086:	0a1b      	lsrs	r3, r3, #8
 8006088:	f88d 300d 	strb.w	r3, [sp, #13]
 800608c:	ab03      	add	r3, sp, #12
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	2302      	movs	r3, #2
 8006092:	b292      	uxth	r2, r2
 8006094:	f7ff ff96 	bl	8005fc4 <dwt_writetodevice>
 8006098:	b005      	add	sp, #20
 800609a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080060a0 <ull_clearaonconfig>:
 80060a0:	b538      	push	{r3, r4, r5, lr}
 80060a2:	4604      	mov	r4, r0
 80060a4:	2300      	movs	r3, #0
 80060a6:	461a      	mov	r2, r3
 80060a8:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 80060ac:	f7ff ffe7 	bl	800607e <dwt_write16bitoffsetreg>
 80060b0:	2300      	movs	r3, #0
 80060b2:	461a      	mov	r2, r3
 80060b4:	4908      	ldr	r1, [pc, #32]	; (80060d8 <ull_clearaonconfig+0x38>)
 80060b6:	4620      	mov	r0, r4
 80060b8:	f7ff ff8f 	bl	8005fda <dwt_write8bitoffsetreg>
 80060bc:	4d07      	ldr	r5, [pc, #28]	; (80060dc <ull_clearaonconfig+0x3c>)
 80060be:	2300      	movs	r3, #0
 80060c0:	461a      	mov	r2, r3
 80060c2:	4629      	mov	r1, r5
 80060c4:	4620      	mov	r0, r4
 80060c6:	f7ff ff88 	bl	8005fda <dwt_write8bitoffsetreg>
 80060ca:	2302      	movs	r3, #2
 80060cc:	2200      	movs	r2, #0
 80060ce:	4629      	mov	r1, r5
 80060d0:	4620      	mov	r0, r4
 80060d2:	f7ff ff82 	bl	8005fda <dwt_write8bitoffsetreg>
 80060d6:	bd38      	pop	{r3, r4, r5, pc}
 80060d8:	000a0014 	.word	0x000a0014
 80060dc:	000a0004 	.word	0x000a0004

080060e0 <ull_force_clocks>:
 80060e0:	b508      	push	{r3, lr}
 80060e2:	2901      	cmp	r1, #1
 80060e4:	d002      	beq.n	80060ec <ull_force_clocks+0xc>
 80060e6:	2905      	cmp	r1, #5
 80060e8:	d007      	beq.n	80060fa <ull_force_clocks+0x1a>
 80060ea:	bd08      	pop	{r3, pc}
 80060ec:	f641 0322 	movw	r3, #6178	; 0x1822
 80060f0:	2200      	movs	r2, #0
 80060f2:	4905      	ldr	r1, [pc, #20]	; (8006108 <ull_force_clocks+0x28>)
 80060f4:	f7ff ffc3 	bl	800607e <dwt_write16bitoffsetreg>
 80060f8:	e7f7      	b.n	80060ea <ull_force_clocks+0xa>
 80060fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060fe:	2200      	movs	r2, #0
 8006100:	4901      	ldr	r1, [pc, #4]	; (8006108 <ull_force_clocks+0x28>)
 8006102:	f7ff ffbc 	bl	800607e <dwt_write16bitoffsetreg>
 8006106:	e7f0      	b.n	80060ea <ull_force_clocks+0xa>
 8006108:	00110004 	.word	0x00110004

0800610c <__dwt_otp_write_wdata_id_reg>:
 800610c:	b538      	push	{r3, r4, r5, lr}
 800610e:	4605      	mov	r5, r0
 8006110:	460c      	mov	r4, r1
 8006112:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 8006116:	b29b      	uxth	r3, r3
 8006118:	2200      	movs	r2, #0
 800611a:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800611e:	f7ff ffae 	bl	800607e <dwt_write16bitoffsetreg>
 8006122:	b2a3      	uxth	r3, r4
 8006124:	2200      	movs	r2, #0
 8006126:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800612a:	4628      	mov	r0, r5
 800612c:	f7ff ffa7 	bl	800607e <dwt_write16bitoffsetreg>
 8006130:	bd38      	pop	{r3, r4, r5, pc}
	...

08006134 <_dwt_otpread>:
 8006134:	b570      	push	{r4, r5, r6, lr}
 8006136:	4604      	mov	r4, r0
 8006138:	460e      	mov	r6, r1
 800613a:	4d0c      	ldr	r5, [pc, #48]	; (800616c <_dwt_otpread+0x38>)
 800613c:	2301      	movs	r3, #1
 800613e:	2200      	movs	r2, #0
 8006140:	4629      	mov	r1, r5
 8006142:	f7ff ff9c 	bl	800607e <dwt_write16bitoffsetreg>
 8006146:	4633      	mov	r3, r6
 8006148:	2200      	movs	r2, #0
 800614a:	4909      	ldr	r1, [pc, #36]	; (8006170 <_dwt_otpread+0x3c>)
 800614c:	4620      	mov	r0, r4
 800614e:	f7ff ff96 	bl	800607e <dwt_write16bitoffsetreg>
 8006152:	2302      	movs	r3, #2
 8006154:	2200      	movs	r2, #0
 8006156:	4629      	mov	r1, r5
 8006158:	4620      	mov	r0, r4
 800615a:	f7ff ff90 	bl	800607e <dwt_write16bitoffsetreg>
 800615e:	2200      	movs	r2, #0
 8006160:	4904      	ldr	r1, [pc, #16]	; (8006174 <_dwt_otpread+0x40>)
 8006162:	4620      	mov	r0, r4
 8006164:	f7ff fb4a 	bl	80057fc <dwt_read32bitoffsetreg>
 8006168:	bd70      	pop	{r4, r5, r6, pc}
 800616a:	bf00      	nop
 800616c:	000b0008 	.word	0x000b0008
 8006170:	000b0004 	.word	0x000b0004
 8006174:	000b0010 	.word	0x000b0010

08006178 <ull_aon_read>:
 8006178:	b538      	push	{r3, r4, r5, lr}
 800617a:	4604      	mov	r4, r0
 800617c:	460b      	mov	r3, r1
 800617e:	2200      	movs	r2, #0
 8006180:	490a      	ldr	r1, [pc, #40]	; (80061ac <ull_aon_read+0x34>)
 8006182:	f7ff ff7c 	bl	800607e <dwt_write16bitoffsetreg>
 8006186:	4d0a      	ldr	r5, [pc, #40]	; (80061b0 <ull_aon_read+0x38>)
 8006188:	2388      	movs	r3, #136	; 0x88
 800618a:	2200      	movs	r2, #0
 800618c:	4629      	mov	r1, r5
 800618e:	4620      	mov	r0, r4
 8006190:	f7ff ff23 	bl	8005fda <dwt_write8bitoffsetreg>
 8006194:	2300      	movs	r3, #0
 8006196:	461a      	mov	r2, r3
 8006198:	4629      	mov	r1, r5
 800619a:	4620      	mov	r0, r4
 800619c:	f7ff ff1d 	bl	8005fda <dwt_write8bitoffsetreg>
 80061a0:	2200      	movs	r2, #0
 80061a2:	4904      	ldr	r1, [pc, #16]	; (80061b4 <ull_aon_read+0x3c>)
 80061a4:	4620      	mov	r0, r4
 80061a6:	f7ff fb51 	bl	800584c <dwt_read8bitoffsetreg>
 80061aa:	bd38      	pop	{r3, r4, r5, pc}
 80061ac:	000a000c 	.word	0x000a000c
 80061b0:	000a0004 	.word	0x000a0004
 80061b4:	000a0008 	.word	0x000a0008

080061b8 <ull_aon_write>:
 80061b8:	b570      	push	{r4, r5, r6, lr}
 80061ba:	4604      	mov	r4, r0
 80061bc:	460b      	mov	r3, r1
 80061be:	4615      	mov	r5, r2
 80061c0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80061c4:	bf34      	ite	cc
 80061c6:	2600      	movcc	r6, #0
 80061c8:	2620      	movcs	r6, #32
 80061ca:	2200      	movs	r2, #0
 80061cc:	490b      	ldr	r1, [pc, #44]	; (80061fc <ull_aon_write+0x44>)
 80061ce:	f7ff ff56 	bl	800607e <dwt_write16bitoffsetreg>
 80061d2:	462b      	mov	r3, r5
 80061d4:	2200      	movs	r2, #0
 80061d6:	490a      	ldr	r1, [pc, #40]	; (8006200 <ull_aon_write+0x48>)
 80061d8:	4620      	mov	r0, r4
 80061da:	f7ff fefe 	bl	8005fda <dwt_write8bitoffsetreg>
 80061de:	4d09      	ldr	r5, [pc, #36]	; (8006204 <ull_aon_write+0x4c>)
 80061e0:	f046 0390 	orr.w	r3, r6, #144	; 0x90
 80061e4:	2200      	movs	r2, #0
 80061e6:	4629      	mov	r1, r5
 80061e8:	4620      	mov	r0, r4
 80061ea:	f7ff fef6 	bl	8005fda <dwt_write8bitoffsetreg>
 80061ee:	2300      	movs	r3, #0
 80061f0:	461a      	mov	r2, r3
 80061f2:	4629      	mov	r1, r5
 80061f4:	4620      	mov	r0, r4
 80061f6:	f7ff fef0 	bl	8005fda <dwt_write8bitoffsetreg>
 80061fa:	bd70      	pop	{r4, r5, r6, pc}
 80061fc:	000a000c 	.word	0x000a000c
 8006200:	000a0010 	.word	0x000a0010
 8006204:	000a0004 	.word	0x000a0004

08006208 <ull_configuresleep>:
 8006208:	b570      	push	{r4, r5, r6, lr}
 800620a:	4604      	mov	r4, r0
 800620c:	460d      	mov	r5, r1
 800620e:	4616      	mov	r6, r2
 8006210:	2200      	movs	r2, #0
 8006212:	f240 110b 	movw	r1, #267	; 0x10b
 8006216:	f7ff ffcf 	bl	80061b8 <ull_aon_write>
 800621a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800621e:	4620      	mov	r0, r4
 8006220:	f7ff ffaa 	bl	8006178 <ull_aon_read>
 8006224:	f000 021f 	and.w	r2, r0, #31
 8006228:	f44f 7182 	mov.w	r1, #260	; 0x104
 800622c:	4620      	mov	r0, r4
 800622e:	f7ff ffc3 	bl	80061b8 <ull_aon_write>
 8006232:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006234:	8a5a      	ldrh	r2, [r3, #18]
 8006236:	4315      	orrs	r5, r2
 8006238:	825d      	strh	r5, [r3, #18]
 800623a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800623c:	8a5b      	ldrh	r3, [r3, #18]
 800623e:	2200      	movs	r2, #0
 8006240:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 8006244:	4620      	mov	r0, r4
 8006246:	f7ff ff1a 	bl	800607e <dwt_write16bitoffsetreg>
 800624a:	4633      	mov	r3, r6
 800624c:	2200      	movs	r2, #0
 800624e:	4902      	ldr	r1, [pc, #8]	; (8006258 <ull_configuresleep+0x50>)
 8006250:	4620      	mov	r0, r4
 8006252:	f7ff fec2 	bl	8005fda <dwt_write8bitoffsetreg>
 8006256:	bd70      	pop	{r4, r5, r6, pc}
 8006258:	000a0014 	.word	0x000a0014

0800625c <ull_signal_rx_buff_free>:
 800625c:	b510      	push	{r4, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	4604      	mov	r4, r0
 8006262:	2200      	movs	r2, #0
 8006264:	9200      	str	r2, [sp, #0]
 8006266:	4613      	mov	r3, r2
 8006268:	2113      	movs	r1, #19
 800626a:	f7ff feab 	bl	8005fc4 <dwt_writetodevice>
 800626e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006270:	7bda      	ldrb	r2, [r3, #15]
 8006272:	2a03      	cmp	r2, #3
 8006274:	bf0c      	ite	eq
 8006276:	2201      	moveq	r2, #1
 8006278:	2203      	movne	r2, #3
 800627a:	73da      	strb	r2, [r3, #15]
 800627c:	b002      	add	sp, #8
 800627e:	bd10      	pop	{r4, pc}

08006280 <dwt_write32bitoffsetreg>:
 8006280:	b510      	push	{r4, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	f88d 300c 	strb.w	r3, [sp, #12]
 8006288:	0a1c      	lsrs	r4, r3, #8
 800628a:	f88d 400d 	strb.w	r4, [sp, #13]
 800628e:	0c1c      	lsrs	r4, r3, #16
 8006290:	f88d 400e 	strb.w	r4, [sp, #14]
 8006294:	0e1b      	lsrs	r3, r3, #24
 8006296:	f88d 300f 	strb.w	r3, [sp, #15]
 800629a:	ab03      	add	r3, sp, #12
 800629c:	9300      	str	r3, [sp, #0]
 800629e:	2304      	movs	r3, #4
 80062a0:	b292      	uxth	r2, r2
 80062a2:	f7ff fe8f 	bl	8005fc4 <dwt_writetodevice>
 80062a6:	b004      	add	sp, #16
 80062a8:	bd10      	pop	{r4, pc}
	...

080062ac <ull_isr>:
 80062ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ae:	4604      	mov	r4, r0
 80062b0:	2200      	movs	r2, #0
 80062b2:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 80062b6:	f7ff fac9 	bl	800584c <dwt_read8bitoffsetreg>
 80062ba:	4605      	mov	r5, r0
 80062bc:	2200      	movs	r2, #0
 80062be:	2144      	movs	r1, #68	; 0x44
 80062c0:	4620      	mov	r0, r4
 80062c2:	f7ff fa9b 	bl	80057fc <dwt_read32bitoffsetreg>
 80062c6:	4606      	mov	r6, r0
 80062c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80062ca:	2200      	movs	r2, #0
 80062cc:	845a      	strh	r2, [r3, #34]	; 0x22
 80062ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80062d2:	61da      	str	r2, [r3, #28]
 80062d4:	841a      	strh	r2, [r3, #32]
 80062d6:	629a      	str	r2, [r3, #40]	; 0x28
 80062d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80062da:	629c      	str	r4, [r3, #40]	; 0x28
 80062dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80062de:	61d8      	str	r0, [r3, #28]
 80062e0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80062e2:	7dd3      	ldrb	r3, [r2, #23]
 80062e4:	f003 0303 	and.w	r3, r3, #3
 80062e8:	2b03      	cmp	r3, #3
 80062ea:	d079      	beq.n	80063e0 <ull_isr+0x134>
 80062ec:	f416 6f80 	tst.w	r6, #1024	; 0x400
 80062f0:	d005      	beq.n	80062fe <ull_isr+0x52>
 80062f2:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80062f6:	f043 0304 	orr.w	r3, r3, #4
 80062fa:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80062fe:	f015 0f80 	tst.w	r5, #128	; 0x80
 8006302:	d174      	bne.n	80063ee <ull_isr+0x142>
 8006304:	f015 0f01 	tst.w	r5, #1
 8006308:	f040 80a3 	bne.w	8006452 <ull_isr+0x1a6>
 800630c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006310:	d00b      	beq.n	800632a <ull_isr+0x7e>
 8006312:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006314:	b113      	cbz	r3, 800631c <ull_isr+0x70>
 8006316:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006318:	301c      	adds	r0, #28
 800631a:	4798      	blx	r3
 800631c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006320:	2202      	movs	r2, #2
 8006322:	2144      	movs	r1, #68	; 0x44
 8006324:	4620      	mov	r0, r4
 8006326:	f7ff feaa 	bl	800607e <dwt_write16bitoffsetreg>
 800632a:	f015 0f08 	tst.w	r5, #8
 800632e:	f000 80ea 	beq.w	8006506 <ull_isr+0x25a>
 8006332:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006334:	2200      	movs	r2, #0
 8006336:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800633a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800633c:	7bdb      	ldrb	r3, [r3, #15]
 800633e:	2b00      	cmp	r3, #0
 8006340:	f040 8095 	bne.w	800646e <ull_isr+0x1c2>
 8006344:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006346:	61de      	str	r6, [r3, #28]
 8006348:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 800634c:	f000 80a9 	beq.w	80064a2 <ull_isr+0x1f6>
 8006350:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006352:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8006356:	f043 0308 	orr.w	r3, r3, #8
 800635a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800635e:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8006362:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 8006366:	d008      	beq.n	800637a <ull_isr+0xce>
 8006368:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800636a:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800636e:	f043 0310 	orr.w	r3, r3, #16
 8006372:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8006376:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 800637a:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800637e:	d006      	beq.n	800638e <ull_isr+0xe2>
 8006380:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006382:	7dd3      	ldrb	r3, [r2, #23]
 8006384:	f003 0303 	and.w	r3, r3, #3
 8006388:	2b03      	cmp	r3, #3
 800638a:	f000 8096 	beq.w	80064ba <ull_isr+0x20e>
 800638e:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8006392:	f040 809e 	bne.w	80064d2 <ull_isr+0x226>
 8006396:	f447 43de 	orr.w	r3, r7, #28416	; 0x6f00
 800639a:	2200      	movs	r2, #0
 800639c:	2144      	movs	r1, #68	; 0x44
 800639e:	4620      	mov	r0, r4
 80063a0:	f7ff ff6e 	bl	8006280 <dwt_write32bitoffsetreg>
 80063a4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80063a6:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f040 80a1 	bne.w	80064f0 <ull_isr+0x244>
 80063ae:	7dc3      	ldrb	r3, [r0, #23]
 80063b0:	f003 0303 	and.w	r3, r3, #3
 80063b4:	2b03      	cmp	r3, #3
 80063b6:	f000 809b 	beq.w	80064f0 <ull_isr+0x244>
 80063ba:	69c3      	ldr	r3, [r0, #28]
 80063bc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80063c0:	61c3      	str	r3, [r0, #28]
 80063c2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80063c4:	69d3      	ldr	r3, [r2, #28]
 80063c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80063ca:	61d3      	str	r3, [r2, #28]
 80063cc:	69e3      	ldr	r3, [r4, #28]
 80063ce:	b113      	cbz	r3, 80063d6 <ull_isr+0x12a>
 80063d0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80063d2:	301c      	adds	r0, #28
 80063d4:	4798      	blx	r3
 80063d6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80063de:	e08b      	b.n	80064f8 <ull_isr+0x24c>
 80063e0:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80063e4:	bf1c      	itt	ne
 80063e6:	f045 0508 	orrne.w	r5, r5, #8
 80063ea:	b2ed      	uxtbne	r5, r5
 80063ec:	e77e      	b.n	80062ec <ull_isr+0x40>
 80063ee:	6d27      	ldr	r7, [r4, #80]	; 0x50
 80063f0:	2200      	movs	r2, #0
 80063f2:	2148      	movs	r1, #72	; 0x48
 80063f4:	4620      	mov	r0, r4
 80063f6:	f7ff fa17 	bl	8005828 <dwt_read16bitoffsetreg>
 80063fa:	8438      	strh	r0, [r7, #32]
 80063fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80063fe:	7d9a      	ldrb	r2, [r3, #22]
 8006400:	b11a      	cbz	r2, 800640a <ull_isr+0x15e>
 8006402:	69da      	ldr	r2, [r3, #28]
 8006404:	f012 0f04 	tst.w	r2, #4
 8006408:	d103      	bne.n	8006412 <ull_isr+0x166>
 800640a:	8c1b      	ldrh	r3, [r3, #32]
 800640c:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8006410:	b18b      	cbz	r3, 8006436 <ull_isr+0x18a>
 8006412:	2304      	movs	r3, #4
 8006414:	2200      	movs	r2, #0
 8006416:	2144      	movs	r1, #68	; 0x44
 8006418:	4620      	mov	r0, r4
 800641a:	f7ff fdde 	bl	8005fda <dwt_write8bitoffsetreg>
 800641e:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8006422:	2200      	movs	r2, #0
 8006424:	2148      	movs	r1, #72	; 0x48
 8006426:	4620      	mov	r0, r4
 8006428:	f7ff fe29 	bl	800607e <dwt_write16bitoffsetreg>
 800642c:	6a23      	ldr	r3, [r4, #32]
 800642e:	b113      	cbz	r3, 8006436 <ull_isr+0x18a>
 8006430:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006432:	301c      	adds	r0, #28
 8006434:	4798      	blx	r3
 8006436:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006438:	8c1b      	ldrh	r3, [r3, #32]
 800643a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800643e:	f43f af61 	beq.w	8006304 <ull_isr+0x58>
 8006442:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006446:	2200      	movs	r2, #0
 8006448:	2148      	movs	r1, #72	; 0x48
 800644a:	4620      	mov	r0, r4
 800644c:	f7ff fe17 	bl	800607e <dwt_write16bitoffsetreg>
 8006450:	e758      	b.n	8006304 <ull_isr+0x58>
 8006452:	23f8      	movs	r3, #248	; 0xf8
 8006454:	2200      	movs	r2, #0
 8006456:	2144      	movs	r1, #68	; 0x44
 8006458:	4620      	mov	r0, r4
 800645a:	f7ff fdbe 	bl	8005fda <dwt_write8bitoffsetreg>
 800645e:	6923      	ldr	r3, [r4, #16]
 8006460:	2b00      	cmp	r3, #0
 8006462:	f43f af53 	beq.w	800630c <ull_isr+0x60>
 8006466:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006468:	301c      	adds	r0, #28
 800646a:	4798      	blx	r3
 800646c:	e74e      	b.n	800630c <ull_isr+0x60>
 800646e:	493b      	ldr	r1, [pc, #236]	; (800655c <ull_isr+0x2b0>)
 8006470:	4620      	mov	r0, r4
 8006472:	f7ff f9eb 	bl	800584c <dwt_read8bitoffsetreg>
 8006476:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006478:	7bdb      	ldrb	r3, [r3, #15]
 800647a:	2b03      	cmp	r3, #3
 800647c:	bf08      	it	eq
 800647e:	f3c0 1007 	ubfxeq	r0, r0, #4, #8
 8006482:	f010 0f01 	tst.w	r0, #1
 8006486:	bf18      	it	ne
 8006488:	f446 4680 	orrne.w	r6, r6, #16384	; 0x4000
 800648c:	f010 0f02 	tst.w	r0, #2
 8006490:	bf18      	it	ne
 8006492:	f446 5600 	orrne.w	r6, r6, #8192	; 0x2000
 8006496:	f010 0f04 	tst.w	r0, #4
 800649a:	bf18      	it	ne
 800649c:	f446 6680 	orrne.w	r6, r6, #1024	; 0x400
 80064a0:	e750      	b.n	8006344 <ull_isr+0x98>
 80064a2:	f416 6f80 	tst.w	r6, #1024	; 0x400
 80064a6:	bf1f      	itttt	ne
 80064a8:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 80064aa:	f892 3024 	ldrbne.w	r3, [r2, #36]	; 0x24
 80064ae:	f043 0304 	orrne.w	r3, r3, #4
 80064b2:	f882 3024 	strbne.w	r3, [r2, #36]	; 0x24
 80064b6:	2700      	movs	r7, #0
 80064b8:	e753      	b.n	8006362 <ull_isr+0xb6>
 80064ba:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80064be:	f043 0302 	orr.w	r3, r3, #2
 80064c2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80064c6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80064c8:	2200      	movs	r2, #0
 80064ca:	845a      	strh	r2, [r3, #34]	; 0x22
 80064cc:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 80064d0:	e761      	b.n	8006396 <ull_isr+0xea>
 80064d2:	4620      	mov	r0, r4
 80064d4:	f7ff fd8e 	bl	8005ff4 <ull_getframelength>
 80064d8:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80064dc:	f43f af5b 	beq.w	8006396 <ull_isr+0xea>
 80064e0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80064e2:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80064e6:	f043 0301 	orr.w	r3, r3, #1
 80064ea:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80064ee:	e752      	b.n	8006396 <ull_isr+0xea>
 80064f0:	6963      	ldr	r3, [r4, #20]
 80064f2:	b10b      	cbz	r3, 80064f8 <ull_isr+0x24c>
 80064f4:	301c      	adds	r0, #28
 80064f6:	4798      	blx	r3
 80064f8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80064fa:	7bdb      	ldrb	r3, [r3, #15]
 80064fc:	b953      	cbnz	r3, 8006514 <ull_isr+0x268>
 80064fe:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006500:	2200      	movs	r2, #0
 8006502:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006506:	f015 0f10 	tst.w	r5, #16
 800650a:	d107      	bne.n	800651c <ull_isr+0x270>
 800650c:	f015 0f20 	tst.w	r5, #32
 8006510:	d114      	bne.n	800653c <ull_isr+0x290>
 8006512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006514:	4620      	mov	r0, r4
 8006516:	f7ff fea1 	bl	800625c <ull_signal_rx_buff_free>
 800651a:	e7f0      	b.n	80064fe <ull_isr+0x252>
 800651c:	4b10      	ldr	r3, [pc, #64]	; (8006560 <ull_isr+0x2b4>)
 800651e:	2200      	movs	r2, #0
 8006520:	2144      	movs	r1, #68	; 0x44
 8006522:	4620      	mov	r0, r4
 8006524:	f7ff feac 	bl	8006280 <dwt_write32bitoffsetreg>
 8006528:	69e3      	ldr	r3, [r4, #28]
 800652a:	b113      	cbz	r3, 8006532 <ull_isr+0x286>
 800652c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800652e:	301c      	adds	r0, #28
 8006530:	4798      	blx	r3
 8006532:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006534:	2200      	movs	r2, #0
 8006536:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800653a:	e7e7      	b.n	800650c <ull_isr+0x260>
 800653c:	4b09      	ldr	r3, [pc, #36]	; (8006564 <ull_isr+0x2b8>)
 800653e:	2200      	movs	r2, #0
 8006540:	2144      	movs	r1, #68	; 0x44
 8006542:	4620      	mov	r0, r4
 8006544:	f7ff fe9c 	bl	8006280 <dwt_write32bitoffsetreg>
 8006548:	69a3      	ldr	r3, [r4, #24]
 800654a:	b113      	cbz	r3, 8006552 <ull_isr+0x2a6>
 800654c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800654e:	301c      	adds	r0, #28
 8006550:	4798      	blx	r3
 8006552:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006554:	2200      	movs	r2, #0
 8006556:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800655a:	e7da      	b.n	8006512 <ull_isr+0x266>
 800655c:	00010024 	.word	0x00010024
 8006560:	34059400 	.word	0x34059400
 8006564:	10220400 	.word	0x10220400

08006568 <_dwt_adjust_delaytime>:
 8006568:	b538      	push	{r3, r4, r5, lr}
 800656a:	4604      	mov	r4, r0
 800656c:	b989      	cbnz	r1, 8006592 <_dwt_adjust_delaytime+0x2a>
 800656e:	2200      	movs	r2, #0
 8006570:	212c      	movs	r1, #44	; 0x2c
 8006572:	f7ff f943 	bl	80057fc <dwt_read32bitoffsetreg>
 8006576:	4605      	mov	r5, r0
 8006578:	2201      	movs	r2, #1
 800657a:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800657e:	4620      	mov	r0, r4
 8006580:	f7ff f964 	bl	800584c <dwt_read8bitoffsetreg>
 8006584:	1a2b      	subs	r3, r5, r0
 8006586:	2200      	movs	r2, #0
 8006588:	212c      	movs	r1, #44	; 0x2c
 800658a:	4620      	mov	r0, r4
 800658c:	f7ff fe78 	bl	8006280 <dwt_write32bitoffsetreg>
 8006590:	bd38      	pop	{r3, r4, r5, pc}
 8006592:	2200      	movs	r2, #0
 8006594:	212c      	movs	r1, #44	; 0x2c
 8006596:	f7ff f931 	bl	80057fc <dwt_read32bitoffsetreg>
 800659a:	4605      	mov	r5, r0
 800659c:	2201      	movs	r2, #1
 800659e:	4905      	ldr	r1, [pc, #20]	; (80065b4 <_dwt_adjust_delaytime+0x4c>)
 80065a0:	4620      	mov	r0, r4
 80065a2:	f7ff f953 	bl	800584c <dwt_read8bitoffsetreg>
 80065a6:	1a2b      	subs	r3, r5, r0
 80065a8:	2200      	movs	r2, #0
 80065aa:	212c      	movs	r1, #44	; 0x2c
 80065ac:	4620      	mov	r0, r4
 80065ae:	f7ff fe67 	bl	8006280 <dwt_write32bitoffsetreg>
 80065b2:	e7ed      	b.n	8006590 <_dwt_adjust_delaytime+0x28>
 80065b4:	00010004 	.word	0x00010004

080065b8 <ull_setrxaftertxdelay>:
 80065b8:	b570      	push	{r4, r5, r6, lr}
 80065ba:	4606      	mov	r6, r0
 80065bc:	460c      	mov	r4, r1
 80065be:	4d08      	ldr	r5, [pc, #32]	; (80065e0 <ull_setrxaftertxdelay+0x28>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	4629      	mov	r1, r5
 80065c4:	f7ff f91a 	bl	80057fc <dwt_read32bitoffsetreg>
 80065c8:	0d00      	lsrs	r0, r0, #20
 80065ca:	0500      	lsls	r0, r0, #20
 80065cc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80065d0:	4303      	orrs	r3, r0
 80065d2:	2200      	movs	r2, #0
 80065d4:	4629      	mov	r1, r5
 80065d6:	4630      	mov	r0, r6
 80065d8:	f7ff fe52 	bl	8006280 <dwt_write32bitoffsetreg>
 80065dc:	bd70      	pop	{r4, r5, r6, pc}
 80065de:	bf00      	nop
 80065e0:	00010008 	.word	0x00010008

080065e4 <ull_setlnapamode>:
 80065e4:	b538      	push	{r3, r4, r5, lr}
 80065e6:	4605      	mov	r5, r0
 80065e8:	460c      	mov	r4, r1
 80065ea:	2200      	movs	r2, #0
 80065ec:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80065f0:	f7ff f904 	bl	80057fc <dwt_read32bitoffsetreg>
 80065f4:	4b0b      	ldr	r3, [pc, #44]	; (8006624 <ull_setlnapamode+0x40>)
 80065f6:	4003      	ands	r3, r0
 80065f8:	f014 0f01 	tst.w	r4, #1
 80065fc:	bf18      	it	ne
 80065fe:	f443 2380 	orrne.w	r3, r3, #262144	; 0x40000
 8006602:	f014 0f02 	tst.w	r4, #2
 8006606:	bf18      	it	ne
 8006608:	f443 4310 	orrne.w	r3, r3, #36864	; 0x9000
 800660c:	f014 0f04 	tst.w	r4, #4
 8006610:	bf18      	it	ne
 8006612:	f043 0312 	orrne.w	r3, r3, #18
 8006616:	2200      	movs	r2, #0
 8006618:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800661c:	4628      	mov	r0, r5
 800661e:	f7ff fe2f 	bl	8006280 <dwt_write32bitoffsetreg>
 8006622:	bd38      	pop	{r3, r4, r5, pc}
 8006624:	ffe00fc0 	.word	0xffe00fc0

08006628 <ull_configurestskey>:
 8006628:	b538      	push	{r3, r4, r5, lr}
 800662a:	4605      	mov	r5, r0
 800662c:	460c      	mov	r4, r1
 800662e:	680b      	ldr	r3, [r1, #0]
 8006630:	2200      	movs	r2, #0
 8006632:	490b      	ldr	r1, [pc, #44]	; (8006660 <ull_configurestskey+0x38>)
 8006634:	f7ff fe24 	bl	8006280 <dwt_write32bitoffsetreg>
 8006638:	6863      	ldr	r3, [r4, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	4909      	ldr	r1, [pc, #36]	; (8006664 <ull_configurestskey+0x3c>)
 800663e:	4628      	mov	r0, r5
 8006640:	f7ff fe1e 	bl	8006280 <dwt_write32bitoffsetreg>
 8006644:	68a3      	ldr	r3, [r4, #8]
 8006646:	2200      	movs	r2, #0
 8006648:	4907      	ldr	r1, [pc, #28]	; (8006668 <ull_configurestskey+0x40>)
 800664a:	4628      	mov	r0, r5
 800664c:	f7ff fe18 	bl	8006280 <dwt_write32bitoffsetreg>
 8006650:	68e3      	ldr	r3, [r4, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	4905      	ldr	r1, [pc, #20]	; (800666c <ull_configurestskey+0x44>)
 8006656:	4628      	mov	r0, r5
 8006658:	f7ff fe12 	bl	8006280 <dwt_write32bitoffsetreg>
 800665c:	bd38      	pop	{r3, r4, r5, pc}
 800665e:	bf00      	nop
 8006660:	0002000c 	.word	0x0002000c
 8006664:	00020010 	.word	0x00020010
 8006668:	00020014 	.word	0x00020014
 800666c:	00020018 	.word	0x00020018

08006670 <ull_configurestsiv>:
 8006670:	b538      	push	{r3, r4, r5, lr}
 8006672:	4605      	mov	r5, r0
 8006674:	460c      	mov	r4, r1
 8006676:	680b      	ldr	r3, [r1, #0]
 8006678:	2200      	movs	r2, #0
 800667a:	490b      	ldr	r1, [pc, #44]	; (80066a8 <ull_configurestsiv+0x38>)
 800667c:	f7ff fe00 	bl	8006280 <dwt_write32bitoffsetreg>
 8006680:	6863      	ldr	r3, [r4, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	4909      	ldr	r1, [pc, #36]	; (80066ac <ull_configurestsiv+0x3c>)
 8006686:	4628      	mov	r0, r5
 8006688:	f7ff fdfa 	bl	8006280 <dwt_write32bitoffsetreg>
 800668c:	68a3      	ldr	r3, [r4, #8]
 800668e:	2200      	movs	r2, #0
 8006690:	4907      	ldr	r1, [pc, #28]	; (80066b0 <ull_configurestsiv+0x40>)
 8006692:	4628      	mov	r0, r5
 8006694:	f7ff fdf4 	bl	8006280 <dwt_write32bitoffsetreg>
 8006698:	68e3      	ldr	r3, [r4, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	4905      	ldr	r1, [pc, #20]	; (80066b4 <ull_configurestsiv+0x44>)
 800669e:	4628      	mov	r0, r5
 80066a0:	f7ff fdee 	bl	8006280 <dwt_write32bitoffsetreg>
 80066a4:	bd38      	pop	{r3, r4, r5, pc}
 80066a6:	bf00      	nop
 80066a8:	0002001c 	.word	0x0002001c
 80066ac:	00020020 	.word	0x00020020
 80066b0:	00020024 	.word	0x00020024
 80066b4:	00020028 	.word	0x00020028

080066b8 <ull_configmrxlut>:
 80066b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066bc:	4604      	mov	r4, r0
 80066be:	2905      	cmp	r1, #5
 80066c0:	d040      	beq.n	8006744 <ull_configmrxlut+0x8c>
 80066c2:	4d26      	ldr	r5, [pc, #152]	; (800675c <ull_configmrxlut+0xa4>)
 80066c4:	462e      	mov	r6, r5
 80066c6:	4f26      	ldr	r7, [pc, #152]	; (8006760 <ull_configmrxlut+0xa8>)
 80066c8:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 80067a4 <ull_configmrxlut+0xec>
 80066cc:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80067a8 <ull_configmrxlut+0xf0>
 80066d0:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80067ac <ull_configmrxlut+0xf4>
 80066d4:	4b23      	ldr	r3, [pc, #140]	; (8006764 <ull_configmrxlut+0xac>)
 80066d6:	2200      	movs	r2, #0
 80066d8:	4923      	ldr	r1, [pc, #140]	; (8006768 <ull_configmrxlut+0xb0>)
 80066da:	4620      	mov	r0, r4
 80066dc:	f7ff fdd0 	bl	8006280 <dwt_write32bitoffsetreg>
 80066e0:	4653      	mov	r3, sl
 80066e2:	2200      	movs	r2, #0
 80066e4:	4921      	ldr	r1, [pc, #132]	; (800676c <ull_configmrxlut+0xb4>)
 80066e6:	4620      	mov	r0, r4
 80066e8:	f7ff fdca 	bl	8006280 <dwt_write32bitoffsetreg>
 80066ec:	464b      	mov	r3, r9
 80066ee:	2200      	movs	r2, #0
 80066f0:	491f      	ldr	r1, [pc, #124]	; (8006770 <ull_configmrxlut+0xb8>)
 80066f2:	4620      	mov	r0, r4
 80066f4:	f7ff fdc4 	bl	8006280 <dwt_write32bitoffsetreg>
 80066f8:	4643      	mov	r3, r8
 80066fa:	2200      	movs	r2, #0
 80066fc:	491d      	ldr	r1, [pc, #116]	; (8006774 <ull_configmrxlut+0xbc>)
 80066fe:	4620      	mov	r0, r4
 8006700:	f7ff fdbe 	bl	8006280 <dwt_write32bitoffsetreg>
 8006704:	463b      	mov	r3, r7
 8006706:	2200      	movs	r2, #0
 8006708:	491b      	ldr	r1, [pc, #108]	; (8006778 <ull_configmrxlut+0xc0>)
 800670a:	4620      	mov	r0, r4
 800670c:	f7ff fdb8 	bl	8006280 <dwt_write32bitoffsetreg>
 8006710:	4633      	mov	r3, r6
 8006712:	2200      	movs	r2, #0
 8006714:	4919      	ldr	r1, [pc, #100]	; (800677c <ull_configmrxlut+0xc4>)
 8006716:	4620      	mov	r0, r4
 8006718:	f7ff fdb2 	bl	8006280 <dwt_write32bitoffsetreg>
 800671c:	462b      	mov	r3, r5
 800671e:	2200      	movs	r2, #0
 8006720:	4917      	ldr	r1, [pc, #92]	; (8006780 <ull_configmrxlut+0xc8>)
 8006722:	4620      	mov	r0, r4
 8006724:	f7ff fdac 	bl	8006280 <dwt_write32bitoffsetreg>
 8006728:	4b16      	ldr	r3, [pc, #88]	; (8006784 <ull_configmrxlut+0xcc>)
 800672a:	2200      	movs	r2, #0
 800672c:	4916      	ldr	r1, [pc, #88]	; (8006788 <ull_configmrxlut+0xd0>)
 800672e:	4620      	mov	r0, r4
 8006730:	f7ff fda6 	bl	8006280 <dwt_write32bitoffsetreg>
 8006734:	4b15      	ldr	r3, [pc, #84]	; (800678c <ull_configmrxlut+0xd4>)
 8006736:	2200      	movs	r2, #0
 8006738:	4915      	ldr	r1, [pc, #84]	; (8006790 <ull_configmrxlut+0xd8>)
 800673a:	4620      	mov	r0, r4
 800673c:	f7ff fda0 	bl	8006280 <dwt_write32bitoffsetreg>
 8006740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006744:	4d13      	ldr	r5, [pc, #76]	; (8006794 <ull_configmrxlut+0xdc>)
 8006746:	4e14      	ldr	r6, [pc, #80]	; (8006798 <ull_configmrxlut+0xe0>)
 8006748:	4f14      	ldr	r7, [pc, #80]	; (800679c <ull_configmrxlut+0xe4>)
 800674a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80067b0 <ull_configmrxlut+0xf8>
 800674e:	f8df 9064 	ldr.w	r9, [pc, #100]	; 80067b4 <ull_configmrxlut+0xfc>
 8006752:	f8df a064 	ldr.w	sl, [pc, #100]	; 80067b8 <ull_configmrxlut+0x100>
 8006756:	4b12      	ldr	r3, [pc, #72]	; (80067a0 <ull_configmrxlut+0xe8>)
 8006758:	e7bd      	b.n	80066d6 <ull_configmrxlut+0x1e>
 800675a:	bf00      	nop
 800675c:	0002afb5 	.word	0x0002afb5
 8006760:	0002af7d 	.word	0x0002af7d
 8006764:	0002a8fe 	.word	0x0002a8fe
 8006768:	00030038 	.word	0x00030038
 800676c:	0003003c 	.word	0x0003003c
 8006770:	00030040 	.word	0x00030040
 8006774:	00030044 	.word	0x00030044
 8006778:	00030048 	.word	0x00030048
 800677c:	0003004c 	.word	0x0003004c
 8006780:	00030050 	.word	0x00030050
 8006784:	10000240 	.word	0x10000240
 8006788:	0003001c 	.word	0x0003001c
 800678c:	1b6da489 	.word	0x1b6da489
 8006790:	00030020 	.word	0x00030020
 8006794:	0001cff5 	.word	0x0001cff5
 8006798:	0001cfb5 	.word	0x0001cfb5
 800679c:	0001cf36 	.word	0x0001cf36
 80067a0:	0001c0fd 	.word	0x0001c0fd
 80067a4:	0002af3e 	.word	0x0002af3e
 80067a8:	0002a5fe 	.word	0x0002a5fe
 80067ac:	0002ac36 	.word	0x0002ac36
 80067b0:	0001c77e 	.word	0x0001c77e
 80067b4:	0001c6be 	.word	0x0001c6be
 80067b8:	0001c43e 	.word	0x0001c43e

080067bc <ull_disable_rftx_blocks>:
 80067bc:	b508      	push	{r3, lr}
 80067be:	2300      	movs	r3, #0
 80067c0:	461a      	mov	r2, r3
 80067c2:	4902      	ldr	r1, [pc, #8]	; (80067cc <ull_disable_rftx_blocks+0x10>)
 80067c4:	f7ff fd5c 	bl	8006280 <dwt_write32bitoffsetreg>
 80067c8:	bd08      	pop	{r3, pc}
 80067ca:	bf00      	nop
 80067cc:	00070004 	.word	0x00070004

080067d0 <ull_disable_rf_tx>:
 80067d0:	b538      	push	{r3, r4, r5, lr}
 80067d2:	4604      	mov	r4, r0
 80067d4:	460d      	mov	r5, r1
 80067d6:	2300      	movs	r3, #0
 80067d8:	461a      	mov	r2, r3
 80067da:	490a      	ldr	r1, [pc, #40]	; (8006804 <ull_disable_rf_tx+0x34>)
 80067dc:	f7ff fd50 	bl	8006280 <dwt_write32bitoffsetreg>
 80067e0:	2300      	movs	r3, #0
 80067e2:	461a      	mov	r2, r3
 80067e4:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 80067e8:	4620      	mov	r0, r4
 80067ea:	f7ff fd49 	bl	8006280 <dwt_write32bitoffsetreg>
 80067ee:	b905      	cbnz	r5, 80067f2 <ull_disable_rf_tx+0x22>
 80067f0:	bd38      	pop	{r3, r4, r5, pc}
 80067f2:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 80067f6:	2200      	movs	r2, #0
 80067f8:	4903      	ldr	r1, [pc, #12]	; (8006808 <ull_disable_rf_tx+0x38>)
 80067fa:	4620      	mov	r0, r4
 80067fc:	f7ff fd40 	bl	8006280 <dwt_write32bitoffsetreg>
 8006800:	e7f6      	b.n	80067f0 <ull_disable_rf_tx+0x20>
 8006802:	bf00      	nop
 8006804:	00070048 	.word	0x00070048
 8006808:	00070014 	.word	0x00070014

0800680c <ull_readrxdata>:
 800680c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800680e:	b083      	sub	sp, #12
 8006810:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8006812:	7be4      	ldrb	r4, [r4, #15]
 8006814:	2c03      	cmp	r4, #3
 8006816:	bf0c      	ite	eq
 8006818:	f44f 1c98 	moveq.w	ip, #1245184	; 0x130000
 800681c:	f44f 1c90 	movne.w	ip, #1179648	; 0x120000
 8006820:	189c      	adds	r4, r3, r2
 8006822:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8006826:	da19      	bge.n	800685c <ull_readrxdata+0x50>
 8006828:	461d      	mov	r5, r3
 800682a:	4616      	mov	r6, r2
 800682c:	460f      	mov	r7, r1
 800682e:	4604      	mov	r4, r0
 8006830:	2b7f      	cmp	r3, #127	; 0x7f
 8006832:	d915      	bls.n	8006860 <ull_readrxdata+0x54>
 8006834:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8006838:	2200      	movs	r2, #0
 800683a:	490d      	ldr	r1, [pc, #52]	; (8006870 <ull_readrxdata+0x64>)
 800683c:	f7ff fd20 	bl	8006280 <dwt_write32bitoffsetreg>
 8006840:	462b      	mov	r3, r5
 8006842:	2200      	movs	r2, #0
 8006844:	490b      	ldr	r1, [pc, #44]	; (8006874 <ull_readrxdata+0x68>)
 8006846:	4620      	mov	r0, r4
 8006848:	f7ff fd1a 	bl	8006280 <dwt_write32bitoffsetreg>
 800684c:	9700      	str	r7, [sp, #0]
 800684e:	4633      	mov	r3, r6
 8006850:	2200      	movs	r2, #0
 8006852:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8006856:	4620      	mov	r0, r4
 8006858:	f7fe ffc6 	bl	80057e8 <dwt_readfromdevice>
 800685c:	b003      	add	sp, #12
 800685e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006860:	9100      	str	r1, [sp, #0]
 8006862:	4613      	mov	r3, r2
 8006864:	462a      	mov	r2, r5
 8006866:	4661      	mov	r1, ip
 8006868:	f7fe ffbe 	bl	80057e8 <dwt_readfromdevice>
 800686c:	e7f6      	b.n	800685c <ull_readrxdata+0x50>
 800686e:	bf00      	nop
 8006870:	001f0004 	.word	0x001f0004
 8006874:	001f0008 	.word	0x001f0008

08006878 <ull_rxenable>:
 8006878:	b530      	push	{r4, r5, lr}
 800687a:	b083      	sub	sp, #12
 800687c:	4605      	mov	r5, r0
 800687e:	460c      	mov	r4, r1
 8006880:	b171      	cbz	r1, 80068a0 <ull_rxenable+0x28>
 8006882:	f021 0302 	bic.w	r3, r1, #2
 8006886:	3b01      	subs	r3, #1
 8006888:	2b0f      	cmp	r3, #15
 800688a:	d856      	bhi.n	800693a <ull_rxenable+0xc2>
 800688c:	e8df f003 	tbb	[pc, r3]
 8006890:	21555510 	.word	0x21555510
 8006894:	28555555 	.word	0x28555555
 8006898:	55555555 	.word	0x55555555
 800689c:	33555555 	.word	0x33555555
 80068a0:	2200      	movs	r2, #0
 80068a2:	9200      	str	r2, [sp, #0]
 80068a4:	4613      	mov	r3, r2
 80068a6:	2102      	movs	r1, #2
 80068a8:	f7ff fb8c 	bl	8005fc4 <dwt_writetodevice>
 80068ac:	4620      	mov	r0, r4
 80068ae:	e00e      	b.n	80068ce <ull_rxenable+0x56>
 80068b0:	2200      	movs	r2, #0
 80068b2:	9200      	str	r2, [sp, #0]
 80068b4:	4613      	mov	r3, r2
 80068b6:	2104      	movs	r1, #4
 80068b8:	f7ff fb84 	bl	8005fc4 <dwt_writetodevice>
 80068bc:	2203      	movs	r2, #3
 80068be:	2144      	movs	r1, #68	; 0x44
 80068c0:	4628      	mov	r0, r5
 80068c2:	f7fe ffc3 	bl	800584c <dwt_read8bitoffsetreg>
 80068c6:	f010 0f08 	tst.w	r0, #8
 80068ca:	d11f      	bne.n	800690c <ull_rxenable+0x94>
 80068cc:	2000      	movs	r0, #0
 80068ce:	b003      	add	sp, #12
 80068d0:	bd30      	pop	{r4, r5, pc}
 80068d2:	2200      	movs	r2, #0
 80068d4:	9200      	str	r2, [sp, #0]
 80068d6:	4613      	mov	r3, r2
 80068d8:	210a      	movs	r1, #10
 80068da:	f7ff fb73 	bl	8005fc4 <dwt_writetodevice>
 80068de:	e7ed      	b.n	80068bc <ull_rxenable+0x44>
 80068e0:	2100      	movs	r1, #0
 80068e2:	f7ff fe41 	bl	8006568 <_dwt_adjust_delaytime>
 80068e6:	2200      	movs	r2, #0
 80068e8:	9200      	str	r2, [sp, #0]
 80068ea:	4613      	mov	r3, r2
 80068ec:	2108      	movs	r1, #8
 80068ee:	4628      	mov	r0, r5
 80068f0:	f7ff fb68 	bl	8005fc4 <dwt_writetodevice>
 80068f4:	e7e2      	b.n	80068bc <ull_rxenable+0x44>
 80068f6:	2101      	movs	r1, #1
 80068f8:	f7ff fe36 	bl	8006568 <_dwt_adjust_delaytime>
 80068fc:	2200      	movs	r2, #0
 80068fe:	9200      	str	r2, [sp, #0]
 8006900:	4613      	mov	r3, r2
 8006902:	2106      	movs	r1, #6
 8006904:	4628      	mov	r0, r5
 8006906:	f7ff fb5d 	bl	8005fc4 <dwt_writetodevice>
 800690a:	e7d7      	b.n	80068bc <ull_rxenable+0x44>
 800690c:	2100      	movs	r1, #0
 800690e:	9100      	str	r1, [sp, #0]
 8006910:	460b      	mov	r3, r1
 8006912:	460a      	mov	r2, r1
 8006914:	4628      	mov	r0, r5
 8006916:	f7ff fb55 	bl	8005fc4 <dwt_writetodevice>
 800691a:	f014 0f02 	tst.w	r4, #2
 800691e:	d002      	beq.n	8006926 <ull_rxenable+0xae>
 8006920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006924:	e7d3      	b.n	80068ce <ull_rxenable+0x56>
 8006926:	2200      	movs	r2, #0
 8006928:	9200      	str	r2, [sp, #0]
 800692a:	4613      	mov	r3, r2
 800692c:	2102      	movs	r1, #2
 800692e:	4628      	mov	r0, r5
 8006930:	f7ff fb48 	bl	8005fc4 <dwt_writetodevice>
 8006934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006938:	e7c9      	b.n	80068ce <ull_rxenable+0x56>
 800693a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800693e:	e7c6      	b.n	80068ce <ull_rxenable+0x56>

08006940 <ull_writetxdata>:
 8006940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006942:	b083      	sub	sp, #12
 8006944:	185c      	adds	r4, r3, r1
 8006946:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800694a:	da24      	bge.n	8006996 <ull_writetxdata+0x56>
 800694c:	461c      	mov	r4, r3
 800694e:	4617      	mov	r7, r2
 8006950:	460e      	mov	r6, r1
 8006952:	4605      	mov	r5, r0
 8006954:	2b7f      	cmp	r3, #127	; 0x7f
 8006956:	d915      	bls.n	8006984 <ull_writetxdata+0x44>
 8006958:	2314      	movs	r3, #20
 800695a:	2200      	movs	r2, #0
 800695c:	490f      	ldr	r1, [pc, #60]	; (800699c <ull_writetxdata+0x5c>)
 800695e:	f7ff fc8f 	bl	8006280 <dwt_write32bitoffsetreg>
 8006962:	4623      	mov	r3, r4
 8006964:	2200      	movs	r2, #0
 8006966:	490e      	ldr	r1, [pc, #56]	; (80069a0 <ull_writetxdata+0x60>)
 8006968:	4628      	mov	r0, r5
 800696a:	f7ff fc89 	bl	8006280 <dwt_write32bitoffsetreg>
 800696e:	9700      	str	r7, [sp, #0]
 8006970:	4633      	mov	r3, r6
 8006972:	2200      	movs	r2, #0
 8006974:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8006978:	4628      	mov	r0, r5
 800697a:	f7ff fb23 	bl	8005fc4 <dwt_writetodevice>
 800697e:	2000      	movs	r0, #0
 8006980:	b003      	add	sp, #12
 8006982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006984:	9200      	str	r2, [sp, #0]
 8006986:	460b      	mov	r3, r1
 8006988:	4622      	mov	r2, r4
 800698a:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 800698e:	f7ff fb19 	bl	8005fc4 <dwt_writetodevice>
 8006992:	2000      	movs	r0, #0
 8006994:	e7f4      	b.n	8006980 <ull_writetxdata+0x40>
 8006996:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800699a:	e7f1      	b.n	8006980 <ull_writetxdata+0x40>
 800699c:	001f0004 	.word	0x001f0004
 80069a0:	001f0008 	.word	0x001f0008

080069a4 <dwt_modify32bitoffsetreg>:
 80069a4:	b530      	push	{r4, r5, lr}
 80069a6:	b085      	sub	sp, #20
 80069a8:	9c08      	ldr	r4, [sp, #32]
 80069aa:	f88d 3008 	strb.w	r3, [sp, #8]
 80069ae:	0a1d      	lsrs	r5, r3, #8
 80069b0:	f88d 5009 	strb.w	r5, [sp, #9]
 80069b4:	0c1d      	lsrs	r5, r3, #16
 80069b6:	f88d 500a 	strb.w	r5, [sp, #10]
 80069ba:	0e1b      	lsrs	r3, r3, #24
 80069bc:	f88d 300b 	strb.w	r3, [sp, #11]
 80069c0:	f88d 400c 	strb.w	r4, [sp, #12]
 80069c4:	0a23      	lsrs	r3, r4, #8
 80069c6:	f88d 300d 	strb.w	r3, [sp, #13]
 80069ca:	0c23      	lsrs	r3, r4, #16
 80069cc:	f88d 300e 	strb.w	r3, [sp, #14]
 80069d0:	0e24      	lsrs	r4, r4, #24
 80069d2:	f88d 400f 	strb.w	r4, [sp, #15]
 80069d6:	f248 0303 	movw	r3, #32771	; 0x8003
 80069da:	9301      	str	r3, [sp, #4]
 80069dc:	ab02      	add	r3, sp, #8
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	2308      	movs	r3, #8
 80069e2:	b292      	uxth	r2, r2
 80069e4:	f7fe fe7d 	bl	80056e2 <dwt_xfer3xxx>
 80069e8:	b005      	add	sp, #20
 80069ea:	bd30      	pop	{r4, r5, pc}

080069ec <_dwt_kick_dgc_on_wakeup>:
 80069ec:	b500      	push	{lr}
 80069ee:	b083      	sub	sp, #12
 80069f0:	2905      	cmp	r1, #5
 80069f2:	d004      	beq.n	80069fe <_dwt_kick_dgc_on_wakeup+0x12>
 80069f4:	2909      	cmp	r1, #9
 80069f6:	d00b      	beq.n	8006a10 <_dwt_kick_dgc_on_wakeup+0x24>
 80069f8:	b003      	add	sp, #12
 80069fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80069fe:	2340      	movs	r3, #64	; 0x40
 8006a00:	9300      	str	r3, [sp, #0]
 8006a02:	f46f 5300 	mvn.w	r3, #8192	; 0x2000
 8006a06:	2200      	movs	r2, #0
 8006a08:	4906      	ldr	r1, [pc, #24]	; (8006a24 <_dwt_kick_dgc_on_wakeup+0x38>)
 8006a0a:	f7ff ffcb 	bl	80069a4 <dwt_modify32bitoffsetreg>
 8006a0e:	e7f3      	b.n	80069f8 <_dwt_kick_dgc_on_wakeup+0xc>
 8006a10:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	f46f 5300 	mvn.w	r3, #8192	; 0x2000
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	4901      	ldr	r1, [pc, #4]	; (8006a24 <_dwt_kick_dgc_on_wakeup+0x38>)
 8006a1e:	f7ff ffc1 	bl	80069a4 <dwt_modify32bitoffsetreg>
 8006a22:	e7e9      	b.n	80069f8 <_dwt_kick_dgc_on_wakeup+0xc>
 8006a24:	000b0008 	.word	0x000b0008

08006a28 <ull_enable_rf_tx>:
 8006a28:	b570      	push	{r4, r5, r6, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	4604      	mov	r4, r0
 8006a2e:	460e      	mov	r6, r1
 8006a30:	4d13      	ldr	r5, [pc, #76]	; (8006a80 <ull_enable_rf_tx+0x58>)
 8006a32:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	4629      	mov	r1, r5
 8006a40:	f7ff ffb0 	bl	80069a4 <dwt_modify32bitoffsetreg>
 8006a44:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 8006a48:	9300      	str	r3, [sp, #0]
 8006a4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a4e:	2200      	movs	r2, #0
 8006a50:	4629      	mov	r1, r5
 8006a52:	4620      	mov	r0, r4
 8006a54:	f7ff ffa6 	bl	80069a4 <dwt_modify32bitoffsetreg>
 8006a58:	4b0a      	ldr	r3, [pc, #40]	; (8006a84 <ull_enable_rf_tx+0x5c>)
 8006a5a:	9300      	str	r3, [sp, #0]
 8006a5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a60:	2200      	movs	r2, #0
 8006a62:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8006a66:	4620      	mov	r0, r4
 8006a68:	f7ff ff9c 	bl	80069a4 <dwt_modify32bitoffsetreg>
 8006a6c:	b90e      	cbnz	r6, 8006a72 <ull_enable_rf_tx+0x4a>
 8006a6e:	b002      	add	sp, #8
 8006a70:	bd70      	pop	{r4, r5, r6, pc}
 8006a72:	4b05      	ldr	r3, [pc, #20]	; (8006a88 <ull_enable_rf_tx+0x60>)
 8006a74:	2200      	movs	r2, #0
 8006a76:	4905      	ldr	r1, [pc, #20]	; (8006a8c <ull_enable_rf_tx+0x64>)
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f7ff fc01 	bl	8006280 <dwt_write32bitoffsetreg>
 8006a7e:	e7f6      	b.n	8006a6e <ull_enable_rf_tx+0x46>
 8006a80:	00070048 	.word	0x00070048
 8006a84:	02003c00 	.word	0x02003c00
 8006a88:	01011100 	.word	0x01011100
 8006a8c:	00070014 	.word	0x00070014

08006a90 <ull_enable_rftx_blocks>:
 8006a90:	b500      	push	{lr}
 8006a92:	b083      	sub	sp, #12
 8006a94:	4b05      	ldr	r3, [pc, #20]	; (8006aac <ull_enable_rftx_blocks+0x1c>)
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	4904      	ldr	r1, [pc, #16]	; (8006ab0 <ull_enable_rftx_blocks+0x20>)
 8006aa0:	f7ff ff80 	bl	80069a4 <dwt_modify32bitoffsetreg>
 8006aa4:	b003      	add	sp, #12
 8006aa6:	f85d fb04 	ldr.w	pc, [sp], #4
 8006aaa:	bf00      	nop
 8006aac:	02003c00 	.word	0x02003c00
 8006ab0:	00070004 	.word	0x00070004

08006ab4 <_dwt_otpprogword32>:
 8006ab4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ab8:	b083      	sub	sp, #12
 8006aba:	4604      	mov	r4, r0
 8006abc:	460d      	mov	r5, r1
 8006abe:	4617      	mov	r7, r2
 8006ac0:	4e56      	ldr	r6, [pc, #344]	; (8006c1c <_dwt_otpprogword32+0x168>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	4631      	mov	r1, r6
 8006ac6:	f7fe fe99 	bl	80057fc <dwt_read32bitoffsetreg>
 8006aca:	4681      	mov	r9, r0
 8006acc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8006ad0:	9300      	str	r3, [sp, #0]
 8006ad2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	4631      	mov	r1, r6
 8006ada:	4620      	mov	r0, r4
 8006adc:	f7ff ff62 	bl	80069a4 <dwt_modify32bitoffsetreg>
 8006ae0:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8006c20 <_dwt_otpprogword32+0x16c>
 8006ae4:	2318      	movs	r3, #24
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	4641      	mov	r1, r8
 8006aea:	4620      	mov	r0, r4
 8006aec:	f7ff fac7 	bl	800607e <dwt_write16bitoffsetreg>
 8006af0:	2125      	movs	r1, #37	; 0x25
 8006af2:	4620      	mov	r0, r4
 8006af4:	f7ff fb0a 	bl	800610c <__dwt_otp_write_wdata_id_reg>
 8006af8:	2102      	movs	r1, #2
 8006afa:	4620      	mov	r0, r4
 8006afc:	f7ff fb06 	bl	800610c <__dwt_otp_write_wdata_id_reg>
 8006b00:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 8006b04:	4620      	mov	r0, r4
 8006b06:	f7ff fb01 	bl	800610c <__dwt_otp_write_wdata_id_reg>
 8006b0a:	b2f9      	uxtb	r1, r7
 8006b0c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006b10:	4620      	mov	r0, r4
 8006b12:	f7ff fafb 	bl	800610c <__dwt_otp_write_wdata_id_reg>
 8006b16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	f7ff faf6 	bl	800610c <__dwt_otp_write_wdata_id_reg>
 8006b20:	2100      	movs	r1, #0
 8006b22:	4620      	mov	r0, r4
 8006b24:	f7ff faf2 	bl	800610c <__dwt_otp_write_wdata_id_reg>
 8006b28:	2102      	movs	r1, #2
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	f7ff faee 	bl	800610c <__dwt_otp_write_wdata_id_reg>
 8006b30:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8006b34:	4620      	mov	r0, r4
 8006b36:	f7ff fae9 	bl	800610c <__dwt_otp_write_wdata_id_reg>
 8006b3a:	b2e9      	uxtb	r1, r5
 8006b3c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006b40:	4620      	mov	r0, r4
 8006b42:	f7ff fae3 	bl	800610c <__dwt_otp_write_wdata_id_reg>
 8006b46:	f3c5 2107 	ubfx	r1, r5, #8, #8
 8006b4a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006b4e:	4620      	mov	r0, r4
 8006b50:	f7ff fadc 	bl	800610c <__dwt_otp_write_wdata_id_reg>
 8006b54:	f3c5 4107 	ubfx	r1, r5, #16, #8
 8006b58:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	f7ff fad5 	bl	800610c <__dwt_otp_write_wdata_id_reg>
 8006b62:	0e29      	lsrs	r1, r5, #24
 8006b64:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006b68:	4620      	mov	r0, r4
 8006b6a:	f7ff facf 	bl	800610c <__dwt_otp_write_wdata_id_reg>
 8006b6e:	2100      	movs	r1, #0
 8006b70:	4620      	mov	r0, r4
 8006b72:	f7ff facb 	bl	800610c <__dwt_otp_write_wdata_id_reg>
 8006b76:	213a      	movs	r1, #58	; 0x3a
 8006b78:	4620      	mov	r0, r4
 8006b7a:	f7ff fac7 	bl	800610c <__dwt_otp_write_wdata_id_reg>
 8006b7e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006b82:	4620      	mov	r0, r4
 8006b84:	f7ff fac2 	bl	800610c <__dwt_otp_write_wdata_id_reg>
 8006b88:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	f7ff fabd 	bl	800610c <__dwt_otp_write_wdata_id_reg>
 8006b92:	2100      	movs	r1, #0
 8006b94:	4620      	mov	r0, r4
 8006b96:	f7ff fab9 	bl	800610c <__dwt_otp_write_wdata_id_reg>
 8006b9a:	213a      	movs	r1, #58	; 0x3a
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	f7ff fab5 	bl	800610c <__dwt_otp_write_wdata_id_reg>
 8006ba2:	f240 1101 	movw	r1, #257	; 0x101
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	f7ff fab0 	bl	800610c <__dwt_otp_write_wdata_id_reg>
 8006bac:	2302      	movs	r3, #2
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	f7ff fa62 	bl	800607e <dwt_write16bitoffsetreg>
 8006bba:	2300      	movs	r3, #0
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	f7ff fa5b 	bl	800607e <dwt_write16bitoffsetreg>
 8006bc8:	2002      	movs	r0, #2
 8006bca:	f7fa fcbb 	bl	8001544 <deca_sleep>
 8006bce:	213a      	movs	r1, #58	; 0x3a
 8006bd0:	4620      	mov	r0, r4
 8006bd2:	f7ff fa9b 	bl	800610c <__dwt_otp_write_wdata_id_reg>
 8006bd6:	f44f 7181 	mov.w	r1, #258	; 0x102
 8006bda:	4620      	mov	r0, r4
 8006bdc:	f7ff fa96 	bl	800610c <__dwt_otp_write_wdata_id_reg>
 8006be0:	2302      	movs	r3, #2
 8006be2:	2200      	movs	r2, #0
 8006be4:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8006be8:	4620      	mov	r0, r4
 8006bea:	f7ff fa48 	bl	800607e <dwt_write16bitoffsetreg>
 8006bee:	2300      	movs	r3, #0
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f7ff fa41 	bl	800607e <dwt_write16bitoffsetreg>
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	461a      	mov	r2, r3
 8006c00:	4641      	mov	r1, r8
 8006c02:	4620      	mov	r0, r4
 8006c04:	f7ff fa3b 	bl	800607e <dwt_write16bitoffsetreg>
 8006c08:	464b      	mov	r3, r9
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	4631      	mov	r1, r6
 8006c0e:	4620      	mov	r0, r4
 8006c10:	f7ff fb36 	bl	8006280 <dwt_write32bitoffsetreg>
 8006c14:	b003      	add	sp, #12
 8006c16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c1a:	bf00      	nop
 8006c1c:	00070044 	.word	0x00070044
 8006c20:	000b0008 	.word	0x000b0008

08006c24 <ull_setgpiomode>:
 8006c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c26:	b083      	sub	sp, #12
 8006c28:	2400      	movs	r4, #0
 8006c2a:	4623      	mov	r3, r4
 8006c2c:	2601      	movs	r6, #1
 8006c2e:	2707      	movs	r7, #7
 8006c30:	e002      	b.n	8006c38 <ull_setgpiomode+0x14>
 8006c32:	3401      	adds	r4, #1
 8006c34:	2c09      	cmp	r4, #9
 8006c36:	d009      	beq.n	8006c4c <ull_setgpiomode+0x28>
 8006c38:	fa06 f504 	lsl.w	r5, r6, r4
 8006c3c:	420d      	tst	r5, r1
 8006c3e:	d0f8      	beq.n	8006c32 <ull_setgpiomode+0xe>
 8006c40:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8006c44:	fa07 f505 	lsl.w	r5, r7, r5
 8006c48:	432b      	orrs	r3, r5
 8006c4a:	e7f2      	b.n	8006c32 <ull_setgpiomode+0xe>
 8006c4c:	401a      	ands	r2, r3
 8006c4e:	9200      	str	r2, [sp, #0]
 8006c50:	43db      	mvns	r3, r3
 8006c52:	2200      	movs	r2, #0
 8006c54:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8006c58:	f7ff fea4 	bl	80069a4 <dwt_modify32bitoffsetreg>
 8006c5c:	b003      	add	sp, #12
 8006c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006c60 <ull_setinterrupt>:
 8006c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c64:	b082      	sub	sp, #8
 8006c66:	4604      	mov	r4, r0
 8006c68:	4688      	mov	r8, r1
 8006c6a:	4617      	mov	r7, r2
 8006c6c:	461d      	mov	r5, r3
 8006c6e:	f7fa fc4b 	bl	8001508 <decamutexon>
 8006c72:	4606      	mov	r6, r0
 8006c74:	2d02      	cmp	r5, #2
 8006c76:	d02d      	beq.n	8006cd4 <ull_setinterrupt+0x74>
 8006c78:	2d01      	cmp	r5, #1
 8006c7a:	d038      	beq.n	8006cee <ull_setinterrupt+0x8e>
 8006c7c:	2500      	movs	r5, #0
 8006c7e:	9500      	str	r5, [sp, #0]
 8006c80:	ea6f 0308 	mvn.w	r3, r8
 8006c84:	462a      	mov	r2, r5
 8006c86:	213c      	movs	r1, #60	; 0x3c
 8006c88:	4620      	mov	r0, r4
 8006c8a:	f7ff fe8b 	bl	80069a4 <dwt_modify32bitoffsetreg>
 8006c8e:	9500      	str	r5, [sp, #0]
 8006c90:	43fb      	mvns	r3, r7
 8006c92:	462a      	mov	r2, r5
 8006c94:	2140      	movs	r1, #64	; 0x40
 8006c96:	4620      	mov	r0, r4
 8006c98:	f7ff fe84 	bl	80069a4 <dwt_modify32bitoffsetreg>
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	213c      	movs	r1, #60	; 0x3c
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f7fe fdab 	bl	80057fc <dwt_read32bitoffsetreg>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2200      	movs	r2, #0
 8006caa:	2144      	movs	r1, #68	; 0x44
 8006cac:	4620      	mov	r0, r4
 8006cae:	f7ff fae7 	bl	8006280 <dwt_write32bitoffsetreg>
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	2140      	movs	r1, #64	; 0x40
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	f7fe fda0 	bl	80057fc <dwt_read32bitoffsetreg>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	2148      	movs	r1, #72	; 0x48
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f7ff fadc 	bl	8006280 <dwt_write32bitoffsetreg>
 8006cc8:	4630      	mov	r0, r6
 8006cca:	f7fa fc2e 	bl	800152a <decamutexoff>
 8006cce:	b002      	add	sp, #8
 8006cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cd4:	4643      	mov	r3, r8
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	213c      	movs	r1, #60	; 0x3c
 8006cda:	4620      	mov	r0, r4
 8006cdc:	f7ff fad0 	bl	8006280 <dwt_write32bitoffsetreg>
 8006ce0:	463b      	mov	r3, r7
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	2140      	movs	r1, #64	; 0x40
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	f7ff faca 	bl	8006280 <dwt_write32bitoffsetreg>
 8006cec:	e7d6      	b.n	8006c9c <ull_setinterrupt+0x3c>
 8006cee:	f8cd 8000 	str.w	r8, [sp]
 8006cf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	213c      	movs	r1, #60	; 0x3c
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	f7ff fe52 	bl	80069a4 <dwt_modify32bitoffsetreg>
 8006d00:	9700      	str	r7, [sp, #0]
 8006d02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d06:	2200      	movs	r2, #0
 8006d08:	2140      	movs	r1, #64	; 0x40
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	f7ff fe4a 	bl	80069a4 <dwt_modify32bitoffsetreg>
 8006d10:	e7c4      	b.n	8006c9c <ull_setinterrupt+0x3c>
	...

08006d14 <ull_writetxfctrl>:
 8006d14:	b510      	push	{r4, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	4604      	mov	r4, r0
 8006d1a:	2a7f      	cmp	r2, #127	; 0x7f
 8006d1c:	d912      	bls.n	8006d44 <ull_writetxfctrl+0x30>
 8006d1e:	3280      	adds	r2, #128	; 0x80
 8006d20:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 8006d24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006d28:	9100      	str	r1, [sp, #0]
 8006d2a:	4b0c      	ldr	r3, [pc, #48]	; (8006d5c <ull_writetxfctrl+0x48>)
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	2124      	movs	r1, #36	; 0x24
 8006d30:	f7ff fe38 	bl	80069a4 <dwt_modify32bitoffsetreg>
 8006d34:	2200      	movs	r2, #0
 8006d36:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	f7fe fd86 	bl	800584c <dwt_read8bitoffsetreg>
 8006d40:	b002      	add	sp, #8
 8006d42:	bd10      	pop	{r4, pc}
 8006d44:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 8006d48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006d4c:	9100      	str	r1, [sp, #0]
 8006d4e:	4b03      	ldr	r3, [pc, #12]	; (8006d5c <ull_writetxfctrl+0x48>)
 8006d50:	2200      	movs	r2, #0
 8006d52:	2124      	movs	r1, #36	; 0x24
 8006d54:	f7ff fe26 	bl	80069a4 <dwt_modify32bitoffsetreg>
 8006d58:	e7f2      	b.n	8006d40 <ull_writetxfctrl+0x2c>
 8006d5a:	bf00      	nop
 8006d5c:	fc00f400 	.word	0xfc00f400

08006d60 <prs_sys_status_and_or>:
 8006d60:	b500      	push	{lr}
 8006d62:	b083      	sub	sp, #12
 8006d64:	9200      	str	r2, [sp, #0]
 8006d66:	460b      	mov	r3, r1
 8006d68:	2200      	movs	r2, #0
 8006d6a:	2144      	movs	r1, #68	; 0x44
 8006d6c:	f7ff fe1a 	bl	80069a4 <dwt_modify32bitoffsetreg>
 8006d70:	2000      	movs	r0, #0
 8006d72:	b003      	add	sp, #12
 8006d74:	f85d fb04 	ldr.w	pc, [sp], #4

08006d78 <dwt_modify8bitoffsetreg>:
 8006d78:	b500      	push	{lr}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	f88d 300c 	strb.w	r3, [sp, #12]
 8006d80:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8006d84:	f88d 300d 	strb.w	r3, [sp, #13]
 8006d88:	f248 0301 	movw	r3, #32769	; 0x8001
 8006d8c:	9301      	str	r3, [sp, #4]
 8006d8e:	ab03      	add	r3, sp, #12
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	2302      	movs	r3, #2
 8006d94:	b292      	uxth	r2, r2
 8006d96:	f7fe fca4 	bl	80056e2 <dwt_xfer3xxx>
 8006d9a:	b005      	add	sp, #20
 8006d9c:	f85d fb04 	ldr.w	pc, [sp], #4

08006da0 <ull_configciadiag>:
 8006da0:	b530      	push	{r4, r5, lr}
 8006da2:	b083      	sub	sp, #12
 8006da4:	4604      	mov	r4, r0
 8006da6:	460d      	mov	r5, r1
 8006da8:	f011 0f01 	tst.w	r1, #1
 8006dac:	d015      	beq.n	8006dda <ull_configciadiag+0x3a>
 8006dae:	2300      	movs	r3, #0
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	23ef      	movs	r3, #239	; 0xef
 8006db4:	2202      	movs	r2, #2
 8006db6:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8006dba:	f7ff ffdd 	bl	8006d78 <dwt_modify8bitoffsetreg>
 8006dbe:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006dc0:	761d      	strb	r5, [r3, #24]
 8006dc2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006dc4:	7e1b      	ldrb	r3, [r3, #24]
 8006dc6:	085b      	lsrs	r3, r3, #1
 8006dc8:	d010      	beq.n	8006dec <ull_configciadiag+0x4c>
 8006dca:	086b      	lsrs	r3, r5, #1
 8006dcc:	2200      	movs	r2, #0
 8006dce:	490e      	ldr	r1, [pc, #56]	; (8006e08 <ull_configciadiag+0x68>)
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	f7ff f902 	bl	8005fda <dwt_write8bitoffsetreg>
 8006dd6:	b003      	add	sp, #12
 8006dd8:	bd30      	pop	{r4, r5, pc}
 8006dda:	2310      	movs	r3, #16
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	23ff      	movs	r3, #255	; 0xff
 8006de0:	2202      	movs	r2, #2
 8006de2:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8006de6:	f7ff ffc7 	bl	8006d78 <dwt_modify8bitoffsetreg>
 8006dea:	e7e8      	b.n	8006dbe <ull_configciadiag+0x1e>
 8006dec:	2301      	movs	r3, #1
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	23ff      	movs	r3, #255	; 0xff
 8006df2:	2200      	movs	r2, #0
 8006df4:	4904      	ldr	r1, [pc, #16]	; (8006e08 <ull_configciadiag+0x68>)
 8006df6:	4620      	mov	r0, r4
 8006df8:	f7ff ffbe 	bl	8006d78 <dwt_modify8bitoffsetreg>
 8006dfc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006dfe:	7e13      	ldrb	r3, [r2, #24]
 8006e00:	f043 0302 	orr.w	r3, r3, #2
 8006e04:	7613      	strb	r3, [r2, #24]
 8006e06:	e7e6      	b.n	8006dd6 <ull_configciadiag+0x36>
 8006e08:	00010028 	.word	0x00010028

08006e0c <ull_calcbandwidthadj>:
 8006e0c:	b570      	push	{r4, r5, r6, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	4604      	mov	r4, r0
 8006e12:	460d      	mov	r5, r1
 8006e14:	2101      	movs	r1, #1
 8006e16:	f7ff f963 	bl	80060e0 <ull_force_clocks>
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	f7ff fe03 	bl	8006a28 <ull_enable_rf_tx>
 8006e22:	4620      	mov	r0, r4
 8006e24:	f7ff fe34 	bl	8006a90 <ull_enable_rftx_blocks>
 8006e28:	f3c5 030b 	ubfx	r3, r5, #0, #12
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	4915      	ldr	r1, [pc, #84]	; (8006e84 <ull_calcbandwidthadj+0x78>)
 8006e30:	4620      	mov	r0, r4
 8006e32:	f7ff f924 	bl	800607e <dwt_write16bitoffsetreg>
 8006e36:	2303      	movs	r3, #3
 8006e38:	9300      	str	r3, [sp, #0]
 8006e3a:	23ff      	movs	r3, #255	; 0xff
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	4912      	ldr	r1, [pc, #72]	; (8006e88 <ull_calcbandwidthadj+0x7c>)
 8006e40:	4620      	mov	r0, r4
 8006e42:	f7ff ff99 	bl	8006d78 <dwt_modify8bitoffsetreg>
 8006e46:	4e10      	ldr	r6, [pc, #64]	; (8006e88 <ull_calcbandwidthadj+0x7c>)
 8006e48:	2500      	movs	r5, #0
 8006e4a:	462a      	mov	r2, r5
 8006e4c:	4631      	mov	r1, r6
 8006e4e:	4620      	mov	r0, r4
 8006e50:	f7fe fcfc 	bl	800584c <dwt_read8bitoffsetreg>
 8006e54:	f010 0f01 	tst.w	r0, #1
 8006e58:	d1f7      	bne.n	8006e4a <ull_calcbandwidthadj+0x3e>
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	f7ff fcae 	bl	80067bc <ull_disable_rftx_blocks>
 8006e60:	2100      	movs	r1, #0
 8006e62:	4620      	mov	r0, r4
 8006e64:	f7ff fcb4 	bl	80067d0 <ull_disable_rf_tx>
 8006e68:	2105      	movs	r1, #5
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	f7ff f938 	bl	80060e0 <ull_force_clocks>
 8006e70:	2200      	movs	r2, #0
 8006e72:	4906      	ldr	r1, [pc, #24]	; (8006e8c <ull_calcbandwidthadj+0x80>)
 8006e74:	4620      	mov	r0, r4
 8006e76:	f7fe fce9 	bl	800584c <dwt_read8bitoffsetreg>
 8006e7a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8006e7e:	b002      	add	sp, #8
 8006e80:	bd70      	pop	{r4, r5, r6, pc}
 8006e82:	bf00      	nop
 8006e84:	0008001c 	.word	0x0008001c
 8006e88:	00080010 	.word	0x00080010
 8006e8c:	0007001c 	.word	0x0007001c

08006e90 <ull_configuretxrf>:
 8006e90:	b538      	push	{r3, r4, r5, lr}
 8006e92:	4605      	mov	r5, r0
 8006e94:	460c      	mov	r4, r1
 8006e96:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 8006e9a:	b149      	cbz	r1, 8006eb0 <ull_configuretxrf+0x20>
 8006e9c:	f7ff ffb6 	bl	8006e0c <ull_calcbandwidthadj>
 8006ea0:	f8d4 3001 	ldr.w	r3, [r4, #1]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	4905      	ldr	r1, [pc, #20]	; (8006ebc <ull_configuretxrf+0x2c>)
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	f7ff f9e9 	bl	8006280 <dwt_write32bitoffsetreg>
 8006eae:	bd38      	pop	{r3, r4, r5, pc}
 8006eb0:	7823      	ldrb	r3, [r4, #0]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	4902      	ldr	r1, [pc, #8]	; (8006ec0 <ull_configuretxrf+0x30>)
 8006eb6:	f7ff f890 	bl	8005fda <dwt_write8bitoffsetreg>
 8006eba:	e7f1      	b.n	8006ea0 <ull_configuretxrf+0x10>
 8006ebc:	0001000c 	.word	0x0001000c
 8006ec0:	0007001c 	.word	0x0007001c

08006ec4 <ull_repeated_frames>:
 8006ec4:	b530      	push	{r4, r5, lr}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	4604      	mov	r4, r0
 8006eca:	460d      	mov	r5, r1
 8006ecc:	2310      	movs	r3, #16
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	23ff      	movs	r3, #255	; 0xff
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	4906      	ldr	r1, [pc, #24]	; (8006ef0 <ull_repeated_frames+0x2c>)
 8006ed6:	f7ff ff4f 	bl	8006d78 <dwt_modify8bitoffsetreg>
 8006eda:	462b      	mov	r3, r5
 8006edc:	2d02      	cmp	r5, #2
 8006ede:	bf38      	it	cc
 8006ee0:	2302      	movcc	r3, #2
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	212c      	movs	r1, #44	; 0x2c
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f7ff f9ca 	bl	8006280 <dwt_write32bitoffsetreg>
 8006eec:	b003      	add	sp, #12
 8006eee:	bd30      	pop	{r4, r5, pc}
 8006ef0:	000f0024 	.word	0x000f0024

08006ef4 <ull_setdwstate>:
 8006ef4:	b530      	push	{r4, r5, lr}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	4604      	mov	r4, r0
 8006efa:	2901      	cmp	r1, #1
 8006efc:	d01d      	beq.n	8006f3a <ull_setdwstate+0x46>
 8006efe:	2902      	cmp	r1, #2
 8006f00:	d030      	beq.n	8006f64 <ull_setdwstate+0x70>
 8006f02:	2301      	movs	r3, #1
 8006f04:	9300      	str	r3, [sp, #0]
 8006f06:	23ff      	movs	r3, #255	; 0xff
 8006f08:	2200      	movs	r2, #0
 8006f0a:	4926      	ldr	r1, [pc, #152]	; (8006fa4 <ull_setdwstate+0xb0>)
 8006f0c:	f7ff ff34 	bl	8006d78 <dwt_modify8bitoffsetreg>
 8006f10:	4d25      	ldr	r5, [pc, #148]	; (8006fa8 <ull_setdwstate+0xb4>)
 8006f12:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006f16:	9300      	str	r3, [sp, #0]
 8006f18:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	4629      	mov	r1, r5
 8006f20:	4620      	mov	r0, r4
 8006f22:	f7ff fd3f 	bl	80069a4 <dwt_modify32bitoffsetreg>
 8006f26:	2300      	movs	r3, #0
 8006f28:	9300      	str	r3, [sp, #0]
 8006f2a:	237f      	movs	r3, #127	; 0x7f
 8006f2c:	2202      	movs	r2, #2
 8006f2e:	4629      	mov	r1, r5
 8006f30:	4620      	mov	r0, r4
 8006f32:	f7ff ff21 	bl	8006d78 <dwt_modify8bitoffsetreg>
 8006f36:	b003      	add	sp, #12
 8006f38:	bd30      	pop	{r4, r5, pc}
 8006f3a:	2105      	movs	r1, #5
 8006f3c:	f7ff f8d0 	bl	80060e0 <ull_force_clocks>
 8006f40:	f44f 7381 	mov.w	r3, #258	; 0x102
 8006f44:	9300      	str	r3, [sp, #0]
 8006f46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	4917      	ldr	r1, [pc, #92]	; (8006fac <ull_setdwstate+0xb8>)
 8006f4e:	4620      	mov	r0, r4
 8006f50:	f7ff fd28 	bl	80069a4 <dwt_modify32bitoffsetreg>
 8006f54:	2201      	movs	r2, #1
 8006f56:	9200      	str	r2, [sp, #0]
 8006f58:	23ff      	movs	r3, #255	; 0xff
 8006f5a:	4913      	ldr	r1, [pc, #76]	; (8006fa8 <ull_setdwstate+0xb4>)
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	f7ff ff0b 	bl	8006d78 <dwt_modify8bitoffsetreg>
 8006f62:	e7e8      	b.n	8006f36 <ull_setdwstate+0x42>
 8006f64:	2303      	movs	r3, #3
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	23ff      	movs	r3, #255	; 0xff
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	490d      	ldr	r1, [pc, #52]	; (8006fa4 <ull_setdwstate+0xb0>)
 8006f6e:	f7ff ff03 	bl	8006d78 <dwt_modify8bitoffsetreg>
 8006f72:	4d0d      	ldr	r5, [pc, #52]	; (8006fa8 <ull_setdwstate+0xb4>)
 8006f74:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8006f7e:	2200      	movs	r2, #0
 8006f80:	4629      	mov	r1, r5
 8006f82:	4620      	mov	r0, r4
 8006f84:	f7ff fd0e 	bl	80069a4 <dwt_modify32bitoffsetreg>
 8006f88:	2300      	movs	r3, #0
 8006f8a:	9300      	str	r3, [sp, #0]
 8006f8c:	237f      	movs	r3, #127	; 0x7f
 8006f8e:	2202      	movs	r2, #2
 8006f90:	4629      	mov	r1, r5
 8006f92:	4620      	mov	r0, r4
 8006f94:	f7ff fef0 	bl	8006d78 <dwt_modify8bitoffsetreg>
 8006f98:	2105      	movs	r1, #5
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	f7ff f8a0 	bl	80060e0 <ull_force_clocks>
 8006fa0:	e7c9      	b.n	8006f36 <ull_setdwstate+0x42>
 8006fa2:	bf00      	nop
 8006fa4:	00110004 	.word	0x00110004
 8006fa8:	00110008 	.word	0x00110008
 8006fac:	00090008 	.word	0x00090008

08006fb0 <ull_configureframefilter>:
 8006fb0:	b530      	push	{r4, r5, lr}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	4605      	mov	r5, r0
 8006fb6:	2902      	cmp	r1, #2
 8006fb8:	d00e      	beq.n	8006fd8 <ull_configureframefilter+0x28>
 8006fba:	2400      	movs	r4, #0
 8006fbc:	9400      	str	r4, [sp, #0]
 8006fbe:	23fe      	movs	r3, #254	; 0xfe
 8006fc0:	4622      	mov	r2, r4
 8006fc2:	2110      	movs	r1, #16
 8006fc4:	f7ff fed8 	bl	8006d78 <dwt_modify8bitoffsetreg>
 8006fc8:	4623      	mov	r3, r4
 8006fca:	4622      	mov	r2, r4
 8006fcc:	2114      	movs	r1, #20
 8006fce:	4628      	mov	r0, r5
 8006fd0:	f7ff f855 	bl	800607e <dwt_write16bitoffsetreg>
 8006fd4:	b003      	add	sp, #12
 8006fd6:	bd30      	pop	{r4, r5, pc}
 8006fd8:	4614      	mov	r4, r2
 8006fda:	2301      	movs	r3, #1
 8006fdc:	9300      	str	r3, [sp, #0]
 8006fde:	23ff      	movs	r3, #255	; 0xff
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	2110      	movs	r1, #16
 8006fe4:	f7ff fec8 	bl	8006d78 <dwt_modify8bitoffsetreg>
 8006fe8:	4623      	mov	r3, r4
 8006fea:	2200      	movs	r2, #0
 8006fec:	2114      	movs	r1, #20
 8006fee:	4628      	mov	r0, r5
 8006ff0:	f7ff f845 	bl	800607e <dwt_write16bitoffsetreg>
 8006ff4:	e7ee      	b.n	8006fd4 <ull_configureframefilter+0x24>
	...

08006ff8 <ull_run_pgfcal>:
 8006ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	4605      	mov	r5, r0
 8007000:	4c29      	ldr	r4, [pc, #164]	; (80070a8 <ull_run_pgfcal+0xb0>)
 8007002:	4b2a      	ldr	r3, [pc, #168]	; (80070ac <ull_run_pgfcal+0xb4>)
 8007004:	2200      	movs	r2, #0
 8007006:	4621      	mov	r1, r4
 8007008:	f7ff f93a 	bl	8006280 <dwt_write32bitoffsetreg>
 800700c:	2310      	movs	r3, #16
 800700e:	9300      	str	r3, [sp, #0]
 8007010:	23ff      	movs	r3, #255	; 0xff
 8007012:	2200      	movs	r2, #0
 8007014:	4621      	mov	r1, r4
 8007016:	4628      	mov	r0, r5
 8007018:	f7ff feae 	bl	8006d78 <dwt_modify8bitoffsetreg>
 800701c:	2403      	movs	r4, #3
 800701e:	f04f 0814 	mov.w	r8, #20
 8007022:	4f23      	ldr	r7, [pc, #140]	; (80070b0 <ull_run_pgfcal+0xb8>)
 8007024:	2600      	movs	r6, #0
 8007026:	4640      	mov	r0, r8
 8007028:	f7fa fa97 	bl	800155a <deca_usleep>
 800702c:	4632      	mov	r2, r6
 800702e:	4639      	mov	r1, r7
 8007030:	4628      	mov	r0, r5
 8007032:	f7fe fc0b 	bl	800584c <dwt_read8bitoffsetreg>
 8007036:	2801      	cmp	r0, #1
 8007038:	d034      	beq.n	80070a4 <ull_run_pgfcal+0xac>
 800703a:	1e63      	subs	r3, r4, #1
 800703c:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8007040:	d1f1      	bne.n	8007026 <ull_run_pgfcal+0x2e>
 8007042:	f06f 0402 	mvn.w	r4, #2
 8007046:	4e18      	ldr	r6, [pc, #96]	; (80070a8 <ull_run_pgfcal+0xb0>)
 8007048:	2300      	movs	r3, #0
 800704a:	461a      	mov	r2, r3
 800704c:	4631      	mov	r1, r6
 800704e:	4628      	mov	r0, r5
 8007050:	f7fe ffc3 	bl	8005fda <dwt_write8bitoffsetreg>
 8007054:	2301      	movs	r3, #1
 8007056:	2200      	movs	r2, #0
 8007058:	4915      	ldr	r1, [pc, #84]	; (80070b0 <ull_run_pgfcal+0xb8>)
 800705a:	4628      	mov	r0, r5
 800705c:	f7fe ffbd 	bl	8005fda <dwt_write8bitoffsetreg>
 8007060:	2301      	movs	r3, #1
 8007062:	9300      	str	r3, [sp, #0]
 8007064:	23ff      	movs	r3, #255	; 0xff
 8007066:	2202      	movs	r2, #2
 8007068:	4631      	mov	r1, r6
 800706a:	4628      	mov	r0, r5
 800706c:	f7ff fe84 	bl	8006d78 <dwt_modify8bitoffsetreg>
 8007070:	2200      	movs	r2, #0
 8007072:	4910      	ldr	r1, [pc, #64]	; (80070b4 <ull_run_pgfcal+0xbc>)
 8007074:	4628      	mov	r0, r5
 8007076:	f7fe fbc1 	bl	80057fc <dwt_read32bitoffsetreg>
 800707a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800707e:	4298      	cmp	r0, r3
 8007080:	bf08      	it	eq
 8007082:	f06f 0403 	mvneq.w	r4, #3
 8007086:	2200      	movs	r2, #0
 8007088:	490b      	ldr	r1, [pc, #44]	; (80070b8 <ull_run_pgfcal+0xc0>)
 800708a:	4628      	mov	r0, r5
 800708c:	f7fe fbb6 	bl	80057fc <dwt_read32bitoffsetreg>
 8007090:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8007094:	4298      	cmp	r0, r3
 8007096:	bf14      	ite	ne
 8007098:	4620      	movne	r0, r4
 800709a:	f06f 0004 	mvneq.w	r0, #4
 800709e:	b002      	add	sp, #8
 80070a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070a4:	2400      	movs	r4, #0
 80070a6:	e7ce      	b.n	8007046 <ull_run_pgfcal+0x4e>
 80070a8:	0004000c 	.word	0x0004000c
 80070ac:	00020001 	.word	0x00020001
 80070b0:	00040020 	.word	0x00040020
 80070b4:	00040014 	.word	0x00040014
 80070b8:	0004001c 	.word	0x0004001c

080070bc <prs_ack_enable>:
 80070bc:	b500      	push	{lr}
 80070be:	b083      	sub	sp, #12
 80070c0:	2900      	cmp	r1, #0
 80070c2:	bf0b      	itete	eq
 80070c4:	23ff      	moveq	r3, #255	; 0xff
 80070c6:	23f7      	movne	r3, #247	; 0xf7
 80070c8:	2200      	moveq	r2, #0
 80070ca:	2208      	movne	r2, #8
 80070cc:	9200      	str	r2, [sp, #0]
 80070ce:	2201      	movs	r2, #1
 80070d0:	2110      	movs	r1, #16
 80070d2:	f7ff fe51 	bl	8006d78 <dwt_modify8bitoffsetreg>
 80070d6:	b003      	add	sp, #12
 80070d8:	f85d fb04 	ldr.w	pc, [sp], #4

080070dc <dwt_modify16bitoffsetreg>:
 80070dc:	b510      	push	{r4, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 80070e4:	f88d 300c 	strb.w	r3, [sp, #12]
 80070e8:	0a1b      	lsrs	r3, r3, #8
 80070ea:	f88d 300d 	strb.w	r3, [sp, #13]
 80070ee:	f88d 400e 	strb.w	r4, [sp, #14]
 80070f2:	0a24      	lsrs	r4, r4, #8
 80070f4:	f88d 400f 	strb.w	r4, [sp, #15]
 80070f8:	f248 0302 	movw	r3, #32770	; 0x8002
 80070fc:	9301      	str	r3, [sp, #4]
 80070fe:	ab03      	add	r3, sp, #12
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	2304      	movs	r3, #4
 8007104:	b292      	uxth	r2, r2
 8007106:	f7fe faec 	bl	80056e2 <dwt_xfer3xxx>
 800710a:	b004      	add	sp, #16
 800710c:	bd10      	pop	{r4, pc}
	...

08007110 <_dwt_prog_ldo_and_bias_tune>:
 8007110:	b510      	push	{r4, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	4604      	mov	r4, r0
 8007116:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800711a:	9300      	str	r3, [sp, #0]
 800711c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007120:	2200      	movs	r2, #0
 8007122:	4907      	ldr	r1, [pc, #28]	; (8007140 <_dwt_prog_ldo_and_bias_tune+0x30>)
 8007124:	f7ff ffda 	bl	80070dc <dwt_modify16bitoffsetreg>
 8007128:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800712a:	7a1b      	ldrb	r3, [r3, #8]
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8007132:	2200      	movs	r2, #0
 8007134:	4903      	ldr	r1, [pc, #12]	; (8007144 <_dwt_prog_ldo_and_bias_tune+0x34>)
 8007136:	4620      	mov	r0, r4
 8007138:	f7ff ffd0 	bl	80070dc <dwt_modify16bitoffsetreg>
 800713c:	b002      	add	sp, #8
 800713e:	bd10      	pop	{r4, pc}
 8007140:	000b0008 	.word	0x000b0008
 8007144:	0011001f 	.word	0x0011001f

08007148 <ull_setleds>:
 8007148:	b530      	push	{r4, r5, lr}
 800714a:	b083      	sub	sp, #12
 800714c:	4604      	mov	r4, r0
 800714e:	f011 0f01 	tst.w	r1, #1
 8007152:	d01f      	beq.n	8007194 <ull_setleds+0x4c>
 8007154:	460d      	mov	r5, r1
 8007156:	f44f 7310 	mov.w	r3, #576	; 0x240
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 8007160:	2200      	movs	r2, #0
 8007162:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8007166:	f7ff fc1d 	bl	80069a4 <dwt_modify32bitoffsetreg>
 800716a:	f44f 0304 	mov.w	r3, #8650752	; 0x840000
 800716e:	9300      	str	r3, [sp, #0]
 8007170:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007174:	2200      	movs	r2, #0
 8007176:	4918      	ldr	r1, [pc, #96]	; (80071d8 <ull_setleds+0x90>)
 8007178:	4620      	mov	r0, r4
 800717a:	f7ff fc13 	bl	80069a4 <dwt_modify32bitoffsetreg>
 800717e:	f015 0f02 	tst.w	r5, #2
 8007182:	d11a      	bne.n	80071ba <ull_setleds+0x72>
 8007184:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007188:	2200      	movs	r2, #0
 800718a:	4914      	ldr	r1, [pc, #80]	; (80071dc <ull_setleds+0x94>)
 800718c:	4620      	mov	r0, r4
 800718e:	f7ff f877 	bl	8006280 <dwt_write32bitoffsetreg>
 8007192:	e010      	b.n	80071b6 <ull_setleds+0x6e>
 8007194:	2500      	movs	r5, #0
 8007196:	9500      	str	r5, [sp, #0]
 8007198:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 800719c:	462a      	mov	r2, r5
 800719e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80071a2:	f7ff fbff 	bl	80069a4 <dwt_modify32bitoffsetreg>
 80071a6:	9500      	str	r5, [sp, #0]
 80071a8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80071ac:	462a      	mov	r2, r5
 80071ae:	490b      	ldr	r1, [pc, #44]	; (80071dc <ull_setleds+0x94>)
 80071b0:	4620      	mov	r0, r4
 80071b2:	f7ff ff93 	bl	80070dc <dwt_modify16bitoffsetreg>
 80071b6:	b003      	add	sp, #12
 80071b8:	bd30      	pop	{r4, r5, pc}
 80071ba:	4d08      	ldr	r5, [pc, #32]	; (80071dc <ull_setleds+0x94>)
 80071bc:	4b08      	ldr	r3, [pc, #32]	; (80071e0 <ull_setleds+0x98>)
 80071be:	2200      	movs	r2, #0
 80071c0:	4629      	mov	r1, r5
 80071c2:	4620      	mov	r0, r4
 80071c4:	f7ff f85c 	bl	8006280 <dwt_write32bitoffsetreg>
 80071c8:	f44f 7388 	mov.w	r3, #272	; 0x110
 80071cc:	2200      	movs	r2, #0
 80071ce:	4629      	mov	r1, r5
 80071d0:	4620      	mov	r0, r4
 80071d2:	f7ff f855 	bl	8006280 <dwt_write32bitoffsetreg>
 80071d6:	e7ee      	b.n	80071b6 <ull_setleds+0x6e>
 80071d8:	00110004 	.word	0x00110004
 80071dc:	00110016 	.word	0x00110016
 80071e0:	000f0110 	.word	0x000f0110

080071e4 <ull_pgf_cal>:
 80071e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071e6:	b083      	sub	sp, #12
 80071e8:	4604      	mov	r4, r0
 80071ea:	2901      	cmp	r1, #1
 80071ec:	d009      	beq.n	8007202 <ull_pgf_cal+0x1e>
 80071ee:	2014      	movs	r0, #20
 80071f0:	f7fa f9b3 	bl	800155a <deca_usleep>
 80071f4:	4620      	mov	r0, r4
 80071f6:	f7ff feff 	bl	8006ff8 <ull_run_pgfcal>
 80071fa:	4605      	mov	r5, r0
 80071fc:	4628      	mov	r0, r5
 80071fe:	b003      	add	sp, #12
 8007200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007202:	4e0f      	ldr	r6, [pc, #60]	; (8007240 <ull_pgf_cal+0x5c>)
 8007204:	2200      	movs	r2, #0
 8007206:	4631      	mov	r1, r6
 8007208:	f7fe fb0e 	bl	8005828 <dwt_read16bitoffsetreg>
 800720c:	4607      	mov	r7, r0
 800720e:	f240 1305 	movw	r3, #261	; 0x105
 8007212:	9300      	str	r3, [sp, #0]
 8007214:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007218:	2200      	movs	r2, #0
 800721a:	4631      	mov	r1, r6
 800721c:	4620      	mov	r0, r4
 800721e:	f7ff ff5d 	bl	80070dc <dwt_modify16bitoffsetreg>
 8007222:	2014      	movs	r0, #20
 8007224:	f7fa f999 	bl	800155a <deca_usleep>
 8007228:	4620      	mov	r0, r4
 800722a:	f7ff fee5 	bl	8006ff8 <ull_run_pgfcal>
 800722e:	4605      	mov	r5, r0
 8007230:	2200      	movs	r2, #0
 8007232:	9200      	str	r2, [sp, #0]
 8007234:	463b      	mov	r3, r7
 8007236:	4631      	mov	r1, r6
 8007238:	4620      	mov	r0, r4
 800723a:	f7ff ff4f 	bl	80070dc <dwt_modify16bitoffsetreg>
 800723e:	e7dd      	b.n	80071fc <ull_pgf_cal+0x18>
 8007240:	00070048 	.word	0x00070048

08007244 <ull_setgpiovalue>:
 8007244:	b500      	push	{lr}
 8007246:	b083      	sub	sp, #12
 8007248:	2a01      	cmp	r2, #1
 800724a:	d009      	beq.n	8007260 <ull_setgpiovalue+0x1c>
 800724c:	43cb      	mvns	r3, r1
 800724e:	2200      	movs	r2, #0
 8007250:	9200      	str	r2, [sp, #0]
 8007252:	b29b      	uxth	r3, r3
 8007254:	4906      	ldr	r1, [pc, #24]	; (8007270 <ull_setgpiovalue+0x2c>)
 8007256:	f7ff ff41 	bl	80070dc <dwt_modify16bitoffsetreg>
 800725a:	b003      	add	sp, #12
 800725c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007260:	9100      	str	r1, [sp, #0]
 8007262:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007266:	2200      	movs	r2, #0
 8007268:	4901      	ldr	r1, [pc, #4]	; (8007270 <ull_setgpiovalue+0x2c>)
 800726a:	f7ff ff37 	bl	80070dc <dwt_modify16bitoffsetreg>
 800726e:	e7f4      	b.n	800725a <ull_setgpiovalue+0x16>
 8007270:	0005000c 	.word	0x0005000c

08007274 <ull_readaccdata>:
 8007274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007276:	b083      	sub	sp, #12
 8007278:	4604      	mov	r4, r0
 800727a:	460f      	mov	r7, r1
 800727c:	4616      	mov	r6, r2
 800727e:	461d      	mov	r5, r3
 8007280:	f248 0340 	movw	r3, #32832	; 0x8040
 8007284:	9300      	str	r3, [sp, #0]
 8007286:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800728a:	2200      	movs	r2, #0
 800728c:	4918      	ldr	r1, [pc, #96]	; (80072f0 <ull_readaccdata+0x7c>)
 800728e:	f7ff ff25 	bl	80070dc <dwt_modify16bitoffsetreg>
 8007292:	19aa      	adds	r2, r5, r6
 8007294:	f243 0301 	movw	r3, #12289	; 0x3001
 8007298:	429a      	cmp	r2, r3
 800729a:	dc15      	bgt.n	80072c8 <ull_readaccdata+0x54>
 800729c:	2d7f      	cmp	r5, #127	; 0x7f
 800729e:	d91d      	bls.n	80072dc <ull_readaccdata+0x68>
 80072a0:	2315      	movs	r3, #21
 80072a2:	2200      	movs	r2, #0
 80072a4:	4913      	ldr	r1, [pc, #76]	; (80072f4 <ull_readaccdata+0x80>)
 80072a6:	4620      	mov	r0, r4
 80072a8:	f7fe ffea 	bl	8006280 <dwt_write32bitoffsetreg>
 80072ac:	462b      	mov	r3, r5
 80072ae:	2200      	movs	r2, #0
 80072b0:	4911      	ldr	r1, [pc, #68]	; (80072f8 <ull_readaccdata+0x84>)
 80072b2:	4620      	mov	r0, r4
 80072b4:	f7fe ffe4 	bl	8006280 <dwt_write32bitoffsetreg>
 80072b8:	9700      	str	r7, [sp, #0]
 80072ba:	4633      	mov	r3, r6
 80072bc:	2200      	movs	r2, #0
 80072be:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 80072c2:	4620      	mov	r0, r4
 80072c4:	f7fe fa90 	bl	80057e8 <dwt_readfromdevice>
 80072c8:	2200      	movs	r2, #0
 80072ca:	9200      	str	r2, [sp, #0]
 80072cc:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 80072d0:	4907      	ldr	r1, [pc, #28]	; (80072f0 <ull_readaccdata+0x7c>)
 80072d2:	4620      	mov	r0, r4
 80072d4:	f7ff ff02 	bl	80070dc <dwt_modify16bitoffsetreg>
 80072d8:	b003      	add	sp, #12
 80072da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072dc:	9700      	str	r7, [sp, #0]
 80072de:	4633      	mov	r3, r6
 80072e0:	462a      	mov	r2, r5
 80072e2:	f44f 11a8 	mov.w	r1, #1376256	; 0x150000
 80072e6:	4620      	mov	r0, r4
 80072e8:	f7fe fa7e 	bl	80057e8 <dwt_readfromdevice>
 80072ec:	e7ec      	b.n	80072c8 <ull_readaccdata+0x54>
 80072ee:	bf00      	nop
 80072f0:	00110004 	.word	0x00110004
 80072f4:	001f0004 	.word	0x001f0004
 80072f8:	001f0008 	.word	0x001f0008

080072fc <ull_repeated_cw>:
 80072fc:	b570      	push	{r4, r5, r6, lr}
 80072fe:	4606      	mov	r6, r0
 8007300:	460c      	mov	r4, r1
 8007302:	4615      	mov	r5, r2
 8007304:	4b0e      	ldr	r3, [pc, #56]	; (8007340 <ull_repeated_cw+0x44>)
 8007306:	2202      	movs	r2, #2
 8007308:	490e      	ldr	r1, [pc, #56]	; (8007344 <ull_repeated_cw+0x48>)
 800730a:	f7fe ffb9 	bl	8006280 <dwt_write32bitoffsetreg>
 800730e:	2d0f      	cmp	r5, #15
 8007310:	bfa8      	it	ge
 8007312:	250f      	movge	r5, #15
 8007314:	1e63      	subs	r3, r4, #1
 8007316:	2b03      	cmp	r3, #3
 8007318:	bf28      	it	cs
 800731a:	2404      	movcs	r4, #4
 800731c:	2310      	movs	r3, #16
 800731e:	4123      	asrs	r3, r4
 8007320:	2200      	movs	r2, #0
 8007322:	4909      	ldr	r1, [pc, #36]	; (8007348 <ull_repeated_cw+0x4c>)
 8007324:	4630      	mov	r0, r6
 8007326:	f7fe ffab 	bl	8006280 <dwt_write32bitoffsetreg>
 800732a:	1e63      	subs	r3, r4, #1
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	fa05 f303 	lsl.w	r3, r5, r3
 8007332:	2200      	movs	r2, #0
 8007334:	4905      	ldr	r1, [pc, #20]	; (800734c <ull_repeated_cw+0x50>)
 8007336:	4630      	mov	r0, r6
 8007338:	f7fe ffa2 	bl	8006280 <dwt_write32bitoffsetreg>
 800733c:	bd70      	pop	{r4, r5, r6, pc}
 800733e:	bf00      	nop
 8007340:	00d20874 	.word	0x00d20874
 8007344:	00110010 	.word	0x00110010
 8007348:	00070028 	.word	0x00070028
 800734c:	00080018 	.word	0x00080018

08007350 <ull_configure>:
 8007350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007354:	b083      	sub	sp, #12
 8007356:	4604      	mov	r4, r0
 8007358:	460d      	mov	r5, r1
 800735a:	f891 9000 	ldrb.w	r9, [r1]
 800735e:	790b      	ldrb	r3, [r1, #4]
 8007360:	2b18      	cmp	r3, #24
 8007362:	d814      	bhi.n	800738e <ull_configure+0x3e>
 8007364:	78cf      	ldrb	r7, [r1, #3]
 8007366:	2f18      	cmp	r7, #24
 8007368:	bf94      	ite	ls
 800736a:	2700      	movls	r7, #0
 800736c:	2701      	movhi	r7, #1
 800736e:	b2ff      	uxtb	r7, r7
 8007370:	79eb      	ldrb	r3, [r5, #7]
 8007372:	2b01      	cmp	r3, #1
 8007374:	bf0c      	ite	eq
 8007376:	2110      	moveq	r1, #16
 8007378:	2100      	movne	r1, #0
 800737a:	786b      	ldrb	r3, [r5, #1]
 800737c:	3b01      	subs	r3, #1
 800737e:	2b06      	cmp	r3, #6
 8007380:	d810      	bhi.n	80073a4 <ull_configure+0x54>
 8007382:	e8df f003 	tbb	[pc, r3]
 8007386:	0f06      	.short	0x0f06
 8007388:	0f0c120f 	.word	0x0f0c120f
 800738c:	09          	.byte	0x09
 800738d:	00          	.byte	0x00
 800738e:	2701      	movs	r7, #1
 8007390:	e7ed      	b.n	800736e <ull_configure+0x1e>
 8007392:	f04f 0a40 	mov.w	sl, #64	; 0x40
 8007396:	e00a      	b.n	80073ae <ull_configure+0x5e>
 8007398:	f04f 0a48 	mov.w	sl, #72	; 0x48
 800739c:	e007      	b.n	80073ae <ull_configure+0x5e>
 800739e:	f04f 0a80 	mov.w	sl, #128	; 0x80
 80073a2:	e004      	b.n	80073ae <ull_configure+0x5e>
 80073a4:	f44f 7a80 	mov.w	sl, #256	; 0x100
 80073a8:	e001      	b.n	80073ae <ull_configure+0x5e>
 80073aa:	f04f 0a20 	mov.w	sl, #32
 80073ae:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80073b0:	8a53      	ldrh	r3, [r2, #18]
 80073b2:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80073b6:	8253      	strh	r3, [r2, #18]
 80073b8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80073ba:	79ea      	ldrb	r2, [r5, #7]
 80073bc:	731a      	strb	r2, [r3, #12]
 80073be:	7b2e      	ldrb	r6, [r5, #12]
 80073c0:	1cb3      	adds	r3, r6, #2
 80073c2:	2601      	movs	r6, #1
 80073c4:	409e      	lsls	r6, r3
 80073c6:	fa1f f886 	uxth.w	r8, r6
 80073ca:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80073cc:	4bc7      	ldr	r3, [pc, #796]	; (80076ec <ull_configure+0x39c>)
 80073ce:	fb03 f308 	mul.w	r3, r3, r8
 80073d2:	0bdb      	lsrs	r3, r3, #15
 80073d4:	8293      	strh	r3, [r2, #20]
 80073d6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80073d8:	7aea      	ldrb	r2, [r5, #11]
 80073da:	75da      	strb	r2, [r3, #23]
 80073dc:	7a2b      	ldrb	r3, [r5, #8]
 80073de:	015b      	lsls	r3, r3, #5
 80073e0:	f003 0320 	and.w	r3, r3, #32
 80073e4:	7b6a      	ldrb	r2, [r5, #13]
 80073e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073ea:	7aea      	ldrb	r2, [r5, #11]
 80073ec:	0312      	lsls	r2, r2, #12
 80073ee:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 80073f2:	4313      	orrs	r3, r2
 80073f4:	430b      	orrs	r3, r1
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	4bbd      	ldr	r3, [pc, #756]	; (80076f0 <ull_configure+0x3a0>)
 80073fa:	2200      	movs	r2, #0
 80073fc:	2110      	movs	r1, #16
 80073fe:	4620      	mov	r0, r4
 8007400:	f7ff fad0 	bl	80069a4 <dwt_modify32bitoffsetreg>
 8007404:	2f00      	cmp	r7, #0
 8007406:	f040 80f6 	bne.w	80075f6 <ull_configure+0x2a6>
 800740a:	7aeb      	ldrb	r3, [r5, #11]
 800740c:	b1f3      	cbz	r3, 800744c <ull_configure+0xfc>
 800740e:	7b6b      	ldrb	r3, [r5, #13]
 8007410:	2b01      	cmp	r3, #1
 8007412:	f240 811c 	bls.w	800764e <ull_configure+0x2fe>
 8007416:	7b2a      	ldrb	r2, [r5, #12]
 8007418:	4bb6      	ldr	r3, [pc, #728]	; (80076f4 <ull_configure+0x3a4>)
 800741a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800741e:	0112      	lsls	r2, r2, #4
 8007420:	0ad3      	lsrs	r3, r2, #11
 8007422:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8007426:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800742a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800742e:	bf28      	it	cs
 8007430:	3301      	addcs	r3, #1
 8007432:	b29b      	uxth	r3, r3
 8007434:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
 8007438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800743c:	9300      	str	r3, [sp, #0]
 800743e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8007442:	2202      	movs	r2, #2
 8007444:	49ac      	ldr	r1, [pc, #688]	; (80076f8 <ull_configure+0x3a8>)
 8007446:	4620      	mov	r0, r4
 8007448:	f7ff fe48 	bl	80070dc <dwt_modify16bitoffsetreg>
 800744c:	2394      	movs	r3, #148	; 0x94
 800744e:	9300      	str	r3, [sp, #0]
 8007450:	4baa      	ldr	r3, [pc, #680]	; (80076fc <ull_configure+0x3ac>)
 8007452:	2200      	movs	r2, #0
 8007454:	49aa      	ldr	r1, [pc, #680]	; (8007700 <ull_configure+0x3b0>)
 8007456:	4620      	mov	r0, r4
 8007458:	f7ff faa4 	bl	80069a4 <dwt_modify32bitoffsetreg>
 800745c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8007460:	f340 8108 	ble.w	8007674 <ull_configure+0x324>
 8007464:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8007466:	8a53      	ldrh	r3, [r2, #18]
 8007468:	f043 0320 	orr.w	r3, r3, #32
 800746c:	8253      	strh	r3, [r2, #18]
 800746e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007472:	9300      	str	r3, [sp, #0]
 8007474:	f24e 73ff 	movw	r3, #59391	; 0xe7ff
 8007478:	2200      	movs	r2, #0
 800747a:	49a2      	ldr	r1, [pc, #648]	; (8007704 <ull_configure+0x3b4>)
 800747c:	4620      	mov	r0, r4
 800747e:	f7ff fe2d 	bl	80070dc <dwt_modify16bitoffsetreg>
 8007482:	7b6b      	ldrb	r3, [r5, #13]
 8007484:	2b01      	cmp	r3, #1
 8007486:	f000 8100 	beq.w	800768a <ull_configure+0x33a>
 800748a:	78ab      	ldrb	r3, [r5, #2]
 800748c:	f043 0310 	orr.w	r3, r3, #16
 8007490:	9300      	str	r3, [sp, #0]
 8007492:	23fc      	movs	r3, #252	; 0xfc
 8007494:	2200      	movs	r2, #0
 8007496:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800749a:	4620      	mov	r0, r4
 800749c:	f7ff fc6c 	bl	8006d78 <dwt_modify8bitoffsetreg>
 80074a0:	1e73      	subs	r3, r6, #1
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	2200      	movs	r2, #0
 80074a6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80074aa:	4620      	mov	r0, r4
 80074ac:	f7fe fd95 	bl	8005fda <dwt_write8bitoffsetreg>
 80074b0:	786b      	ldrb	r3, [r5, #1]
 80074b2:	2b07      	cmp	r3, #7
 80074b4:	bf0c      	ite	eq
 80074b6:	2308      	moveq	r3, #8
 80074b8:	2300      	movne	r3, #0
 80074ba:	2201      	movs	r2, #1
 80074bc:	2128      	movs	r1, #40	; 0x28
 80074be:	4620      	mov	r0, r4
 80074c0:	f7fe fd8b 	bl	8005fda <dwt_write8bitoffsetreg>
 80074c4:	4b90      	ldr	r3, [pc, #576]	; (8007708 <ull_configure+0x3b8>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	4990      	ldr	r1, [pc, #576]	; (800770c <ull_configure+0x3bc>)
 80074ca:	4620      	mov	r0, r4
 80074cc:	f7fe fed8 	bl	8006280 <dwt_write32bitoffsetreg>
 80074d0:	2200      	movs	r2, #0
 80074d2:	498f      	ldr	r1, [pc, #572]	; (8007710 <ull_configure+0x3c0>)
 80074d4:	4620      	mov	r0, r4
 80074d6:	f7fe f991 	bl	80057fc <dwt_read32bitoffsetreg>
 80074da:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 80074de:	f020 001f 	bic.w	r0, r0, #31
 80074e2:	f1b9 0f09 	cmp.w	r9, #9
 80074e6:	bf08      	it	eq
 80074e8:	f040 0001 	orreq.w	r0, r0, #1
 80074ec:	792a      	ldrb	r2, [r5, #4]
 80074ee:	0212      	lsls	r2, r2, #8
 80074f0:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 80074f4:	78eb      	ldrb	r3, [r5, #3]
 80074f6:	00db      	lsls	r3, r3, #3
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	431a      	orrs	r2, r3
 80074fc:	796b      	ldrb	r3, [r5, #5]
 80074fe:	005b      	lsls	r3, r3, #1
 8007500:	f003 0306 	and.w	r3, r3, #6
 8007504:	4313      	orrs	r3, r2
 8007506:	4303      	orrs	r3, r0
 8007508:	2200      	movs	r2, #0
 800750a:	4981      	ldr	r1, [pc, #516]	; (8007710 <ull_configure+0x3c0>)
 800750c:	4620      	mov	r0, r4
 800750e:	f7fe feb7 	bl	8006280 <dwt_write32bitoffsetreg>
 8007512:	79aa      	ldrb	r2, [r5, #6]
 8007514:	786b      	ldrb	r3, [r5, #1]
 8007516:	031b      	lsls	r3, r3, #12
 8007518:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800751c:	9300      	str	r3, [sp, #0]
 800751e:	f46f 4374 	mvn.w	r3, #62464	; 0xf400
 8007522:	2200      	movs	r2, #0
 8007524:	2124      	movs	r1, #36	; 0x24
 8007526:	4620      	mov	r0, r4
 8007528:	f7ff fa3c 	bl	80069a4 <dwt_modify32bitoffsetreg>
 800752c:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 8007530:	b923      	cbnz	r3, 800753c <ull_configure+0x1ec>
 8007532:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8007536:	726b      	strb	r3, [r5, #9]
 8007538:	2300      	movs	r3, #0
 800753a:	72ab      	strb	r3, [r5, #10]
 800753c:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 8007540:	2202      	movs	r2, #2
 8007542:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8007546:	4620      	mov	r0, r4
 8007548:	f7fe fd99 	bl	800607e <dwt_write16bitoffsetreg>
 800754c:	2202      	movs	r2, #2
 800754e:	4971      	ldr	r1, [pc, #452]	; (8007714 <ull_configure+0x3c4>)
 8007550:	4620      	mov	r0, r4
 8007552:	f7fe f97b 	bl	800584c <dwt_read8bitoffsetreg>
 8007556:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007558:	7c1b      	ldrb	r3, [r3, #16]
 800755a:	454b      	cmp	r3, r9
 800755c:	f000 809f 	beq.w	800769e <ull_configure+0x34e>
 8007560:	2803      	cmp	r0, #3
 8007562:	f000 80a0 	beq.w	80076a6 <ull_configure+0x356>
 8007566:	f1b9 0f09 	cmp.w	r9, #9
 800756a:	f000 80a1 	beq.w	80076b0 <ull_configure+0x360>
 800756e:	4b6a      	ldr	r3, [pc, #424]	; (8007718 <ull_configure+0x3c8>)
 8007570:	2200      	movs	r2, #0
 8007572:	496a      	ldr	r1, [pc, #424]	; (800771c <ull_configure+0x3cc>)
 8007574:	4620      	mov	r0, r4
 8007576:	f7fe fe83 	bl	8006280 <dwt_write32bitoffsetreg>
 800757a:	f641 733c 	movw	r3, #7996	; 0x1f3c
 800757e:	2200      	movs	r2, #0
 8007580:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 8007584:	4620      	mov	r0, r4
 8007586:	f7fe fd7a 	bl	800607e <dwt_write16bitoffsetreg>
 800758a:	2314      	movs	r3, #20
 800758c:	2201      	movs	r2, #1
 800758e:	4964      	ldr	r1, [pc, #400]	; (8007720 <ull_configure+0x3d0>)
 8007590:	4620      	mov	r0, r4
 8007592:	f7fe fd22 	bl	8005fda <dwt_write8bitoffsetreg>
 8007596:	230e      	movs	r3, #14
 8007598:	2202      	movs	r2, #2
 800759a:	4962      	ldr	r1, [pc, #392]	; (8007724 <ull_configure+0x3d4>)
 800759c:	4620      	mov	r0, r4
 800759e:	f7fe fd1c 	bl	8005fda <dwt_write8bitoffsetreg>
 80075a2:	2381      	movs	r3, #129	; 0x81
 80075a4:	2200      	movs	r2, #0
 80075a6:	4960      	ldr	r1, [pc, #384]	; (8007728 <ull_configure+0x3d8>)
 80075a8:	4620      	mov	r0, r4
 80075aa:	f7fe fd16 	bl	8005fda <dwt_write8bitoffsetreg>
 80075ae:	2302      	movs	r3, #2
 80075b0:	2200      	movs	r2, #0
 80075b2:	2144      	movs	r1, #68	; 0x44
 80075b4:	4620      	mov	r0, r4
 80075b6:	f7fe fd10 	bl	8005fda <dwt_write8bitoffsetreg>
 80075ba:	2101      	movs	r1, #1
 80075bc:	4620      	mov	r0, r4
 80075be:	f7ff fc99 	bl	8006ef4 <ull_setdwstate>
 80075c2:	f04f 0b32 	mov.w	fp, #50	; 0x32
 80075c6:	f04f 0814 	mov.w	r8, #20
 80075ca:	2700      	movs	r7, #0
 80075cc:	2644      	movs	r6, #68	; 0x44
 80075ce:	4640      	mov	r0, r8
 80075d0:	f7f9 ffc3 	bl	800155a <deca_usleep>
 80075d4:	463a      	mov	r2, r7
 80075d6:	4631      	mov	r1, r6
 80075d8:	4620      	mov	r0, r4
 80075da:	f7fe f937 	bl	800584c <dwt_read8bitoffsetreg>
 80075de:	f010 0f02 	tst.w	r0, #2
 80075e2:	f040 80ab 	bne.w	800773c <ull_configure+0x3ec>
 80075e6:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80075ea:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 80075ee:	d1ee      	bne.n	80075ce <ull_configure+0x27e>
 80075f0:	f06f 0001 	mvn.w	r0, #1
 80075f4:	e0cf      	b.n	8007796 <ull_configure+0x446>
 80075f6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80075f8:	8a53      	ldrh	r3, [r2, #18]
 80075fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80075fe:	8253      	strh	r3, [r2, #18]
 8007600:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 800760a:	2200      	movs	r2, #0
 800760c:	493d      	ldr	r1, [pc, #244]	; (8007704 <ull_configure+0x3b4>)
 800760e:	4620      	mov	r0, r4
 8007610:	f7ff f9c8 	bl	80069a4 <dwt_modify32bitoffsetreg>
 8007614:	f240 3306 	movw	r3, #774	; 0x306
 8007618:	2200      	movs	r2, #0
 800761a:	4944      	ldr	r1, [pc, #272]	; (800772c <ull_configure+0x3dc>)
 800761c:	4620      	mov	r0, r4
 800761e:	f7fe fe2f 	bl	8006280 <dwt_write32bitoffsetreg>
 8007622:	2300      	movs	r3, #0
 8007624:	461a      	mov	r2, r3
 8007626:	f04f 110e 	mov.w	r1, #917518	; 0xe000e
 800762a:	4620      	mov	r0, r4
 800762c:	f7fe fe28 	bl	8006280 <dwt_write32bitoffsetreg>
 8007630:	4b3f      	ldr	r3, [pc, #252]	; (8007730 <ull_configure+0x3e0>)
 8007632:	2200      	movs	r2, #0
 8007634:	4930      	ldr	r1, [pc, #192]	; (80076f8 <ull_configure+0x3a8>)
 8007636:	4620      	mov	r0, r4
 8007638:	f7fe fe22 	bl	8006280 <dwt_write32bitoffsetreg>
 800763c:	239d      	movs	r3, #157	; 0x9d
 800763e:	9300      	str	r3, [sp, #0]
 8007640:	4b2e      	ldr	r3, [pc, #184]	; (80076fc <ull_configure+0x3ac>)
 8007642:	2200      	movs	r2, #0
 8007644:	492e      	ldr	r1, [pc, #184]	; (8007700 <ull_configure+0x3b0>)
 8007646:	4620      	mov	r0, r4
 8007648:	f7ff f9ac 	bl	80069a4 <dwt_modify32bitoffsetreg>
 800764c:	e719      	b.n	8007482 <ull_configure+0x132>
 800764e:	7b2a      	ldrb	r2, [r5, #12]
 8007650:	4b28      	ldr	r3, [pc, #160]	; (80076f4 <ull_configure+0x3a4>)
 8007652:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007656:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 800765a:	fb02 f203 	mul.w	r2, r2, r3
 800765e:	0c93      	lsrs	r3, r2, #18
 8007660:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 8007664:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007668:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800766c:	bf28      	it	cs
 800766e:	3301      	addcs	r3, #1
 8007670:	b29b      	uxth	r3, r3
 8007672:	e6df      	b.n	8007434 <ull_configure+0xe4>
 8007674:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	f24e 73ff 	movw	r3, #59391	; 0xe7ff
 800767e:	2200      	movs	r2, #0
 8007680:	4920      	ldr	r1, [pc, #128]	; (8007704 <ull_configure+0x3b4>)
 8007682:	4620      	mov	r0, r4
 8007684:	f7ff fd2a 	bl	80070dc <dwt_modify16bitoffsetreg>
 8007688:	e6fb      	b.n	8007482 <ull_configure+0x132>
 800768a:	78ab      	ldrb	r3, [r5, #2]
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	23ec      	movs	r3, #236	; 0xec
 8007690:	2200      	movs	r2, #0
 8007692:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8007696:	4620      	mov	r0, r4
 8007698:	f7ff fb6e 	bl	8006d78 <dwt_modify8bitoffsetreg>
 800769c:	e700      	b.n	80074a0 <ull_configure+0x150>
 800769e:	2803      	cmp	r0, #3
 80076a0:	f47f af61 	bne.w	8007566 <ull_configure+0x216>
 80076a4:	e04d      	b.n	8007742 <ull_configure+0x3f2>
 80076a6:	2102      	movs	r1, #2
 80076a8:	4620      	mov	r0, r4
 80076aa:	f7ff fc23 	bl	8006ef4 <ull_setdwstate>
 80076ae:	e75a      	b.n	8007566 <ull_configure+0x216>
 80076b0:	4b20      	ldr	r3, [pc, #128]	; (8007734 <ull_configure+0x3e4>)
 80076b2:	2200      	movs	r2, #0
 80076b4:	4919      	ldr	r1, [pc, #100]	; (800771c <ull_configure+0x3cc>)
 80076b6:	4620      	mov	r0, r4
 80076b8:	f7fe fde2 	bl	8006280 <dwt_write32bitoffsetreg>
 80076bc:	f640 733c 	movw	r3, #3900	; 0xf3c
 80076c0:	2200      	movs	r2, #0
 80076c2:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 80076c6:	4620      	mov	r0, r4
 80076c8:	f7fe fcd9 	bl	800607e <dwt_write16bitoffsetreg>
 80076cc:	e75d      	b.n	800758a <ull_configure+0x23a>
 80076ce:	fa4f f189 	sxtb.w	r1, r9
 80076d2:	4620      	mov	r0, r4
 80076d4:	f7ff f98a 	bl	80069ec <_dwt_kick_dgc_on_wakeup>
 80076d8:	e040      	b.n	800775c <ull_configure+0x40c>
 80076da:	2200      	movs	r2, #0
 80076dc:	9200      	str	r2, [sp, #0]
 80076de:	23fe      	movs	r3, #254	; 0xfe
 80076e0:	4915      	ldr	r1, [pc, #84]	; (8007738 <ull_configure+0x3e8>)
 80076e2:	4620      	mov	r0, r4
 80076e4:	f7ff fb48 	bl	8006d78 <dwt_modify8bitoffsetreg>
 80076e8:	e042      	b.n	8007770 <ull_configure+0x420>
 80076ea:	bf00      	nop
 80076ec:	00026668 	.word	0x00026668
 80076f0:	fffc4fcf 	.word	0xfffc4fcf
 80076f4:	08015e94 	.word	0x08015e94
 80076f8:	000e0012 	.word	0x000e0012
 80076fc:	bfffff00 	.word	0xbfffff00
 8007700:	000e0016 	.word	0x000e0016
 8007704:	000b0008 	.word	0x000b0008
 8007708:	af5f35cc 	.word	0xaf5f35cc
 800770c:	0006000c 	.word	0x0006000c
 8007710:	00010014 	.word	0x00010014
 8007714:	000f0030 	.word	0x000f0030
 8007718:	1c071134 	.word	0x1c071134
 800771c:	0007001c 	.word	0x0007001c
 8007720:	00070050 	.word	0x00070050
 8007724:	00070018 	.word	0x00070018
 8007728:	00090008 	.word	0x00090008
 800772c:	000e000c 	.word	0x000e000c
 8007730:	000c5a0a 	.word	0x000c5a0a
 8007734:	1c010034 	.word	0x1c010034
 8007738:	00030018 	.word	0x00030018
 800773c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800773e:	f883 9010 	strb.w	r9, [r3, #16]
 8007742:	792b      	ldrb	r3, [r5, #4]
 8007744:	3b09      	subs	r3, #9
 8007746:	b2db      	uxtb	r3, r3
 8007748:	2b0f      	cmp	r3, #15
 800774a:	d8c6      	bhi.n	80076da <ull_configure+0x38a>
 800774c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800774e:	7a5b      	ldrb	r3, [r3, #9]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d0bc      	beq.n	80076ce <ull_configure+0x37e>
 8007754:	4649      	mov	r1, r9
 8007756:	4620      	mov	r0, r4
 8007758:	f7fe ffae 	bl	80066b8 <ull_configmrxlut>
 800775c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8007760:	9300      	str	r3, [sp, #0]
 8007762:	f248 13ff 	movw	r3, #33279	; 0x81ff
 8007766:	2200      	movs	r2, #0
 8007768:	490c      	ldr	r1, [pc, #48]	; (800779c <ull_configure+0x44c>)
 800776a:	4620      	mov	r0, r4
 800776c:	f7ff fcb6 	bl	80070dc <dwt_modify16bitoffsetreg>
 8007770:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8007774:	bfcc      	ite	gt
 8007776:	f04f 5300 	movgt.w	r3, #536870912	; 0x20000000
 800777a:	f04f 53a0 	movle.w	r3, #335544320	; 0x14000000
 800777e:	9300      	str	r3, [sp, #0]
 8007780:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8007784:	2200      	movs	r2, #0
 8007786:	4906      	ldr	r1, [pc, #24]	; (80077a0 <ull_configure+0x450>)
 8007788:	4620      	mov	r0, r4
 800778a:	f7ff f90b 	bl	80069a4 <dwt_modify32bitoffsetreg>
 800778e:	2101      	movs	r1, #1
 8007790:	4620      	mov	r0, r4
 8007792:	f7ff fd27 	bl	80071e4 <ull_pgf_cal>
 8007796:	b003      	add	sp, #12
 8007798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800779c:	00030018 	.word	0x00030018
 80077a0:	00060010 	.word	0x00060010

080077a4 <dwt_ioctl>:
 80077a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a8:	b091      	sub	sp, #68	; 0x44
 80077aa:	4606      	mov	r6, r0
 80077ac:	4615      	mov	r5, r2
 80077ae:	461c      	mov	r4, r3
 80077b0:	299c      	cmp	r1, #156	; 0x9c
 80077b2:	f200 809f 	bhi.w	80078f4 <dwt_ioctl+0x150>
 80077b6:	e8df f011 	tbh	[pc, r1, lsl #1]
 80077ba:	0a6d      	.short	0x0a6d
 80077bc:	00a30a78 	.word	0x00a30a78
 80077c0:	00be00a7 	.word	0x00be00a7
 80077c4:	018e0148 	.word	0x018e0148
 80077c8:	0152016b 	.word	0x0152016b
 80077cc:	01a9019e 	.word	0x01a9019e
 80077d0:	01b901b1 	.word	0x01b901b1
 80077d4:	01c901c1 	.word	0x01c901c1
 80077d8:	01d501d1 	.word	0x01d501d1
 80077dc:	026e01dd 	.word	0x026e01dd
 80077e0:	0281027c 	.word	0x0281027c
 80077e4:	0290028b 	.word	0x0290028b
 80077e8:	029e0295 	.word	0x029e0295
 80077ec:	030902a3 	.word	0x030902a3
 80077f0:	0326031b 	.word	0x0326031b
 80077f4:	033b0331 	.word	0x033b0331
 80077f8:	03690373 	.word	0x03690373
 80077fc:	0345035f 	.word	0x0345035f
 8007800:	03c10352 	.word	0x03c10352
 8007804:	022b01f8 	.word	0x022b01f8
 8007808:	02410239 	.word	0x02410239
 800780c:	09960255 	.word	0x09960255
 8007810:	0382099b 	.word	0x0382099b
 8007814:	03e303df 	.word	0x03e303df
 8007818:	03f103ec 	.word	0x03f103ec
 800781c:	040503fb 	.word	0x040503fb
 8007820:	0437040d 	.word	0x0437040d
 8007824:	044e0443 	.word	0x044e0443
 8007828:	04590378 	.word	0x04590378
 800782c:	04740462 	.word	0x04740462
 8007830:	049e048d 	.word	0x049e048d
 8007834:	04ea04e0 	.word	0x04ea04e0
 8007838:	051a050b 	.word	0x051a050b
 800783c:	05230535 	.word	0x05230535
 8007840:	05970551 	.word	0x05970551
 8007844:	05cf05af 	.word	0x05cf05af
 8007848:	05f805e4 	.word	0x05f805e4
 800784c:	061d0601 	.word	0x061d0601
 8007850:	0773060a 	.word	0x0773060a
 8007854:	07ed079f 	.word	0x07ed079f
 8007858:	07fe07f3 	.word	0x07fe07f3
 800785c:	08370817 	.word	0x08370817
 8007860:	084b0841 	.word	0x084b0841
 8007864:	08820879 	.word	0x08820879
 8007868:	08910888 	.word	0x08910888
 800786c:	08ab089e 	.word	0x08ab089e
 8007870:	08be08b5 	.word	0x08be08b5
 8007874:	08d208c7 	.word	0x08d208c7
 8007878:	08e308dd 	.word	0x08e308dd
 800787c:	09110906 	.word	0x09110906
 8007880:	0945091c 	.word	0x0945091c
 8007884:	09720967 	.word	0x09720967
 8007888:	09a1098b 	.word	0x09a1098b
 800788c:	0a200a16 	.word	0x0a200a16
 8007890:	0a800a2b 	.word	0x0a800a2b
 8007894:	0a620a35 	.word	0x0a620a35
 8007898:	09df0791 	.word	0x09df0791
 800789c:	0aee0a00 	.word	0x0aee0a00
 80078a0:	0a8d0ae3 	.word	0x0a8d0ae3
 80078a4:	0aa30a98 	.word	0x0aa30a98
 80078a8:	0ab90aae 	.word	0x0ab90aae
 80078ac:	0acf0ac4 	.word	0x0acf0ac4
 80078b0:	0bd80ad8 	.word	0x0bd80ad8
 80078b4:	0c4d0c12 	.word	0x0c4d0c12
 80078b8:	0d290c70 	.word	0x0d290c70
 80078bc:	0b190d3e 	.word	0x0b190d3e
 80078c0:	009d009d 	.word	0x009d009d
 80078c4:	009d009d 	.word	0x009d009d
 80078c8:	009d009d 	.word	0x009d009d
 80078cc:	009d009d 	.word	0x009d009d
 80078d0:	009d009d 	.word	0x009d009d
 80078d4:	009d009d 	.word	0x009d009d
 80078d8:	009d009d 	.word	0x009d009d
 80078dc:	009d009d 	.word	0x009d009d
 80078e0:	009d009d 	.word	0x009d009d
 80078e4:	0c87009d 	.word	0x0c87009d
 80078e8:	0dce0ca5 	.word	0x0dce0ca5
 80078ec:	0ce40cef 	.word	0x0ce40cef
 80078f0:	0cfa0d03 	.word	0x0cfa0d03
 80078f4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80078f8:	4628      	mov	r0, r5
 80078fa:	b011      	add	sp, #68	; 0x44
 80078fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007900:	6843      	ldr	r3, [r0, #4]
 8007902:	4798      	blx	r3
 8007904:	2500      	movs	r5, #0
 8007906:	e7f7      	b.n	80078f8 <dwt_ioctl+0x154>
 8007908:	2202      	movs	r2, #2
 800790a:	49b7      	ldr	r1, [pc, #732]	; (8007be8 <dwt_ioctl+0x444>)
 800790c:	f7fd ff9e 	bl	800584c <dwt_read8bitoffsetreg>
 8007910:	2803      	cmp	r0, #3
 8007912:	d801      	bhi.n	8007918 <dwt_ioctl+0x174>
 8007914:	2500      	movs	r5, #0
 8007916:	e7ef      	b.n	80078f8 <dwt_ioctl+0x154>
 8007918:	f7f9 fdf6 	bl	8001508 <decamutexon>
 800791c:	4604      	mov	r4, r0
 800791e:	2500      	movs	r5, #0
 8007920:	9500      	str	r5, [sp, #0]
 8007922:	462b      	mov	r3, r5
 8007924:	462a      	mov	r2, r5
 8007926:	4629      	mov	r1, r5
 8007928:	4630      	mov	r0, r6
 800792a:	f7fe fb4b 	bl	8005fc4 <dwt_writetodevice>
 800792e:	4620      	mov	r0, r4
 8007930:	f7f9 fdfb 	bl	800152a <decamutexoff>
 8007934:	e7e0      	b.n	80078f8 <dwt_ioctl+0x154>
 8007936:	2c00      	cmp	r4, #0
 8007938:	f001 8510 	beq.w	800935c <dwt_ioctl+0x1bb8>
 800793c:	7824      	ldrb	r4, [r4, #0]
 800793e:	f014 0f1d 	tst.w	r4, #29
 8007942:	d065      	beq.n	8007a10 <dwt_ioctl+0x26c>
 8007944:	f014 0f01 	tst.w	r4, #1
 8007948:	d026      	beq.n	8007998 <dwt_ioctl+0x1f4>
 800794a:	f014 0f02 	tst.w	r4, #2
 800794e:	f04f 0200 	mov.w	r2, #0
 8007952:	9200      	str	r2, [sp, #0]
 8007954:	4613      	mov	r3, r2
 8007956:	bf14      	ite	ne
 8007958:	210d      	movne	r1, #13
 800795a:	2103      	moveq	r1, #3
 800795c:	f7fe fb32 	bl	8005fc4 <dwt_writetodevice>
 8007960:	2203      	movs	r2, #3
 8007962:	2144      	movs	r1, #68	; 0x44
 8007964:	4630      	mov	r0, r6
 8007966:	f7fd ff71 	bl	800584c <dwt_read8bitoffsetreg>
 800796a:	f010 0f08 	tst.w	r0, #8
 800796e:	d145      	bne.n	80079fc <dwt_ioctl+0x258>
 8007970:	2200      	movs	r2, #0
 8007972:	499d      	ldr	r1, [pc, #628]	; (8007be8 <dwt_ioctl+0x444>)
 8007974:	4630      	mov	r0, r6
 8007976:	f7fd ff41 	bl	80057fc <dwt_read32bitoffsetreg>
 800797a:	f5b0 2f50 	cmp.w	r0, #851968	; 0xd0000
 800797e:	bf18      	it	ne
 8007980:	2500      	movne	r5, #0
 8007982:	d1b9      	bne.n	80078f8 <dwt_ioctl+0x154>
 8007984:	2100      	movs	r1, #0
 8007986:	9100      	str	r1, [sp, #0]
 8007988:	460b      	mov	r3, r1
 800798a:	460a      	mov	r2, r1
 800798c:	4630      	mov	r0, r6
 800798e:	f7fe fb19 	bl	8005fc4 <dwt_writetodevice>
 8007992:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007996:	e7af      	b.n	80078f8 <dwt_ioctl+0x154>
 8007998:	f014 0f08 	tst.w	r4, #8
 800799c:	d10e      	bne.n	80079bc <dwt_ioctl+0x218>
 800799e:	f014 0f10 	tst.w	r4, #16
 80079a2:	d11b      	bne.n	80079dc <dwt_ioctl+0x238>
 80079a4:	f014 0f02 	tst.w	r4, #2
 80079a8:	f04f 0200 	mov.w	r2, #0
 80079ac:	9200      	str	r2, [sp, #0]
 80079ae:	4613      	mov	r3, r2
 80079b0:	bf14      	ite	ne
 80079b2:	2110      	movne	r1, #16
 80079b4:	2109      	moveq	r1, #9
 80079b6:	f7fe fb05 	bl	8005fc4 <dwt_writetodevice>
 80079ba:	e7d1      	b.n	8007960 <dwt_ioctl+0x1bc>
 80079bc:	2100      	movs	r1, #0
 80079be:	f7fe fdd3 	bl	8006568 <_dwt_adjust_delaytime>
 80079c2:	f014 0f02 	tst.w	r4, #2
 80079c6:	f04f 0200 	mov.w	r2, #0
 80079ca:	9200      	str	r2, [sp, #0]
 80079cc:	4613      	mov	r3, r2
 80079ce:	bf14      	ite	ne
 80079d0:	210f      	movne	r1, #15
 80079d2:	2107      	moveq	r1, #7
 80079d4:	4630      	mov	r0, r6
 80079d6:	f7fe faf5 	bl	8005fc4 <dwt_writetodevice>
 80079da:	e7c1      	b.n	8007960 <dwt_ioctl+0x1bc>
 80079dc:	2101      	movs	r1, #1
 80079de:	f7fe fdc3 	bl	8006568 <_dwt_adjust_delaytime>
 80079e2:	f014 0f02 	tst.w	r4, #2
 80079e6:	f04f 0200 	mov.w	r2, #0
 80079ea:	9200      	str	r2, [sp, #0]
 80079ec:	4613      	mov	r3, r2
 80079ee:	bf14      	ite	ne
 80079f0:	210e      	movne	r1, #14
 80079f2:	2105      	moveq	r1, #5
 80079f4:	4630      	mov	r0, r6
 80079f6:	f7fe fae5 	bl	8005fc4 <dwt_writetodevice>
 80079fa:	e7b1      	b.n	8007960 <dwt_ioctl+0x1bc>
 80079fc:	2100      	movs	r1, #0
 80079fe:	9100      	str	r1, [sp, #0]
 8007a00:	460b      	mov	r3, r1
 8007a02:	460a      	mov	r2, r1
 8007a04:	4630      	mov	r0, r6
 8007a06:	f7fe fadd 	bl	8005fc4 <dwt_writetodevice>
 8007a0a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007a0e:	e773      	b.n	80078f8 <dwt_ioctl+0x154>
 8007a10:	f014 0f20 	tst.w	r4, #32
 8007a14:	d00c      	beq.n	8007a30 <dwt_ioctl+0x28c>
 8007a16:	f014 0f02 	tst.w	r4, #2
 8007a1a:	f04f 0500 	mov.w	r5, #0
 8007a1e:	9500      	str	r5, [sp, #0]
 8007a20:	462b      	mov	r3, r5
 8007a22:	462a      	mov	r2, r5
 8007a24:	bf14      	ite	ne
 8007a26:	2111      	movne	r1, #17
 8007a28:	210b      	moveq	r1, #11
 8007a2a:	f7fe facb 	bl	8005fc4 <dwt_writetodevice>
 8007a2e:	e763      	b.n	80078f8 <dwt_ioctl+0x154>
 8007a30:	f014 0f02 	tst.w	r4, #2
 8007a34:	f04f 0500 	mov.w	r5, #0
 8007a38:	9500      	str	r5, [sp, #0]
 8007a3a:	462b      	mov	r3, r5
 8007a3c:	462a      	mov	r2, r5
 8007a3e:	bf14      	ite	ne
 8007a40:	210c      	movne	r1, #12
 8007a42:	2101      	moveq	r1, #1
 8007a44:	f7fe fabe 	bl	8005fc4 <dwt_writetodevice>
 8007a48:	e756      	b.n	80078f8 <dwt_ioctl+0x154>
 8007a4a:	2c00      	cmp	r4, #0
 8007a4c:	f001 8489 	beq.w	8009362 <dwt_ioctl+0x1bbe>
 8007a50:	6823      	ldr	r3, [r4, #0]
 8007a52:	2200      	movs	r2, #0
 8007a54:	212c      	movs	r1, #44	; 0x2c
 8007a56:	f7fe fc13 	bl	8006280 <dwt_write32bitoffsetreg>
 8007a5a:	2500      	movs	r5, #0
 8007a5c:	e74c      	b.n	80078f8 <dwt_ioctl+0x154>
 8007a5e:	6823      	ldr	r3, [r4, #0]
 8007a60:	2200      	movs	r2, #0
 8007a62:	4962      	ldr	r1, [pc, #392]	; (8007bec <dwt_ioctl+0x448>)
 8007a64:	f7fe fc0c 	bl	8006280 <dwt_write32bitoffsetreg>
 8007a68:	6863      	ldr	r3, [r4, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	4960      	ldr	r1, [pc, #384]	; (8007bf0 <dwt_ioctl+0x44c>)
 8007a6e:	4630      	mov	r0, r6
 8007a70:	f7fe fc06 	bl	8006280 <dwt_write32bitoffsetreg>
 8007a74:	68a3      	ldr	r3, [r4, #8]
 8007a76:	2200      	movs	r2, #0
 8007a78:	495e      	ldr	r1, [pc, #376]	; (8007bf4 <dwt_ioctl+0x450>)
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	f7fe fc00 	bl	8006280 <dwt_write32bitoffsetreg>
 8007a80:	68e3      	ldr	r3, [r4, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	495c      	ldr	r1, [pc, #368]	; (8007bf8 <dwt_ioctl+0x454>)
 8007a86:	4630      	mov	r0, r6
 8007a88:	f7fe fbfa 	bl	8006280 <dwt_write32bitoffsetreg>
 8007a8c:	2500      	movs	r5, #0
 8007a8e:	e733      	b.n	80078f8 <dwt_ioctl+0x154>
 8007a90:	2c00      	cmp	r4, #0
 8007a92:	f001 8469 	beq.w	8009368 <dwt_ioctl+0x1bc4>
 8007a96:	8823      	ldrh	r3, [r4, #0]
 8007a98:	6865      	ldr	r5, [r4, #4]
 8007a9a:	2d03      	cmp	r5, #3
 8007a9c:	f201 8467 	bhi.w	800936e <dwt_ioctl+0x1bca>
 8007aa0:	e8df f005 	tbb	[pc, r5]
 8007aa4:	130d0702 	.word	0x130d0702
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	4954      	ldr	r1, [pc, #336]	; (8007bfc <dwt_ioctl+0x458>)
 8007aac:	f7fe fae7 	bl	800607e <dwt_write16bitoffsetreg>
 8007ab0:	e722      	b.n	80078f8 <dwt_ioctl+0x154>
 8007ab2:	2202      	movs	r2, #2
 8007ab4:	4951      	ldr	r1, [pc, #324]	; (8007bfc <dwt_ioctl+0x458>)
 8007ab6:	f7fe fae2 	bl	800607e <dwt_write16bitoffsetreg>
 8007aba:	2500      	movs	r5, #0
 8007abc:	e71c      	b.n	80078f8 <dwt_ioctl+0x154>
 8007abe:	2200      	movs	r2, #0
 8007ac0:	494f      	ldr	r1, [pc, #316]	; (8007c00 <dwt_ioctl+0x45c>)
 8007ac2:	f7fe fadc 	bl	800607e <dwt_write16bitoffsetreg>
 8007ac6:	2500      	movs	r5, #0
 8007ac8:	e716      	b.n	80078f8 <dwt_ioctl+0x154>
 8007aca:	2202      	movs	r2, #2
 8007acc:	494c      	ldr	r1, [pc, #304]	; (8007c00 <dwt_ioctl+0x45c>)
 8007ace:	f7fe fad6 	bl	800607e <dwt_write16bitoffsetreg>
 8007ad2:	2500      	movs	r5, #0
 8007ad4:	e710      	b.n	80078f8 <dwt_ioctl+0x154>
 8007ad6:	2c00      	cmp	r4, #0
 8007ad8:	f001 844c 	beq.w	8009374 <dwt_ioctl+0x1bd0>
 8007adc:	7823      	ldrb	r3, [r4, #0]
 8007ade:	005b      	lsls	r3, r3, #1
 8007ae0:	f003 0306 	and.w	r3, r3, #6
 8007ae4:	9300      	str	r3, [sp, #0]
 8007ae6:	f06f 0306 	mvn.w	r3, #6
 8007aea:	2200      	movs	r2, #0
 8007aec:	4945      	ldr	r1, [pc, #276]	; (8007c04 <dwt_ioctl+0x460>)
 8007aee:	f7fe ff59 	bl	80069a4 <dwt_modify32bitoffsetreg>
 8007af2:	2500      	movs	r5, #0
 8007af4:	e700      	b.n	80078f8 <dwt_ioctl+0x154>
 8007af6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b00:	2200      	movs	r2, #0
 8007b02:	4941      	ldr	r1, [pc, #260]	; (8007c08 <dwt_ioctl+0x464>)
 8007b04:	f7fe ff4e 	bl	80069a4 <dwt_modify32bitoffsetreg>
 8007b08:	2500      	movs	r5, #0
 8007b0a:	e6f5      	b.n	80078f8 <dwt_ioctl+0x154>
 8007b0c:	2c00      	cmp	r4, #0
 8007b0e:	f001 8434 	beq.w	800937a <dwt_ioctl+0x1bd6>
 8007b12:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007b14:	7b5b      	ldrb	r3, [r3, #13]
 8007b16:	7023      	strb	r3, [r4, #0]
 8007b18:	2500      	movs	r5, #0
 8007b1a:	e6ed      	b.n	80078f8 <dwt_ioctl+0x154>
 8007b1c:	2c00      	cmp	r4, #0
 8007b1e:	f001 842f 	beq.w	8009380 <dwt_ioctl+0x1bdc>
 8007b22:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007b24:	7a9b      	ldrb	r3, [r3, #10]
 8007b26:	7023      	strb	r3, [r4, #0]
 8007b28:	2500      	movs	r5, #0
 8007b2a:	e6e5      	b.n	80078f8 <dwt_ioctl+0x154>
 8007b2c:	2c00      	cmp	r4, #0
 8007b2e:	f001 842a 	beq.w	8009386 <dwt_ioctl+0x1be2>
 8007b32:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007b34:	7adb      	ldrb	r3, [r3, #11]
 8007b36:	7023      	strb	r3, [r4, #0]
 8007b38:	2500      	movs	r5, #0
 8007b3a:	e6dd      	b.n	80078f8 <dwt_ioctl+0x154>
 8007b3c:	2c00      	cmp	r4, #0
 8007b3e:	f001 8425 	beq.w	800938c <dwt_ioctl+0x1be8>
 8007b42:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	6023      	str	r3, [r4, #0]
 8007b48:	2500      	movs	r5, #0
 8007b4a:	e6d5      	b.n	80078f8 <dwt_ioctl+0x154>
 8007b4c:	2c00      	cmp	r4, #0
 8007b4e:	f001 8420 	beq.w	8009392 <dwt_ioctl+0x1bee>
 8007b52:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	6023      	str	r3, [r4, #0]
 8007b58:	2500      	movs	r5, #0
 8007b5a:	e6cd      	b.n	80078f8 <dwt_ioctl+0x154>
 8007b5c:	f7fe fb7e 	bl	800625c <ull_signal_rx_buff_free>
 8007b60:	2500      	movs	r5, #0
 8007b62:	e6c9      	b.n	80078f8 <dwt_ioctl+0x154>
 8007b64:	2c00      	cmp	r4, #0
 8007b66:	f001 8417 	beq.w	8009398 <dwt_ioctl+0x1bf4>
 8007b6a:	6821      	ldr	r1, [r4, #0]
 8007b6c:	f7fe fd24 	bl	80065b8 <ull_setrxaftertxdelay>
 8007b70:	2500      	movs	r5, #0
 8007b72:	e6c1      	b.n	80078f8 <dwt_ioctl+0x154>
 8007b74:	2c00      	cmp	r4, #0
 8007b76:	f001 8412 	beq.w	800939e <dwt_ioctl+0x1bfa>
 8007b7a:	7825      	ldrb	r5, [r4, #0]
 8007b7c:	b15d      	cbz	r5, 8007b96 <dwt_ioctl+0x3f2>
 8007b7e:	6864      	ldr	r4, [r4, #4]
 8007b80:	2340      	movs	r3, #64	; 0x40
 8007b82:	9300      	str	r3, [sp, #0]
 8007b84:	23ff      	movs	r3, #255	; 0xff
 8007b86:	2200      	movs	r2, #0
 8007b88:	2110      	movs	r1, #16
 8007b8a:	f7ff f8f5 	bl	8006d78 <dwt_modify8bitoffsetreg>
 8007b8e:	2d02      	cmp	r5, #2
 8007b90:	d107      	bne.n	8007ba2 <dwt_ioctl+0x3fe>
 8007b92:	60f4      	str	r4, [r6, #12]
 8007b94:	e005      	b.n	8007ba2 <dwt_ioctl+0x3fe>
 8007b96:	2200      	movs	r2, #0
 8007b98:	9200      	str	r2, [sp, #0]
 8007b9a:	23bf      	movs	r3, #191	; 0xbf
 8007b9c:	2110      	movs	r1, #16
 8007b9e:	f7ff f8eb 	bl	8006d78 <dwt_modify8bitoffsetreg>
 8007ba2:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8007ba4:	759d      	strb	r5, [r3, #22]
 8007ba6:	2500      	movs	r5, #0
 8007ba8:	e6a6      	b.n	80078f8 <dwt_ioctl+0x154>
 8007baa:	2c00      	cmp	r4, #0
 8007bac:	f001 83fa 	beq.w	80093a4 <dwt_ioctl+0x1c00>
 8007bb0:	6865      	ldr	r5, [r4, #4]
 8007bb2:	7823      	ldrb	r3, [r4, #0]
 8007bb4:	2203      	movs	r2, #3
 8007bb6:	4915      	ldr	r1, [pc, #84]	; (8007c0c <dwt_ioctl+0x468>)
 8007bb8:	f7fe fa0f 	bl	8005fda <dwt_write8bitoffsetreg>
 8007bbc:	b945      	cbnz	r5, 8007bd0 <dwt_ioctl+0x42c>
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	9200      	str	r2, [sp, #0]
 8007bc2:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8007bc6:	2110      	movs	r1, #16
 8007bc8:	4630      	mov	r0, r6
 8007bca:	f7ff fa87 	bl	80070dc <dwt_modify16bitoffsetreg>
 8007bce:	e693      	b.n	80078f8 <dwt_ioctl+0x154>
 8007bd0:	f44f 2381 	mov.w	r3, #264192	; 0x40800
 8007bd4:	9300      	str	r3, [sp, #0]
 8007bd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bda:	2200      	movs	r2, #0
 8007bdc:	2110      	movs	r1, #16
 8007bde:	4630      	mov	r0, r6
 8007be0:	f7fe fee0 	bl	80069a4 <dwt_modify32bitoffsetreg>
 8007be4:	2500      	movs	r5, #0
 8007be6:	e687      	b.n	80078f8 <dwt_ioctl+0x154>
 8007be8:	000f0030 	.word	0x000f0030
 8007bec:	00010054 	.word	0x00010054
 8007bf0:	00010058 	.word	0x00010058
 8007bf4:	0001005c 	.word	0x0001005c
 8007bf8:	00010060 	.word	0x00010060
 8007bfc:	00010018 	.word	0x00010018
 8007c00:	0001001c 	.word	0x0001001c
 8007c04:	00010014 	.word	0x00010014
 8007c08:	00110004 	.word	0x00110004
 8007c0c:	00010008 	.word	0x00010008
 8007c10:	2200      	movs	r2, #0
 8007c12:	4611      	mov	r1, r2
 8007c14:	f7fd fdf2 	bl	80057fc <dwt_read32bitoffsetreg>
 8007c18:	68b2      	ldr	r2, [r6, #8]
 8007c1a:	6813      	ldr	r3, [r2, #0]
 8007c1c:	4043      	eors	r3, r0
 8007c1e:	6852      	ldr	r2, [r2, #4]
 8007c20:	4213      	tst	r3, r2
 8007c22:	bf14      	ite	ne
 8007c24:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8007c28:	2500      	moveq	r5, #0
 8007c2a:	e665      	b.n	80078f8 <dwt_ioctl+0x154>
 8007c2c:	2c00      	cmp	r4, #0
 8007c2e:	f001 83bc 	beq.w	80093aa <dwt_ioctl+0x1c06>
 8007c32:	7821      	ldrb	r1, [r4, #0]
 8007c34:	f7ff f8b4 	bl	8006da0 <ull_configciadiag>
 8007c38:	2500      	movs	r5, #0
 8007c3a:	e65d      	b.n	80078f8 <dwt_ioctl+0x154>
 8007c3c:	b93a      	cbnz	r2, 8007c4e <dwt_ioctl+0x4aa>
 8007c3e:	2200      	movs	r2, #0
 8007c40:	9200      	str	r2, [sp, #0]
 8007c42:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8007c46:	49ae      	ldr	r1, [pc, #696]	; (8007f00 <dwt_ioctl+0x75c>)
 8007c48:	f7ff fa48 	bl	80070dc <dwt_modify16bitoffsetreg>
 8007c4c:	e654      	b.n	80078f8 <dwt_ioctl+0x154>
 8007c4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007c58:	2200      	movs	r2, #0
 8007c5a:	49a9      	ldr	r1, [pc, #676]	; (8007f00 <dwt_ioctl+0x75c>)
 8007c5c:	f7ff fa3e 	bl	80070dc <dwt_modify16bitoffsetreg>
 8007c60:	2500      	movs	r5, #0
 8007c62:	e649      	b.n	80078f8 <dwt_ioctl+0x154>
 8007c64:	f002 0201 	and.w	r2, r2, #1
 8007c68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007c6c:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8007c70:	2a00      	cmp	r2, #0
 8007c72:	bf08      	it	eq
 8007c74:	460b      	moveq	r3, r1
 8007c76:	02d2      	lsls	r2, r2, #11
 8007c78:	f015 0f02 	tst.w	r5, #2
 8007c7c:	bf12      	itee	ne
 8007c7e:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8007c82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c86:	b29b      	uxtheq	r3, r3
 8007c88:	9200      	str	r2, [sp, #0]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	499c      	ldr	r1, [pc, #624]	; (8007f00 <dwt_ioctl+0x75c>)
 8007c8e:	f7ff fa25 	bl	80070dc <dwt_modify16bitoffsetreg>
 8007c92:	2500      	movs	r5, #0
 8007c94:	e630      	b.n	80078f8 <dwt_ioctl+0x154>
 8007c96:	b92a      	cbnz	r2, 8007ca4 <dwt_ioctl+0x500>
 8007c98:	4b9a      	ldr	r3, [pc, #616]	; (8007f04 <dwt_ioctl+0x760>)
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	499a      	ldr	r1, [pc, #616]	; (8007f08 <dwt_ioctl+0x764>)
 8007c9e:	f7fe faef 	bl	8006280 <dwt_write32bitoffsetreg>
 8007ca2:	e629      	b.n	80078f8 <dwt_ioctl+0x154>
 8007ca4:	4b99      	ldr	r3, [pc, #612]	; (8007f0c <dwt_ioctl+0x768>)
 8007ca6:	2202      	movs	r2, #2
 8007ca8:	4997      	ldr	r1, [pc, #604]	; (8007f08 <dwt_ioctl+0x764>)
 8007caa:	f7fe fae9 	bl	8006280 <dwt_write32bitoffsetreg>
 8007cae:	2500      	movs	r5, #0
 8007cb0:	e622      	b.n	80078f8 <dwt_ioctl+0x154>
 8007cb2:	4611      	mov	r1, r2
 8007cb4:	f7fe fc96 	bl	80065e4 <ull_setlnapamode>
 8007cb8:	2500      	movs	r5, #0
 8007cba:	e61d      	b.n	80078f8 <dwt_ioctl+0x154>
 8007cbc:	2c00      	cmp	r4, #0
 8007cbe:	f001 8377 	beq.w	80093b0 <dwt_ioctl+0x1c0c>
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	4992      	ldr	r1, [pc, #584]	; (8007f10 <dwt_ioctl+0x76c>)
 8007cc6:	f7fd fdc1 	bl	800584c <dwt_read8bitoffsetreg>
 8007cca:	7020      	strb	r0, [r4, #0]
 8007ccc:	2500      	movs	r5, #0
 8007cce:	e613      	b.n	80078f8 <dwt_ioctl+0x154>
 8007cd0:	4621      	mov	r1, r4
 8007cd2:	f7fe fca9 	bl	8006628 <ull_configurestskey>
 8007cd6:	2500      	movs	r5, #0
 8007cd8:	e60e      	b.n	80078f8 <dwt_ioctl+0x154>
 8007cda:	4621      	mov	r1, r4
 8007cdc:	f7fe fcc8 	bl	8006670 <ull_configurestsiv>
 8007ce0:	2500      	movs	r5, #0
 8007ce2:	e609      	b.n	80078f8 <dwt_ioctl+0x154>
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	23ff      	movs	r3, #255	; 0xff
 8007cea:	2200      	movs	r2, #0
 8007cec:	4989      	ldr	r1, [pc, #548]	; (8007f14 <dwt_ioctl+0x770>)
 8007cee:	f7ff f843 	bl	8006d78 <dwt_modify8bitoffsetreg>
 8007cf2:	2500      	movs	r5, #0
 8007cf4:	e600      	b.n	80078f8 <dwt_ioctl+0x154>
 8007cf6:	4611      	mov	r1, r2
 8007cf8:	f7fe fcde 	bl	80066b8 <ull_configmrxlut>
 8007cfc:	2500      	movs	r5, #0
 8007cfe:	e5fb      	b.n	80078f8 <dwt_ioctl+0x154>
 8007d00:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007d02:	7a1b      	ldrb	r3, [r3, #8]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d137      	bne.n	8007d78 <dwt_ioctl+0x5d4>
 8007d08:	2314      	movs	r3, #20
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	4982      	ldr	r1, [pc, #520]	; (8007f18 <dwt_ioctl+0x774>)
 8007d0e:	4630      	mov	r0, r6
 8007d10:	f7fe f963 	bl	8005fda <dwt_write8bitoffsetreg>
 8007d14:	2318      	movs	r3, #24
 8007d16:	2200      	movs	r2, #0
 8007d18:	4980      	ldr	r1, [pc, #512]	; (8007f1c <dwt_ioctl+0x778>)
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	f7fe fab0 	bl	8006280 <dwt_write32bitoffsetreg>
 8007d20:	23e8      	movs	r3, #232	; 0xe8
 8007d22:	2200      	movs	r2, #0
 8007d24:	497e      	ldr	r1, [pc, #504]	; (8007f20 <dwt_ioctl+0x77c>)
 8007d26:	4630      	mov	r0, r6
 8007d28:	f7fe faaa 	bl	8006280 <dwt_write32bitoffsetreg>
 8007d2c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8007d2e:	8a5b      	ldrh	r3, [r3, #18]
 8007d30:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007d34:	2b20      	cmp	r3, #32
 8007d36:	d022      	beq.n	8007d7e <dwt_ioctl+0x5da>
 8007d38:	2b60      	cmp	r3, #96	; 0x60
 8007d3a:	d02b      	beq.n	8007d94 <dwt_ioctl+0x5f0>
 8007d3c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8007d3e:	7e1b      	ldrb	r3, [r3, #24]
 8007d40:	085b      	lsrs	r3, r3, #1
 8007d42:	d032      	beq.n	8007daa <dwt_ioctl+0x606>
 8007d44:	2200      	movs	r2, #0
 8007d46:	4977      	ldr	r1, [pc, #476]	; (8007f24 <dwt_ioctl+0x780>)
 8007d48:	4630      	mov	r0, r6
 8007d4a:	f7fd fd6d 	bl	8005828 <dwt_read16bitoffsetreg>
 8007d4e:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 8007d52:	3b09      	subs	r3, #9
 8007d54:	2b0f      	cmp	r3, #15
 8007d56:	f201 832e 	bhi.w	80093b6 <dwt_ioctl+0x1c12>
 8007d5a:	f000 0001 	and.w	r0, r0, #1
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	bf0c      	ite	eq
 8007d62:	2105      	moveq	r1, #5
 8007d64:	2109      	movne	r1, #9
 8007d66:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8007d68:	7a5b      	ldrb	r3, [r3, #9]
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d029      	beq.n	8007dc2 <dwt_ioctl+0x61e>
 8007d6e:	4630      	mov	r0, r6
 8007d70:	f7fe fca2 	bl	80066b8 <ull_configmrxlut>
 8007d74:	2500      	movs	r5, #0
 8007d76:	e5bf      	b.n	80078f8 <dwt_ioctl+0x154>
 8007d78:	f7ff f9ca 	bl	8007110 <_dwt_prog_ldo_and_bias_tune>
 8007d7c:	e7c4      	b.n	8007d08 <dwt_ioctl+0x564>
 8007d7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d82:	9300      	str	r3, [sp, #0]
 8007d84:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 8007d88:	2200      	movs	r2, #0
 8007d8a:	4967      	ldr	r1, [pc, #412]	; (8007f28 <dwt_ioctl+0x784>)
 8007d8c:	4630      	mov	r0, r6
 8007d8e:	f7fe fe09 	bl	80069a4 <dwt_modify32bitoffsetreg>
 8007d92:	e7d3      	b.n	8007d3c <dwt_ioctl+0x598>
 8007d94:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007d98:	9300      	str	r3, [sp, #0]
 8007d9a:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 8007d9e:	2200      	movs	r2, #0
 8007da0:	4961      	ldr	r1, [pc, #388]	; (8007f28 <dwt_ioctl+0x784>)
 8007da2:	4630      	mov	r0, r6
 8007da4:	f7fe fdfe 	bl	80069a4 <dwt_modify32bitoffsetreg>
 8007da8:	e7c8      	b.n	8007d3c <dwt_ioctl+0x598>
 8007daa:	2301      	movs	r3, #1
 8007dac:	2200      	movs	r2, #0
 8007dae:	495f      	ldr	r1, [pc, #380]	; (8007f2c <dwt_ioctl+0x788>)
 8007db0:	4630      	mov	r0, r6
 8007db2:	f7fe f912 	bl	8005fda <dwt_write8bitoffsetreg>
 8007db6:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8007db8:	7e13      	ldrb	r3, [r2, #24]
 8007dba:	f043 0302 	orr.w	r3, r3, #2
 8007dbe:	7613      	strb	r3, [r2, #24]
 8007dc0:	e7c0      	b.n	8007d44 <dwt_ioctl+0x5a0>
 8007dc2:	4630      	mov	r0, r6
 8007dc4:	f7fe fe12 	bl	80069ec <_dwt_kick_dgc_on_wakeup>
 8007dc8:	2500      	movs	r5, #0
 8007dca:	e595      	b.n	80078f8 <dwt_ioctl+0x154>
 8007dcc:	2c00      	cmp	r4, #0
 8007dce:	f001 82f5 	beq.w	80093bc <dwt_ioctl+0x1c18>
 8007dd2:	7823      	ldrb	r3, [r4, #0]
 8007dd4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8007dd6:	75d3      	strb	r3, [r2, #23]
 8007dd8:	031b      	lsls	r3, r3, #12
 8007dda:	f403 4330 	and.w	r3, r3, #45056	; 0xb000
 8007dde:	9300      	str	r3, [sp, #0]
 8007de0:	f644 73ff 	movw	r3, #20479	; 0x4fff
 8007de4:	2200      	movs	r2, #0
 8007de6:	2110      	movs	r1, #16
 8007de8:	f7ff f978 	bl	80070dc <dwt_modify16bitoffsetreg>
 8007dec:	2500      	movs	r5, #0
 8007dee:	e583      	b.n	80078f8 <dwt_ioctl+0x154>
 8007df0:	2c00      	cmp	r4, #0
 8007df2:	f001 82e6 	beq.w	80093c2 <dwt_ioctl+0x1c1e>
 8007df6:	8823      	ldrh	r3, [r4, #0]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8007dfe:	f7fe f93e 	bl	800607e <dwt_write16bitoffsetreg>
 8007e02:	2500      	movs	r5, #0
 8007e04:	e578      	b.n	80078f8 <dwt_ioctl+0x154>
 8007e06:	2c00      	cmp	r4, #0
 8007e08:	f001 82de 	beq.w	80093c8 <dwt_ioctl+0x1c24>
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8007e12:	f7fd fd09 	bl	8005828 <dwt_read16bitoffsetreg>
 8007e16:	8020      	strh	r0, [r4, #0]
 8007e18:	2500      	movs	r5, #0
 8007e1a:	e56d      	b.n	80078f8 <dwt_ioctl+0x154>
 8007e1c:	2c00      	cmp	r4, #0
 8007e1e:	f001 82d6 	beq.w	80093ce <dwt_ioctl+0x1c2a>
 8007e22:	8823      	ldrh	r3, [r4, #0]
 8007e24:	2200      	movs	r2, #0
 8007e26:	4942      	ldr	r1, [pc, #264]	; (8007f30 <dwt_ioctl+0x78c>)
 8007e28:	f7fe f929 	bl	800607e <dwt_write16bitoffsetreg>
 8007e2c:	2500      	movs	r5, #0
 8007e2e:	e563      	b.n	80078f8 <dwt_ioctl+0x154>
 8007e30:	2c00      	cmp	r4, #0
 8007e32:	f001 82cf 	beq.w	80093d4 <dwt_ioctl+0x1c30>
 8007e36:	2200      	movs	r2, #0
 8007e38:	493d      	ldr	r1, [pc, #244]	; (8007f30 <dwt_ioctl+0x78c>)
 8007e3a:	f7fd fcf5 	bl	8005828 <dwt_read16bitoffsetreg>
 8007e3e:	8020      	strh	r0, [r4, #0]
 8007e40:	2500      	movs	r5, #0
 8007e42:	e559      	b.n	80078f8 <dwt_ioctl+0x154>
 8007e44:	2c00      	cmp	r4, #0
 8007e46:	f001 82c8 	beq.w	80093da <dwt_ioctl+0x1c36>
 8007e4a:	88a3      	ldrh	r3, [r4, #4]
 8007e4c:	88e2      	ldrh	r2, [r4, #6]
 8007e4e:	6821      	ldr	r1, [r4, #0]
 8007e50:	9100      	str	r1, [sp, #0]
 8007e52:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 8007e56:	f7fe f8b5 	bl	8005fc4 <dwt_writetodevice>
 8007e5a:	2500      	movs	r5, #0
 8007e5c:	e54c      	b.n	80078f8 <dwt_ioctl+0x154>
 8007e5e:	2c00      	cmp	r4, #0
 8007e60:	f001 82be 	beq.w	80093e0 <dwt_ioctl+0x1c3c>
 8007e64:	88a3      	ldrh	r3, [r4, #4]
 8007e66:	88e2      	ldrh	r2, [r4, #6]
 8007e68:	6821      	ldr	r1, [r4, #0]
 8007e6a:	9100      	str	r1, [sp, #0]
 8007e6c:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 8007e70:	f7fd fcba 	bl	80057e8 <dwt_readfromdevice>
 8007e74:	2500      	movs	r5, #0
 8007e76:	e53f      	b.n	80078f8 <dwt_ioctl+0x154>
 8007e78:	2c00      	cmp	r4, #0
 8007e7a:	f001 82b4 	beq.w	80093e6 <dwt_ioctl+0x1c42>
 8007e7e:	88e3      	ldrh	r3, [r4, #6]
 8007e80:	88a2      	ldrh	r2, [r4, #4]
 8007e82:	6821      	ldr	r1, [r4, #0]
 8007e84:	f7fe fcc2 	bl	800680c <ull_readrxdata>
 8007e88:	2500      	movs	r5, #0
 8007e8a:	e535      	b.n	80078f8 <dwt_ioctl+0x154>
 8007e8c:	2c00      	cmp	r4, #0
 8007e8e:	f001 82ad 	beq.w	80093ec <dwt_ioctl+0x1c48>
 8007e92:	88e3      	ldrh	r3, [r4, #6]
 8007e94:	6822      	ldr	r2, [r4, #0]
 8007e96:	88a1      	ldrh	r1, [r4, #4]
 8007e98:	f7fe fd52 	bl	8006940 <ull_writetxdata>
 8007e9c:	2500      	movs	r5, #0
 8007e9e:	e52b      	b.n	80078f8 <dwt_ioctl+0x154>
 8007ea0:	4611      	mov	r1, r2
 8007ea2:	f7fe fce9 	bl	8006878 <ull_rxenable>
 8007ea6:	2500      	movs	r5, #0
 8007ea8:	e526      	b.n	80078f8 <dwt_ioctl+0x154>
 8007eaa:	2c00      	cmp	r4, #0
 8007eac:	f001 82a1 	beq.w	80093f2 <dwt_ioctl+0x1c4e>
 8007eb0:	7923      	ldrb	r3, [r4, #4]
 8007eb2:	8862      	ldrh	r2, [r4, #2]
 8007eb4:	8821      	ldrh	r1, [r4, #0]
 8007eb6:	f7fe ff2d 	bl	8006d14 <ull_writetxfctrl>
 8007eba:	2500      	movs	r5, #0
 8007ebc:	e51c      	b.n	80078f8 <dwt_ioctl+0x154>
 8007ebe:	2c00      	cmp	r4, #0
 8007ec0:	f001 829a 	beq.w	80093f8 <dwt_ioctl+0x1c54>
 8007ec4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007ec6:	7bdb      	ldrb	r3, [r3, #15]
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d00c      	beq.n	8007ee6 <dwt_ioctl+0x742>
 8007ecc:	2b03      	cmp	r3, #3
 8007ece:	d110      	bne.n	8007ef2 <dwt_ioctl+0x74e>
 8007ed0:	220c      	movs	r2, #12
 8007ed2:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8007ed6:	f7fd fca7 	bl	8005828 <dwt_read16bitoffsetreg>
 8007eda:	b200      	sxth	r0, r0
 8007edc:	f340 030c 	sbfx	r3, r0, #0, #13
 8007ee0:	8023      	strh	r3, [r4, #0]
 8007ee2:	2500      	movs	r5, #0
 8007ee4:	e508      	b.n	80078f8 <dwt_ioctl+0x154>
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	4912      	ldr	r1, [pc, #72]	; (8007f34 <dwt_ioctl+0x790>)
 8007eea:	f7fd fc9d 	bl	8005828 <dwt_read16bitoffsetreg>
 8007eee:	b200      	sxth	r0, r0
 8007ef0:	e7f4      	b.n	8007edc <dwt_ioctl+0x738>
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	4910      	ldr	r1, [pc, #64]	; (8007f38 <dwt_ioctl+0x794>)
 8007ef6:	f7fd fc97 	bl	8005828 <dwt_read16bitoffsetreg>
 8007efa:	b200      	sxth	r0, r0
 8007efc:	e7ee      	b.n	8007edc <dwt_ioctl+0x738>
 8007efe:	bf00      	nop
 8007f00:	00110008 	.word	0x00110008
 8007f04:	00d20874 	.word	0x00d20874
 8007f08:	00110010 	.word	0x00110010
 8007f0c:	04d28874 	.word	0x04d28874
 8007f10:	0007001c 	.word	0x0007001c
 8007f14:	00020004 	.word	0x00020004
 8007f18:	00070050 	.word	0x00070050
 8007f1c:	001f000c 	.word	0x001f000c
 8007f20:	001f0010 	.word	0x001f0010
 8007f24:	00010014 	.word	0x00010014
 8007f28:	000b0008 	.word	0x000b0008
 8007f2c:	00010028 	.word	0x00010028
 8007f30:	00010004 	.word	0x00010004
 8007f34:	0018000c 	.word	0x0018000c
 8007f38:	000c0020 	.word	0x000c0020
 8007f3c:	2c00      	cmp	r4, #0
 8007f3e:	f001 825e 	beq.w	80093fe <dwt_ioctl+0x1c5a>
 8007f42:	ab0c      	add	r3, sp, #48	; 0x30
 8007f44:	9300      	str	r3, [sp, #0]
 8007f46:	2303      	movs	r3, #3
 8007f48:	2200      	movs	r2, #0
 8007f4a:	49bb      	ldr	r1, [pc, #748]	; (8008238 <dwt_ioctl+0xa94>)
 8007f4c:	f7fd fc4c 	bl	80057e8 <dwt_readfromdevice>
 8007f50:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8007f54:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8007f58:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8007f5c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8007f60:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007f64:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8007f68:	bf1c      	itt	ne
 8007f6a:	ea6f 3303 	mvnne.w	r3, r3, lsl #12
 8007f6e:	ea6f 3313 	mvnne.w	r3, r3, lsr #12
 8007f72:	6023      	str	r3, [r4, #0]
 8007f74:	2500      	movs	r5, #0
 8007f76:	e4bf      	b.n	80078f8 <dwt_ioctl+0x154>
 8007f78:	f7fe f892 	bl	80060a0 <ull_clearaonconfig>
 8007f7c:	2500      	movs	r5, #0
 8007f7e:	e4bb      	b.n	80078f8 <dwt_ioctl+0x154>
 8007f80:	2c00      	cmp	r4, #0
 8007f82:	f001 823f 	beq.w	8009404 <dwt_ioctl+0x1c60>
 8007f86:	8861      	ldrh	r1, [r4, #2]
 8007f88:	f7fe ff40 	bl	8006e0c <ull_calcbandwidthadj>
 8007f8c:	7020      	strb	r0, [r4, #0]
 8007f8e:	2500      	movs	r5, #0
 8007f90:	e4b2      	b.n	80078f8 <dwt_ioctl+0x154>
 8007f92:	4621      	mov	r1, r4
 8007f94:	f7fd fc68 	bl	8005868 <ull_readdiagnostics>
 8007f98:	2500      	movs	r5, #0
 8007f9a:	e4ad      	b.n	80078f8 <dwt_ioctl+0x154>
 8007f9c:	2c00      	cmp	r4, #0
 8007f9e:	f001 8234 	beq.w	800940a <dwt_ioctl+0x1c66>
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	2174      	movs	r1, #116	; 0x74
 8007fa6:	f7fd fc29 	bl	80057fc <dwt_read32bitoffsetreg>
 8007faa:	6020      	str	r0, [r4, #0]
 8007fac:	2500      	movs	r5, #0
 8007fae:	e4a3      	b.n	80078f8 <dwt_ioctl+0x154>
 8007fb0:	2c00      	cmp	r4, #0
 8007fb2:	f001 822d 	beq.w	8009410 <dwt_ioctl+0x1c6c>
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	2174      	movs	r1, #116	; 0x74
 8007fba:	f7fd fc1f 	bl	80057fc <dwt_read32bitoffsetreg>
 8007fbe:	6020      	str	r0, [r4, #0]
 8007fc0:	2500      	movs	r5, #0
 8007fc2:	e499      	b.n	80078f8 <dwt_ioctl+0x154>
 8007fc4:	9400      	str	r4, [sp, #0]
 8007fc6:	2305      	movs	r3, #5
 8007fc8:	2200      	movs	r2, #0
 8007fca:	2174      	movs	r1, #116	; 0x74
 8007fcc:	f7fd fc0c 	bl	80057e8 <dwt_readfromdevice>
 8007fd0:	2500      	movs	r5, #0
 8007fd2:	e491      	b.n	80078f8 <dwt_ioctl+0x154>
 8007fd4:	2c00      	cmp	r4, #0
 8007fd6:	f001 821e 	beq.w	8009416 <dwt_ioctl+0x1c72>
 8007fda:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007fdc:	7bdb      	ldrb	r3, [r3, #15]
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d014      	beq.n	800800c <dwt_ioctl+0x868>
 8007fe2:	2b03      	cmp	r3, #3
 8007fe4:	d119      	bne.n	800801a <dwt_ioctl+0x876>
 8007fe6:	2216      	movs	r2, #22
 8007fe8:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8007fec:	f7fd fc1c 	bl	8005828 <dwt_read16bitoffsetreg>
 8007ff0:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8007ff4:	b283      	uxth	r3, r0
 8007ff6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8007ffa:	d004      	beq.n	8008006 <dwt_ioctl+0x862>
 8007ffc:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8008000:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8008004:	b218      	sxth	r0, r3
 8008006:	8020      	strh	r0, [r4, #0]
 8008008:	2500      	movs	r5, #0
 800800a:	e475      	b.n	80078f8 <dwt_ioctl+0x154>
 800800c:	2202      	movs	r2, #2
 800800e:	498b      	ldr	r1, [pc, #556]	; (800823c <dwt_ioctl+0xa98>)
 8008010:	f7fd fc0a 	bl	8005828 <dwt_read16bitoffsetreg>
 8008014:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8008018:	e7ec      	b.n	8007ff4 <dwt_ioctl+0x850>
 800801a:	2202      	movs	r2, #2
 800801c:	4988      	ldr	r1, [pc, #544]	; (8008240 <dwt_ioctl+0xa9c>)
 800801e:	f7fd fc03 	bl	8005828 <dwt_read16bitoffsetreg>
 8008022:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8008026:	e7e5      	b.n	8007ff4 <dwt_ioctl+0x850>
 8008028:	9400      	str	r4, [sp, #0]
 800802a:	2306      	movs	r3, #6
 800802c:	2200      	movs	r2, #0
 800802e:	4985      	ldr	r1, [pc, #532]	; (8008244 <dwt_ioctl+0xaa0>)
 8008030:	f7fd fbda 	bl	80057e8 <dwt_readfromdevice>
 8008034:	7963      	ldrb	r3, [r4, #5]
 8008036:	f003 0301 	and.w	r3, r3, #1
 800803a:	7163      	strb	r3, [r4, #5]
 800803c:	2500      	movs	r5, #0
 800803e:	e45b      	b.n	80078f8 <dwt_ioctl+0x154>
 8008040:	2c00      	cmp	r4, #0
 8008042:	f001 81eb 	beq.w	800941c <dwt_ioctl+0x1c78>
 8008046:	2201      	movs	r2, #1
 8008048:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800804c:	f7fd fbfe 	bl	800584c <dwt_read8bitoffsetreg>
 8008050:	7020      	strb	r0, [r4, #0]
 8008052:	2500      	movs	r5, #0
 8008054:	e450      	b.n	80078f8 <dwt_ioctl+0x154>
 8008056:	2c00      	cmp	r4, #0
 8008058:	f001 81e3 	beq.w	8009422 <dwt_ioctl+0x1c7e>
 800805c:	2200      	movs	r2, #0
 800805e:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8008062:	f7fd fbf3 	bl	800584c <dwt_read8bitoffsetreg>
 8008066:	7020      	strb	r0, [r4, #0]
 8008068:	2500      	movs	r5, #0
 800806a:	e445      	b.n	80078f8 <dwt_ioctl+0x154>
 800806c:	2c00      	cmp	r4, #0
 800806e:	f001 81db 	beq.w	8009428 <dwt_ioctl+0x1c84>
 8008072:	88a2      	ldrh	r2, [r4, #4]
 8008074:	6821      	ldr	r1, [r4, #0]
 8008076:	f7fe fd1d 	bl	8006ab4 <_dwt_otpprogword32>
 800807a:	2500      	movs	r5, #0
 800807c:	e43c      	b.n	80078f8 <dwt_ioctl+0x154>
 800807e:	2c00      	cmp	r4, #0
 8008080:	f001 81d5 	beq.w	800942e <dwt_ioctl+0x1c8a>
 8008084:	6825      	ldr	r5, [r4, #0]
 8008086:	88a4      	ldrh	r4, [r4, #4]
 8008088:	4622      	mov	r2, r4
 800808a:	4629      	mov	r1, r5
 800808c:	f7fe fd12 	bl	8006ab4 <_dwt_otpprogword32>
 8008090:	4621      	mov	r1, r4
 8008092:	4630      	mov	r0, r6
 8008094:	f7fe f84e 	bl	8006134 <_dwt_otpread>
 8008098:	1a2d      	subs	r5, r5, r0
 800809a:	bf18      	it	ne
 800809c:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 80080a0:	e42a      	b.n	80078f8 <dwt_ioctl+0x154>
 80080a2:	2a02      	cmp	r2, #2
 80080a4:	d00e      	beq.n	80080c4 <dwt_ioctl+0x920>
 80080a6:	4c68      	ldr	r4, [pc, #416]	; (8008248 <dwt_ioctl+0xaa4>)
 80080a8:	2300      	movs	r3, #0
 80080aa:	461a      	mov	r2, r3
 80080ac:	4621      	mov	r1, r4
 80080ae:	4630      	mov	r0, r6
 80080b0:	f7fd ff93 	bl	8005fda <dwt_write8bitoffsetreg>
 80080b4:	2302      	movs	r3, #2
 80080b6:	2200      	movs	r2, #0
 80080b8:	4621      	mov	r1, r4
 80080ba:	4630      	mov	r0, r6
 80080bc:	f7fd ff8d 	bl	8005fda <dwt_write8bitoffsetreg>
 80080c0:	2500      	movs	r5, #0
 80080c2:	e419      	b.n	80078f8 <dwt_ioctl+0x154>
 80080c4:	2300      	movs	r3, #0
 80080c6:	9300      	str	r3, [sp, #0]
 80080c8:	23fe      	movs	r3, #254	; 0xfe
 80080ca:	2201      	movs	r2, #1
 80080cc:	495f      	ldr	r1, [pc, #380]	; (800824c <dwt_ioctl+0xaa8>)
 80080ce:	f7fe fe53 	bl	8006d78 <dwt_modify8bitoffsetreg>
 80080d2:	e7e8      	b.n	80080a6 <dwt_ioctl+0x902>
 80080d4:	2c00      	cmp	r4, #0
 80080d6:	f001 81ad 	beq.w	8009434 <dwt_ioctl+0x1c90>
 80080da:	8824      	ldrh	r4, [r4, #0]
 80080dc:	b2e2      	uxtb	r2, r4
 80080de:	f44f 7181 	mov.w	r1, #258	; 0x102
 80080e2:	f7fe f869 	bl	80061b8 <ull_aon_write>
 80080e6:	0a22      	lsrs	r2, r4, #8
 80080e8:	f240 1103 	movw	r1, #259	; 0x103
 80080ec:	4630      	mov	r0, r6
 80080ee:	f7fe f863 	bl	80061b8 <ull_aon_write>
 80080f2:	2500      	movs	r5, #0
 80080f4:	e400      	b.n	80078f8 <dwt_ioctl+0x154>
 80080f6:	2c00      	cmp	r4, #0
 80080f8:	f001 819f 	beq.w	800943a <dwt_ioctl+0x1c96>
 80080fc:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8008258 <dwt_ioctl+0xab4>
 8008100:	2310      	movs	r3, #16
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	23ff      	movs	r3, #255	; 0xff
 8008106:	2200      	movs	r2, #0
 8008108:	4641      	mov	r1, r8
 800810a:	f7fe fe35 	bl	8006d78 <dwt_modify8bitoffsetreg>
 800810e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8008112:	4630      	mov	r0, r6
 8008114:	f7fe f830 	bl	8006178 <ull_aon_read>
 8008118:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 800811c:	462a      	mov	r2, r5
 800811e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8008122:	4630      	mov	r0, r6
 8008124:	f7fe f848 	bl	80061b8 <ull_aon_write>
 8008128:	f045 0204 	orr.w	r2, r5, #4
 800812c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8008130:	4630      	mov	r0, r6
 8008132:	f7fe f841 	bl	80061b8 <ull_aon_write>
 8008136:	2002      	movs	r0, #2
 8008138:	f7f9 fa04 	bl	8001544 <deca_sleep>
 800813c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8008140:	4630      	mov	r0, r6
 8008142:	f7fe f819 	bl	8006178 <ull_aon_read>
 8008146:	4607      	mov	r7, r0
 8008148:	f240 110f 	movw	r1, #271	; 0x10f
 800814c:	4630      	mov	r0, r6
 800814e:	f7fe f813 	bl	8006178 <ull_aon_read>
 8008152:	4681      	mov	r9, r0
 8008154:	462a      	mov	r2, r5
 8008156:	f44f 7182 	mov.w	r1, #260	; 0x104
 800815a:	4630      	mov	r0, r6
 800815c:	f7fe f82c 	bl	80061b8 <ull_aon_write>
 8008160:	2500      	movs	r5, #0
 8008162:	9500      	str	r5, [sp, #0]
 8008164:	23ef      	movs	r3, #239	; 0xef
 8008166:	462a      	mov	r2, r5
 8008168:	4641      	mov	r1, r8
 800816a:	4630      	mov	r0, r6
 800816c:	f7fe fe04 	bl	8006d78 <dwt_modify8bitoffsetreg>
 8008170:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 8008174:	8027      	strh	r7, [r4, #0]
 8008176:	f7ff bbbf 	b.w	80078f8 <dwt_ioctl+0x154>
 800817a:	2c00      	cmp	r4, #0
 800817c:	f001 8160 	beq.w	8009440 <dwt_ioctl+0x1c9c>
 8008180:	78a2      	ldrb	r2, [r4, #2]
 8008182:	8821      	ldrh	r1, [r4, #0]
 8008184:	f7fe f840 	bl	8006208 <ull_configuresleep>
 8008188:	2500      	movs	r5, #0
 800818a:	f7ff bbb5 	b.w	80078f8 <dwt_ioctl+0x154>
 800818e:	f7fd ff87 	bl	80060a0 <ull_clearaonconfig>
 8008192:	2001      	movs	r0, #1
 8008194:	f7f9 f9d6 	bl	8001544 <deca_sleep>
 8008198:	2303      	movs	r3, #3
 800819a:	9300      	str	r3, [sp, #0]
 800819c:	23ff      	movs	r3, #255	; 0xff
 800819e:	2200      	movs	r2, #0
 80081a0:	492b      	ldr	r1, [pc, #172]	; (8008250 <dwt_ioctl+0xaac>)
 80081a2:	4630      	mov	r0, r6
 80081a4:	f7fe fde8 	bl	8006d78 <dwt_modify8bitoffsetreg>
 80081a8:	2300      	movs	r3, #0
 80081aa:	461a      	mov	r2, r3
 80081ac:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
 80081b0:	4630      	mov	r0, r6
 80081b2:	f7fd ff12 	bl	8005fda <dwt_write8bitoffsetreg>
 80081b6:	2001      	movs	r0, #1
 80081b8:	f7f9 f9c4 	bl	8001544 <deca_sleep>
 80081bc:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80081be:	2500      	movs	r5, #0
 80081c0:	73dd      	strb	r5, [r3, #15]
 80081c2:	2202      	movs	r2, #2
 80081c4:	825a      	strh	r2, [r3, #18]
 80081c6:	759d      	strb	r5, [r3, #22]
 80081c8:	75dd      	strb	r5, [r3, #23]
 80081ca:	741d      	strb	r5, [r3, #16]
 80081cc:	f7ff bb94 	b.w	80078f8 <dwt_ioctl+0x154>
 80081d0:	2c00      	cmp	r4, #0
 80081d2:	f001 8138 	beq.w	8009446 <dwt_ioctl+0x1ca2>
 80081d6:	7823      	ldrb	r3, [r4, #0]
 80081d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081dc:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80081de:	7393      	strb	r3, [r2, #14]
 80081e0:	2200      	movs	r2, #0
 80081e2:	491c      	ldr	r1, [pc, #112]	; (8008254 <dwt_ioctl+0xab0>)
 80081e4:	f7fd fef9 	bl	8005fda <dwt_write8bitoffsetreg>
 80081e8:	2500      	movs	r5, #0
 80081ea:	f7ff bb85 	b.w	80078f8 <dwt_ioctl+0x154>
 80081ee:	2c00      	cmp	r4, #0
 80081f0:	f001 812c 	beq.w	800944c <dwt_ioctl+0x1ca8>
 80081f4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80081f6:	7b9b      	ldrb	r3, [r3, #14]
 80081f8:	7023      	strb	r3, [r4, #0]
 80081fa:	2500      	movs	r5, #0
 80081fc:	f7ff bb7c 	b.w	80078f8 <dwt_ioctl+0x154>
 8008200:	2101      	movs	r1, #1
 8008202:	f7fe fc11 	bl	8006a28 <ull_enable_rf_tx>
 8008206:	4630      	mov	r0, r6
 8008208:	f7fe fc42 	bl	8006a90 <ull_enable_rftx_blocks>
 800820c:	2101      	movs	r1, #1
 800820e:	4630      	mov	r0, r6
 8008210:	f7fd ff66 	bl	80060e0 <ull_force_clocks>
 8008214:	220f      	movs	r2, #15
 8008216:	2101      	movs	r1, #1
 8008218:	4630      	mov	r0, r6
 800821a:	f7ff f86f 	bl	80072fc <ull_repeated_cw>
 800821e:	2500      	movs	r5, #0
 8008220:	f7ff bb6a 	b.w	80078f8 <dwt_ioctl+0x154>
 8008224:	2c00      	cmp	r4, #0
 8008226:	f001 8114 	beq.w	8009452 <dwt_ioctl+0x1cae>
 800822a:	6862      	ldr	r2, [r4, #4]
 800822c:	6821      	ldr	r1, [r4, #0]
 800822e:	f7ff f865 	bl	80072fc <ull_repeated_cw>
 8008232:	2500      	movs	r5, #0
 8008234:	f7ff bb60 	b.w	80078f8 <dwt_ioctl+0x154>
 8008238:	00060029 	.word	0x00060029
 800823c:	00180014 	.word	0x00180014
 8008240:	000c001c 	.word	0x000c001c
 8008244:	000c0018 	.word	0x000c0018
 8008248:	000a0004 	.word	0x000a0004
 800824c:	00110008 	.word	0x00110008
 8008250:	00110004 	.word	0x00110004
 8008254:	00090014 	.word	0x00090014
 8008258:	00070048 	.word	0x00070048
 800825c:	2c00      	cmp	r4, #0
 800825e:	f001 80fb 	beq.w	8009458 <dwt_ioctl+0x1cb4>
 8008262:	4dd6      	ldr	r5, [pc, #856]	; (80085bc <dwt_ioctl+0xe18>)
 8008264:	2200      	movs	r2, #0
 8008266:	4629      	mov	r1, r5
 8008268:	f7fd faf0 	bl	800584c <dwt_read8bitoffsetreg>
 800826c:	4680      	mov	r8, r0
 800826e:	2302      	movs	r3, #2
 8008270:	9300      	str	r3, [sp, #0]
 8008272:	23ff      	movs	r3, #255	; 0xff
 8008274:	2200      	movs	r2, #0
 8008276:	4629      	mov	r1, r5
 8008278:	4630      	mov	r0, r6
 800827a:	f7fe fd7d 	bl	8006d78 <dwt_modify8bitoffsetreg>
 800827e:	2304      	movs	r3, #4
 8008280:	2200      	movs	r2, #0
 8008282:	49cf      	ldr	r1, [pc, #828]	; (80085c0 <dwt_ioctl+0xe1c>)
 8008284:	4630      	mov	r0, r6
 8008286:	f7fd fea8 	bl	8005fda <dwt_write8bitoffsetreg>
 800828a:	2301      	movs	r3, #1
 800828c:	2200      	movs	r2, #0
 800828e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008292:	4630      	mov	r0, r6
 8008294:	f7fd fea1 	bl	8005fda <dwt_write8bitoffsetreg>
 8008298:	4fca      	ldr	r7, [pc, #808]	; (80085c4 <dwt_ioctl+0xe20>)
 800829a:	2500      	movs	r5, #0
 800829c:	462a      	mov	r2, r5
 800829e:	4639      	mov	r1, r7
 80082a0:	4630      	mov	r0, r6
 80082a2:	f7fd fad3 	bl	800584c <dwt_read8bitoffsetreg>
 80082a6:	f010 0f01 	tst.w	r0, #1
 80082aa:	d0f7      	beq.n	800829c <dwt_ioctl+0xaf8>
 80082ac:	2200      	movs	r2, #0
 80082ae:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 80082b2:	4630      	mov	r0, r6
 80082b4:	f7fd fab8 	bl	8005828 <dwt_read16bitoffsetreg>
 80082b8:	4605      	mov	r5, r0
 80082ba:	2300      	movs	r3, #0
 80082bc:	461a      	mov	r2, r3
 80082be:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80082c2:	4630      	mov	r0, r6
 80082c4:	f7fd fe89 	bl	8005fda <dwt_write8bitoffsetreg>
 80082c8:	2300      	movs	r3, #0
 80082ca:	461a      	mov	r2, r3
 80082cc:	49bc      	ldr	r1, [pc, #752]	; (80085c0 <dwt_ioctl+0xe1c>)
 80082ce:	4630      	mov	r0, r6
 80082d0:	f7fd fe83 	bl	8005fda <dwt_write8bitoffsetreg>
 80082d4:	4643      	mov	r3, r8
 80082d6:	2200      	movs	r2, #0
 80082d8:	49b8      	ldr	r1, [pc, #736]	; (80085bc <dwt_ioctl+0xe18>)
 80082da:	4630      	mov	r0, r6
 80082dc:	f7fd fe7d 	bl	8005fda <dwt_write8bitoffsetreg>
 80082e0:	8025      	strh	r5, [r4, #0]
 80082e2:	2500      	movs	r5, #0
 80082e4:	f7ff bb08 	b.w	80078f8 <dwt_ioctl+0x154>
 80082e8:	2c00      	cmp	r4, #0
 80082ea:	f001 80b8 	beq.w	800945e <dwt_ioctl+0x1cba>
 80082ee:	7923      	ldrb	r3, [r4, #4]
 80082f0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80082f2:	7ad2      	ldrb	r2, [r2, #11]
 80082f4:	1a9b      	subs	r3, r3, r2
 80082f6:	ee07 3a90 	vmov	s15, r3
 80082fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082fe:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 80085c8 <dwt_ioctl+0xe24>
 8008302:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008306:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 800830a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800830e:	edc4 7a00 	vstr	s15, [r4]
 8008312:	2500      	movs	r5, #0
 8008314:	f7ff baf0 	b.w	80078f8 <dwt_ioctl+0x154>
 8008318:	2c00      	cmp	r4, #0
 800831a:	f001 80a3 	beq.w	8009464 <dwt_ioctl+0x1cc0>
 800831e:	7923      	ldrb	r3, [r4, #4]
 8008320:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8008322:	7a92      	ldrb	r2, [r2, #10]
 8008324:	1a9b      	subs	r3, r3, r2
 8008326:	ee07 3a90 	vmov	s15, r3
 800832a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800832e:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 80085cc <dwt_ioctl+0xe28>
 8008332:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008336:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800833a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800833e:	eddf 6aa4 	vldr	s13, [pc, #656]	; 80085d0 <dwt_ioctl+0xe2c>
 8008342:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008346:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800834a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800834e:	edc4 7a00 	vstr	s15, [r4]
 8008352:	2500      	movs	r5, #0
 8008354:	f7ff bad0 	b.w	80078f8 <dwt_ioctl+0x154>
 8008358:	2c00      	cmp	r4, #0
 800835a:	f001 8086 	beq.w	800946a <dwt_ioctl+0x1cc6>
 800835e:	6824      	ldr	r4, [r4, #0]
 8008360:	2101      	movs	r1, #1
 8008362:	f7fe fb61 	bl	8006a28 <ull_enable_rf_tx>
 8008366:	4630      	mov	r0, r6
 8008368:	f7fe fb92 	bl	8006a90 <ull_enable_rftx_blocks>
 800836c:	2101      	movs	r1, #1
 800836e:	4630      	mov	r0, r6
 8008370:	f7fd feb6 	bl	80060e0 <ull_force_clocks>
 8008374:	4621      	mov	r1, r4
 8008376:	4630      	mov	r0, r6
 8008378:	f7fe fda4 	bl	8006ec4 <ull_repeated_frames>
 800837c:	2500      	movs	r5, #0
 800837e:	f7ff babb 	b.w	80078f8 <dwt_ioctl+0x154>
 8008382:	2500      	movs	r5, #0
 8008384:	9500      	str	r5, [sp, #0]
 8008386:	23ef      	movs	r3, #239	; 0xef
 8008388:	462a      	mov	r2, r5
 800838a:	4992      	ldr	r1, [pc, #584]	; (80085d4 <dwt_ioctl+0xe30>)
 800838c:	f7fe fcf4 	bl	8006d78 <dwt_modify8bitoffsetreg>
 8008390:	2105      	movs	r1, #5
 8008392:	4630      	mov	r0, r6
 8008394:	f7fd fea4 	bl	80060e0 <ull_force_clocks>
 8008398:	2101      	movs	r1, #1
 800839a:	4630      	mov	r0, r6
 800839c:	f7fe fa18 	bl	80067d0 <ull_disable_rf_tx>
 80083a0:	4630      	mov	r0, r6
 80083a2:	f7fe fa0b 	bl	80067bc <ull_disable_rftx_blocks>
 80083a6:	f7ff baa7 	b.w	80078f8 <dwt_ioctl+0x154>
 80083aa:	2500      	movs	r5, #0
 80083ac:	9500      	str	r5, [sp, #0]
 80083ae:	23ef      	movs	r3, #239	; 0xef
 80083b0:	462a      	mov	r2, r5
 80083b2:	4988      	ldr	r1, [pc, #544]	; (80085d4 <dwt_ioctl+0xe30>)
 80083b4:	f7fe fce0 	bl	8006d78 <dwt_modify8bitoffsetreg>
 80083b8:	f7ff ba9e 	b.w	80078f8 <dwt_ioctl+0x154>
 80083bc:	2c00      	cmp	r4, #0
 80083be:	f001 8057 	beq.w	8009470 <dwt_ioctl+0x1ccc>
 80083c2:	6821      	ldr	r1, [r4, #0]
 80083c4:	f7fe fd7e 	bl	8006ec4 <ull_repeated_frames>
 80083c8:	2500      	movs	r5, #0
 80083ca:	f7ff ba95 	b.w	80078f8 <dwt_ioctl+0x154>
 80083ce:	2200      	movs	r2, #0
 80083d0:	4981      	ldr	r1, [pc, #516]	; (80085d8 <dwt_ioctl+0xe34>)
 80083d2:	f7fd fa29 	bl	8005828 <dwt_read16bitoffsetreg>
 80083d6:	f3c0 050b 	ubfx	r5, r0, #0, #12
 80083da:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80083de:	bf18      	it	ne
 80083e0:	f445 4570 	orrne.w	r5, r5, #61440	; 0xf000
 80083e4:	b22d      	sxth	r5, r5
 80083e6:	8025      	strh	r5, [r4, #0]
 80083e8:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80083ea:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80083ee:	1aed      	subs	r5, r5, r3
 80083f0:	f7ff ba82 	b.w	80078f8 <dwt_ioctl+0x154>
 80083f4:	2c00      	cmp	r4, #0
 80083f6:	f001 806d 	beq.w	80094d4 <dwt_ioctl+0x1d30>
 80083fa:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80083fe:	7a23      	ldrb	r3, [r4, #8]
 8008400:	f899 2013 	ldrb.w	r2, [r9, #19]
 8008404:	2aff      	cmp	r2, #255	; 0xff
 8008406:	f000 813f 	beq.w	8008688 <dwt_ioctl+0xee4>
 800840a:	2b00      	cmp	r3, #0
 800840c:	d136      	bne.n	800847c <dwt_ioctl+0xcd8>
 800840e:	f8d9 3000 	ldr.w	r3, [r9]
 8008412:	9300      	str	r3, [sp, #0]
 8008414:	230c      	movs	r3, #12
 8008416:	2200      	movs	r2, #0
 8008418:	4970      	ldr	r1, [pc, #448]	; (80085dc <dwt_ioctl+0xe38>)
 800841a:	f7fd fdd3 	bl	8005fc4 <dwt_writetodevice>
 800841e:	f899 300c 	ldrb.w	r3, [r9, #12]
 8008422:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 8008426:	18d1      	adds	r1, r2, r3
 8008428:	f899 2012 	ldrb.w	r2, [r9, #18]
 800842c:	2a00      	cmp	r2, #0
 800842e:	d15f      	bne.n	80084f0 <dwt_ioctl+0xd4c>
 8008430:	f899 0010 	ldrb.w	r0, [r9, #16]
 8008434:	2800      	cmp	r0, #0
 8008436:	bf0b      	itete	eq
 8008438:	227f      	moveq	r2, #127	; 0x7f
 800843a:	f44f 6280 	movne.w	r2, #1024	; 0x400
 800843e:	f44f 15b0 	moveq.w	r5, #1441792	; 0x160000
 8008442:	f44f 15a0 	movne.w	r5, #1310720	; 0x140000
 8008446:	f899 0013 	ldrb.w	r0, [r9, #19]
 800844a:	1a12      	subs	r2, r2, r0
 800844c:	3a02      	subs	r2, #2
 800844e:	4291      	cmp	r1, r2
 8008450:	f200 8120 	bhi.w	8008694 <dwt_ioctl+0xef0>
 8008454:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8008458:	9200      	str	r2, [sp, #0]
 800845a:	2200      	movs	r2, #0
 800845c:	4629      	mov	r1, r5
 800845e:	4630      	mov	r0, r6
 8008460:	f7fd fdb0 	bl	8005fc4 <dwt_writetodevice>
 8008464:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8008468:	f899 200c 	ldrb.w	r2, [r9, #12]
 800846c:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8008470:	9100      	str	r1, [sp, #0]
 8008472:	4629      	mov	r1, r5
 8008474:	4630      	mov	r0, r6
 8008476:	f7fd fda5 	bl	8005fc4 <dwt_writetodevice>
 800847a:	e04a      	b.n	8008512 <dwt_ioctl+0xd6e>
 800847c:	f8d9 3000 	ldr.w	r3, [r9]
 8008480:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 8008484:	7a9a      	ldrb	r2, [r3, #10]
 8008486:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 800848a:	7a5a      	ldrb	r2, [r3, #9]
 800848c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 8008490:	7a1a      	ldrb	r2, [r3, #8]
 8008492:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
 8008496:	79da      	ldrb	r2, [r3, #7]
 8008498:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 800849c:	799a      	ldrb	r2, [r3, #6]
 800849e:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 80084a2:	795a      	ldrb	r2, [r3, #5]
 80084a4:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
 80084a8:	791a      	ldrb	r2, [r3, #4]
 80084aa:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 80084ae:	78da      	ldrb	r2, [r3, #3]
 80084b0:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
 80084b4:	789a      	ldrb	r2, [r3, #2]
 80084b6:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 80084ba:	785a      	ldrb	r2, [r3, #1]
 80084bc:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 80084c0:	781a      	ldrb	r2, [r3, #0]
 80084c2:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 80084c6:	2200      	movs	r2, #0
 80084c8:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 80084cc:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 80084d0:	0a09      	lsrs	r1, r1, #8
 80084d2:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
 80084d6:	7b19      	ldrb	r1, [r3, #12]
 80084d8:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
 80084dc:	7adb      	ldrb	r3, [r3, #11]
 80084de:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 80084e2:	ab0c      	add	r3, sp, #48	; 0x30
 80084e4:	9300      	str	r3, [sp, #0]
 80084e6:	2310      	movs	r3, #16
 80084e8:	493c      	ldr	r1, [pc, #240]	; (80085dc <dwt_ioctl+0xe38>)
 80084ea:	f7fd fd6b 	bl	8005fc4 <dwt_writetodevice>
 80084ee:	e796      	b.n	800841e <dwt_ioctl+0xc7a>
 80084f0:	2a01      	cmp	r2, #1
 80084f2:	f040 80cc 	bne.w	800868e <dwt_ioctl+0xeea>
 80084f6:	f899 3011 	ldrb.w	r3, [r9, #17]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8008500:	bf08      	it	eq
 8008502:	237f      	moveq	r3, #127	; 0x7f
 8008504:	f899 2013 	ldrb.w	r2, [r9, #19]
 8008508:	1a9b      	subs	r3, r3, r2
 800850a:	3b02      	subs	r3, #2
 800850c:	4299      	cmp	r1, r3
 800850e:	f200 80c4 	bhi.w	800869a <dwt_ioctl+0xef6>
 8008512:	f899 2010 	ldrb.w	r2, [r9, #16]
 8008516:	1e53      	subs	r3, r2, #1
 8008518:	b2db      	uxtb	r3, r3
 800851a:	2b01      	cmp	r3, #1
 800851c:	d940      	bls.n	80085a0 <dwt_ioctl+0xdfc>
 800851e:	f899 3011 	ldrb.w	r3, [r9, #17]
 8008522:	1e59      	subs	r1, r3, #1
 8008524:	b2c9      	uxtb	r1, r1
 8008526:	2901      	cmp	r1, #1
 8008528:	d964      	bls.n	80085f4 <dwt_ioctl+0xe50>
 800852a:	2b04      	cmp	r3, #4
 800852c:	d069      	beq.n	8008602 <dwt_ioctl+0xe5e>
 800852e:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 8008532:	2200      	movs	r2, #0
 8008534:	492a      	ldr	r1, [pc, #168]	; (80085e0 <dwt_ioctl+0xe3c>)
 8008536:	4630      	mov	r0, r6
 8008538:	f7fd fea2 	bl	8006280 <dwt_write32bitoffsetreg>
 800853c:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8008540:	4a28      	ldr	r2, [pc, #160]	; (80085e4 <dwt_ioctl+0xe40>)
 8008542:	ea02 12c3 	and.w	r2, r2, r3, lsl #7
 8008546:	f899 300c 	ldrb.w	r3, [r9, #12]
 800854a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800854e:	4313      	orrs	r3, r2
 8008550:	2200      	movs	r2, #0
 8008552:	4925      	ldr	r1, [pc, #148]	; (80085e8 <dwt_ioctl+0xe44>)
 8008554:	4630      	mov	r0, r6
 8008556:	f7fd fe93 	bl	8006280 <dwt_write32bitoffsetreg>
 800855a:	2301      	movs	r3, #1
 800855c:	2200      	movs	r2, #0
 800855e:	4923      	ldr	r1, [pc, #140]	; (80085ec <dwt_ioctl+0xe48>)
 8008560:	4630      	mov	r0, r6
 8008562:	f7fd fd3a 	bl	8005fda <dwt_write8bitoffsetreg>
 8008566:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80085f0 <dwt_ioctl+0xe4c>
 800856a:	2700      	movs	r7, #0
 800856c:	463a      	mov	r2, r7
 800856e:	4641      	mov	r1, r8
 8008570:	4630      	mov	r0, r6
 8008572:	f7fd f96b 	bl	800584c <dwt_read8bitoffsetreg>
 8008576:	f010 0f05 	tst.w	r0, #5
 800857a:	d0f7      	beq.n	800856c <dwt_ioctl+0xdc8>
 800857c:	4605      	mov	r5, r0
 800857e:	4603      	mov	r3, r0
 8008580:	2200      	movs	r2, #0
 8008582:	491b      	ldr	r1, [pc, #108]	; (80085f0 <dwt_ioctl+0xe4c>)
 8008584:	4630      	mov	r0, r6
 8008586:	f7fd fd28 	bl	8005fda <dwt_write8bitoffsetreg>
 800858a:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 800858e:	f025 0330 	bic.w	r3, r5, #48	; 0x30
 8008592:	2b01      	cmp	r3, #1
 8008594:	d042      	beq.n	800861c <dwt_ioctl+0xe78>
 8008596:	b26b      	sxtb	r3, r5
 8008598:	7023      	strb	r3, [r4, #0]
 800859a:	2500      	movs	r5, #0
 800859c:	f7ff b9ac 	b.w	80078f8 <dwt_ioctl+0x154>
 80085a0:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80085a2:	7bdb      	ldrb	r3, [r3, #15]
 80085a4:	2b03      	cmp	r3, #3
 80085a6:	f001 802e 	beq.w	8009606 <dwt_ioctl+0x1e62>
 80085aa:	f899 3011 	ldrb.w	r3, [r9, #17]
 80085ae:	1e5a      	subs	r2, r3, #1
 80085b0:	b2d2      	uxtb	r2, r2
 80085b2:	2a01      	cmp	r2, #1
 80085b4:	d92c      	bls.n	8008610 <dwt_ioctl+0xe6c>
 80085b6:	2201      	movs	r2, #1
 80085b8:	e7b7      	b.n	800852a <dwt_ioctl+0xd86>
 80085ba:	bf00      	nop
 80085bc:	00070048 	.word	0x00070048
 80085c0:	00070034 	.word	0x00070034
 80085c4:	00080004 	.word	0x00080004
 80085c8:	3f866666 	.word	0x3f866666
 80085cc:	3ecccccd 	.word	0x3ecccccd
 80085d0:	437f0000 	.word	0x437f0000
 80085d4:	000f0024 	.word	0x000f0024
 80085d8:	00020008 	.word	0x00020008
 80085dc:	00010034 	.word	0x00010034
 80085e0:	00010044 	.word	0x00010044
 80085e4:	0001ff80 	.word	0x0001ff80
 80085e8:	00010048 	.word	0x00010048
 80085ec:	0001004c 	.word	0x0001004c
 80085f0:	00010050 	.word	0x00010050
 80085f4:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80085f6:	7bdb      	ldrb	r3, [r3, #15]
 80085f8:	2b03      	cmp	r3, #3
 80085fa:	bf0c      	ite	eq
 80085fc:	2302      	moveq	r3, #2
 80085fe:	2301      	movne	r3, #1
 8008600:	e795      	b.n	800852e <dwt_ioctl+0xd8a>
 8008602:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 8008606:	2910      	cmp	r1, #16
 8008608:	d991      	bls.n	800852e <dwt_ioctl+0xd8a>
 800860a:	f06f 0303 	mvn.w	r3, #3
 800860e:	e7c3      	b.n	8008598 <dwt_ioctl+0xdf4>
 8008610:	2201      	movs	r2, #1
 8008612:	4613      	mov	r3, r2
 8008614:	e78b      	b.n	800852e <dwt_ioctl+0xd8a>
 8008616:	2202      	movs	r2, #2
 8008618:	4613      	mov	r3, r2
 800861a:	e788      	b.n	800852e <dwt_ioctl+0xd8a>
 800861c:	f899 3012 	ldrb.w	r3, [r9, #18]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d1b8      	bne.n	8008596 <dwt_ioctl+0xdf2>
 8008624:	f899 2011 	ldrb.w	r2, [r9, #17]
 8008628:	1e53      	subs	r3, r2, #1
 800862a:	b2db      	uxtb	r3, r3
 800862c:	2b01      	cmp	r3, #1
 800862e:	d91b      	bls.n	8008668 <dwt_ioctl+0xec4>
 8008630:	2a03      	cmp	r2, #3
 8008632:	bf0c      	ite	eq
 8008634:	f44f 17a0 	moveq.w	r7, #1310720	; 0x140000
 8008638:	f44f 17b0 	movne.w	r7, #1441792	; 0x160000
 800863c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8008640:	b112      	cbz	r2, 8008648 <dwt_ioctl+0xea4>
 8008642:	f899 300c 	ldrb.w	r3, [r9, #12]
 8008646:	b9c3      	cbnz	r3, 800867a <dwt_ioctl+0xed6>
 8008648:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800864c:	2900      	cmp	r1, #0
 800864e:	d0a2      	beq.n	8008596 <dwt_ioctl+0xdf2>
 8008650:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d09e      	beq.n	8008596 <dwt_ioctl+0xdf2>
 8008658:	f899 200c 	ldrb.w	r2, [r9, #12]
 800865c:	9100      	str	r1, [sp, #0]
 800865e:	4639      	mov	r1, r7
 8008660:	4630      	mov	r0, r6
 8008662:	f7fd f8c1 	bl	80057e8 <dwt_readfromdevice>
 8008666:	e796      	b.n	8008596 <dwt_ioctl+0xdf2>
 8008668:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800866a:	7bdb      	ldrb	r3, [r3, #15]
 800866c:	2b03      	cmp	r3, #3
 800866e:	bf0c      	ite	eq
 8008670:	f44f 1798 	moveq.w	r7, #1245184	; 0x130000
 8008674:	f44f 1790 	movne.w	r7, #1179648	; 0x120000
 8008678:	e7e0      	b.n	800863c <dwt_ioctl+0xe98>
 800867a:	9200      	str	r2, [sp, #0]
 800867c:	2200      	movs	r2, #0
 800867e:	4639      	mov	r1, r7
 8008680:	4630      	mov	r0, r6
 8008682:	f7fd f8b1 	bl	80057e8 <dwt_readfromdevice>
 8008686:	e7df      	b.n	8008648 <dwt_ioctl+0xea4>
 8008688:	f06f 0302 	mvn.w	r3, #2
 800868c:	e784      	b.n	8008598 <dwt_ioctl+0xdf4>
 800868e:	f06f 0301 	mvn.w	r3, #1
 8008692:	e781      	b.n	8008598 <dwt_ioctl+0xdf4>
 8008694:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008698:	e77e      	b.n	8008598 <dwt_ioctl+0xdf4>
 800869a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800869e:	e77b      	b.n	8008598 <dwt_ioctl+0xdf4>
 80086a0:	7a23      	ldrb	r3, [r4, #8]
 80086a2:	79e1      	ldrb	r1, [r4, #7]
 80086a4:	79a2      	ldrb	r2, [r4, #6]
 80086a6:	00d2      	lsls	r2, r2, #3
 80086a8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80086ac:	4313      	orrs	r3, r2
 80086ae:	7962      	ldrb	r2, [r4, #5]
 80086b0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80086b4:	7922      	ldrb	r2, [r4, #4]
 80086b6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80086ba:	78e2      	ldrb	r2, [r4, #3]
 80086bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80086c0:	78a2      	ldrb	r2, [r4, #2]
 80086c2:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 80086c6:	7862      	ldrb	r2, [r4, #1]
 80086c8:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	2200      	movs	r2, #0
 80086d0:	49cd      	ldr	r1, [pc, #820]	; (8008a08 <dwt_ioctl+0x1264>)
 80086d2:	f7fd fcd4 	bl	800607e <dwt_write16bitoffsetreg>
 80086d6:	2500      	movs	r5, #0
 80086d8:	f7ff b90e 	b.w	80078f8 <dwt_ioctl+0x154>
 80086dc:	2c00      	cmp	r4, #0
 80086de:	f000 86fc 	beq.w	80094da <dwt_ioctl+0x1d36>
 80086e2:	7863      	ldrb	r3, [r4, #1]
 80086e4:	b133      	cbz	r3, 80086f4 <dwt_ioctl+0xf50>
 80086e6:	085b      	lsrs	r3, r3, #1
 80086e8:	3b01      	subs	r3, #1
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	7023      	strb	r3, [r4, #0]
 80086ee:	2500      	movs	r5, #0
 80086f0:	f7ff b902 	b.w	80078f8 <dwt_ioctl+0x154>
 80086f4:	2300      	movs	r3, #0
 80086f6:	e7f9      	b.n	80086ec <dwt_ioctl+0xf48>
 80086f8:	2200      	movs	r2, #0
 80086fa:	49c4      	ldr	r1, [pc, #784]	; (8008a0c <dwt_ioctl+0x1268>)
 80086fc:	f7fd f87e 	bl	80057fc <dwt_read32bitoffsetreg>
 8008700:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8008704:	8023      	strh	r3, [r4, #0]
 8008706:	f3c0 400b 	ubfx	r0, r0, #16, #12
 800870a:	8060      	strh	r0, [r4, #2]
 800870c:	2200      	movs	r2, #0
 800870e:	49c0      	ldr	r1, [pc, #768]	; (8008a10 <dwt_ioctl+0x126c>)
 8008710:	4630      	mov	r0, r6
 8008712:	f7fd f873 	bl	80057fc <dwt_read32bitoffsetreg>
 8008716:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800871a:	80a3      	strh	r3, [r4, #4]
 800871c:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8008720:	80e0      	strh	r0, [r4, #6]
 8008722:	2200      	movs	r2, #0
 8008724:	49bb      	ldr	r1, [pc, #748]	; (8008a14 <dwt_ioctl+0x1270>)
 8008726:	4630      	mov	r0, r6
 8008728:	f7fd f868 	bl	80057fc <dwt_read32bitoffsetreg>
 800872c:	7220      	strb	r0, [r4, #8]
 800872e:	0c00      	lsrs	r0, r0, #16
 8008730:	7260      	strb	r0, [r4, #9]
 8008732:	2200      	movs	r2, #0
 8008734:	49b8      	ldr	r1, [pc, #736]	; (8008a18 <dwt_ioctl+0x1274>)
 8008736:	4630      	mov	r0, r6
 8008738:	f7fd f860 	bl	80057fc <dwt_read32bitoffsetreg>
 800873c:	f3c0 430b 	ubfx	r3, r0, #16, #12
 8008740:	81a3      	strh	r3, [r4, #12]
 8008742:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8008746:	8160      	strh	r0, [r4, #10]
 8008748:	2200      	movs	r2, #0
 800874a:	49b4      	ldr	r1, [pc, #720]	; (8008a1c <dwt_ioctl+0x1278>)
 800874c:	4630      	mov	r0, r6
 800874e:	f7fd f855 	bl	80057fc <dwt_read32bitoffsetreg>
 8008752:	f3c0 430b 	ubfx	r3, r0, #16, #12
 8008756:	f8a4 300f 	strh.w	r3, [r4, #15]
 800875a:	73a0      	strb	r0, [r4, #14]
 800875c:	2200      	movs	r2, #0
 800875e:	49b0      	ldr	r1, [pc, #704]	; (8008a20 <dwt_ioctl+0x127c>)
 8008760:	4630      	mov	r0, r6
 8008762:	f7fd f84b 	bl	80057fc <dwt_read32bitoffsetreg>
 8008766:	7460      	strb	r0, [r4, #17]
 8008768:	0c00      	lsrs	r0, r0, #16
 800876a:	74a0      	strb	r0, [r4, #18]
 800876c:	2200      	movs	r2, #0
 800876e:	49ad      	ldr	r1, [pc, #692]	; (8008a24 <dwt_ioctl+0x1280>)
 8008770:	4630      	mov	r0, r6
 8008772:	f7fd f843 	bl	80057fc <dwt_read32bitoffsetreg>
 8008776:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800877a:	f8a4 0013 	strh.w	r0, [r4, #19]
 800877e:	2500      	movs	r5, #0
 8008780:	7565      	strb	r5, [r4, #21]
 8008782:	75a5      	strb	r5, [r4, #22]
 8008784:	462a      	mov	r2, r5
 8008786:	49a8      	ldr	r1, [pc, #672]	; (8008a28 <dwt_ioctl+0x1284>)
 8008788:	4630      	mov	r0, r6
 800878a:	f7fd f85f 	bl	800584c <dwt_read8bitoffsetreg>
 800878e:	75e0      	strb	r0, [r4, #23]
 8008790:	f7ff b8b2 	b.w	80078f8 <dwt_ioctl+0x154>
 8008794:	4611      	mov	r1, r2
 8008796:	f7fd fc5f 	bl	8006058 <ull_configeventcounters>
 800879a:	2500      	movs	r5, #0
 800879c:	f7ff b8ac 	b.w	80078f8 <dwt_ioctl+0x154>
 80087a0:	2c00      	cmp	r4, #0
 80087a2:	f000 869d 	beq.w	80094e0 <dwt_ioctl+0x1d3c>
 80087a6:	8823      	ldrh	r3, [r4, #0]
 80087a8:	2200      	movs	r2, #0
 80087aa:	49a0      	ldr	r1, [pc, #640]	; (8008a2c <dwt_ioctl+0x1288>)
 80087ac:	f7fd fc67 	bl	800607e <dwt_write16bitoffsetreg>
 80087b0:	2500      	movs	r5, #0
 80087b2:	f7ff b8a1 	b.w	80078f8 <dwt_ioctl+0x154>
 80087b6:	2c00      	cmp	r4, #0
 80087b8:	f000 8695 	beq.w	80094e6 <dwt_ioctl+0x1d42>
 80087bc:	6825      	ldr	r5, [r4, #0]
 80087be:	b935      	cbnz	r5, 80087ce <dwt_ioctl+0x102a>
 80087c0:	2300      	movs	r3, #0
 80087c2:	461a      	mov	r2, r3
 80087c4:	499a      	ldr	r1, [pc, #616]	; (8008a30 <dwt_ioctl+0x128c>)
 80087c6:	f7fd fc5a 	bl	800607e <dwt_write16bitoffsetreg>
 80087ca:	f7ff b895 	b.w	80078f8 <dwt_ioctl+0x154>
 80087ce:	7962      	ldrb	r2, [r4, #5]
 80087d0:	7923      	ldrb	r3, [r4, #4]
 80087d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80087d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80087da:	2200      	movs	r2, #0
 80087dc:	4994      	ldr	r1, [pc, #592]	; (8008a30 <dwt_ioctl+0x128c>)
 80087de:	f7fd fc4e 	bl	800607e <dwt_write16bitoffsetreg>
 80087e2:	2500      	movs	r5, #0
 80087e4:	f7ff b888 	b.w	80078f8 <dwt_ioctl+0x154>
 80087e8:	2c00      	cmp	r4, #0
 80087ea:	f000 867f 	beq.w	80094ec <dwt_ioctl+0x1d48>
 80087ee:	6823      	ldr	r3, [r4, #0]
 80087f0:	b94b      	cbnz	r3, 8008806 <dwt_ioctl+0x1062>
 80087f2:	2500      	movs	r5, #0
 80087f4:	9500      	str	r5, [sp, #0]
 80087f6:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 80087fa:	462a      	mov	r2, r5
 80087fc:	2110      	movs	r1, #16
 80087fe:	f7fe fc6d 	bl	80070dc <dwt_modify16bitoffsetreg>
 8008802:	f7ff b879 	b.w	80078f8 <dwt_ioctl+0x154>
 8008806:	2200      	movs	r2, #0
 8008808:	2134      	movs	r1, #52	; 0x34
 800880a:	f7fd fd39 	bl	8006280 <dwt_write32bitoffsetreg>
 800880e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008818:	2200      	movs	r2, #0
 800881a:	2110      	movs	r1, #16
 800881c:	4630      	mov	r0, r6
 800881e:	f7fe fc5d 	bl	80070dc <dwt_modify16bitoffsetreg>
 8008822:	2500      	movs	r5, #0
 8008824:	f7ff b868 	b.w	80078f8 <dwt_ioctl+0x154>
 8008828:	2c00      	cmp	r4, #0
 800882a:	f000 8662 	beq.w	80094f2 <dwt_ioctl+0x1d4e>
 800882e:	8861      	ldrh	r1, [r4, #2]
 8008830:	f7fd fca2 	bl	8006178 <ull_aon_read>
 8008834:	7020      	strb	r0, [r4, #0]
 8008836:	2500      	movs	r5, #0
 8008838:	f7ff b85e 	b.w	80078f8 <dwt_ioctl+0x154>
 800883c:	2c00      	cmp	r4, #0
 800883e:	f000 865b 	beq.w	80094f8 <dwt_ioctl+0x1d54>
 8008842:	78a2      	ldrb	r2, [r4, #2]
 8008844:	8821      	ldrh	r1, [r4, #0]
 8008846:	f7fd fcb7 	bl	80061b8 <ull_aon_write>
 800884a:	2500      	movs	r5, #0
 800884c:	f7ff b854 	b.w	80078f8 <dwt_ioctl+0x154>
 8008850:	4b78      	ldr	r3, [pc, #480]	; (8008a34 <dwt_ioctl+0x1290>)
 8008852:	4a79      	ldr	r2, [pc, #484]	; (8008a38 <dwt_ioctl+0x1294>)
 8008854:	2d01      	cmp	r5, #1
 8008856:	bf18      	it	ne
 8008858:	4613      	movne	r3, r2
 800885a:	2d01      	cmp	r5, #1
 800885c:	4977      	ldr	r1, [pc, #476]	; (8008a3c <dwt_ioctl+0x1298>)
 800885e:	bf18      	it	ne
 8008860:	f04f 110c 	movne.w	r1, #786444	; 0xc000c
 8008864:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8008866:	7bd2      	ldrb	r2, [r2, #15]
 8008868:	2a01      	cmp	r2, #1
 800886a:	d012      	beq.n	8008892 <dwt_ioctl+0x10ee>
 800886c:	2a03      	cmp	r2, #3
 800886e:	d117      	bne.n	80088a0 <dwt_ioctl+0x10fc>
 8008870:	f5a2 12c0 	sub.w	r2, r2, #1572864	; 0x180000
 8008874:	3a01      	subs	r2, #1
 8008876:	441a      	add	r2, r3
 8008878:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800887c:	f7fc ffd4 	bl	8005828 <dwt_read16bitoffsetreg>
 8008880:	09c0      	lsrs	r0, r0, #7
 8008882:	8020      	strh	r0, [r4, #0]
 8008884:	8825      	ldrh	r5, [r4, #0]
 8008886:	3500      	adds	r5, #0
 8008888:	bf18      	it	ne
 800888a:	2501      	movne	r5, #1
 800888c:	426d      	negs	r5, r5
 800888e:	f7ff b833 	b.w	80078f8 <dwt_ioctl+0x154>
 8008892:	2202      	movs	r2, #2
 8008894:	4619      	mov	r1, r3
 8008896:	f7fc ffc7 	bl	8005828 <dwt_read16bitoffsetreg>
 800889a:	09c0      	lsrs	r0, r0, #7
 800889c:	8020      	strh	r0, [r4, #0]
 800889e:	e7f1      	b.n	8008884 <dwt_ioctl+0x10e0>
 80088a0:	2202      	movs	r2, #2
 80088a2:	f7fc ffc1 	bl	8005828 <dwt_read16bitoffsetreg>
 80088a6:	09c0      	lsrs	r0, r0, #7
 80088a8:	8020      	strh	r0, [r4, #0]
 80088aa:	e7eb      	b.n	8008884 <dwt_ioctl+0x10e0>
 80088ac:	2c00      	cmp	r4, #0
 80088ae:	f000 8626 	beq.w	80094fe <dwt_ioctl+0x1d5a>
 80088b2:	7821      	ldrb	r1, [r4, #0]
 80088b4:	f7fe fc48 	bl	8007148 <ull_setleds>
 80088b8:	2500      	movs	r5, #0
 80088ba:	f7ff b81d 	b.w	80078f8 <dwt_ioctl+0x154>
 80088be:	4611      	mov	r1, r2
 80088c0:	f7fe fb18 	bl	8006ef4 <ull_setdwstate>
 80088c4:	2500      	movs	r5, #0
 80088c6:	f7ff b817 	b.w	80078f8 <dwt_ioctl+0x154>
 80088ca:	9400      	str	r4, [sp, #0]
 80088cc:	2304      	movs	r3, #4
 80088ce:	2200      	movs	r2, #0
 80088d0:	211c      	movs	r1, #28
 80088d2:	f7fc ff89 	bl	80057e8 <dwt_readfromdevice>
 80088d6:	2500      	movs	r5, #0
 80088d8:	f7ff b80e 	b.w	80078f8 <dwt_ioctl+0x154>
 80088dc:	2c00      	cmp	r4, #0
 80088de:	f000 8611 	beq.w	8009504 <dwt_ioctl+0x1d60>
 80088e2:	2202      	movs	r2, #2
 80088e4:	2144      	movs	r1, #68	; 0x44
 80088e6:	f7fc ff9f 	bl	8005828 <dwt_read16bitoffsetreg>
 80088ea:	f3c0 2000 	ubfx	r0, r0, #8, #1
 80088ee:	7020      	strb	r0, [r4, #0]
 80088f0:	2500      	movs	r5, #0
 80088f2:	f7ff b801 	b.w	80078f8 <dwt_ioctl+0x154>
 80088f6:	2c00      	cmp	r4, #0
 80088f8:	f000 8607 	beq.w	800950a <dwt_ioctl+0x1d66>
 80088fc:	2200      	movs	r2, #0
 80088fe:	2144      	movs	r1, #68	; 0x44
 8008900:	f7fc ffa4 	bl	800584c <dwt_read8bitoffsetreg>
 8008904:	f000 0001 	and.w	r0, r0, #1
 8008908:	7020      	strb	r0, [r4, #0]
 800890a:	2500      	movs	r5, #0
 800890c:	f7fe bff4 	b.w	80078f8 <dwt_ioctl+0x154>
 8008910:	2c00      	cmp	r4, #0
 8008912:	f000 85fd 	beq.w	8009510 <dwt_ioctl+0x1d6c>
 8008916:	8862      	ldrh	r2, [r4, #2]
 8008918:	8821      	ldrh	r1, [r4, #0]
 800891a:	f7fe fb49 	bl	8006fb0 <ull_configureframefilter>
 800891e:	2500      	movs	r5, #0
 8008920:	f7fe bfea 	b.w	80078f8 <dwt_ioctl+0x154>
 8008924:	9400      	str	r4, [sp, #0]
 8008926:	2308      	movs	r3, #8
 8008928:	2200      	movs	r2, #0
 800892a:	2104      	movs	r1, #4
 800892c:	f7fd fb4a 	bl	8005fc4 <dwt_writetodevice>
 8008930:	2500      	movs	r5, #0
 8008932:	f7fe bfe1 	b.w	80078f8 <dwt_ioctl+0x154>
 8008936:	9400      	str	r4, [sp, #0]
 8008938:	2308      	movs	r3, #8
 800893a:	2200      	movs	r2, #0
 800893c:	2104      	movs	r1, #4
 800893e:	f7fc ff53 	bl	80057e8 <dwt_readfromdevice>
 8008942:	2500      	movs	r5, #0
 8008944:	f7fe bfd8 	b.w	80078f8 <dwt_ioctl+0x154>
 8008948:	2c00      	cmp	r4, #0
 800894a:	f000 85e4 	beq.w	8009516 <dwt_ioctl+0x1d72>
 800894e:	8823      	ldrh	r3, [r4, #0]
 8008950:	2202      	movs	r2, #2
 8008952:	210c      	movs	r1, #12
 8008954:	f7fd fb93 	bl	800607e <dwt_write16bitoffsetreg>
 8008958:	2500      	movs	r5, #0
 800895a:	f7fe bfcd 	b.w	80078f8 <dwt_ioctl+0x154>
 800895e:	2c00      	cmp	r4, #0
 8008960:	f000 85dc 	beq.w	800951c <dwt_ioctl+0x1d78>
 8008964:	8823      	ldrh	r3, [r4, #0]
 8008966:	2200      	movs	r2, #0
 8008968:	210c      	movs	r1, #12
 800896a:	f7fd fb88 	bl	800607e <dwt_write16bitoffsetreg>
 800896e:	2500      	movs	r5, #0
 8008970:	f7fe bfc2 	b.w	80078f8 <dwt_ioctl+0x154>
 8008974:	4621      	mov	r1, r4
 8008976:	f7fd fb03 	bl	8005f80 <ull_readrxtimestamp>
 800897a:	2500      	movs	r5, #0
 800897c:	f7fe bfbc 	b.w	80078f8 <dwt_ioctl+0x154>
 8008980:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008982:	7bdb      	ldrb	r3, [r3, #15]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d00b      	beq.n	80089a0 <dwt_ioctl+0x11fc>
 8008988:	2b03      	cmp	r3, #3
 800898a:	d112      	bne.n	80089b2 <dwt_ioctl+0x120e>
 800898c:	9400      	str	r4, [sp, #0]
 800898e:	2305      	movs	r3, #5
 8008990:	2220      	movs	r2, #32
 8008992:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8008996:	f7fc ff27 	bl	80057e8 <dwt_readfromdevice>
 800899a:	2500      	movs	r5, #0
 800899c:	f7fe bfac 	b.w	80078f8 <dwt_ioctl+0x154>
 80089a0:	9400      	str	r4, [sp, #0]
 80089a2:	2305      	movs	r3, #5
 80089a4:	2200      	movs	r2, #0
 80089a6:	4926      	ldr	r1, [pc, #152]	; (8008a40 <dwt_ioctl+0x129c>)
 80089a8:	f7fc ff1e 	bl	80057e8 <dwt_readfromdevice>
 80089ac:	2500      	movs	r5, #0
 80089ae:	f7fe bfa3 	b.w	80078f8 <dwt_ioctl+0x154>
 80089b2:	9400      	str	r4, [sp, #0]
 80089b4:	2305      	movs	r3, #5
 80089b6:	2200      	movs	r2, #0
 80089b8:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 80089bc:	f7fc ff14 	bl	80057e8 <dwt_readfromdevice>
 80089c0:	2500      	movs	r5, #0
 80089c2:	f7fe bf99 	b.w	80078f8 <dwt_ioctl+0x154>
 80089c6:	2500      	movs	r5, #0
 80089c8:	f804 5b01 	strb.w	r5, [r4], #1
 80089cc:	9400      	str	r4, [sp, #0]
 80089ce:	2304      	movs	r3, #4
 80089d0:	462a      	mov	r2, r5
 80089d2:	2170      	movs	r1, #112	; 0x70
 80089d4:	f7fc ff08 	bl	80057e8 <dwt_readfromdevice>
 80089d8:	f7fe bf8e 	b.w	80078f8 <dwt_ioctl+0x154>
 80089dc:	2c00      	cmp	r4, #0
 80089de:	f000 85a0 	beq.w	8009522 <dwt_ioctl+0x1d7e>
 80089e2:	2201      	movs	r2, #1
 80089e4:	2164      	movs	r1, #100	; 0x64
 80089e6:	f7fc ff09 	bl	80057fc <dwt_read32bitoffsetreg>
 80089ea:	6020      	str	r0, [r4, #0]
 80089ec:	2500      	movs	r5, #0
 80089ee:	f7fe bf83 	b.w	80078f8 <dwt_ioctl+0x154>
 80089f2:	2c00      	cmp	r4, #0
 80089f4:	f000 8598 	beq.w	8009528 <dwt_ioctl+0x1d84>
 80089f8:	2200      	movs	r2, #0
 80089fa:	2164      	movs	r1, #100	; 0x64
 80089fc:	f7fc fefe 	bl	80057fc <dwt_read32bitoffsetreg>
 8008a00:	6020      	str	r0, [r4, #0]
 8008a02:	2500      	movs	r5, #0
 8008a04:	f7fe bf78 	b.w	80078f8 <dwt_ioctl+0x154>
 8008a08:	00010030 	.word	0x00010030
 8008a0c:	000f0004 	.word	0x000f0004
 8008a10:	000f0008 	.word	0x000f0008
 8008a14:	000f000c 	.word	0x000f000c
 8008a18:	000f0010 	.word	0x000f0010
 8008a1c:	000f0014 	.word	0x000f0014
 8008a20:	000f0018 	.word	0x000f0018
 8008a24:	000f001c 	.word	0x000f001c
 8008a28:	000f0028 	.word	0x000f0028
 8008a2c:	00060004 	.word	0x00060004
 8008a30:	0011001a 	.word	0x0011001a
 8008a34:	00180034 	.word	0x00180034
 8008a38:	0018002c 	.word	0x0018002c
 8008a3c:	000c0014 	.word	0x000c0014
 8008a40:	00180020 	.word	0x00180020
 8008a44:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008a46:	7bdb      	ldrb	r3, [r3, #15]
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d00b      	beq.n	8008a64 <dwt_ioctl+0x12c0>
 8008a4c:	2b03      	cmp	r3, #3
 8008a4e:	d112      	bne.n	8008a76 <dwt_ioctl+0x12d2>
 8008a50:	9400      	str	r4, [sp, #0]
 8008a52:	2305      	movs	r3, #5
 8008a54:	2228      	movs	r2, #40	; 0x28
 8008a56:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8008a5a:	f7fc fec5 	bl	80057e8 <dwt_readfromdevice>
 8008a5e:	2500      	movs	r5, #0
 8008a60:	f7fe bf4a 	b.w	80078f8 <dwt_ioctl+0x154>
 8008a64:	9400      	str	r4, [sp, #0]
 8008a66:	2305      	movs	r3, #5
 8008a68:	2200      	movs	r2, #0
 8008a6a:	49d3      	ldr	r1, [pc, #844]	; (8008db8 <dwt_ioctl+0x1614>)
 8008a6c:	f7fc febc 	bl	80057e8 <dwt_readfromdevice>
 8008a70:	2500      	movs	r5, #0
 8008a72:	f7fe bf41 	b.w	80078f8 <dwt_ioctl+0x154>
 8008a76:	9400      	str	r4, [sp, #0]
 8008a78:	2305      	movs	r3, #5
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	49cf      	ldr	r1, [pc, #828]	; (8008dbc <dwt_ioctl+0x1618>)
 8008a7e:	f7fc feb3 	bl	80057e8 <dwt_readfromdevice>
 8008a82:	2500      	movs	r5, #0
 8008a84:	f7fe bf38 	b.w	80078f8 <dwt_ioctl+0x154>
 8008a88:	2c00      	cmp	r4, #0
 8008a8a:	f000 8550 	beq.w	800952e <dwt_ioctl+0x1d8a>
 8008a8e:	2200      	movs	r2, #0
 8008a90:	211c      	movs	r1, #28
 8008a92:	f7fc feb3 	bl	80057fc <dwt_read32bitoffsetreg>
 8008a96:	6020      	str	r0, [r4, #0]
 8008a98:	2500      	movs	r5, #0
 8008a9a:	f7fe bf2d 	b.w	80078f8 <dwt_ioctl+0x154>
 8008a9e:	2c00      	cmp	r4, #0
 8008aa0:	f000 8548 	beq.w	8009534 <dwt_ioctl+0x1d90>
 8008aa4:	8825      	ldrh	r5, [r4, #0]
 8008aa6:	6867      	ldr	r7, [r4, #4]
 8008aa8:	7a23      	ldrb	r3, [r4, #8]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	f000 8545 	beq.w	800953a <dwt_ioctl+0x1d96>
 8008ab0:	463c      	mov	r4, r7
 8008ab2:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8008ab6:	4629      	mov	r1, r5
 8008ab8:	4630      	mov	r0, r6
 8008aba:	f7fd fb3b 	bl	8006134 <_dwt_otpread>
 8008abe:	f844 0b04 	str.w	r0, [r4], #4
 8008ac2:	3501      	adds	r5, #1
 8008ac4:	b2ad      	uxth	r5, r5
 8008ac6:	42bc      	cmp	r4, r7
 8008ac8:	d1f5      	bne.n	8008ab6 <dwt_ioctl+0x1312>
 8008aca:	2500      	movs	r5, #0
 8008acc:	f7fe bf14 	b.w	80078f8 <dwt_ioctl+0x154>
 8008ad0:	2c00      	cmp	r4, #0
 8008ad2:	f000 8535 	beq.w	8009540 <dwt_ioctl+0x1d9c>
 8008ad6:	7823      	ldrb	r3, [r4, #0]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	2128      	movs	r1, #40	; 0x28
 8008adc:	f7fd fa7d 	bl	8005fda <dwt_write8bitoffsetreg>
 8008ae0:	2500      	movs	r5, #0
 8008ae2:	f7fe bf09 	b.w	80078f8 <dwt_ioctl+0x154>
 8008ae6:	f7fe fa87 	bl	8006ff8 <ull_run_pgfcal>
 8008aea:	4605      	mov	r5, r0
 8008aec:	f7fe bf04 	b.w	80078f8 <dwt_ioctl+0x154>
 8008af0:	4611      	mov	r1, r2
 8008af2:	f7fe fb77 	bl	80071e4 <ull_pgf_cal>
 8008af6:	4605      	mov	r5, r0
 8008af8:	f7fe befe 	b.w	80078f8 <dwt_ioctl+0x154>
 8008afc:	2c00      	cmp	r4, #0
 8008afe:	f000 8522 	beq.w	8009546 <dwt_ioctl+0x1da2>
 8008b02:	78a5      	ldrb	r5, [r4, #2]
 8008b04:	2101      	movs	r1, #1
 8008b06:	f7fd faeb 	bl	80060e0 <ull_force_clocks>
 8008b0a:	2100      	movs	r1, #0
 8008b0c:	4630      	mov	r0, r6
 8008b0e:	f7fd ff8b 	bl	8006a28 <ull_enable_rf_tx>
 8008b12:	4630      	mov	r0, r6
 8008b14:	f7fd ffbc 	bl	8006a90 <ull_enable_rftx_blocks>
 8008b18:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	49a8      	ldr	r1, [pc, #672]	; (8008dc0 <dwt_ioctl+0x161c>)
 8008b20:	4630      	mov	r0, r6
 8008b22:	f7fd fa5a 	bl	8005fda <dwt_write8bitoffsetreg>
 8008b26:	2301      	movs	r3, #1
 8008b28:	9300      	str	r3, [sp, #0]
 8008b2a:	23ff      	movs	r3, #255	; 0xff
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	49a5      	ldr	r1, [pc, #660]	; (8008dc4 <dwt_ioctl+0x1620>)
 8008b30:	4630      	mov	r0, r6
 8008b32:	f7fe f921 	bl	8006d78 <dwt_modify8bitoffsetreg>
 8008b36:	4fa3      	ldr	r7, [pc, #652]	; (8008dc4 <dwt_ioctl+0x1620>)
 8008b38:	2500      	movs	r5, #0
 8008b3a:	462a      	mov	r2, r5
 8008b3c:	4639      	mov	r1, r7
 8008b3e:	4630      	mov	r0, r6
 8008b40:	f7fc fe84 	bl	800584c <dwt_read8bitoffsetreg>
 8008b44:	f010 0f01 	tst.w	r0, #1
 8008b48:	d1f7      	bne.n	8008b3a <dwt_ioctl+0x1396>
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	499e      	ldr	r1, [pc, #632]	; (8008dc8 <dwt_ioctl+0x1624>)
 8008b4e:	4630      	mov	r0, r6
 8008b50:	f7fc fe6a 	bl	8005828 <dwt_read16bitoffsetreg>
 8008b54:	4605      	mov	r5, r0
 8008b56:	4630      	mov	r0, r6
 8008b58:	f7fd fe30 	bl	80067bc <ull_disable_rftx_blocks>
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	4630      	mov	r0, r6
 8008b60:	f7fd fe36 	bl	80067d0 <ull_disable_rf_tx>
 8008b64:	2105      	movs	r1, #5
 8008b66:	4630      	mov	r0, r6
 8008b68:	f7fd faba 	bl	80060e0 <ull_force_clocks>
 8008b6c:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8008b70:	8025      	strh	r5, [r4, #0]
 8008b72:	2500      	movs	r5, #0
 8008b74:	f7fe bec0 	b.w	80078f8 <dwt_ioctl+0x154>
 8008b78:	2102      	movs	r1, #2
 8008b7a:	f7fe f9bb 	bl	8006ef4 <ull_setdwstate>
 8008b7e:	2101      	movs	r1, #1
 8008b80:	4630      	mov	r0, r6
 8008b82:	f7fe f9b7 	bl	8006ef4 <ull_setdwstate>
 8008b86:	2432      	movs	r4, #50	; 0x32
 8008b88:	f04f 0814 	mov.w	r8, #20
 8008b8c:	2700      	movs	r7, #0
 8008b8e:	2544      	movs	r5, #68	; 0x44
 8008b90:	4640      	mov	r0, r8
 8008b92:	f7f8 fce2 	bl	800155a <deca_usleep>
 8008b96:	463a      	mov	r2, r7
 8008b98:	4629      	mov	r1, r5
 8008b9a:	4630      	mov	r0, r6
 8008b9c:	f7fc fe56 	bl	800584c <dwt_read8bitoffsetreg>
 8008ba0:	f010 0f02 	tst.w	r0, #2
 8008ba4:	d105      	bne.n	8008bb2 <dwt_ioctl+0x140e>
 8008ba6:	1e63      	subs	r3, r4, #1
 8008ba8:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8008bac:	d1f0      	bne.n	8008b90 <dwt_ioctl+0x13ec>
 8008bae:	2501      	movs	r5, #1
 8008bb0:	e000      	b.n	8008bb4 <dwt_ioctl+0x1410>
 8008bb2:	2500      	movs	r5, #0
 8008bb4:	426d      	negs	r5, r5
 8008bb6:	f7fe be9f 	b.w	80078f8 <dwt_ioctl+0x154>
 8008bba:	2c00      	cmp	r4, #0
 8008bbc:	f000 84c6 	beq.w	800954c <dwt_ioctl+0x1da8>
 8008bc0:	7823      	ldrb	r3, [r4, #0]
 8008bc2:	031b      	lsls	r3, r3, #12
 8008bc4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008bc8:	7862      	ldrb	r2, [r4, #1]
 8008bca:	2a01      	cmp	r2, #1
 8008bcc:	bf08      	it	eq
 8008bce:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 8008bd2:	9300      	str	r3, [sp, #0]
 8008bd4:	f46f 43e2 	mvn.w	r3, #28928	; 0x7100
 8008bd8:	2200      	movs	r2, #0
 8008bda:	497c      	ldr	r1, [pc, #496]	; (8008dcc <dwt_ioctl+0x1628>)
 8008bdc:	f7fd fee2 	bl	80069a4 <dwt_modify32bitoffsetreg>
 8008be0:	2500      	movs	r5, #0
 8008be2:	f7fe be89 	b.w	80078f8 <dwt_ioctl+0x154>
 8008be6:	2c00      	cmp	r4, #0
 8008be8:	f000 84b3 	beq.w	8009552 <dwt_ioctl+0x1dae>
 8008bec:	6862      	ldr	r2, [r4, #4]
 8008bee:	6821      	ldr	r1, [r4, #0]
 8008bf0:	f7fe f818 	bl	8006c24 <ull_setgpiomode>
 8008bf4:	2500      	movs	r5, #0
 8008bf6:	f7fe be7f 	b.w	80078f8 <dwt_ioctl+0x154>
 8008bfa:	2c00      	cmp	r4, #0
 8008bfc:	f000 84ac 	beq.w	8009558 <dwt_ioctl+0x1db4>
 8008c00:	8823      	ldrh	r3, [r4, #0]
 8008c02:	2200      	movs	r2, #0
 8008c04:	4972      	ldr	r1, [pc, #456]	; (8008dd0 <dwt_ioctl+0x162c>)
 8008c06:	f7fd fa3a 	bl	800607e <dwt_write16bitoffsetreg>
 8008c0a:	2500      	movs	r5, #0
 8008c0c:	f7fe be74 	b.w	80078f8 <dwt_ioctl+0x154>
 8008c10:	2c00      	cmp	r4, #0
 8008c12:	f000 84a4 	beq.w	800955e <dwt_ioctl+0x1dba>
 8008c16:	6862      	ldr	r2, [r4, #4]
 8008c18:	8821      	ldrh	r1, [r4, #0]
 8008c1a:	f7fe fb13 	bl	8007244 <ull_setgpiovalue>
 8008c1e:	2500      	movs	r5, #0
 8008c20:	f7fe be6a 	b.w	80078f8 <dwt_ioctl+0x154>
 8008c24:	2c00      	cmp	r4, #0
 8008c26:	f000 849d 	beq.w	8009564 <dwt_ioctl+0x1dc0>
 8008c2a:	7865      	ldrb	r5, [r4, #1]
 8008c2c:	7823      	ldrb	r3, [r4, #0]
 8008c2e:	b18b      	cbz	r3, 8008c54 <dwt_ioctl+0x14b0>
 8008c30:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008c32:	2200      	movs	r2, #0
 8008c34:	73da      	strb	r2, [r3, #15]
 8008c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c3a:	2208      	movs	r2, #8
 8008c3c:	b1e5      	cbz	r5, 8008c78 <dwt_ioctl+0x14d4>
 8008c3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c42:	9200      	str	r2, [sp, #0]
 8008c44:	2200      	movs	r2, #0
 8008c46:	2110      	movs	r1, #16
 8008c48:	4630      	mov	r0, r6
 8008c4a:	f7fd feab 	bl	80069a4 <dwt_modify32bitoffsetreg>
 8008c4e:	2500      	movs	r5, #0
 8008c50:	f7fe be52 	b.w	80078f8 <dwt_ioctl+0x154>
 8008c54:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008c56:	2201      	movs	r2, #1
 8008c58:	73da      	strb	r2, [r3, #15]
 8008c5a:	2318      	movs	r3, #24
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	495d      	ldr	r1, [pc, #372]	; (8008dd4 <dwt_ioctl+0x1630>)
 8008c60:	f7fd fb0e 	bl	8006280 <dwt_write32bitoffsetreg>
 8008c64:	23e8      	movs	r3, #232	; 0xe8
 8008c66:	2200      	movs	r2, #0
 8008c68:	495b      	ldr	r1, [pc, #364]	; (8008dd8 <dwt_ioctl+0x1634>)
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	f7fd fb08 	bl	8006280 <dwt_write32bitoffsetreg>
 8008c70:	f06f 0308 	mvn.w	r3, #8
 8008c74:	2200      	movs	r2, #0
 8008c76:	e7e1      	b.n	8008c3c <dwt_ioctl+0x1498>
 8008c78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008c7c:	e7e1      	b.n	8008c42 <dwt_ioctl+0x149e>
 8008c7e:	2c00      	cmp	r4, #0
 8008c80:	f000 8473 	beq.w	800956a <dwt_ioctl+0x1dc6>
 8008c84:	6823      	ldr	r3, [r4, #0]
 8008c86:	2200      	movs	r2, #0
 8008c88:	2130      	movs	r1, #48	; 0x30
 8008c8a:	f7fd faf9 	bl	8006280 <dwt_write32bitoffsetreg>
 8008c8e:	2500      	movs	r5, #0
 8008c90:	f7fe be32 	b.w	80078f8 <dwt_ioctl+0x154>
 8008c94:	2c00      	cmp	r4, #0
 8008c96:	f000 846b 	beq.w	8009570 <dwt_ioctl+0x1dcc>
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	4629      	mov	r1, r5
 8008c9e:	f7fc fdad 	bl	80057fc <dwt_read32bitoffsetreg>
 8008ca2:	6020      	str	r0, [r4, #0]
 8008ca4:	2500      	movs	r5, #0
 8008ca6:	f7fe be27 	b.w	80078f8 <dwt_ioctl+0x154>
 8008caa:	4623      	mov	r3, r4
 8008cac:	2200      	movs	r2, #0
 8008cae:	4629      	mov	r1, r5
 8008cb0:	f7fd fae6 	bl	8006280 <dwt_write32bitoffsetreg>
 8008cb4:	2500      	movs	r5, #0
 8008cb6:	f7fe be1f 	b.w	80078f8 <dwt_ioctl+0x154>
 8008cba:	2c00      	cmp	r4, #0
 8008cbc:	f000 845b 	beq.w	8009576 <dwt_ioctl+0x1dd2>
 8008cc0:	2203      	movs	r2, #3
 8008cc2:	4946      	ldr	r1, [pc, #280]	; (8008ddc <dwt_ioctl+0x1638>)
 8008cc4:	f7fc fdc2 	bl	800584c <dwt_read8bitoffsetreg>
 8008cc8:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8008ccc:	7020      	strb	r0, [r4, #0]
 8008cce:	2500      	movs	r5, #0
 8008cd0:	f7fe be12 	b.w	80078f8 <dwt_ioctl+0x154>
 8008cd4:	2c00      	cmp	r4, #0
 8008cd6:	f000 8451 	beq.w	800957c <dwt_ioctl+0x1dd8>
 8008cda:	6823      	ldr	r3, [r4, #0]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	2144      	movs	r1, #68	; 0x44
 8008ce0:	f7fd face 	bl	8006280 <dwt_write32bitoffsetreg>
 8008ce4:	2500      	movs	r5, #0
 8008ce6:	f7fe be07 	b.w	80078f8 <dwt_ioctl+0x154>
 8008cea:	2c00      	cmp	r4, #0
 8008cec:	f000 8449 	beq.w	8009582 <dwt_ioctl+0x1dde>
 8008cf0:	8823      	ldrh	r3, [r4, #0]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	2148      	movs	r1, #72	; 0x48
 8008cf6:	f7fd f9c2 	bl	800607e <dwt_write16bitoffsetreg>
 8008cfa:	2500      	movs	r5, #0
 8008cfc:	f7fe bdfc 	b.w	80078f8 <dwt_ioctl+0x154>
 8008d00:	2c00      	cmp	r4, #0
 8008d02:	f000 8441 	beq.w	8009588 <dwt_ioctl+0x1de4>
 8008d06:	2200      	movs	r2, #0
 8008d08:	2144      	movs	r1, #68	; 0x44
 8008d0a:	f7fc fd77 	bl	80057fc <dwt_read32bitoffsetreg>
 8008d0e:	6020      	str	r0, [r4, #0]
 8008d10:	2500      	movs	r5, #0
 8008d12:	f7fe bdf1 	b.w	80078f8 <dwt_ioctl+0x154>
 8008d16:	2c00      	cmp	r4, #0
 8008d18:	f000 8439 	beq.w	800958e <dwt_ioctl+0x1dea>
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	2148      	movs	r1, #72	; 0x48
 8008d20:	f7fc fd82 	bl	8005828 <dwt_read16bitoffsetreg>
 8008d24:	6020      	str	r0, [r4, #0]
 8008d26:	2500      	movs	r5, #0
 8008d28:	f7fe bde6 	b.w	80078f8 <dwt_ioctl+0x154>
 8008d2c:	2c00      	cmp	r4, #0
 8008d2e:	f000 8431 	beq.w	8009594 <dwt_ioctl+0x1df0>
 8008d32:	7823      	ldrb	r3, [r4, #0]
 8008d34:	2200      	movs	r2, #0
 8008d36:	492a      	ldr	r1, [pc, #168]	; (8008de0 <dwt_ioctl+0x163c>)
 8008d38:	f7fd f94f 	bl	8005fda <dwt_write8bitoffsetreg>
 8008d3c:	2500      	movs	r5, #0
 8008d3e:	f7fe bddb 	b.w	80078f8 <dwt_ioctl+0x154>
 8008d42:	2c00      	cmp	r4, #0
 8008d44:	f000 8429 	beq.w	800959a <dwt_ioctl+0x1df6>
 8008d48:	2200      	movs	r2, #0
 8008d4a:	2144      	movs	r1, #68	; 0x44
 8008d4c:	f7fc fd7e 	bl	800584c <dwt_read8bitoffsetreg>
 8008d50:	7020      	strb	r0, [r4, #0]
 8008d52:	2500      	movs	r5, #0
 8008d54:	f7fe bdd0 	b.w	80078f8 <dwt_ioctl+0x154>
 8008d58:	2c00      	cmp	r4, #0
 8008d5a:	f000 8421 	beq.w	80095a0 <dwt_ioctl+0x1dfc>
 8008d5e:	f7fd f949 	bl	8005ff4 <ull_getframelength>
 8008d62:	6020      	str	r0, [r4, #0]
 8008d64:	2500      	movs	r5, #0
 8008d66:	f7fe bdc7 	b.w	80078f8 <dwt_ioctl+0x154>
 8008d6a:	2c00      	cmp	r4, #0
 8008d6c:	f000 841b 	beq.w	80095a6 <dwt_ioctl+0x1e02>
 8008d70:	2200      	movs	r2, #0
 8008d72:	491c      	ldr	r1, [pc, #112]	; (8008de4 <dwt_ioctl+0x1640>)
 8008d74:	f7fc fd58 	bl	8005828 <dwt_read16bitoffsetreg>
 8008d78:	8020      	strh	r0, [r4, #0]
 8008d7a:	2500      	movs	r5, #0
 8008d7c:	f7fe bdbc 	b.w	80078f8 <dwt_ioctl+0x154>
 8008d80:	2c00      	cmp	r4, #0
 8008d82:	f000 8413 	beq.w	80095ac <dwt_ioctl+0x1e08>
 8008d86:	2200      	movs	r2, #0
 8008d88:	4917      	ldr	r1, [pc, #92]	; (8008de8 <dwt_ioctl+0x1644>)
 8008d8a:	f7fc fd37 	bl	80057fc <dwt_read32bitoffsetreg>
 8008d8e:	6020      	str	r0, [r4, #0]
 8008d90:	2500      	movs	r5, #0
 8008d92:	f7fe bdb1 	b.w	80078f8 <dwt_ioctl+0x154>
 8008d96:	2c00      	cmp	r4, #0
 8008d98:	f000 840b 	beq.w	80095b2 <dwt_ioctl+0x1e0e>
 8008d9c:	8823      	ldrh	r3, [r4, #0]
 8008d9e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008da2:	9300      	str	r3, [sp, #0]
 8008da4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8008da8:	2200      	movs	r2, #0
 8008daa:	490f      	ldr	r1, [pc, #60]	; (8008de8 <dwt_ioctl+0x1644>)
 8008dac:	f7fe f996 	bl	80070dc <dwt_modify16bitoffsetreg>
 8008db0:	2500      	movs	r5, #0
 8008db2:	f7fe bda1 	b.w	80078f8 <dwt_ioctl+0x154>
 8008db6:	bf00      	nop
 8008db8:	00180028 	.word	0x00180028
 8008dbc:	000c0008 	.word	0x000c0008
 8008dc0:	0007001c 	.word	0x0007001c
 8008dc4:	00080010 	.word	0x00080010
 8008dc8:	00080014 	.word	0x00080014
 8008dcc:	00070014 	.word	0x00070014
 8008dd0:	00050008 	.word	0x00050008
 8008dd4:	001f000c 	.word	0x001f000c
 8008dd8:	001f0010 	.word	0x001f0010
 8008ddc:	00030060 	.word	0x00030060
 8008de0:	00010024 	.word	0x00010024
 8008de4:	0005002c 	.word	0x0005002c
 8008de8:	000e001a 	.word	0x000e001a
 8008dec:	2c00      	cmp	r4, #0
 8008dee:	f000 83e3 	beq.w	80095b8 <dwt_ioctl+0x1e14>
 8008df2:	88a7      	ldrh	r7, [r4, #4]
 8008df4:	68a3      	ldr	r3, [r4, #8]
 8008df6:	9309      	str	r3, [sp, #36]	; 0x24
 8008df8:	7b21      	ldrb	r1, [r4, #12]
 8008dfa:	9106      	str	r1, [sp, #24]
 8008dfc:	6922      	ldr	r2, [r4, #16]
 8008dfe:	9204      	str	r2, [sp, #16]
 8008e00:	6962      	ldr	r2, [r4, #20]
 8008e02:	9205      	str	r2, [sp, #20]
 8008e04:	f003 0203 	and.w	r2, r3, #3
 8008e08:	f3c3 0085 	ubfx	r0, r3, #2, #6
 8008e0c:	2905      	cmp	r1, #5
 8008e0e:	d142      	bne.n	8008e96 <dwt_ioctl+0x16f2>
 8008e10:	f5b7 7fb1 	cmp.w	r7, #354	; 0x162
 8008e14:	bf28      	it	cs
 8008e16:	f44f 77b1 	movcs.w	r7, #354	; 0x162
 8008e1a:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 80090fc <dwt_ioctl+0x1958>
 8008e1e:	2f04      	cmp	r7, #4
 8008e20:	d805      	bhi.n	8008e2e <dwt_ioctl+0x168a>
 8008e22:	eb09 0300 	add.w	r3, r9, r0
 8008e26:	785b      	ldrb	r3, [r3, #1]
 8008e28:	3b05      	subs	r3, #5
 8008e2a:	429f      	cmp	r7, r3
 8008e2c:	db3b      	blt.n	8008ea6 <dwt_ioctl+0x1702>
 8008e2e:	2a01      	cmp	r2, #1
 8008e30:	d877      	bhi.n	8008f22 <dwt_ioctl+0x177e>
 8008e32:	4bae      	ldr	r3, [pc, #696]	; (80090ec <dwt_ioctl+0x1948>)
 8008e34:	5c99      	ldrb	r1, [r3, r2]
 8008e36:	463e      	mov	r6, r7
 8008e38:	42b9      	cmp	r1, r7
 8008e3a:	da74      	bge.n	8008f26 <dwt_ioctl+0x1782>
 8008e3c:	1c55      	adds	r5, r2, #1
 8008e3e:	fa53 f585 	uxtab	r5, r3, r5
 8008e42:	2300      	movs	r3, #0
 8008e44:	440b      	add	r3, r1
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	3201      	adds	r2, #1
 8008e4a:	b2d2      	uxtb	r2, r2
 8008e4c:	2a02      	cmp	r2, #2
 8008e4e:	d005      	beq.n	8008e5c <dwt_ioctl+0x16b8>
 8008e50:	f815 1b01 	ldrb.w	r1, [r5], #1
 8008e54:	eba6 0c03 	sub.w	ip, r6, r3
 8008e58:	4561      	cmp	r1, ip
 8008e5a:	dbf3      	blt.n	8008e44 <dwt_ioctl+0x16a0>
 8008e5c:	429f      	cmp	r7, r3
 8008e5e:	bf08      	it	eq
 8008e60:	9003      	streq	r0, [sp, #12]
 8008e62:	d064      	beq.n	8008f2e <dwt_ioctl+0x178a>
 8008e64:	f107 0805 	add.w	r8, r7, #5
 8008e68:	fa1f f888 	uxth.w	r8, r8
 8008e6c:	2580      	movs	r5, #128	; 0x80
 8008e6e:	2100      	movs	r1, #0
 8008e70:	9107      	str	r1, [sp, #28]
 8008e72:	9103      	str	r1, [sp, #12]
 8008e74:	9108      	str	r1, [sp, #32]
 8008e76:	460e      	mov	r6, r1
 8008e78:	f04f 0b05 	mov.w	fp, #5
 8008e7c:	46be      	mov	lr, r7
 8008e7e:	455f      	cmp	r7, fp
 8008e80:	bf38      	it	cc
 8008e82:	46de      	movcc	lr, fp
 8008e84:	f1ae 0e05 	sub.w	lr, lr, #5
 8008e88:	fa1f fe8e 	uxth.w	lr, lr
 8008e8c:	f8df a25c 	ldr.w	sl, [pc, #604]	; 80090ec <dwt_ioctl+0x1948>
 8008e90:	46bc      	mov	ip, r7
 8008e92:	460f      	mov	r7, r1
 8008e94:	e3dd      	b.n	8009652 <dwt_ioctl+0x1eae>
 8008e96:	f240 1331 	movw	r3, #305	; 0x131
 8008e9a:	429f      	cmp	r7, r3
 8008e9c:	bf28      	it	cs
 8008e9e:	461f      	movcs	r7, r3
 8008ea0:	f8df 925c 	ldr.w	r9, [pc, #604]	; 8009100 <dwt_ioctl+0x195c>
 8008ea4:	e7bb      	b.n	8008e1e <dwt_ioctl+0x167a>
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	9a05      	ldr	r2, [sp, #20]
 8008eaa:	8013      	strh	r3, [r2, #0]
 8008eac:	9a04      	ldr	r2, [sp, #16]
 8008eae:	4611      	mov	r1, r2
 8008eb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008eb2:	600a      	str	r2, [r1, #0]
 8008eb4:	e04a      	b.n	8008f4c <dwt_ioctl+0x17a8>
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	9a05      	ldr	r2, [sp, #20]
 8008eba:	8013      	strh	r3, [r2, #0]
 8008ebc:	9b04      	ldr	r3, [sp, #16]
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ec2:	6013      	str	r3, [r2, #0]
 8008ec4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ec8:	e040      	b.n	8008f4c <dwt_ioctl+0x17a8>
 8008eca:	fa1f fb81 	uxth.w	fp, r1
 8008ece:	9207      	str	r2, [sp, #28]
 8008ed0:	9003      	str	r0, [sp, #12]
 8008ed2:	9308      	str	r3, [sp, #32]
 8008ed4:	2701      	movs	r7, #1
 8008ed6:	e3cd      	b.n	8009674 <dwt_ioctl+0x1ed0>
 8008ed8:	2f00      	cmp	r7, #0
 8008eda:	f040 83a1 	bne.w	8009620 <dwt_ioctl+0x1e7c>
 8008ede:	4598      	cmp	r8, r3
 8008ee0:	f200 83a3 	bhi.w	800962a <dwt_ioctl+0x1e86>
 8008ee4:	2e00      	cmp	r6, #0
 8008ee6:	d038      	beq.n	8008f5a <dwt_ioctl+0x17b6>
 8008ee8:	283f      	cmp	r0, #63	; 0x3f
 8008eea:	f000 83c8 	beq.w	800967e <dwt_ioctl+0x1eda>
 8008eee:	2700      	movs	r7, #0
 8008ef0:	f819 1000 	ldrb.w	r1, [r9, r0]
 8008ef4:	1a5b      	subs	r3, r3, r1
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	1e46      	subs	r6, r0, #1
 8008efa:	f006 003f 	and.w	r0, r6, #63	; 0x3f
 8008efe:	f016 063f 	ands.w	r6, r6, #63	; 0x3f
 8008f02:	bf18      	it	ne
 8008f04:	2601      	movne	r6, #1
 8008f06:	e39c      	b.n	8009642 <dwt_ioctl+0x1e9e>
 8008f08:	9906      	ldr	r1, [sp, #24]
 8008f0a:	2909      	cmp	r1, #9
 8008f0c:	f040 83bd 	bne.w	800968a <dwt_ioctl+0x1ee6>
 8008f10:	213f      	movs	r1, #63	; 0x3f
 8008f12:	9103      	str	r1, [sp, #12]
 8008f14:	e00b      	b.n	8008f2e <dwt_ioctl+0x178a>
 8008f16:	b2b3      	uxth	r3, r6
 8008f18:	3201      	adds	r2, #1
 8008f1a:	b2d2      	uxtb	r2, r2
 8008f1c:	213f      	movs	r1, #63	; 0x3f
 8008f1e:	9103      	str	r1, [sp, #12]
 8008f20:	e005      	b.n	8008f2e <dwt_ioctl+0x178a>
 8008f22:	2300      	movs	r3, #0
 8008f24:	e79a      	b.n	8008e5c <dwt_ioctl+0x16b8>
 8008f26:	2300      	movs	r3, #0
 8008f28:	e798      	b.n	8008e5c <dwt_ioctl+0x16b8>
 8008f2a:	9003      	str	r0, [sp, #12]
 8008f2c:	4663      	mov	r3, ip
 8008f2e:	9905      	ldr	r1, [sp, #20]
 8008f30:	800b      	strh	r3, [r1, #0]
 8008f32:	9b03      	ldr	r3, [sp, #12]
 8008f34:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
 8008f38:	b2d2      	uxtb	r2, r2
 8008f3a:	0413      	lsls	r3, r2, #16
 8008f3c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008f40:	4313      	orrs	r3, r2
 8008f42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008f46:	9a04      	ldr	r2, [sp, #16]
 8008f48:	6013      	str	r3, [r2, #0]
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	6023      	str	r3, [r4, #0]
 8008f4e:	2500      	movs	r5, #0
 8008f50:	f7fe bcd2 	b.w	80078f8 <dwt_ioctl+0x154>
 8008f54:	9a07      	ldr	r2, [sp, #28]
 8008f56:	9b08      	ldr	r3, [sp, #32]
 8008f58:	e7e9      	b.n	8008f2e <dwt_ioctl+0x178a>
 8008f5a:	9003      	str	r0, [sp, #12]
 8008f5c:	e7e7      	b.n	8008f2e <dwt_ioctl+0x178a>
 8008f5e:	9a07      	ldr	r2, [sp, #28]
 8008f60:	9b08      	ldr	r3, [sp, #32]
 8008f62:	e7e4      	b.n	8008f2e <dwt_ioctl+0x178a>
 8008f64:	213f      	movs	r1, #63	; 0x3f
 8008f66:	9103      	str	r1, [sp, #12]
 8008f68:	e7e1      	b.n	8008f2e <dwt_ioctl+0x178a>
 8008f6a:	2c00      	cmp	r4, #0
 8008f6c:	f000 8327 	beq.w	80095be <dwt_ioctl+0x1e1a>
 8008f70:	7825      	ldrb	r5, [r4, #0]
 8008f72:	6862      	ldr	r2, [r4, #4]
 8008f74:	2a01      	cmp	r2, #1
 8008f76:	bf15      	itete	ne
 8008f78:	f46f 3360 	mvnne.w	r3, #229376	; 0x38000
 8008f7c:	f46f 43e0 	mvneq.w	r3, #28672	; 0x7000
 8008f80:	27df      	movne	r7, #223	; 0xdf
 8008f82:	27ef      	moveq	r7, #239	; 0xef
 8008f84:	bf14      	ite	ne
 8008f86:	f04f 0820 	movne.w	r8, #32
 8008f8a:	f04f 0810 	moveq.w	r8, #16
 8008f8e:	2400      	movs	r4, #0
 8008f90:	9400      	str	r4, [sp, #0]
 8008f92:	4622      	mov	r2, r4
 8008f94:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8008f98:	f7fd fd04 	bl	80069a4 <dwt_modify32bitoffsetreg>
 8008f9c:	9400      	str	r4, [sp, #0]
 8008f9e:	463b      	mov	r3, r7
 8008fa0:	4622      	mov	r2, r4
 8008fa2:	4953      	ldr	r1, [pc, #332]	; (80090f0 <dwt_ioctl+0x194c>)
 8008fa4:	4630      	mov	r0, r6
 8008fa6:	f7fd fee7 	bl	8006d78 <dwt_modify8bitoffsetreg>
 8008faa:	2d01      	cmp	r5, #1
 8008fac:	d003      	beq.n	8008fb6 <dwt_ioctl+0x1812>
 8008fae:	b165      	cbz	r5, 8008fca <dwt_ioctl+0x1826>
 8008fb0:	2500      	movs	r5, #0
 8008fb2:	f7fe bca1 	b.w	80078f8 <dwt_ioctl+0x154>
 8008fb6:	4625      	mov	r5, r4
 8008fb8:	9400      	str	r4, [sp, #0]
 8008fba:	463b      	mov	r3, r7
 8008fbc:	4622      	mov	r2, r4
 8008fbe:	494d      	ldr	r1, [pc, #308]	; (80090f4 <dwt_ioctl+0x1950>)
 8008fc0:	4630      	mov	r0, r6
 8008fc2:	f7fd fed9 	bl	8006d78 <dwt_modify8bitoffsetreg>
 8008fc6:	f7fe bc97 	b.w	80078f8 <dwt_ioctl+0x154>
 8008fca:	f8cd 8000 	str.w	r8, [sp]
 8008fce:	23ff      	movs	r3, #255	; 0xff
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	4948      	ldr	r1, [pc, #288]	; (80090f4 <dwt_ioctl+0x1950>)
 8008fd4:	4630      	mov	r0, r6
 8008fd6:	f7fd fecf 	bl	8006d78 <dwt_modify8bitoffsetreg>
 8008fda:	f7fe bc8d 	b.w	80078f8 <dwt_ioctl+0x154>
 8008fde:	2c00      	cmp	r4, #0
 8008fe0:	f000 82f0 	beq.w	80095c4 <dwt_ioctl+0x1e20>
 8008fe4:	7822      	ldrb	r2, [r4, #0]
 8008fe6:	f012 0f01 	tst.w	r2, #1
 8008fea:	d02d      	beq.n	8009048 <dwt_ioctl+0x18a4>
 8008fec:	0157      	lsls	r7, r2, #5
 8008fee:	f007 0740 	and.w	r7, r7, #64	; 0x40
 8008ff2:	2440      	movs	r4, #64	; 0x40
 8008ff4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8008ff8:	f012 0f04 	tst.w	r2, #4
 8008ffc:	d028      	beq.n	8009050 <dwt_ioctl+0x18ac>
 8008ffe:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 8009002:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8009006:	0112      	lsls	r2, r2, #4
 8009008:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800900c:	4317      	orrs	r7, r2
 800900e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009012:	9200      	str	r2, [sp, #0]
 8009014:	43db      	mvns	r3, r3
 8009016:	2200      	movs	r2, #0
 8009018:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800901c:	4630      	mov	r0, r6
 800901e:	f7fd fcc1 	bl	80069a4 <dwt_modify32bitoffsetreg>
 8009022:	43e4      	mvns	r4, r4
 8009024:	b2a4      	uxth	r4, r4
 8009026:	2500      	movs	r5, #0
 8009028:	9500      	str	r5, [sp, #0]
 800902a:	4623      	mov	r3, r4
 800902c:	462a      	mov	r2, r5
 800902e:	4930      	ldr	r1, [pc, #192]	; (80090f0 <dwt_ioctl+0x194c>)
 8009030:	4630      	mov	r0, r6
 8009032:	f7fe f853 	bl	80070dc <dwt_modify16bitoffsetreg>
 8009036:	9700      	str	r7, [sp, #0]
 8009038:	4623      	mov	r3, r4
 800903a:	462a      	mov	r2, r5
 800903c:	492d      	ldr	r1, [pc, #180]	; (80090f4 <dwt_ioctl+0x1950>)
 800903e:	4630      	mov	r0, r6
 8009040:	f7fe f84c 	bl	80070dc <dwt_modify16bitoffsetreg>
 8009044:	f7fe bc58 	b.w	80078f8 <dwt_ioctl+0x154>
 8009048:	2700      	movs	r7, #0
 800904a:	463c      	mov	r4, r7
 800904c:	463b      	mov	r3, r7
 800904e:	e7d3      	b.n	8008ff8 <dwt_ioctl+0x1854>
 8009050:	2200      	movs	r2, #0
 8009052:	e7de      	b.n	8009012 <dwt_ioctl+0x186e>
 8009054:	2308      	movs	r3, #8
 8009056:	9300      	str	r3, [sp, #0]
 8009058:	23ff      	movs	r3, #255	; 0xff
 800905a:	2201      	movs	r2, #1
 800905c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8009060:	f7fd fe8a 	bl	8006d78 <dwt_modify8bitoffsetreg>
 8009064:	4c24      	ldr	r4, [pc, #144]	; (80090f8 <dwt_ioctl+0x1954>)
 8009066:	2302      	movs	r3, #2
 8009068:	9300      	str	r3, [sp, #0]
 800906a:	23ff      	movs	r3, #255	; 0xff
 800906c:	2203      	movs	r2, #3
 800906e:	4621      	mov	r1, r4
 8009070:	4630      	mov	r0, r6
 8009072:	f7fd fe81 	bl	8006d78 <dwt_modify8bitoffsetreg>
 8009076:	2500      	movs	r5, #0
 8009078:	9500      	str	r5, [sp, #0]
 800907a:	23f7      	movs	r3, #247	; 0xf7
 800907c:	2201      	movs	r2, #1
 800907e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8009082:	4630      	mov	r0, r6
 8009084:	f7fd fe78 	bl	8006d78 <dwt_modify8bitoffsetreg>
 8009088:	9500      	str	r5, [sp, #0]
 800908a:	23fd      	movs	r3, #253	; 0xfd
 800908c:	2203      	movs	r2, #3
 800908e:	4621      	mov	r1, r4
 8009090:	4630      	mov	r0, r6
 8009092:	f7fd fe71 	bl	8006d78 <dwt_modify8bitoffsetreg>
 8009096:	f7fe bc2f 	b.w	80078f8 <dwt_ioctl+0x154>
 800909a:	2c00      	cmp	r4, #0
 800909c:	f000 8295 	beq.w	80095ca <dwt_ioctl+0x1e26>
 80090a0:	8863      	ldrh	r3, [r4, #2]
 80090a2:	00db      	lsls	r3, r3, #3
 80090a4:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80090a8:	7822      	ldrb	r2, [r4, #0]
 80090aa:	b10a      	cbz	r2, 80090b0 <dwt_ioctl+0x190c>
 80090ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80090b0:	9300      	str	r3, [sp, #0]
 80090b2:	f24f 0307 	movw	r3, #61447	; 0xf007
 80090b6:	2200      	movs	r2, #0
 80090b8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80090bc:	4630      	mov	r0, r6
 80090be:	f7fe f80d 	bl	80070dc <dwt_modify16bitoffsetreg>
 80090c2:	2500      	movs	r5, #0
 80090c4:	f7fe bc18 	b.w	80078f8 <dwt_ioctl+0x154>
 80090c8:	2c00      	cmp	r4, #0
 80090ca:	f000 8281 	beq.w	80095d0 <dwt_ioctl+0x1e2c>
 80090ce:	b2e3      	uxtb	r3, r4
 80090d0:	1c9a      	adds	r2, r3, #2
 80090d2:	2301      	movs	r3, #1
 80090d4:	4093      	lsls	r3, r2
 80090d6:	3b01      	subs	r3, #1
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	2200      	movs	r2, #0
 80090dc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80090e0:	f7fc ff7b 	bl	8005fda <dwt_write8bitoffsetreg>
 80090e4:	2500      	movs	r5, #0
 80090e6:	f7fe bc07 	b.w	80078f8 <dwt_ioctl+0x154>
 80090ea:	bf00      	nop
 80090ec:	08015e58 	.word	0x08015e58
 80090f0:	00050008 	.word	0x00050008
 80090f4:	0005000c 	.word	0x0005000c
 80090f8:	00110008 	.word	0x00110008
 80090fc:	08015dd8 	.word	0x08015dd8
 8009100:	08015e18 	.word	0x08015e18
 8009104:	2c00      	cmp	r4, #0
 8009106:	f000 8266 	beq.w	80095d6 <dwt_ioctl+0x1e32>
 800910a:	7ae3      	ldrb	r3, [r4, #11]
 800910c:	2b00      	cmp	r3, #0
 800910e:	f000 8265 	beq.w	80095dc <dwt_ioctl+0x1e38>
 8009112:	7b63      	ldrb	r3, [r4, #13]
 8009114:	2b01      	cmp	r3, #1
 8009116:	d921      	bls.n	800915c <dwt_ioctl+0x19b8>
 8009118:	7b22      	ldrb	r2, [r4, #12]
 800911a:	4bd7      	ldr	r3, [pc, #860]	; (8009478 <dwt_ioctl+0x1cd4>)
 800911c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8009120:	0112      	lsls	r2, r2, #4
 8009122:	0ad3      	lsrs	r3, r2, #11
 8009124:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8009128:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800912c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8009130:	bf28      	it	cs
 8009132:	3301      	addcs	r3, #1
 8009134:	b29b      	uxth	r3, r3
 8009136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800913a:	9300      	str	r3, [sp, #0]
 800913c:	f64f 7380 	movw	r3, #65408	; 0xff80
 8009140:	2202      	movs	r2, #2
 8009142:	49ce      	ldr	r1, [pc, #824]	; (800947c <dwt_ioctl+0x1cd8>)
 8009144:	4630      	mov	r0, r6
 8009146:	f7fd ffc9 	bl	80070dc <dwt_modify16bitoffsetreg>
 800914a:	2394      	movs	r3, #148	; 0x94
 800914c:	2200      	movs	r2, #0
 800914e:	49cc      	ldr	r1, [pc, #816]	; (8009480 <dwt_ioctl+0x1cdc>)
 8009150:	4630      	mov	r0, r6
 8009152:	f7fc ff42 	bl	8005fda <dwt_write8bitoffsetreg>
 8009156:	2500      	movs	r5, #0
 8009158:	f7fe bbce 	b.w	80078f8 <dwt_ioctl+0x154>
 800915c:	7b22      	ldrb	r2, [r4, #12]
 800915e:	4bc6      	ldr	r3, [pc, #792]	; (8009478 <dwt_ioctl+0x1cd4>)
 8009160:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009164:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 8009168:	fb02 f203 	mul.w	r2, r2, r3
 800916c:	0c93      	lsrs	r3, r2, #18
 800916e:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 8009172:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009176:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800917a:	bf28      	it	cs
 800917c:	3301      	addcs	r3, #1
 800917e:	b29b      	uxth	r3, r3
 8009180:	e7d9      	b.n	8009136 <dwt_ioctl+0x1992>
 8009182:	2c00      	cmp	r4, #0
 8009184:	f000 822d 	beq.w	80095e2 <dwt_ioctl+0x1e3e>
 8009188:	2200      	movs	r2, #0
 800918a:	49be      	ldr	r1, [pc, #760]	; (8009484 <dwt_ioctl+0x1ce0>)
 800918c:	f7fc fb36 	bl	80057fc <dwt_read32bitoffsetreg>
 8009190:	6020      	str	r0, [r4, #0]
 8009192:	2500      	movs	r5, #0
 8009194:	f7fe bbb0 	b.w	80078f8 <dwt_ioctl+0x154>
 8009198:	2c00      	cmp	r4, #0
 800919a:	f000 8225 	beq.w	80095e8 <dwt_ioctl+0x1e44>
 800919e:	2200      	movs	r2, #0
 80091a0:	49b9      	ldr	r1, [pc, #740]	; (8009488 <dwt_ioctl+0x1ce4>)
 80091a2:	f7fc fb2b 	bl	80057fc <dwt_read32bitoffsetreg>
 80091a6:	6020      	str	r0, [r4, #0]
 80091a8:	2500      	movs	r5, #0
 80091aa:	f7fe bba5 	b.w	80078f8 <dwt_ioctl+0x154>
 80091ae:	2c00      	cmp	r4, #0
 80091b0:	f000 821d 	beq.w	80095ee <dwt_ioctl+0x1e4a>
 80091b4:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 80091b8:	6023      	str	r3, [r4, #0]
 80091ba:	2500      	movs	r5, #0
 80091bc:	f7fe bb9c 	b.w	80078f8 <dwt_ioctl+0x154>
 80091c0:	2c00      	cmp	r4, #0
 80091c2:	f000 8217 	beq.w	80095f4 <dwt_ioctl+0x1e50>
 80091c6:	2500      	movs	r5, #0
 80091c8:	950b      	str	r5, [sp, #44]	; 0x2c
 80091ca:	af10      	add	r7, sp, #64	; 0x40
 80091cc:	2319      	movs	r3, #25
 80091ce:	f847 3d10 	str.w	r3, [r7, #-16]!
 80091d2:	9700      	str	r7, [sp, #0]
 80091d4:	2304      	movs	r3, #4
 80091d6:	462a      	mov	r2, r5
 80091d8:	49ac      	ldr	r1, [pc, #688]	; (800948c <dwt_ioctl+0x1ce8>)
 80091da:	f7fc fef3 	bl	8005fc4 <dwt_writetodevice>
 80091de:	f641 7348 	movw	r3, #8008	; 0x1f48
 80091e2:	930c      	str	r3, [sp, #48]	; 0x30
 80091e4:	9700      	str	r7, [sp, #0]
 80091e6:	2304      	movs	r3, #4
 80091e8:	462a      	mov	r2, r5
 80091ea:	49a9      	ldr	r1, [pc, #676]	; (8009490 <dwt_ioctl+0x1cec>)
 80091ec:	4630      	mov	r0, r6
 80091ee:	f7fc fee9 	bl	8005fc4 <dwt_writetodevice>
 80091f2:	ab0b      	add	r3, sp, #44	; 0x2c
 80091f4:	9300      	str	r3, [sp, #0]
 80091f6:	2304      	movs	r3, #4
 80091f8:	462a      	mov	r2, r5
 80091fa:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 80091fe:	4630      	mov	r0, r6
 8009200:	f7fc faf2 	bl	80057e8 <dwt_readfromdevice>
 8009204:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009206:	6023      	str	r3, [r4, #0]
 8009208:	f7fe bb76 	b.w	80078f8 <dwt_ioctl+0x154>
 800920c:	2c00      	cmp	r4, #0
 800920e:	f000 81f4 	beq.w	80095fa <dwt_ioctl+0x1e56>
 8009212:	2200      	movs	r2, #0
 8009214:	499f      	ldr	r1, [pc, #636]	; (8009494 <dwt_ioctl+0x1cf0>)
 8009216:	f7fc faf1 	bl	80057fc <dwt_read32bitoffsetreg>
 800921a:	b280      	uxth	r0, r0
 800921c:	6020      	str	r0, [r4, #0]
 800921e:	2200      	movs	r2, #0
 8009220:	499d      	ldr	r1, [pc, #628]	; (8009498 <dwt_ioctl+0x1cf4>)
 8009222:	4630      	mov	r0, r6
 8009224:	f7fc faea 	bl	80057fc <dwt_read32bitoffsetreg>
 8009228:	0d43      	lsrs	r3, r0, #21
 800922a:	019b      	lsls	r3, r3, #6
 800922c:	b29b      	uxth	r3, r3
 800922e:	6063      	str	r3, [r4, #4]
 8009230:	2500      	movs	r5, #0
 8009232:	f7fe bb61 	b.w	80078f8 <dwt_ioctl+0x154>
 8009236:	2c00      	cmp	r4, #0
 8009238:	f000 81e2 	beq.w	8009600 <dwt_ioctl+0x1e5c>
 800923c:	7d63      	ldrb	r3, [r4, #21]
 800923e:	b12b      	cbz	r3, 800924c <dwt_ioctl+0x1aa8>
 8009240:	2b01      	cmp	r3, #1
 8009242:	d037      	beq.n	80092b4 <dwt_ioctl+0x1b10>
 8009244:	2b02      	cmp	r3, #2
 8009246:	d05e      	beq.n	8009306 <dwt_ioctl+0x1b62>
 8009248:	23ff      	movs	r3, #255	; 0xff
 800924a:	e02f      	b.n	80092ac <dwt_ioctl+0x1b08>
 800924c:	2200      	movs	r2, #0
 800924e:	4993      	ldr	r1, [pc, #588]	; (800949c <dwt_ioctl+0x1cf8>)
 8009250:	f7fc fad4 	bl	80057fc <dwt_read32bitoffsetreg>
 8009254:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8009258:	6020      	str	r0, [r4, #0]
 800925a:	2200      	movs	r2, #0
 800925c:	4990      	ldr	r1, [pc, #576]	; (80094a0 <dwt_ioctl+0x1cfc>)
 800925e:	4630      	mov	r0, r6
 8009260:	f7fc facc 	bl	80057fc <dwt_read32bitoffsetreg>
 8009264:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8009268:	6060      	str	r0, [r4, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	498d      	ldr	r1, [pc, #564]	; (80094a4 <dwt_ioctl+0x1d00>)
 800926e:	4630      	mov	r0, r6
 8009270:	f7fc fac4 	bl	80057fc <dwt_read32bitoffsetreg>
 8009274:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8009278:	60a0      	str	r0, [r4, #8]
 800927a:	2200      	movs	r2, #0
 800927c:	498a      	ldr	r1, [pc, #552]	; (80094a8 <dwt_ioctl+0x1d04>)
 800927e:	4630      	mov	r0, r6
 8009280:	f7fc fabc 	bl	80057fc <dwt_read32bitoffsetreg>
 8009284:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8009288:	60e0      	str	r0, [r4, #12]
 800928a:	2200      	movs	r2, #0
 800928c:	4987      	ldr	r1, [pc, #540]	; (80094ac <dwt_ioctl+0x1d08>)
 800928e:	4630      	mov	r0, r6
 8009290:	f7fc fab4 	bl	80057fc <dwt_read32bitoffsetreg>
 8009294:	f3c0 0010 	ubfx	r0, r0, #0, #17
 8009298:	6120      	str	r0, [r4, #16]
 800929a:	2203      	movs	r2, #3
 800929c:	4979      	ldr	r1, [pc, #484]	; (8009484 <dwt_ioctl+0x1ce0>)
 800929e:	4630      	mov	r0, r6
 80092a0:	f7fc fad4 	bl	800584c <dwt_read8bitoffsetreg>
 80092a4:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80092a8:	7520      	strb	r0, [r4, #20]
 80092aa:	2300      	movs	r3, #0
 80092ac:	75a3      	strb	r3, [r4, #22]
 80092ae:	2500      	movs	r5, #0
 80092b0:	f7fe bb22 	b.w	80078f8 <dwt_ioctl+0x154>
 80092b4:	2200      	movs	r2, #0
 80092b6:	497e      	ldr	r1, [pc, #504]	; (80094b0 <dwt_ioctl+0x1d0c>)
 80092b8:	f7fc faa0 	bl	80057fc <dwt_read32bitoffsetreg>
 80092bc:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80092c0:	6020      	str	r0, [r4, #0]
 80092c2:	2200      	movs	r2, #0
 80092c4:	497b      	ldr	r1, [pc, #492]	; (80094b4 <dwt_ioctl+0x1d10>)
 80092c6:	4630      	mov	r0, r6
 80092c8:	f7fc fa98 	bl	80057fc <dwt_read32bitoffsetreg>
 80092cc:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80092d0:	6060      	str	r0, [r4, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	4978      	ldr	r1, [pc, #480]	; (80094b8 <dwt_ioctl+0x1d14>)
 80092d6:	4630      	mov	r0, r6
 80092d8:	f7fc fa90 	bl	80057fc <dwt_read32bitoffsetreg>
 80092dc:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80092e0:	60a0      	str	r0, [r4, #8]
 80092e2:	2200      	movs	r2, #0
 80092e4:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 80092e8:	4630      	mov	r0, r6
 80092ea:	f7fc fa87 	bl	80057fc <dwt_read32bitoffsetreg>
 80092ee:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80092f2:	60e0      	str	r0, [r4, #12]
 80092f4:	2200      	movs	r2, #0
 80092f6:	4971      	ldr	r1, [pc, #452]	; (80094bc <dwt_ioctl+0x1d18>)
 80092f8:	4630      	mov	r0, r6
 80092fa:	f7fc fa7f 	bl	80057fc <dwt_read32bitoffsetreg>
 80092fe:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8009302:	6120      	str	r0, [r4, #16]
 8009304:	e7c9      	b.n	800929a <dwt_ioctl+0x1af6>
 8009306:	2200      	movs	r2, #0
 8009308:	496d      	ldr	r1, [pc, #436]	; (80094c0 <dwt_ioctl+0x1d1c>)
 800930a:	f7fc fa77 	bl	80057fc <dwt_read32bitoffsetreg>
 800930e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8009312:	6020      	str	r0, [r4, #0]
 8009314:	2200      	movs	r2, #0
 8009316:	496b      	ldr	r1, [pc, #428]	; (80094c4 <dwt_ioctl+0x1d20>)
 8009318:	4630      	mov	r0, r6
 800931a:	f7fc fa6f 	bl	80057fc <dwt_read32bitoffsetreg>
 800931e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8009322:	6060      	str	r0, [r4, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	4968      	ldr	r1, [pc, #416]	; (80094c8 <dwt_ioctl+0x1d24>)
 8009328:	4630      	mov	r0, r6
 800932a:	f7fc fa67 	bl	80057fc <dwt_read32bitoffsetreg>
 800932e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8009332:	60a0      	str	r0, [r4, #8]
 8009334:	2200      	movs	r2, #0
 8009336:	4965      	ldr	r1, [pc, #404]	; (80094cc <dwt_ioctl+0x1d28>)
 8009338:	4630      	mov	r0, r6
 800933a:	f7fc fa5f 	bl	80057fc <dwt_read32bitoffsetreg>
 800933e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8009342:	60e0      	str	r0, [r4, #12]
 8009344:	2200      	movs	r2, #0
 8009346:	4962      	ldr	r1, [pc, #392]	; (80094d0 <dwt_ioctl+0x1d2c>)
 8009348:	4630      	mov	r0, r6
 800934a:	f7fc fa57 	bl	80057fc <dwt_read32bitoffsetreg>
 800934e:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8009352:	6120      	str	r0, [r4, #16]
 8009354:	e7a1      	b.n	800929a <dwt_ioctl+0x1af6>
 8009356:	2500      	movs	r5, #0
 8009358:	f7fe bace 	b.w	80078f8 <dwt_ioctl+0x154>
 800935c:	2500      	movs	r5, #0
 800935e:	f7fe bacb 	b.w	80078f8 <dwt_ioctl+0x154>
 8009362:	2500      	movs	r5, #0
 8009364:	f7fe bac8 	b.w	80078f8 <dwt_ioctl+0x154>
 8009368:	2500      	movs	r5, #0
 800936a:	f7fe bac5 	b.w	80078f8 <dwt_ioctl+0x154>
 800936e:	2500      	movs	r5, #0
 8009370:	f7fe bac2 	b.w	80078f8 <dwt_ioctl+0x154>
 8009374:	2500      	movs	r5, #0
 8009376:	f7fe babf 	b.w	80078f8 <dwt_ioctl+0x154>
 800937a:	2500      	movs	r5, #0
 800937c:	f7fe babc 	b.w	80078f8 <dwt_ioctl+0x154>
 8009380:	2500      	movs	r5, #0
 8009382:	f7fe bab9 	b.w	80078f8 <dwt_ioctl+0x154>
 8009386:	2500      	movs	r5, #0
 8009388:	f7fe bab6 	b.w	80078f8 <dwt_ioctl+0x154>
 800938c:	2500      	movs	r5, #0
 800938e:	f7fe bab3 	b.w	80078f8 <dwt_ioctl+0x154>
 8009392:	2500      	movs	r5, #0
 8009394:	f7fe bab0 	b.w	80078f8 <dwt_ioctl+0x154>
 8009398:	2500      	movs	r5, #0
 800939a:	f7fe baad 	b.w	80078f8 <dwt_ioctl+0x154>
 800939e:	2500      	movs	r5, #0
 80093a0:	f7fe baaa 	b.w	80078f8 <dwt_ioctl+0x154>
 80093a4:	2500      	movs	r5, #0
 80093a6:	f7fe baa7 	b.w	80078f8 <dwt_ioctl+0x154>
 80093aa:	2500      	movs	r5, #0
 80093ac:	f7fe baa4 	b.w	80078f8 <dwt_ioctl+0x154>
 80093b0:	2500      	movs	r5, #0
 80093b2:	f7fe baa1 	b.w	80078f8 <dwt_ioctl+0x154>
 80093b6:	2500      	movs	r5, #0
 80093b8:	f7fe ba9e 	b.w	80078f8 <dwt_ioctl+0x154>
 80093bc:	2500      	movs	r5, #0
 80093be:	f7fe ba9b 	b.w	80078f8 <dwt_ioctl+0x154>
 80093c2:	2500      	movs	r5, #0
 80093c4:	f7fe ba98 	b.w	80078f8 <dwt_ioctl+0x154>
 80093c8:	2500      	movs	r5, #0
 80093ca:	f7fe ba95 	b.w	80078f8 <dwt_ioctl+0x154>
 80093ce:	2500      	movs	r5, #0
 80093d0:	f7fe ba92 	b.w	80078f8 <dwt_ioctl+0x154>
 80093d4:	2500      	movs	r5, #0
 80093d6:	f7fe ba8f 	b.w	80078f8 <dwt_ioctl+0x154>
 80093da:	2500      	movs	r5, #0
 80093dc:	f7fe ba8c 	b.w	80078f8 <dwt_ioctl+0x154>
 80093e0:	2500      	movs	r5, #0
 80093e2:	f7fe ba89 	b.w	80078f8 <dwt_ioctl+0x154>
 80093e6:	2500      	movs	r5, #0
 80093e8:	f7fe ba86 	b.w	80078f8 <dwt_ioctl+0x154>
 80093ec:	2500      	movs	r5, #0
 80093ee:	f7fe ba83 	b.w	80078f8 <dwt_ioctl+0x154>
 80093f2:	2500      	movs	r5, #0
 80093f4:	f7fe ba80 	b.w	80078f8 <dwt_ioctl+0x154>
 80093f8:	2500      	movs	r5, #0
 80093fa:	f7fe ba7d 	b.w	80078f8 <dwt_ioctl+0x154>
 80093fe:	2500      	movs	r5, #0
 8009400:	f7fe ba7a 	b.w	80078f8 <dwt_ioctl+0x154>
 8009404:	2500      	movs	r5, #0
 8009406:	f7fe ba77 	b.w	80078f8 <dwt_ioctl+0x154>
 800940a:	2500      	movs	r5, #0
 800940c:	f7fe ba74 	b.w	80078f8 <dwt_ioctl+0x154>
 8009410:	2500      	movs	r5, #0
 8009412:	f7fe ba71 	b.w	80078f8 <dwt_ioctl+0x154>
 8009416:	2500      	movs	r5, #0
 8009418:	f7fe ba6e 	b.w	80078f8 <dwt_ioctl+0x154>
 800941c:	2500      	movs	r5, #0
 800941e:	f7fe ba6b 	b.w	80078f8 <dwt_ioctl+0x154>
 8009422:	2500      	movs	r5, #0
 8009424:	f7fe ba68 	b.w	80078f8 <dwt_ioctl+0x154>
 8009428:	2500      	movs	r5, #0
 800942a:	f7fe ba65 	b.w	80078f8 <dwt_ioctl+0x154>
 800942e:	2500      	movs	r5, #0
 8009430:	f7fe ba62 	b.w	80078f8 <dwt_ioctl+0x154>
 8009434:	2500      	movs	r5, #0
 8009436:	f7fe ba5f 	b.w	80078f8 <dwt_ioctl+0x154>
 800943a:	2500      	movs	r5, #0
 800943c:	f7fe ba5c 	b.w	80078f8 <dwt_ioctl+0x154>
 8009440:	2500      	movs	r5, #0
 8009442:	f7fe ba59 	b.w	80078f8 <dwt_ioctl+0x154>
 8009446:	2500      	movs	r5, #0
 8009448:	f7fe ba56 	b.w	80078f8 <dwt_ioctl+0x154>
 800944c:	2500      	movs	r5, #0
 800944e:	f7fe ba53 	b.w	80078f8 <dwt_ioctl+0x154>
 8009452:	2500      	movs	r5, #0
 8009454:	f7fe ba50 	b.w	80078f8 <dwt_ioctl+0x154>
 8009458:	2500      	movs	r5, #0
 800945a:	f7fe ba4d 	b.w	80078f8 <dwt_ioctl+0x154>
 800945e:	2500      	movs	r5, #0
 8009460:	f7fe ba4a 	b.w	80078f8 <dwt_ioctl+0x154>
 8009464:	2500      	movs	r5, #0
 8009466:	f7fe ba47 	b.w	80078f8 <dwt_ioctl+0x154>
 800946a:	2500      	movs	r5, #0
 800946c:	f7fe ba44 	b.w	80078f8 <dwt_ioctl+0x154>
 8009470:	2500      	movs	r5, #0
 8009472:	f7fe ba41 	b.w	80078f8 <dwt_ioctl+0x154>
 8009476:	bf00      	nop
 8009478:	08015e94 	.word	0x08015e94
 800947c:	000e0012 	.word	0x000e0012
 8009480:	000e0016 	.word	0x000e0016
 8009484:	00030060 	.word	0x00030060
 8009488:	000f0048 	.word	0x000f0048
 800948c:	001f0004 	.word	0x001f0004
 8009490:	001f0008 	.word	0x001f0008
 8009494:	000c0048 	.word	0x000c0048
 8009498:	000c0028 	.word	0x000c0028
 800949c:	000c0058 	.word	0x000c0058
 80094a0:	000c0030 	.word	0x000c0030
 80094a4:	000c0034 	.word	0x000c0034
 80094a8:	000c0038 	.word	0x000c0038
 80094ac:	000c002c 	.word	0x000c002c
 80094b0:	000d0020 	.word	0x000d0020
 80094b4:	000c0064 	.word	0x000c0064
 80094b8:	000c0068 	.word	0x000c0068
 80094bc:	000c0060 	.word	0x000c0060
 80094c0:	000d0068 	.word	0x000d0068
 80094c4:	000d0040 	.word	0x000d0040
 80094c8:	000d0044 	.word	0x000d0044
 80094cc:	000d0048 	.word	0x000d0048
 80094d0:	000d003c 	.word	0x000d003c
 80094d4:	2500      	movs	r5, #0
 80094d6:	f7fe ba0f 	b.w	80078f8 <dwt_ioctl+0x154>
 80094da:	2500      	movs	r5, #0
 80094dc:	f7fe ba0c 	b.w	80078f8 <dwt_ioctl+0x154>
 80094e0:	2500      	movs	r5, #0
 80094e2:	f7fe ba09 	b.w	80078f8 <dwt_ioctl+0x154>
 80094e6:	2500      	movs	r5, #0
 80094e8:	f7fe ba06 	b.w	80078f8 <dwt_ioctl+0x154>
 80094ec:	2500      	movs	r5, #0
 80094ee:	f7fe ba03 	b.w	80078f8 <dwt_ioctl+0x154>
 80094f2:	2500      	movs	r5, #0
 80094f4:	f7fe ba00 	b.w	80078f8 <dwt_ioctl+0x154>
 80094f8:	2500      	movs	r5, #0
 80094fa:	f7fe b9fd 	b.w	80078f8 <dwt_ioctl+0x154>
 80094fe:	2500      	movs	r5, #0
 8009500:	f7fe b9fa 	b.w	80078f8 <dwt_ioctl+0x154>
 8009504:	2500      	movs	r5, #0
 8009506:	f7fe b9f7 	b.w	80078f8 <dwt_ioctl+0x154>
 800950a:	2500      	movs	r5, #0
 800950c:	f7fe b9f4 	b.w	80078f8 <dwt_ioctl+0x154>
 8009510:	2500      	movs	r5, #0
 8009512:	f7fe b9f1 	b.w	80078f8 <dwt_ioctl+0x154>
 8009516:	2500      	movs	r5, #0
 8009518:	f7fe b9ee 	b.w	80078f8 <dwt_ioctl+0x154>
 800951c:	2500      	movs	r5, #0
 800951e:	f7fe b9eb 	b.w	80078f8 <dwt_ioctl+0x154>
 8009522:	2500      	movs	r5, #0
 8009524:	f7fe b9e8 	b.w	80078f8 <dwt_ioctl+0x154>
 8009528:	2500      	movs	r5, #0
 800952a:	f7fe b9e5 	b.w	80078f8 <dwt_ioctl+0x154>
 800952e:	2500      	movs	r5, #0
 8009530:	f7fe b9e2 	b.w	80078f8 <dwt_ioctl+0x154>
 8009534:	2500      	movs	r5, #0
 8009536:	f7fe b9df 	b.w	80078f8 <dwt_ioctl+0x154>
 800953a:	2500      	movs	r5, #0
 800953c:	f7fe b9dc 	b.w	80078f8 <dwt_ioctl+0x154>
 8009540:	2500      	movs	r5, #0
 8009542:	f7fe b9d9 	b.w	80078f8 <dwt_ioctl+0x154>
 8009546:	2500      	movs	r5, #0
 8009548:	f7fe b9d6 	b.w	80078f8 <dwt_ioctl+0x154>
 800954c:	2500      	movs	r5, #0
 800954e:	f7fe b9d3 	b.w	80078f8 <dwt_ioctl+0x154>
 8009552:	2500      	movs	r5, #0
 8009554:	f7fe b9d0 	b.w	80078f8 <dwt_ioctl+0x154>
 8009558:	2500      	movs	r5, #0
 800955a:	f7fe b9cd 	b.w	80078f8 <dwt_ioctl+0x154>
 800955e:	2500      	movs	r5, #0
 8009560:	f7fe b9ca 	b.w	80078f8 <dwt_ioctl+0x154>
 8009564:	2500      	movs	r5, #0
 8009566:	f7fe b9c7 	b.w	80078f8 <dwt_ioctl+0x154>
 800956a:	2500      	movs	r5, #0
 800956c:	f7fe b9c4 	b.w	80078f8 <dwt_ioctl+0x154>
 8009570:	2500      	movs	r5, #0
 8009572:	f7fe b9c1 	b.w	80078f8 <dwt_ioctl+0x154>
 8009576:	2500      	movs	r5, #0
 8009578:	f7fe b9be 	b.w	80078f8 <dwt_ioctl+0x154>
 800957c:	2500      	movs	r5, #0
 800957e:	f7fe b9bb 	b.w	80078f8 <dwt_ioctl+0x154>
 8009582:	2500      	movs	r5, #0
 8009584:	f7fe b9b8 	b.w	80078f8 <dwt_ioctl+0x154>
 8009588:	2500      	movs	r5, #0
 800958a:	f7fe b9b5 	b.w	80078f8 <dwt_ioctl+0x154>
 800958e:	2500      	movs	r5, #0
 8009590:	f7fe b9b2 	b.w	80078f8 <dwt_ioctl+0x154>
 8009594:	2500      	movs	r5, #0
 8009596:	f7fe b9af 	b.w	80078f8 <dwt_ioctl+0x154>
 800959a:	2500      	movs	r5, #0
 800959c:	f7fe b9ac 	b.w	80078f8 <dwt_ioctl+0x154>
 80095a0:	2500      	movs	r5, #0
 80095a2:	f7fe b9a9 	b.w	80078f8 <dwt_ioctl+0x154>
 80095a6:	2500      	movs	r5, #0
 80095a8:	f7fe b9a6 	b.w	80078f8 <dwt_ioctl+0x154>
 80095ac:	2500      	movs	r5, #0
 80095ae:	f7fe b9a3 	b.w	80078f8 <dwt_ioctl+0x154>
 80095b2:	2500      	movs	r5, #0
 80095b4:	f7fe b9a0 	b.w	80078f8 <dwt_ioctl+0x154>
 80095b8:	2500      	movs	r5, #0
 80095ba:	f7fe b99d 	b.w	80078f8 <dwt_ioctl+0x154>
 80095be:	2500      	movs	r5, #0
 80095c0:	f7fe b99a 	b.w	80078f8 <dwt_ioctl+0x154>
 80095c4:	2500      	movs	r5, #0
 80095c6:	f7fe b997 	b.w	80078f8 <dwt_ioctl+0x154>
 80095ca:	2500      	movs	r5, #0
 80095cc:	f7fe b994 	b.w	80078f8 <dwt_ioctl+0x154>
 80095d0:	2500      	movs	r5, #0
 80095d2:	f7fe b991 	b.w	80078f8 <dwt_ioctl+0x154>
 80095d6:	2500      	movs	r5, #0
 80095d8:	f7fe b98e 	b.w	80078f8 <dwt_ioctl+0x154>
 80095dc:	2500      	movs	r5, #0
 80095de:	f7fe b98b 	b.w	80078f8 <dwt_ioctl+0x154>
 80095e2:	2500      	movs	r5, #0
 80095e4:	f7fe b988 	b.w	80078f8 <dwt_ioctl+0x154>
 80095e8:	2500      	movs	r5, #0
 80095ea:	f7fe b985 	b.w	80078f8 <dwt_ioctl+0x154>
 80095ee:	2500      	movs	r5, #0
 80095f0:	f7fe b982 	b.w	80078f8 <dwt_ioctl+0x154>
 80095f4:	2500      	movs	r5, #0
 80095f6:	f7fe b97f 	b.w	80078f8 <dwt_ioctl+0x154>
 80095fa:	2500      	movs	r5, #0
 80095fc:	f7fe b97c 	b.w	80078f8 <dwt_ioctl+0x154>
 8009600:	2500      	movs	r5, #0
 8009602:	f7fe b979 	b.w	80078f8 <dwt_ioctl+0x154>
 8009606:	f899 3011 	ldrb.w	r3, [r9, #17]
 800960a:	1e5a      	subs	r2, r3, #1
 800960c:	b2d2      	uxtb	r2, r2
 800960e:	2a01      	cmp	r2, #1
 8009610:	f67f a801 	bls.w	8008616 <dwt_ioctl+0xe72>
 8009614:	2202      	movs	r2, #2
 8009616:	f7fe bf88 	b.w	800852a <dwt_ioctl+0xd86>
 800961a:	2f00      	cmp	r7, #0
 800961c:	f43f ac62 	beq.w	8008ee4 <dwt_ioctl+0x1740>
 8009620:	f819 1000 	ldrb.w	r1, [r9, r0]
 8009624:	1a5b      	subs	r3, r3, r1
 8009626:	b29b      	uxth	r3, r3
 8009628:	e481      	b.n	8008f2e <dwt_ioctl+0x178a>
 800962a:	283f      	cmp	r0, #63	; 0x3f
 800962c:	d027      	beq.n	800967e <dwt_ioctl+0x1eda>
 800962e:	2e00      	cmp	r6, #0
 8009630:	f47f ac5e 	bne.w	8008ef0 <dwt_ioctl+0x174c>
 8009634:	3001      	adds	r0, #1
 8009636:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800963a:	f819 1000 	ldrb.w	r1, [r9, r0]
 800963e:	440b      	add	r3, r1
 8009640:	b29b      	uxth	r3, r3
 8009642:	459c      	cmp	ip, r3
 8009644:	f43f ac71 	beq.w	8008f2a <dwt_ioctl+0x1786>
 8009648:	3d01      	subs	r5, #1
 800964a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 800964e:	f43f ac32 	beq.w	8008eb6 <dwt_ioctl+0x1712>
 8009652:	459e      	cmp	lr, r3
 8009654:	f4bf ac40 	bcs.w	8008ed8 <dwt_ioctl+0x1734>
 8009658:	4598      	cmp	r8, r3
 800965a:	d9de      	bls.n	800961a <dwt_ioctl+0x1e76>
 800965c:	ebac 0103 	sub.w	r1, ip, r3
 8009660:	b209      	sxth	r1, r1
 8009662:	2900      	cmp	r1, #0
 8009664:	bfb8      	it	lt
 8009666:	4249      	neglt	r1, r1
 8009668:	4559      	cmp	r1, fp
 800966a:	f77f ac2e 	ble.w	8008eca <dwt_ioctl+0x1726>
 800966e:	2f00      	cmp	r7, #0
 8009670:	f47f ac70 	bne.w	8008f54 <dwt_ioctl+0x17b0>
 8009674:	283f      	cmp	r0, #63	; 0x3f
 8009676:	d1da      	bne.n	800962e <dwt_ioctl+0x1e8a>
 8009678:	2f00      	cmp	r7, #0
 800967a:	f47f ac70 	bne.w	8008f5e <dwt_ioctl+0x17ba>
 800967e:	2a03      	cmp	r2, #3
 8009680:	f43f ac70 	beq.w	8008f64 <dwt_ioctl+0x17c0>
 8009684:	2a02      	cmp	r2, #2
 8009686:	f43f ac3f 	beq.w	8008f08 <dwt_ioctl+0x1764>
 800968a:	f81a 1002 	ldrb.w	r1, [sl, r2]
 800968e:	185e      	adds	r6, r3, r1
 8009690:	4566      	cmp	r6, ip
 8009692:	f77f ac40 	ble.w	8008f16 <dwt_ioctl+0x1772>
 8009696:	440b      	add	r3, r1
 8009698:	b29b      	uxth	r3, r3
 800969a:	3201      	adds	r2, #1
 800969c:	b2d2      	uxtb	r2, r2
 800969e:	2700      	movs	r7, #0
 80096a0:	e426      	b.n	8008ef0 <dwt_ioctl+0x174c>
 80096a2:	bf00      	nop

080096a4 <ull_initialise>:
 80096a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096a8:	4605      	mov	r5, r0
 80096aa:	460e      	mov	r6, r1
 80096ac:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d05c      	beq.n	800976c <ull_initialise+0xc8>
 80096b2:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 80096b4:	2300      	movs	r3, #0
 80096b6:	73e3      	strb	r3, [r4, #15]
 80096b8:	2202      	movs	r2, #2
 80096ba:	8262      	strh	r2, [r4, #18]
 80096bc:	75a3      	strb	r3, [r4, #22]
 80096be:	75e3      	strb	r3, [r4, #23]
 80096c0:	7423      	strb	r3, [r4, #16]
 80096c2:	72a3      	strb	r3, [r4, #10]
 80096c4:	72e3      	strb	r3, [r4, #11]
 80096c6:	2104      	movs	r1, #4
 80096c8:	4628      	mov	r0, r5
 80096ca:	f7fc fd33 	bl	8006134 <_dwt_otpread>
 80096ce:	4607      	mov	r7, r0
 80096d0:	2105      	movs	r1, #5
 80096d2:	4628      	mov	r0, r5
 80096d4:	f7fc fd2e 	bl	8006134 <_dwt_otpread>
 80096d8:	4680      	mov	r8, r0
 80096da:	210a      	movs	r1, #10
 80096dc:	4628      	mov	r0, r5
 80096de:	f7fc fd29 	bl	8006134 <_dwt_otpread>
 80096e2:	f3c0 4004 	ubfx	r0, r0, #16, #5
 80096e6:	7220      	strb	r0, [r4, #8]
 80096e8:	b127      	cbz	r7, 80096f4 <ull_initialise+0x50>
 80096ea:	f1b8 0f00 	cmp.w	r8, #0
 80096ee:	d001      	beq.n	80096f4 <ull_initialise+0x50>
 80096f0:	2800      	cmp	r0, #0
 80096f2:	d140      	bne.n	8009776 <ull_initialise+0xd2>
 80096f4:	2120      	movs	r1, #32
 80096f6:	4628      	mov	r0, r5
 80096f8:	f7fc fd1c 	bl	8006134 <_dwt_otpread>
 80096fc:	4b2f      	ldr	r3, [pc, #188]	; (80097bc <ull_initialise+0x118>)
 80096fe:	4298      	cmp	r0, r3
 8009700:	bf0c      	ite	eq
 8009702:	2301      	moveq	r3, #1
 8009704:	2300      	movne	r3, #0
 8009706:	7263      	strb	r3, [r4, #9]
 8009708:	f016 0f10 	tst.w	r6, #16
 800970c:	d137      	bne.n	800977e <ull_initialise+0xda>
 800970e:	f016 0f20 	tst.w	r6, #32
 8009712:	d13a      	bne.n	800978a <ull_initialise+0xe6>
 8009714:	f016 0f40 	tst.w	r6, #64	; 0x40
 8009718:	d13d      	bne.n	8009796 <ull_initialise+0xf2>
 800971a:	f016 0f80 	tst.w	r6, #128	; 0x80
 800971e:	d141      	bne.n	80097a4 <ull_initialise+0x100>
 8009720:	7ae3      	ldrb	r3, [r4, #11]
 8009722:	b90b      	cbnz	r3, 8009728 <ull_initialise+0x84>
 8009724:	2385      	movs	r3, #133	; 0x85
 8009726:	72e3      	strb	r3, [r4, #11]
 8009728:	7aa3      	ldrb	r3, [r4, #10]
 800972a:	b90b      	cbnz	r3, 8009730 <ull_initialise+0x8c>
 800972c:	2374      	movs	r3, #116	; 0x74
 800972e:	72a3      	strb	r3, [r4, #10]
 8009730:	211f      	movs	r1, #31
 8009732:	4628      	mov	r0, r5
 8009734:	f7fc fcfe 	bl	8006134 <_dwt_otpread>
 8009738:	7360      	strb	r0, [r4, #13]
 800973a:	211e      	movs	r1, #30
 800973c:	4628      	mov	r0, r5
 800973e:	f7fc fcf9 	bl	8006134 <_dwt_otpread>
 8009742:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
 8009746:	bf12      	itee	ne
 8009748:	73a0      	strbne	r0, [r4, #14]
 800974a:	232e      	moveq	r3, #46	; 0x2e
 800974c:	73a3      	strbeq	r3, [r4, #14]
 800974e:	7ba3      	ldrb	r3, [r4, #14]
 8009750:	2200      	movs	r2, #0
 8009752:	491b      	ldr	r1, [pc, #108]	; (80097c0 <ull_initialise+0x11c>)
 8009754:	4628      	mov	r0, r5
 8009756:	f7fc fc40 	bl	8005fda <dwt_write8bitoffsetreg>
 800975a:	2135      	movs	r1, #53	; 0x35
 800975c:	4628      	mov	r0, r5
 800975e:	f7fc fce9 	bl	8006134 <_dwt_otpread>
 8009762:	4603      	mov	r3, r0
 8009764:	bb20      	cbnz	r0, 80097b0 <ull_initialise+0x10c>
 8009766:	2000      	movs	r0, #0
 8009768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800976c:	202c      	movs	r0, #44	; 0x2c
 800976e:	f00a fa9b 	bl	8013ca8 <malloc>
 8009772:	6528      	str	r0, [r5, #80]	; 0x50
 8009774:	e79d      	b.n	80096b2 <ull_initialise+0xe>
 8009776:	4628      	mov	r0, r5
 8009778:	f7fd fcca 	bl	8007110 <_dwt_prog_ldo_and_bias_tune>
 800977c:	e7ba      	b.n	80096f4 <ull_initialise+0x50>
 800977e:	2106      	movs	r1, #6
 8009780:	4628      	mov	r0, r5
 8009782:	f7fc fcd7 	bl	8006134 <_dwt_otpread>
 8009786:	6020      	str	r0, [r4, #0]
 8009788:	e7c1      	b.n	800970e <ull_initialise+0x6a>
 800978a:	2107      	movs	r1, #7
 800978c:	4628      	mov	r0, r5
 800978e:	f7fc fcd1 	bl	8006134 <_dwt_otpread>
 8009792:	6060      	str	r0, [r4, #4]
 8009794:	e7be      	b.n	8009714 <ull_initialise+0x70>
 8009796:	2108      	movs	r1, #8
 8009798:	4628      	mov	r0, r5
 800979a:	f7fc fccb 	bl	8006134 <_dwt_otpread>
 800979e:	0c00      	lsrs	r0, r0, #16
 80097a0:	72a0      	strb	r0, [r4, #10]
 80097a2:	e7ba      	b.n	800971a <ull_initialise+0x76>
 80097a4:	2109      	movs	r1, #9
 80097a6:	4628      	mov	r0, r5
 80097a8:	f7fc fcc4 	bl	8006134 <_dwt_otpread>
 80097ac:	72e0      	strb	r0, [r4, #11]
 80097ae:	e7b7      	b.n	8009720 <ull_initialise+0x7c>
 80097b0:	2200      	movs	r2, #0
 80097b2:	4904      	ldr	r1, [pc, #16]	; (80097c4 <ull_initialise+0x120>)
 80097b4:	4628      	mov	r0, r5
 80097b6:	f7fc fd63 	bl	8006280 <dwt_write32bitoffsetreg>
 80097ba:	e7d4      	b.n	8009766 <ull_initialise+0xc2>
 80097bc:	10000240 	.word	0x10000240
 80097c0:	00090014 	.word	0x00090014
 80097c4:	00090004 	.word	0x00090004

080097c8 <_init>:
 80097c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097ca:	b085      	sub	sp, #20
 80097cc:	4604      	mov	r4, r0
 80097ce:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80097d0:	6819      	ldr	r1, [r3, #0]
 80097d2:	f7ff ff67 	bl	80096a4 <ull_initialise>
 80097d6:	4606      	mov	r6, r0
 80097d8:	6823      	ldr	r3, [r4, #0]
 80097da:	691b      	ldr	r3, [r3, #16]
 80097dc:	4798      	blx	r3
 80097de:	ab03      	add	r3, sp, #12
 80097e0:	2200      	movs	r2, #0
 80097e2:	4611      	mov	r1, r2
 80097e4:	4620      	mov	r0, r4
 80097e6:	f7fd ffdd 	bl	80077a4 <dwt_ioctl>
 80097ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ee:	6819      	ldr	r1, [r3, #0]
 80097f0:	4620      	mov	r0, r4
 80097f2:	f7fd fdad 	bl	8007350 <ull_configure>
 80097f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097fa:	6859      	ldr	r1, [r3, #4]
 80097fc:	4620      	mov	r0, r4
 80097fe:	f7fd fb47 	bl	8006e90 <ull_configuretxrf>
 8009802:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009806:	89db      	ldrh	r3, [r3, #14]
 8009808:	2200      	movs	r2, #0
 800980a:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800980e:	4620      	mov	r0, r4
 8009810:	f7fc fc35 	bl	800607e <dwt_write16bitoffsetreg>
 8009814:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009818:	899b      	ldrh	r3, [r3, #12]
 800981a:	2200      	movs	r2, #0
 800981c:	4952      	ldr	r1, [pc, #328]	; (8009968 <_init+0x1a0>)
 800981e:	4620      	mov	r0, r4
 8009820:	f7fc fc2d 	bl	800607e <dwt_write16bitoffsetreg>
 8009824:	2100      	movs	r1, #0
 8009826:	4620      	mov	r0, r4
 8009828:	f7fc fec6 	bl	80065b8 <ull_setrxaftertxdelay>
 800982c:	2500      	movs	r5, #0
 800982e:	9500      	str	r5, [sp, #0]
 8009830:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 8009834:	462a      	mov	r2, r5
 8009836:	2110      	movs	r1, #16
 8009838:	4620      	mov	r0, r4
 800983a:	f7fd fc4f 	bl	80070dc <dwt_modify16bitoffsetreg>
 800983e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009842:	895a      	ldrh	r2, [r3, #10]
 8009844:	8919      	ldrh	r1, [r3, #8]
 8009846:	4620      	mov	r0, r4
 8009848:	f7fd fbb2 	bl	8006fb0 <ull_configureframefilter>
 800984c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800984e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009850:	8a1b      	ldrh	r3, [r3, #16]
 8009852:	2202      	movs	r2, #2
 8009854:	210c      	movs	r1, #12
 8009856:	4620      	mov	r0, r4
 8009858:	f7fc fc11 	bl	800607e <dwt_write16bitoffsetreg>
 800985c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800985e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009860:	8a5b      	ldrh	r3, [r3, #18]
 8009862:	462a      	mov	r2, r5
 8009864:	210c      	movs	r1, #12
 8009866:	4620      	mov	r0, r4
 8009868:	f7fc fc09 	bl	800607e <dwt_write16bitoffsetreg>
 800986c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800986e:	7a19      	ldrb	r1, [r3, #8]
 8009870:	4620      	mov	r0, r4
 8009872:	f7fd fc69 	bl	8007148 <ull_setleds>
 8009876:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009878:	68d9      	ldr	r1, [r3, #12]
 800987a:	4620      	mov	r0, r4
 800987c:	f7fc feb2 	bl	80065e4 <ull_setlnapamode>
 8009880:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009882:	7e0b      	ldrb	r3, [r1, #24]
 8009884:	694a      	ldr	r2, [r1, #20]
 8009886:	6909      	ldr	r1, [r1, #16]
 8009888:	4620      	mov	r0, r4
 800988a:	f7fd f9e9 	bl	8006c60 <ull_setinterrupt>
 800988e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009890:	7f9a      	ldrb	r2, [r3, #30]
 8009892:	8b99      	ldrh	r1, [r3, #28]
 8009894:	4620      	mov	r0, r4
 8009896:	f7fc fcb7 	bl	8006208 <ull_configuresleep>
 800989a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800989c:	7b93      	ldrb	r3, [r2, #14]
 800989e:	2b2e      	cmp	r3, #46	; 0x2e
 80098a0:	d005      	beq.n	80098ae <_init+0xe6>
 80098a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098a4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80098a8:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 80098ac:	d00a      	beq.n	80098c4 <_init+0xfc>
 80098ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80098b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098b8:	7393      	strb	r3, [r2, #14]
 80098ba:	2200      	movs	r2, #0
 80098bc:	492b      	ldr	r1, [pc, #172]	; (800996c <_init+0x1a4>)
 80098be:	4620      	mov	r0, r4
 80098c0:	f7fc fb8b 	bl	8005fda <dwt_write8bitoffsetreg>
 80098c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098c6:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 80098ca:	4620      	mov	r0, r4
 80098cc:	f7fd fa68 	bl	8006da0 <ull_configciadiag>
 80098d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098d2:	6a19      	ldr	r1, [r3, #32]
 80098d4:	4620      	mov	r0, r4
 80098d6:	f7fc fea7 	bl	8006628 <ull_configurestskey>
 80098da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098dc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80098de:	4620      	mov	r0, r4
 80098e0:	f7fc fec6 	bl	8006670 <ull_configurestsiv>
 80098e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098e6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80098ea:	bba3      	cbnz	r3, 8009956 <_init+0x18e>
 80098ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098ee:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 80098f2:	4620      	mov	r0, r4
 80098f4:	f7fc fbb0 	bl	8006058 <ull_configeventcounters>
 80098f8:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
 80098fc:	2d00      	cmp	r5, #0
 80098fe:	db27      	blt.n	8009950 <_init+0x188>
 8009900:	2301      	movs	r3, #1
 8009902:	fa03 f505 	lsl.w	r5, r3, r5
 8009906:	b2af      	uxth	r7, r5
 8009908:	f04f 7290 	mov.w	r2, #18874368	; 0x1200000
 800990c:	4639      	mov	r1, r7
 800990e:	4620      	mov	r0, r4
 8009910:	f7fd f988 	bl	8006c24 <ull_setgpiomode>
 8009914:	f10d 030a 	add.w	r3, sp, #10
 8009918:	9300      	str	r3, [sp, #0]
 800991a:	2302      	movs	r3, #2
 800991c:	2200      	movs	r2, #0
 800991e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8009922:	4620      	mov	r0, r4
 8009924:	f7fb ff60 	bl	80057e8 <dwt_readfromdevice>
 8009928:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800992c:	ea23 0305 	bic.w	r3, r3, r5
 8009930:	f8ad 300a 	strh.w	r3, [sp, #10]
 8009934:	2200      	movs	r2, #0
 8009936:	490e      	ldr	r1, [pc, #56]	; (8009970 <_init+0x1a8>)
 8009938:	4620      	mov	r0, r4
 800993a:	f7fc fba0 	bl	800607e <dwt_write16bitoffsetreg>
 800993e:	f994 204d 	ldrsb.w	r2, [r4, #77]	; 0x4d
 8009942:	fab2 f282 	clz	r2, r2
 8009946:	0952      	lsrs	r2, r2, #5
 8009948:	4639      	mov	r1, r7
 800994a:	4620      	mov	r0, r4
 800994c:	f7fd fc7a 	bl	8007244 <ull_setgpiovalue>
 8009950:	4630      	mov	r0, r6
 8009952:	b005      	add	sp, #20
 8009954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009956:	2301      	movs	r3, #1
 8009958:	9300      	str	r3, [sp, #0]
 800995a:	23ff      	movs	r3, #255	; 0xff
 800995c:	2200      	movs	r2, #0
 800995e:	4905      	ldr	r1, [pc, #20]	; (8009974 <_init+0x1ac>)
 8009960:	4620      	mov	r0, r4
 8009962:	f7fd fa09 	bl	8006d78 <dwt_modify8bitoffsetreg>
 8009966:	e7c1      	b.n	80098ec <_init+0x124>
 8009968:	00010004 	.word	0x00010004
 800996c:	00090014 	.word	0x00090014
 8009970:	00050008 	.word	0x00050008
 8009974:	00020004 	.word	0x00020004

08009978 <dwt_dbg_fn>:
 8009978:	2998      	cmp	r1, #152	; 0x98
 800997a:	4802      	ldr	r0, [pc, #8]	; (8009984 <dwt_dbg_fn+0xc>)
 800997c:	bf18      	it	ne
 800997e:	2000      	movne	r0, #0
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop
 8009984:	08015f9c 	.word	0x08015f9c

08009988 <_deinit>:
 8009988:	4770      	bx	lr

0800998a <dwt_xfer3xxx>:
 800998a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	4605      	mov	r5, r0
 8009992:	460f      	mov	r7, r1
 8009994:	461e      	mov	r6, r3
 8009996:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800999a:	1e59      	subs	r1, r3, #1
 800999c:	b289      	uxth	r1, r1
 800999e:	2901      	cmp	r1, #1
 80099a0:	d91c      	bls.n	80099dc <dwt_xfer3xxx+0x52>
 80099a2:	19d0      	adds	r0, r2, r7
 80099a4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80099a8:	443a      	add	r2, r7
 80099aa:	f3c2 4104 	ubfx	r1, r2, #16, #5
 80099ae:	0082      	lsls	r2, r0, #2
 80099b0:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80099b4:	ea43 0102 	orr.w	r1, r3, r2
 80099b8:	0a09      	lsrs	r1, r1, #8
 80099ba:	f88d 100c 	strb.w	r1, [sp, #12]
 80099be:	b920      	cbnz	r0, 80099ca <dwt_xfer3xxx+0x40>
 80099c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099c4:	d018      	beq.n	80099f8 <dwt_xfer3xxx+0x6e>
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d037      	beq.n	8009a3a <dwt_xfer3xxx+0xb0>
 80099ca:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80099ce:	f88d 100c 	strb.w	r1, [sp, #12]
 80099d2:	431a      	orrs	r2, r3
 80099d4:	f88d 200d 	strb.w	r2, [sp, #13]
 80099d8:	2402      	movs	r4, #2
 80099da:	e005      	b.n	80099e8 <dwt_xfer3xxx+0x5e>
 80099dc:	007a      	lsls	r2, r7, #1
 80099de:	f062 027e 	orn	r2, r2, #126	; 0x7e
 80099e2:	f88d 200c 	strb.w	r2, [sp, #12]
 80099e6:	2401      	movs	r4, #1
 80099e8:	2b02      	cmp	r3, #2
 80099ea:	d006      	beq.n	80099fa <dwt_xfer3xxx+0x70>
 80099ec:	d326      	bcc.n	8009a3c <dwt_xfer3xxx+0xb2>
 80099ee:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80099f2:	2b03      	cmp	r3, #3
 80099f4:	d901      	bls.n	80099fa <dwt_xfer3xxx+0x70>
 80099f6:	e7fe      	b.n	80099f6 <dwt_xfer3xxx+0x6c>
 80099f8:	2401      	movs	r4, #1
 80099fa:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80099fc:	7d1b      	ldrb	r3, [r3, #20]
 80099fe:	b94b      	cbnz	r3, 8009a14 <dwt_xfer3xxx+0x8a>
 8009a00:	682b      	ldr	r3, [r5, #0]
 8009a02:	685d      	ldr	r5, [r3, #4]
 8009a04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a06:	4632      	mov	r2, r6
 8009a08:	a903      	add	r1, sp, #12
 8009a0a:	4620      	mov	r0, r4
 8009a0c:	47a8      	blx	r5
 8009a0e:	b004      	add	sp, #16
 8009a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a14:	2200      	movs	r2, #0
 8009a16:	4621      	mov	r1, r4
 8009a18:	a803      	add	r0, sp, #12
 8009a1a:	f7fb fda7 	bl	800556c <dwt_generatecrc8>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	4631      	mov	r1, r6
 8009a22:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009a24:	f7fb fda2 	bl	800556c <dwt_generatecrc8>
 8009a28:	682b      	ldr	r3, [r5, #0]
 8009a2a:	9000      	str	r0, [sp, #0]
 8009a2c:	689d      	ldr	r5, [r3, #8]
 8009a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a30:	4632      	mov	r2, r6
 8009a32:	a903      	add	r1, sp, #12
 8009a34:	4620      	mov	r0, r4
 8009a36:	47a8      	blx	r5
 8009a38:	e7e9      	b.n	8009a0e <dwt_xfer3xxx+0x84>
 8009a3a:	2401      	movs	r4, #1
 8009a3c:	682b      	ldr	r3, [r5, #0]
 8009a3e:	f8d3 8000 	ldr.w	r8, [r3]
 8009a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a44:	4632      	mov	r2, r6
 8009a46:	a903      	add	r1, sp, #12
 8009a48:	4620      	mov	r0, r4
 8009a4a:	47c0      	blx	r8
 8009a4c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009a4e:	7d1b      	ldrb	r3, [r3, #20]
 8009a50:	2b02      	cmp	r3, #2
 8009a52:	d1dc      	bne.n	8009a0e <dwt_xfer3xxx+0x84>
 8009a54:	2f18      	cmp	r7, #24
 8009a56:	d0da      	beq.n	8009a0e <dwt_xfer3xxx+0x84>
 8009a58:	2200      	movs	r2, #0
 8009a5a:	4621      	mov	r1, r4
 8009a5c:	a803      	add	r0, sp, #12
 8009a5e:	f7fb fd85 	bl	800556c <dwt_generatecrc8>
 8009a62:	4602      	mov	r2, r0
 8009a64:	4631      	mov	r1, r6
 8009a66:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009a68:	f7fb fd80 	bl	800556c <dwt_generatecrc8>
 8009a6c:	4604      	mov	r4, r0
 8009a6e:	2200      	movs	r2, #0
 8009a70:	2118      	movs	r1, #24
 8009a72:	4628      	mov	r0, r5
 8009a74:	f000 f839 	bl	8009aea <dwt_read8bitoffsetreg>
 8009a78:	4284      	cmp	r4, r0
 8009a7a:	d0c8      	beq.n	8009a0e <dwt_xfer3xxx+0x84>
 8009a7c:	68eb      	ldr	r3, [r5, #12]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d0c5      	beq.n	8009a0e <dwt_xfer3xxx+0x84>
 8009a82:	4798      	blx	r3
 8009a84:	e7c3      	b.n	8009a0e <dwt_xfer3xxx+0x84>

08009a86 <dwt_readfromdevice>:
 8009a86:	b510      	push	{r4, lr}
 8009a88:	b082      	sub	sp, #8
 8009a8a:	2400      	movs	r4, #0
 8009a8c:	9401      	str	r4, [sp, #4]
 8009a8e:	9c04      	ldr	r4, [sp, #16]
 8009a90:	9400      	str	r4, [sp, #0]
 8009a92:	f7ff ff7a 	bl	800998a <dwt_xfer3xxx>
 8009a96:	b002      	add	sp, #8
 8009a98:	bd10      	pop	{r4, pc}

08009a9a <dwt_read32bitoffsetreg>:
 8009a9a:	b500      	push	{lr}
 8009a9c:	b085      	sub	sp, #20
 8009a9e:	ab03      	add	r3, sp, #12
 8009aa0:	9300      	str	r3, [sp, #0]
 8009aa2:	2304      	movs	r3, #4
 8009aa4:	b292      	uxth	r2, r2
 8009aa6:	f7ff ffee 	bl	8009a86 <dwt_readfromdevice>
 8009aaa:	f10d 030f 	add.w	r3, sp, #15
 8009aae:	f10d 010b 	add.w	r1, sp, #11
 8009ab2:	2000      	movs	r0, #0
 8009ab4:	f813 2901 	ldrb.w	r2, [r3], #-1
 8009ab8:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 8009abc:	428b      	cmp	r3, r1
 8009abe:	d1f9      	bne.n	8009ab4 <dwt_read32bitoffsetreg+0x1a>
 8009ac0:	b005      	add	sp, #20
 8009ac2:	f85d fb04 	ldr.w	pc, [sp], #4

08009ac6 <dwt_read16bitoffsetreg>:
 8009ac6:	b500      	push	{lr}
 8009ac8:	b085      	sub	sp, #20
 8009aca:	ab03      	add	r3, sp, #12
 8009acc:	9300      	str	r3, [sp, #0]
 8009ace:	2302      	movs	r3, #2
 8009ad0:	b292      	uxth	r2, r2
 8009ad2:	f7ff ffd8 	bl	8009a86 <dwt_readfromdevice>
 8009ad6:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8009ada:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8009ade:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8009ae2:	b280      	uxth	r0, r0
 8009ae4:	b005      	add	sp, #20
 8009ae6:	f85d fb04 	ldr.w	pc, [sp], #4

08009aea <dwt_read8bitoffsetreg>:
 8009aea:	b500      	push	{lr}
 8009aec:	b085      	sub	sp, #20
 8009aee:	f10d 030f 	add.w	r3, sp, #15
 8009af2:	9300      	str	r3, [sp, #0]
 8009af4:	2301      	movs	r3, #1
 8009af6:	b292      	uxth	r2, r2
 8009af8:	f7ff ffc5 	bl	8009a86 <dwt_readfromdevice>
 8009afc:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8009b00:	b005      	add	sp, #20
 8009b02:	f85d fb04 	ldr.w	pc, [sp], #4

08009b06 <ull_readdiagnostics>:
 8009b06:	b530      	push	{r4, r5, lr}
 8009b08:	b0bd      	sub	sp, #244	; 0xf4
 8009b0a:	4605      	mov	r5, r0
 8009b0c:	460c      	mov	r4, r1
 8009b0e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009b10:	7b9a      	ldrb	r2, [r3, #14]
 8009b12:	2a01      	cmp	r2, #1
 8009b14:	d01c      	beq.n	8009b50 <ull_readdiagnostics+0x4a>
 8009b16:	2a03      	cmp	r2, #3
 8009b18:	f040 81e8 	bne.w	8009eec <ull_readdiagnostics+0x3e6>
 8009b1c:	7d9b      	ldrb	r3, [r3, #22]
 8009b1e:	f013 0f08 	tst.w	r3, #8
 8009b22:	d10c      	bne.n	8009b3e <ull_readdiagnostics+0x38>
 8009b24:	f013 0f04 	tst.w	r3, #4
 8009b28:	ab02      	add	r3, sp, #8
 8009b2a:	9300      	str	r3, [sp, #0]
 8009b2c:	bf14      	ite	ne
 8009b2e:	2338      	movne	r3, #56	; 0x38
 8009b30:	2320      	moveq	r3, #32
 8009b32:	2200      	movs	r2, #0
 8009b34:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8009b38:	f7ff ffa5 	bl	8009a86 <dwt_readfromdevice>
 8009b3c:	e019      	b.n	8009b72 <ull_readdiagnostics+0x6c>
 8009b3e:	ab02      	add	r3, sp, #8
 8009b40:	9300      	str	r3, [sp, #0]
 8009b42:	23e8      	movs	r3, #232	; 0xe8
 8009b44:	2200      	movs	r2, #0
 8009b46:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8009b4a:	f7ff ff9c 	bl	8009a86 <dwt_readfromdevice>
 8009b4e:	e010      	b.n	8009b72 <ull_readdiagnostics+0x6c>
 8009b50:	7d9b      	ldrb	r3, [r3, #22]
 8009b52:	f013 0f08 	tst.w	r3, #8
 8009b56:	f040 81c0 	bne.w	8009eda <ull_readdiagnostics+0x3d4>
 8009b5a:	f013 0f04 	tst.w	r3, #4
 8009b5e:	ab02      	add	r3, sp, #8
 8009b60:	9300      	str	r3, [sp, #0]
 8009b62:	bf14      	ite	ne
 8009b64:	2338      	movne	r3, #56	; 0x38
 8009b66:	2320      	moveq	r3, #32
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8009b6e:	f7ff ff8a 	bl	8009a86 <dwt_readfromdevice>
 8009b72:	f10d 0217 	add.w	r2, sp, #23
 8009b76:	f104 031a 	add.w	r3, r4, #26
 8009b7a:	f104 0020 	add.w	r0, r4, #32
 8009b7e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8009b82:	f803 1b01 	strb.w	r1, [r3], #1
 8009b86:	4283      	cmp	r3, r0
 8009b88:	d1f9      	bne.n	8009b7e <ull_readdiagnostics+0x78>
 8009b8a:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8009b8e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8009b92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009b96:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b9a:	8463      	strh	r3, [r4, #34]	; 0x22
 8009b9c:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8009ba0:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8009ba4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009ba8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009bac:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8009bb0:	bf1c      	itt	ne
 8009bb2:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 8009bb6:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 8009bba:	8423      	strh	r3, [r4, #32]
 8009bbc:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 8009bc0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009bc4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009bcc:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009bce:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009bd0:	7d9b      	ldrb	r3, [r3, #22]
 8009bd2:	f013 0f02 	tst.w	r3, #2
 8009bd6:	f040 817e 	bne.w	8009ed6 <ull_readdiagnostics+0x3d0>
 8009bda:	aa0a      	add	r2, sp, #40	; 0x28
 8009bdc:	1e63      	subs	r3, r4, #1
 8009bde:	1d20      	adds	r0, r4, #4
 8009be0:	f812 1b01 	ldrb.w	r1, [r2], #1
 8009be4:	f803 1f01 	strb.w	r1, [r3, #1]!
 8009be8:	79d1      	ldrb	r1, [r2, #7]
 8009bea:	7219      	strb	r1, [r3, #8]
 8009bec:	7bd1      	ldrb	r1, [r2, #15]
 8009bee:	7459      	strb	r1, [r3, #17]
 8009bf0:	4283      	cmp	r3, r0
 8009bf2:	d1f5      	bne.n	8009be0 <ull_readdiagnostics+0xda>
 8009bf4:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8009bf8:	7163      	strb	r3, [r4, #5]
 8009bfa:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8009bfe:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8009c02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009c06:	80e3      	strh	r3, [r4, #6]
 8009c08:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8009c0c:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8009c10:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009c14:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8009c18:	f8a4 300d 	strh.w	r3, [r4, #13]
 8009c1c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8009c20:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8009c24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009c28:	f8a4 300f 	strh.w	r3, [r4, #15]
 8009c2c:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8009c30:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8009c34:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009c38:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8009c3c:	82e3      	strh	r3, [r4, #22]
 8009c3e:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 8009c42:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8009c46:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009c4a:	8323      	strh	r3, [r4, #24]
 8009c4c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009c4e:	7d9b      	ldrb	r3, [r3, #22]
 8009c50:	f013 0f04 	tst.w	r3, #4
 8009c54:	f040 813f 	bne.w	8009ed6 <ull_readdiagnostics+0x3d0>
 8009c58:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 8009c5c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8009c60:	041b      	lsls	r3, r3, #16
 8009c62:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009c66:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8009c70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009c74:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8009c78:	6263      	str	r3, [r4, #36]	; 0x24
 8009c7a:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 8009c7e:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 8009c82:	041b      	lsls	r3, r3, #16
 8009c84:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009c88:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 8009c92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009c96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c9a:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c9c:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 8009ca0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8009ca4:	041b      	lsls	r3, r3, #16
 8009ca6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009caa:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8009cb4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009cb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009cbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009cbe:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 8009cc2:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 8009cc6:	041b      	lsls	r3, r3, #16
 8009cc8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009ccc:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 8009cd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009cda:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009cde:	6323      	str	r3, [r4, #48]	; 0x30
 8009ce0:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 8009ce4:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 8009ce8:	041b      	lsls	r3, r3, #16
 8009cea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009cee:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 8009cf8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009cfc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009d00:	6363      	str	r3, [r4, #52]	; 0x34
 8009d02:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 8009d06:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 8009d0a:	041b      	lsls	r3, r3, #16
 8009d0c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009d10:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8009d14:	4313      	orrs	r3, r2
 8009d16:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 8009d1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009d1e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009d22:	63a3      	str	r3, [r4, #56]	; 0x38
 8009d24:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 8009d28:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8009d2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009d30:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8009d32:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 8009d36:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8009d3a:	041b      	lsls	r3, r3, #16
 8009d3c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009d40:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8009d44:	4313      	orrs	r3, r2
 8009d46:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 8009d4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009d4e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009d52:	6423      	str	r3, [r4, #64]	; 0x40
 8009d54:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 8009d58:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 8009d5c:	041b      	lsls	r3, r3, #16
 8009d5e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009d62:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 8009d66:	4313      	orrs	r3, r2
 8009d68:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
 8009d6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009d70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d74:	6463      	str	r3, [r4, #68]	; 0x44
 8009d76:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 8009d7a:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8009d7e:	041b      	lsls	r3, r3, #16
 8009d80:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009d84:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 8009d8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009d92:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009d96:	64a3      	str	r3, [r4, #72]	; 0x48
 8009d98:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8009d9c:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8009da0:	041b      	lsls	r3, r3, #16
 8009da2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009da6:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 8009daa:	4313      	orrs	r3, r2
 8009dac:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
 8009db0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009db4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009db8:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009dba:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 8009dbe:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
 8009dc2:	041b      	lsls	r3, r3, #16
 8009dc4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009dc8:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 8009dd2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009dd6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009dda:	6523      	str	r3, [r4, #80]	; 0x50
 8009ddc:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 8009de0:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8009de4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009de8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009dec:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8009df0:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 8009df4:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8009df8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e00:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8009e04:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 8009e08:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 8009e0c:	041b      	lsls	r3, r3, #16
 8009e0e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009e12:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 8009e16:	4313      	orrs	r3, r2
 8009e18:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 8009e1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009e20:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009e24:	65a3      	str	r3, [r4, #88]	; 0x58
 8009e26:	f89d 20c3 	ldrb.w	r2, [sp, #195]	; 0xc3
 8009e2a:	f89d 30c2 	ldrb.w	r3, [sp, #194]	; 0xc2
 8009e2e:	041b      	lsls	r3, r3, #16
 8009e30:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009e34:	f89d 20c0 	ldrb.w	r2, [sp, #192]	; 0xc0
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	f89d 20c1 	ldrb.w	r2, [sp, #193]	; 0xc1
 8009e3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009e42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e46:	65e3      	str	r3, [r4, #92]	; 0x5c
 8009e48:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
 8009e4c:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
 8009e50:	041b      	lsls	r3, r3, #16
 8009e52:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009e56:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
 8009e60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009e64:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009e68:	6623      	str	r3, [r4, #96]	; 0x60
 8009e6a:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
 8009e6e:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 8009e72:	041b      	lsls	r3, r3, #16
 8009e74:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009e78:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 8009e82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009e86:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009e8a:	6663      	str	r3, [r4, #100]	; 0x64
 8009e8c:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
 8009e90:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
 8009e94:	041b      	lsls	r3, r3, #16
 8009e96:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009e9a:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 8009ea4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009ea8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009eac:	66a3      	str	r3, [r4, #104]	; 0x68
 8009eae:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 8009eb2:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8009eb6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009eba:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009ebe:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 8009ec2:	f89d 20ed 	ldrb.w	r2, [sp, #237]	; 0xed
 8009ec6:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 8009eca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009ece:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ed2:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 8009ed6:	b03d      	add	sp, #244	; 0xf4
 8009ed8:	bd30      	pop	{r4, r5, pc}
 8009eda:	ab02      	add	r3, sp, #8
 8009edc:	9300      	str	r3, [sp, #0]
 8009ede:	23e8      	movs	r3, #232	; 0xe8
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8009ee6:	f7ff fdce 	bl	8009a86 <dwt_readfromdevice>
 8009eea:	e642      	b.n	8009b72 <ull_readdiagnostics+0x6c>
 8009eec:	7d9b      	ldrb	r3, [r3, #22]
 8009eee:	f013 0f01 	tst.w	r3, #1
 8009ef2:	f000 81b3 	beq.w	800a25c <ull_readdiagnostics+0x756>
 8009ef6:	ab02      	add	r3, sp, #8
 8009ef8:	9300      	str	r3, [sp, #0]
 8009efa:	236c      	movs	r3, #108	; 0x6c
 8009efc:	2200      	movs	r2, #0
 8009efe:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8009f02:	f7ff fdc0 	bl	8009a86 <dwt_readfromdevice>
 8009f06:	ab1d      	add	r3, sp, #116	; 0x74
 8009f08:	9300      	str	r3, [sp, #0]
 8009f0a:	236c      	movs	r3, #108	; 0x6c
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 8009f12:	4628      	mov	r0, r5
 8009f14:	f7ff fdb7 	bl	8009a86 <dwt_readfromdevice>
 8009f18:	aa02      	add	r2, sp, #8
 8009f1a:	1e63      	subs	r3, r4, #1
 8009f1c:	1d20      	adds	r0, r4, #4
 8009f1e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8009f22:	f803 1f01 	strb.w	r1, [r3, #1]!
 8009f26:	79d1      	ldrb	r1, [r2, #7]
 8009f28:	7219      	strb	r1, [r3, #8]
 8009f2a:	7bd1      	ldrb	r1, [r2, #15]
 8009f2c:	7459      	strb	r1, [r3, #17]
 8009f2e:	7dd1      	ldrb	r1, [r2, #23]
 8009f30:	7699      	strb	r1, [r3, #26]
 8009f32:	4283      	cmp	r3, r0
 8009f34:	d1f3      	bne.n	8009f1e <ull_readdiagnostics+0x418>
 8009f36:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8009f3a:	77e3      	strb	r3, [r4, #31]
 8009f3c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8009f40:	7163      	strb	r3, [r4, #5]
 8009f42:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8009f46:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8009f4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009f4e:	80e3      	strh	r3, [r4, #6]
 8009f50:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8009f54:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8009f58:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8009f5c:	f3c2 12cf 	ubfx	r2, r2, #7, #16
 8009f60:	f8a4 200d 	strh.w	r2, [r4, #13]
 8009f64:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8009f68:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8009f6c:	f8a4 200f 	strh.w	r2, [r4, #15]
 8009f70:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8009f74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009f78:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8009f7c:	82e3      	strh	r3, [r4, #22]
 8009f7e:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8009f82:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8009f86:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009f8a:	8323      	strh	r3, [r4, #24]
 8009f8c:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8009f90:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8009f94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009f98:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009f9c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8009fa0:	bf1c      	itt	ne
 8009fa2:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 8009fa6:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 8009faa:	8423      	strh	r3, [r4, #32]
 8009fac:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 8009fb0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8009fb4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009fb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009fbc:	8463      	strh	r3, [r4, #34]	; 0x22
 8009fbe:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8009fc2:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8009fc6:	041b      	lsls	r3, r3, #16
 8009fc8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009fcc:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 8009fd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009fda:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8009fde:	6263      	str	r3, [r4, #36]	; 0x24
 8009fe0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009fe2:	7d9b      	ldrb	r3, [r3, #22]
 8009fe4:	f013 0f01 	tst.w	r3, #1
 8009fe8:	f43f af75 	beq.w	8009ed6 <ull_readdiagnostics+0x3d0>
 8009fec:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 8009ff0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8009ff4:	041b      	lsls	r3, r3, #16
 8009ff6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009ffa:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8009ffe:	4313      	orrs	r3, r2
 800a000:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 800a004:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a008:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a00c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a00e:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800a012:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800a016:	041b      	lsls	r3, r3, #16
 800a018:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a01c:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800a020:	4313      	orrs	r3, r2
 800a022:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800a026:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a02a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a02e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a030:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 800a034:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 800a038:	041b      	lsls	r3, r3, #16
 800a03a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a03e:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 800a042:	4313      	orrs	r3, r2
 800a044:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 800a048:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a04c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a050:	6323      	str	r3, [r4, #48]	; 0x30
 800a052:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 800a056:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800a05a:	041b      	lsls	r3, r3, #16
 800a05c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a060:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800a064:	4313      	orrs	r3, r2
 800a066:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 800a06a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a06e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a072:	6363      	str	r3, [r4, #52]	; 0x34
 800a074:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 800a078:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800a07c:	041b      	lsls	r3, r3, #16
 800a07e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a082:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800a086:	4313      	orrs	r3, r2
 800a088:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800a08c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a090:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a094:	63a3      	str	r3, [r4, #56]	; 0x38
 800a096:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 800a09a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800a09e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a0a2:	87a3      	strh	r3, [r4, #60]	; 0x3c
 800a0a4:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 800a0a8:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800a0ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a0b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a0b4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800a0b6:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 800a0ba:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 800a0be:	041b      	lsls	r3, r3, #16
 800a0c0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a0c4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 800a0ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a0d2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800a0d6:	6423      	str	r3, [r4, #64]	; 0x40
 800a0d8:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 800a0dc:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
 800a0e0:	041b      	lsls	r3, r3, #16
 800a0e2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a0e6:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 800a0f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a0f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0f8:	6463      	str	r3, [r4, #68]	; 0x44
 800a0fa:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
 800a0fe:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 800a102:	041b      	lsls	r3, r3, #16
 800a104:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a108:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 800a10c:	4313      	orrs	r3, r2
 800a10e:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 800a112:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a116:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a11a:	64a3      	str	r3, [r4, #72]	; 0x48
 800a11c:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 800a120:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 800a124:	041b      	lsls	r3, r3, #16
 800a126:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a12a:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 800a12e:	4313      	orrs	r3, r2
 800a130:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
 800a134:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a138:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a13c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a13e:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 800a142:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 800a146:	041b      	lsls	r3, r3, #16
 800a148:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a14c:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 800a150:	4313      	orrs	r3, r2
 800a152:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 800a156:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a15a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a15e:	6523      	str	r3, [r4, #80]	; 0x50
 800a160:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 800a164:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 800a168:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a16c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800a170:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 800a174:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 800a178:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 800a17c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a184:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 800a188:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 800a18c:	f89d 30ae 	ldrb.w	r3, [sp, #174]	; 0xae
 800a190:	041b      	lsls	r3, r3, #16
 800a192:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a196:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 800a19a:	4313      	orrs	r3, r2
 800a19c:	f89d 20ad 	ldrb.w	r2, [sp, #173]	; 0xad
 800a1a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a1a4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800a1a8:	65a3      	str	r3, [r4, #88]	; 0x58
 800a1aa:	f89d 20b3 	ldrb.w	r2, [sp, #179]	; 0xb3
 800a1ae:	f89d 30b2 	ldrb.w	r3, [sp, #178]	; 0xb2
 800a1b2:	041b      	lsls	r3, r3, #16
 800a1b4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a1b8:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	f89d 20b1 	ldrb.w	r2, [sp, #177]	; 0xb1
 800a1c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a1c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1ca:	65e3      	str	r3, [r4, #92]	; 0x5c
 800a1cc:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 800a1d0:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
 800a1d4:	041b      	lsls	r3, r3, #16
 800a1d6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a1da:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	f89d 20b5 	ldrb.w	r2, [sp, #181]	; 0xb5
 800a1e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a1e8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a1ec:	6623      	str	r3, [r4, #96]	; 0x60
 800a1ee:	f89d 20bb 	ldrb.w	r2, [sp, #187]	; 0xbb
 800a1f2:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
 800a1f6:	041b      	lsls	r3, r3, #16
 800a1f8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a1fc:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 800a200:	4313      	orrs	r3, r2
 800a202:	f89d 20b9 	ldrb.w	r2, [sp, #185]	; 0xb9
 800a206:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a20a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a20e:	6663      	str	r3, [r4, #100]	; 0x64
 800a210:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 800a214:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 800a218:	041b      	lsls	r3, r3, #16
 800a21a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a21e:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 800a222:	4313      	orrs	r3, r2
 800a224:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 800a228:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a22c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a230:	66a3      	str	r3, [r4, #104]	; 0x68
 800a232:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 800a236:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 800a23a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a23e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800a242:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800a246:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 800a24a:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 800a24e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a252:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a256:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 800a25a:	e63c      	b.n	8009ed6 <ull_readdiagnostics+0x3d0>
 800a25c:	ab02      	add	r3, sp, #8
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	2328      	movs	r3, #40	; 0x28
 800a262:	2200      	movs	r2, #0
 800a264:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800a268:	f7ff fc0d 	bl	8009a86 <dwt_readfromdevice>
 800a26c:	e654      	b.n	8009f18 <ull_readdiagnostics+0x412>
	...

0800a270 <ull_readrxtimestamp>:
 800a270:	b500      	push	{lr}
 800a272:	b083      	sub	sp, #12
 800a274:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a276:	7b9b      	ldrb	r3, [r3, #14]
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d00b      	beq.n	800a294 <ull_readrxtimestamp+0x24>
 800a27c:	2b03      	cmp	r3, #3
 800a27e:	d110      	bne.n	800a2a2 <ull_readrxtimestamp+0x32>
 800a280:	9100      	str	r1, [sp, #0]
 800a282:	2305      	movs	r3, #5
 800a284:	2204      	movs	r2, #4
 800a286:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800a28a:	f7ff fbfc 	bl	8009a86 <dwt_readfromdevice>
 800a28e:	b003      	add	sp, #12
 800a290:	f85d fb04 	ldr.w	pc, [sp], #4
 800a294:	9100      	str	r1, [sp, #0]
 800a296:	2305      	movs	r3, #5
 800a298:	2200      	movs	r2, #0
 800a29a:	4905      	ldr	r1, [pc, #20]	; (800a2b0 <ull_readrxtimestamp+0x40>)
 800a29c:	f7ff fbf3 	bl	8009a86 <dwt_readfromdevice>
 800a2a0:	e7f5      	b.n	800a28e <ull_readrxtimestamp+0x1e>
 800a2a2:	9100      	str	r1, [sp, #0]
 800a2a4:	2305      	movs	r3, #5
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	2160      	movs	r1, #96	; 0x60
 800a2aa:	f7ff fbec 	bl	8009a86 <dwt_readfromdevice>
 800a2ae:	e7ee      	b.n	800a28e <ull_readrxtimestamp+0x1e>
 800a2b0:	00180004 	.word	0x00180004

0800a2b4 <dwt_writetodevice>:
 800a2b4:	b510      	push	{r4, lr}
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 800a2bc:	9401      	str	r4, [sp, #4]
 800a2be:	9c04      	ldr	r4, [sp, #16]
 800a2c0:	9400      	str	r4, [sp, #0]
 800a2c2:	f7ff fb62 	bl	800998a <dwt_xfer3xxx>
 800a2c6:	b002      	add	sp, #8
 800a2c8:	bd10      	pop	{r4, pc}

0800a2ca <dwt_write16bitoffsetreg>:
 800a2ca:	b500      	push	{lr}
 800a2cc:	b085      	sub	sp, #20
 800a2ce:	f88d 300c 	strb.w	r3, [sp, #12]
 800a2d2:	0a1b      	lsrs	r3, r3, #8
 800a2d4:	f88d 300d 	strb.w	r3, [sp, #13]
 800a2d8:	ab03      	add	r3, sp, #12
 800a2da:	9300      	str	r3, [sp, #0]
 800a2dc:	2302      	movs	r3, #2
 800a2de:	b292      	uxth	r2, r2
 800a2e0:	f7ff ffe8 	bl	800a2b4 <dwt_writetodevice>
 800a2e4:	b005      	add	sp, #20
 800a2e6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a2ec <ull_force_clocks>:
 800a2ec:	b508      	push	{r3, lr}
 800a2ee:	2901      	cmp	r1, #1
 800a2f0:	d002      	beq.n	800a2f8 <ull_force_clocks+0xc>
 800a2f2:	2905      	cmp	r1, #5
 800a2f4:	d007      	beq.n	800a306 <ull_force_clocks+0x1a>
 800a2f6:	bd08      	pop	{r3, pc}
 800a2f8:	f641 0322 	movw	r3, #6178	; 0x1822
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	4905      	ldr	r1, [pc, #20]	; (800a314 <ull_force_clocks+0x28>)
 800a300:	f7ff ffe3 	bl	800a2ca <dwt_write16bitoffsetreg>
 800a304:	e7f7      	b.n	800a2f6 <ull_force_clocks+0xa>
 800a306:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a30a:	2200      	movs	r2, #0
 800a30c:	4901      	ldr	r1, [pc, #4]	; (800a314 <ull_force_clocks+0x28>)
 800a30e:	f7ff ffdc 	bl	800a2ca <dwt_write16bitoffsetreg>
 800a312:	e7f0      	b.n	800a2f6 <ull_force_clocks+0xa>
 800a314:	00110004 	.word	0x00110004

0800a318 <__dwt_otp_write_wdata_id_reg>:
 800a318:	b538      	push	{r3, r4, r5, lr}
 800a31a:	4605      	mov	r5, r0
 800a31c:	460c      	mov	r4, r1
 800a31e:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 800a322:	b29b      	uxth	r3, r3
 800a324:	2200      	movs	r2, #0
 800a326:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800a32a:	f7ff ffce 	bl	800a2ca <dwt_write16bitoffsetreg>
 800a32e:	b2a3      	uxth	r3, r4
 800a330:	2200      	movs	r2, #0
 800a332:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800a336:	4628      	mov	r0, r5
 800a338:	f7ff ffc7 	bl	800a2ca <dwt_write16bitoffsetreg>
 800a33c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a340 <_dwt_otpread>:
 800a340:	b570      	push	{r4, r5, r6, lr}
 800a342:	4604      	mov	r4, r0
 800a344:	460e      	mov	r6, r1
 800a346:	4d0c      	ldr	r5, [pc, #48]	; (800a378 <_dwt_otpread+0x38>)
 800a348:	2301      	movs	r3, #1
 800a34a:	2200      	movs	r2, #0
 800a34c:	4629      	mov	r1, r5
 800a34e:	f7ff ffbc 	bl	800a2ca <dwt_write16bitoffsetreg>
 800a352:	4633      	mov	r3, r6
 800a354:	2200      	movs	r2, #0
 800a356:	4909      	ldr	r1, [pc, #36]	; (800a37c <_dwt_otpread+0x3c>)
 800a358:	4620      	mov	r0, r4
 800a35a:	f7ff ffb6 	bl	800a2ca <dwt_write16bitoffsetreg>
 800a35e:	2302      	movs	r3, #2
 800a360:	2200      	movs	r2, #0
 800a362:	4629      	mov	r1, r5
 800a364:	4620      	mov	r0, r4
 800a366:	f7ff ffb0 	bl	800a2ca <dwt_write16bitoffsetreg>
 800a36a:	2200      	movs	r2, #0
 800a36c:	4904      	ldr	r1, [pc, #16]	; (800a380 <_dwt_otpread+0x40>)
 800a36e:	4620      	mov	r0, r4
 800a370:	f7ff fb93 	bl	8009a9a <dwt_read32bitoffsetreg>
 800a374:	bd70      	pop	{r4, r5, r6, pc}
 800a376:	bf00      	nop
 800a378:	000b0008 	.word	0x000b0008
 800a37c:	000b0004 	.word	0x000b0004
 800a380:	000b0010 	.word	0x000b0010

0800a384 <dwt_write32bitoffsetreg>:
 800a384:	b510      	push	{r4, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	f88d 300c 	strb.w	r3, [sp, #12]
 800a38c:	0a1c      	lsrs	r4, r3, #8
 800a38e:	f88d 400d 	strb.w	r4, [sp, #13]
 800a392:	0c1c      	lsrs	r4, r3, #16
 800a394:	f88d 400e 	strb.w	r4, [sp, #14]
 800a398:	0e1b      	lsrs	r3, r3, #24
 800a39a:	f88d 300f 	strb.w	r3, [sp, #15]
 800a39e:	ab03      	add	r3, sp, #12
 800a3a0:	9300      	str	r3, [sp, #0]
 800a3a2:	2304      	movs	r3, #4
 800a3a4:	b292      	uxth	r2, r2
 800a3a6:	f7ff ff85 	bl	800a2b4 <dwt_writetodevice>
 800a3aa:	b004      	add	sp, #16
 800a3ac:	bd10      	pop	{r4, pc}

0800a3ae <_dwt_adjust_delaytime>:
 800a3ae:	b538      	push	{r3, r4, r5, lr}
 800a3b0:	4604      	mov	r4, r0
 800a3b2:	b989      	cbnz	r1, 800a3d8 <_dwt_adjust_delaytime+0x2a>
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	2128      	movs	r1, #40	; 0x28
 800a3b8:	f7ff fb6f 	bl	8009a9a <dwt_read32bitoffsetreg>
 800a3bc:	4605      	mov	r5, r0
 800a3be:	2201      	movs	r2, #1
 800a3c0:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800a3c4:	4620      	mov	r0, r4
 800a3c6:	f7ff fb90 	bl	8009aea <dwt_read8bitoffsetreg>
 800a3ca:	1a2b      	subs	r3, r5, r0
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	2128      	movs	r1, #40	; 0x28
 800a3d0:	4620      	mov	r0, r4
 800a3d2:	f7ff ffd7 	bl	800a384 <dwt_write32bitoffsetreg>
 800a3d6:	bd38      	pop	{r3, r4, r5, pc}
 800a3d8:	2200      	movs	r2, #0
 800a3da:	2128      	movs	r1, #40	; 0x28
 800a3dc:	f7ff fb5d 	bl	8009a9a <dwt_read32bitoffsetreg>
 800a3e0:	4605      	mov	r5, r0
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	217c      	movs	r1, #124	; 0x7c
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	f7ff fb7f 	bl	8009aea <dwt_read8bitoffsetreg>
 800a3ec:	1a2b      	subs	r3, r5, r0
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	2128      	movs	r1, #40	; 0x28
 800a3f2:	4620      	mov	r0, r4
 800a3f4:	f7ff ffc6 	bl	800a384 <dwt_write32bitoffsetreg>
 800a3f8:	e7ed      	b.n	800a3d6 <_dwt_adjust_delaytime+0x28>

0800a3fa <ull_setrxaftertxdelay>:
 800a3fa:	b538      	push	{r3, r4, r5, lr}
 800a3fc:	4605      	mov	r5, r0
 800a3fe:	460c      	mov	r4, r1
 800a400:	2200      	movs	r2, #0
 800a402:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a406:	f7ff fb48 	bl	8009a9a <dwt_read32bitoffsetreg>
 800a40a:	0d00      	lsrs	r0, r0, #20
 800a40c:	0500      	lsls	r0, r0, #20
 800a40e:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a412:	4303      	orrs	r3, r0
 800a414:	2200      	movs	r2, #0
 800a416:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a41a:	4628      	mov	r0, r5
 800a41c:	f7ff ffb2 	bl	800a384 <dwt_write32bitoffsetreg>
 800a420:	bd38      	pop	{r3, r4, r5, pc}

0800a422 <ull_setlnapamode>:
 800a422:	b538      	push	{r3, r4, r5, lr}
 800a424:	4605      	mov	r5, r0
 800a426:	460c      	mov	r4, r1
 800a428:	2200      	movs	r2, #0
 800a42a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800a42e:	f7ff fb34 	bl	8009a9a <dwt_read32bitoffsetreg>
 800a432:	f420 337c 	bic.w	r3, r0, #258048	; 0x3f000
 800a436:	f014 0f01 	tst.w	r4, #1
 800a43a:	bf18      	it	ne
 800a43c:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
 800a440:	f014 0f02 	tst.w	r4, #2
 800a444:	bf18      	it	ne
 800a446:	f443 5300 	orrne.w	r3, r3, #8192	; 0x2000
 800a44a:	f014 0f04 	tst.w	r4, #4
 800a44e:	bf18      	it	ne
 800a450:	f443 3390 	orrne.w	r3, r3, #73728	; 0x12000
 800a454:	2200      	movs	r2, #0
 800a456:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800a45a:	4628      	mov	r0, r5
 800a45c:	f7ff ff92 	bl	800a384 <dwt_write32bitoffsetreg>
 800a460:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a464 <ull_configurestskey>:
 800a464:	b538      	push	{r3, r4, r5, lr}
 800a466:	4605      	mov	r5, r0
 800a468:	460c      	mov	r4, r1
 800a46a:	680b      	ldr	r3, [r1, #0]
 800a46c:	2200      	movs	r2, #0
 800a46e:	490b      	ldr	r1, [pc, #44]	; (800a49c <ull_configurestskey+0x38>)
 800a470:	f7ff ff88 	bl	800a384 <dwt_write32bitoffsetreg>
 800a474:	6863      	ldr	r3, [r4, #4]
 800a476:	2200      	movs	r2, #0
 800a478:	4909      	ldr	r1, [pc, #36]	; (800a4a0 <ull_configurestskey+0x3c>)
 800a47a:	4628      	mov	r0, r5
 800a47c:	f7ff ff82 	bl	800a384 <dwt_write32bitoffsetreg>
 800a480:	68a3      	ldr	r3, [r4, #8]
 800a482:	2200      	movs	r2, #0
 800a484:	4907      	ldr	r1, [pc, #28]	; (800a4a4 <ull_configurestskey+0x40>)
 800a486:	4628      	mov	r0, r5
 800a488:	f7ff ff7c 	bl	800a384 <dwt_write32bitoffsetreg>
 800a48c:	68e3      	ldr	r3, [r4, #12]
 800a48e:	2200      	movs	r2, #0
 800a490:	4905      	ldr	r1, [pc, #20]	; (800a4a8 <ull_configurestskey+0x44>)
 800a492:	4628      	mov	r0, r5
 800a494:	f7ff ff76 	bl	800a384 <dwt_write32bitoffsetreg>
 800a498:	bd38      	pop	{r3, r4, r5, pc}
 800a49a:	bf00      	nop
 800a49c:	0002000c 	.word	0x0002000c
 800a4a0:	00020010 	.word	0x00020010
 800a4a4:	00020014 	.word	0x00020014
 800a4a8:	00020018 	.word	0x00020018

0800a4ac <ull_configurestsiv>:
 800a4ac:	b538      	push	{r3, r4, r5, lr}
 800a4ae:	4605      	mov	r5, r0
 800a4b0:	460c      	mov	r4, r1
 800a4b2:	680b      	ldr	r3, [r1, #0]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	490b      	ldr	r1, [pc, #44]	; (800a4e4 <ull_configurestsiv+0x38>)
 800a4b8:	f7ff ff64 	bl	800a384 <dwt_write32bitoffsetreg>
 800a4bc:	6863      	ldr	r3, [r4, #4]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	4909      	ldr	r1, [pc, #36]	; (800a4e8 <ull_configurestsiv+0x3c>)
 800a4c2:	4628      	mov	r0, r5
 800a4c4:	f7ff ff5e 	bl	800a384 <dwt_write32bitoffsetreg>
 800a4c8:	68a3      	ldr	r3, [r4, #8]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	4907      	ldr	r1, [pc, #28]	; (800a4ec <ull_configurestsiv+0x40>)
 800a4ce:	4628      	mov	r0, r5
 800a4d0:	f7ff ff58 	bl	800a384 <dwt_write32bitoffsetreg>
 800a4d4:	68e3      	ldr	r3, [r4, #12]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	4905      	ldr	r1, [pc, #20]	; (800a4f0 <ull_configurestsiv+0x44>)
 800a4da:	4628      	mov	r0, r5
 800a4dc:	f7ff ff52 	bl	800a384 <dwt_write32bitoffsetreg>
 800a4e0:	bd38      	pop	{r3, r4, r5, pc}
 800a4e2:	bf00      	nop
 800a4e4:	0002001c 	.word	0x0002001c
 800a4e8:	00020020 	.word	0x00020020
 800a4ec:	00020024 	.word	0x00020024
 800a4f0:	00020028 	.word	0x00020028

0800a4f4 <ull_configmrxlut>:
 800a4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4f8:	4604      	mov	r4, r0
 800a4fa:	2905      	cmp	r1, #5
 800a4fc:	d03a      	beq.n	800a574 <ull_configmrxlut+0x80>
 800a4fe:	4d23      	ldr	r5, [pc, #140]	; (800a58c <ull_configmrxlut+0x98>)
 800a500:	462e      	mov	r6, r5
 800a502:	4f23      	ldr	r7, [pc, #140]	; (800a590 <ull_configmrxlut+0x9c>)
 800a504:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 800a5cc <ull_configmrxlut+0xd8>
 800a508:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800a5d0 <ull_configmrxlut+0xdc>
 800a50c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a5d4 <ull_configmrxlut+0xe0>
 800a510:	4b20      	ldr	r3, [pc, #128]	; (800a594 <ull_configmrxlut+0xa0>)
 800a512:	2200      	movs	r2, #0
 800a514:	4920      	ldr	r1, [pc, #128]	; (800a598 <ull_configmrxlut+0xa4>)
 800a516:	4620      	mov	r0, r4
 800a518:	f7ff ff34 	bl	800a384 <dwt_write32bitoffsetreg>
 800a51c:	4653      	mov	r3, sl
 800a51e:	2200      	movs	r2, #0
 800a520:	491e      	ldr	r1, [pc, #120]	; (800a59c <ull_configmrxlut+0xa8>)
 800a522:	4620      	mov	r0, r4
 800a524:	f7ff ff2e 	bl	800a384 <dwt_write32bitoffsetreg>
 800a528:	464b      	mov	r3, r9
 800a52a:	2200      	movs	r2, #0
 800a52c:	491c      	ldr	r1, [pc, #112]	; (800a5a0 <ull_configmrxlut+0xac>)
 800a52e:	4620      	mov	r0, r4
 800a530:	f7ff ff28 	bl	800a384 <dwt_write32bitoffsetreg>
 800a534:	4643      	mov	r3, r8
 800a536:	2200      	movs	r2, #0
 800a538:	491a      	ldr	r1, [pc, #104]	; (800a5a4 <ull_configmrxlut+0xb0>)
 800a53a:	4620      	mov	r0, r4
 800a53c:	f7ff ff22 	bl	800a384 <dwt_write32bitoffsetreg>
 800a540:	463b      	mov	r3, r7
 800a542:	2200      	movs	r2, #0
 800a544:	4918      	ldr	r1, [pc, #96]	; (800a5a8 <ull_configmrxlut+0xb4>)
 800a546:	4620      	mov	r0, r4
 800a548:	f7ff ff1c 	bl	800a384 <dwt_write32bitoffsetreg>
 800a54c:	4633      	mov	r3, r6
 800a54e:	2200      	movs	r2, #0
 800a550:	4916      	ldr	r1, [pc, #88]	; (800a5ac <ull_configmrxlut+0xb8>)
 800a552:	4620      	mov	r0, r4
 800a554:	f7ff ff16 	bl	800a384 <dwt_write32bitoffsetreg>
 800a558:	462b      	mov	r3, r5
 800a55a:	2200      	movs	r2, #0
 800a55c:	4914      	ldr	r1, [pc, #80]	; (800a5b0 <ull_configmrxlut+0xbc>)
 800a55e:	4620      	mov	r0, r4
 800a560:	f7ff ff10 	bl	800a384 <dwt_write32bitoffsetreg>
 800a564:	4b13      	ldr	r3, [pc, #76]	; (800a5b4 <ull_configmrxlut+0xc0>)
 800a566:	2200      	movs	r2, #0
 800a568:	4913      	ldr	r1, [pc, #76]	; (800a5b8 <ull_configmrxlut+0xc4>)
 800a56a:	4620      	mov	r0, r4
 800a56c:	f7ff ff0a 	bl	800a384 <dwt_write32bitoffsetreg>
 800a570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a574:	4d11      	ldr	r5, [pc, #68]	; (800a5bc <ull_configmrxlut+0xc8>)
 800a576:	4e12      	ldr	r6, [pc, #72]	; (800a5c0 <ull_configmrxlut+0xcc>)
 800a578:	4f12      	ldr	r7, [pc, #72]	; (800a5c4 <ull_configmrxlut+0xd0>)
 800a57a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800a5d8 <ull_configmrxlut+0xe4>
 800a57e:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800a5dc <ull_configmrxlut+0xe8>
 800a582:	f8df a05c 	ldr.w	sl, [pc, #92]	; 800a5e0 <ull_configmrxlut+0xec>
 800a586:	4b10      	ldr	r3, [pc, #64]	; (800a5c8 <ull_configmrxlut+0xd4>)
 800a588:	e7c3      	b.n	800a512 <ull_configmrxlut+0x1e>
 800a58a:	bf00      	nop
 800a58c:	0002afb5 	.word	0x0002afb5
 800a590:	0002af7d 	.word	0x0002af7d
 800a594:	0002a8fe 	.word	0x0002a8fe
 800a598:	00030038 	.word	0x00030038
 800a59c:	0003003c 	.word	0x0003003c
 800a5a0:	00030040 	.word	0x00030040
 800a5a4:	00030044 	.word	0x00030044
 800a5a8:	00030048 	.word	0x00030048
 800a5ac:	0003004c 	.word	0x0003004c
 800a5b0:	00030050 	.word	0x00030050
 800a5b4:	10000240 	.word	0x10000240
 800a5b8:	0003001c 	.word	0x0003001c
 800a5bc:	0001cff5 	.word	0x0001cff5
 800a5c0:	0001cfb5 	.word	0x0001cfb5
 800a5c4:	0001cf36 	.word	0x0001cf36
 800a5c8:	0001c0fd 	.word	0x0001c0fd
 800a5cc:	0002af3e 	.word	0x0002af3e
 800a5d0:	0002a5fe 	.word	0x0002a5fe
 800a5d4:	0002ac36 	.word	0x0002ac36
 800a5d8:	0001c77e 	.word	0x0001c77e
 800a5dc:	0001c6be 	.word	0x0001c6be
 800a5e0:	0001c43e 	.word	0x0001c43e

0800a5e4 <ull_disable_rftx_blocks>:
 800a5e4:	b508      	push	{r3, lr}
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	4902      	ldr	r1, [pc, #8]	; (800a5f4 <ull_disable_rftx_blocks+0x10>)
 800a5ec:	f7ff feca 	bl	800a384 <dwt_write32bitoffsetreg>
 800a5f0:	bd08      	pop	{r3, pc}
 800a5f2:	bf00      	nop
 800a5f4:	00070004 	.word	0x00070004

0800a5f8 <ull_disable_rf_tx>:
 800a5f8:	b538      	push	{r3, r4, r5, lr}
 800a5fa:	4604      	mov	r4, r0
 800a5fc:	460d      	mov	r5, r1
 800a5fe:	2300      	movs	r3, #0
 800a600:	461a      	mov	r2, r3
 800a602:	490a      	ldr	r1, [pc, #40]	; (800a62c <ull_disable_rf_tx+0x34>)
 800a604:	f7ff febe 	bl	800a384 <dwt_write32bitoffsetreg>
 800a608:	2300      	movs	r3, #0
 800a60a:	461a      	mov	r2, r3
 800a60c:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800a610:	4620      	mov	r0, r4
 800a612:	f7ff feb7 	bl	800a384 <dwt_write32bitoffsetreg>
 800a616:	b905      	cbnz	r5, 800a61a <ull_disable_rf_tx+0x22>
 800a618:	bd38      	pop	{r3, r4, r5, pc}
 800a61a:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 800a61e:	2200      	movs	r2, #0
 800a620:	4903      	ldr	r1, [pc, #12]	; (800a630 <ull_disable_rf_tx+0x38>)
 800a622:	4620      	mov	r0, r4
 800a624:	f7ff feae 	bl	800a384 <dwt_write32bitoffsetreg>
 800a628:	e7f6      	b.n	800a618 <ull_disable_rf_tx+0x20>
 800a62a:	bf00      	nop
 800a62c:	00070048 	.word	0x00070048
 800a630:	00070014 	.word	0x00070014

0800a634 <ull_readrxdata>:
 800a634:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a636:	b083      	sub	sp, #12
 800a638:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800a63a:	7ba4      	ldrb	r4, [r4, #14]
 800a63c:	2c03      	cmp	r4, #3
 800a63e:	bf0c      	ite	eq
 800a640:	f44f 1c98 	moveq.w	ip, #1245184	; 0x130000
 800a644:	f44f 1c90 	movne.w	ip, #1179648	; 0x120000
 800a648:	189c      	adds	r4, r3, r2
 800a64a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800a64e:	da19      	bge.n	800a684 <ull_readrxdata+0x50>
 800a650:	461d      	mov	r5, r3
 800a652:	4616      	mov	r6, r2
 800a654:	460f      	mov	r7, r1
 800a656:	4604      	mov	r4, r0
 800a658:	2b7f      	cmp	r3, #127	; 0x7f
 800a65a:	d915      	bls.n	800a688 <ull_readrxdata+0x54>
 800a65c:	ea4f 431c 	mov.w	r3, ip, lsr #16
 800a660:	2200      	movs	r2, #0
 800a662:	490d      	ldr	r1, [pc, #52]	; (800a698 <ull_readrxdata+0x64>)
 800a664:	f7ff fe8e 	bl	800a384 <dwt_write32bitoffsetreg>
 800a668:	462b      	mov	r3, r5
 800a66a:	2200      	movs	r2, #0
 800a66c:	490b      	ldr	r1, [pc, #44]	; (800a69c <ull_readrxdata+0x68>)
 800a66e:	4620      	mov	r0, r4
 800a670:	f7ff fe88 	bl	800a384 <dwt_write32bitoffsetreg>
 800a674:	9700      	str	r7, [sp, #0]
 800a676:	4633      	mov	r3, r6
 800a678:	2200      	movs	r2, #0
 800a67a:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800a67e:	4620      	mov	r0, r4
 800a680:	f7ff fa01 	bl	8009a86 <dwt_readfromdevice>
 800a684:	b003      	add	sp, #12
 800a686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a688:	9100      	str	r1, [sp, #0]
 800a68a:	4613      	mov	r3, r2
 800a68c:	462a      	mov	r2, r5
 800a68e:	4661      	mov	r1, ip
 800a690:	f7ff f9f9 	bl	8009a86 <dwt_readfromdevice>
 800a694:	e7f6      	b.n	800a684 <ull_readrxdata+0x50>
 800a696:	bf00      	nop
 800a698:	001f0004 	.word	0x001f0004
 800a69c:	001f0008 	.word	0x001f0008

0800a6a0 <dwt_write8bitoffsetreg>:
 800a6a0:	b510      	push	{r4, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	ac04      	add	r4, sp, #16
 800a6a6:	f804 3d01 	strb.w	r3, [r4, #-1]!
 800a6aa:	9400      	str	r4, [sp, #0]
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	b292      	uxth	r2, r2
 800a6b0:	f7ff fe00 	bl	800a2b4 <dwt_writetodevice>
 800a6b4:	b004      	add	sp, #16
 800a6b6:	bd10      	pop	{r4, pc}

0800a6b8 <ull_getframelength>:
 800a6b8:	b510      	push	{r4, lr}
 800a6ba:	4604      	mov	r4, r0
 800a6bc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a6be:	7b9b      	ldrb	r3, [r3, #14]
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d013      	beq.n	800a6ec <ull_getframelength+0x34>
 800a6c4:	2b03      	cmp	r3, #3
 800a6c6:	d11d      	bne.n	800a704 <ull_getframelength+0x4c>
 800a6c8:	23f0      	movs	r3, #240	; 0xf0
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	4912      	ldr	r1, [pc, #72]	; (800a718 <ull_getframelength+0x60>)
 800a6ce:	f7ff ffe7 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800a6d8:	4620      	mov	r0, r4
 800a6da:	f7ff f9f4 	bl	8009ac6 <dwt_read16bitoffsetreg>
 800a6de:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a6e0:	7ada      	ldrb	r2, [r3, #11]
 800a6e2:	b1a2      	cbz	r2, 800a70e <ull_getframelength+0x56>
 800a6e4:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a6e8:	83d8      	strh	r0, [r3, #30]
 800a6ea:	bd10      	pop	{r4, pc}
 800a6ec:	230f      	movs	r3, #15
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	4909      	ldr	r1, [pc, #36]	; (800a718 <ull_getframelength+0x60>)
 800a6f2:	f7ff ffd5 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	f7ff f9e2 	bl	8009ac6 <dwt_read16bitoffsetreg>
 800a702:	e7ec      	b.n	800a6de <ull_getframelength+0x26>
 800a704:	2200      	movs	r2, #0
 800a706:	214c      	movs	r1, #76	; 0x4c
 800a708:	f7ff f9dd 	bl	8009ac6 <dwt_read16bitoffsetreg>
 800a70c:	e7e7      	b.n	800a6de <ull_getframelength+0x26>
 800a70e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800a712:	83d8      	strh	r0, [r3, #30]
 800a714:	e7e9      	b.n	800a6ea <ull_getframelength+0x32>
 800a716:	bf00      	nop
 800a718:	00010018 	.word	0x00010018

0800a71c <_dwt_clear_db_events>:
 800a71c:	b510      	push	{r4, lr}
 800a71e:	4604      	mov	r4, r0
 800a720:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a722:	7b9b      	ldrb	r3, [r3, #14]
 800a724:	2b01      	cmp	r3, #1
 800a726:	d004      	beq.n	800a732 <_dwt_clear_db_events+0x16>
 800a728:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a72a:	7b9b      	ldrb	r3, [r3, #14]
 800a72c:	2b03      	cmp	r3, #3
 800a72e:	d006      	beq.n	800a73e <_dwt_clear_db_events+0x22>
 800a730:	bd10      	pop	{r4, pc}
 800a732:	230f      	movs	r3, #15
 800a734:	2200      	movs	r2, #0
 800a736:	4905      	ldr	r1, [pc, #20]	; (800a74c <_dwt_clear_db_events+0x30>)
 800a738:	f7ff ffb2 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800a73c:	e7f4      	b.n	800a728 <_dwt_clear_db_events+0xc>
 800a73e:	23f0      	movs	r3, #240	; 0xf0
 800a740:	2200      	movs	r2, #0
 800a742:	4902      	ldr	r1, [pc, #8]	; (800a74c <_dwt_clear_db_events+0x30>)
 800a744:	4620      	mov	r0, r4
 800a746:	f7ff ffab 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800a74a:	e7f1      	b.n	800a730 <_dwt_clear_db_events+0x14>
 800a74c:	00010018 	.word	0x00010018

0800a750 <ull_clearaonconfig>:
 800a750:	b538      	push	{r3, r4, r5, lr}
 800a752:	4604      	mov	r4, r0
 800a754:	2300      	movs	r3, #0
 800a756:	461a      	mov	r2, r3
 800a758:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800a75c:	f7ff fdb5 	bl	800a2ca <dwt_write16bitoffsetreg>
 800a760:	2300      	movs	r3, #0
 800a762:	461a      	mov	r2, r3
 800a764:	4908      	ldr	r1, [pc, #32]	; (800a788 <ull_clearaonconfig+0x38>)
 800a766:	4620      	mov	r0, r4
 800a768:	f7ff ff9a 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800a76c:	4d07      	ldr	r5, [pc, #28]	; (800a78c <ull_clearaonconfig+0x3c>)
 800a76e:	2300      	movs	r3, #0
 800a770:	461a      	mov	r2, r3
 800a772:	4629      	mov	r1, r5
 800a774:	4620      	mov	r0, r4
 800a776:	f7ff ff93 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800a77a:	2302      	movs	r3, #2
 800a77c:	2200      	movs	r2, #0
 800a77e:	4629      	mov	r1, r5
 800a780:	4620      	mov	r0, r4
 800a782:	f7ff ff8d 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800a786:	bd38      	pop	{r3, r4, r5, pc}
 800a788:	000a0014 	.word	0x000a0014
 800a78c:	000a0004 	.word	0x000a0004

0800a790 <ull_configeventcounters>:
 800a790:	b538      	push	{r3, r4, r5, lr}
 800a792:	4605      	mov	r5, r0
 800a794:	460c      	mov	r4, r1
 800a796:	2302      	movs	r3, #2
 800a798:	2200      	movs	r2, #0
 800a79a:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800a79e:	f7ff ff7f 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800a7a2:	b904      	cbnz	r4, 800a7a6 <ull_configeventcounters+0x16>
 800a7a4:	bd38      	pop	{r3, r4, r5, pc}
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800a7ae:	4628      	mov	r0, r5
 800a7b0:	f7ff ff76 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800a7b4:	e7f6      	b.n	800a7a4 <ull_configeventcounters+0x14>
	...

0800a7b8 <ull_aon_read>:
 800a7b8:	b538      	push	{r3, r4, r5, lr}
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	460b      	mov	r3, r1
 800a7be:	2200      	movs	r2, #0
 800a7c0:	490a      	ldr	r1, [pc, #40]	; (800a7ec <ull_aon_read+0x34>)
 800a7c2:	f7ff fd82 	bl	800a2ca <dwt_write16bitoffsetreg>
 800a7c6:	4d0a      	ldr	r5, [pc, #40]	; (800a7f0 <ull_aon_read+0x38>)
 800a7c8:	2388      	movs	r3, #136	; 0x88
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	4629      	mov	r1, r5
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	f7ff ff66 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	4629      	mov	r1, r5
 800a7da:	4620      	mov	r0, r4
 800a7dc:	f7ff ff60 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	4904      	ldr	r1, [pc, #16]	; (800a7f4 <ull_aon_read+0x3c>)
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	f7ff f980 	bl	8009aea <dwt_read8bitoffsetreg>
 800a7ea:	bd38      	pop	{r3, r4, r5, pc}
 800a7ec:	000a000c 	.word	0x000a000c
 800a7f0:	000a0004 	.word	0x000a0004
 800a7f4:	000a0008 	.word	0x000a0008

0800a7f8 <ull_aon_write>:
 800a7f8:	b570      	push	{r4, r5, r6, lr}
 800a7fa:	4604      	mov	r4, r0
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	4615      	mov	r5, r2
 800a800:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800a804:	bf34      	ite	cc
 800a806:	2600      	movcc	r6, #0
 800a808:	2620      	movcs	r6, #32
 800a80a:	2200      	movs	r2, #0
 800a80c:	490b      	ldr	r1, [pc, #44]	; (800a83c <ull_aon_write+0x44>)
 800a80e:	f7ff fd5c 	bl	800a2ca <dwt_write16bitoffsetreg>
 800a812:	462b      	mov	r3, r5
 800a814:	2200      	movs	r2, #0
 800a816:	490a      	ldr	r1, [pc, #40]	; (800a840 <ull_aon_write+0x48>)
 800a818:	4620      	mov	r0, r4
 800a81a:	f7ff ff41 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800a81e:	4d09      	ldr	r5, [pc, #36]	; (800a844 <ull_aon_write+0x4c>)
 800a820:	f046 0390 	orr.w	r3, r6, #144	; 0x90
 800a824:	2200      	movs	r2, #0
 800a826:	4629      	mov	r1, r5
 800a828:	4620      	mov	r0, r4
 800a82a:	f7ff ff39 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800a82e:	2300      	movs	r3, #0
 800a830:	461a      	mov	r2, r3
 800a832:	4629      	mov	r1, r5
 800a834:	4620      	mov	r0, r4
 800a836:	f7ff ff33 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800a83a:	bd70      	pop	{r4, r5, r6, pc}
 800a83c:	000a000c 	.word	0x000a000c
 800a840:	000a0010 	.word	0x000a0010
 800a844:	000a0004 	.word	0x000a0004

0800a848 <ull_configuresleep>:
 800a848:	b570      	push	{r4, r5, r6, lr}
 800a84a:	4604      	mov	r4, r0
 800a84c:	460d      	mov	r5, r1
 800a84e:	4616      	mov	r6, r2
 800a850:	2200      	movs	r2, #0
 800a852:	f240 110b 	movw	r1, #267	; 0x10b
 800a856:	f7ff ffcf 	bl	800a7f8 <ull_aon_write>
 800a85a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800a85e:	4620      	mov	r0, r4
 800a860:	f7ff ffaa 	bl	800a7b8 <ull_aon_read>
 800a864:	f000 021f 	and.w	r2, r0, #31
 800a868:	f44f 7182 	mov.w	r1, #260	; 0x104
 800a86c:	4620      	mov	r0, r4
 800a86e:	f7ff ffc3 	bl	800a7f8 <ull_aon_write>
 800a872:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a874:	8a1a      	ldrh	r2, [r3, #16]
 800a876:	4315      	orrs	r5, r2
 800a878:	821d      	strh	r5, [r3, #16]
 800a87a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a87c:	8a1b      	ldrh	r3, [r3, #16]
 800a87e:	2200      	movs	r2, #0
 800a880:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800a884:	4620      	mov	r0, r4
 800a886:	f7ff fd20 	bl	800a2ca <dwt_write16bitoffsetreg>
 800a88a:	4633      	mov	r3, r6
 800a88c:	2200      	movs	r2, #0
 800a88e:	4902      	ldr	r1, [pc, #8]	; (800a898 <ull_configuresleep+0x50>)
 800a890:	4620      	mov	r0, r4
 800a892:	f7ff ff05 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800a896:	bd70      	pop	{r4, r5, r6, pc}
 800a898:	000a0014 	.word	0x000a0014

0800a89c <ull_writetxdata>:
 800a89c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	185c      	adds	r4, r3, r1
 800a8a2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800a8a6:	da24      	bge.n	800a8f2 <ull_writetxdata+0x56>
 800a8a8:	461c      	mov	r4, r3
 800a8aa:	4617      	mov	r7, r2
 800a8ac:	460e      	mov	r6, r1
 800a8ae:	4605      	mov	r5, r0
 800a8b0:	2b7f      	cmp	r3, #127	; 0x7f
 800a8b2:	d915      	bls.n	800a8e0 <ull_writetxdata+0x44>
 800a8b4:	2314      	movs	r3, #20
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	490f      	ldr	r1, [pc, #60]	; (800a8f8 <ull_writetxdata+0x5c>)
 800a8ba:	f7ff fd63 	bl	800a384 <dwt_write32bitoffsetreg>
 800a8be:	4623      	mov	r3, r4
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	490e      	ldr	r1, [pc, #56]	; (800a8fc <ull_writetxdata+0x60>)
 800a8c4:	4628      	mov	r0, r5
 800a8c6:	f7ff fd5d 	bl	800a384 <dwt_write32bitoffsetreg>
 800a8ca:	9700      	str	r7, [sp, #0]
 800a8cc:	4633      	mov	r3, r6
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800a8d4:	4628      	mov	r0, r5
 800a8d6:	f7ff fced 	bl	800a2b4 <dwt_writetodevice>
 800a8da:	2000      	movs	r0, #0
 800a8dc:	b003      	add	sp, #12
 800a8de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8e0:	9200      	str	r2, [sp, #0]
 800a8e2:	460b      	mov	r3, r1
 800a8e4:	4622      	mov	r2, r4
 800a8e6:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 800a8ea:	f7ff fce3 	bl	800a2b4 <dwt_writetodevice>
 800a8ee:	2000      	movs	r0, #0
 800a8f0:	e7f4      	b.n	800a8dc <ull_writetxdata+0x40>
 800a8f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8f6:	e7f1      	b.n	800a8dc <ull_writetxdata+0x40>
 800a8f8:	001f0004 	.word	0x001f0004
 800a8fc:	001f0008 	.word	0x001f0008

0800a900 <ull_signal_rx_buff_free>:
 800a900:	b510      	push	{r4, lr}
 800a902:	b082      	sub	sp, #8
 800a904:	4604      	mov	r4, r0
 800a906:	2302      	movs	r3, #2
 800a908:	9301      	str	r3, [sp, #4]
 800a90a:	2200      	movs	r2, #0
 800a90c:	9200      	str	r2, [sp, #0]
 800a90e:	4613      	mov	r3, r2
 800a910:	2113      	movs	r1, #19
 800a912:	f7ff f83a 	bl	800998a <dwt_xfer3xxx>
 800a916:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a918:	7b9a      	ldrb	r2, [r3, #14]
 800a91a:	2a03      	cmp	r2, #3
 800a91c:	bf0c      	ite	eq
 800a91e:	2201      	moveq	r2, #1
 800a920:	2203      	movne	r2, #3
 800a922:	739a      	strb	r2, [r3, #14]
 800a924:	b002      	add	sp, #8
 800a926:	bd10      	pop	{r4, pc}

0800a928 <ull_isr>:
 800a928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a92c:	4604      	mov	r4, r0
 800a92e:	2200      	movs	r2, #0
 800a930:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 800a934:	f7ff f8d9 	bl	8009aea <dwt_read8bitoffsetreg>
 800a938:	4605      	mov	r5, r0
 800a93a:	2200      	movs	r2, #0
 800a93c:	2144      	movs	r1, #68	; 0x44
 800a93e:	4620      	mov	r0, r4
 800a940:	f7ff f8ab 	bl	8009a9a <dwt_read32bitoffsetreg>
 800a944:	4606      	mov	r6, r0
 800a946:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a948:	2200      	movs	r2, #0
 800a94a:	83da      	strh	r2, [r3, #30]
 800a94c:	f883 2020 	strb.w	r2, [r3, #32]
 800a950:	619a      	str	r2, [r3, #24]
 800a952:	839a      	strh	r2, [r3, #28]
 800a954:	625a      	str	r2, [r3, #36]	; 0x24
 800a956:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a958:	625c      	str	r4, [r3, #36]	; 0x24
 800a95a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a95c:	7b9f      	ldrb	r7, [r3, #14]
 800a95e:	2f00      	cmp	r7, #0
 800a960:	d17f      	bne.n	800aa62 <ull_isr+0x13a>
 800a962:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a964:	619e      	str	r6, [r3, #24]
 800a966:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
 800a96a:	f898 3015 	ldrb.w	r3, [r8, #21]
 800a96e:	f003 0303 	and.w	r3, r3, #3
 800a972:	2b03      	cmp	r3, #3
 800a974:	f000 8090 	beq.w	800aa98 <ull_isr+0x170>
 800a978:	f015 0f80 	tst.w	r5, #128	; 0x80
 800a97c:	f040 8093 	bne.w	800aaa6 <ull_isr+0x17e>
 800a980:	f015 0f01 	tst.w	r5, #1
 800a984:	f040 80c1 	bne.w	800ab0a <ull_isr+0x1e2>
 800a988:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a98c:	d00b      	beq.n	800a9a6 <ull_isr+0x7e>
 800a98e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a990:	b113      	cbz	r3, 800a998 <ull_isr+0x70>
 800a992:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800a994:	3018      	adds	r0, #24
 800a996:	4798      	blx	r3
 800a998:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800a99c:	2202      	movs	r2, #2
 800a99e:	2144      	movs	r1, #68	; 0x44
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	f7ff fc92 	bl	800a2ca <dwt_write16bitoffsetreg>
 800a9a6:	f015 0f08 	tst.w	r5, #8
 800a9aa:	d107      	bne.n	800a9bc <ull_isr+0x94>
 800a9ac:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a9ae:	7b9b      	ldrb	r3, [r3, #14]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	f000 80ea 	beq.w	800ab8a <ull_isr+0x262>
 800a9b6:	2f00      	cmp	r7, #0
 800a9b8:	f000 80e7 	beq.w	800ab8a <ull_isr+0x262>
 800a9bc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a9be:	2200      	movs	r2, #0
 800a9c0:	f883 2020 	strb.w	r2, [r3, #32]
 800a9c4:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 800a9c8:	f000 80ad 	beq.w	800ab26 <ull_isr+0x1fe>
 800a9cc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a9ce:	f892 3020 	ldrb.w	r3, [r2, #32]
 800a9d2:	f043 0308 	orr.w	r3, r3, #8
 800a9d6:	f882 3020 	strb.w	r3, [r2, #32]
 800a9da:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 800a9de:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 800a9e2:	d008      	beq.n	800a9f6 <ull_isr+0xce>
 800a9e4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a9e6:	f892 3020 	ldrb.w	r3, [r2, #32]
 800a9ea:	f043 0310 	orr.w	r3, r3, #16
 800a9ee:	f882 3020 	strb.w	r3, [r2, #32]
 800a9f2:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 800a9f6:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800a9fa:	d006      	beq.n	800aa0a <ull_isr+0xe2>
 800a9fc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a9fe:	7d53      	ldrb	r3, [r2, #21]
 800aa00:	f003 0303 	and.w	r3, r3, #3
 800aa04:	2b03      	cmp	r3, #3
 800aa06:	f000 809a 	beq.w	800ab3e <ull_isr+0x216>
 800aa0a:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800aa0e:	f040 80a2 	bne.w	800ab56 <ull_isr+0x22e>
 800aa12:	f447 43de 	orr.w	r3, r7, #28416	; 0x6f00
 800aa16:	2200      	movs	r2, #0
 800aa18:	2144      	movs	r1, #68	; 0x44
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	f7ff fcb2 	bl	800a384 <dwt_write32bitoffsetreg>
 800aa20:	4620      	mov	r0, r4
 800aa22:	f7ff fe7b 	bl	800a71c <_dwt_clear_db_events>
 800aa26:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800aa28:	8bc3      	ldrh	r3, [r0, #30]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	f040 80a2 	bne.w	800ab74 <ull_isr+0x24c>
 800aa30:	7d43      	ldrb	r3, [r0, #21]
 800aa32:	f003 0303 	and.w	r3, r3, #3
 800aa36:	2b03      	cmp	r3, #3
 800aa38:	f000 809c 	beq.w	800ab74 <ull_isr+0x24c>
 800aa3c:	6983      	ldr	r3, [r0, #24]
 800aa3e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800aa42:	6183      	str	r3, [r0, #24]
 800aa44:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800aa46:	6993      	ldr	r3, [r2, #24]
 800aa48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aa4c:	6193      	str	r3, [r2, #24]
 800aa4e:	69e3      	ldr	r3, [r4, #28]
 800aa50:	b113      	cbz	r3, 800aa58 <ull_isr+0x130>
 800aa52:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800aa54:	3018      	adds	r0, #24
 800aa56:	4798      	blx	r3
 800aa58:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f883 2020 	strb.w	r2, [r3, #32]
 800aa60:	e08c      	b.n	800ab7c <ull_isr+0x254>
 800aa62:	496d      	ldr	r1, [pc, #436]	; (800ac18 <ull_isr+0x2f0>)
 800aa64:	4620      	mov	r0, r4
 800aa66:	f7ff f840 	bl	8009aea <dwt_read8bitoffsetreg>
 800aa6a:	4607      	mov	r7, r0
 800aa6c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800aa6e:	7b9b      	ldrb	r3, [r3, #14]
 800aa70:	2b03      	cmp	r3, #3
 800aa72:	bf08      	it	eq
 800aa74:	f3c0 1707 	ubfxeq	r7, r0, #4, #8
 800aa78:	f017 0f01 	tst.w	r7, #1
 800aa7c:	bf18      	it	ne
 800aa7e:	f446 4680 	orrne.w	r6, r6, #16384	; 0x4000
 800aa82:	f017 0f02 	tst.w	r7, #2
 800aa86:	bf18      	it	ne
 800aa88:	f446 5600 	orrne.w	r6, r6, #8192	; 0x2000
 800aa8c:	f017 0f04 	tst.w	r7, #4
 800aa90:	bf18      	it	ne
 800aa92:	f446 6680 	orrne.w	r6, r6, #1024	; 0x400
 800aa96:	e764      	b.n	800a962 <ull_isr+0x3a>
 800aa98:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800aa9c:	bf1c      	itt	ne
 800aa9e:	f045 0508 	orrne.w	r5, r5, #8
 800aaa2:	b2ed      	uxtbne	r5, r5
 800aaa4:	e768      	b.n	800a978 <ull_isr+0x50>
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	2148      	movs	r1, #72	; 0x48
 800aaaa:	4620      	mov	r0, r4
 800aaac:	f7ff f80b 	bl	8009ac6 <dwt_read16bitoffsetreg>
 800aab0:	f8a8 001c 	strh.w	r0, [r8, #28]
 800aab4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800aab6:	7d1a      	ldrb	r2, [r3, #20]
 800aab8:	b11a      	cbz	r2, 800aac2 <ull_isr+0x19a>
 800aaba:	699a      	ldr	r2, [r3, #24]
 800aabc:	f012 0f04 	tst.w	r2, #4
 800aac0:	d103      	bne.n	800aaca <ull_isr+0x1a2>
 800aac2:	8b9b      	ldrh	r3, [r3, #28]
 800aac4:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800aac8:	b18b      	cbz	r3, 800aaee <ull_isr+0x1c6>
 800aaca:	2304      	movs	r3, #4
 800aacc:	2200      	movs	r2, #0
 800aace:	2144      	movs	r1, #68	; 0x44
 800aad0:	4620      	mov	r0, r4
 800aad2:	f7ff fde5 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800aad6:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800aada:	2200      	movs	r2, #0
 800aadc:	2148      	movs	r1, #72	; 0x48
 800aade:	4620      	mov	r0, r4
 800aae0:	f7ff fbf3 	bl	800a2ca <dwt_write16bitoffsetreg>
 800aae4:	6a23      	ldr	r3, [r4, #32]
 800aae6:	b113      	cbz	r3, 800aaee <ull_isr+0x1c6>
 800aae8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800aaea:	3018      	adds	r0, #24
 800aaec:	4798      	blx	r3
 800aaee:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800aaf0:	8b9b      	ldrh	r3, [r3, #28]
 800aaf2:	f413 7f80 	tst.w	r3, #256	; 0x100
 800aaf6:	f43f af43 	beq.w	800a980 <ull_isr+0x58>
 800aafa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aafe:	2200      	movs	r2, #0
 800ab00:	2148      	movs	r1, #72	; 0x48
 800ab02:	4620      	mov	r0, r4
 800ab04:	f7ff fbe1 	bl	800a2ca <dwt_write16bitoffsetreg>
 800ab08:	e73a      	b.n	800a980 <ull_isr+0x58>
 800ab0a:	23f8      	movs	r3, #248	; 0xf8
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	2144      	movs	r1, #68	; 0x44
 800ab10:	4620      	mov	r0, r4
 800ab12:	f7ff fdc5 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800ab16:	6923      	ldr	r3, [r4, #16]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	f43f af35 	beq.w	800a988 <ull_isr+0x60>
 800ab1e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800ab20:	3018      	adds	r0, #24
 800ab22:	4798      	blx	r3
 800ab24:	e730      	b.n	800a988 <ull_isr+0x60>
 800ab26:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800ab2a:	bf1f      	itttt	ne
 800ab2c:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 800ab2e:	f892 3020 	ldrbne.w	r3, [r2, #32]
 800ab32:	f043 0304 	orrne.w	r3, r3, #4
 800ab36:	f882 3020 	strbne.w	r3, [r2, #32]
 800ab3a:	2700      	movs	r7, #0
 800ab3c:	e74f      	b.n	800a9de <ull_isr+0xb6>
 800ab3e:	f892 3020 	ldrb.w	r3, [r2, #32]
 800ab42:	f043 0302 	orr.w	r3, r3, #2
 800ab46:	f882 3020 	strb.w	r3, [r2, #32]
 800ab4a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	83da      	strh	r2, [r3, #30]
 800ab50:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 800ab54:	e75d      	b.n	800aa12 <ull_isr+0xea>
 800ab56:	4620      	mov	r0, r4
 800ab58:	f7ff fdae 	bl	800a6b8 <ull_getframelength>
 800ab5c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800ab60:	f43f af57 	beq.w	800aa12 <ull_isr+0xea>
 800ab64:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ab66:	f892 3020 	ldrb.w	r3, [r2, #32]
 800ab6a:	f043 0301 	orr.w	r3, r3, #1
 800ab6e:	f882 3020 	strb.w	r3, [r2, #32]
 800ab72:	e74e      	b.n	800aa12 <ull_isr+0xea>
 800ab74:	6963      	ldr	r3, [r4, #20]
 800ab76:	b10b      	cbz	r3, 800ab7c <ull_isr+0x254>
 800ab78:	3018      	adds	r0, #24
 800ab7a:	4798      	blx	r3
 800ab7c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ab7e:	7b9b      	ldrb	r3, [r3, #14]
 800ab80:	bb03      	cbnz	r3, 800abc4 <ull_isr+0x29c>
 800ab82:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ab84:	2200      	movs	r2, #0
 800ab86:	f883 2020 	strb.w	r2, [r3, #32]
 800ab8a:	f015 0f10 	tst.w	r5, #16
 800ab8e:	d11d      	bne.n	800abcc <ull_isr+0x2a4>
 800ab90:	f015 0f20 	tst.w	r5, #32
 800ab94:	d12d      	bne.n	800abf2 <ull_isr+0x2ca>
 800ab96:	2200      	movs	r2, #0
 800ab98:	4920      	ldr	r1, [pc, #128]	; (800ac1c <ull_isr+0x2f4>)
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	f7fe ffa5 	bl	8009aea <dwt_read8bitoffsetreg>
 800aba0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800aba2:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
 800aba6:	f010 0303 	ands.w	r3, r0, #3
 800abaa:	d009      	beq.n	800abc0 <ull_isr+0x298>
 800abac:	2200      	movs	r2, #0
 800abae:	491b      	ldr	r1, [pc, #108]	; (800ac1c <ull_isr+0x2f4>)
 800abb0:	4620      	mov	r0, r4
 800abb2:	f7ff fd75 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800abb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800abb8:	b113      	cbz	r3, 800abc0 <ull_isr+0x298>
 800abba:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800abbc:	3018      	adds	r0, #24
 800abbe:	4798      	blx	r3
 800abc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abc4:	4620      	mov	r0, r4
 800abc6:	f7ff fe9b 	bl	800a900 <ull_signal_rx_buff_free>
 800abca:	e7da      	b.n	800ab82 <ull_isr+0x25a>
 800abcc:	4b14      	ldr	r3, [pc, #80]	; (800ac20 <ull_isr+0x2f8>)
 800abce:	2200      	movs	r2, #0
 800abd0:	2144      	movs	r1, #68	; 0x44
 800abd2:	4620      	mov	r0, r4
 800abd4:	f7ff fbd6 	bl	800a384 <dwt_write32bitoffsetreg>
 800abd8:	4620      	mov	r0, r4
 800abda:	f7ff fd9f 	bl	800a71c <_dwt_clear_db_events>
 800abde:	69e3      	ldr	r3, [r4, #28]
 800abe0:	b113      	cbz	r3, 800abe8 <ull_isr+0x2c0>
 800abe2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800abe4:	3018      	adds	r0, #24
 800abe6:	4798      	blx	r3
 800abe8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800abea:	2200      	movs	r2, #0
 800abec:	f883 2020 	strb.w	r2, [r3, #32]
 800abf0:	e7ce      	b.n	800ab90 <ull_isr+0x268>
 800abf2:	4b0c      	ldr	r3, [pc, #48]	; (800ac24 <ull_isr+0x2fc>)
 800abf4:	2200      	movs	r2, #0
 800abf6:	2144      	movs	r1, #68	; 0x44
 800abf8:	4620      	mov	r0, r4
 800abfa:	f7ff fbc3 	bl	800a384 <dwt_write32bitoffsetreg>
 800abfe:	4620      	mov	r0, r4
 800ac00:	f7ff fd8c 	bl	800a71c <_dwt_clear_db_events>
 800ac04:	69a3      	ldr	r3, [r4, #24]
 800ac06:	b113      	cbz	r3, 800ac0e <ull_isr+0x2e6>
 800ac08:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800ac0a:	3018      	adds	r0, #24
 800ac0c:	4798      	blx	r3
 800ac0e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ac10:	2200      	movs	r2, #0
 800ac12:	f883 2020 	strb.w	r2, [r3, #32]
 800ac16:	e7be      	b.n	800ab96 <ull_isr+0x26e>
 800ac18:	00010018 	.word	0x00010018
 800ac1c:	00110038 	.word	0x00110038
 800ac20:	34059400 	.word	0x34059400
 800ac24:	10220400 	.word	0x10220400

0800ac28 <dwt_modify32bitoffsetreg>:
 800ac28:	b530      	push	{r4, r5, lr}
 800ac2a:	b085      	sub	sp, #20
 800ac2c:	9c08      	ldr	r4, [sp, #32]
 800ac2e:	f88d 3008 	strb.w	r3, [sp, #8]
 800ac32:	0a1d      	lsrs	r5, r3, #8
 800ac34:	f88d 5009 	strb.w	r5, [sp, #9]
 800ac38:	0c1d      	lsrs	r5, r3, #16
 800ac3a:	f88d 500a 	strb.w	r5, [sp, #10]
 800ac3e:	0e1b      	lsrs	r3, r3, #24
 800ac40:	f88d 300b 	strb.w	r3, [sp, #11]
 800ac44:	f88d 400c 	strb.w	r4, [sp, #12]
 800ac48:	0a23      	lsrs	r3, r4, #8
 800ac4a:	f88d 300d 	strb.w	r3, [sp, #13]
 800ac4e:	0c23      	lsrs	r3, r4, #16
 800ac50:	f88d 300e 	strb.w	r3, [sp, #14]
 800ac54:	0e24      	lsrs	r4, r4, #24
 800ac56:	f88d 400f 	strb.w	r4, [sp, #15]
 800ac5a:	f248 0303 	movw	r3, #32771	; 0x8003
 800ac5e:	9301      	str	r3, [sp, #4]
 800ac60:	ab02      	add	r3, sp, #8
 800ac62:	9300      	str	r3, [sp, #0]
 800ac64:	2308      	movs	r3, #8
 800ac66:	b292      	uxth	r2, r2
 800ac68:	f7fe fe8f 	bl	800998a <dwt_xfer3xxx>
 800ac6c:	b005      	add	sp, #20
 800ac6e:	bd30      	pop	{r4, r5, pc}

0800ac70 <ull_enable_rf_tx>:
 800ac70:	b570      	push	{r4, r5, r6, lr}
 800ac72:	b082      	sub	sp, #8
 800ac74:	4604      	mov	r4, r0
 800ac76:	460e      	mov	r6, r1
 800ac78:	4d13      	ldr	r5, [pc, #76]	; (800acc8 <ull_enable_rf_tx+0x58>)
 800ac7a:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 800ac7e:	9300      	str	r3, [sp, #0]
 800ac80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac84:	2200      	movs	r2, #0
 800ac86:	4629      	mov	r1, r5
 800ac88:	f7ff ffce 	bl	800ac28 <dwt_modify32bitoffsetreg>
 800ac8c:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 800ac90:	9300      	str	r3, [sp, #0]
 800ac92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac96:	2200      	movs	r2, #0
 800ac98:	4629      	mov	r1, r5
 800ac9a:	4620      	mov	r0, r4
 800ac9c:	f7ff ffc4 	bl	800ac28 <dwt_modify32bitoffsetreg>
 800aca0:	4b0a      	ldr	r3, [pc, #40]	; (800accc <ull_enable_rf_tx+0x5c>)
 800aca2:	9300      	str	r3, [sp, #0]
 800aca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aca8:	2200      	movs	r2, #0
 800acaa:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800acae:	4620      	mov	r0, r4
 800acb0:	f7ff ffba 	bl	800ac28 <dwt_modify32bitoffsetreg>
 800acb4:	b90e      	cbnz	r6, 800acba <ull_enable_rf_tx+0x4a>
 800acb6:	b002      	add	sp, #8
 800acb8:	bd70      	pop	{r4, r5, r6, pc}
 800acba:	4b05      	ldr	r3, [pc, #20]	; (800acd0 <ull_enable_rf_tx+0x60>)
 800acbc:	2200      	movs	r2, #0
 800acbe:	4905      	ldr	r1, [pc, #20]	; (800acd4 <ull_enable_rf_tx+0x64>)
 800acc0:	4620      	mov	r0, r4
 800acc2:	f7ff fb5f 	bl	800a384 <dwt_write32bitoffsetreg>
 800acc6:	e7f6      	b.n	800acb6 <ull_enable_rf_tx+0x46>
 800acc8:	00070048 	.word	0x00070048
 800accc:	02003c00 	.word	0x02003c00
 800acd0:	01011100 	.word	0x01011100
 800acd4:	00070014 	.word	0x00070014

0800acd8 <ull_enable_rftx_blocks>:
 800acd8:	b500      	push	{lr}
 800acda:	b083      	sub	sp, #12
 800acdc:	4b05      	ldr	r3, [pc, #20]	; (800acf4 <ull_enable_rftx_blocks+0x1c>)
 800acde:	9300      	str	r3, [sp, #0]
 800ace0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ace4:	2200      	movs	r2, #0
 800ace6:	4904      	ldr	r1, [pc, #16]	; (800acf8 <ull_enable_rftx_blocks+0x20>)
 800ace8:	f7ff ff9e 	bl	800ac28 <dwt_modify32bitoffsetreg>
 800acec:	b003      	add	sp, #12
 800acee:	f85d fb04 	ldr.w	pc, [sp], #4
 800acf2:	bf00      	nop
 800acf4:	02003c00 	.word	0x02003c00
 800acf8:	00070004 	.word	0x00070004

0800acfc <_dwt_otpprogword32>:
 800acfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad00:	b083      	sub	sp, #12
 800ad02:	4604      	mov	r4, r0
 800ad04:	460d      	mov	r5, r1
 800ad06:	4617      	mov	r7, r2
 800ad08:	4e56      	ldr	r6, [pc, #344]	; (800ae64 <_dwt_otpprogword32+0x168>)
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	4631      	mov	r1, r6
 800ad0e:	f7fe fec4 	bl	8009a9a <dwt_read32bitoffsetreg>
 800ad12:	4681      	mov	r9, r0
 800ad14:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800ad18:	9300      	str	r3, [sp, #0]
 800ad1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad1e:	2200      	movs	r2, #0
 800ad20:	4631      	mov	r1, r6
 800ad22:	4620      	mov	r0, r4
 800ad24:	f7ff ff80 	bl	800ac28 <dwt_modify32bitoffsetreg>
 800ad28:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800ae68 <_dwt_otpprogword32+0x16c>
 800ad2c:	2318      	movs	r3, #24
 800ad2e:	2200      	movs	r2, #0
 800ad30:	4641      	mov	r1, r8
 800ad32:	4620      	mov	r0, r4
 800ad34:	f7ff fac9 	bl	800a2ca <dwt_write16bitoffsetreg>
 800ad38:	2125      	movs	r1, #37	; 0x25
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	f7ff faec 	bl	800a318 <__dwt_otp_write_wdata_id_reg>
 800ad40:	2102      	movs	r1, #2
 800ad42:	4620      	mov	r0, r4
 800ad44:	f7ff fae8 	bl	800a318 <__dwt_otp_write_wdata_id_reg>
 800ad48:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 800ad4c:	4620      	mov	r0, r4
 800ad4e:	f7ff fae3 	bl	800a318 <__dwt_otp_write_wdata_id_reg>
 800ad52:	b2f9      	uxtb	r1, r7
 800ad54:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800ad58:	4620      	mov	r0, r4
 800ad5a:	f7ff fadd 	bl	800a318 <__dwt_otp_write_wdata_id_reg>
 800ad5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ad62:	4620      	mov	r0, r4
 800ad64:	f7ff fad8 	bl	800a318 <__dwt_otp_write_wdata_id_reg>
 800ad68:	2100      	movs	r1, #0
 800ad6a:	4620      	mov	r0, r4
 800ad6c:	f7ff fad4 	bl	800a318 <__dwt_otp_write_wdata_id_reg>
 800ad70:	2102      	movs	r1, #2
 800ad72:	4620      	mov	r0, r4
 800ad74:	f7ff fad0 	bl	800a318 <__dwt_otp_write_wdata_id_reg>
 800ad78:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800ad7c:	4620      	mov	r0, r4
 800ad7e:	f7ff facb 	bl	800a318 <__dwt_otp_write_wdata_id_reg>
 800ad82:	b2e9      	uxtb	r1, r5
 800ad84:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800ad88:	4620      	mov	r0, r4
 800ad8a:	f7ff fac5 	bl	800a318 <__dwt_otp_write_wdata_id_reg>
 800ad8e:	f3c5 2107 	ubfx	r1, r5, #8, #8
 800ad92:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800ad96:	4620      	mov	r0, r4
 800ad98:	f7ff fabe 	bl	800a318 <__dwt_otp_write_wdata_id_reg>
 800ad9c:	f3c5 4107 	ubfx	r1, r5, #16, #8
 800ada0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800ada4:	4620      	mov	r0, r4
 800ada6:	f7ff fab7 	bl	800a318 <__dwt_otp_write_wdata_id_reg>
 800adaa:	0e29      	lsrs	r1, r5, #24
 800adac:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800adb0:	4620      	mov	r0, r4
 800adb2:	f7ff fab1 	bl	800a318 <__dwt_otp_write_wdata_id_reg>
 800adb6:	2100      	movs	r1, #0
 800adb8:	4620      	mov	r0, r4
 800adba:	f7ff faad 	bl	800a318 <__dwt_otp_write_wdata_id_reg>
 800adbe:	213a      	movs	r1, #58	; 0x3a
 800adc0:	4620      	mov	r0, r4
 800adc2:	f7ff faa9 	bl	800a318 <__dwt_otp_write_wdata_id_reg>
 800adc6:	f240 11ff 	movw	r1, #511	; 0x1ff
 800adca:	4620      	mov	r0, r4
 800adcc:	f7ff faa4 	bl	800a318 <__dwt_otp_write_wdata_id_reg>
 800add0:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800add4:	4620      	mov	r0, r4
 800add6:	f7ff fa9f 	bl	800a318 <__dwt_otp_write_wdata_id_reg>
 800adda:	2100      	movs	r1, #0
 800addc:	4620      	mov	r0, r4
 800adde:	f7ff fa9b 	bl	800a318 <__dwt_otp_write_wdata_id_reg>
 800ade2:	213a      	movs	r1, #58	; 0x3a
 800ade4:	4620      	mov	r0, r4
 800ade6:	f7ff fa97 	bl	800a318 <__dwt_otp_write_wdata_id_reg>
 800adea:	f240 1101 	movw	r1, #257	; 0x101
 800adee:	4620      	mov	r0, r4
 800adf0:	f7ff fa92 	bl	800a318 <__dwt_otp_write_wdata_id_reg>
 800adf4:	2302      	movs	r3, #2
 800adf6:	2200      	movs	r2, #0
 800adf8:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800adfc:	4620      	mov	r0, r4
 800adfe:	f7ff fa64 	bl	800a2ca <dwt_write16bitoffsetreg>
 800ae02:	2300      	movs	r3, #0
 800ae04:	461a      	mov	r2, r3
 800ae06:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	f7ff fa5d 	bl	800a2ca <dwt_write16bitoffsetreg>
 800ae10:	2002      	movs	r0, #2
 800ae12:	f7f6 fb97 	bl	8001544 <deca_sleep>
 800ae16:	213a      	movs	r1, #58	; 0x3a
 800ae18:	4620      	mov	r0, r4
 800ae1a:	f7ff fa7d 	bl	800a318 <__dwt_otp_write_wdata_id_reg>
 800ae1e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800ae22:	4620      	mov	r0, r4
 800ae24:	f7ff fa78 	bl	800a318 <__dwt_otp_write_wdata_id_reg>
 800ae28:	2302      	movs	r3, #2
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800ae30:	4620      	mov	r0, r4
 800ae32:	f7ff fa4a 	bl	800a2ca <dwt_write16bitoffsetreg>
 800ae36:	2300      	movs	r3, #0
 800ae38:	461a      	mov	r2, r3
 800ae3a:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800ae3e:	4620      	mov	r0, r4
 800ae40:	f7ff fa43 	bl	800a2ca <dwt_write16bitoffsetreg>
 800ae44:	2300      	movs	r3, #0
 800ae46:	461a      	mov	r2, r3
 800ae48:	4641      	mov	r1, r8
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	f7ff fa3d 	bl	800a2ca <dwt_write16bitoffsetreg>
 800ae50:	464b      	mov	r3, r9
 800ae52:	2200      	movs	r2, #0
 800ae54:	4631      	mov	r1, r6
 800ae56:	4620      	mov	r0, r4
 800ae58:	f7ff fa94 	bl	800a384 <dwt_write32bitoffsetreg>
 800ae5c:	b003      	add	sp, #12
 800ae5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae62:	bf00      	nop
 800ae64:	00070044 	.word	0x00070044
 800ae68:	000b0008 	.word	0x000b0008

0800ae6c <ull_setgpiomode>:
 800ae6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae6e:	b083      	sub	sp, #12
 800ae70:	2400      	movs	r4, #0
 800ae72:	4623      	mov	r3, r4
 800ae74:	2601      	movs	r6, #1
 800ae76:	2707      	movs	r7, #7
 800ae78:	e002      	b.n	800ae80 <ull_setgpiomode+0x14>
 800ae7a:	3401      	adds	r4, #1
 800ae7c:	2c09      	cmp	r4, #9
 800ae7e:	d009      	beq.n	800ae94 <ull_setgpiomode+0x28>
 800ae80:	fa06 f504 	lsl.w	r5, r6, r4
 800ae84:	420d      	tst	r5, r1
 800ae86:	d0f8      	beq.n	800ae7a <ull_setgpiomode+0xe>
 800ae88:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800ae8c:	fa07 f505 	lsl.w	r5, r7, r5
 800ae90:	432b      	orrs	r3, r5
 800ae92:	e7f2      	b.n	800ae7a <ull_setgpiomode+0xe>
 800ae94:	401a      	ands	r2, r3
 800ae96:	9200      	str	r2, [sp, #0]
 800ae98:	43db      	mvns	r3, r3
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800aea0:	f7ff fec2 	bl	800ac28 <dwt_modify32bitoffsetreg>
 800aea4:	b003      	add	sp, #12
 800aea6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aea8 <ull_writetxfctrl>:
 800aea8:	b510      	push	{r4, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	4604      	mov	r4, r0
 800aeae:	2a7f      	cmp	r2, #127	; 0x7f
 800aeb0:	d912      	bls.n	800aed8 <ull_writetxfctrl+0x30>
 800aeb2:	3280      	adds	r2, #128	; 0x80
 800aeb4:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 800aeb8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aebc:	9100      	str	r1, [sp, #0]
 800aebe:	4b0c      	ldr	r3, [pc, #48]	; (800aef0 <ull_writetxfctrl+0x48>)
 800aec0:	2200      	movs	r2, #0
 800aec2:	2120      	movs	r1, #32
 800aec4:	f7ff feb0 	bl	800ac28 <dwt_modify32bitoffsetreg>
 800aec8:	2200      	movs	r2, #0
 800aeca:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800aece:	4620      	mov	r0, r4
 800aed0:	f7fe fe0b 	bl	8009aea <dwt_read8bitoffsetreg>
 800aed4:	b002      	add	sp, #8
 800aed6:	bd10      	pop	{r4, pc}
 800aed8:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 800aedc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aee0:	9100      	str	r1, [sp, #0]
 800aee2:	4b03      	ldr	r3, [pc, #12]	; (800aef0 <ull_writetxfctrl+0x48>)
 800aee4:	2200      	movs	r2, #0
 800aee6:	2120      	movs	r1, #32
 800aee8:	f7ff fe9e 	bl	800ac28 <dwt_modify32bitoffsetreg>
 800aeec:	e7f2      	b.n	800aed4 <ull_writetxfctrl+0x2c>
 800aeee:	bf00      	nop
 800aef0:	fc00f400 	.word	0xfc00f400

0800aef4 <prs_sys_status_and_or>:
 800aef4:	b500      	push	{lr}
 800aef6:	b083      	sub	sp, #12
 800aef8:	9200      	str	r2, [sp, #0]
 800aefa:	460b      	mov	r3, r1
 800aefc:	2200      	movs	r2, #0
 800aefe:	2144      	movs	r1, #68	; 0x44
 800af00:	f7ff fe92 	bl	800ac28 <dwt_modify32bitoffsetreg>
 800af04:	2000      	movs	r0, #0
 800af06:	b003      	add	sp, #12
 800af08:	f85d fb04 	ldr.w	pc, [sp], #4

0800af0c <dwt_modify8bitoffsetreg>:
 800af0c:	b500      	push	{lr}
 800af0e:	b085      	sub	sp, #20
 800af10:	f88d 300c 	strb.w	r3, [sp, #12]
 800af14:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800af18:	f88d 300d 	strb.w	r3, [sp, #13]
 800af1c:	f248 0301 	movw	r3, #32769	; 0x8001
 800af20:	9301      	str	r3, [sp, #4]
 800af22:	ab03      	add	r3, sp, #12
 800af24:	9300      	str	r3, [sp, #0]
 800af26:	2302      	movs	r3, #2
 800af28:	b292      	uxth	r2, r2
 800af2a:	f7fe fd2e 	bl	800998a <dwt_xfer3xxx>
 800af2e:	b005      	add	sp, #20
 800af30:	f85d fb04 	ldr.w	pc, [sp], #4

0800af34 <ull_configciadiag>:
 800af34:	b530      	push	{r4, r5, lr}
 800af36:	b083      	sub	sp, #12
 800af38:	4604      	mov	r4, r0
 800af3a:	460d      	mov	r5, r1
 800af3c:	f011 0f01 	tst.w	r1, #1
 800af40:	d015      	beq.n	800af6e <ull_configciadiag+0x3a>
 800af42:	2300      	movs	r3, #0
 800af44:	9300      	str	r3, [sp, #0]
 800af46:	23ef      	movs	r3, #239	; 0xef
 800af48:	2202      	movs	r2, #2
 800af4a:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800af4e:	f7ff ffdd 	bl	800af0c <dwt_modify8bitoffsetreg>
 800af52:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800af54:	759d      	strb	r5, [r3, #22]
 800af56:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800af58:	7d9b      	ldrb	r3, [r3, #22]
 800af5a:	085b      	lsrs	r3, r3, #1
 800af5c:	d010      	beq.n	800af80 <ull_configciadiag+0x4c>
 800af5e:	086b      	lsrs	r3, r5, #1
 800af60:	2200      	movs	r2, #0
 800af62:	490e      	ldr	r1, [pc, #56]	; (800af9c <ull_configciadiag+0x68>)
 800af64:	4620      	mov	r0, r4
 800af66:	f7ff fb9b 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800af6a:	b003      	add	sp, #12
 800af6c:	bd30      	pop	{r4, r5, pc}
 800af6e:	2310      	movs	r3, #16
 800af70:	9300      	str	r3, [sp, #0]
 800af72:	23ff      	movs	r3, #255	; 0xff
 800af74:	2202      	movs	r2, #2
 800af76:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800af7a:	f7ff ffc7 	bl	800af0c <dwt_modify8bitoffsetreg>
 800af7e:	e7e8      	b.n	800af52 <ull_configciadiag+0x1e>
 800af80:	2301      	movs	r3, #1
 800af82:	9300      	str	r3, [sp, #0]
 800af84:	23ff      	movs	r3, #255	; 0xff
 800af86:	2200      	movs	r2, #0
 800af88:	4904      	ldr	r1, [pc, #16]	; (800af9c <ull_configciadiag+0x68>)
 800af8a:	4620      	mov	r0, r4
 800af8c:	f7ff ffbe 	bl	800af0c <dwt_modify8bitoffsetreg>
 800af90:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800af92:	7d93      	ldrb	r3, [r2, #22]
 800af94:	f043 0302 	orr.w	r3, r3, #2
 800af98:	7593      	strb	r3, [r2, #22]
 800af9a:	e7e6      	b.n	800af6a <ull_configciadiag+0x36>
 800af9c:	00010020 	.word	0x00010020

0800afa0 <ull_calcbandwidthadj>:
 800afa0:	b570      	push	{r4, r5, r6, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	4604      	mov	r4, r0
 800afa6:	460d      	mov	r5, r1
 800afa8:	2101      	movs	r1, #1
 800afaa:	f7ff f99f 	bl	800a2ec <ull_force_clocks>
 800afae:	2100      	movs	r1, #0
 800afb0:	4620      	mov	r0, r4
 800afb2:	f7ff fe5d 	bl	800ac70 <ull_enable_rf_tx>
 800afb6:	4620      	mov	r0, r4
 800afb8:	f7ff fe8e 	bl	800acd8 <ull_enable_rftx_blocks>
 800afbc:	f3c5 030b 	ubfx	r3, r5, #0, #12
 800afc0:	2200      	movs	r2, #0
 800afc2:	4915      	ldr	r1, [pc, #84]	; (800b018 <ull_calcbandwidthadj+0x78>)
 800afc4:	4620      	mov	r0, r4
 800afc6:	f7ff f980 	bl	800a2ca <dwt_write16bitoffsetreg>
 800afca:	2303      	movs	r3, #3
 800afcc:	9300      	str	r3, [sp, #0]
 800afce:	23ff      	movs	r3, #255	; 0xff
 800afd0:	2200      	movs	r2, #0
 800afd2:	4912      	ldr	r1, [pc, #72]	; (800b01c <ull_calcbandwidthadj+0x7c>)
 800afd4:	4620      	mov	r0, r4
 800afd6:	f7ff ff99 	bl	800af0c <dwt_modify8bitoffsetreg>
 800afda:	4e10      	ldr	r6, [pc, #64]	; (800b01c <ull_calcbandwidthadj+0x7c>)
 800afdc:	2500      	movs	r5, #0
 800afde:	462a      	mov	r2, r5
 800afe0:	4631      	mov	r1, r6
 800afe2:	4620      	mov	r0, r4
 800afe4:	f7fe fd81 	bl	8009aea <dwt_read8bitoffsetreg>
 800afe8:	f010 0f01 	tst.w	r0, #1
 800afec:	d1f7      	bne.n	800afde <ull_calcbandwidthadj+0x3e>
 800afee:	4620      	mov	r0, r4
 800aff0:	f7ff faf8 	bl	800a5e4 <ull_disable_rftx_blocks>
 800aff4:	2100      	movs	r1, #0
 800aff6:	4620      	mov	r0, r4
 800aff8:	f7ff fafe 	bl	800a5f8 <ull_disable_rf_tx>
 800affc:	2105      	movs	r1, #5
 800affe:	4620      	mov	r0, r4
 800b000:	f7ff f974 	bl	800a2ec <ull_force_clocks>
 800b004:	2200      	movs	r2, #0
 800b006:	4906      	ldr	r1, [pc, #24]	; (800b020 <ull_calcbandwidthadj+0x80>)
 800b008:	4620      	mov	r0, r4
 800b00a:	f7fe fd6e 	bl	8009aea <dwt_read8bitoffsetreg>
 800b00e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800b012:	b002      	add	sp, #8
 800b014:	bd70      	pop	{r4, r5, r6, pc}
 800b016:	bf00      	nop
 800b018:	0008001c 	.word	0x0008001c
 800b01c:	00080010 	.word	0x00080010
 800b020:	0007001c 	.word	0x0007001c

0800b024 <ull_configuretxrf>:
 800b024:	b538      	push	{r3, r4, r5, lr}
 800b026:	4605      	mov	r5, r0
 800b028:	460c      	mov	r4, r1
 800b02a:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 800b02e:	b149      	cbz	r1, 800b044 <ull_configuretxrf+0x20>
 800b030:	f7ff ffb6 	bl	800afa0 <ull_calcbandwidthadj>
 800b034:	f8d4 3001 	ldr.w	r3, [r4, #1]
 800b038:	2200      	movs	r2, #0
 800b03a:	4905      	ldr	r1, [pc, #20]	; (800b050 <ull_configuretxrf+0x2c>)
 800b03c:	4628      	mov	r0, r5
 800b03e:	f7ff f9a1 	bl	800a384 <dwt_write32bitoffsetreg>
 800b042:	bd38      	pop	{r3, r4, r5, pc}
 800b044:	7823      	ldrb	r3, [r4, #0]
 800b046:	2200      	movs	r2, #0
 800b048:	4902      	ldr	r1, [pc, #8]	; (800b054 <ull_configuretxrf+0x30>)
 800b04a:	f7ff fb29 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800b04e:	e7f1      	b.n	800b034 <ull_configuretxrf+0x10>
 800b050:	00010004 	.word	0x00010004
 800b054:	0007001c 	.word	0x0007001c

0800b058 <ull_repeated_frames>:
 800b058:	b530      	push	{r4, r5, lr}
 800b05a:	b083      	sub	sp, #12
 800b05c:	4604      	mov	r4, r0
 800b05e:	460d      	mov	r5, r1
 800b060:	2310      	movs	r3, #16
 800b062:	9300      	str	r3, [sp, #0]
 800b064:	23ff      	movs	r3, #255	; 0xff
 800b066:	2200      	movs	r2, #0
 800b068:	4906      	ldr	r1, [pc, #24]	; (800b084 <ull_repeated_frames+0x2c>)
 800b06a:	f7ff ff4f 	bl	800af0c <dwt_modify8bitoffsetreg>
 800b06e:	462b      	mov	r3, r5
 800b070:	2d02      	cmp	r5, #2
 800b072:	bf38      	it	cc
 800b074:	2302      	movcc	r3, #2
 800b076:	2200      	movs	r2, #0
 800b078:	2128      	movs	r1, #40	; 0x28
 800b07a:	4620      	mov	r0, r4
 800b07c:	f7ff f982 	bl	800a384 <dwt_write32bitoffsetreg>
 800b080:	b003      	add	sp, #12
 800b082:	bd30      	pop	{r4, r5, pc}
 800b084:	000f0028 	.word	0x000f0028

0800b088 <ull_setdwstate>:
 800b088:	b530      	push	{r4, r5, lr}
 800b08a:	b083      	sub	sp, #12
 800b08c:	4604      	mov	r4, r0
 800b08e:	2901      	cmp	r1, #1
 800b090:	d01d      	beq.n	800b0ce <ull_setdwstate+0x46>
 800b092:	2902      	cmp	r1, #2
 800b094:	d02f      	beq.n	800b0f6 <ull_setdwstate+0x6e>
 800b096:	2301      	movs	r3, #1
 800b098:	9300      	str	r3, [sp, #0]
 800b09a:	23ff      	movs	r3, #255	; 0xff
 800b09c:	2200      	movs	r2, #0
 800b09e:	4925      	ldr	r1, [pc, #148]	; (800b134 <ull_setdwstate+0xac>)
 800b0a0:	f7ff ff34 	bl	800af0c <dwt_modify8bitoffsetreg>
 800b0a4:	4d24      	ldr	r5, [pc, #144]	; (800b138 <ull_setdwstate+0xb0>)
 800b0a6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b0aa:	9300      	str	r3, [sp, #0]
 800b0ac:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	4629      	mov	r1, r5
 800b0b4:	4620      	mov	r0, r4
 800b0b6:	f7ff fdb7 	bl	800ac28 <dwt_modify32bitoffsetreg>
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	9300      	str	r3, [sp, #0]
 800b0be:	237f      	movs	r3, #127	; 0x7f
 800b0c0:	2202      	movs	r2, #2
 800b0c2:	4629      	mov	r1, r5
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	f7ff ff21 	bl	800af0c <dwt_modify8bitoffsetreg>
 800b0ca:	b003      	add	sp, #12
 800b0cc:	bd30      	pop	{r4, r5, pc}
 800b0ce:	2105      	movs	r1, #5
 800b0d0:	f7ff f90c 	bl	800a2ec <ull_force_clocks>
 800b0d4:	2302      	movs	r3, #2
 800b0d6:	9300      	str	r3, [sp, #0]
 800b0d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b0dc:	2200      	movs	r2, #0
 800b0de:	4917      	ldr	r1, [pc, #92]	; (800b13c <ull_setdwstate+0xb4>)
 800b0e0:	4620      	mov	r0, r4
 800b0e2:	f7ff fda1 	bl	800ac28 <dwt_modify32bitoffsetreg>
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	9200      	str	r2, [sp, #0]
 800b0ea:	23ff      	movs	r3, #255	; 0xff
 800b0ec:	4912      	ldr	r1, [pc, #72]	; (800b138 <ull_setdwstate+0xb0>)
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	f7ff ff0c 	bl	800af0c <dwt_modify8bitoffsetreg>
 800b0f4:	e7e9      	b.n	800b0ca <ull_setdwstate+0x42>
 800b0f6:	2303      	movs	r3, #3
 800b0f8:	9300      	str	r3, [sp, #0]
 800b0fa:	23ff      	movs	r3, #255	; 0xff
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	490d      	ldr	r1, [pc, #52]	; (800b134 <ull_setdwstate+0xac>)
 800b100:	f7ff ff04 	bl	800af0c <dwt_modify8bitoffsetreg>
 800b104:	4d0c      	ldr	r5, [pc, #48]	; (800b138 <ull_setdwstate+0xb0>)
 800b106:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b10a:	9300      	str	r3, [sp, #0]
 800b10c:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800b110:	2200      	movs	r2, #0
 800b112:	4629      	mov	r1, r5
 800b114:	4620      	mov	r0, r4
 800b116:	f7ff fd87 	bl	800ac28 <dwt_modify32bitoffsetreg>
 800b11a:	2300      	movs	r3, #0
 800b11c:	9300      	str	r3, [sp, #0]
 800b11e:	237f      	movs	r3, #127	; 0x7f
 800b120:	2202      	movs	r2, #2
 800b122:	4629      	mov	r1, r5
 800b124:	4620      	mov	r0, r4
 800b126:	f7ff fef1 	bl	800af0c <dwt_modify8bitoffsetreg>
 800b12a:	2105      	movs	r1, #5
 800b12c:	4620      	mov	r0, r4
 800b12e:	f7ff f8dd 	bl	800a2ec <ull_force_clocks>
 800b132:	e7ca      	b.n	800b0ca <ull_setdwstate+0x42>
 800b134:	00110004 	.word	0x00110004
 800b138:	00110008 	.word	0x00110008
 800b13c:	00090008 	.word	0x00090008

0800b140 <ull_configureframefilter>:
 800b140:	b530      	push	{r4, r5, lr}
 800b142:	b083      	sub	sp, #12
 800b144:	4605      	mov	r5, r0
 800b146:	2902      	cmp	r1, #2
 800b148:	d00e      	beq.n	800b168 <ull_configureframefilter+0x28>
 800b14a:	2400      	movs	r4, #0
 800b14c:	9400      	str	r4, [sp, #0]
 800b14e:	23fe      	movs	r3, #254	; 0xfe
 800b150:	4622      	mov	r2, r4
 800b152:	2110      	movs	r1, #16
 800b154:	f7ff feda 	bl	800af0c <dwt_modify8bitoffsetreg>
 800b158:	4623      	mov	r3, r4
 800b15a:	4622      	mov	r2, r4
 800b15c:	2114      	movs	r1, #20
 800b15e:	4628      	mov	r0, r5
 800b160:	f7ff f8b3 	bl	800a2ca <dwt_write16bitoffsetreg>
 800b164:	b003      	add	sp, #12
 800b166:	bd30      	pop	{r4, r5, pc}
 800b168:	4614      	mov	r4, r2
 800b16a:	2301      	movs	r3, #1
 800b16c:	9300      	str	r3, [sp, #0]
 800b16e:	23ff      	movs	r3, #255	; 0xff
 800b170:	2200      	movs	r2, #0
 800b172:	2110      	movs	r1, #16
 800b174:	f7ff feca 	bl	800af0c <dwt_modify8bitoffsetreg>
 800b178:	4623      	mov	r3, r4
 800b17a:	2200      	movs	r2, #0
 800b17c:	2114      	movs	r1, #20
 800b17e:	4628      	mov	r0, r5
 800b180:	f7ff f8a3 	bl	800a2ca <dwt_write16bitoffsetreg>
 800b184:	e7ee      	b.n	800b164 <ull_configureframefilter+0x24>
	...

0800b188 <ull_run_pgfcal>:
 800b188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b18c:	b082      	sub	sp, #8
 800b18e:	4605      	mov	r5, r0
 800b190:	4c29      	ldr	r4, [pc, #164]	; (800b238 <ull_run_pgfcal+0xb0>)
 800b192:	4b2a      	ldr	r3, [pc, #168]	; (800b23c <ull_run_pgfcal+0xb4>)
 800b194:	2200      	movs	r2, #0
 800b196:	4621      	mov	r1, r4
 800b198:	f7ff f8f4 	bl	800a384 <dwt_write32bitoffsetreg>
 800b19c:	2310      	movs	r3, #16
 800b19e:	9300      	str	r3, [sp, #0]
 800b1a0:	23ff      	movs	r3, #255	; 0xff
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	4621      	mov	r1, r4
 800b1a6:	4628      	mov	r0, r5
 800b1a8:	f7ff feb0 	bl	800af0c <dwt_modify8bitoffsetreg>
 800b1ac:	2403      	movs	r4, #3
 800b1ae:	f04f 0814 	mov.w	r8, #20
 800b1b2:	4f23      	ldr	r7, [pc, #140]	; (800b240 <ull_run_pgfcal+0xb8>)
 800b1b4:	2600      	movs	r6, #0
 800b1b6:	4640      	mov	r0, r8
 800b1b8:	f7f6 f9cf 	bl	800155a <deca_usleep>
 800b1bc:	4632      	mov	r2, r6
 800b1be:	4639      	mov	r1, r7
 800b1c0:	4628      	mov	r0, r5
 800b1c2:	f7fe fc92 	bl	8009aea <dwt_read8bitoffsetreg>
 800b1c6:	2801      	cmp	r0, #1
 800b1c8:	d034      	beq.n	800b234 <ull_run_pgfcal+0xac>
 800b1ca:	1e63      	subs	r3, r4, #1
 800b1cc:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800b1d0:	d1f1      	bne.n	800b1b6 <ull_run_pgfcal+0x2e>
 800b1d2:	f06f 0402 	mvn.w	r4, #2
 800b1d6:	4e18      	ldr	r6, [pc, #96]	; (800b238 <ull_run_pgfcal+0xb0>)
 800b1d8:	2300      	movs	r3, #0
 800b1da:	461a      	mov	r2, r3
 800b1dc:	4631      	mov	r1, r6
 800b1de:	4628      	mov	r0, r5
 800b1e0:	f7ff fa5e 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	4915      	ldr	r1, [pc, #84]	; (800b240 <ull_run_pgfcal+0xb8>)
 800b1ea:	4628      	mov	r0, r5
 800b1ec:	f7ff fa58 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	9300      	str	r3, [sp, #0]
 800b1f4:	23ff      	movs	r3, #255	; 0xff
 800b1f6:	2202      	movs	r2, #2
 800b1f8:	4631      	mov	r1, r6
 800b1fa:	4628      	mov	r0, r5
 800b1fc:	f7ff fe86 	bl	800af0c <dwt_modify8bitoffsetreg>
 800b200:	2200      	movs	r2, #0
 800b202:	4910      	ldr	r1, [pc, #64]	; (800b244 <ull_run_pgfcal+0xbc>)
 800b204:	4628      	mov	r0, r5
 800b206:	f7fe fc48 	bl	8009a9a <dwt_read32bitoffsetreg>
 800b20a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800b20e:	4298      	cmp	r0, r3
 800b210:	bf08      	it	eq
 800b212:	f06f 0403 	mvneq.w	r4, #3
 800b216:	2200      	movs	r2, #0
 800b218:	490b      	ldr	r1, [pc, #44]	; (800b248 <ull_run_pgfcal+0xc0>)
 800b21a:	4628      	mov	r0, r5
 800b21c:	f7fe fc3d 	bl	8009a9a <dwt_read32bitoffsetreg>
 800b220:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800b224:	4298      	cmp	r0, r3
 800b226:	bf14      	ite	ne
 800b228:	4620      	movne	r0, r4
 800b22a:	f06f 0004 	mvneq.w	r0, #4
 800b22e:	b002      	add	sp, #8
 800b230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b234:	2400      	movs	r4, #0
 800b236:	e7ce      	b.n	800b1d6 <ull_run_pgfcal+0x4e>
 800b238:	0004000c 	.word	0x0004000c
 800b23c:	00020001 	.word	0x00020001
 800b240:	00040020 	.word	0x00040020
 800b244:	00040014 	.word	0x00040014
 800b248:	0004001c 	.word	0x0004001c

0800b24c <ull_setinterrupt>:
 800b24c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b250:	b083      	sub	sp, #12
 800b252:	4605      	mov	r5, r0
 800b254:	4688      	mov	r8, r1
 800b256:	4617      	mov	r7, r2
 800b258:	461c      	mov	r4, r3
 800b25a:	f7f6 f955 	bl	8001508 <decamutexon>
 800b25e:	4606      	mov	r6, r0
 800b260:	2c02      	cmp	r4, #2
 800b262:	d019      	beq.n	800b298 <ull_setinterrupt+0x4c>
 800b264:	2c04      	cmp	r4, #4
 800b266:	d017      	beq.n	800b298 <ull_setinterrupt+0x4c>
 800b268:	f004 03fd 	and.w	r3, r4, #253	; 0xfd
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	d03f      	beq.n	800b2f0 <ull_setinterrupt+0xa4>
 800b270:	f04f 0900 	mov.w	r9, #0
 800b274:	f8cd 9000 	str.w	r9, [sp]
 800b278:	ea6f 0308 	mvn.w	r3, r8
 800b27c:	464a      	mov	r2, r9
 800b27e:	213c      	movs	r1, #60	; 0x3c
 800b280:	4628      	mov	r0, r5
 800b282:	f7ff fcd1 	bl	800ac28 <dwt_modify32bitoffsetreg>
 800b286:	f8cd 9000 	str.w	r9, [sp]
 800b28a:	43fb      	mvns	r3, r7
 800b28c:	464a      	mov	r2, r9
 800b28e:	2140      	movs	r1, #64	; 0x40
 800b290:	4628      	mov	r0, r5
 800b292:	f7ff fcc9 	bl	800ac28 <dwt_modify32bitoffsetreg>
 800b296:	e00b      	b.n	800b2b0 <ull_setinterrupt+0x64>
 800b298:	4643      	mov	r3, r8
 800b29a:	2200      	movs	r2, #0
 800b29c:	213c      	movs	r1, #60	; 0x3c
 800b29e:	4628      	mov	r0, r5
 800b2a0:	f7ff f870 	bl	800a384 <dwt_write32bitoffsetreg>
 800b2a4:	463b      	mov	r3, r7
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	2140      	movs	r1, #64	; 0x40
 800b2aa:	4628      	mov	r0, r5
 800b2ac:	f7ff f86a 	bl	800a384 <dwt_write32bitoffsetreg>
 800b2b0:	3c03      	subs	r4, #3
 800b2b2:	b2e4      	uxtb	r4, r4
 800b2b4:	2c01      	cmp	r4, #1
 800b2b6:	d92d      	bls.n	800b314 <ull_setinterrupt+0xc8>
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	213c      	movs	r1, #60	; 0x3c
 800b2bc:	4628      	mov	r0, r5
 800b2be:	f7fe fbec 	bl	8009a9a <dwt_read32bitoffsetreg>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	2144      	movs	r1, #68	; 0x44
 800b2c8:	4628      	mov	r0, r5
 800b2ca:	f7ff f85b 	bl	800a384 <dwt_write32bitoffsetreg>
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	2140      	movs	r1, #64	; 0x40
 800b2d2:	4628      	mov	r0, r5
 800b2d4:	f7fe fbe1 	bl	8009a9a <dwt_read32bitoffsetreg>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	2200      	movs	r2, #0
 800b2dc:	2148      	movs	r1, #72	; 0x48
 800b2de:	4628      	mov	r0, r5
 800b2e0:	f7ff f850 	bl	800a384 <dwt_write32bitoffsetreg>
 800b2e4:	4630      	mov	r0, r6
 800b2e6:	f7f6 f920 	bl	800152a <decamutexoff>
 800b2ea:	b003      	add	sp, #12
 800b2ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2f0:	f8cd 8000 	str.w	r8, [sp]
 800b2f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	213c      	movs	r1, #60	; 0x3c
 800b2fc:	4628      	mov	r0, r5
 800b2fe:	f7ff fc93 	bl	800ac28 <dwt_modify32bitoffsetreg>
 800b302:	9700      	str	r7, [sp, #0]
 800b304:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b308:	2200      	movs	r2, #0
 800b30a:	2140      	movs	r1, #64	; 0x40
 800b30c:	4628      	mov	r0, r5
 800b30e:	f7ff fc8b 	bl	800ac28 <dwt_modify32bitoffsetreg>
 800b312:	e7cd      	b.n	800b2b0 <ull_setinterrupt+0x64>
 800b314:	2110      	movs	r1, #16
 800b316:	9100      	str	r1, [sp, #0]
 800b318:	23ff      	movs	r3, #255	; 0xff
 800b31a:	2202      	movs	r2, #2
 800b31c:	4628      	mov	r0, r5
 800b31e:	f7ff fdf5 	bl	800af0c <dwt_modify8bitoffsetreg>
 800b322:	e7c9      	b.n	800b2b8 <ull_setinterrupt+0x6c>

0800b324 <prs_ack_enable>:
 800b324:	b500      	push	{lr}
 800b326:	b083      	sub	sp, #12
 800b328:	2900      	cmp	r1, #0
 800b32a:	bf0b      	itete	eq
 800b32c:	23ff      	moveq	r3, #255	; 0xff
 800b32e:	23f7      	movne	r3, #247	; 0xf7
 800b330:	2200      	moveq	r2, #0
 800b332:	2208      	movne	r2, #8
 800b334:	9200      	str	r2, [sp, #0]
 800b336:	2201      	movs	r2, #1
 800b338:	2110      	movs	r1, #16
 800b33a:	f7ff fde7 	bl	800af0c <dwt_modify8bitoffsetreg>
 800b33e:	b003      	add	sp, #12
 800b340:	f85d fb04 	ldr.w	pc, [sp], #4

0800b344 <dwt_modify16bitoffsetreg>:
 800b344:	b510      	push	{r4, lr}
 800b346:	b084      	sub	sp, #16
 800b348:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 800b34c:	f88d 300c 	strb.w	r3, [sp, #12]
 800b350:	0a1b      	lsrs	r3, r3, #8
 800b352:	f88d 300d 	strb.w	r3, [sp, #13]
 800b356:	f88d 400e 	strb.w	r4, [sp, #14]
 800b35a:	0a24      	lsrs	r4, r4, #8
 800b35c:	f88d 400f 	strb.w	r4, [sp, #15]
 800b360:	f248 0302 	movw	r3, #32770	; 0x8002
 800b364:	9301      	str	r3, [sp, #4]
 800b366:	ab03      	add	r3, sp, #12
 800b368:	9300      	str	r3, [sp, #0]
 800b36a:	2304      	movs	r3, #4
 800b36c:	b292      	uxth	r2, r2
 800b36e:	f7fe fb0c 	bl	800998a <dwt_xfer3xxx>
 800b372:	b004      	add	sp, #16
 800b374:	bd10      	pop	{r4, pc}
	...

0800b378 <ull_setleds>:
 800b378:	b530      	push	{r4, r5, lr}
 800b37a:	b083      	sub	sp, #12
 800b37c:	4604      	mov	r4, r0
 800b37e:	f011 0f01 	tst.w	r1, #1
 800b382:	d01f      	beq.n	800b3c4 <ull_setleds+0x4c>
 800b384:	460d      	mov	r5, r1
 800b386:	f44f 7310 	mov.w	r3, #576	; 0x240
 800b38a:	9300      	str	r3, [sp, #0]
 800b38c:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 800b390:	2200      	movs	r2, #0
 800b392:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800b396:	f7ff fc47 	bl	800ac28 <dwt_modify32bitoffsetreg>
 800b39a:	f44f 0304 	mov.w	r3, #8650752	; 0x840000
 800b39e:	9300      	str	r3, [sp, #0]
 800b3a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	4918      	ldr	r1, [pc, #96]	; (800b408 <ull_setleds+0x90>)
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	f7ff fc3d 	bl	800ac28 <dwt_modify32bitoffsetreg>
 800b3ae:	f015 0f02 	tst.w	r5, #2
 800b3b2:	d11a      	bne.n	800b3ea <ull_setleds+0x72>
 800b3b4:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	4914      	ldr	r1, [pc, #80]	; (800b40c <ull_setleds+0x94>)
 800b3bc:	4620      	mov	r0, r4
 800b3be:	f7fe ffe1 	bl	800a384 <dwt_write32bitoffsetreg>
 800b3c2:	e010      	b.n	800b3e6 <ull_setleds+0x6e>
 800b3c4:	2500      	movs	r5, #0
 800b3c6:	9500      	str	r5, [sp, #0]
 800b3c8:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 800b3cc:	462a      	mov	r2, r5
 800b3ce:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800b3d2:	f7ff fc29 	bl	800ac28 <dwt_modify32bitoffsetreg>
 800b3d6:	9500      	str	r5, [sp, #0]
 800b3d8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800b3dc:	462a      	mov	r2, r5
 800b3de:	490b      	ldr	r1, [pc, #44]	; (800b40c <ull_setleds+0x94>)
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	f7ff ffaf 	bl	800b344 <dwt_modify16bitoffsetreg>
 800b3e6:	b003      	add	sp, #12
 800b3e8:	bd30      	pop	{r4, r5, pc}
 800b3ea:	4d08      	ldr	r5, [pc, #32]	; (800b40c <ull_setleds+0x94>)
 800b3ec:	4b08      	ldr	r3, [pc, #32]	; (800b410 <ull_setleds+0x98>)
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	4629      	mov	r1, r5
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	f7fe ffc6 	bl	800a384 <dwt_write32bitoffsetreg>
 800b3f8:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	4629      	mov	r1, r5
 800b400:	4620      	mov	r0, r4
 800b402:	f7fe ffbf 	bl	800a384 <dwt_write32bitoffsetreg>
 800b406:	e7ee      	b.n	800b3e6 <ull_setleds+0x6e>
 800b408:	00110004 	.word	0x00110004
 800b40c:	00110018 	.word	0x00110018
 800b410:	000f0110 	.word	0x000f0110

0800b414 <ull_pgf_cal>:
 800b414:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b416:	b083      	sub	sp, #12
 800b418:	4604      	mov	r4, r0
 800b41a:	2901      	cmp	r1, #1
 800b41c:	d009      	beq.n	800b432 <ull_pgf_cal+0x1e>
 800b41e:	2014      	movs	r0, #20
 800b420:	f7f6 f89b 	bl	800155a <deca_usleep>
 800b424:	4620      	mov	r0, r4
 800b426:	f7ff feaf 	bl	800b188 <ull_run_pgfcal>
 800b42a:	4605      	mov	r5, r0
 800b42c:	4628      	mov	r0, r5
 800b42e:	b003      	add	sp, #12
 800b430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b432:	4e0f      	ldr	r6, [pc, #60]	; (800b470 <ull_pgf_cal+0x5c>)
 800b434:	2200      	movs	r2, #0
 800b436:	4631      	mov	r1, r6
 800b438:	f7fe fb45 	bl	8009ac6 <dwt_read16bitoffsetreg>
 800b43c:	4607      	mov	r7, r0
 800b43e:	f240 1307 	movw	r3, #263	; 0x107
 800b442:	9300      	str	r3, [sp, #0]
 800b444:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b448:	2200      	movs	r2, #0
 800b44a:	4631      	mov	r1, r6
 800b44c:	4620      	mov	r0, r4
 800b44e:	f7ff ff79 	bl	800b344 <dwt_modify16bitoffsetreg>
 800b452:	2014      	movs	r0, #20
 800b454:	f7f6 f881 	bl	800155a <deca_usleep>
 800b458:	4620      	mov	r0, r4
 800b45a:	f7ff fe95 	bl	800b188 <ull_run_pgfcal>
 800b45e:	4605      	mov	r5, r0
 800b460:	2200      	movs	r2, #0
 800b462:	9200      	str	r2, [sp, #0]
 800b464:	463b      	mov	r3, r7
 800b466:	4631      	mov	r1, r6
 800b468:	4620      	mov	r0, r4
 800b46a:	f7ff ff6b 	bl	800b344 <dwt_modify16bitoffsetreg>
 800b46e:	e7dd      	b.n	800b42c <ull_pgf_cal+0x18>
 800b470:	00070048 	.word	0x00070048

0800b474 <ull_setgpiovalue>:
 800b474:	b500      	push	{lr}
 800b476:	b083      	sub	sp, #12
 800b478:	2a01      	cmp	r2, #1
 800b47a:	d009      	beq.n	800b490 <ull_setgpiovalue+0x1c>
 800b47c:	43cb      	mvns	r3, r1
 800b47e:	2200      	movs	r2, #0
 800b480:	9200      	str	r2, [sp, #0]
 800b482:	b29b      	uxth	r3, r3
 800b484:	4906      	ldr	r1, [pc, #24]	; (800b4a0 <ull_setgpiovalue+0x2c>)
 800b486:	f7ff ff5d 	bl	800b344 <dwt_modify16bitoffsetreg>
 800b48a:	b003      	add	sp, #12
 800b48c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b490:	9100      	str	r1, [sp, #0]
 800b492:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b496:	2200      	movs	r2, #0
 800b498:	4901      	ldr	r1, [pc, #4]	; (800b4a0 <ull_setgpiovalue+0x2c>)
 800b49a:	f7ff ff53 	bl	800b344 <dwt_modify16bitoffsetreg>
 800b49e:	e7f4      	b.n	800b48a <ull_setgpiovalue+0x16>
 800b4a0:	0005000c 	.word	0x0005000c

0800b4a4 <ull_readaccdata>:
 800b4a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4a6:	b083      	sub	sp, #12
 800b4a8:	4604      	mov	r4, r0
 800b4aa:	460f      	mov	r7, r1
 800b4ac:	4616      	mov	r6, r2
 800b4ae:	461d      	mov	r5, r3
 800b4b0:	f248 0340 	movw	r3, #32832	; 0x8040
 800b4b4:	9300      	str	r3, [sp, #0]
 800b4b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	4918      	ldr	r1, [pc, #96]	; (800b520 <ull_readaccdata+0x7c>)
 800b4be:	f7ff ff41 	bl	800b344 <dwt_modify16bitoffsetreg>
 800b4c2:	19aa      	adds	r2, r5, r6
 800b4c4:	f243 0301 	movw	r3, #12289	; 0x3001
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	dc15      	bgt.n	800b4f8 <ull_readaccdata+0x54>
 800b4cc:	2d7f      	cmp	r5, #127	; 0x7f
 800b4ce:	d91d      	bls.n	800b50c <ull_readaccdata+0x68>
 800b4d0:	2315      	movs	r3, #21
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	4913      	ldr	r1, [pc, #76]	; (800b524 <ull_readaccdata+0x80>)
 800b4d6:	4620      	mov	r0, r4
 800b4d8:	f7fe ff54 	bl	800a384 <dwt_write32bitoffsetreg>
 800b4dc:	462b      	mov	r3, r5
 800b4de:	2200      	movs	r2, #0
 800b4e0:	4911      	ldr	r1, [pc, #68]	; (800b528 <ull_readaccdata+0x84>)
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	f7fe ff4e 	bl	800a384 <dwt_write32bitoffsetreg>
 800b4e8:	9700      	str	r7, [sp, #0]
 800b4ea:	4633      	mov	r3, r6
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	f7fe fac7 	bl	8009a86 <dwt_readfromdevice>
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	9200      	str	r2, [sp, #0]
 800b4fc:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 800b500:	4907      	ldr	r1, [pc, #28]	; (800b520 <ull_readaccdata+0x7c>)
 800b502:	4620      	mov	r0, r4
 800b504:	f7ff ff1e 	bl	800b344 <dwt_modify16bitoffsetreg>
 800b508:	b003      	add	sp, #12
 800b50a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b50c:	9700      	str	r7, [sp, #0]
 800b50e:	4633      	mov	r3, r6
 800b510:	462a      	mov	r2, r5
 800b512:	f44f 11a8 	mov.w	r1, #1376256	; 0x150000
 800b516:	4620      	mov	r0, r4
 800b518:	f7fe fab5 	bl	8009a86 <dwt_readfromdevice>
 800b51c:	e7ec      	b.n	800b4f8 <ull_readaccdata+0x54>
 800b51e:	bf00      	nop
 800b520:	00110004 	.word	0x00110004
 800b524:	001f0004 	.word	0x001f0004
 800b528:	001f0008 	.word	0x001f0008

0800b52c <ull_repeated_cw>:
 800b52c:	b570      	push	{r4, r5, r6, lr}
 800b52e:	4606      	mov	r6, r0
 800b530:	460c      	mov	r4, r1
 800b532:	4615      	mov	r5, r2
 800b534:	4b0e      	ldr	r3, [pc, #56]	; (800b570 <ull_repeated_cw+0x44>)
 800b536:	2202      	movs	r2, #2
 800b538:	490e      	ldr	r1, [pc, #56]	; (800b574 <ull_repeated_cw+0x48>)
 800b53a:	f7fe ff23 	bl	800a384 <dwt_write32bitoffsetreg>
 800b53e:	2d0f      	cmp	r5, #15
 800b540:	bfa8      	it	ge
 800b542:	250f      	movge	r5, #15
 800b544:	1e63      	subs	r3, r4, #1
 800b546:	2b03      	cmp	r3, #3
 800b548:	bf28      	it	cs
 800b54a:	2404      	movcs	r4, #4
 800b54c:	2310      	movs	r3, #16
 800b54e:	4123      	asrs	r3, r4
 800b550:	2200      	movs	r2, #0
 800b552:	4909      	ldr	r1, [pc, #36]	; (800b578 <ull_repeated_cw+0x4c>)
 800b554:	4630      	mov	r0, r6
 800b556:	f7fe ff15 	bl	800a384 <dwt_write32bitoffsetreg>
 800b55a:	1e63      	subs	r3, r4, #1
 800b55c:	009b      	lsls	r3, r3, #2
 800b55e:	fa05 f303 	lsl.w	r3, r5, r3
 800b562:	2200      	movs	r2, #0
 800b564:	4905      	ldr	r1, [pc, #20]	; (800b57c <ull_repeated_cw+0x50>)
 800b566:	4630      	mov	r0, r6
 800b568:	f7fe ff0c 	bl	800a384 <dwt_write32bitoffsetreg>
 800b56c:	bd70      	pop	{r4, r5, r6, pc}
 800b56e:	bf00      	nop
 800b570:	00d20874 	.word	0x00d20874
 800b574:	00110010 	.word	0x00110010
 800b578:	00070028 	.word	0x00070028
 800b57c:	00080018 	.word	0x00080018

0800b580 <ull_configure>:
 800b580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b584:	b083      	sub	sp, #12
 800b586:	4604      	mov	r4, r0
 800b588:	460d      	mov	r5, r1
 800b58a:	f891 9000 	ldrb.w	r9, [r1]
 800b58e:	790b      	ldrb	r3, [r1, #4]
 800b590:	2b18      	cmp	r3, #24
 800b592:	d814      	bhi.n	800b5be <ull_configure+0x3e>
 800b594:	78cf      	ldrb	r7, [r1, #3]
 800b596:	2f18      	cmp	r7, #24
 800b598:	bf94      	ite	ls
 800b59a:	2700      	movls	r7, #0
 800b59c:	2701      	movhi	r7, #1
 800b59e:	b2ff      	uxtb	r7, r7
 800b5a0:	79eb      	ldrb	r3, [r5, #7]
 800b5a2:	2b01      	cmp	r3, #1
 800b5a4:	bf0c      	ite	eq
 800b5a6:	2110      	moveq	r1, #16
 800b5a8:	2100      	movne	r1, #0
 800b5aa:	786b      	ldrb	r3, [r5, #1]
 800b5ac:	3b01      	subs	r3, #1
 800b5ae:	2b06      	cmp	r3, #6
 800b5b0:	d810      	bhi.n	800b5d4 <ull_configure+0x54>
 800b5b2:	e8df f003 	tbb	[pc, r3]
 800b5b6:	0f06      	.short	0x0f06
 800b5b8:	0f0c120f 	.word	0x0f0c120f
 800b5bc:	09          	.byte	0x09
 800b5bd:	00          	.byte	0x00
 800b5be:	2701      	movs	r7, #1
 800b5c0:	e7ed      	b.n	800b59e <ull_configure+0x1e>
 800b5c2:	f04f 0a40 	mov.w	sl, #64	; 0x40
 800b5c6:	e00a      	b.n	800b5de <ull_configure+0x5e>
 800b5c8:	f04f 0a48 	mov.w	sl, #72	; 0x48
 800b5cc:	e007      	b.n	800b5de <ull_configure+0x5e>
 800b5ce:	f04f 0a80 	mov.w	sl, #128	; 0x80
 800b5d2:	e004      	b.n	800b5de <ull_configure+0x5e>
 800b5d4:	f44f 7a80 	mov.w	sl, #256	; 0x100
 800b5d8:	e001      	b.n	800b5de <ull_configure+0x5e>
 800b5da:	f04f 0a20 	mov.w	sl, #32
 800b5de:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b5e0:	8a13      	ldrh	r3, [r2, #16]
 800b5e2:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800b5e6:	8213      	strh	r3, [r2, #16]
 800b5e8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b5ea:	79ea      	ldrb	r2, [r5, #7]
 800b5ec:	72da      	strb	r2, [r3, #11]
 800b5ee:	7b2e      	ldrb	r6, [r5, #12]
 800b5f0:	1cb3      	adds	r3, r6, #2
 800b5f2:	2601      	movs	r6, #1
 800b5f4:	409e      	lsls	r6, r3
 800b5f6:	fa1f f886 	uxth.w	r8, r6
 800b5fa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b5fc:	4bca      	ldr	r3, [pc, #808]	; (800b928 <ull_configure+0x3a8>)
 800b5fe:	fb03 f308 	mul.w	r3, r3, r8
 800b602:	0bdb      	lsrs	r3, r3, #15
 800b604:	8253      	strh	r3, [r2, #18]
 800b606:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b608:	7aea      	ldrb	r2, [r5, #11]
 800b60a:	755a      	strb	r2, [r3, #21]
 800b60c:	7a2b      	ldrb	r3, [r5, #8]
 800b60e:	015b      	lsls	r3, r3, #5
 800b610:	f003 0320 	and.w	r3, r3, #32
 800b614:	7b6a      	ldrb	r2, [r5, #13]
 800b616:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b61a:	7aea      	ldrb	r2, [r5, #11]
 800b61c:	0312      	lsls	r2, r2, #12
 800b61e:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 800b622:	4313      	orrs	r3, r2
 800b624:	430b      	orrs	r3, r1
 800b626:	9300      	str	r3, [sp, #0]
 800b628:	4bc0      	ldr	r3, [pc, #768]	; (800b92c <ull_configure+0x3ac>)
 800b62a:	2200      	movs	r2, #0
 800b62c:	2110      	movs	r1, #16
 800b62e:	4620      	mov	r0, r4
 800b630:	f7ff fafa 	bl	800ac28 <dwt_modify32bitoffsetreg>
 800b634:	2f00      	cmp	r7, #0
 800b636:	f040 80fc 	bne.w	800b832 <ull_configure+0x2b2>
 800b63a:	7aeb      	ldrb	r3, [r5, #11]
 800b63c:	b1f3      	cbz	r3, 800b67c <ull_configure+0xfc>
 800b63e:	7b6b      	ldrb	r3, [r5, #13]
 800b640:	2b01      	cmp	r3, #1
 800b642:	f240 8121 	bls.w	800b888 <ull_configure+0x308>
 800b646:	7b2a      	ldrb	r2, [r5, #12]
 800b648:	4bb9      	ldr	r3, [pc, #740]	; (800b930 <ull_configure+0x3b0>)
 800b64a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800b64e:	0112      	lsls	r2, r2, #4
 800b650:	0ad3      	lsrs	r3, r2, #11
 800b652:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800b656:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b65a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800b65e:	bf28      	it	cs
 800b660:	3301      	addcs	r3, #1
 800b662:	b29b      	uxth	r3, r3
 800b664:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
 800b668:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b66c:	9300      	str	r3, [sp, #0]
 800b66e:	f64f 7380 	movw	r3, #65408	; 0xff80
 800b672:	2202      	movs	r2, #2
 800b674:	49af      	ldr	r1, [pc, #700]	; (800b934 <ull_configure+0x3b4>)
 800b676:	4620      	mov	r0, r4
 800b678:	f7ff fe64 	bl	800b344 <dwt_modify16bitoffsetreg>
 800b67c:	2394      	movs	r3, #148	; 0x94
 800b67e:	9300      	str	r3, [sp, #0]
 800b680:	4bad      	ldr	r3, [pc, #692]	; (800b938 <ull_configure+0x3b8>)
 800b682:	2200      	movs	r2, #0
 800b684:	49ad      	ldr	r1, [pc, #692]	; (800b93c <ull_configure+0x3bc>)
 800b686:	4620      	mov	r0, r4
 800b688:	f7ff face 	bl	800ac28 <dwt_modify32bitoffsetreg>
 800b68c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800b690:	f340 810d 	ble.w	800b8ae <ull_configure+0x32e>
 800b694:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b696:	8a13      	ldrh	r3, [r2, #16]
 800b698:	f043 0320 	orr.w	r3, r3, #32
 800b69c:	8213      	strh	r3, [r2, #16]
 800b69e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b6a2:	9300      	str	r3, [sp, #0]
 800b6a4:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	49a5      	ldr	r1, [pc, #660]	; (800b940 <ull_configure+0x3c0>)
 800b6ac:	4620      	mov	r0, r4
 800b6ae:	f7ff fe49 	bl	800b344 <dwt_modify16bitoffsetreg>
 800b6b2:	7b6b      	ldrb	r3, [r5, #13]
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	f000 8105 	beq.w	800b8c4 <ull_configure+0x344>
 800b6ba:	78ab      	ldrb	r3, [r5, #2]
 800b6bc:	f043 0310 	orr.w	r3, r3, #16
 800b6c0:	9300      	str	r3, [sp, #0]
 800b6c2:	23fc      	movs	r3, #252	; 0xfc
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800b6ca:	4620      	mov	r0, r4
 800b6cc:	f7ff fc1e 	bl	800af0c <dwt_modify8bitoffsetreg>
 800b6d0:	1e73      	subs	r3, r6, #1
 800b6d2:	b2db      	uxtb	r3, r3
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800b6da:	4620      	mov	r0, r4
 800b6dc:	f7fe ffe0 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800b6e0:	786b      	ldrb	r3, [r5, #1]
 800b6e2:	2b07      	cmp	r3, #7
 800b6e4:	bf0c      	ite	eq
 800b6e6:	2308      	moveq	r3, #8
 800b6e8:	2300      	movne	r3, #0
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	2124      	movs	r1, #36	; 0x24
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	f7fe ffd6 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800b6f4:	7aeb      	ldrb	r3, [r5, #11]
 800b6f6:	f003 0303 	and.w	r3, r3, #3
 800b6fa:	2b03      	cmp	r3, #3
 800b6fc:	bf0c      	ite	eq
 800b6fe:	4b91      	ldreq	r3, [pc, #580]	; (800b944 <ull_configure+0x3c4>)
 800b700:	4b91      	ldrne	r3, [pc, #580]	; (800b948 <ull_configure+0x3c8>)
 800b702:	2200      	movs	r2, #0
 800b704:	4991      	ldr	r1, [pc, #580]	; (800b94c <ull_configure+0x3cc>)
 800b706:	4620      	mov	r0, r4
 800b708:	f7fe fe3c 	bl	800a384 <dwt_write32bitoffsetreg>
 800b70c:	2200      	movs	r2, #0
 800b70e:	4990      	ldr	r1, [pc, #576]	; (800b950 <ull_configure+0x3d0>)
 800b710:	4620      	mov	r0, r4
 800b712:	f7fe f9c2 	bl	8009a9a <dwt_read32bitoffsetreg>
 800b716:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 800b71a:	f020 001f 	bic.w	r0, r0, #31
 800b71e:	f1b9 0f09 	cmp.w	r9, #9
 800b722:	bf08      	it	eq
 800b724:	f040 0001 	orreq.w	r0, r0, #1
 800b728:	792a      	ldrb	r2, [r5, #4]
 800b72a:	0212      	lsls	r2, r2, #8
 800b72c:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 800b730:	78eb      	ldrb	r3, [r5, #3]
 800b732:	00db      	lsls	r3, r3, #3
 800b734:	b2db      	uxtb	r3, r3
 800b736:	431a      	orrs	r2, r3
 800b738:	796b      	ldrb	r3, [r5, #5]
 800b73a:	005b      	lsls	r3, r3, #1
 800b73c:	f003 0306 	and.w	r3, r3, #6
 800b740:	4313      	orrs	r3, r2
 800b742:	4303      	orrs	r3, r0
 800b744:	2200      	movs	r2, #0
 800b746:	4982      	ldr	r1, [pc, #520]	; (800b950 <ull_configure+0x3d0>)
 800b748:	4620      	mov	r0, r4
 800b74a:	f7fe fe1b 	bl	800a384 <dwt_write32bitoffsetreg>
 800b74e:	79aa      	ldrb	r2, [r5, #6]
 800b750:	786b      	ldrb	r3, [r5, #1]
 800b752:	031b      	lsls	r3, r3, #12
 800b754:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800b758:	9300      	str	r3, [sp, #0]
 800b75a:	f46f 4374 	mvn.w	r3, #62464	; 0xf400
 800b75e:	2200      	movs	r2, #0
 800b760:	2120      	movs	r1, #32
 800b762:	4620      	mov	r0, r4
 800b764:	f7ff fa60 	bl	800ac28 <dwt_modify32bitoffsetreg>
 800b768:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 800b76c:	b923      	cbnz	r3, 800b778 <ull_configure+0x1f8>
 800b76e:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800b772:	726b      	strb	r3, [r5, #9]
 800b774:	2300      	movs	r3, #0
 800b776:	72ab      	strb	r3, [r5, #10]
 800b778:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 800b77c:	2202      	movs	r2, #2
 800b77e:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800b782:	4620      	mov	r0, r4
 800b784:	f7fe fda1 	bl	800a2ca <dwt_write16bitoffsetreg>
 800b788:	2202      	movs	r2, #2
 800b78a:	4972      	ldr	r1, [pc, #456]	; (800b954 <ull_configure+0x3d4>)
 800b78c:	4620      	mov	r0, r4
 800b78e:	f7fe f9ac 	bl	8009aea <dwt_read8bitoffsetreg>
 800b792:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b794:	7bdb      	ldrb	r3, [r3, #15]
 800b796:	454b      	cmp	r3, r9
 800b798:	f000 809e 	beq.w	800b8d8 <ull_configure+0x358>
 800b79c:	2803      	cmp	r0, #3
 800b79e:	f000 809f 	beq.w	800b8e0 <ull_configure+0x360>
 800b7a2:	f1b9 0f09 	cmp.w	r9, #9
 800b7a6:	f000 80a0 	beq.w	800b8ea <ull_configure+0x36a>
 800b7aa:	4b6b      	ldr	r3, [pc, #428]	; (800b958 <ull_configure+0x3d8>)
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	496b      	ldr	r1, [pc, #428]	; (800b95c <ull_configure+0x3dc>)
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	f7fe fde7 	bl	800a384 <dwt_write32bitoffsetreg>
 800b7b6:	f641 733c 	movw	r3, #7996	; 0x1f3c
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	f7fe fd82 	bl	800a2ca <dwt_write16bitoffsetreg>
 800b7c6:	2314      	movs	r3, #20
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	4965      	ldr	r1, [pc, #404]	; (800b960 <ull_configure+0x3e0>)
 800b7cc:	4620      	mov	r0, r4
 800b7ce:	f7fe ff67 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800b7d2:	230e      	movs	r3, #14
 800b7d4:	2202      	movs	r2, #2
 800b7d6:	4963      	ldr	r1, [pc, #396]	; (800b964 <ull_configure+0x3e4>)
 800b7d8:	4620      	mov	r0, r4
 800b7da:	f7fe ff61 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800b7de:	2381      	movs	r3, #129	; 0x81
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	4961      	ldr	r1, [pc, #388]	; (800b968 <ull_configure+0x3e8>)
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	f7fe ff5b 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800b7ea:	2302      	movs	r3, #2
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	2144      	movs	r1, #68	; 0x44
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	f7fe ff55 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800b7f6:	2101      	movs	r1, #1
 800b7f8:	4620      	mov	r0, r4
 800b7fa:	f7ff fc45 	bl	800b088 <ull_setdwstate>
 800b7fe:	f04f 0b32 	mov.w	fp, #50	; 0x32
 800b802:	f04f 0814 	mov.w	r8, #20
 800b806:	2700      	movs	r7, #0
 800b808:	2644      	movs	r6, #68	; 0x44
 800b80a:	4640      	mov	r0, r8
 800b80c:	f7f5 fea5 	bl	800155a <deca_usleep>
 800b810:	463a      	mov	r2, r7
 800b812:	4631      	mov	r1, r6
 800b814:	4620      	mov	r0, r4
 800b816:	f7fe f968 	bl	8009aea <dwt_read8bitoffsetreg>
 800b81a:	f010 0f02 	tst.w	r0, #2
 800b81e:	f040 80b5 	bne.w	800b98c <ull_configure+0x40c>
 800b822:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800b826:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 800b82a:	d1ee      	bne.n	800b80a <ull_configure+0x28a>
 800b82c:	f06f 0001 	mvn.w	r0, #1
 800b830:	e0de      	b.n	800b9f0 <ull_configure+0x470>
 800b832:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b834:	8a13      	ldrh	r3, [r2, #16]
 800b836:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b83a:	8213      	strh	r3, [r2, #16]
 800b83c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b840:	9300      	str	r3, [sp, #0]
 800b842:	f46f 5340 	mvn.w	r3, #12288	; 0x3000
 800b846:	2200      	movs	r2, #0
 800b848:	493d      	ldr	r1, [pc, #244]	; (800b940 <ull_configure+0x3c0>)
 800b84a:	4620      	mov	r0, r4
 800b84c:	f7ff f9ec 	bl	800ac28 <dwt_modify32bitoffsetreg>
 800b850:	f240 3306 	movw	r3, #774	; 0x306
 800b854:	2200      	movs	r2, #0
 800b856:	4945      	ldr	r1, [pc, #276]	; (800b96c <ull_configure+0x3ec>)
 800b858:	4620      	mov	r0, r4
 800b85a:	f7fe fd93 	bl	800a384 <dwt_write32bitoffsetreg>
 800b85e:	2300      	movs	r3, #0
 800b860:	461a      	mov	r2, r3
 800b862:	4943      	ldr	r1, [pc, #268]	; (800b970 <ull_configure+0x3f0>)
 800b864:	4620      	mov	r0, r4
 800b866:	f7fe fd8d 	bl	800a384 <dwt_write32bitoffsetreg>
 800b86a:	4b42      	ldr	r3, [pc, #264]	; (800b974 <ull_configure+0x3f4>)
 800b86c:	2200      	movs	r2, #0
 800b86e:	4931      	ldr	r1, [pc, #196]	; (800b934 <ull_configure+0x3b4>)
 800b870:	4620      	mov	r0, r4
 800b872:	f7fe fd87 	bl	800a384 <dwt_write32bitoffsetreg>
 800b876:	239d      	movs	r3, #157	; 0x9d
 800b878:	9300      	str	r3, [sp, #0]
 800b87a:	4b2f      	ldr	r3, [pc, #188]	; (800b938 <ull_configure+0x3b8>)
 800b87c:	2200      	movs	r2, #0
 800b87e:	492f      	ldr	r1, [pc, #188]	; (800b93c <ull_configure+0x3bc>)
 800b880:	4620      	mov	r0, r4
 800b882:	f7ff f9d1 	bl	800ac28 <dwt_modify32bitoffsetreg>
 800b886:	e714      	b.n	800b6b2 <ull_configure+0x132>
 800b888:	7b2a      	ldrb	r2, [r5, #12]
 800b88a:	4b29      	ldr	r3, [pc, #164]	; (800b930 <ull_configure+0x3b0>)
 800b88c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800b890:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 800b894:	fb02 f203 	mul.w	r2, r2, r3
 800b898:	0c93      	lsrs	r3, r2, #18
 800b89a:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 800b89e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b8a2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800b8a6:	bf28      	it	cs
 800b8a8:	3301      	addcs	r3, #1
 800b8aa:	b29b      	uxth	r3, r3
 800b8ac:	e6da      	b.n	800b664 <ull_configure+0xe4>
 800b8ae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b8b2:	9300      	str	r3, [sp, #0]
 800b8b4:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	4921      	ldr	r1, [pc, #132]	; (800b940 <ull_configure+0x3c0>)
 800b8bc:	4620      	mov	r0, r4
 800b8be:	f7ff fd41 	bl	800b344 <dwt_modify16bitoffsetreg>
 800b8c2:	e6f6      	b.n	800b6b2 <ull_configure+0x132>
 800b8c4:	78ab      	ldrb	r3, [r5, #2]
 800b8c6:	9300      	str	r3, [sp, #0]
 800b8c8:	23ec      	movs	r3, #236	; 0xec
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800b8d0:	4620      	mov	r0, r4
 800b8d2:	f7ff fb1b 	bl	800af0c <dwt_modify8bitoffsetreg>
 800b8d6:	e6fb      	b.n	800b6d0 <ull_configure+0x150>
 800b8d8:	2803      	cmp	r0, #3
 800b8da:	f47f af62 	bne.w	800b7a2 <ull_configure+0x222>
 800b8de:	e058      	b.n	800b992 <ull_configure+0x412>
 800b8e0:	2102      	movs	r1, #2
 800b8e2:	4620      	mov	r0, r4
 800b8e4:	f7ff fbd0 	bl	800b088 <ull_setdwstate>
 800b8e8:	e75b      	b.n	800b7a2 <ull_configure+0x222>
 800b8ea:	4b23      	ldr	r3, [pc, #140]	; (800b978 <ull_configure+0x3f8>)
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	491b      	ldr	r1, [pc, #108]	; (800b95c <ull_configure+0x3dc>)
 800b8f0:	4620      	mov	r0, r4
 800b8f2:	f7fe fd47 	bl	800a384 <dwt_write32bitoffsetreg>
 800b8f6:	f640 733c 	movw	r3, #3900	; 0xf3c
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 800b900:	4620      	mov	r0, r4
 800b902:	f7fe fce2 	bl	800a2ca <dwt_write16bitoffsetreg>
 800b906:	e75e      	b.n	800b7c6 <ull_configure+0x246>
 800b908:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b90c:	9300      	str	r3, [sp, #0]
 800b90e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b912:	2200      	movs	r2, #0
 800b914:	490a      	ldr	r1, [pc, #40]	; (800b940 <ull_configure+0x3c0>)
 800b916:	4620      	mov	r0, r4
 800b918:	f7ff fd14 	bl	800b344 <dwt_modify16bitoffsetreg>
 800b91c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b91e:	8a13      	ldrh	r3, [r2, #16]
 800b920:	f043 0308 	orr.w	r3, r3, #8
 800b924:	8213      	strh	r3, [r2, #16]
 800b926:	e046      	b.n	800b9b6 <ull_configure+0x436>
 800b928:	00026668 	.word	0x00026668
 800b92c:	fffc4fcf 	.word	0xfffc4fcf
 800b930:	08015fa4 	.word	0x08015fa4
 800b934:	000e0014 	.word	0x000e0014
 800b938:	bfffff00 	.word	0xbfffff00
 800b93c:	000e0018 	.word	0x000e0018
 800b940:	000b0008 	.word	0x000b0008
 800b944:	af5f35cc 	.word	0xaf5f35cc
 800b948:	af5f584c 	.word	0xaf5f584c
 800b94c:	0006000c 	.word	0x0006000c
 800b950:	00010008 	.word	0x00010008
 800b954:	000f0030 	.word	0x000f0030
 800b958:	1c071134 	.word	0x1c071134
 800b95c:	0007001c 	.word	0x0007001c
 800b960:	00070050 	.word	0x00070050
 800b964:	00070018 	.word	0x00070018
 800b968:	00090008 	.word	0x00090008
 800b96c:	000e000c 	.word	0x000e000c
 800b970:	000e0010 	.word	0x000e0010
 800b974:	000c5a0a 	.word	0x000c5a0a
 800b978:	1c010034 	.word	0x1c010034
 800b97c:	2200      	movs	r2, #0
 800b97e:	9200      	str	r2, [sp, #0]
 800b980:	23fe      	movs	r3, #254	; 0xfe
 800b982:	491d      	ldr	r1, [pc, #116]	; (800b9f8 <ull_configure+0x478>)
 800b984:	4620      	mov	r0, r4
 800b986:	f7ff fac1 	bl	800af0c <dwt_modify8bitoffsetreg>
 800b98a:	e01e      	b.n	800b9ca <ull_configure+0x44a>
 800b98c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b98e:	f883 900f 	strb.w	r9, [r3, #15]
 800b992:	792b      	ldrb	r3, [r5, #4]
 800b994:	3b09      	subs	r3, #9
 800b996:	b2db      	uxtb	r3, r3
 800b998:	2b0f      	cmp	r3, #15
 800b99a:	d8ef      	bhi.n	800b97c <ull_configure+0x3fc>
 800b99c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b99e:	7a1b      	ldrb	r3, [r3, #8]
 800b9a0:	2b01      	cmp	r3, #1
 800b9a2:	d0b1      	beq.n	800b908 <ull_configure+0x388>
 800b9a4:	4649      	mov	r1, r9
 800b9a6:	4620      	mov	r0, r4
 800b9a8:	f7fe fda4 	bl	800a4f4 <ull_configmrxlut>
 800b9ac:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b9ae:	8a13      	ldrh	r3, [r2, #16]
 800b9b0:	f023 0308 	bic.w	r3, r3, #8
 800b9b4:	8213      	strh	r3, [r2, #16]
 800b9b6:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800b9ba:	9300      	str	r3, [sp, #0]
 800b9bc:	f248 13ff 	movw	r3, #33279	; 0x81ff
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	490d      	ldr	r1, [pc, #52]	; (800b9f8 <ull_configure+0x478>)
 800b9c4:	4620      	mov	r0, r4
 800b9c6:	f7ff fcbd 	bl	800b344 <dwt_modify16bitoffsetreg>
 800b9ca:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 800b9ce:	bfcc      	ite	gt
 800b9d0:	f04f 5300 	movgt.w	r3, #536870912	; 0x20000000
 800b9d4:	f04f 53a0 	movle.w	r3, #335544320	; 0x14000000
 800b9d8:	9300      	str	r3, [sp, #0]
 800b9da:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800b9de:	2200      	movs	r2, #0
 800b9e0:	4906      	ldr	r1, [pc, #24]	; (800b9fc <ull_configure+0x47c>)
 800b9e2:	4620      	mov	r0, r4
 800b9e4:	f7ff f920 	bl	800ac28 <dwt_modify32bitoffsetreg>
 800b9e8:	2101      	movs	r1, #1
 800b9ea:	4620      	mov	r0, r4
 800b9ec:	f7ff fd12 	bl	800b414 <ull_pgf_cal>
 800b9f0:	b003      	add	sp, #12
 800b9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9f6:	bf00      	nop
 800b9f8:	00030018 	.word	0x00030018
 800b9fc:	00060010 	.word	0x00060010

0800ba00 <ull_initialise>:
 800ba00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba02:	b083      	sub	sp, #12
 800ba04:	4605      	mov	r5, r0
 800ba06:	460e      	mov	r6, r1
 800ba08:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d051      	beq.n	800bab2 <ull_initialise+0xb2>
 800ba0e:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 800ba10:	2300      	movs	r3, #0
 800ba12:	73a3      	strb	r3, [r4, #14]
 800ba14:	2202      	movs	r2, #2
 800ba16:	8222      	strh	r2, [r4, #16]
 800ba18:	7523      	strb	r3, [r4, #20]
 800ba1a:	7563      	strb	r3, [r4, #21]
 800ba1c:	73e3      	strb	r3, [r4, #15]
 800ba1e:	7263      	strb	r3, [r4, #9]
 800ba20:	72a3      	strb	r3, [r4, #10]
 800ba22:	2104      	movs	r1, #4
 800ba24:	4628      	mov	r0, r5
 800ba26:	f7fe fc8b 	bl	800a340 <_dwt_otpread>
 800ba2a:	4607      	mov	r7, r0
 800ba2c:	2105      	movs	r1, #5
 800ba2e:	4628      	mov	r0, r5
 800ba30:	f7fe fc86 	bl	800a340 <_dwt_otpread>
 800ba34:	b10f      	cbz	r7, 800ba3a <ull_initialise+0x3a>
 800ba36:	2800      	cmp	r0, #0
 800ba38:	d140      	bne.n	800babc <ull_initialise+0xbc>
 800ba3a:	2120      	movs	r1, #32
 800ba3c:	4628      	mov	r0, r5
 800ba3e:	f7fe fc7f 	bl	800a340 <_dwt_otpread>
 800ba42:	4b35      	ldr	r3, [pc, #212]	; (800bb18 <ull_initialise+0x118>)
 800ba44:	4298      	cmp	r0, r3
 800ba46:	bf0c      	ite	eq
 800ba48:	2301      	moveq	r3, #1
 800ba4a:	2300      	movne	r3, #0
 800ba4c:	7223      	strb	r3, [r4, #8]
 800ba4e:	f016 0f10 	tst.w	r6, #16
 800ba52:	d142      	bne.n	800bada <ull_initialise+0xda>
 800ba54:	f016 0f20 	tst.w	r6, #32
 800ba58:	d145      	bne.n	800bae6 <ull_initialise+0xe6>
 800ba5a:	f016 0f40 	tst.w	r6, #64	; 0x40
 800ba5e:	d148      	bne.n	800baf2 <ull_initialise+0xf2>
 800ba60:	f016 0f80 	tst.w	r6, #128	; 0x80
 800ba64:	d14c      	bne.n	800bb00 <ull_initialise+0x100>
 800ba66:	7aa3      	ldrb	r3, [r4, #10]
 800ba68:	b90b      	cbnz	r3, 800ba6e <ull_initialise+0x6e>
 800ba6a:	2385      	movs	r3, #133	; 0x85
 800ba6c:	72a3      	strb	r3, [r4, #10]
 800ba6e:	7a63      	ldrb	r3, [r4, #9]
 800ba70:	b90b      	cbnz	r3, 800ba76 <ull_initialise+0x76>
 800ba72:	2374      	movs	r3, #116	; 0x74
 800ba74:	7263      	strb	r3, [r4, #9]
 800ba76:	211f      	movs	r1, #31
 800ba78:	4628      	mov	r0, r5
 800ba7a:	f7fe fc61 	bl	800a340 <_dwt_otpread>
 800ba7e:	7320      	strb	r0, [r4, #12]
 800ba80:	211e      	movs	r1, #30
 800ba82:	4628      	mov	r0, r5
 800ba84:	f7fe fc5c 	bl	800a340 <_dwt_otpread>
 800ba88:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
 800ba8c:	bf12      	itee	ne
 800ba8e:	7360      	strbne	r0, [r4, #13]
 800ba90:	232e      	moveq	r3, #46	; 0x2e
 800ba92:	7363      	strbeq	r3, [r4, #13]
 800ba94:	7b63      	ldrb	r3, [r4, #13]
 800ba96:	2200      	movs	r2, #0
 800ba98:	4920      	ldr	r1, [pc, #128]	; (800bb1c <ull_initialise+0x11c>)
 800ba9a:	4628      	mov	r0, r5
 800ba9c:	f7fe fe00 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800baa0:	2135      	movs	r1, #53	; 0x35
 800baa2:	4628      	mov	r0, r5
 800baa4:	f7fe fc4c 	bl	800a340 <_dwt_otpread>
 800baa8:	4603      	mov	r3, r0
 800baaa:	bb78      	cbnz	r0, 800bb0c <ull_initialise+0x10c>
 800baac:	2000      	movs	r0, #0
 800baae:	b003      	add	sp, #12
 800bab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bab2:	2028      	movs	r0, #40	; 0x28
 800bab4:	f008 f8f8 	bl	8013ca8 <malloc>
 800bab8:	6528      	str	r0, [r5, #80]	; 0x50
 800baba:	e7a8      	b.n	800ba0e <ull_initialise+0xe>
 800babc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bac0:	9300      	str	r3, [sp, #0]
 800bac2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bac6:	2200      	movs	r2, #0
 800bac8:	4915      	ldr	r1, [pc, #84]	; (800bb20 <ull_initialise+0x120>)
 800baca:	4628      	mov	r0, r5
 800bacc:	f7ff fc3a 	bl	800b344 <dwt_modify16bitoffsetreg>
 800bad0:	8a23      	ldrh	r3, [r4, #16]
 800bad2:	f043 0310 	orr.w	r3, r3, #16
 800bad6:	8223      	strh	r3, [r4, #16]
 800bad8:	e7af      	b.n	800ba3a <ull_initialise+0x3a>
 800bada:	2106      	movs	r1, #6
 800badc:	4628      	mov	r0, r5
 800bade:	f7fe fc2f 	bl	800a340 <_dwt_otpread>
 800bae2:	6020      	str	r0, [r4, #0]
 800bae4:	e7b6      	b.n	800ba54 <ull_initialise+0x54>
 800bae6:	2107      	movs	r1, #7
 800bae8:	4628      	mov	r0, r5
 800baea:	f7fe fc29 	bl	800a340 <_dwt_otpread>
 800baee:	6060      	str	r0, [r4, #4]
 800baf0:	e7b3      	b.n	800ba5a <ull_initialise+0x5a>
 800baf2:	2108      	movs	r1, #8
 800baf4:	4628      	mov	r0, r5
 800baf6:	f7fe fc23 	bl	800a340 <_dwt_otpread>
 800bafa:	0c00      	lsrs	r0, r0, #16
 800bafc:	7260      	strb	r0, [r4, #9]
 800bafe:	e7af      	b.n	800ba60 <ull_initialise+0x60>
 800bb00:	2109      	movs	r1, #9
 800bb02:	4628      	mov	r0, r5
 800bb04:	f7fe fc1c 	bl	800a340 <_dwt_otpread>
 800bb08:	72a0      	strb	r0, [r4, #10]
 800bb0a:	e7ac      	b.n	800ba66 <ull_initialise+0x66>
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	4905      	ldr	r1, [pc, #20]	; (800bb24 <ull_initialise+0x124>)
 800bb10:	4628      	mov	r0, r5
 800bb12:	f7fe fc37 	bl	800a384 <dwt_write32bitoffsetreg>
 800bb16:	e7c9      	b.n	800baac <ull_initialise+0xac>
 800bb18:	10000240 	.word	0x10000240
 800bb1c:	00090014 	.word	0x00090014
 800bb20:	000b0008 	.word	0x000b0008
 800bb24:	00090004 	.word	0x00090004

0800bb28 <ull_rxenable>:
 800bb28:	b530      	push	{r4, r5, lr}
 800bb2a:	b083      	sub	sp, #12
 800bb2c:	4605      	mov	r5, r0
 800bb2e:	460c      	mov	r4, r1
 800bb30:	b171      	cbz	r1, 800bb50 <ull_rxenable+0x28>
 800bb32:	f021 0302 	bic.w	r3, r1, #2
 800bb36:	3b01      	subs	r3, #1
 800bb38:	2b0f      	cmp	r3, #15
 800bb3a:	d862      	bhi.n	800bc02 <ull_rxenable+0xda>
 800bb3c:	e8df f003 	tbb	[pc, r3]
 800bb40:	24616111 	.word	0x24616111
 800bb44:	2d616161 	.word	0x2d616161
 800bb48:	61616161 	.word	0x61616161
 800bb4c:	3a616161 	.word	0x3a616161
 800bb50:	2102      	movs	r1, #2
 800bb52:	9101      	str	r1, [sp, #4]
 800bb54:	2200      	movs	r2, #0
 800bb56:	9200      	str	r2, [sp, #0]
 800bb58:	4613      	mov	r3, r2
 800bb5a:	f7fd ff16 	bl	800998a <dwt_xfer3xxx>
 800bb5e:	4620      	mov	r0, r4
 800bb60:	e010      	b.n	800bb84 <ull_rxenable+0x5c>
 800bb62:	2302      	movs	r3, #2
 800bb64:	9301      	str	r3, [sp, #4]
 800bb66:	2200      	movs	r2, #0
 800bb68:	9200      	str	r2, [sp, #0]
 800bb6a:	4613      	mov	r3, r2
 800bb6c:	2104      	movs	r1, #4
 800bb6e:	f7fd ff0c 	bl	800998a <dwt_xfer3xxx>
 800bb72:	2203      	movs	r2, #3
 800bb74:	2144      	movs	r1, #68	; 0x44
 800bb76:	4628      	mov	r0, r5
 800bb78:	f7fd ffb7 	bl	8009aea <dwt_read8bitoffsetreg>
 800bb7c:	f010 0f08 	tst.w	r0, #8
 800bb80:	d125      	bne.n	800bbce <ull_rxenable+0xa6>
 800bb82:	2000      	movs	r0, #0
 800bb84:	b003      	add	sp, #12
 800bb86:	bd30      	pop	{r4, r5, pc}
 800bb88:	2302      	movs	r3, #2
 800bb8a:	9301      	str	r3, [sp, #4]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	9200      	str	r2, [sp, #0]
 800bb90:	4613      	mov	r3, r2
 800bb92:	210a      	movs	r1, #10
 800bb94:	f7fd fef9 	bl	800998a <dwt_xfer3xxx>
 800bb98:	e7eb      	b.n	800bb72 <ull_rxenable+0x4a>
 800bb9a:	2100      	movs	r1, #0
 800bb9c:	f7fe fc07 	bl	800a3ae <_dwt_adjust_delaytime>
 800bba0:	2302      	movs	r3, #2
 800bba2:	9301      	str	r3, [sp, #4]
 800bba4:	2200      	movs	r2, #0
 800bba6:	9200      	str	r2, [sp, #0]
 800bba8:	4613      	mov	r3, r2
 800bbaa:	2108      	movs	r1, #8
 800bbac:	4628      	mov	r0, r5
 800bbae:	f7fd feec 	bl	800998a <dwt_xfer3xxx>
 800bbb2:	e7de      	b.n	800bb72 <ull_rxenable+0x4a>
 800bbb4:	2101      	movs	r1, #1
 800bbb6:	f7fe fbfa 	bl	800a3ae <_dwt_adjust_delaytime>
 800bbba:	2302      	movs	r3, #2
 800bbbc:	9301      	str	r3, [sp, #4]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	9200      	str	r2, [sp, #0]
 800bbc2:	4613      	mov	r3, r2
 800bbc4:	2106      	movs	r1, #6
 800bbc6:	4628      	mov	r0, r5
 800bbc8:	f7fd fedf 	bl	800998a <dwt_xfer3xxx>
 800bbcc:	e7d1      	b.n	800bb72 <ull_rxenable+0x4a>
 800bbce:	2302      	movs	r3, #2
 800bbd0:	9301      	str	r3, [sp, #4]
 800bbd2:	2100      	movs	r1, #0
 800bbd4:	9100      	str	r1, [sp, #0]
 800bbd6:	460b      	mov	r3, r1
 800bbd8:	460a      	mov	r2, r1
 800bbda:	4628      	mov	r0, r5
 800bbdc:	f7fd fed5 	bl	800998a <dwt_xfer3xxx>
 800bbe0:	f014 0f02 	tst.w	r4, #2
 800bbe4:	d002      	beq.n	800bbec <ull_rxenable+0xc4>
 800bbe6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bbea:	e7cb      	b.n	800bb84 <ull_rxenable+0x5c>
 800bbec:	2102      	movs	r1, #2
 800bbee:	9101      	str	r1, [sp, #4]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	9200      	str	r2, [sp, #0]
 800bbf4:	4613      	mov	r3, r2
 800bbf6:	4628      	mov	r0, r5
 800bbf8:	f7fd fec7 	bl	800998a <dwt_xfer3xxx>
 800bbfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc00:	e7c0      	b.n	800bb84 <ull_rxenable+0x5c>
 800bc02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc06:	e7bd      	b.n	800bb84 <ull_rxenable+0x5c>

0800bc08 <ull_softreset_no_sema_fcmd>:
 800bc08:	b570      	push	{r4, r5, r6, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	4606      	mov	r6, r0
 800bc0e:	2502      	movs	r5, #2
 800bc10:	9501      	str	r5, [sp, #4]
 800bc12:	2400      	movs	r4, #0
 800bc14:	9400      	str	r4, [sp, #0]
 800bc16:	4623      	mov	r3, r4
 800bc18:	4622      	mov	r2, r4
 800bc1a:	2119      	movs	r1, #25
 800bc1c:	f7fd feb5 	bl	800998a <dwt_xfer3xxx>
 800bc20:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800bc22:	739c      	strb	r4, [r3, #14]
 800bc24:	821d      	strh	r5, [r3, #16]
 800bc26:	751c      	strb	r4, [r3, #20]
 800bc28:	755c      	strb	r4, [r3, #21]
 800bc2a:	73dc      	strb	r4, [r3, #15]
 800bc2c:	b002      	add	sp, #8
 800bc2e:	bd70      	pop	{r4, r5, r6, pc}

0800bc30 <ull_softreset_fcmd>:
 800bc30:	b570      	push	{r4, r5, r6, lr}
 800bc32:	b082      	sub	sp, #8
 800bc34:	4606      	mov	r6, r0
 800bc36:	2502      	movs	r5, #2
 800bc38:	9501      	str	r5, [sp, #4]
 800bc3a:	2400      	movs	r4, #0
 800bc3c:	9400      	str	r4, [sp, #0]
 800bc3e:	4623      	mov	r3, r4
 800bc40:	4622      	mov	r2, r4
 800bc42:	2118      	movs	r1, #24
 800bc44:	f7fd fea1 	bl	800998a <dwt_xfer3xxx>
 800bc48:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800bc4a:	739c      	strb	r4, [r3, #14]
 800bc4c:	821d      	strh	r5, [r3, #16]
 800bc4e:	751c      	strb	r4, [r3, #20]
 800bc50:	755c      	strb	r4, [r3, #21]
 800bc52:	73dc      	strb	r4, [r3, #15]
 800bc54:	b002      	add	sp, #8
 800bc56:	bd70      	pop	{r4, r5, r6, pc}

0800bc58 <dwt_ioctl>:
 800bc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc5c:	b091      	sub	sp, #68	; 0x44
 800bc5e:	4606      	mov	r6, r0
 800bc60:	4615      	mov	r5, r2
 800bc62:	461c      	mov	r4, r3
 800bc64:	299c      	cmp	r1, #156	; 0x9c
 800bc66:	f200 809f 	bhi.w	800bda8 <dwt_ioctl+0x150>
 800bc6a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800bc6e:	0a54      	.short	0x0a54
 800bc70:	00a30a5f 	.word	0x00a30a5f
 800bc74:	00c000a7 	.word	0x00c000a7
 800bc78:	0192014c 	.word	0x0192014c
 800bc7c:	0156016f 	.word	0x0156016f
 800bc80:	01ad01a2 	.word	0x01ad01a2
 800bc84:	01bd01b5 	.word	0x01bd01b5
 800bc88:	01cd01c5 	.word	0x01cd01c5
 800bc8c:	01d901d5 	.word	0x01d901d5
 800bc90:	027201e1 	.word	0x027201e1
 800bc94:	02850280 	.word	0x02850280
 800bc98:	0294028f 	.word	0x0294028f
 800bc9c:	02a20299 	.word	0x02a20299
 800bca0:	02dd02a7 	.word	0x02dd02a7
 800bca4:	030502fa 	.word	0x030502fa
 800bca8:	031a0310 	.word	0x031a0310
 800bcac:	03480352 	.word	0x03480352
 800bcb0:	0324033e 	.word	0x0324033e
 800bcb4:	03810331 	.word	0x03810331
 800bcb8:	022f01fc 	.word	0x022f01fc
 800bcbc:	0245023d 	.word	0x0245023d
 800bcc0:	097d0259 	.word	0x097d0259
 800bcc4:	03610982 	.word	0x03610982
 800bcc8:	03a3039f 	.word	0x03a3039f
 800bccc:	03b103ac 	.word	0x03b103ac
 800bcd0:	03e503db 	.word	0x03e503db
 800bcd4:	041703ed 	.word	0x041703ed
 800bcd8:	042e0423 	.word	0x042e0423
 800bcdc:	04390357 	.word	0x04390357
 800bce0:	04540442 	.word	0x04540442
 800bce4:	047e046d 	.word	0x047e046d
 800bce8:	04ca04c0 	.word	0x04ca04c0
 800bcec:	04ff04f0 	.word	0x04ff04f0
 800bcf0:	0508051a 	.word	0x0508051a
 800bcf4:	056a0524 	.word	0x056a0524
 800bcf8:	05a20582 	.word	0x05a20582
 800bcfc:	05e505d1 	.word	0x05e505d1
 800bd00:	060a05ee 	.word	0x060a05ee
 800bd04:	074305f7 	.word	0x074305f7
 800bd08:	07d30785 	.word	0x07d30785
 800bd0c:	07e407d9 	.word	0x07e407d9
 800bd10:	081d07fd 	.word	0x081d07fd
 800bd14:	08310827 	.word	0x08310827
 800bd18:	0868085f 	.word	0x0868085f
 800bd1c:	0877086e 	.word	0x0877086e
 800bd20:	08910884 	.word	0x08910884
 800bd24:	08a4089b 	.word	0x08a4089b
 800bd28:	08b808ad 	.word	0x08b808ad
 800bd2c:	08c908c3 	.word	0x08c908c3
 800bd30:	08f708ec 	.word	0x08f708ec
 800bd34:	090d0902 	.word	0x090d0902
 800bd38:	0959094e 	.word	0x0959094e
 800bd3c:	09880972 	.word	0x09880972
 800bd40:	0a0709fd 	.word	0x0a0709fd
 800bd44:	0a670a12 	.word	0x0a670a12
 800bd48:	0a490a1c 	.word	0x0a490a1c
 800bd4c:	09c60777 	.word	0x09c60777
 800bd50:	0ad509e7 	.word	0x0ad509e7
 800bd54:	0a740aca 	.word	0x0a740aca
 800bd58:	0a8a0a7f 	.word	0x0a8a0a7f
 800bd5c:	0aa00a95 	.word	0x0aa00a95
 800bd60:	0ab60aab 	.word	0x0ab60aab
 800bd64:	0cb50abf 	.word	0x0cb50abf
 800bd68:	0d2a0cef 	.word	0x0d2a0cef
 800bd6c:	0df90d4d 	.word	0x0df90d4d
 800bd70:	0afd0e0e 	.word	0x0afd0e0e
 800bd74:	0bf40bc1 	.word	0x0bf40bc1
 800bd78:	0c040bff 	.word	0x0c040bff
 800bd7c:	0c140c09 	.word	0x0c140c09
 800bd80:	0c320c27 	.word	0x0c320c27
 800bd84:	0c5c0c47 	.word	0x0c5c0c47
 800bd88:	009d0c98 	.word	0x009d0c98
 800bd8c:	009d009d 	.word	0x009d009d
 800bd90:	009d009d 	.word	0x009d009d
 800bd94:	009d009d 	.word	0x009d009d
 800bd98:	0d64009d 	.word	0x0d64009d
 800bd9c:	0ec20d75 	.word	0x0ec20d75
 800bda0:	0db40dbf 	.word	0x0db40dbf
 800bda4:	0dca0dd3 	.word	0x0dca0dd3
 800bda8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800bdac:	4628      	mov	r0, r5
 800bdae:	b011      	add	sp, #68	; 0x44
 800bdb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdb4:	6843      	ldr	r3, [r0, #4]
 800bdb6:	4798      	blx	r3
 800bdb8:	2500      	movs	r5, #0
 800bdba:	e7f7      	b.n	800bdac <dwt_ioctl+0x154>
 800bdbc:	2202      	movs	r2, #2
 800bdbe:	49b4      	ldr	r1, [pc, #720]	; (800c090 <dwt_ioctl+0x438>)
 800bdc0:	f7fd fe93 	bl	8009aea <dwt_read8bitoffsetreg>
 800bdc4:	2803      	cmp	r0, #3
 800bdc6:	d801      	bhi.n	800bdcc <dwt_ioctl+0x174>
 800bdc8:	2500      	movs	r5, #0
 800bdca:	e7ef      	b.n	800bdac <dwt_ioctl+0x154>
 800bdcc:	f7f5 fb9c 	bl	8001508 <decamutexon>
 800bdd0:	4604      	mov	r4, r0
 800bdd2:	2302      	movs	r3, #2
 800bdd4:	9301      	str	r3, [sp, #4]
 800bdd6:	2500      	movs	r5, #0
 800bdd8:	9500      	str	r5, [sp, #0]
 800bdda:	462b      	mov	r3, r5
 800bddc:	462a      	mov	r2, r5
 800bdde:	4629      	mov	r1, r5
 800bde0:	4630      	mov	r0, r6
 800bde2:	f7fd fdd2 	bl	800998a <dwt_xfer3xxx>
 800bde6:	4620      	mov	r0, r4
 800bde8:	f7f5 fb9f 	bl	800152a <decamutexoff>
 800bdec:	e7de      	b.n	800bdac <dwt_ioctl+0x154>
 800bdee:	2c00      	cmp	r4, #0
 800bdf0:	f001 8602 	beq.w	800d9f8 <dwt_ioctl+0x1da0>
 800bdf4:	7824      	ldrb	r4, [r4, #0]
 800bdf6:	f014 0f1d 	tst.w	r4, #29
 800bdfa:	d061      	beq.n	800bec0 <dwt_ioctl+0x268>
 800bdfc:	f014 0f01 	tst.w	r4, #1
 800be00:	d023      	beq.n	800be4a <dwt_ioctl+0x1f2>
 800be02:	f014 0f02 	tst.w	r4, #2
 800be06:	f04f 0302 	mov.w	r3, #2
 800be0a:	9301      	str	r3, [sp, #4]
 800be0c:	f04f 0200 	mov.w	r2, #0
 800be10:	9200      	str	r2, [sp, #0]
 800be12:	4613      	mov	r3, r2
 800be14:	bf14      	ite	ne
 800be16:	210d      	movne	r1, #13
 800be18:	2103      	moveq	r1, #3
 800be1a:	f7fd fdb6 	bl	800998a <dwt_xfer3xxx>
 800be1e:	2203      	movs	r2, #3
 800be20:	2144      	movs	r1, #68	; 0x44
 800be22:	4630      	mov	r0, r6
 800be24:	f7fd fe61 	bl	8009aea <dwt_read8bitoffsetreg>
 800be28:	f010 0f08 	tst.w	r0, #8
 800be2c:	bf08      	it	eq
 800be2e:	2500      	moveq	r5, #0
 800be30:	d0bc      	beq.n	800bdac <dwt_ioctl+0x154>
 800be32:	2302      	movs	r3, #2
 800be34:	9301      	str	r3, [sp, #4]
 800be36:	2100      	movs	r1, #0
 800be38:	9100      	str	r1, [sp, #0]
 800be3a:	460b      	mov	r3, r1
 800be3c:	460a      	mov	r2, r1
 800be3e:	4630      	mov	r0, r6
 800be40:	f7fd fda3 	bl	800998a <dwt_xfer3xxx>
 800be44:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800be48:	e7b0      	b.n	800bdac <dwt_ioctl+0x154>
 800be4a:	f014 0f08 	tst.w	r4, #8
 800be4e:	d111      	bne.n	800be74 <dwt_ioctl+0x21c>
 800be50:	f014 0f10 	tst.w	r4, #16
 800be54:	d121      	bne.n	800be9a <dwt_ioctl+0x242>
 800be56:	f014 0f02 	tst.w	r4, #2
 800be5a:	f04f 0302 	mov.w	r3, #2
 800be5e:	9301      	str	r3, [sp, #4]
 800be60:	f04f 0200 	mov.w	r2, #0
 800be64:	9200      	str	r2, [sp, #0]
 800be66:	4613      	mov	r3, r2
 800be68:	bf14      	ite	ne
 800be6a:	2110      	movne	r1, #16
 800be6c:	2109      	moveq	r1, #9
 800be6e:	f7fd fd8c 	bl	800998a <dwt_xfer3xxx>
 800be72:	e7d4      	b.n	800be1e <dwt_ioctl+0x1c6>
 800be74:	2100      	movs	r1, #0
 800be76:	f7fe fa9a 	bl	800a3ae <_dwt_adjust_delaytime>
 800be7a:	f014 0f02 	tst.w	r4, #2
 800be7e:	f04f 0302 	mov.w	r3, #2
 800be82:	9301      	str	r3, [sp, #4]
 800be84:	f04f 0200 	mov.w	r2, #0
 800be88:	9200      	str	r2, [sp, #0]
 800be8a:	4613      	mov	r3, r2
 800be8c:	bf14      	ite	ne
 800be8e:	210f      	movne	r1, #15
 800be90:	2107      	moveq	r1, #7
 800be92:	4630      	mov	r0, r6
 800be94:	f7fd fd79 	bl	800998a <dwt_xfer3xxx>
 800be98:	e7c1      	b.n	800be1e <dwt_ioctl+0x1c6>
 800be9a:	2101      	movs	r1, #1
 800be9c:	f7fe fa87 	bl	800a3ae <_dwt_adjust_delaytime>
 800bea0:	f014 0f02 	tst.w	r4, #2
 800bea4:	f04f 0302 	mov.w	r3, #2
 800bea8:	9301      	str	r3, [sp, #4]
 800beaa:	f04f 0200 	mov.w	r2, #0
 800beae:	9200      	str	r2, [sp, #0]
 800beb0:	4613      	mov	r3, r2
 800beb2:	bf14      	ite	ne
 800beb4:	210e      	movne	r1, #14
 800beb6:	2105      	moveq	r1, #5
 800beb8:	4630      	mov	r0, r6
 800beba:	f7fd fd66 	bl	800998a <dwt_xfer3xxx>
 800bebe:	e7ae      	b.n	800be1e <dwt_ioctl+0x1c6>
 800bec0:	f014 0f20 	tst.w	r4, #32
 800bec4:	d00f      	beq.n	800bee6 <dwt_ioctl+0x28e>
 800bec6:	f014 0f02 	tst.w	r4, #2
 800beca:	f04f 0302 	mov.w	r3, #2
 800bece:	9301      	str	r3, [sp, #4]
 800bed0:	f04f 0500 	mov.w	r5, #0
 800bed4:	9500      	str	r5, [sp, #0]
 800bed6:	462b      	mov	r3, r5
 800bed8:	462a      	mov	r2, r5
 800beda:	bf14      	ite	ne
 800bedc:	2111      	movne	r1, #17
 800bede:	210b      	moveq	r1, #11
 800bee0:	f7fd fd53 	bl	800998a <dwt_xfer3xxx>
 800bee4:	e762      	b.n	800bdac <dwt_ioctl+0x154>
 800bee6:	f014 0f02 	tst.w	r4, #2
 800beea:	f04f 0302 	mov.w	r3, #2
 800beee:	9301      	str	r3, [sp, #4]
 800bef0:	f04f 0500 	mov.w	r5, #0
 800bef4:	9500      	str	r5, [sp, #0]
 800bef6:	462b      	mov	r3, r5
 800bef8:	462a      	mov	r2, r5
 800befa:	bf14      	ite	ne
 800befc:	210c      	movne	r1, #12
 800befe:	2101      	moveq	r1, #1
 800bf00:	f7fd fd43 	bl	800998a <dwt_xfer3xxx>
 800bf04:	e752      	b.n	800bdac <dwt_ioctl+0x154>
 800bf06:	2c00      	cmp	r4, #0
 800bf08:	f001 8579 	beq.w	800d9fe <dwt_ioctl+0x1da6>
 800bf0c:	6823      	ldr	r3, [r4, #0]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	2128      	movs	r1, #40	; 0x28
 800bf12:	f7fe fa37 	bl	800a384 <dwt_write32bitoffsetreg>
 800bf16:	2500      	movs	r5, #0
 800bf18:	e748      	b.n	800bdac <dwt_ioctl+0x154>
 800bf1a:	6823      	ldr	r3, [r4, #0]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	495d      	ldr	r1, [pc, #372]	; (800c094 <dwt_ioctl+0x43c>)
 800bf20:	f7fe fa30 	bl	800a384 <dwt_write32bitoffsetreg>
 800bf24:	6863      	ldr	r3, [r4, #4]
 800bf26:	2200      	movs	r2, #0
 800bf28:	495b      	ldr	r1, [pc, #364]	; (800c098 <dwt_ioctl+0x440>)
 800bf2a:	4630      	mov	r0, r6
 800bf2c:	f7fe fa2a 	bl	800a384 <dwt_write32bitoffsetreg>
 800bf30:	68a3      	ldr	r3, [r4, #8]
 800bf32:	2200      	movs	r2, #0
 800bf34:	4959      	ldr	r1, [pc, #356]	; (800c09c <dwt_ioctl+0x444>)
 800bf36:	4630      	mov	r0, r6
 800bf38:	f7fe fa24 	bl	800a384 <dwt_write32bitoffsetreg>
 800bf3c:	68e3      	ldr	r3, [r4, #12]
 800bf3e:	2200      	movs	r2, #0
 800bf40:	4957      	ldr	r1, [pc, #348]	; (800c0a0 <dwt_ioctl+0x448>)
 800bf42:	4630      	mov	r0, r6
 800bf44:	f7fe fa1e 	bl	800a384 <dwt_write32bitoffsetreg>
 800bf48:	2500      	movs	r5, #0
 800bf4a:	e72f      	b.n	800bdac <dwt_ioctl+0x154>
 800bf4c:	2c00      	cmp	r4, #0
 800bf4e:	f001 8559 	beq.w	800da04 <dwt_ioctl+0x1dac>
 800bf52:	8823      	ldrh	r3, [r4, #0]
 800bf54:	6865      	ldr	r5, [r4, #4]
 800bf56:	2d03      	cmp	r5, #3
 800bf58:	f201 8557 	bhi.w	800da0a <dwt_ioctl+0x1db2>
 800bf5c:	e8df f005 	tbb	[pc, r5]
 800bf60:	130d0702 	.word	0x130d0702
 800bf64:	2200      	movs	r2, #0
 800bf66:	494f      	ldr	r1, [pc, #316]	; (800c0a4 <dwt_ioctl+0x44c>)
 800bf68:	f7fe f9af 	bl	800a2ca <dwt_write16bitoffsetreg>
 800bf6c:	e71e      	b.n	800bdac <dwt_ioctl+0x154>
 800bf6e:	2202      	movs	r2, #2
 800bf70:	494c      	ldr	r1, [pc, #304]	; (800c0a4 <dwt_ioctl+0x44c>)
 800bf72:	f7fe f9aa 	bl	800a2ca <dwt_write16bitoffsetreg>
 800bf76:	2500      	movs	r5, #0
 800bf78:	e718      	b.n	800bdac <dwt_ioctl+0x154>
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	494a      	ldr	r1, [pc, #296]	; (800c0a8 <dwt_ioctl+0x450>)
 800bf7e:	f7fe f9a4 	bl	800a2ca <dwt_write16bitoffsetreg>
 800bf82:	2500      	movs	r5, #0
 800bf84:	e712      	b.n	800bdac <dwt_ioctl+0x154>
 800bf86:	2202      	movs	r2, #2
 800bf88:	4947      	ldr	r1, [pc, #284]	; (800c0a8 <dwt_ioctl+0x450>)
 800bf8a:	f7fe f99e 	bl	800a2ca <dwt_write16bitoffsetreg>
 800bf8e:	2500      	movs	r5, #0
 800bf90:	e70c      	b.n	800bdac <dwt_ioctl+0x154>
 800bf92:	2c00      	cmp	r4, #0
 800bf94:	f001 853c 	beq.w	800da10 <dwt_ioctl+0x1db8>
 800bf98:	7823      	ldrb	r3, [r4, #0]
 800bf9a:	005b      	lsls	r3, r3, #1
 800bf9c:	f003 0306 	and.w	r3, r3, #6
 800bfa0:	9300      	str	r3, [sp, #0]
 800bfa2:	f06f 0306 	mvn.w	r3, #6
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	4940      	ldr	r1, [pc, #256]	; (800c0ac <dwt_ioctl+0x454>)
 800bfaa:	f7fe fe3d 	bl	800ac28 <dwt_modify32bitoffsetreg>
 800bfae:	2500      	movs	r5, #0
 800bfb0:	e6fc      	b.n	800bdac <dwt_ioctl+0x154>
 800bfb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bfb6:	9300      	str	r3, [sp, #0]
 800bfb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	493c      	ldr	r1, [pc, #240]	; (800c0b0 <dwt_ioctl+0x458>)
 800bfc0:	f7fe fe32 	bl	800ac28 <dwt_modify32bitoffsetreg>
 800bfc4:	2500      	movs	r5, #0
 800bfc6:	e6f1      	b.n	800bdac <dwt_ioctl+0x154>
 800bfc8:	2c00      	cmp	r4, #0
 800bfca:	f001 8524 	beq.w	800da16 <dwt_ioctl+0x1dbe>
 800bfce:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800bfd0:	7b1b      	ldrb	r3, [r3, #12]
 800bfd2:	7023      	strb	r3, [r4, #0]
 800bfd4:	2500      	movs	r5, #0
 800bfd6:	e6e9      	b.n	800bdac <dwt_ioctl+0x154>
 800bfd8:	2c00      	cmp	r4, #0
 800bfda:	f001 851f 	beq.w	800da1c <dwt_ioctl+0x1dc4>
 800bfde:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800bfe0:	7a5b      	ldrb	r3, [r3, #9]
 800bfe2:	7023      	strb	r3, [r4, #0]
 800bfe4:	2500      	movs	r5, #0
 800bfe6:	e6e1      	b.n	800bdac <dwt_ioctl+0x154>
 800bfe8:	2c00      	cmp	r4, #0
 800bfea:	f001 851a 	beq.w	800da22 <dwt_ioctl+0x1dca>
 800bfee:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800bff0:	7a9b      	ldrb	r3, [r3, #10]
 800bff2:	7023      	strb	r3, [r4, #0]
 800bff4:	2500      	movs	r5, #0
 800bff6:	e6d9      	b.n	800bdac <dwt_ioctl+0x154>
 800bff8:	2c00      	cmp	r4, #0
 800bffa:	f001 8515 	beq.w	800da28 <dwt_ioctl+0x1dd0>
 800bffe:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	6023      	str	r3, [r4, #0]
 800c004:	2500      	movs	r5, #0
 800c006:	e6d1      	b.n	800bdac <dwt_ioctl+0x154>
 800c008:	2c00      	cmp	r4, #0
 800c00a:	f001 8510 	beq.w	800da2e <dwt_ioctl+0x1dd6>
 800c00e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	6023      	str	r3, [r4, #0]
 800c014:	2500      	movs	r5, #0
 800c016:	e6c9      	b.n	800bdac <dwt_ioctl+0x154>
 800c018:	f7fe fc72 	bl	800a900 <ull_signal_rx_buff_free>
 800c01c:	2500      	movs	r5, #0
 800c01e:	e6c5      	b.n	800bdac <dwt_ioctl+0x154>
 800c020:	2c00      	cmp	r4, #0
 800c022:	f001 8507 	beq.w	800da34 <dwt_ioctl+0x1ddc>
 800c026:	6821      	ldr	r1, [r4, #0]
 800c028:	f7fe f9e7 	bl	800a3fa <ull_setrxaftertxdelay>
 800c02c:	2500      	movs	r5, #0
 800c02e:	e6bd      	b.n	800bdac <dwt_ioctl+0x154>
 800c030:	2c00      	cmp	r4, #0
 800c032:	f001 8502 	beq.w	800da3a <dwt_ioctl+0x1de2>
 800c036:	7825      	ldrb	r5, [r4, #0]
 800c038:	b15d      	cbz	r5, 800c052 <dwt_ioctl+0x3fa>
 800c03a:	6864      	ldr	r4, [r4, #4]
 800c03c:	2340      	movs	r3, #64	; 0x40
 800c03e:	9300      	str	r3, [sp, #0]
 800c040:	23ff      	movs	r3, #255	; 0xff
 800c042:	2200      	movs	r2, #0
 800c044:	2110      	movs	r1, #16
 800c046:	f7fe ff61 	bl	800af0c <dwt_modify8bitoffsetreg>
 800c04a:	2d02      	cmp	r5, #2
 800c04c:	d107      	bne.n	800c05e <dwt_ioctl+0x406>
 800c04e:	60f4      	str	r4, [r6, #12]
 800c050:	e005      	b.n	800c05e <dwt_ioctl+0x406>
 800c052:	2200      	movs	r2, #0
 800c054:	9200      	str	r2, [sp, #0]
 800c056:	23bf      	movs	r3, #191	; 0xbf
 800c058:	2110      	movs	r1, #16
 800c05a:	f7fe ff57 	bl	800af0c <dwt_modify8bitoffsetreg>
 800c05e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800c060:	751d      	strb	r5, [r3, #20]
 800c062:	2500      	movs	r5, #0
 800c064:	e6a2      	b.n	800bdac <dwt_ioctl+0x154>
 800c066:	2c00      	cmp	r4, #0
 800c068:	f001 84ea 	beq.w	800da40 <dwt_ioctl+0x1de8>
 800c06c:	6865      	ldr	r5, [r4, #4]
 800c06e:	7823      	ldrb	r3, [r4, #0]
 800c070:	2203      	movs	r2, #3
 800c072:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800c076:	f7fe fb13 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800c07a:	b9dd      	cbnz	r5, 800c0b4 <dwt_ioctl+0x45c>
 800c07c:	2200      	movs	r2, #0
 800c07e:	9200      	str	r2, [sp, #0]
 800c080:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800c084:	2110      	movs	r1, #16
 800c086:	4630      	mov	r0, r6
 800c088:	f7ff f95c 	bl	800b344 <dwt_modify16bitoffsetreg>
 800c08c:	e68e      	b.n	800bdac <dwt_ioctl+0x154>
 800c08e:	bf00      	nop
 800c090:	000f0030 	.word	0x000f0030
 800c094:	00010054 	.word	0x00010054
 800c098:	00010058 	.word	0x00010058
 800c09c:	0001005c 	.word	0x0001005c
 800c0a0:	00010060 	.word	0x00010060
 800c0a4:	0001000c 	.word	0x0001000c
 800c0a8:	00010010 	.word	0x00010010
 800c0ac:	00010008 	.word	0x00010008
 800c0b0:	00110004 	.word	0x00110004
 800c0b4:	f44f 2381 	mov.w	r3, #264192	; 0x40800
 800c0b8:	9300      	str	r3, [sp, #0]
 800c0ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c0be:	2200      	movs	r2, #0
 800c0c0:	2110      	movs	r1, #16
 800c0c2:	4630      	mov	r0, r6
 800c0c4:	f7fe fdb0 	bl	800ac28 <dwt_modify32bitoffsetreg>
 800c0c8:	2500      	movs	r5, #0
 800c0ca:	e66f      	b.n	800bdac <dwt_ioctl+0x154>
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	4611      	mov	r1, r2
 800c0d0:	f7fd fce3 	bl	8009a9a <dwt_read32bitoffsetreg>
 800c0d4:	68b2      	ldr	r2, [r6, #8]
 800c0d6:	6813      	ldr	r3, [r2, #0]
 800c0d8:	4043      	eors	r3, r0
 800c0da:	6852      	ldr	r2, [r2, #4]
 800c0dc:	4213      	tst	r3, r2
 800c0de:	bf14      	ite	ne
 800c0e0:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800c0e4:	2500      	moveq	r5, #0
 800c0e6:	e661      	b.n	800bdac <dwt_ioctl+0x154>
 800c0e8:	2c00      	cmp	r4, #0
 800c0ea:	f001 84ac 	beq.w	800da46 <dwt_ioctl+0x1dee>
 800c0ee:	7821      	ldrb	r1, [r4, #0]
 800c0f0:	f7fe ff20 	bl	800af34 <ull_configciadiag>
 800c0f4:	2500      	movs	r5, #0
 800c0f6:	e659      	b.n	800bdac <dwt_ioctl+0x154>
 800c0f8:	b93a      	cbnz	r2, 800c10a <dwt_ioctl+0x4b2>
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	9200      	str	r2, [sp, #0]
 800c0fe:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800c102:	49b8      	ldr	r1, [pc, #736]	; (800c3e4 <dwt_ioctl+0x78c>)
 800c104:	f7ff f91e 	bl	800b344 <dwt_modify16bitoffsetreg>
 800c108:	e650      	b.n	800bdac <dwt_ioctl+0x154>
 800c10a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c10e:	9300      	str	r3, [sp, #0]
 800c110:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c114:	2200      	movs	r2, #0
 800c116:	49b3      	ldr	r1, [pc, #716]	; (800c3e4 <dwt_ioctl+0x78c>)
 800c118:	f7ff f914 	bl	800b344 <dwt_modify16bitoffsetreg>
 800c11c:	2500      	movs	r5, #0
 800c11e:	e645      	b.n	800bdac <dwt_ioctl+0x154>
 800c120:	f002 0201 	and.w	r2, r2, #1
 800c124:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c128:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 800c12c:	2a00      	cmp	r2, #0
 800c12e:	bf08      	it	eq
 800c130:	460b      	moveq	r3, r1
 800c132:	02d2      	lsls	r2, r2, #11
 800c134:	f015 0f02 	tst.w	r5, #2
 800c138:	bf12      	itee	ne
 800c13a:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 800c13e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c142:	b29b      	uxtheq	r3, r3
 800c144:	9200      	str	r2, [sp, #0]
 800c146:	2200      	movs	r2, #0
 800c148:	49a6      	ldr	r1, [pc, #664]	; (800c3e4 <dwt_ioctl+0x78c>)
 800c14a:	f7ff f8fb 	bl	800b344 <dwt_modify16bitoffsetreg>
 800c14e:	2500      	movs	r5, #0
 800c150:	e62c      	b.n	800bdac <dwt_ioctl+0x154>
 800c152:	b92a      	cbnz	r2, 800c160 <dwt_ioctl+0x508>
 800c154:	4ba4      	ldr	r3, [pc, #656]	; (800c3e8 <dwt_ioctl+0x790>)
 800c156:	2202      	movs	r2, #2
 800c158:	49a4      	ldr	r1, [pc, #656]	; (800c3ec <dwt_ioctl+0x794>)
 800c15a:	f7fe f913 	bl	800a384 <dwt_write32bitoffsetreg>
 800c15e:	e625      	b.n	800bdac <dwt_ioctl+0x154>
 800c160:	4ba3      	ldr	r3, [pc, #652]	; (800c3f0 <dwt_ioctl+0x798>)
 800c162:	2202      	movs	r2, #2
 800c164:	49a1      	ldr	r1, [pc, #644]	; (800c3ec <dwt_ioctl+0x794>)
 800c166:	f7fe f90d 	bl	800a384 <dwt_write32bitoffsetreg>
 800c16a:	2500      	movs	r5, #0
 800c16c:	e61e      	b.n	800bdac <dwt_ioctl+0x154>
 800c16e:	4611      	mov	r1, r2
 800c170:	f7fe f957 	bl	800a422 <ull_setlnapamode>
 800c174:	2500      	movs	r5, #0
 800c176:	e619      	b.n	800bdac <dwt_ioctl+0x154>
 800c178:	2c00      	cmp	r4, #0
 800c17a:	f001 8467 	beq.w	800da4c <dwt_ioctl+0x1df4>
 800c17e:	2200      	movs	r2, #0
 800c180:	499c      	ldr	r1, [pc, #624]	; (800c3f4 <dwt_ioctl+0x79c>)
 800c182:	f7fd fcb2 	bl	8009aea <dwt_read8bitoffsetreg>
 800c186:	7020      	strb	r0, [r4, #0]
 800c188:	2500      	movs	r5, #0
 800c18a:	e60f      	b.n	800bdac <dwt_ioctl+0x154>
 800c18c:	4621      	mov	r1, r4
 800c18e:	f7fe f969 	bl	800a464 <ull_configurestskey>
 800c192:	2500      	movs	r5, #0
 800c194:	e60a      	b.n	800bdac <dwt_ioctl+0x154>
 800c196:	4621      	mov	r1, r4
 800c198:	f7fe f988 	bl	800a4ac <ull_configurestsiv>
 800c19c:	2500      	movs	r5, #0
 800c19e:	e605      	b.n	800bdac <dwt_ioctl+0x154>
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	9300      	str	r3, [sp, #0]
 800c1a4:	23ff      	movs	r3, #255	; 0xff
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	4993      	ldr	r1, [pc, #588]	; (800c3f8 <dwt_ioctl+0x7a0>)
 800c1aa:	f7fe feaf 	bl	800af0c <dwt_modify8bitoffsetreg>
 800c1ae:	2500      	movs	r5, #0
 800c1b0:	e5fc      	b.n	800bdac <dwt_ioctl+0x154>
 800c1b2:	4611      	mov	r1, r2
 800c1b4:	f7fe f99e 	bl	800a4f4 <ull_configmrxlut>
 800c1b8:	2500      	movs	r5, #0
 800c1ba:	e5f7      	b.n	800bdac <dwt_ioctl+0x154>
 800c1bc:	2318      	movs	r3, #24
 800c1be:	2200      	movs	r2, #0
 800c1c0:	498e      	ldr	r1, [pc, #568]	; (800c3fc <dwt_ioctl+0x7a4>)
 800c1c2:	f7fe f8df 	bl	800a384 <dwt_write32bitoffsetreg>
 800c1c6:	23e8      	movs	r3, #232	; 0xe8
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	498d      	ldr	r1, [pc, #564]	; (800c400 <dwt_ioctl+0x7a8>)
 800c1cc:	4630      	mov	r0, r6
 800c1ce:	f7fe f8d9 	bl	800a384 <dwt_write32bitoffsetreg>
 800c1d2:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800c1d4:	7d9b      	ldrb	r3, [r3, #22]
 800c1d6:	085b      	lsrs	r3, r3, #1
 800c1d8:	d01a      	beq.n	800c210 <dwt_ioctl+0x5b8>
 800c1da:	2200      	movs	r2, #0
 800c1dc:	4989      	ldr	r1, [pc, #548]	; (800c404 <dwt_ioctl+0x7ac>)
 800c1de:	4630      	mov	r0, r6
 800c1e0:	f7fd fc71 	bl	8009ac6 <dwt_read16bitoffsetreg>
 800c1e4:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 800c1e8:	3b09      	subs	r3, #9
 800c1ea:	2b0f      	cmp	r3, #15
 800c1ec:	f201 8431 	bhi.w	800da52 <dwt_ioctl+0x1dfa>
 800c1f0:	f000 0001 	and.w	r0, r0, #1
 800c1f4:	2800      	cmp	r0, #0
 800c1f6:	bf0c      	ite	eq
 800c1f8:	2105      	moveq	r1, #5
 800c1fa:	2109      	movne	r1, #9
 800c1fc:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800c1fe:	7a1b      	ldrb	r3, [r3, #8]
 800c200:	2b01      	cmp	r3, #1
 800c202:	f001 8429 	beq.w	800da58 <dwt_ioctl+0x1e00>
 800c206:	4630      	mov	r0, r6
 800c208:	f7fe f974 	bl	800a4f4 <ull_configmrxlut>
 800c20c:	2500      	movs	r5, #0
 800c20e:	e5cd      	b.n	800bdac <dwt_ioctl+0x154>
 800c210:	2301      	movs	r3, #1
 800c212:	2200      	movs	r2, #0
 800c214:	497c      	ldr	r1, [pc, #496]	; (800c408 <dwt_ioctl+0x7b0>)
 800c216:	4630      	mov	r0, r6
 800c218:	f7fe fa42 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800c21c:	6d32      	ldr	r2, [r6, #80]	; 0x50
 800c21e:	7d93      	ldrb	r3, [r2, #22]
 800c220:	f043 0302 	orr.w	r3, r3, #2
 800c224:	7593      	strb	r3, [r2, #22]
 800c226:	e7d8      	b.n	800c1da <dwt_ioctl+0x582>
 800c228:	2c00      	cmp	r4, #0
 800c22a:	f001 8418 	beq.w	800da5e <dwt_ioctl+0x1e06>
 800c22e:	7824      	ldrb	r4, [r4, #0]
 800c230:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c232:	755c      	strb	r4, [r3, #21]
 800c234:	0323      	lsls	r3, r4, #12
 800c236:	f403 4330 	and.w	r3, r3, #45056	; 0xb000
 800c23a:	9300      	str	r3, [sp, #0]
 800c23c:	f644 73ff 	movw	r3, #20479	; 0x4fff
 800c240:	2200      	movs	r2, #0
 800c242:	2110      	movs	r1, #16
 800c244:	f7ff f87e 	bl	800b344 <dwt_modify16bitoffsetreg>
 800c248:	f004 0403 	and.w	r4, r4, #3
 800c24c:	2c03      	cmp	r4, #3
 800c24e:	bf0c      	ite	eq
 800c250:	4b6e      	ldreq	r3, [pc, #440]	; (800c40c <dwt_ioctl+0x7b4>)
 800c252:	4b6f      	ldrne	r3, [pc, #444]	; (800c410 <dwt_ioctl+0x7b8>)
 800c254:	2200      	movs	r2, #0
 800c256:	496f      	ldr	r1, [pc, #444]	; (800c414 <dwt_ioctl+0x7bc>)
 800c258:	4630      	mov	r0, r6
 800c25a:	f7fe f893 	bl	800a384 <dwt_write32bitoffsetreg>
 800c25e:	2500      	movs	r5, #0
 800c260:	e5a4      	b.n	800bdac <dwt_ioctl+0x154>
 800c262:	2c00      	cmp	r4, #0
 800c264:	f001 83fe 	beq.w	800da64 <dwt_ioctl+0x1e0c>
 800c268:	8823      	ldrh	r3, [r4, #0]
 800c26a:	2200      	movs	r2, #0
 800c26c:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800c270:	f7fe f82b 	bl	800a2ca <dwt_write16bitoffsetreg>
 800c274:	2500      	movs	r5, #0
 800c276:	e599      	b.n	800bdac <dwt_ioctl+0x154>
 800c278:	2c00      	cmp	r4, #0
 800c27a:	f001 83f6 	beq.w	800da6a <dwt_ioctl+0x1e12>
 800c27e:	2200      	movs	r2, #0
 800c280:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800c284:	f7fd fc1f 	bl	8009ac6 <dwt_read16bitoffsetreg>
 800c288:	8020      	strh	r0, [r4, #0]
 800c28a:	2500      	movs	r5, #0
 800c28c:	e58e      	b.n	800bdac <dwt_ioctl+0x154>
 800c28e:	2c00      	cmp	r4, #0
 800c290:	f001 83ee 	beq.w	800da70 <dwt_ioctl+0x1e18>
 800c294:	8823      	ldrh	r3, [r4, #0]
 800c296:	2200      	movs	r2, #0
 800c298:	217c      	movs	r1, #124	; 0x7c
 800c29a:	f7fe f816 	bl	800a2ca <dwt_write16bitoffsetreg>
 800c29e:	2500      	movs	r5, #0
 800c2a0:	e584      	b.n	800bdac <dwt_ioctl+0x154>
 800c2a2:	2c00      	cmp	r4, #0
 800c2a4:	f001 83e7 	beq.w	800da76 <dwt_ioctl+0x1e1e>
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	217c      	movs	r1, #124	; 0x7c
 800c2ac:	f7fd fc0b 	bl	8009ac6 <dwt_read16bitoffsetreg>
 800c2b0:	8020      	strh	r0, [r4, #0]
 800c2b2:	2500      	movs	r5, #0
 800c2b4:	e57a      	b.n	800bdac <dwt_ioctl+0x154>
 800c2b6:	2c00      	cmp	r4, #0
 800c2b8:	f001 83e0 	beq.w	800da7c <dwt_ioctl+0x1e24>
 800c2bc:	88a3      	ldrh	r3, [r4, #4]
 800c2be:	88e2      	ldrh	r2, [r4, #6]
 800c2c0:	6821      	ldr	r1, [r4, #0]
 800c2c2:	9100      	str	r1, [sp, #0]
 800c2c4:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800c2c8:	f7fd fff4 	bl	800a2b4 <dwt_writetodevice>
 800c2cc:	2500      	movs	r5, #0
 800c2ce:	e56d      	b.n	800bdac <dwt_ioctl+0x154>
 800c2d0:	2c00      	cmp	r4, #0
 800c2d2:	f001 83d6 	beq.w	800da82 <dwt_ioctl+0x1e2a>
 800c2d6:	88a3      	ldrh	r3, [r4, #4]
 800c2d8:	88e2      	ldrh	r2, [r4, #6]
 800c2da:	6821      	ldr	r1, [r4, #0]
 800c2dc:	9100      	str	r1, [sp, #0]
 800c2de:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800c2e2:	f7fd fbd0 	bl	8009a86 <dwt_readfromdevice>
 800c2e6:	2500      	movs	r5, #0
 800c2e8:	e560      	b.n	800bdac <dwt_ioctl+0x154>
 800c2ea:	2c00      	cmp	r4, #0
 800c2ec:	f001 83cc 	beq.w	800da88 <dwt_ioctl+0x1e30>
 800c2f0:	88e3      	ldrh	r3, [r4, #6]
 800c2f2:	88a2      	ldrh	r2, [r4, #4]
 800c2f4:	6821      	ldr	r1, [r4, #0]
 800c2f6:	f7fe f99d 	bl	800a634 <ull_readrxdata>
 800c2fa:	2500      	movs	r5, #0
 800c2fc:	e556      	b.n	800bdac <dwt_ioctl+0x154>
 800c2fe:	2c00      	cmp	r4, #0
 800c300:	f001 83c5 	beq.w	800da8e <dwt_ioctl+0x1e36>
 800c304:	88e3      	ldrh	r3, [r4, #6]
 800c306:	6822      	ldr	r2, [r4, #0]
 800c308:	88a1      	ldrh	r1, [r4, #4]
 800c30a:	f7fe fac7 	bl	800a89c <ull_writetxdata>
 800c30e:	2500      	movs	r5, #0
 800c310:	e54c      	b.n	800bdac <dwt_ioctl+0x154>
 800c312:	4611      	mov	r1, r2
 800c314:	f7ff fc08 	bl	800bb28 <ull_rxenable>
 800c318:	2500      	movs	r5, #0
 800c31a:	e547      	b.n	800bdac <dwt_ioctl+0x154>
 800c31c:	2c00      	cmp	r4, #0
 800c31e:	f001 83b9 	beq.w	800da94 <dwt_ioctl+0x1e3c>
 800c322:	7923      	ldrb	r3, [r4, #4]
 800c324:	8862      	ldrh	r2, [r4, #2]
 800c326:	8821      	ldrh	r1, [r4, #0]
 800c328:	f7fe fdbe 	bl	800aea8 <ull_writetxfctrl>
 800c32c:	2500      	movs	r5, #0
 800c32e:	e53d      	b.n	800bdac <dwt_ioctl+0x154>
 800c330:	2c00      	cmp	r4, #0
 800c332:	f001 83b2 	beq.w	800da9a <dwt_ioctl+0x1e42>
 800c336:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c338:	7b9b      	ldrb	r3, [r3, #14]
 800c33a:	2b01      	cmp	r3, #1
 800c33c:	d00c      	beq.n	800c358 <dwt_ioctl+0x700>
 800c33e:	2b03      	cmp	r3, #3
 800c340:	d110      	bne.n	800c364 <dwt_ioctl+0x70c>
 800c342:	220c      	movs	r2, #12
 800c344:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800c348:	f7fd fbbd 	bl	8009ac6 <dwt_read16bitoffsetreg>
 800c34c:	b200      	sxth	r0, r0
 800c34e:	f340 030c 	sbfx	r3, r0, #0, #13
 800c352:	8023      	strh	r3, [r4, #0]
 800c354:	2500      	movs	r5, #0
 800c356:	e529      	b.n	800bdac <dwt_ioctl+0x154>
 800c358:	2200      	movs	r2, #0
 800c35a:	492f      	ldr	r1, [pc, #188]	; (800c418 <dwt_ioctl+0x7c0>)
 800c35c:	f7fd fbb3 	bl	8009ac6 <dwt_read16bitoffsetreg>
 800c360:	b200      	sxth	r0, r0
 800c362:	e7f4      	b.n	800c34e <dwt_ioctl+0x6f6>
 800c364:	2200      	movs	r2, #0
 800c366:	492d      	ldr	r1, [pc, #180]	; (800c41c <dwt_ioctl+0x7c4>)
 800c368:	f7fd fbad 	bl	8009ac6 <dwt_read16bitoffsetreg>
 800c36c:	b200      	sxth	r0, r0
 800c36e:	e7ee      	b.n	800c34e <dwt_ioctl+0x6f6>
 800c370:	2c00      	cmp	r4, #0
 800c372:	f001 8395 	beq.w	800daa0 <dwt_ioctl+0x1e48>
 800c376:	ab0c      	add	r3, sp, #48	; 0x30
 800c378:	9300      	str	r3, [sp, #0]
 800c37a:	2303      	movs	r3, #3
 800c37c:	2200      	movs	r2, #0
 800c37e:	4928      	ldr	r1, [pc, #160]	; (800c420 <dwt_ioctl+0x7c8>)
 800c380:	f7fd fb81 	bl	8009a86 <dwt_readfromdevice>
 800c384:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800c388:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800c38c:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 800c390:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800c394:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800c398:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800c39c:	bf1c      	itt	ne
 800c39e:	ea6f 3303 	mvnne.w	r3, r3, lsl #12
 800c3a2:	ea6f 3313 	mvnne.w	r3, r3, lsr #12
 800c3a6:	6023      	str	r3, [r4, #0]
 800c3a8:	2500      	movs	r5, #0
 800c3aa:	e4ff      	b.n	800bdac <dwt_ioctl+0x154>
 800c3ac:	f7fe f9d0 	bl	800a750 <ull_clearaonconfig>
 800c3b0:	2500      	movs	r5, #0
 800c3b2:	e4fb      	b.n	800bdac <dwt_ioctl+0x154>
 800c3b4:	2c00      	cmp	r4, #0
 800c3b6:	f001 8376 	beq.w	800daa6 <dwt_ioctl+0x1e4e>
 800c3ba:	8861      	ldrh	r1, [r4, #2]
 800c3bc:	f7fe fdf0 	bl	800afa0 <ull_calcbandwidthadj>
 800c3c0:	7020      	strb	r0, [r4, #0]
 800c3c2:	2500      	movs	r5, #0
 800c3c4:	e4f2      	b.n	800bdac <dwt_ioctl+0x154>
 800c3c6:	4621      	mov	r1, r4
 800c3c8:	f7fd fb9d 	bl	8009b06 <ull_readdiagnostics>
 800c3cc:	2500      	movs	r5, #0
 800c3ce:	e4ed      	b.n	800bdac <dwt_ioctl+0x154>
 800c3d0:	2c00      	cmp	r4, #0
 800c3d2:	f001 836b 	beq.w	800daac <dwt_ioctl+0x1e54>
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	2170      	movs	r1, #112	; 0x70
 800c3da:	f7fd fb5e 	bl	8009a9a <dwt_read32bitoffsetreg>
 800c3de:	6020      	str	r0, [r4, #0]
 800c3e0:	2500      	movs	r5, #0
 800c3e2:	e4e3      	b.n	800bdac <dwt_ioctl+0x154>
 800c3e4:	00110008 	.word	0x00110008
 800c3e8:	00d20874 	.word	0x00d20874
 800c3ec:	00110010 	.word	0x00110010
 800c3f0:	04d28874 	.word	0x04d28874
 800c3f4:	0007001c 	.word	0x0007001c
 800c3f8:	00020004 	.word	0x00020004
 800c3fc:	001f000c 	.word	0x001f000c
 800c400:	001f0010 	.word	0x001f0010
 800c404:	00010008 	.word	0x00010008
 800c408:	00010020 	.word	0x00010020
 800c40c:	af5f35cc 	.word	0xaf5f35cc
 800c410:	af5f584c 	.word	0xaf5f584c
 800c414:	0006000c 	.word	0x0006000c
 800c418:	0018000c 	.word	0x0018000c
 800c41c:	000c0020 	.word	0x000c0020
 800c420:	00060029 	.word	0x00060029
 800c424:	2c00      	cmp	r4, #0
 800c426:	f001 8344 	beq.w	800dab2 <dwt_ioctl+0x1e5a>
 800c42a:	2200      	movs	r2, #0
 800c42c:	2170      	movs	r1, #112	; 0x70
 800c42e:	f7fd fb34 	bl	8009a9a <dwt_read32bitoffsetreg>
 800c432:	6020      	str	r0, [r4, #0]
 800c434:	2500      	movs	r5, #0
 800c436:	e4b9      	b.n	800bdac <dwt_ioctl+0x154>
 800c438:	9400      	str	r4, [sp, #0]
 800c43a:	2305      	movs	r3, #5
 800c43c:	2200      	movs	r2, #0
 800c43e:	2170      	movs	r1, #112	; 0x70
 800c440:	f7fd fb21 	bl	8009a86 <dwt_readfromdevice>
 800c444:	2500      	movs	r5, #0
 800c446:	e4b1      	b.n	800bdac <dwt_ioctl+0x154>
 800c448:	2c00      	cmp	r4, #0
 800c44a:	f001 8335 	beq.w	800dab8 <dwt_ioctl+0x1e60>
 800c44e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c450:	7b9b      	ldrb	r3, [r3, #14]
 800c452:	2b01      	cmp	r3, #1
 800c454:	d014      	beq.n	800c480 <dwt_ioctl+0x828>
 800c456:	2b03      	cmp	r3, #3
 800c458:	d119      	bne.n	800c48e <dwt_ioctl+0x836>
 800c45a:	2216      	movs	r2, #22
 800c45c:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800c460:	f7fd fb31 	bl	8009ac6 <dwt_read16bitoffsetreg>
 800c464:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800c468:	b283      	uxth	r3, r0
 800c46a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800c46e:	d004      	beq.n	800c47a <dwt_ioctl+0x822>
 800c470:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 800c474:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 800c478:	b218      	sxth	r0, r3
 800c47a:	8020      	strh	r0, [r4, #0]
 800c47c:	2500      	movs	r5, #0
 800c47e:	e495      	b.n	800bdac <dwt_ioctl+0x154>
 800c480:	2202      	movs	r2, #2
 800c482:	49d6      	ldr	r1, [pc, #856]	; (800c7dc <dwt_ioctl+0xb84>)
 800c484:	f7fd fb1f 	bl	8009ac6 <dwt_read16bitoffsetreg>
 800c488:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800c48c:	e7ec      	b.n	800c468 <dwt_ioctl+0x810>
 800c48e:	2202      	movs	r2, #2
 800c490:	49d3      	ldr	r1, [pc, #844]	; (800c7e0 <dwt_ioctl+0xb88>)
 800c492:	f7fd fb18 	bl	8009ac6 <dwt_read16bitoffsetreg>
 800c496:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800c49a:	e7e5      	b.n	800c468 <dwt_ioctl+0x810>
 800c49c:	9400      	str	r4, [sp, #0]
 800c49e:	2306      	movs	r3, #6
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	49d0      	ldr	r1, [pc, #832]	; (800c7e4 <dwt_ioctl+0xb8c>)
 800c4a4:	f7fd faef 	bl	8009a86 <dwt_readfromdevice>
 800c4a8:	7963      	ldrb	r3, [r4, #5]
 800c4aa:	f003 0301 	and.w	r3, r3, #1
 800c4ae:	7163      	strb	r3, [r4, #5]
 800c4b0:	2500      	movs	r5, #0
 800c4b2:	e47b      	b.n	800bdac <dwt_ioctl+0x154>
 800c4b4:	2c00      	cmp	r4, #0
 800c4b6:	f001 8302 	beq.w	800dabe <dwt_ioctl+0x1e66>
 800c4ba:	2201      	movs	r2, #1
 800c4bc:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800c4c0:	f7fd fb13 	bl	8009aea <dwt_read8bitoffsetreg>
 800c4c4:	7020      	strb	r0, [r4, #0]
 800c4c6:	2500      	movs	r5, #0
 800c4c8:	e470      	b.n	800bdac <dwt_ioctl+0x154>
 800c4ca:	2c00      	cmp	r4, #0
 800c4cc:	f001 82fa 	beq.w	800dac4 <dwt_ioctl+0x1e6c>
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800c4d6:	f7fd fb08 	bl	8009aea <dwt_read8bitoffsetreg>
 800c4da:	7020      	strb	r0, [r4, #0]
 800c4dc:	2500      	movs	r5, #0
 800c4de:	e465      	b.n	800bdac <dwt_ioctl+0x154>
 800c4e0:	2c00      	cmp	r4, #0
 800c4e2:	f001 82f2 	beq.w	800daca <dwt_ioctl+0x1e72>
 800c4e6:	88a2      	ldrh	r2, [r4, #4]
 800c4e8:	6821      	ldr	r1, [r4, #0]
 800c4ea:	f7fe fc07 	bl	800acfc <_dwt_otpprogword32>
 800c4ee:	2500      	movs	r5, #0
 800c4f0:	e45c      	b.n	800bdac <dwt_ioctl+0x154>
 800c4f2:	2c00      	cmp	r4, #0
 800c4f4:	f001 82ec 	beq.w	800dad0 <dwt_ioctl+0x1e78>
 800c4f8:	6825      	ldr	r5, [r4, #0]
 800c4fa:	88a4      	ldrh	r4, [r4, #4]
 800c4fc:	4622      	mov	r2, r4
 800c4fe:	4629      	mov	r1, r5
 800c500:	f7fe fbfc 	bl	800acfc <_dwt_otpprogword32>
 800c504:	4621      	mov	r1, r4
 800c506:	4630      	mov	r0, r6
 800c508:	f7fd ff1a 	bl	800a340 <_dwt_otpread>
 800c50c:	1a2d      	subs	r5, r5, r0
 800c50e:	bf18      	it	ne
 800c510:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800c514:	e44a      	b.n	800bdac <dwt_ioctl+0x154>
 800c516:	2a02      	cmp	r2, #2
 800c518:	d00e      	beq.n	800c538 <dwt_ioctl+0x8e0>
 800c51a:	4cb3      	ldr	r4, [pc, #716]	; (800c7e8 <dwt_ioctl+0xb90>)
 800c51c:	2300      	movs	r3, #0
 800c51e:	461a      	mov	r2, r3
 800c520:	4621      	mov	r1, r4
 800c522:	4630      	mov	r0, r6
 800c524:	f7fe f8bc 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800c528:	2302      	movs	r3, #2
 800c52a:	2200      	movs	r2, #0
 800c52c:	4621      	mov	r1, r4
 800c52e:	4630      	mov	r0, r6
 800c530:	f7fe f8b6 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800c534:	2500      	movs	r5, #0
 800c536:	e439      	b.n	800bdac <dwt_ioctl+0x154>
 800c538:	2300      	movs	r3, #0
 800c53a:	9300      	str	r3, [sp, #0]
 800c53c:	23fe      	movs	r3, #254	; 0xfe
 800c53e:	2201      	movs	r2, #1
 800c540:	49aa      	ldr	r1, [pc, #680]	; (800c7ec <dwt_ioctl+0xb94>)
 800c542:	f7fe fce3 	bl	800af0c <dwt_modify8bitoffsetreg>
 800c546:	e7e8      	b.n	800c51a <dwt_ioctl+0x8c2>
 800c548:	2c00      	cmp	r4, #0
 800c54a:	f001 82c4 	beq.w	800dad6 <dwt_ioctl+0x1e7e>
 800c54e:	8824      	ldrh	r4, [r4, #0]
 800c550:	b2e2      	uxtb	r2, r4
 800c552:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c556:	f7fe f94f 	bl	800a7f8 <ull_aon_write>
 800c55a:	0a22      	lsrs	r2, r4, #8
 800c55c:	f240 1103 	movw	r1, #259	; 0x103
 800c560:	4630      	mov	r0, r6
 800c562:	f7fe f949 	bl	800a7f8 <ull_aon_write>
 800c566:	2500      	movs	r5, #0
 800c568:	e420      	b.n	800bdac <dwt_ioctl+0x154>
 800c56a:	2c00      	cmp	r4, #0
 800c56c:	f001 82b6 	beq.w	800dadc <dwt_ioctl+0x1e84>
 800c570:	f8df 8284 	ldr.w	r8, [pc, #644]	; 800c7f8 <dwt_ioctl+0xba0>
 800c574:	2310      	movs	r3, #16
 800c576:	9300      	str	r3, [sp, #0]
 800c578:	23ff      	movs	r3, #255	; 0xff
 800c57a:	2200      	movs	r2, #0
 800c57c:	4641      	mov	r1, r8
 800c57e:	f7fe fcc5 	bl	800af0c <dwt_modify8bitoffsetreg>
 800c582:	f44f 7182 	mov.w	r1, #260	; 0x104
 800c586:	4630      	mov	r0, r6
 800c588:	f7fe f916 	bl	800a7b8 <ull_aon_read>
 800c58c:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 800c590:	462a      	mov	r2, r5
 800c592:	f44f 7182 	mov.w	r1, #260	; 0x104
 800c596:	4630      	mov	r0, r6
 800c598:	f7fe f92e 	bl	800a7f8 <ull_aon_write>
 800c59c:	f045 0204 	orr.w	r2, r5, #4
 800c5a0:	f44f 7182 	mov.w	r1, #260	; 0x104
 800c5a4:	4630      	mov	r0, r6
 800c5a6:	f7fe f927 	bl	800a7f8 <ull_aon_write>
 800c5aa:	2002      	movs	r0, #2
 800c5ac:	f7f4 ffca 	bl	8001544 <deca_sleep>
 800c5b0:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800c5b4:	4630      	mov	r0, r6
 800c5b6:	f7fe f8ff 	bl	800a7b8 <ull_aon_read>
 800c5ba:	4607      	mov	r7, r0
 800c5bc:	f240 110f 	movw	r1, #271	; 0x10f
 800c5c0:	4630      	mov	r0, r6
 800c5c2:	f7fe f8f9 	bl	800a7b8 <ull_aon_read>
 800c5c6:	4681      	mov	r9, r0
 800c5c8:	462a      	mov	r2, r5
 800c5ca:	f44f 7182 	mov.w	r1, #260	; 0x104
 800c5ce:	4630      	mov	r0, r6
 800c5d0:	f7fe f912 	bl	800a7f8 <ull_aon_write>
 800c5d4:	2500      	movs	r5, #0
 800c5d6:	9500      	str	r5, [sp, #0]
 800c5d8:	23ef      	movs	r3, #239	; 0xef
 800c5da:	462a      	mov	r2, r5
 800c5dc:	4641      	mov	r1, r8
 800c5de:	4630      	mov	r0, r6
 800c5e0:	f7fe fc94 	bl	800af0c <dwt_modify8bitoffsetreg>
 800c5e4:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 800c5e8:	8027      	strh	r7, [r4, #0]
 800c5ea:	f7ff bbdf 	b.w	800bdac <dwt_ioctl+0x154>
 800c5ee:	2c00      	cmp	r4, #0
 800c5f0:	f001 8277 	beq.w	800dae2 <dwt_ioctl+0x1e8a>
 800c5f4:	78a2      	ldrb	r2, [r4, #2]
 800c5f6:	8821      	ldrh	r1, [r4, #0]
 800c5f8:	f7fe f926 	bl	800a848 <ull_configuresleep>
 800c5fc:	2500      	movs	r5, #0
 800c5fe:	f7ff bbd5 	b.w	800bdac <dwt_ioctl+0x154>
 800c602:	2c00      	cmp	r4, #0
 800c604:	f001 8270 	beq.w	800dae8 <dwt_ioctl+0x1e90>
 800c608:	6824      	ldr	r4, [r4, #0]
 800c60a:	f7fe f8a1 	bl	800a750 <ull_clearaonconfig>
 800c60e:	2001      	movs	r0, #1
 800c610:	f7f4 ff98 	bl	8001544 <deca_sleep>
 800c614:	2303      	movs	r3, #3
 800c616:	9300      	str	r3, [sp, #0]
 800c618:	23ff      	movs	r3, #255	; 0xff
 800c61a:	2200      	movs	r2, #0
 800c61c:	4974      	ldr	r1, [pc, #464]	; (800c7f0 <dwt_ioctl+0xb98>)
 800c61e:	4630      	mov	r0, r6
 800c620:	f7fe fc74 	bl	800af0c <dwt_modify8bitoffsetreg>
 800c624:	b97c      	cbnz	r4, 800c646 <dwt_ioctl+0x9ee>
 800c626:	4630      	mov	r0, r6
 800c628:	f7ff faee 	bl	800bc08 <ull_softreset_no_sema_fcmd>
 800c62c:	2001      	movs	r0, #1
 800c62e:	f7f4 ff89 	bl	8001544 <deca_sleep>
 800c632:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800c634:	2500      	movs	r5, #0
 800c636:	739d      	strb	r5, [r3, #14]
 800c638:	2202      	movs	r2, #2
 800c63a:	821a      	strh	r2, [r3, #16]
 800c63c:	751d      	strb	r5, [r3, #20]
 800c63e:	755d      	strb	r5, [r3, #21]
 800c640:	73dd      	strb	r5, [r3, #15]
 800c642:	f7ff bbb3 	b.w	800bdac <dwt_ioctl+0x154>
 800c646:	4630      	mov	r0, r6
 800c648:	f7ff faf2 	bl	800bc30 <ull_softreset_fcmd>
 800c64c:	e7ee      	b.n	800c62c <dwt_ioctl+0x9d4>
 800c64e:	2c00      	cmp	r4, #0
 800c650:	f001 824d 	beq.w	800daee <dwt_ioctl+0x1e96>
 800c654:	7823      	ldrb	r3, [r4, #0]
 800c656:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c65a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800c65c:	7353      	strb	r3, [r2, #13]
 800c65e:	2200      	movs	r2, #0
 800c660:	4964      	ldr	r1, [pc, #400]	; (800c7f4 <dwt_ioctl+0xb9c>)
 800c662:	f7fe f81d 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800c666:	2500      	movs	r5, #0
 800c668:	f7ff bba0 	b.w	800bdac <dwt_ioctl+0x154>
 800c66c:	2c00      	cmp	r4, #0
 800c66e:	f001 8241 	beq.w	800daf4 <dwt_ioctl+0x1e9c>
 800c672:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c674:	7b5b      	ldrb	r3, [r3, #13]
 800c676:	7023      	strb	r3, [r4, #0]
 800c678:	2500      	movs	r5, #0
 800c67a:	f7ff bb97 	b.w	800bdac <dwt_ioctl+0x154>
 800c67e:	2101      	movs	r1, #1
 800c680:	f7fe faf6 	bl	800ac70 <ull_enable_rf_tx>
 800c684:	4630      	mov	r0, r6
 800c686:	f7fe fb27 	bl	800acd8 <ull_enable_rftx_blocks>
 800c68a:	2101      	movs	r1, #1
 800c68c:	4630      	mov	r0, r6
 800c68e:	f7fd fe2d 	bl	800a2ec <ull_force_clocks>
 800c692:	220f      	movs	r2, #15
 800c694:	2101      	movs	r1, #1
 800c696:	4630      	mov	r0, r6
 800c698:	f7fe ff48 	bl	800b52c <ull_repeated_cw>
 800c69c:	2500      	movs	r5, #0
 800c69e:	f7ff bb85 	b.w	800bdac <dwt_ioctl+0x154>
 800c6a2:	2c00      	cmp	r4, #0
 800c6a4:	f001 8229 	beq.w	800dafa <dwt_ioctl+0x1ea2>
 800c6a8:	6862      	ldr	r2, [r4, #4]
 800c6aa:	6821      	ldr	r1, [r4, #0]
 800c6ac:	f7fe ff3e 	bl	800b52c <ull_repeated_cw>
 800c6b0:	2500      	movs	r5, #0
 800c6b2:	f7ff bb7b 	b.w	800bdac <dwt_ioctl+0x154>
 800c6b6:	2c00      	cmp	r4, #0
 800c6b8:	f001 8222 	beq.w	800db00 <dwt_ioctl+0x1ea8>
 800c6bc:	4d4e      	ldr	r5, [pc, #312]	; (800c7f8 <dwt_ioctl+0xba0>)
 800c6be:	2200      	movs	r2, #0
 800c6c0:	4629      	mov	r1, r5
 800c6c2:	f7fd fa12 	bl	8009aea <dwt_read8bitoffsetreg>
 800c6c6:	4680      	mov	r8, r0
 800c6c8:	2302      	movs	r3, #2
 800c6ca:	9300      	str	r3, [sp, #0]
 800c6cc:	23ff      	movs	r3, #255	; 0xff
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	4629      	mov	r1, r5
 800c6d2:	4630      	mov	r0, r6
 800c6d4:	f7fe fc1a 	bl	800af0c <dwt_modify8bitoffsetreg>
 800c6d8:	2304      	movs	r3, #4
 800c6da:	2200      	movs	r2, #0
 800c6dc:	4947      	ldr	r1, [pc, #284]	; (800c7fc <dwt_ioctl+0xba4>)
 800c6de:	4630      	mov	r0, r6
 800c6e0:	f7fd ffde 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c6ec:	4630      	mov	r0, r6
 800c6ee:	f7fd ffd7 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800c6f2:	4f43      	ldr	r7, [pc, #268]	; (800c800 <dwt_ioctl+0xba8>)
 800c6f4:	2500      	movs	r5, #0
 800c6f6:	462a      	mov	r2, r5
 800c6f8:	4639      	mov	r1, r7
 800c6fa:	4630      	mov	r0, r6
 800c6fc:	f7fd f9f5 	bl	8009aea <dwt_read8bitoffsetreg>
 800c700:	f010 0f01 	tst.w	r0, #1
 800c704:	d0f7      	beq.n	800c6f6 <dwt_ioctl+0xa9e>
 800c706:	2200      	movs	r2, #0
 800c708:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800c70c:	4630      	mov	r0, r6
 800c70e:	f7fd f9da 	bl	8009ac6 <dwt_read16bitoffsetreg>
 800c712:	4605      	mov	r5, r0
 800c714:	2300      	movs	r3, #0
 800c716:	461a      	mov	r2, r3
 800c718:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c71c:	4630      	mov	r0, r6
 800c71e:	f7fd ffbf 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800c722:	2300      	movs	r3, #0
 800c724:	461a      	mov	r2, r3
 800c726:	4935      	ldr	r1, [pc, #212]	; (800c7fc <dwt_ioctl+0xba4>)
 800c728:	4630      	mov	r0, r6
 800c72a:	f7fd ffb9 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800c72e:	4643      	mov	r3, r8
 800c730:	2200      	movs	r2, #0
 800c732:	4931      	ldr	r1, [pc, #196]	; (800c7f8 <dwt_ioctl+0xba0>)
 800c734:	4630      	mov	r0, r6
 800c736:	f7fd ffb3 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800c73a:	8025      	strh	r5, [r4, #0]
 800c73c:	2500      	movs	r5, #0
 800c73e:	f7ff bb35 	b.w	800bdac <dwt_ioctl+0x154>
 800c742:	2c00      	cmp	r4, #0
 800c744:	f001 81df 	beq.w	800db06 <dwt_ioctl+0x1eae>
 800c748:	7923      	ldrb	r3, [r4, #4]
 800c74a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800c74c:	7a92      	ldrb	r2, [r2, #10]
 800c74e:	1a9b      	subs	r3, r3, r2
 800c750:	ee07 3a90 	vmov	s15, r3
 800c754:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c758:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800c804 <dwt_ioctl+0xbac>
 800c75c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c760:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 800c764:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c768:	edc4 7a00 	vstr	s15, [r4]
 800c76c:	2500      	movs	r5, #0
 800c76e:	f7ff bb1d 	b.w	800bdac <dwt_ioctl+0x154>
 800c772:	2c00      	cmp	r4, #0
 800c774:	f001 81ca 	beq.w	800db0c <dwt_ioctl+0x1eb4>
 800c778:	7923      	ldrb	r3, [r4, #4]
 800c77a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800c77c:	7a52      	ldrb	r2, [r2, #9]
 800c77e:	1a9b      	subs	r3, r3, r2
 800c780:	ee07 3a90 	vmov	s15, r3
 800c784:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c788:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800c808 <dwt_ioctl+0xbb0>
 800c78c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c790:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800c794:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c798:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800c80c <dwt_ioctl+0xbb4>
 800c79c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c7a0:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800c7a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c7a8:	edc4 7a00 	vstr	s15, [r4]
 800c7ac:	2500      	movs	r5, #0
 800c7ae:	f7ff bafd 	b.w	800bdac <dwt_ioctl+0x154>
 800c7b2:	2c00      	cmp	r4, #0
 800c7b4:	f001 81ad 	beq.w	800db12 <dwt_ioctl+0x1eba>
 800c7b8:	6824      	ldr	r4, [r4, #0]
 800c7ba:	2101      	movs	r1, #1
 800c7bc:	f7fe fa58 	bl	800ac70 <ull_enable_rf_tx>
 800c7c0:	4630      	mov	r0, r6
 800c7c2:	f7fe fa89 	bl	800acd8 <ull_enable_rftx_blocks>
 800c7c6:	2101      	movs	r1, #1
 800c7c8:	4630      	mov	r0, r6
 800c7ca:	f7fd fd8f 	bl	800a2ec <ull_force_clocks>
 800c7ce:	4621      	mov	r1, r4
 800c7d0:	4630      	mov	r0, r6
 800c7d2:	f7fe fc41 	bl	800b058 <ull_repeated_frames>
 800c7d6:	2500      	movs	r5, #0
 800c7d8:	f7ff bae8 	b.w	800bdac <dwt_ioctl+0x154>
 800c7dc:	00180014 	.word	0x00180014
 800c7e0:	000c001c 	.word	0x000c001c
 800c7e4:	000c0018 	.word	0x000c0018
 800c7e8:	000a0004 	.word	0x000a0004
 800c7ec:	00110008 	.word	0x00110008
 800c7f0:	00110004 	.word	0x00110004
 800c7f4:	00090014 	.word	0x00090014
 800c7f8:	00070048 	.word	0x00070048
 800c7fc:	00070034 	.word	0x00070034
 800c800:	00080004 	.word	0x00080004
 800c804:	3f866666 	.word	0x3f866666
 800c808:	3ecccccd 	.word	0x3ecccccd
 800c80c:	437f0000 	.word	0x437f0000
 800c810:	2500      	movs	r5, #0
 800c812:	9500      	str	r5, [sp, #0]
 800c814:	23ef      	movs	r3, #239	; 0xef
 800c816:	462a      	mov	r2, r5
 800c818:	49c7      	ldr	r1, [pc, #796]	; (800cb38 <dwt_ioctl+0xee0>)
 800c81a:	f7fe fb77 	bl	800af0c <dwt_modify8bitoffsetreg>
 800c81e:	2105      	movs	r1, #5
 800c820:	4630      	mov	r0, r6
 800c822:	f7fd fd63 	bl	800a2ec <ull_force_clocks>
 800c826:	2101      	movs	r1, #1
 800c828:	4630      	mov	r0, r6
 800c82a:	f7fd fee5 	bl	800a5f8 <ull_disable_rf_tx>
 800c82e:	4630      	mov	r0, r6
 800c830:	f7fd fed8 	bl	800a5e4 <ull_disable_rftx_blocks>
 800c834:	f7ff baba 	b.w	800bdac <dwt_ioctl+0x154>
 800c838:	2500      	movs	r5, #0
 800c83a:	9500      	str	r5, [sp, #0]
 800c83c:	23ef      	movs	r3, #239	; 0xef
 800c83e:	462a      	mov	r2, r5
 800c840:	49bd      	ldr	r1, [pc, #756]	; (800cb38 <dwt_ioctl+0xee0>)
 800c842:	f7fe fb63 	bl	800af0c <dwt_modify8bitoffsetreg>
 800c846:	f7ff bab1 	b.w	800bdac <dwt_ioctl+0x154>
 800c84a:	2c00      	cmp	r4, #0
 800c84c:	f001 8164 	beq.w	800db18 <dwt_ioctl+0x1ec0>
 800c850:	6821      	ldr	r1, [r4, #0]
 800c852:	f7fe fc01 	bl	800b058 <ull_repeated_frames>
 800c856:	2500      	movs	r5, #0
 800c858:	f7ff baa8 	b.w	800bdac <dwt_ioctl+0x154>
 800c85c:	2200      	movs	r2, #0
 800c85e:	49b7      	ldr	r1, [pc, #732]	; (800cb3c <dwt_ioctl+0xee4>)
 800c860:	f7fd f931 	bl	8009ac6 <dwt_read16bitoffsetreg>
 800c864:	f3c0 050b 	ubfx	r5, r0, #0, #12
 800c868:	f410 6f00 	tst.w	r0, #2048	; 0x800
 800c86c:	bf18      	it	ne
 800c86e:	f445 4570 	orrne.w	r5, r5, #61440	; 0xf000
 800c872:	b22d      	sxth	r5, r5
 800c874:	8025      	strh	r5, [r4, #0]
 800c876:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800c878:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800c87c:	1aed      	subs	r5, r5, r3
 800c87e:	f7ff ba95 	b.w	800bdac <dwt_ioctl+0x154>
 800c882:	2c00      	cmp	r4, #0
 800c884:	f001 814b 	beq.w	800db1e <dwt_ioctl+0x1ec6>
 800c888:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c88c:	7a23      	ldrb	r3, [r4, #8]
 800c88e:	f899 2013 	ldrb.w	r2, [r9, #19]
 800c892:	2aff      	cmp	r2, #255	; 0xff
 800c894:	f000 8122 	beq.w	800cadc <dwt_ioctl+0xe84>
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d136      	bne.n	800c90a <dwt_ioctl+0xcb2>
 800c89c:	f8d9 3000 	ldr.w	r3, [r9]
 800c8a0:	9300      	str	r3, [sp, #0]
 800c8a2:	230c      	movs	r3, #12
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	49a6      	ldr	r1, [pc, #664]	; (800cb40 <dwt_ioctl+0xee8>)
 800c8a8:	f7fd fd04 	bl	800a2b4 <dwt_writetodevice>
 800c8ac:	f899 300c 	ldrb.w	r3, [r9, #12]
 800c8b0:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 800c8b4:	18d1      	adds	r1, r2, r3
 800c8b6:	f899 2012 	ldrb.w	r2, [r9, #18]
 800c8ba:	2a00      	cmp	r2, #0
 800c8bc:	d15f      	bne.n	800c97e <dwt_ioctl+0xd26>
 800c8be:	f899 0010 	ldrb.w	r0, [r9, #16]
 800c8c2:	2800      	cmp	r0, #0
 800c8c4:	bf0b      	itete	eq
 800c8c6:	227f      	moveq	r2, #127	; 0x7f
 800c8c8:	f44f 6280 	movne.w	r2, #1024	; 0x400
 800c8cc:	f44f 15b0 	moveq.w	r5, #1441792	; 0x160000
 800c8d0:	f44f 15a0 	movne.w	r5, #1310720	; 0x140000
 800c8d4:	f899 0013 	ldrb.w	r0, [r9, #19]
 800c8d8:	1a12      	subs	r2, r2, r0
 800c8da:	3a02      	subs	r2, #2
 800c8dc:	4291      	cmp	r1, r2
 800c8de:	f200 8103 	bhi.w	800cae8 <dwt_ioctl+0xe90>
 800c8e2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800c8e6:	9200      	str	r2, [sp, #0]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	4629      	mov	r1, r5
 800c8ec:	4630      	mov	r0, r6
 800c8ee:	f7fd fce1 	bl	800a2b4 <dwt_writetodevice>
 800c8f2:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800c8f6:	f899 200c 	ldrb.w	r2, [r9, #12]
 800c8fa:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800c8fe:	9100      	str	r1, [sp, #0]
 800c900:	4629      	mov	r1, r5
 800c902:	4630      	mov	r0, r6
 800c904:	f7fd fcd6 	bl	800a2b4 <dwt_writetodevice>
 800c908:	e04a      	b.n	800c9a0 <dwt_ioctl+0xd48>
 800c90a:	f8d9 3000 	ldr.w	r3, [r9]
 800c90e:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 800c912:	7a9a      	ldrb	r2, [r3, #10]
 800c914:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 800c918:	7a5a      	ldrb	r2, [r3, #9]
 800c91a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 800c91e:	7a1a      	ldrb	r2, [r3, #8]
 800c920:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
 800c924:	79da      	ldrb	r2, [r3, #7]
 800c926:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 800c92a:	799a      	ldrb	r2, [r3, #6]
 800c92c:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 800c930:	795a      	ldrb	r2, [r3, #5]
 800c932:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
 800c936:	791a      	ldrb	r2, [r3, #4]
 800c938:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800c93c:	78da      	ldrb	r2, [r3, #3]
 800c93e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
 800c942:	789a      	ldrb	r2, [r3, #2]
 800c944:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 800c948:	785a      	ldrb	r2, [r3, #1]
 800c94a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 800c94e:	781a      	ldrb	r2, [r3, #0]
 800c950:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800c954:	2200      	movs	r2, #0
 800c956:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 800c95a:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 800c95e:	0a09      	lsrs	r1, r1, #8
 800c960:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
 800c964:	7b19      	ldrb	r1, [r3, #12]
 800c966:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
 800c96a:	7adb      	ldrb	r3, [r3, #11]
 800c96c:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 800c970:	ab0c      	add	r3, sp, #48	; 0x30
 800c972:	9300      	str	r3, [sp, #0]
 800c974:	2310      	movs	r3, #16
 800c976:	4972      	ldr	r1, [pc, #456]	; (800cb40 <dwt_ioctl+0xee8>)
 800c978:	f7fd fc9c 	bl	800a2b4 <dwt_writetodevice>
 800c97c:	e796      	b.n	800c8ac <dwt_ioctl+0xc54>
 800c97e:	2a01      	cmp	r2, #1
 800c980:	f040 80af 	bne.w	800cae2 <dwt_ioctl+0xe8a>
 800c984:	f899 3011 	ldrb.w	r3, [r9, #17]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800c98e:	bf08      	it	eq
 800c990:	237f      	moveq	r3, #127	; 0x7f
 800c992:	f899 2013 	ldrb.w	r2, [r9, #19]
 800c996:	1a9b      	subs	r3, r3, r2
 800c998:	3b02      	subs	r3, #2
 800c99a:	4299      	cmp	r1, r3
 800c99c:	f200 80a7 	bhi.w	800caee <dwt_ioctl+0xe96>
 800c9a0:	f899 2010 	ldrb.w	r2, [r9, #16]
 800c9a4:	1e53      	subs	r3, r2, #1
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	2b01      	cmp	r3, #1
 800c9aa:	d940      	bls.n	800ca2e <dwt_ioctl+0xdd6>
 800c9ac:	f899 3011 	ldrb.w	r3, [r9, #17]
 800c9b0:	1e59      	subs	r1, r3, #1
 800c9b2:	b2c9      	uxtb	r1, r1
 800c9b4:	2901      	cmp	r1, #1
 800c9b6:	d947      	bls.n	800ca48 <dwt_ioctl+0xdf0>
 800c9b8:	2b04      	cmp	r3, #4
 800c9ba:	d04c      	beq.n	800ca56 <dwt_ioctl+0xdfe>
 800c9bc:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	4960      	ldr	r1, [pc, #384]	; (800cb44 <dwt_ioctl+0xeec>)
 800c9c4:	4630      	mov	r0, r6
 800c9c6:	f7fd fcdd 	bl	800a384 <dwt_write32bitoffsetreg>
 800c9ca:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800c9ce:	4a5e      	ldr	r2, [pc, #376]	; (800cb48 <dwt_ioctl+0xef0>)
 800c9d0:	ea02 12c3 	and.w	r2, r2, r3, lsl #7
 800c9d4:	f899 300c 	ldrb.w	r3, [r9, #12]
 800c9d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9dc:	4313      	orrs	r3, r2
 800c9de:	2200      	movs	r2, #0
 800c9e0:	495a      	ldr	r1, [pc, #360]	; (800cb4c <dwt_ioctl+0xef4>)
 800c9e2:	4630      	mov	r0, r6
 800c9e4:	f7fd fcce 	bl	800a384 <dwt_write32bitoffsetreg>
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	4958      	ldr	r1, [pc, #352]	; (800cb50 <dwt_ioctl+0xef8>)
 800c9ee:	4630      	mov	r0, r6
 800c9f0:	f7fd fe56 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800c9f4:	f8df 815c 	ldr.w	r8, [pc, #348]	; 800cb54 <dwt_ioctl+0xefc>
 800c9f8:	2700      	movs	r7, #0
 800c9fa:	463a      	mov	r2, r7
 800c9fc:	4641      	mov	r1, r8
 800c9fe:	4630      	mov	r0, r6
 800ca00:	f7fd f873 	bl	8009aea <dwt_read8bitoffsetreg>
 800ca04:	f010 0f05 	tst.w	r0, #5
 800ca08:	d0f7      	beq.n	800c9fa <dwt_ioctl+0xda2>
 800ca0a:	4605      	mov	r5, r0
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	2200      	movs	r2, #0
 800ca10:	4950      	ldr	r1, [pc, #320]	; (800cb54 <dwt_ioctl+0xefc>)
 800ca12:	4630      	mov	r0, r6
 800ca14:	f7fd fe44 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800ca18:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 800ca1c:	f025 0330 	bic.w	r3, r5, #48	; 0x30
 800ca20:	2b01      	cmp	r3, #1
 800ca22:	d025      	beq.n	800ca70 <dwt_ioctl+0xe18>
 800ca24:	b26b      	sxtb	r3, r5
 800ca26:	7023      	strb	r3, [r4, #0]
 800ca28:	2500      	movs	r5, #0
 800ca2a:	f7ff b9bf 	b.w	800bdac <dwt_ioctl+0x154>
 800ca2e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800ca30:	7b9b      	ldrb	r3, [r3, #14]
 800ca32:	2b03      	cmp	r3, #3
 800ca34:	f001 8123 	beq.w	800dc7e <dwt_ioctl+0x2026>
 800ca38:	f899 3011 	ldrb.w	r3, [r9, #17]
 800ca3c:	1e5a      	subs	r2, r3, #1
 800ca3e:	b2d2      	uxtb	r2, r2
 800ca40:	2a01      	cmp	r2, #1
 800ca42:	d912      	bls.n	800ca6a <dwt_ioctl+0xe12>
 800ca44:	2201      	movs	r2, #1
 800ca46:	e7b7      	b.n	800c9b8 <dwt_ioctl+0xd60>
 800ca48:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800ca4a:	7b9b      	ldrb	r3, [r3, #14]
 800ca4c:	2b03      	cmp	r3, #3
 800ca4e:	bf0c      	ite	eq
 800ca50:	2302      	moveq	r3, #2
 800ca52:	2301      	movne	r3, #1
 800ca54:	e7b2      	b.n	800c9bc <dwt_ioctl+0xd64>
 800ca56:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 800ca5a:	2910      	cmp	r1, #16
 800ca5c:	d9ae      	bls.n	800c9bc <dwt_ioctl+0xd64>
 800ca5e:	f06f 0303 	mvn.w	r3, #3
 800ca62:	e7e0      	b.n	800ca26 <dwt_ioctl+0xdce>
 800ca64:	2202      	movs	r2, #2
 800ca66:	4613      	mov	r3, r2
 800ca68:	e7a8      	b.n	800c9bc <dwt_ioctl+0xd64>
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	4613      	mov	r3, r2
 800ca6e:	e7a5      	b.n	800c9bc <dwt_ioctl+0xd64>
 800ca70:	f899 3012 	ldrb.w	r3, [r9, #18]
 800ca74:	2b01      	cmp	r3, #1
 800ca76:	d1d5      	bne.n	800ca24 <dwt_ioctl+0xdcc>
 800ca78:	f899 2011 	ldrb.w	r2, [r9, #17]
 800ca7c:	1e53      	subs	r3, r2, #1
 800ca7e:	b2db      	uxtb	r3, r3
 800ca80:	2b01      	cmp	r3, #1
 800ca82:	d91b      	bls.n	800cabc <dwt_ioctl+0xe64>
 800ca84:	2a03      	cmp	r2, #3
 800ca86:	bf0c      	ite	eq
 800ca88:	f44f 17a0 	moveq.w	r7, #1310720	; 0x140000
 800ca8c:	f44f 17b0 	movne.w	r7, #1441792	; 0x160000
 800ca90:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800ca94:	b112      	cbz	r2, 800ca9c <dwt_ioctl+0xe44>
 800ca96:	f899 300c 	ldrb.w	r3, [r9, #12]
 800ca9a:	b9c3      	cbnz	r3, 800cace <dwt_ioctl+0xe76>
 800ca9c:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800caa0:	2900      	cmp	r1, #0
 800caa2:	d0bf      	beq.n	800ca24 <dwt_ioctl+0xdcc>
 800caa4:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d0bb      	beq.n	800ca24 <dwt_ioctl+0xdcc>
 800caac:	f899 200c 	ldrb.w	r2, [r9, #12]
 800cab0:	9100      	str	r1, [sp, #0]
 800cab2:	4639      	mov	r1, r7
 800cab4:	4630      	mov	r0, r6
 800cab6:	f7fc ffe6 	bl	8009a86 <dwt_readfromdevice>
 800caba:	e7b3      	b.n	800ca24 <dwt_ioctl+0xdcc>
 800cabc:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800cabe:	7b9b      	ldrb	r3, [r3, #14]
 800cac0:	2b03      	cmp	r3, #3
 800cac2:	bf0c      	ite	eq
 800cac4:	f44f 1798 	moveq.w	r7, #1245184	; 0x130000
 800cac8:	f44f 1790 	movne.w	r7, #1179648	; 0x120000
 800cacc:	e7e0      	b.n	800ca90 <dwt_ioctl+0xe38>
 800cace:	9200      	str	r2, [sp, #0]
 800cad0:	2200      	movs	r2, #0
 800cad2:	4639      	mov	r1, r7
 800cad4:	4630      	mov	r0, r6
 800cad6:	f7fc ffd6 	bl	8009a86 <dwt_readfromdevice>
 800cada:	e7df      	b.n	800ca9c <dwt_ioctl+0xe44>
 800cadc:	f06f 0302 	mvn.w	r3, #2
 800cae0:	e7a1      	b.n	800ca26 <dwt_ioctl+0xdce>
 800cae2:	f06f 0301 	mvn.w	r3, #1
 800cae6:	e79e      	b.n	800ca26 <dwt_ioctl+0xdce>
 800cae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800caec:	e79b      	b.n	800ca26 <dwt_ioctl+0xdce>
 800caee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800caf2:	e798      	b.n	800ca26 <dwt_ioctl+0xdce>
 800caf4:	7a23      	ldrb	r3, [r4, #8]
 800caf6:	79e1      	ldrb	r1, [r4, #7]
 800caf8:	79a2      	ldrb	r2, [r4, #6]
 800cafa:	00d2      	lsls	r2, r2, #3
 800cafc:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800cb00:	4313      	orrs	r3, r2
 800cb02:	7962      	ldrb	r2, [r4, #5]
 800cb04:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800cb08:	7922      	ldrb	r2, [r4, #4]
 800cb0a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800cb0e:	78e2      	ldrb	r2, [r4, #3]
 800cb10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cb14:	78a2      	ldrb	r2, [r4, #2]
 800cb16:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 800cb1a:	7862      	ldrb	r2, [r4, #1]
 800cb1c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800cb20:	7822      	ldrb	r2, [r4, #0]
 800cb22:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800cb26:	b29b      	uxth	r3, r3
 800cb28:	2200      	movs	r2, #0
 800cb2a:	490b      	ldr	r1, [pc, #44]	; (800cb58 <dwt_ioctl+0xf00>)
 800cb2c:	f7fd fbcd 	bl	800a2ca <dwt_write16bitoffsetreg>
 800cb30:	2500      	movs	r5, #0
 800cb32:	f7ff b93b 	b.w	800bdac <dwt_ioctl+0x154>
 800cb36:	bf00      	nop
 800cb38:	000f0028 	.word	0x000f0028
 800cb3c:	00020008 	.word	0x00020008
 800cb40:	00010034 	.word	0x00010034
 800cb44:	00010044 	.word	0x00010044
 800cb48:	0001ff80 	.word	0x0001ff80
 800cb4c:	00010048 	.word	0x00010048
 800cb50:	0001004c 	.word	0x0001004c
 800cb54:	00010050 	.word	0x00010050
 800cb58:	00010030 	.word	0x00010030
 800cb5c:	2c00      	cmp	r4, #0
 800cb5e:	f000 87e1 	beq.w	800db24 <dwt_ioctl+0x1ecc>
 800cb62:	7863      	ldrb	r3, [r4, #1]
 800cb64:	b133      	cbz	r3, 800cb74 <dwt_ioctl+0xf1c>
 800cb66:	085b      	lsrs	r3, r3, #1
 800cb68:	3b01      	subs	r3, #1
 800cb6a:	b2db      	uxtb	r3, r3
 800cb6c:	7023      	strb	r3, [r4, #0]
 800cb6e:	2500      	movs	r5, #0
 800cb70:	f7ff b91c 	b.w	800bdac <dwt_ioctl+0x154>
 800cb74:	2300      	movs	r3, #0
 800cb76:	e7f9      	b.n	800cb6c <dwt_ioctl+0xf14>
 800cb78:	2200      	movs	r2, #0
 800cb7a:	49d0      	ldr	r1, [pc, #832]	; (800cebc <dwt_ioctl+0x1264>)
 800cb7c:	f7fc ff8d 	bl	8009a9a <dwt_read32bitoffsetreg>
 800cb80:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800cb84:	8023      	strh	r3, [r4, #0]
 800cb86:	f3c0 400b 	ubfx	r0, r0, #16, #12
 800cb8a:	8060      	strh	r0, [r4, #2]
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	49cc      	ldr	r1, [pc, #816]	; (800cec0 <dwt_ioctl+0x1268>)
 800cb90:	4630      	mov	r0, r6
 800cb92:	f7fc ff82 	bl	8009a9a <dwt_read32bitoffsetreg>
 800cb96:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800cb9a:	80a3      	strh	r3, [r4, #4]
 800cb9c:	f3c0 400b 	ubfx	r0, r0, #16, #12
 800cba0:	80e0      	strh	r0, [r4, #6]
 800cba2:	2200      	movs	r2, #0
 800cba4:	49c7      	ldr	r1, [pc, #796]	; (800cec4 <dwt_ioctl+0x126c>)
 800cba6:	4630      	mov	r0, r6
 800cba8:	f7fc ff77 	bl	8009a9a <dwt_read32bitoffsetreg>
 800cbac:	7220      	strb	r0, [r4, #8]
 800cbae:	0c00      	lsrs	r0, r0, #16
 800cbb0:	7260      	strb	r0, [r4, #9]
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	49c4      	ldr	r1, [pc, #784]	; (800cec8 <dwt_ioctl+0x1270>)
 800cbb6:	4630      	mov	r0, r6
 800cbb8:	f7fc ff6f 	bl	8009a9a <dwt_read32bitoffsetreg>
 800cbbc:	f3c0 430b 	ubfx	r3, r0, #16, #12
 800cbc0:	81a3      	strh	r3, [r4, #12]
 800cbc2:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800cbc6:	8160      	strh	r0, [r4, #10]
 800cbc8:	2200      	movs	r2, #0
 800cbca:	49c0      	ldr	r1, [pc, #768]	; (800cecc <dwt_ioctl+0x1274>)
 800cbcc:	4630      	mov	r0, r6
 800cbce:	f7fc ff64 	bl	8009a9a <dwt_read32bitoffsetreg>
 800cbd2:	f3c0 430b 	ubfx	r3, r0, #16, #12
 800cbd6:	f8a4 300f 	strh.w	r3, [r4, #15]
 800cbda:	73a0      	strb	r0, [r4, #14]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	49bc      	ldr	r1, [pc, #752]	; (800ced0 <dwt_ioctl+0x1278>)
 800cbe0:	4630      	mov	r0, r6
 800cbe2:	f7fc ff5a 	bl	8009a9a <dwt_read32bitoffsetreg>
 800cbe6:	7460      	strb	r0, [r4, #17]
 800cbe8:	0c00      	lsrs	r0, r0, #16
 800cbea:	74a0      	strb	r0, [r4, #18]
 800cbec:	2200      	movs	r2, #0
 800cbee:	49b9      	ldr	r1, [pc, #740]	; (800ced4 <dwt_ioctl+0x127c>)
 800cbf0:	4630      	mov	r0, r6
 800cbf2:	f7fc ff52 	bl	8009a9a <dwt_read32bitoffsetreg>
 800cbf6:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800cbfa:	f8a4 0013 	strh.w	r0, [r4, #19]
 800cbfe:	2500      	movs	r5, #0
 800cc00:	7565      	strb	r5, [r4, #21]
 800cc02:	75a5      	strb	r5, [r4, #22]
 800cc04:	462a      	mov	r2, r5
 800cc06:	49b4      	ldr	r1, [pc, #720]	; (800ced8 <dwt_ioctl+0x1280>)
 800cc08:	4630      	mov	r0, r6
 800cc0a:	f7fc ff6e 	bl	8009aea <dwt_read8bitoffsetreg>
 800cc0e:	75e0      	strb	r0, [r4, #23]
 800cc10:	f7ff b8cc 	b.w	800bdac <dwt_ioctl+0x154>
 800cc14:	4611      	mov	r1, r2
 800cc16:	f7fd fdbb 	bl	800a790 <ull_configeventcounters>
 800cc1a:	2500      	movs	r5, #0
 800cc1c:	f7ff b8c6 	b.w	800bdac <dwt_ioctl+0x154>
 800cc20:	2c00      	cmp	r4, #0
 800cc22:	f000 8782 	beq.w	800db2a <dwt_ioctl+0x1ed2>
 800cc26:	8823      	ldrh	r3, [r4, #0]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	49ac      	ldr	r1, [pc, #688]	; (800cedc <dwt_ioctl+0x1284>)
 800cc2c:	f7fd fb4d 	bl	800a2ca <dwt_write16bitoffsetreg>
 800cc30:	2500      	movs	r5, #0
 800cc32:	f7ff b8bb 	b.w	800bdac <dwt_ioctl+0x154>
 800cc36:	2c00      	cmp	r4, #0
 800cc38:	f000 877a 	beq.w	800db30 <dwt_ioctl+0x1ed8>
 800cc3c:	6825      	ldr	r5, [r4, #0]
 800cc3e:	b935      	cbnz	r5, 800cc4e <dwt_ioctl+0xff6>
 800cc40:	2300      	movs	r3, #0
 800cc42:	461a      	mov	r2, r3
 800cc44:	49a6      	ldr	r1, [pc, #664]	; (800cee0 <dwt_ioctl+0x1288>)
 800cc46:	f7fd fb40 	bl	800a2ca <dwt_write16bitoffsetreg>
 800cc4a:	f7ff b8af 	b.w	800bdac <dwt_ioctl+0x154>
 800cc4e:	7962      	ldrb	r2, [r4, #5]
 800cc50:	7923      	ldrb	r3, [r4, #4]
 800cc52:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cc56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	49a0      	ldr	r1, [pc, #640]	; (800cee0 <dwt_ioctl+0x1288>)
 800cc5e:	f7fd fb34 	bl	800a2ca <dwt_write16bitoffsetreg>
 800cc62:	2500      	movs	r5, #0
 800cc64:	f7ff b8a2 	b.w	800bdac <dwt_ioctl+0x154>
 800cc68:	2c00      	cmp	r4, #0
 800cc6a:	f000 8764 	beq.w	800db36 <dwt_ioctl+0x1ede>
 800cc6e:	6823      	ldr	r3, [r4, #0]
 800cc70:	b94b      	cbnz	r3, 800cc86 <dwt_ioctl+0x102e>
 800cc72:	2500      	movs	r5, #0
 800cc74:	9500      	str	r5, [sp, #0]
 800cc76:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 800cc7a:	462a      	mov	r2, r5
 800cc7c:	2110      	movs	r1, #16
 800cc7e:	f7fe fb61 	bl	800b344 <dwt_modify16bitoffsetreg>
 800cc82:	f7ff b893 	b.w	800bdac <dwt_ioctl+0x154>
 800cc86:	2200      	movs	r2, #0
 800cc88:	2134      	movs	r1, #52	; 0x34
 800cc8a:	f7fd fb7b 	bl	800a384 <dwt_write32bitoffsetreg>
 800cc8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc92:	9300      	str	r3, [sp, #0]
 800cc94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cc98:	2200      	movs	r2, #0
 800cc9a:	2110      	movs	r1, #16
 800cc9c:	4630      	mov	r0, r6
 800cc9e:	f7fe fb51 	bl	800b344 <dwt_modify16bitoffsetreg>
 800cca2:	2500      	movs	r5, #0
 800cca4:	f7ff b882 	b.w	800bdac <dwt_ioctl+0x154>
 800cca8:	2c00      	cmp	r4, #0
 800ccaa:	f000 8747 	beq.w	800db3c <dwt_ioctl+0x1ee4>
 800ccae:	8861      	ldrh	r1, [r4, #2]
 800ccb0:	f7fd fd82 	bl	800a7b8 <ull_aon_read>
 800ccb4:	7020      	strb	r0, [r4, #0]
 800ccb6:	2500      	movs	r5, #0
 800ccb8:	f7ff b878 	b.w	800bdac <dwt_ioctl+0x154>
 800ccbc:	2c00      	cmp	r4, #0
 800ccbe:	f000 8740 	beq.w	800db42 <dwt_ioctl+0x1eea>
 800ccc2:	78a2      	ldrb	r2, [r4, #2]
 800ccc4:	8821      	ldrh	r1, [r4, #0]
 800ccc6:	f7fd fd97 	bl	800a7f8 <ull_aon_write>
 800ccca:	2500      	movs	r5, #0
 800cccc:	f7ff b86e 	b.w	800bdac <dwt_ioctl+0x154>
 800ccd0:	4b84      	ldr	r3, [pc, #528]	; (800cee4 <dwt_ioctl+0x128c>)
 800ccd2:	4a85      	ldr	r2, [pc, #532]	; (800cee8 <dwt_ioctl+0x1290>)
 800ccd4:	2d01      	cmp	r5, #1
 800ccd6:	bf18      	it	ne
 800ccd8:	4613      	movne	r3, r2
 800ccda:	2d01      	cmp	r5, #1
 800ccdc:	4983      	ldr	r1, [pc, #524]	; (800ceec <dwt_ioctl+0x1294>)
 800ccde:	bf18      	it	ne
 800cce0:	f04f 110c 	movne.w	r1, #786444	; 0xc000c
 800cce4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800cce6:	7b92      	ldrb	r2, [r2, #14]
 800cce8:	2a01      	cmp	r2, #1
 800ccea:	d012      	beq.n	800cd12 <dwt_ioctl+0x10ba>
 800ccec:	2a03      	cmp	r2, #3
 800ccee:	d117      	bne.n	800cd20 <dwt_ioctl+0x10c8>
 800ccf0:	f5a2 12c0 	sub.w	r2, r2, #1572864	; 0x180000
 800ccf4:	3a01      	subs	r2, #1
 800ccf6:	441a      	add	r2, r3
 800ccf8:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800ccfc:	f7fc fee3 	bl	8009ac6 <dwt_read16bitoffsetreg>
 800cd00:	09c0      	lsrs	r0, r0, #7
 800cd02:	8020      	strh	r0, [r4, #0]
 800cd04:	8825      	ldrh	r5, [r4, #0]
 800cd06:	3500      	adds	r5, #0
 800cd08:	bf18      	it	ne
 800cd0a:	2501      	movne	r5, #1
 800cd0c:	426d      	negs	r5, r5
 800cd0e:	f7ff b84d 	b.w	800bdac <dwt_ioctl+0x154>
 800cd12:	2202      	movs	r2, #2
 800cd14:	4619      	mov	r1, r3
 800cd16:	f7fc fed6 	bl	8009ac6 <dwt_read16bitoffsetreg>
 800cd1a:	09c0      	lsrs	r0, r0, #7
 800cd1c:	8020      	strh	r0, [r4, #0]
 800cd1e:	e7f1      	b.n	800cd04 <dwt_ioctl+0x10ac>
 800cd20:	2202      	movs	r2, #2
 800cd22:	f7fc fed0 	bl	8009ac6 <dwt_read16bitoffsetreg>
 800cd26:	09c0      	lsrs	r0, r0, #7
 800cd28:	8020      	strh	r0, [r4, #0]
 800cd2a:	e7eb      	b.n	800cd04 <dwt_ioctl+0x10ac>
 800cd2c:	2c00      	cmp	r4, #0
 800cd2e:	f000 870b 	beq.w	800db48 <dwt_ioctl+0x1ef0>
 800cd32:	7821      	ldrb	r1, [r4, #0]
 800cd34:	f7fe fb20 	bl	800b378 <ull_setleds>
 800cd38:	2500      	movs	r5, #0
 800cd3a:	f7ff b837 	b.w	800bdac <dwt_ioctl+0x154>
 800cd3e:	4611      	mov	r1, r2
 800cd40:	f7fe f9a2 	bl	800b088 <ull_setdwstate>
 800cd44:	2500      	movs	r5, #0
 800cd46:	f7ff b831 	b.w	800bdac <dwt_ioctl+0x154>
 800cd4a:	9400      	str	r4, [sp, #0]
 800cd4c:	2304      	movs	r3, #4
 800cd4e:	2200      	movs	r2, #0
 800cd50:	211c      	movs	r1, #28
 800cd52:	f7fc fe98 	bl	8009a86 <dwt_readfromdevice>
 800cd56:	2500      	movs	r5, #0
 800cd58:	f7ff b828 	b.w	800bdac <dwt_ioctl+0x154>
 800cd5c:	2c00      	cmp	r4, #0
 800cd5e:	f000 86f6 	beq.w	800db4e <dwt_ioctl+0x1ef6>
 800cd62:	2202      	movs	r2, #2
 800cd64:	2144      	movs	r1, #68	; 0x44
 800cd66:	f7fc feae 	bl	8009ac6 <dwt_read16bitoffsetreg>
 800cd6a:	f3c0 2000 	ubfx	r0, r0, #8, #1
 800cd6e:	7020      	strb	r0, [r4, #0]
 800cd70:	2500      	movs	r5, #0
 800cd72:	f7ff b81b 	b.w	800bdac <dwt_ioctl+0x154>
 800cd76:	2c00      	cmp	r4, #0
 800cd78:	f000 86ec 	beq.w	800db54 <dwt_ioctl+0x1efc>
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	2144      	movs	r1, #68	; 0x44
 800cd80:	f7fc feb3 	bl	8009aea <dwt_read8bitoffsetreg>
 800cd84:	f000 0001 	and.w	r0, r0, #1
 800cd88:	7020      	strb	r0, [r4, #0]
 800cd8a:	2500      	movs	r5, #0
 800cd8c:	f7ff b80e 	b.w	800bdac <dwt_ioctl+0x154>
 800cd90:	2c00      	cmp	r4, #0
 800cd92:	f000 86e2 	beq.w	800db5a <dwt_ioctl+0x1f02>
 800cd96:	8862      	ldrh	r2, [r4, #2]
 800cd98:	8821      	ldrh	r1, [r4, #0]
 800cd9a:	f7fe f9d1 	bl	800b140 <ull_configureframefilter>
 800cd9e:	2500      	movs	r5, #0
 800cda0:	f7ff b804 	b.w	800bdac <dwt_ioctl+0x154>
 800cda4:	9400      	str	r4, [sp, #0]
 800cda6:	2308      	movs	r3, #8
 800cda8:	2200      	movs	r2, #0
 800cdaa:	2104      	movs	r1, #4
 800cdac:	f7fd fa82 	bl	800a2b4 <dwt_writetodevice>
 800cdb0:	2500      	movs	r5, #0
 800cdb2:	f7fe bffb 	b.w	800bdac <dwt_ioctl+0x154>
 800cdb6:	9400      	str	r4, [sp, #0]
 800cdb8:	2308      	movs	r3, #8
 800cdba:	2200      	movs	r2, #0
 800cdbc:	2104      	movs	r1, #4
 800cdbe:	f7fc fe62 	bl	8009a86 <dwt_readfromdevice>
 800cdc2:	2500      	movs	r5, #0
 800cdc4:	f7fe bff2 	b.w	800bdac <dwt_ioctl+0x154>
 800cdc8:	2c00      	cmp	r4, #0
 800cdca:	f000 86c9 	beq.w	800db60 <dwt_ioctl+0x1f08>
 800cdce:	8823      	ldrh	r3, [r4, #0]
 800cdd0:	2202      	movs	r2, #2
 800cdd2:	210c      	movs	r1, #12
 800cdd4:	f7fd fa79 	bl	800a2ca <dwt_write16bitoffsetreg>
 800cdd8:	2500      	movs	r5, #0
 800cdda:	f7fe bfe7 	b.w	800bdac <dwt_ioctl+0x154>
 800cdde:	2c00      	cmp	r4, #0
 800cde0:	f000 86c1 	beq.w	800db66 <dwt_ioctl+0x1f0e>
 800cde4:	8823      	ldrh	r3, [r4, #0]
 800cde6:	2200      	movs	r2, #0
 800cde8:	210c      	movs	r1, #12
 800cdea:	f7fd fa6e 	bl	800a2ca <dwt_write16bitoffsetreg>
 800cdee:	2500      	movs	r5, #0
 800cdf0:	f7fe bfdc 	b.w	800bdac <dwt_ioctl+0x154>
 800cdf4:	4621      	mov	r1, r4
 800cdf6:	f7fd fa3b 	bl	800a270 <ull_readrxtimestamp>
 800cdfa:	2500      	movs	r5, #0
 800cdfc:	f7fe bfd6 	b.w	800bdac <dwt_ioctl+0x154>
 800ce00:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ce02:	7b9b      	ldrb	r3, [r3, #14]
 800ce04:	2b01      	cmp	r3, #1
 800ce06:	d00b      	beq.n	800ce20 <dwt_ioctl+0x11c8>
 800ce08:	2b03      	cmp	r3, #3
 800ce0a:	d112      	bne.n	800ce32 <dwt_ioctl+0x11da>
 800ce0c:	9400      	str	r4, [sp, #0]
 800ce0e:	2305      	movs	r3, #5
 800ce10:	2220      	movs	r2, #32
 800ce12:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800ce16:	f7fc fe36 	bl	8009a86 <dwt_readfromdevice>
 800ce1a:	2500      	movs	r5, #0
 800ce1c:	f7fe bfc6 	b.w	800bdac <dwt_ioctl+0x154>
 800ce20:	9400      	str	r4, [sp, #0]
 800ce22:	2305      	movs	r3, #5
 800ce24:	2200      	movs	r2, #0
 800ce26:	4932      	ldr	r1, [pc, #200]	; (800cef0 <dwt_ioctl+0x1298>)
 800ce28:	f7fc fe2d 	bl	8009a86 <dwt_readfromdevice>
 800ce2c:	2500      	movs	r5, #0
 800ce2e:	f7fe bfbd 	b.w	800bdac <dwt_ioctl+0x154>
 800ce32:	9400      	str	r4, [sp, #0]
 800ce34:	2305      	movs	r3, #5
 800ce36:	2200      	movs	r2, #0
 800ce38:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800ce3c:	f7fc fe23 	bl	8009a86 <dwt_readfromdevice>
 800ce40:	2500      	movs	r5, #0
 800ce42:	f7fe bfb3 	b.w	800bdac <dwt_ioctl+0x154>
 800ce46:	2500      	movs	r5, #0
 800ce48:	f804 5b01 	strb.w	r5, [r4], #1
 800ce4c:	9400      	str	r4, [sp, #0]
 800ce4e:	2304      	movs	r3, #4
 800ce50:	462a      	mov	r2, r5
 800ce52:	216c      	movs	r1, #108	; 0x6c
 800ce54:	f7fc fe17 	bl	8009a86 <dwt_readfromdevice>
 800ce58:	f7fe bfa8 	b.w	800bdac <dwt_ioctl+0x154>
 800ce5c:	2c00      	cmp	r4, #0
 800ce5e:	f000 8685 	beq.w	800db6c <dwt_ioctl+0x1f14>
 800ce62:	2201      	movs	r2, #1
 800ce64:	2160      	movs	r1, #96	; 0x60
 800ce66:	f7fc fe18 	bl	8009a9a <dwt_read32bitoffsetreg>
 800ce6a:	6020      	str	r0, [r4, #0]
 800ce6c:	2500      	movs	r5, #0
 800ce6e:	f7fe bf9d 	b.w	800bdac <dwt_ioctl+0x154>
 800ce72:	2c00      	cmp	r4, #0
 800ce74:	f000 867d 	beq.w	800db72 <dwt_ioctl+0x1f1a>
 800ce78:	2200      	movs	r2, #0
 800ce7a:	2160      	movs	r1, #96	; 0x60
 800ce7c:	f7fc fe0d 	bl	8009a9a <dwt_read32bitoffsetreg>
 800ce80:	6020      	str	r0, [r4, #0]
 800ce82:	2500      	movs	r5, #0
 800ce84:	f7fe bf92 	b.w	800bdac <dwt_ioctl+0x154>
 800ce88:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ce8a:	7b9b      	ldrb	r3, [r3, #14]
 800ce8c:	2b01      	cmp	r3, #1
 800ce8e:	d00b      	beq.n	800cea8 <dwt_ioctl+0x1250>
 800ce90:	2b03      	cmp	r3, #3
 800ce92:	d131      	bne.n	800cef8 <dwt_ioctl+0x12a0>
 800ce94:	9400      	str	r4, [sp, #0]
 800ce96:	2305      	movs	r3, #5
 800ce98:	2228      	movs	r2, #40	; 0x28
 800ce9a:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800ce9e:	f7fc fdf2 	bl	8009a86 <dwt_readfromdevice>
 800cea2:	2500      	movs	r5, #0
 800cea4:	f7fe bf82 	b.w	800bdac <dwt_ioctl+0x154>
 800cea8:	9400      	str	r4, [sp, #0]
 800ceaa:	2305      	movs	r3, #5
 800ceac:	2200      	movs	r2, #0
 800ceae:	4911      	ldr	r1, [pc, #68]	; (800cef4 <dwt_ioctl+0x129c>)
 800ceb0:	f7fc fde9 	bl	8009a86 <dwt_readfromdevice>
 800ceb4:	2500      	movs	r5, #0
 800ceb6:	f7fe bf79 	b.w	800bdac <dwt_ioctl+0x154>
 800ceba:	bf00      	nop
 800cebc:	000f0004 	.word	0x000f0004
 800cec0:	000f0008 	.word	0x000f0008
 800cec4:	000f000c 	.word	0x000f000c
 800cec8:	000f0010 	.word	0x000f0010
 800cecc:	000f0014 	.word	0x000f0014
 800ced0:	000f0018 	.word	0x000f0018
 800ced4:	000f001c 	.word	0x000f001c
 800ced8:	000f0020 	.word	0x000f0020
 800cedc:	00060004 	.word	0x00060004
 800cee0:	0011001c 	.word	0x0011001c
 800cee4:	00180034 	.word	0x00180034
 800cee8:	0018002c 	.word	0x0018002c
 800ceec:	000c0014 	.word	0x000c0014
 800cef0:	00180020 	.word	0x00180020
 800cef4:	00180028 	.word	0x00180028
 800cef8:	9400      	str	r4, [sp, #0]
 800cefa:	2305      	movs	r3, #5
 800cefc:	2200      	movs	r2, #0
 800cefe:	49ce      	ldr	r1, [pc, #824]	; (800d238 <dwt_ioctl+0x15e0>)
 800cf00:	f7fc fdc1 	bl	8009a86 <dwt_readfromdevice>
 800cf04:	2500      	movs	r5, #0
 800cf06:	f7fe bf51 	b.w	800bdac <dwt_ioctl+0x154>
 800cf0a:	2c00      	cmp	r4, #0
 800cf0c:	f000 8634 	beq.w	800db78 <dwt_ioctl+0x1f20>
 800cf10:	2200      	movs	r2, #0
 800cf12:	211c      	movs	r1, #28
 800cf14:	f7fc fdc1 	bl	8009a9a <dwt_read32bitoffsetreg>
 800cf18:	6020      	str	r0, [r4, #0]
 800cf1a:	2500      	movs	r5, #0
 800cf1c:	f7fe bf46 	b.w	800bdac <dwt_ioctl+0x154>
 800cf20:	2c00      	cmp	r4, #0
 800cf22:	f000 862c 	beq.w	800db7e <dwt_ioctl+0x1f26>
 800cf26:	8825      	ldrh	r5, [r4, #0]
 800cf28:	6867      	ldr	r7, [r4, #4]
 800cf2a:	7a23      	ldrb	r3, [r4, #8]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	f000 8629 	beq.w	800db84 <dwt_ioctl+0x1f2c>
 800cf32:	463c      	mov	r4, r7
 800cf34:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 800cf38:	4629      	mov	r1, r5
 800cf3a:	4630      	mov	r0, r6
 800cf3c:	f7fd fa00 	bl	800a340 <_dwt_otpread>
 800cf40:	f844 0b04 	str.w	r0, [r4], #4
 800cf44:	3501      	adds	r5, #1
 800cf46:	b2ad      	uxth	r5, r5
 800cf48:	42bc      	cmp	r4, r7
 800cf4a:	d1f5      	bne.n	800cf38 <dwt_ioctl+0x12e0>
 800cf4c:	2500      	movs	r5, #0
 800cf4e:	f7fe bf2d 	b.w	800bdac <dwt_ioctl+0x154>
 800cf52:	2c00      	cmp	r4, #0
 800cf54:	f000 8619 	beq.w	800db8a <dwt_ioctl+0x1f32>
 800cf58:	7823      	ldrb	r3, [r4, #0]
 800cf5a:	2201      	movs	r2, #1
 800cf5c:	2124      	movs	r1, #36	; 0x24
 800cf5e:	f7fd fb9f 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800cf62:	2500      	movs	r5, #0
 800cf64:	f7fe bf22 	b.w	800bdac <dwt_ioctl+0x154>
 800cf68:	f7fe f90e 	bl	800b188 <ull_run_pgfcal>
 800cf6c:	4605      	mov	r5, r0
 800cf6e:	f7fe bf1d 	b.w	800bdac <dwt_ioctl+0x154>
 800cf72:	4611      	mov	r1, r2
 800cf74:	f7fe fa4e 	bl	800b414 <ull_pgf_cal>
 800cf78:	4605      	mov	r5, r0
 800cf7a:	f7fe bf17 	b.w	800bdac <dwt_ioctl+0x154>
 800cf7e:	2c00      	cmp	r4, #0
 800cf80:	f000 8606 	beq.w	800db90 <dwt_ioctl+0x1f38>
 800cf84:	78a5      	ldrb	r5, [r4, #2]
 800cf86:	2101      	movs	r1, #1
 800cf88:	f7fd f9b0 	bl	800a2ec <ull_force_clocks>
 800cf8c:	2100      	movs	r1, #0
 800cf8e:	4630      	mov	r0, r6
 800cf90:	f7fd fe6e 	bl	800ac70 <ull_enable_rf_tx>
 800cf94:	4630      	mov	r0, r6
 800cf96:	f7fd fe9f 	bl	800acd8 <ull_enable_rftx_blocks>
 800cf9a:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	49a6      	ldr	r1, [pc, #664]	; (800d23c <dwt_ioctl+0x15e4>)
 800cfa2:	4630      	mov	r0, r6
 800cfa4:	f7fd fb7c 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	9300      	str	r3, [sp, #0]
 800cfac:	23ff      	movs	r3, #255	; 0xff
 800cfae:	2200      	movs	r2, #0
 800cfb0:	49a3      	ldr	r1, [pc, #652]	; (800d240 <dwt_ioctl+0x15e8>)
 800cfb2:	4630      	mov	r0, r6
 800cfb4:	f7fd ffaa 	bl	800af0c <dwt_modify8bitoffsetreg>
 800cfb8:	4fa1      	ldr	r7, [pc, #644]	; (800d240 <dwt_ioctl+0x15e8>)
 800cfba:	2500      	movs	r5, #0
 800cfbc:	462a      	mov	r2, r5
 800cfbe:	4639      	mov	r1, r7
 800cfc0:	4630      	mov	r0, r6
 800cfc2:	f7fc fd92 	bl	8009aea <dwt_read8bitoffsetreg>
 800cfc6:	f010 0f01 	tst.w	r0, #1
 800cfca:	d1f7      	bne.n	800cfbc <dwt_ioctl+0x1364>
 800cfcc:	2200      	movs	r2, #0
 800cfce:	499d      	ldr	r1, [pc, #628]	; (800d244 <dwt_ioctl+0x15ec>)
 800cfd0:	4630      	mov	r0, r6
 800cfd2:	f7fc fd78 	bl	8009ac6 <dwt_read16bitoffsetreg>
 800cfd6:	4605      	mov	r5, r0
 800cfd8:	4630      	mov	r0, r6
 800cfda:	f7fd fb03 	bl	800a5e4 <ull_disable_rftx_blocks>
 800cfde:	2100      	movs	r1, #0
 800cfe0:	4630      	mov	r0, r6
 800cfe2:	f7fd fb09 	bl	800a5f8 <ull_disable_rf_tx>
 800cfe6:	2105      	movs	r1, #5
 800cfe8:	4630      	mov	r0, r6
 800cfea:	f7fd f97f 	bl	800a2ec <ull_force_clocks>
 800cfee:	f3c5 050b 	ubfx	r5, r5, #0, #12
 800cff2:	8025      	strh	r5, [r4, #0]
 800cff4:	2500      	movs	r5, #0
 800cff6:	f7fe bed9 	b.w	800bdac <dwt_ioctl+0x154>
 800cffa:	2102      	movs	r1, #2
 800cffc:	f7fe f844 	bl	800b088 <ull_setdwstate>
 800d000:	2101      	movs	r1, #1
 800d002:	4630      	mov	r0, r6
 800d004:	f7fe f840 	bl	800b088 <ull_setdwstate>
 800d008:	2432      	movs	r4, #50	; 0x32
 800d00a:	f04f 0814 	mov.w	r8, #20
 800d00e:	2700      	movs	r7, #0
 800d010:	2544      	movs	r5, #68	; 0x44
 800d012:	4640      	mov	r0, r8
 800d014:	f7f4 faa1 	bl	800155a <deca_usleep>
 800d018:	463a      	mov	r2, r7
 800d01a:	4629      	mov	r1, r5
 800d01c:	4630      	mov	r0, r6
 800d01e:	f7fc fd64 	bl	8009aea <dwt_read8bitoffsetreg>
 800d022:	f010 0f02 	tst.w	r0, #2
 800d026:	d105      	bne.n	800d034 <dwt_ioctl+0x13dc>
 800d028:	1e63      	subs	r3, r4, #1
 800d02a:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800d02e:	d1f0      	bne.n	800d012 <dwt_ioctl+0x13ba>
 800d030:	2501      	movs	r5, #1
 800d032:	e000      	b.n	800d036 <dwt_ioctl+0x13de>
 800d034:	2500      	movs	r5, #0
 800d036:	426d      	negs	r5, r5
 800d038:	f7fe beb8 	b.w	800bdac <dwt_ioctl+0x154>
 800d03c:	2c00      	cmp	r4, #0
 800d03e:	f000 85aa 	beq.w	800db96 <dwt_ioctl+0x1f3e>
 800d042:	7823      	ldrb	r3, [r4, #0]
 800d044:	031b      	lsls	r3, r3, #12
 800d046:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800d04a:	7862      	ldrb	r2, [r4, #1]
 800d04c:	2a01      	cmp	r2, #1
 800d04e:	bf08      	it	eq
 800d050:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 800d054:	9300      	str	r3, [sp, #0]
 800d056:	f46f 43e2 	mvn.w	r3, #28928	; 0x7100
 800d05a:	2200      	movs	r2, #0
 800d05c:	497a      	ldr	r1, [pc, #488]	; (800d248 <dwt_ioctl+0x15f0>)
 800d05e:	f7fd fde3 	bl	800ac28 <dwt_modify32bitoffsetreg>
 800d062:	2500      	movs	r5, #0
 800d064:	f7fe bea2 	b.w	800bdac <dwt_ioctl+0x154>
 800d068:	2c00      	cmp	r4, #0
 800d06a:	f000 8597 	beq.w	800db9c <dwt_ioctl+0x1f44>
 800d06e:	6862      	ldr	r2, [r4, #4]
 800d070:	6821      	ldr	r1, [r4, #0]
 800d072:	f7fd fefb 	bl	800ae6c <ull_setgpiomode>
 800d076:	2500      	movs	r5, #0
 800d078:	f7fe be98 	b.w	800bdac <dwt_ioctl+0x154>
 800d07c:	2c00      	cmp	r4, #0
 800d07e:	f000 8590 	beq.w	800dba2 <dwt_ioctl+0x1f4a>
 800d082:	8823      	ldrh	r3, [r4, #0]
 800d084:	2200      	movs	r2, #0
 800d086:	4971      	ldr	r1, [pc, #452]	; (800d24c <dwt_ioctl+0x15f4>)
 800d088:	f7fd f91f 	bl	800a2ca <dwt_write16bitoffsetreg>
 800d08c:	2500      	movs	r5, #0
 800d08e:	f7fe be8d 	b.w	800bdac <dwt_ioctl+0x154>
 800d092:	2c00      	cmp	r4, #0
 800d094:	f000 8588 	beq.w	800dba8 <dwt_ioctl+0x1f50>
 800d098:	6862      	ldr	r2, [r4, #4]
 800d09a:	8821      	ldrh	r1, [r4, #0]
 800d09c:	f7fe f9ea 	bl	800b474 <ull_setgpiovalue>
 800d0a0:	2500      	movs	r5, #0
 800d0a2:	f7fe be83 	b.w	800bdac <dwt_ioctl+0x154>
 800d0a6:	2c00      	cmp	r4, #0
 800d0a8:	f000 8581 	beq.w	800dbae <dwt_ioctl+0x1f56>
 800d0ac:	7865      	ldrb	r5, [r4, #1]
 800d0ae:	7823      	ldrb	r3, [r4, #0]
 800d0b0:	b18b      	cbz	r3, 800d0d6 <dwt_ioctl+0x147e>
 800d0b2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	739a      	strb	r2, [r3, #14]
 800d0b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0bc:	2208      	movs	r2, #8
 800d0be:	b1e5      	cbz	r5, 800d0fa <dwt_ioctl+0x14a2>
 800d0c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d0c4:	9200      	str	r2, [sp, #0]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	2110      	movs	r1, #16
 800d0ca:	4630      	mov	r0, r6
 800d0cc:	f7fd fdac 	bl	800ac28 <dwt_modify32bitoffsetreg>
 800d0d0:	2500      	movs	r5, #0
 800d0d2:	f7fe be6b 	b.w	800bdac <dwt_ioctl+0x154>
 800d0d6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d0d8:	2201      	movs	r2, #1
 800d0da:	739a      	strb	r2, [r3, #14]
 800d0dc:	2318      	movs	r3, #24
 800d0de:	2200      	movs	r2, #0
 800d0e0:	495b      	ldr	r1, [pc, #364]	; (800d250 <dwt_ioctl+0x15f8>)
 800d0e2:	f7fd f94f 	bl	800a384 <dwt_write32bitoffsetreg>
 800d0e6:	23e8      	movs	r3, #232	; 0xe8
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	495a      	ldr	r1, [pc, #360]	; (800d254 <dwt_ioctl+0x15fc>)
 800d0ec:	4630      	mov	r0, r6
 800d0ee:	f7fd f949 	bl	800a384 <dwt_write32bitoffsetreg>
 800d0f2:	f06f 0308 	mvn.w	r3, #8
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	e7e1      	b.n	800d0be <dwt_ioctl+0x1466>
 800d0fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d0fe:	e7e1      	b.n	800d0c4 <dwt_ioctl+0x146c>
 800d100:	2c00      	cmp	r4, #0
 800d102:	f000 8557 	beq.w	800dbb4 <dwt_ioctl+0x1f5c>
 800d106:	6823      	ldr	r3, [r4, #0]
 800d108:	2200      	movs	r2, #0
 800d10a:	2130      	movs	r1, #48	; 0x30
 800d10c:	f7fd f93a 	bl	800a384 <dwt_write32bitoffsetreg>
 800d110:	2500      	movs	r5, #0
 800d112:	f7fe be4b 	b.w	800bdac <dwt_ioctl+0x154>
 800d116:	2c00      	cmp	r4, #0
 800d118:	f000 854f 	beq.w	800dbba <dwt_ioctl+0x1f62>
 800d11c:	2200      	movs	r2, #0
 800d11e:	4629      	mov	r1, r5
 800d120:	f7fc fcbb 	bl	8009a9a <dwt_read32bitoffsetreg>
 800d124:	6020      	str	r0, [r4, #0]
 800d126:	2500      	movs	r5, #0
 800d128:	f7fe be40 	b.w	800bdac <dwt_ioctl+0x154>
 800d12c:	4623      	mov	r3, r4
 800d12e:	2200      	movs	r2, #0
 800d130:	4629      	mov	r1, r5
 800d132:	f7fd f927 	bl	800a384 <dwt_write32bitoffsetreg>
 800d136:	2500      	movs	r5, #0
 800d138:	f7fe be38 	b.w	800bdac <dwt_ioctl+0x154>
 800d13c:	2c00      	cmp	r4, #0
 800d13e:	f000 853f 	beq.w	800dbc0 <dwt_ioctl+0x1f68>
 800d142:	2203      	movs	r2, #3
 800d144:	4944      	ldr	r1, [pc, #272]	; (800d258 <dwt_ioctl+0x1600>)
 800d146:	f7fc fcd0 	bl	8009aea <dwt_read8bitoffsetreg>
 800d14a:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800d14e:	7020      	strb	r0, [r4, #0]
 800d150:	2500      	movs	r5, #0
 800d152:	f7fe be2b 	b.w	800bdac <dwt_ioctl+0x154>
 800d156:	2c00      	cmp	r4, #0
 800d158:	f000 8535 	beq.w	800dbc6 <dwt_ioctl+0x1f6e>
 800d15c:	6823      	ldr	r3, [r4, #0]
 800d15e:	2200      	movs	r2, #0
 800d160:	2144      	movs	r1, #68	; 0x44
 800d162:	f7fd f90f 	bl	800a384 <dwt_write32bitoffsetreg>
 800d166:	2500      	movs	r5, #0
 800d168:	f7fe be20 	b.w	800bdac <dwt_ioctl+0x154>
 800d16c:	2c00      	cmp	r4, #0
 800d16e:	f000 852d 	beq.w	800dbcc <dwt_ioctl+0x1f74>
 800d172:	8823      	ldrh	r3, [r4, #0]
 800d174:	2200      	movs	r2, #0
 800d176:	2148      	movs	r1, #72	; 0x48
 800d178:	f7fd f8a7 	bl	800a2ca <dwt_write16bitoffsetreg>
 800d17c:	2500      	movs	r5, #0
 800d17e:	f7fe be15 	b.w	800bdac <dwt_ioctl+0x154>
 800d182:	2c00      	cmp	r4, #0
 800d184:	f000 8525 	beq.w	800dbd2 <dwt_ioctl+0x1f7a>
 800d188:	2200      	movs	r2, #0
 800d18a:	2144      	movs	r1, #68	; 0x44
 800d18c:	f7fc fc85 	bl	8009a9a <dwt_read32bitoffsetreg>
 800d190:	6020      	str	r0, [r4, #0]
 800d192:	2500      	movs	r5, #0
 800d194:	f7fe be0a 	b.w	800bdac <dwt_ioctl+0x154>
 800d198:	2c00      	cmp	r4, #0
 800d19a:	f000 851d 	beq.w	800dbd8 <dwt_ioctl+0x1f80>
 800d19e:	2200      	movs	r2, #0
 800d1a0:	2148      	movs	r1, #72	; 0x48
 800d1a2:	f7fc fc90 	bl	8009ac6 <dwt_read16bitoffsetreg>
 800d1a6:	6020      	str	r0, [r4, #0]
 800d1a8:	2500      	movs	r5, #0
 800d1aa:	f7fe bdff 	b.w	800bdac <dwt_ioctl+0x154>
 800d1ae:	2c00      	cmp	r4, #0
 800d1b0:	f000 8515 	beq.w	800dbde <dwt_ioctl+0x1f86>
 800d1b4:	7823      	ldrb	r3, [r4, #0]
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	4928      	ldr	r1, [pc, #160]	; (800d25c <dwt_ioctl+0x1604>)
 800d1ba:	f7fd fa71 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800d1be:	2500      	movs	r5, #0
 800d1c0:	f7fe bdf4 	b.w	800bdac <dwt_ioctl+0x154>
 800d1c4:	2c00      	cmp	r4, #0
 800d1c6:	f000 850d 	beq.w	800dbe4 <dwt_ioctl+0x1f8c>
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	2144      	movs	r1, #68	; 0x44
 800d1ce:	f7fc fc8c 	bl	8009aea <dwt_read8bitoffsetreg>
 800d1d2:	7020      	strb	r0, [r4, #0]
 800d1d4:	2500      	movs	r5, #0
 800d1d6:	f7fe bde9 	b.w	800bdac <dwt_ioctl+0x154>
 800d1da:	2c00      	cmp	r4, #0
 800d1dc:	f000 8505 	beq.w	800dbea <dwt_ioctl+0x1f92>
 800d1e0:	f7fd fa6a 	bl	800a6b8 <ull_getframelength>
 800d1e4:	6020      	str	r0, [r4, #0]
 800d1e6:	2500      	movs	r5, #0
 800d1e8:	f7fe bde0 	b.w	800bdac <dwt_ioctl+0x154>
 800d1ec:	2c00      	cmp	r4, #0
 800d1ee:	f000 84ff 	beq.w	800dbf0 <dwt_ioctl+0x1f98>
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	491a      	ldr	r1, [pc, #104]	; (800d260 <dwt_ioctl+0x1608>)
 800d1f6:	f7fc fc66 	bl	8009ac6 <dwt_read16bitoffsetreg>
 800d1fa:	8020      	strh	r0, [r4, #0]
 800d1fc:	2500      	movs	r5, #0
 800d1fe:	f7fe bdd5 	b.w	800bdac <dwt_ioctl+0x154>
 800d202:	2c00      	cmp	r4, #0
 800d204:	f000 84f7 	beq.w	800dbf6 <dwt_ioctl+0x1f9e>
 800d208:	2200      	movs	r2, #0
 800d20a:	4916      	ldr	r1, [pc, #88]	; (800d264 <dwt_ioctl+0x160c>)
 800d20c:	f7fc fc45 	bl	8009a9a <dwt_read32bitoffsetreg>
 800d210:	6020      	str	r0, [r4, #0]
 800d212:	2500      	movs	r5, #0
 800d214:	f7fe bdca 	b.w	800bdac <dwt_ioctl+0x154>
 800d218:	2c00      	cmp	r4, #0
 800d21a:	f000 84ef 	beq.w	800dbfc <dwt_ioctl+0x1fa4>
 800d21e:	8823      	ldrh	r3, [r4, #0]
 800d220:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d224:	9300      	str	r3, [sp, #0]
 800d226:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800d22a:	2200      	movs	r2, #0
 800d22c:	490d      	ldr	r1, [pc, #52]	; (800d264 <dwt_ioctl+0x160c>)
 800d22e:	f7fe f889 	bl	800b344 <dwt_modify16bitoffsetreg>
 800d232:	2500      	movs	r5, #0
 800d234:	f7fe bdba 	b.w	800bdac <dwt_ioctl+0x154>
 800d238:	000c0008 	.word	0x000c0008
 800d23c:	0007001c 	.word	0x0007001c
 800d240:	00080010 	.word	0x00080010
 800d244:	00080014 	.word	0x00080014
 800d248:	00070014 	.word	0x00070014
 800d24c:	00050008 	.word	0x00050008
 800d250:	001f000c 	.word	0x001f000c
 800d254:	001f0010 	.word	0x001f0010
 800d258:	00030060 	.word	0x00030060
 800d25c:	00010018 	.word	0x00010018
 800d260:	0005002c 	.word	0x0005002c
 800d264:	000e001c 	.word	0x000e001c
 800d268:	2c00      	cmp	r4, #0
 800d26a:	f000 84ca 	beq.w	800dc02 <dwt_ioctl+0x1faa>
 800d26e:	88a7      	ldrh	r7, [r4, #4]
 800d270:	f8d4 b008 	ldr.w	fp, [r4, #8]
 800d274:	7b23      	ldrb	r3, [r4, #12]
 800d276:	9306      	str	r3, [sp, #24]
 800d278:	6922      	ldr	r2, [r4, #16]
 800d27a:	9204      	str	r2, [sp, #16]
 800d27c:	6962      	ldr	r2, [r4, #20]
 800d27e:	9205      	str	r2, [sp, #20]
 800d280:	f00b 0203 	and.w	r2, fp, #3
 800d284:	f3cb 0085 	ubfx	r0, fp, #2, #6
 800d288:	2b05      	cmp	r3, #5
 800d28a:	d145      	bne.n	800d318 <dwt_ioctl+0x16c0>
 800d28c:	f5b7 7fb1 	cmp.w	r7, #354	; 0x162
 800d290:	bf28      	it	cs
 800d292:	f44f 77b1 	movcs.w	r7, #354	; 0x162
 800d296:	f8df 9338 	ldr.w	r9, [pc, #824]	; 800d5d0 <dwt_ioctl+0x1978>
 800d29a:	2f04      	cmp	r7, #4
 800d29c:	d805      	bhi.n	800d2aa <dwt_ioctl+0x1652>
 800d29e:	eb09 0300 	add.w	r3, r9, r0
 800d2a2:	785b      	ldrb	r3, [r3, #1]
 800d2a4:	3b05      	subs	r3, #5
 800d2a6:	429f      	cmp	r7, r3
 800d2a8:	db3e      	blt.n	800d328 <dwt_ioctl+0x16d0>
 800d2aa:	2a01      	cmp	r2, #1
 800d2ac:	d87c      	bhi.n	800d3a8 <dwt_ioctl+0x1750>
 800d2ae:	4bc4      	ldr	r3, [pc, #784]	; (800d5c0 <dwt_ioctl+0x1968>)
 800d2b0:	5c99      	ldrb	r1, [r3, r2]
 800d2b2:	463e      	mov	r6, r7
 800d2b4:	42b9      	cmp	r1, r7
 800d2b6:	da79      	bge.n	800d3ac <dwt_ioctl+0x1754>
 800d2b8:	1c55      	adds	r5, r2, #1
 800d2ba:	fa53 f585 	uxtab	r5, r3, r5
 800d2be:	2300      	movs	r3, #0
 800d2c0:	440b      	add	r3, r1
 800d2c2:	b29b      	uxth	r3, r3
 800d2c4:	3201      	adds	r2, #1
 800d2c6:	b2d2      	uxtb	r2, r2
 800d2c8:	2a02      	cmp	r2, #2
 800d2ca:	d005      	beq.n	800d2d8 <dwt_ioctl+0x1680>
 800d2cc:	f815 1b01 	ldrb.w	r1, [r5], #1
 800d2d0:	eba6 0c03 	sub.w	ip, r6, r3
 800d2d4:	4561      	cmp	r1, ip
 800d2d6:	dbf3      	blt.n	800d2c0 <dwt_ioctl+0x1668>
 800d2d8:	429f      	cmp	r7, r3
 800d2da:	bf08      	it	eq
 800d2dc:	9003      	streq	r0, [sp, #12]
 800d2de:	d069      	beq.n	800d3b4 <dwt_ioctl+0x175c>
 800d2e0:	f107 0805 	add.w	r8, r7, #5
 800d2e4:	fa1f f888 	uxth.w	r8, r8
 800d2e8:	2580      	movs	r5, #128	; 0x80
 800d2ea:	2100      	movs	r1, #0
 800d2ec:	9107      	str	r1, [sp, #28]
 800d2ee:	9103      	str	r1, [sp, #12]
 800d2f0:	9108      	str	r1, [sp, #32]
 800d2f2:	460e      	mov	r6, r1
 800d2f4:	2105      	movs	r1, #5
 800d2f6:	46be      	mov	lr, r7
 800d2f8:	428f      	cmp	r7, r1
 800d2fa:	bf38      	it	cc
 800d2fc:	468e      	movcc	lr, r1
 800d2fe:	f1ae 0e05 	sub.w	lr, lr, #5
 800d302:	fa1f fe8e 	uxth.w	lr, lr
 800d306:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 800d5c0 <dwt_ioctl+0x1968>
 800d30a:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800d30e:	468b      	mov	fp, r1
 800d310:	46bc      	mov	ip, r7
 800d312:	4637      	mov	r7, r6
 800d314:	f000 bcec 	b.w	800dcf0 <dwt_ioctl+0x2098>
 800d318:	f240 1331 	movw	r3, #305	; 0x131
 800d31c:	429f      	cmp	r7, r3
 800d31e:	bf28      	it	cs
 800d320:	461f      	movcs	r7, r3
 800d322:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 800d5d4 <dwt_ioctl+0x197c>
 800d326:	e7b8      	b.n	800d29a <dwt_ioctl+0x1642>
 800d328:	2300      	movs	r3, #0
 800d32a:	9a05      	ldr	r2, [sp, #20]
 800d32c:	8013      	strh	r3, [r2, #0]
 800d32e:	9a04      	ldr	r2, [sp, #16]
 800d330:	f8c2 b000 	str.w	fp, [r2]
 800d334:	e04d      	b.n	800d3d2 <dwt_ioctl+0x177a>
 800d336:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800d33a:	2300      	movs	r3, #0
 800d33c:	9a05      	ldr	r2, [sp, #20]
 800d33e:	8013      	strh	r3, [r2, #0]
 800d340:	9b04      	ldr	r3, [sp, #16]
 800d342:	f8c3 b000 	str.w	fp, [r3]
 800d346:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d34a:	e042      	b.n	800d3d2 <dwt_ioctl+0x177a>
 800d34c:	fa1f fb81 	uxth.w	fp, r1
 800d350:	9207      	str	r2, [sp, #28]
 800d352:	9003      	str	r0, [sp, #12]
 800d354:	9308      	str	r3, [sp, #32]
 800d356:	2701      	movs	r7, #1
 800d358:	f000 bcdb 	b.w	800dd12 <dwt_ioctl+0x20ba>
 800d35c:	2f00      	cmp	r7, #0
 800d35e:	f040 849b 	bne.w	800dc98 <dwt_ioctl+0x2040>
 800d362:	4598      	cmp	r8, r3
 800d364:	f200 84b0 	bhi.w	800dcc8 <dwt_ioctl+0x2070>
 800d368:	2e00      	cmp	r6, #0
 800d36a:	d039      	beq.n	800d3e0 <dwt_ioctl+0x1788>
 800d36c:	283f      	cmp	r0, #63	; 0x3f
 800d36e:	f000 84d5 	beq.w	800dd1c <dwt_ioctl+0x20c4>
 800d372:	2700      	movs	r7, #0
 800d374:	f819 1000 	ldrb.w	r1, [r9, r0]
 800d378:	1a5b      	subs	r3, r3, r1
 800d37a:	b29b      	uxth	r3, r3
 800d37c:	1e46      	subs	r6, r0, #1
 800d37e:	f006 003f 	and.w	r0, r6, #63	; 0x3f
 800d382:	f016 063f 	ands.w	r6, r6, #63	; 0x3f
 800d386:	bf18      	it	ne
 800d388:	2601      	movne	r6, #1
 800d38a:	f000 bca9 	b.w	800dce0 <dwt_ioctl+0x2088>
 800d38e:	9906      	ldr	r1, [sp, #24]
 800d390:	2909      	cmp	r1, #9
 800d392:	f040 84c9 	bne.w	800dd28 <dwt_ioctl+0x20d0>
 800d396:	213f      	movs	r1, #63	; 0x3f
 800d398:	9103      	str	r1, [sp, #12]
 800d39a:	e00b      	b.n	800d3b4 <dwt_ioctl+0x175c>
 800d39c:	b2b3      	uxth	r3, r6
 800d39e:	3201      	adds	r2, #1
 800d3a0:	b2d2      	uxtb	r2, r2
 800d3a2:	213f      	movs	r1, #63	; 0x3f
 800d3a4:	9103      	str	r1, [sp, #12]
 800d3a6:	e005      	b.n	800d3b4 <dwt_ioctl+0x175c>
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	e795      	b.n	800d2d8 <dwt_ioctl+0x1680>
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	e793      	b.n	800d2d8 <dwt_ioctl+0x1680>
 800d3b0:	9003      	str	r0, [sp, #12]
 800d3b2:	4663      	mov	r3, ip
 800d3b4:	9905      	ldr	r1, [sp, #20]
 800d3b6:	800b      	strh	r3, [r1, #0]
 800d3b8:	9b03      	ldr	r3, [sp, #12]
 800d3ba:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
 800d3be:	b2d2      	uxtb	r2, r2
 800d3c0:	0413      	lsls	r3, r2, #16
 800d3c2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d3c6:	4313      	orrs	r3, r2
 800d3c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d3cc:	9a04      	ldr	r2, [sp, #16]
 800d3ce:	6013      	str	r3, [r2, #0]
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	6023      	str	r3, [r4, #0]
 800d3d4:	2500      	movs	r5, #0
 800d3d6:	f7fe bce9 	b.w	800bdac <dwt_ioctl+0x154>
 800d3da:	9a07      	ldr	r2, [sp, #28]
 800d3dc:	9b08      	ldr	r3, [sp, #32]
 800d3de:	e7e9      	b.n	800d3b4 <dwt_ioctl+0x175c>
 800d3e0:	9003      	str	r0, [sp, #12]
 800d3e2:	e7e7      	b.n	800d3b4 <dwt_ioctl+0x175c>
 800d3e4:	9a07      	ldr	r2, [sp, #28]
 800d3e6:	9b08      	ldr	r3, [sp, #32]
 800d3e8:	e7e4      	b.n	800d3b4 <dwt_ioctl+0x175c>
 800d3ea:	213f      	movs	r1, #63	; 0x3f
 800d3ec:	9103      	str	r1, [sp, #12]
 800d3ee:	e7e1      	b.n	800d3b4 <dwt_ioctl+0x175c>
 800d3f0:	2c00      	cmp	r4, #0
 800d3f2:	f000 8409 	beq.w	800dc08 <dwt_ioctl+0x1fb0>
 800d3f6:	7827      	ldrb	r7, [r4, #0]
 800d3f8:	7864      	ldrb	r4, [r4, #1]
 800d3fa:	f7f4 f885 	bl	8001508 <decamutexon>
 800d3fe:	4605      	mov	r5, r0
 800d400:	2c02      	cmp	r4, #2
 800d402:	d00e      	beq.n	800d422 <dwt_ioctl+0x17ca>
 800d404:	2c04      	cmp	r4, #4
 800d406:	d00c      	beq.n	800d422 <dwt_ioctl+0x17ca>
 800d408:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
 800d40c:	2c01      	cmp	r4, #1
 800d40e:	d01a      	beq.n	800d446 <dwt_ioctl+0x17ee>
 800d410:	43fb      	mvns	r3, r7
 800d412:	2200      	movs	r2, #0
 800d414:	9200      	str	r2, [sp, #0]
 800d416:	b2db      	uxtb	r3, r3
 800d418:	496a      	ldr	r1, [pc, #424]	; (800d5c4 <dwt_ioctl+0x196c>)
 800d41a:	4630      	mov	r0, r6
 800d41c:	f7fd fd76 	bl	800af0c <dwt_modify8bitoffsetreg>
 800d420:	e005      	b.n	800d42e <dwt_ioctl+0x17d6>
 800d422:	463b      	mov	r3, r7
 800d424:	2200      	movs	r2, #0
 800d426:	4967      	ldr	r1, [pc, #412]	; (800d5c4 <dwt_ioctl+0x196c>)
 800d428:	4630      	mov	r0, r6
 800d42a:	f7fd f939 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800d42e:	463b      	mov	r3, r7
 800d430:	2200      	movs	r2, #0
 800d432:	4965      	ldr	r1, [pc, #404]	; (800d5c8 <dwt_ioctl+0x1970>)
 800d434:	4630      	mov	r0, r6
 800d436:	f7fc ffa5 	bl	800a384 <dwt_write32bitoffsetreg>
 800d43a:	4628      	mov	r0, r5
 800d43c:	f7f4 f875 	bl	800152a <decamutexoff>
 800d440:	2500      	movs	r5, #0
 800d442:	f7fe bcb3 	b.w	800bdac <dwt_ioctl+0x154>
 800d446:	9700      	str	r7, [sp, #0]
 800d448:	23ff      	movs	r3, #255	; 0xff
 800d44a:	2200      	movs	r2, #0
 800d44c:	495d      	ldr	r1, [pc, #372]	; (800d5c4 <dwt_ioctl+0x196c>)
 800d44e:	4630      	mov	r0, r6
 800d450:	f7fd fd5c 	bl	800af0c <dwt_modify8bitoffsetreg>
 800d454:	e7eb      	b.n	800d42e <dwt_ioctl+0x17d6>
 800d456:	2302      	movs	r3, #2
 800d458:	9301      	str	r3, [sp, #4]
 800d45a:	2500      	movs	r5, #0
 800d45c:	9500      	str	r5, [sp, #0]
 800d45e:	462b      	mov	r3, r5
 800d460:	462a      	mov	r2, r5
 800d462:	211a      	movs	r1, #26
 800d464:	f7fc fa91 	bl	800998a <dwt_xfer3xxx>
 800d468:	f7fe bca0 	b.w	800bdac <dwt_ioctl+0x154>
 800d46c:	f7fe fbe0 	bl	800bc30 <ull_softreset_fcmd>
 800d470:	2500      	movs	r5, #0
 800d472:	f7fe bc9b 	b.w	800bdac <dwt_ioctl+0x154>
 800d476:	f7fe fbc7 	bl	800bc08 <ull_softreset_no_sema_fcmd>
 800d47a:	2500      	movs	r5, #0
 800d47c:	f7fe bc96 	b.w	800bdac <dwt_ioctl+0x154>
 800d480:	2302      	movs	r3, #2
 800d482:	9301      	str	r3, [sp, #4]
 800d484:	2500      	movs	r5, #0
 800d486:	9500      	str	r5, [sp, #0]
 800d488:	462b      	mov	r3, r5
 800d48a:	462a      	mov	r2, r5
 800d48c:	2114      	movs	r1, #20
 800d48e:	f7fc fa7c 	bl	800998a <dwt_xfer3xxx>
 800d492:	f7fe bc8b 	b.w	800bdac <dwt_ioctl+0x154>
 800d496:	2402      	movs	r4, #2
 800d498:	9401      	str	r4, [sp, #4]
 800d49a:	2500      	movs	r5, #0
 800d49c:	9500      	str	r5, [sp, #0]
 800d49e:	462b      	mov	r3, r5
 800d4a0:	462a      	mov	r2, r5
 800d4a2:	2115      	movs	r1, #21
 800d4a4:	f7fc fa71 	bl	800998a <dwt_xfer3xxx>
 800d4a8:	9401      	str	r4, [sp, #4]
 800d4aa:	9500      	str	r5, [sp, #0]
 800d4ac:	462b      	mov	r3, r5
 800d4ae:	462a      	mov	r2, r5
 800d4b0:	2115      	movs	r1, #21
 800d4b2:	4630      	mov	r0, r6
 800d4b4:	f7fc fa69 	bl	800998a <dwt_xfer3xxx>
 800d4b8:	f7fe bc78 	b.w	800bdac <dwt_ioctl+0x154>
 800d4bc:	2302      	movs	r3, #2
 800d4be:	9301      	str	r3, [sp, #4]
 800d4c0:	2500      	movs	r5, #0
 800d4c2:	9500      	str	r5, [sp, #0]
 800d4c4:	462b      	mov	r3, r5
 800d4c6:	462a      	mov	r2, r5
 800d4c8:	2116      	movs	r1, #22
 800d4ca:	f7fc fa5e 	bl	800998a <dwt_xfer3xxx>
 800d4ce:	f7fe bc6d 	b.w	800bdac <dwt_ioctl+0x154>
 800d4d2:	2c00      	cmp	r4, #0
 800d4d4:	f000 839b 	beq.w	800dc0e <dwt_ioctl+0x1fb6>
 800d4d8:	b93a      	cbnz	r2, 800d4ea <dwt_ioctl+0x1892>
 800d4da:	2200      	movs	r2, #0
 800d4dc:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800d4e0:	f7fc fb03 	bl	8009aea <dwt_read8bitoffsetreg>
 800d4e4:	7020      	strb	r0, [r4, #0]
 800d4e6:	f7fe bc61 	b.w	800bdac <dwt_ioctl+0x154>
 800d4ea:	2201      	movs	r2, #1
 800d4ec:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800d4f0:	f7fc fafb 	bl	8009aea <dwt_read8bitoffsetreg>
 800d4f4:	7020      	strb	r0, [r4, #0]
 800d4f6:	2500      	movs	r5, #0
 800d4f8:	f7fe bc58 	b.w	800bdac <dwt_ioctl+0x154>
 800d4fc:	2c00      	cmp	r4, #0
 800d4fe:	f000 8389 	beq.w	800dc14 <dwt_ioctl+0x1fbc>
 800d502:	7824      	ldrb	r4, [r4, #0]
 800d504:	2200      	movs	r2, #0
 800d506:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800d50a:	f7fc faee 	bl	8009aea <dwt_read8bitoffsetreg>
 800d50e:	f000 039f 	and.w	r3, r0, #159	; 0x9f
 800d512:	4323      	orrs	r3, r4
 800d514:	2200      	movs	r2, #0
 800d516:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800d51a:	4630      	mov	r0, r6
 800d51c:	f7fd f8c0 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800d520:	2500      	movs	r5, #0
 800d522:	f7fe bc43 	b.w	800bdac <dwt_ioctl+0x154>
 800d526:	2c00      	cmp	r4, #0
 800d528:	f000 8377 	beq.w	800dc1a <dwt_ioctl+0x1fc2>
 800d52c:	7824      	ldrb	r4, [r4, #0]
 800d52e:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
 800d532:	d01e      	beq.n	800d572 <dwt_ioctl+0x191a>
 800d534:	2d01      	cmp	r5, #1
 800d536:	f040 8373 	bne.w	800dc20 <dwt_ioctl+0x1fc8>
 800d53a:	2502      	movs	r5, #2
 800d53c:	2201      	movs	r2, #1
 800d53e:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800d542:	4630      	mov	r0, r6
 800d544:	f7fc fad1 	bl	8009aea <dwt_read8bitoffsetreg>
 800d548:	b9ac      	cbnz	r4, 800d576 <dwt_ioctl+0x191e>
 800d54a:	ea20 0305 	bic.w	r3, r0, r5
 800d54e:	b2db      	uxtb	r3, r3
 800d550:	2201      	movs	r2, #1
 800d552:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800d556:	4630      	mov	r0, r6
 800d558:	f7fd f8a2 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800d55c:	2200      	movs	r2, #0
 800d55e:	2110      	movs	r1, #16
 800d560:	4630      	mov	r0, r6
 800d562:	f7fc fa9a 	bl	8009a9a <dwt_read32bitoffsetreg>
 800d566:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800d56a:	d00b      	beq.n	800d584 <dwt_ioctl+0x192c>
 800d56c:	2500      	movs	r5, #0
 800d56e:	f7fe bc1d 	b.w	800bdac <dwt_ioctl+0x154>
 800d572:	2504      	movs	r5, #4
 800d574:	e7e2      	b.n	800d53c <dwt_ioctl+0x18e4>
 800d576:	2c01      	cmp	r4, #1
 800d578:	f040 8356 	bne.w	800dc28 <dwt_ioctl+0x1fd0>
 800d57c:	ea40 0305 	orr.w	r3, r0, r5
 800d580:	b2db      	uxtb	r3, r3
 800d582:	e7e5      	b.n	800d550 <dwt_ioctl+0x18f8>
 800d584:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d588:	9300      	str	r3, [sp, #0]
 800d58a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d58e:	2200      	movs	r2, #0
 800d590:	2110      	movs	r1, #16
 800d592:	4630      	mov	r0, r6
 800d594:	f7fd fb48 	bl	800ac28 <dwt_modify32bitoffsetreg>
 800d598:	2500      	movs	r5, #0
 800d59a:	f7fe bc07 	b.w	800bdac <dwt_ioctl+0x154>
 800d59e:	2c00      	cmp	r4, #0
 800d5a0:	f000 8346 	beq.w	800dc30 <dwt_ioctl+0x1fd8>
 800d5a4:	7823      	ldrb	r3, [r4, #0]
 800d5a6:	035b      	lsls	r3, r3, #13
 800d5a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d5ac:	9300      	str	r3, [sp, #0]
 800d5ae:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	4905      	ldr	r1, [pc, #20]	; (800d5cc <dwt_ioctl+0x1974>)
 800d5b6:	f7fd fec5 	bl	800b344 <dwt_modify16bitoffsetreg>
 800d5ba:	2500      	movs	r5, #0
 800d5bc:	f7fe bbf6 	b.w	800bdac <dwt_ioctl+0x154>
 800d5c0:	08015f98 	.word	0x08015f98
 800d5c4:	0001001c 	.word	0x0001001c
 800d5c8:	00010018 	.word	0x00010018
 800d5cc:	000e000c 	.word	0x000e000c
 800d5d0:	08015f18 	.word	0x08015f18
 800d5d4:	08015f58 	.word	0x08015f58
 800d5d8:	2c00      	cmp	r4, #0
 800d5da:	f000 832c 	beq.w	800dc36 <dwt_ioctl+0x1fde>
 800d5de:	7825      	ldrb	r5, [r4, #0]
 800d5e0:	6862      	ldr	r2, [r4, #4]
 800d5e2:	2a01      	cmp	r2, #1
 800d5e4:	bf15      	itete	ne
 800d5e6:	f46f 3360 	mvnne.w	r3, #229376	; 0x38000
 800d5ea:	f46f 43e0 	mvneq.w	r3, #28672	; 0x7000
 800d5ee:	27df      	movne	r7, #223	; 0xdf
 800d5f0:	27ef      	moveq	r7, #239	; 0xef
 800d5f2:	bf14      	ite	ne
 800d5f4:	f04f 0820 	movne.w	r8, #32
 800d5f8:	f04f 0810 	moveq.w	r8, #16
 800d5fc:	2400      	movs	r4, #0
 800d5fe:	9400      	str	r4, [sp, #0]
 800d600:	4622      	mov	r2, r4
 800d602:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800d606:	f7fd fb0f 	bl	800ac28 <dwt_modify32bitoffsetreg>
 800d60a:	9400      	str	r4, [sp, #0]
 800d60c:	463b      	mov	r3, r7
 800d60e:	4622      	mov	r2, r4
 800d610:	49be      	ldr	r1, [pc, #760]	; (800d90c <dwt_ioctl+0x1cb4>)
 800d612:	4630      	mov	r0, r6
 800d614:	f7fd fc7a 	bl	800af0c <dwt_modify8bitoffsetreg>
 800d618:	2d01      	cmp	r5, #1
 800d61a:	d003      	beq.n	800d624 <dwt_ioctl+0x19cc>
 800d61c:	b165      	cbz	r5, 800d638 <dwt_ioctl+0x19e0>
 800d61e:	2500      	movs	r5, #0
 800d620:	f7fe bbc4 	b.w	800bdac <dwt_ioctl+0x154>
 800d624:	4625      	mov	r5, r4
 800d626:	9400      	str	r4, [sp, #0]
 800d628:	463b      	mov	r3, r7
 800d62a:	4622      	mov	r2, r4
 800d62c:	49b8      	ldr	r1, [pc, #736]	; (800d910 <dwt_ioctl+0x1cb8>)
 800d62e:	4630      	mov	r0, r6
 800d630:	f7fd fc6c 	bl	800af0c <dwt_modify8bitoffsetreg>
 800d634:	f7fe bbba 	b.w	800bdac <dwt_ioctl+0x154>
 800d638:	f8cd 8000 	str.w	r8, [sp]
 800d63c:	23ff      	movs	r3, #255	; 0xff
 800d63e:	2200      	movs	r2, #0
 800d640:	49b3      	ldr	r1, [pc, #716]	; (800d910 <dwt_ioctl+0x1cb8>)
 800d642:	4630      	mov	r0, r6
 800d644:	f7fd fc62 	bl	800af0c <dwt_modify8bitoffsetreg>
 800d648:	f7fe bbb0 	b.w	800bdac <dwt_ioctl+0x154>
 800d64c:	2c00      	cmp	r4, #0
 800d64e:	f000 82f5 	beq.w	800dc3c <dwt_ioctl+0x1fe4>
 800d652:	7822      	ldrb	r2, [r4, #0]
 800d654:	f012 0f01 	tst.w	r2, #1
 800d658:	d02d      	beq.n	800d6b6 <dwt_ioctl+0x1a5e>
 800d65a:	0157      	lsls	r7, r2, #5
 800d65c:	f007 0740 	and.w	r7, r7, #64	; 0x40
 800d660:	2440      	movs	r4, #64	; 0x40
 800d662:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800d666:	f012 0f04 	tst.w	r2, #4
 800d66a:	d028      	beq.n	800d6be <dwt_ioctl+0x1a66>
 800d66c:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 800d670:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800d674:	0112      	lsls	r2, r2, #4
 800d676:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800d67a:	4317      	orrs	r7, r2
 800d67c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d680:	9200      	str	r2, [sp, #0]
 800d682:	43db      	mvns	r3, r3
 800d684:	2200      	movs	r2, #0
 800d686:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800d68a:	4630      	mov	r0, r6
 800d68c:	f7fd facc 	bl	800ac28 <dwt_modify32bitoffsetreg>
 800d690:	43e4      	mvns	r4, r4
 800d692:	b2a4      	uxth	r4, r4
 800d694:	2500      	movs	r5, #0
 800d696:	9500      	str	r5, [sp, #0]
 800d698:	4623      	mov	r3, r4
 800d69a:	462a      	mov	r2, r5
 800d69c:	499b      	ldr	r1, [pc, #620]	; (800d90c <dwt_ioctl+0x1cb4>)
 800d69e:	4630      	mov	r0, r6
 800d6a0:	f7fd fe50 	bl	800b344 <dwt_modify16bitoffsetreg>
 800d6a4:	9700      	str	r7, [sp, #0]
 800d6a6:	4623      	mov	r3, r4
 800d6a8:	462a      	mov	r2, r5
 800d6aa:	4999      	ldr	r1, [pc, #612]	; (800d910 <dwt_ioctl+0x1cb8>)
 800d6ac:	4630      	mov	r0, r6
 800d6ae:	f7fd fe49 	bl	800b344 <dwt_modify16bitoffsetreg>
 800d6b2:	f7fe bb7b 	b.w	800bdac <dwt_ioctl+0x154>
 800d6b6:	2700      	movs	r7, #0
 800d6b8:	463c      	mov	r4, r7
 800d6ba:	463b      	mov	r3, r7
 800d6bc:	e7d3      	b.n	800d666 <dwt_ioctl+0x1a0e>
 800d6be:	2200      	movs	r2, #0
 800d6c0:	e7de      	b.n	800d680 <dwt_ioctl+0x1a28>
 800d6c2:	2308      	movs	r3, #8
 800d6c4:	9300      	str	r3, [sp, #0]
 800d6c6:	23ff      	movs	r3, #255	; 0xff
 800d6c8:	2201      	movs	r2, #1
 800d6ca:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800d6ce:	f7fd fc1d 	bl	800af0c <dwt_modify8bitoffsetreg>
 800d6d2:	4c90      	ldr	r4, [pc, #576]	; (800d914 <dwt_ioctl+0x1cbc>)
 800d6d4:	2302      	movs	r3, #2
 800d6d6:	9300      	str	r3, [sp, #0]
 800d6d8:	23ff      	movs	r3, #255	; 0xff
 800d6da:	2203      	movs	r2, #3
 800d6dc:	4621      	mov	r1, r4
 800d6de:	4630      	mov	r0, r6
 800d6e0:	f7fd fc14 	bl	800af0c <dwt_modify8bitoffsetreg>
 800d6e4:	2500      	movs	r5, #0
 800d6e6:	9500      	str	r5, [sp, #0]
 800d6e8:	23f7      	movs	r3, #247	; 0xf7
 800d6ea:	2201      	movs	r2, #1
 800d6ec:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800d6f0:	4630      	mov	r0, r6
 800d6f2:	f7fd fc0b 	bl	800af0c <dwt_modify8bitoffsetreg>
 800d6f6:	9500      	str	r5, [sp, #0]
 800d6f8:	23fd      	movs	r3, #253	; 0xfd
 800d6fa:	2203      	movs	r2, #3
 800d6fc:	4621      	mov	r1, r4
 800d6fe:	4630      	mov	r0, r6
 800d700:	f7fd fc04 	bl	800af0c <dwt_modify8bitoffsetreg>
 800d704:	f7fe bb52 	b.w	800bdac <dwt_ioctl+0x154>
 800d708:	2c00      	cmp	r4, #0
 800d70a:	f000 829a 	beq.w	800dc42 <dwt_ioctl+0x1fea>
 800d70e:	8863      	ldrh	r3, [r4, #2]
 800d710:	00db      	lsls	r3, r3, #3
 800d712:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800d716:	7822      	ldrb	r2, [r4, #0]
 800d718:	b10a      	cbz	r2, 800d71e <dwt_ioctl+0x1ac6>
 800d71a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d71e:	9300      	str	r3, [sp, #0]
 800d720:	f24f 0307 	movw	r3, #61447	; 0xf007
 800d724:	2200      	movs	r2, #0
 800d726:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800d72a:	4630      	mov	r0, r6
 800d72c:	f7fd fe0a 	bl	800b344 <dwt_modify16bitoffsetreg>
 800d730:	2500      	movs	r5, #0
 800d732:	f7fe bb3b 	b.w	800bdac <dwt_ioctl+0x154>
 800d736:	2c00      	cmp	r4, #0
 800d738:	f000 8286 	beq.w	800dc48 <dwt_ioctl+0x1ff0>
 800d73c:	b2e3      	uxtb	r3, r4
 800d73e:	1c9a      	adds	r2, r3, #2
 800d740:	2301      	movs	r3, #1
 800d742:	4093      	lsls	r3, r2
 800d744:	3b01      	subs	r3, #1
 800d746:	b2db      	uxtb	r3, r3
 800d748:	2200      	movs	r2, #0
 800d74a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800d74e:	f7fc ffa7 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800d752:	2500      	movs	r5, #0
 800d754:	f7fe bb2a 	b.w	800bdac <dwt_ioctl+0x154>
 800d758:	2c00      	cmp	r4, #0
 800d75a:	f000 8278 	beq.w	800dc4e <dwt_ioctl+0x1ff6>
 800d75e:	7ae3      	ldrb	r3, [r4, #11]
 800d760:	2b00      	cmp	r3, #0
 800d762:	f000 8277 	beq.w	800dc54 <dwt_ioctl+0x1ffc>
 800d766:	7b63      	ldrb	r3, [r4, #13]
 800d768:	2b01      	cmp	r3, #1
 800d76a:	d921      	bls.n	800d7b0 <dwt_ioctl+0x1b58>
 800d76c:	7b22      	ldrb	r2, [r4, #12]
 800d76e:	4b6a      	ldr	r3, [pc, #424]	; (800d918 <dwt_ioctl+0x1cc0>)
 800d770:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800d774:	0112      	lsls	r2, r2, #4
 800d776:	0ad3      	lsrs	r3, r2, #11
 800d778:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800d77c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d780:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800d784:	bf28      	it	cs
 800d786:	3301      	addcs	r3, #1
 800d788:	b29b      	uxth	r3, r3
 800d78a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d78e:	9300      	str	r3, [sp, #0]
 800d790:	f64f 7380 	movw	r3, #65408	; 0xff80
 800d794:	2202      	movs	r2, #2
 800d796:	4961      	ldr	r1, [pc, #388]	; (800d91c <dwt_ioctl+0x1cc4>)
 800d798:	4630      	mov	r0, r6
 800d79a:	f7fd fdd3 	bl	800b344 <dwt_modify16bitoffsetreg>
 800d79e:	2394      	movs	r3, #148	; 0x94
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	495f      	ldr	r1, [pc, #380]	; (800d920 <dwt_ioctl+0x1cc8>)
 800d7a4:	4630      	mov	r0, r6
 800d7a6:	f7fc ff7b 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800d7aa:	2500      	movs	r5, #0
 800d7ac:	f7fe bafe 	b.w	800bdac <dwt_ioctl+0x154>
 800d7b0:	7b22      	ldrb	r2, [r4, #12]
 800d7b2:	4b59      	ldr	r3, [pc, #356]	; (800d918 <dwt_ioctl+0x1cc0>)
 800d7b4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800d7b8:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 800d7bc:	fb02 f203 	mul.w	r2, r2, r3
 800d7c0:	0c93      	lsrs	r3, r2, #18
 800d7c2:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 800d7c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d7ca:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800d7ce:	bf28      	it	cs
 800d7d0:	3301      	addcs	r3, #1
 800d7d2:	b29b      	uxth	r3, r3
 800d7d4:	e7d9      	b.n	800d78a <dwt_ioctl+0x1b32>
 800d7d6:	2c00      	cmp	r4, #0
 800d7d8:	f000 823f 	beq.w	800dc5a <dwt_ioctl+0x2002>
 800d7dc:	2200      	movs	r2, #0
 800d7de:	4951      	ldr	r1, [pc, #324]	; (800d924 <dwt_ioctl+0x1ccc>)
 800d7e0:	f7fc f95b 	bl	8009a9a <dwt_read32bitoffsetreg>
 800d7e4:	6020      	str	r0, [r4, #0]
 800d7e6:	2500      	movs	r5, #0
 800d7e8:	f7fe bae0 	b.w	800bdac <dwt_ioctl+0x154>
 800d7ec:	2c00      	cmp	r4, #0
 800d7ee:	f000 8237 	beq.w	800dc60 <dwt_ioctl+0x2008>
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	494c      	ldr	r1, [pc, #304]	; (800d928 <dwt_ioctl+0x1cd0>)
 800d7f6:	f7fc f950 	bl	8009a9a <dwt_read32bitoffsetreg>
 800d7fa:	6020      	str	r0, [r4, #0]
 800d7fc:	2500      	movs	r5, #0
 800d7fe:	f7fe bad5 	b.w	800bdac <dwt_ioctl+0x154>
 800d802:	2c00      	cmp	r4, #0
 800d804:	f000 822f 	beq.w	800dc66 <dwt_ioctl+0x200e>
 800d808:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 800d80c:	6023      	str	r3, [r4, #0]
 800d80e:	2500      	movs	r5, #0
 800d810:	f7fe bacc 	b.w	800bdac <dwt_ioctl+0x154>
 800d814:	2c00      	cmp	r4, #0
 800d816:	f000 8229 	beq.w	800dc6c <dwt_ioctl+0x2014>
 800d81a:	2500      	movs	r5, #0
 800d81c:	950b      	str	r5, [sp, #44]	; 0x2c
 800d81e:	af10      	add	r7, sp, #64	; 0x40
 800d820:	2319      	movs	r3, #25
 800d822:	f847 3d10 	str.w	r3, [r7, #-16]!
 800d826:	9700      	str	r7, [sp, #0]
 800d828:	2304      	movs	r3, #4
 800d82a:	462a      	mov	r2, r5
 800d82c:	493f      	ldr	r1, [pc, #252]	; (800d92c <dwt_ioctl+0x1cd4>)
 800d82e:	f7fc fd41 	bl	800a2b4 <dwt_writetodevice>
 800d832:	f641 7348 	movw	r3, #8008	; 0x1f48
 800d836:	930c      	str	r3, [sp, #48]	; 0x30
 800d838:	9700      	str	r7, [sp, #0]
 800d83a:	2304      	movs	r3, #4
 800d83c:	462a      	mov	r2, r5
 800d83e:	493c      	ldr	r1, [pc, #240]	; (800d930 <dwt_ioctl+0x1cd8>)
 800d840:	4630      	mov	r0, r6
 800d842:	f7fc fd37 	bl	800a2b4 <dwt_writetodevice>
 800d846:	ab0b      	add	r3, sp, #44	; 0x2c
 800d848:	9300      	str	r3, [sp, #0]
 800d84a:	2304      	movs	r3, #4
 800d84c:	462a      	mov	r2, r5
 800d84e:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800d852:	4630      	mov	r0, r6
 800d854:	f7fc f917 	bl	8009a86 <dwt_readfromdevice>
 800d858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d85a:	6023      	str	r3, [r4, #0]
 800d85c:	f7fe baa6 	b.w	800bdac <dwt_ioctl+0x154>
 800d860:	2c00      	cmp	r4, #0
 800d862:	f000 8206 	beq.w	800dc72 <dwt_ioctl+0x201a>
 800d866:	2200      	movs	r2, #0
 800d868:	4932      	ldr	r1, [pc, #200]	; (800d934 <dwt_ioctl+0x1cdc>)
 800d86a:	f7fc f916 	bl	8009a9a <dwt_read32bitoffsetreg>
 800d86e:	b280      	uxth	r0, r0
 800d870:	6020      	str	r0, [r4, #0]
 800d872:	2200      	movs	r2, #0
 800d874:	4930      	ldr	r1, [pc, #192]	; (800d938 <dwt_ioctl+0x1ce0>)
 800d876:	4630      	mov	r0, r6
 800d878:	f7fc f90f 	bl	8009a9a <dwt_read32bitoffsetreg>
 800d87c:	0d43      	lsrs	r3, r0, #21
 800d87e:	019b      	lsls	r3, r3, #6
 800d880:	b29b      	uxth	r3, r3
 800d882:	6063      	str	r3, [r4, #4]
 800d884:	2500      	movs	r5, #0
 800d886:	f7fe ba91 	b.w	800bdac <dwt_ioctl+0x154>
 800d88a:	2c00      	cmp	r4, #0
 800d88c:	f000 81f4 	beq.w	800dc78 <dwt_ioctl+0x2020>
 800d890:	7d63      	ldrb	r3, [r4, #21]
 800d892:	b133      	cbz	r3, 800d8a2 <dwt_ioctl+0x1c4a>
 800d894:	2b01      	cmp	r3, #1
 800d896:	d05b      	beq.n	800d950 <dwt_ioctl+0x1cf8>
 800d898:	2b02      	cmp	r3, #2
 800d89a:	f000 8082 	beq.w	800d9a2 <dwt_ioctl+0x1d4a>
 800d89e:	23ff      	movs	r3, #255	; 0xff
 800d8a0:	e02f      	b.n	800d902 <dwt_ioctl+0x1caa>
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	4925      	ldr	r1, [pc, #148]	; (800d93c <dwt_ioctl+0x1ce4>)
 800d8a6:	f7fc f8f8 	bl	8009a9a <dwt_read32bitoffsetreg>
 800d8aa:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800d8ae:	6020      	str	r0, [r4, #0]
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	4923      	ldr	r1, [pc, #140]	; (800d940 <dwt_ioctl+0x1ce8>)
 800d8b4:	4630      	mov	r0, r6
 800d8b6:	f7fc f8f0 	bl	8009a9a <dwt_read32bitoffsetreg>
 800d8ba:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800d8be:	6060      	str	r0, [r4, #4]
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	4920      	ldr	r1, [pc, #128]	; (800d944 <dwt_ioctl+0x1cec>)
 800d8c4:	4630      	mov	r0, r6
 800d8c6:	f7fc f8e8 	bl	8009a9a <dwt_read32bitoffsetreg>
 800d8ca:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800d8ce:	60a0      	str	r0, [r4, #8]
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	491d      	ldr	r1, [pc, #116]	; (800d948 <dwt_ioctl+0x1cf0>)
 800d8d4:	4630      	mov	r0, r6
 800d8d6:	f7fc f8e0 	bl	8009a9a <dwt_read32bitoffsetreg>
 800d8da:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800d8de:	60e0      	str	r0, [r4, #12]
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	491a      	ldr	r1, [pc, #104]	; (800d94c <dwt_ioctl+0x1cf4>)
 800d8e4:	4630      	mov	r0, r6
 800d8e6:	f7fc f8d8 	bl	8009a9a <dwt_read32bitoffsetreg>
 800d8ea:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800d8ee:	6120      	str	r0, [r4, #16]
 800d8f0:	2203      	movs	r2, #3
 800d8f2:	490c      	ldr	r1, [pc, #48]	; (800d924 <dwt_ioctl+0x1ccc>)
 800d8f4:	4630      	mov	r0, r6
 800d8f6:	f7fc f8f8 	bl	8009aea <dwt_read8bitoffsetreg>
 800d8fa:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800d8fe:	7520      	strb	r0, [r4, #20]
 800d900:	2300      	movs	r3, #0
 800d902:	75a3      	strb	r3, [r4, #22]
 800d904:	2500      	movs	r5, #0
 800d906:	f7fe ba51 	b.w	800bdac <dwt_ioctl+0x154>
 800d90a:	bf00      	nop
 800d90c:	00050008 	.word	0x00050008
 800d910:	0005000c 	.word	0x0005000c
 800d914:	00110008 	.word	0x00110008
 800d918:	08015fa4 	.word	0x08015fa4
 800d91c:	000e0014 	.word	0x000e0014
 800d920:	000e0018 	.word	0x000e0018
 800d924:	00030060 	.word	0x00030060
 800d928:	000f004c 	.word	0x000f004c
 800d92c:	001f0004 	.word	0x001f0004
 800d930:	001f0008 	.word	0x001f0008
 800d934:	000c0048 	.word	0x000c0048
 800d938:	000c0028 	.word	0x000c0028
 800d93c:	000c0058 	.word	0x000c0058
 800d940:	000c0030 	.word	0x000c0030
 800d944:	000c0034 	.word	0x000c0034
 800d948:	000c0038 	.word	0x000c0038
 800d94c:	000c002c 	.word	0x000c002c
 800d950:	2200      	movs	r2, #0
 800d952:	49d4      	ldr	r1, [pc, #848]	; (800dca4 <dwt_ioctl+0x204c>)
 800d954:	f7fc f8a1 	bl	8009a9a <dwt_read32bitoffsetreg>
 800d958:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800d95c:	6020      	str	r0, [r4, #0]
 800d95e:	2200      	movs	r2, #0
 800d960:	49d1      	ldr	r1, [pc, #836]	; (800dca8 <dwt_ioctl+0x2050>)
 800d962:	4630      	mov	r0, r6
 800d964:	f7fc f899 	bl	8009a9a <dwt_read32bitoffsetreg>
 800d968:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800d96c:	6060      	str	r0, [r4, #4]
 800d96e:	2200      	movs	r2, #0
 800d970:	49ce      	ldr	r1, [pc, #824]	; (800dcac <dwt_ioctl+0x2054>)
 800d972:	4630      	mov	r0, r6
 800d974:	f7fc f891 	bl	8009a9a <dwt_read32bitoffsetreg>
 800d978:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800d97c:	60a0      	str	r0, [r4, #8]
 800d97e:	2200      	movs	r2, #0
 800d980:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 800d984:	4630      	mov	r0, r6
 800d986:	f7fc f888 	bl	8009a9a <dwt_read32bitoffsetreg>
 800d98a:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800d98e:	60e0      	str	r0, [r4, #12]
 800d990:	2200      	movs	r2, #0
 800d992:	49c7      	ldr	r1, [pc, #796]	; (800dcb0 <dwt_ioctl+0x2058>)
 800d994:	4630      	mov	r0, r6
 800d996:	f7fc f880 	bl	8009a9a <dwt_read32bitoffsetreg>
 800d99a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800d99e:	6120      	str	r0, [r4, #16]
 800d9a0:	e7a6      	b.n	800d8f0 <dwt_ioctl+0x1c98>
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	49c3      	ldr	r1, [pc, #780]	; (800dcb4 <dwt_ioctl+0x205c>)
 800d9a6:	f7fc f878 	bl	8009a9a <dwt_read32bitoffsetreg>
 800d9aa:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800d9ae:	6020      	str	r0, [r4, #0]
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	49c1      	ldr	r1, [pc, #772]	; (800dcb8 <dwt_ioctl+0x2060>)
 800d9b4:	4630      	mov	r0, r6
 800d9b6:	f7fc f870 	bl	8009a9a <dwt_read32bitoffsetreg>
 800d9ba:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800d9be:	6060      	str	r0, [r4, #4]
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	49be      	ldr	r1, [pc, #760]	; (800dcbc <dwt_ioctl+0x2064>)
 800d9c4:	4630      	mov	r0, r6
 800d9c6:	f7fc f868 	bl	8009a9a <dwt_read32bitoffsetreg>
 800d9ca:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800d9ce:	60a0      	str	r0, [r4, #8]
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	49bb      	ldr	r1, [pc, #748]	; (800dcc0 <dwt_ioctl+0x2068>)
 800d9d4:	4630      	mov	r0, r6
 800d9d6:	f7fc f860 	bl	8009a9a <dwt_read32bitoffsetreg>
 800d9da:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800d9de:	60e0      	str	r0, [r4, #12]
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	49b8      	ldr	r1, [pc, #736]	; (800dcc4 <dwt_ioctl+0x206c>)
 800d9e4:	4630      	mov	r0, r6
 800d9e6:	f7fc f858 	bl	8009a9a <dwt_read32bitoffsetreg>
 800d9ea:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800d9ee:	6120      	str	r0, [r4, #16]
 800d9f0:	e77e      	b.n	800d8f0 <dwt_ioctl+0x1c98>
 800d9f2:	2500      	movs	r5, #0
 800d9f4:	f7fe b9da 	b.w	800bdac <dwt_ioctl+0x154>
 800d9f8:	2500      	movs	r5, #0
 800d9fa:	f7fe b9d7 	b.w	800bdac <dwt_ioctl+0x154>
 800d9fe:	2500      	movs	r5, #0
 800da00:	f7fe b9d4 	b.w	800bdac <dwt_ioctl+0x154>
 800da04:	2500      	movs	r5, #0
 800da06:	f7fe b9d1 	b.w	800bdac <dwt_ioctl+0x154>
 800da0a:	2500      	movs	r5, #0
 800da0c:	f7fe b9ce 	b.w	800bdac <dwt_ioctl+0x154>
 800da10:	2500      	movs	r5, #0
 800da12:	f7fe b9cb 	b.w	800bdac <dwt_ioctl+0x154>
 800da16:	2500      	movs	r5, #0
 800da18:	f7fe b9c8 	b.w	800bdac <dwt_ioctl+0x154>
 800da1c:	2500      	movs	r5, #0
 800da1e:	f7fe b9c5 	b.w	800bdac <dwt_ioctl+0x154>
 800da22:	2500      	movs	r5, #0
 800da24:	f7fe b9c2 	b.w	800bdac <dwt_ioctl+0x154>
 800da28:	2500      	movs	r5, #0
 800da2a:	f7fe b9bf 	b.w	800bdac <dwt_ioctl+0x154>
 800da2e:	2500      	movs	r5, #0
 800da30:	f7fe b9bc 	b.w	800bdac <dwt_ioctl+0x154>
 800da34:	2500      	movs	r5, #0
 800da36:	f7fe b9b9 	b.w	800bdac <dwt_ioctl+0x154>
 800da3a:	2500      	movs	r5, #0
 800da3c:	f7fe b9b6 	b.w	800bdac <dwt_ioctl+0x154>
 800da40:	2500      	movs	r5, #0
 800da42:	f7fe b9b3 	b.w	800bdac <dwt_ioctl+0x154>
 800da46:	2500      	movs	r5, #0
 800da48:	f7fe b9b0 	b.w	800bdac <dwt_ioctl+0x154>
 800da4c:	2500      	movs	r5, #0
 800da4e:	f7fe b9ad 	b.w	800bdac <dwt_ioctl+0x154>
 800da52:	2500      	movs	r5, #0
 800da54:	f7fe b9aa 	b.w	800bdac <dwt_ioctl+0x154>
 800da58:	2500      	movs	r5, #0
 800da5a:	f7fe b9a7 	b.w	800bdac <dwt_ioctl+0x154>
 800da5e:	2500      	movs	r5, #0
 800da60:	f7fe b9a4 	b.w	800bdac <dwt_ioctl+0x154>
 800da64:	2500      	movs	r5, #0
 800da66:	f7fe b9a1 	b.w	800bdac <dwt_ioctl+0x154>
 800da6a:	2500      	movs	r5, #0
 800da6c:	f7fe b99e 	b.w	800bdac <dwt_ioctl+0x154>
 800da70:	2500      	movs	r5, #0
 800da72:	f7fe b99b 	b.w	800bdac <dwt_ioctl+0x154>
 800da76:	2500      	movs	r5, #0
 800da78:	f7fe b998 	b.w	800bdac <dwt_ioctl+0x154>
 800da7c:	2500      	movs	r5, #0
 800da7e:	f7fe b995 	b.w	800bdac <dwt_ioctl+0x154>
 800da82:	2500      	movs	r5, #0
 800da84:	f7fe b992 	b.w	800bdac <dwt_ioctl+0x154>
 800da88:	2500      	movs	r5, #0
 800da8a:	f7fe b98f 	b.w	800bdac <dwt_ioctl+0x154>
 800da8e:	2500      	movs	r5, #0
 800da90:	f7fe b98c 	b.w	800bdac <dwt_ioctl+0x154>
 800da94:	2500      	movs	r5, #0
 800da96:	f7fe b989 	b.w	800bdac <dwt_ioctl+0x154>
 800da9a:	2500      	movs	r5, #0
 800da9c:	f7fe b986 	b.w	800bdac <dwt_ioctl+0x154>
 800daa0:	2500      	movs	r5, #0
 800daa2:	f7fe b983 	b.w	800bdac <dwt_ioctl+0x154>
 800daa6:	2500      	movs	r5, #0
 800daa8:	f7fe b980 	b.w	800bdac <dwt_ioctl+0x154>
 800daac:	2500      	movs	r5, #0
 800daae:	f7fe b97d 	b.w	800bdac <dwt_ioctl+0x154>
 800dab2:	2500      	movs	r5, #0
 800dab4:	f7fe b97a 	b.w	800bdac <dwt_ioctl+0x154>
 800dab8:	2500      	movs	r5, #0
 800daba:	f7fe b977 	b.w	800bdac <dwt_ioctl+0x154>
 800dabe:	2500      	movs	r5, #0
 800dac0:	f7fe b974 	b.w	800bdac <dwt_ioctl+0x154>
 800dac4:	2500      	movs	r5, #0
 800dac6:	f7fe b971 	b.w	800bdac <dwt_ioctl+0x154>
 800daca:	2500      	movs	r5, #0
 800dacc:	f7fe b96e 	b.w	800bdac <dwt_ioctl+0x154>
 800dad0:	2500      	movs	r5, #0
 800dad2:	f7fe b96b 	b.w	800bdac <dwt_ioctl+0x154>
 800dad6:	2500      	movs	r5, #0
 800dad8:	f7fe b968 	b.w	800bdac <dwt_ioctl+0x154>
 800dadc:	2500      	movs	r5, #0
 800dade:	f7fe b965 	b.w	800bdac <dwt_ioctl+0x154>
 800dae2:	2500      	movs	r5, #0
 800dae4:	f7fe b962 	b.w	800bdac <dwt_ioctl+0x154>
 800dae8:	2500      	movs	r5, #0
 800daea:	f7fe b95f 	b.w	800bdac <dwt_ioctl+0x154>
 800daee:	2500      	movs	r5, #0
 800daf0:	f7fe b95c 	b.w	800bdac <dwt_ioctl+0x154>
 800daf4:	2500      	movs	r5, #0
 800daf6:	f7fe b959 	b.w	800bdac <dwt_ioctl+0x154>
 800dafa:	2500      	movs	r5, #0
 800dafc:	f7fe b956 	b.w	800bdac <dwt_ioctl+0x154>
 800db00:	2500      	movs	r5, #0
 800db02:	f7fe b953 	b.w	800bdac <dwt_ioctl+0x154>
 800db06:	2500      	movs	r5, #0
 800db08:	f7fe b950 	b.w	800bdac <dwt_ioctl+0x154>
 800db0c:	2500      	movs	r5, #0
 800db0e:	f7fe b94d 	b.w	800bdac <dwt_ioctl+0x154>
 800db12:	2500      	movs	r5, #0
 800db14:	f7fe b94a 	b.w	800bdac <dwt_ioctl+0x154>
 800db18:	2500      	movs	r5, #0
 800db1a:	f7fe b947 	b.w	800bdac <dwt_ioctl+0x154>
 800db1e:	2500      	movs	r5, #0
 800db20:	f7fe b944 	b.w	800bdac <dwt_ioctl+0x154>
 800db24:	2500      	movs	r5, #0
 800db26:	f7fe b941 	b.w	800bdac <dwt_ioctl+0x154>
 800db2a:	2500      	movs	r5, #0
 800db2c:	f7fe b93e 	b.w	800bdac <dwt_ioctl+0x154>
 800db30:	2500      	movs	r5, #0
 800db32:	f7fe b93b 	b.w	800bdac <dwt_ioctl+0x154>
 800db36:	2500      	movs	r5, #0
 800db38:	f7fe b938 	b.w	800bdac <dwt_ioctl+0x154>
 800db3c:	2500      	movs	r5, #0
 800db3e:	f7fe b935 	b.w	800bdac <dwt_ioctl+0x154>
 800db42:	2500      	movs	r5, #0
 800db44:	f7fe b932 	b.w	800bdac <dwt_ioctl+0x154>
 800db48:	2500      	movs	r5, #0
 800db4a:	f7fe b92f 	b.w	800bdac <dwt_ioctl+0x154>
 800db4e:	2500      	movs	r5, #0
 800db50:	f7fe b92c 	b.w	800bdac <dwt_ioctl+0x154>
 800db54:	2500      	movs	r5, #0
 800db56:	f7fe b929 	b.w	800bdac <dwt_ioctl+0x154>
 800db5a:	2500      	movs	r5, #0
 800db5c:	f7fe b926 	b.w	800bdac <dwt_ioctl+0x154>
 800db60:	2500      	movs	r5, #0
 800db62:	f7fe b923 	b.w	800bdac <dwt_ioctl+0x154>
 800db66:	2500      	movs	r5, #0
 800db68:	f7fe b920 	b.w	800bdac <dwt_ioctl+0x154>
 800db6c:	2500      	movs	r5, #0
 800db6e:	f7fe b91d 	b.w	800bdac <dwt_ioctl+0x154>
 800db72:	2500      	movs	r5, #0
 800db74:	f7fe b91a 	b.w	800bdac <dwt_ioctl+0x154>
 800db78:	2500      	movs	r5, #0
 800db7a:	f7fe b917 	b.w	800bdac <dwt_ioctl+0x154>
 800db7e:	2500      	movs	r5, #0
 800db80:	f7fe b914 	b.w	800bdac <dwt_ioctl+0x154>
 800db84:	2500      	movs	r5, #0
 800db86:	f7fe b911 	b.w	800bdac <dwt_ioctl+0x154>
 800db8a:	2500      	movs	r5, #0
 800db8c:	f7fe b90e 	b.w	800bdac <dwt_ioctl+0x154>
 800db90:	2500      	movs	r5, #0
 800db92:	f7fe b90b 	b.w	800bdac <dwt_ioctl+0x154>
 800db96:	2500      	movs	r5, #0
 800db98:	f7fe b908 	b.w	800bdac <dwt_ioctl+0x154>
 800db9c:	2500      	movs	r5, #0
 800db9e:	f7fe b905 	b.w	800bdac <dwt_ioctl+0x154>
 800dba2:	2500      	movs	r5, #0
 800dba4:	f7fe b902 	b.w	800bdac <dwt_ioctl+0x154>
 800dba8:	2500      	movs	r5, #0
 800dbaa:	f7fe b8ff 	b.w	800bdac <dwt_ioctl+0x154>
 800dbae:	2500      	movs	r5, #0
 800dbb0:	f7fe b8fc 	b.w	800bdac <dwt_ioctl+0x154>
 800dbb4:	2500      	movs	r5, #0
 800dbb6:	f7fe b8f9 	b.w	800bdac <dwt_ioctl+0x154>
 800dbba:	2500      	movs	r5, #0
 800dbbc:	f7fe b8f6 	b.w	800bdac <dwt_ioctl+0x154>
 800dbc0:	2500      	movs	r5, #0
 800dbc2:	f7fe b8f3 	b.w	800bdac <dwt_ioctl+0x154>
 800dbc6:	2500      	movs	r5, #0
 800dbc8:	f7fe b8f0 	b.w	800bdac <dwt_ioctl+0x154>
 800dbcc:	2500      	movs	r5, #0
 800dbce:	f7fe b8ed 	b.w	800bdac <dwt_ioctl+0x154>
 800dbd2:	2500      	movs	r5, #0
 800dbd4:	f7fe b8ea 	b.w	800bdac <dwt_ioctl+0x154>
 800dbd8:	2500      	movs	r5, #0
 800dbda:	f7fe b8e7 	b.w	800bdac <dwt_ioctl+0x154>
 800dbde:	2500      	movs	r5, #0
 800dbe0:	f7fe b8e4 	b.w	800bdac <dwt_ioctl+0x154>
 800dbe4:	2500      	movs	r5, #0
 800dbe6:	f7fe b8e1 	b.w	800bdac <dwt_ioctl+0x154>
 800dbea:	2500      	movs	r5, #0
 800dbec:	f7fe b8de 	b.w	800bdac <dwt_ioctl+0x154>
 800dbf0:	2500      	movs	r5, #0
 800dbf2:	f7fe b8db 	b.w	800bdac <dwt_ioctl+0x154>
 800dbf6:	2500      	movs	r5, #0
 800dbf8:	f7fe b8d8 	b.w	800bdac <dwt_ioctl+0x154>
 800dbfc:	2500      	movs	r5, #0
 800dbfe:	f7fe b8d5 	b.w	800bdac <dwt_ioctl+0x154>
 800dc02:	2500      	movs	r5, #0
 800dc04:	f7fe b8d2 	b.w	800bdac <dwt_ioctl+0x154>
 800dc08:	2500      	movs	r5, #0
 800dc0a:	f7fe b8cf 	b.w	800bdac <dwt_ioctl+0x154>
 800dc0e:	2500      	movs	r5, #0
 800dc10:	f7fe b8cc 	b.w	800bdac <dwt_ioctl+0x154>
 800dc14:	2500      	movs	r5, #0
 800dc16:	f7fe b8c9 	b.w	800bdac <dwt_ioctl+0x154>
 800dc1a:	2500      	movs	r5, #0
 800dc1c:	f7fe b8c6 	b.w	800bdac <dwt_ioctl+0x154>
 800dc20:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800dc24:	f7fe b8c2 	b.w	800bdac <dwt_ioctl+0x154>
 800dc28:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800dc2c:	f7fe b8be 	b.w	800bdac <dwt_ioctl+0x154>
 800dc30:	2500      	movs	r5, #0
 800dc32:	f7fe b8bb 	b.w	800bdac <dwt_ioctl+0x154>
 800dc36:	2500      	movs	r5, #0
 800dc38:	f7fe b8b8 	b.w	800bdac <dwt_ioctl+0x154>
 800dc3c:	2500      	movs	r5, #0
 800dc3e:	f7fe b8b5 	b.w	800bdac <dwt_ioctl+0x154>
 800dc42:	2500      	movs	r5, #0
 800dc44:	f7fe b8b2 	b.w	800bdac <dwt_ioctl+0x154>
 800dc48:	2500      	movs	r5, #0
 800dc4a:	f7fe b8af 	b.w	800bdac <dwt_ioctl+0x154>
 800dc4e:	2500      	movs	r5, #0
 800dc50:	f7fe b8ac 	b.w	800bdac <dwt_ioctl+0x154>
 800dc54:	2500      	movs	r5, #0
 800dc56:	f7fe b8a9 	b.w	800bdac <dwt_ioctl+0x154>
 800dc5a:	2500      	movs	r5, #0
 800dc5c:	f7fe b8a6 	b.w	800bdac <dwt_ioctl+0x154>
 800dc60:	2500      	movs	r5, #0
 800dc62:	f7fe b8a3 	b.w	800bdac <dwt_ioctl+0x154>
 800dc66:	2500      	movs	r5, #0
 800dc68:	f7fe b8a0 	b.w	800bdac <dwt_ioctl+0x154>
 800dc6c:	2500      	movs	r5, #0
 800dc6e:	f7fe b89d 	b.w	800bdac <dwt_ioctl+0x154>
 800dc72:	2500      	movs	r5, #0
 800dc74:	f7fe b89a 	b.w	800bdac <dwt_ioctl+0x154>
 800dc78:	2500      	movs	r5, #0
 800dc7a:	f7fe b897 	b.w	800bdac <dwt_ioctl+0x154>
 800dc7e:	f899 3011 	ldrb.w	r3, [r9, #17]
 800dc82:	1e5a      	subs	r2, r3, #1
 800dc84:	b2d2      	uxtb	r2, r2
 800dc86:	2a01      	cmp	r2, #1
 800dc88:	f67e aeec 	bls.w	800ca64 <dwt_ioctl+0xe0c>
 800dc8c:	2202      	movs	r2, #2
 800dc8e:	f7fe be93 	b.w	800c9b8 <dwt_ioctl+0xd60>
 800dc92:	2f00      	cmp	r7, #0
 800dc94:	f43f ab68 	beq.w	800d368 <dwt_ioctl+0x1710>
 800dc98:	f819 1000 	ldrb.w	r1, [r9, r0]
 800dc9c:	1a5b      	subs	r3, r3, r1
 800dc9e:	b29b      	uxth	r3, r3
 800dca0:	f7ff bb88 	b.w	800d3b4 <dwt_ioctl+0x175c>
 800dca4:	000d0020 	.word	0x000d0020
 800dca8:	000c0064 	.word	0x000c0064
 800dcac:	000c0068 	.word	0x000c0068
 800dcb0:	000c0060 	.word	0x000c0060
 800dcb4:	000d0068 	.word	0x000d0068
 800dcb8:	000d0040 	.word	0x000d0040
 800dcbc:	000d0044 	.word	0x000d0044
 800dcc0:	000d0048 	.word	0x000d0048
 800dcc4:	000d003c 	.word	0x000d003c
 800dcc8:	283f      	cmp	r0, #63	; 0x3f
 800dcca:	d027      	beq.n	800dd1c <dwt_ioctl+0x20c4>
 800dccc:	2e00      	cmp	r6, #0
 800dcce:	f47f ab51 	bne.w	800d374 <dwt_ioctl+0x171c>
 800dcd2:	3001      	adds	r0, #1
 800dcd4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800dcd8:	f819 1000 	ldrb.w	r1, [r9, r0]
 800dcdc:	440b      	add	r3, r1
 800dcde:	b29b      	uxth	r3, r3
 800dce0:	459c      	cmp	ip, r3
 800dce2:	f43f ab65 	beq.w	800d3b0 <dwt_ioctl+0x1758>
 800dce6:	3d01      	subs	r5, #1
 800dce8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 800dcec:	f43f ab23 	beq.w	800d336 <dwt_ioctl+0x16de>
 800dcf0:	459e      	cmp	lr, r3
 800dcf2:	f4bf ab33 	bcs.w	800d35c <dwt_ioctl+0x1704>
 800dcf6:	4598      	cmp	r8, r3
 800dcf8:	d9cb      	bls.n	800dc92 <dwt_ioctl+0x203a>
 800dcfa:	ebac 0103 	sub.w	r1, ip, r3
 800dcfe:	b209      	sxth	r1, r1
 800dd00:	2900      	cmp	r1, #0
 800dd02:	bfb8      	it	lt
 800dd04:	4249      	neglt	r1, r1
 800dd06:	4559      	cmp	r1, fp
 800dd08:	f77f ab20 	ble.w	800d34c <dwt_ioctl+0x16f4>
 800dd0c:	2f00      	cmp	r7, #0
 800dd0e:	f47f ab64 	bne.w	800d3da <dwt_ioctl+0x1782>
 800dd12:	283f      	cmp	r0, #63	; 0x3f
 800dd14:	d1da      	bne.n	800dccc <dwt_ioctl+0x2074>
 800dd16:	2f00      	cmp	r7, #0
 800dd18:	f47f ab64 	bne.w	800d3e4 <dwt_ioctl+0x178c>
 800dd1c:	2a03      	cmp	r2, #3
 800dd1e:	f43f ab64 	beq.w	800d3ea <dwt_ioctl+0x1792>
 800dd22:	2a02      	cmp	r2, #2
 800dd24:	f43f ab33 	beq.w	800d38e <dwt_ioctl+0x1736>
 800dd28:	f81a 1002 	ldrb.w	r1, [sl, r2]
 800dd2c:	185e      	adds	r6, r3, r1
 800dd2e:	4566      	cmp	r6, ip
 800dd30:	f77f ab34 	ble.w	800d39c <dwt_ioctl+0x1744>
 800dd34:	440b      	add	r3, r1
 800dd36:	b29b      	uxth	r3, r3
 800dd38:	3201      	adds	r2, #1
 800dd3a:	b2d2      	uxtb	r2, r2
 800dd3c:	2700      	movs	r7, #0
 800dd3e:	f7ff bb19 	b.w	800d374 <dwt_ioctl+0x171c>
 800dd42:	bf00      	nop

0800dd44 <_init>:
 800dd44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd46:	b085      	sub	sp, #20
 800dd48:	4604      	mov	r4, r0
 800dd4a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800dd4c:	6819      	ldr	r1, [r3, #0]
 800dd4e:	f7fd fe57 	bl	800ba00 <ull_initialise>
 800dd52:	4606      	mov	r6, r0
 800dd54:	6823      	ldr	r3, [r4, #0]
 800dd56:	691b      	ldr	r3, [r3, #16]
 800dd58:	4798      	blx	r3
 800dd5a:	ab03      	add	r3, sp, #12
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	4611      	mov	r1, r2
 800dd60:	4620      	mov	r0, r4
 800dd62:	f7fd ff79 	bl	800bc58 <dwt_ioctl>
 800dd66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dd68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd6a:	6819      	ldr	r1, [r3, #0]
 800dd6c:	4620      	mov	r0, r4
 800dd6e:	f7fd fc07 	bl	800b580 <ull_configure>
 800dd72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dd74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd76:	6859      	ldr	r1, [r3, #4]
 800dd78:	4620      	mov	r0, r4
 800dd7a:	f7fd f953 	bl	800b024 <ull_configuretxrf>
 800dd7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dd80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd82:	89db      	ldrh	r3, [r3, #14]
 800dd84:	2200      	movs	r2, #0
 800dd86:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800dd8a:	4620      	mov	r0, r4
 800dd8c:	f7fc fa9d 	bl	800a2ca <dwt_write16bitoffsetreg>
 800dd90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dd92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd94:	899b      	ldrh	r3, [r3, #12]
 800dd96:	2200      	movs	r2, #0
 800dd98:	217c      	movs	r1, #124	; 0x7c
 800dd9a:	4620      	mov	r0, r4
 800dd9c:	f7fc fa95 	bl	800a2ca <dwt_write16bitoffsetreg>
 800dda0:	2100      	movs	r1, #0
 800dda2:	4620      	mov	r0, r4
 800dda4:	f7fc fb29 	bl	800a3fa <ull_setrxaftertxdelay>
 800dda8:	2500      	movs	r5, #0
 800ddaa:	9500      	str	r5, [sp, #0]
 800ddac:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 800ddb0:	462a      	mov	r2, r5
 800ddb2:	2110      	movs	r1, #16
 800ddb4:	4620      	mov	r0, r4
 800ddb6:	f7fd fac5 	bl	800b344 <dwt_modify16bitoffsetreg>
 800ddba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ddbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddbe:	895a      	ldrh	r2, [r3, #10]
 800ddc0:	8919      	ldrh	r1, [r3, #8]
 800ddc2:	4620      	mov	r0, r4
 800ddc4:	f7fd f9bc 	bl	800b140 <ull_configureframefilter>
 800ddc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ddca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddcc:	8a1b      	ldrh	r3, [r3, #16]
 800ddce:	2202      	movs	r2, #2
 800ddd0:	210c      	movs	r1, #12
 800ddd2:	4620      	mov	r0, r4
 800ddd4:	f7fc fa79 	bl	800a2ca <dwt_write16bitoffsetreg>
 800ddd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ddda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dddc:	8a5b      	ldrh	r3, [r3, #18]
 800ddde:	462a      	mov	r2, r5
 800dde0:	210c      	movs	r1, #12
 800dde2:	4620      	mov	r0, r4
 800dde4:	f7fc fa71 	bl	800a2ca <dwt_write16bitoffsetreg>
 800dde8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ddea:	7a19      	ldrb	r1, [r3, #8]
 800ddec:	4620      	mov	r0, r4
 800ddee:	f7fd fac3 	bl	800b378 <ull_setleds>
 800ddf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ddf4:	68d9      	ldr	r1, [r3, #12]
 800ddf6:	4620      	mov	r0, r4
 800ddf8:	f7fc fb13 	bl	800a422 <ull_setlnapamode>
 800ddfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ddfe:	7e0b      	ldrb	r3, [r1, #24]
 800de00:	694a      	ldr	r2, [r1, #20]
 800de02:	6909      	ldr	r1, [r1, #16]
 800de04:	4620      	mov	r0, r4
 800de06:	f7fd fa21 	bl	800b24c <ull_setinterrupt>
 800de0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de0c:	7f9a      	ldrb	r2, [r3, #30]
 800de0e:	8b99      	ldrh	r1, [r3, #28]
 800de10:	4620      	mov	r0, r4
 800de12:	f7fc fd19 	bl	800a848 <ull_configuresleep>
 800de16:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800de18:	7b53      	ldrb	r3, [r2, #13]
 800de1a:	2b2e      	cmp	r3, #46	; 0x2e
 800de1c:	d005      	beq.n	800de2a <_init+0xe6>
 800de1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de20:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800de24:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 800de28:	d00a      	beq.n	800de40 <_init+0xfc>
 800de2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de2c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800de30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de34:	7353      	strb	r3, [r2, #13]
 800de36:	2200      	movs	r2, #0
 800de38:	492a      	ldr	r1, [pc, #168]	; (800dee4 <_init+0x1a0>)
 800de3a:	4620      	mov	r0, r4
 800de3c:	f7fc fc30 	bl	800a6a0 <dwt_write8bitoffsetreg>
 800de40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de42:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 800de46:	4620      	mov	r0, r4
 800de48:	f7fd f874 	bl	800af34 <ull_configciadiag>
 800de4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de4e:	6a19      	ldr	r1, [r3, #32]
 800de50:	4620      	mov	r0, r4
 800de52:	f7fc fb07 	bl	800a464 <ull_configurestskey>
 800de56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de58:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800de5a:	4620      	mov	r0, r4
 800de5c:	f7fc fb26 	bl	800a4ac <ull_configurestsiv>
 800de60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de62:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800de66:	bb9b      	cbnz	r3, 800ded0 <_init+0x18c>
 800de68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de6a:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 800de6e:	4620      	mov	r0, r4
 800de70:	f7fc fc8e 	bl	800a790 <ull_configeventcounters>
 800de74:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
 800de78:	2d00      	cmp	r5, #0
 800de7a:	db26      	blt.n	800deca <_init+0x186>
 800de7c:	2301      	movs	r3, #1
 800de7e:	fa03 f505 	lsl.w	r5, r3, r5
 800de82:	b2af      	uxth	r7, r5
 800de84:	4a18      	ldr	r2, [pc, #96]	; (800dee8 <_init+0x1a4>)
 800de86:	4639      	mov	r1, r7
 800de88:	4620      	mov	r0, r4
 800de8a:	f7fc ffef 	bl	800ae6c <ull_setgpiomode>
 800de8e:	f10d 030a 	add.w	r3, sp, #10
 800de92:	9300      	str	r3, [sp, #0]
 800de94:	2302      	movs	r3, #2
 800de96:	2200      	movs	r2, #0
 800de98:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800de9c:	4620      	mov	r0, r4
 800de9e:	f7fb fdf2 	bl	8009a86 <dwt_readfromdevice>
 800dea2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800dea6:	ea23 0305 	bic.w	r3, r3, r5
 800deaa:	f8ad 300a 	strh.w	r3, [sp, #10]
 800deae:	2200      	movs	r2, #0
 800deb0:	490e      	ldr	r1, [pc, #56]	; (800deec <_init+0x1a8>)
 800deb2:	4620      	mov	r0, r4
 800deb4:	f7fc fa09 	bl	800a2ca <dwt_write16bitoffsetreg>
 800deb8:	f994 204d 	ldrsb.w	r2, [r4, #77]	; 0x4d
 800debc:	fab2 f282 	clz	r2, r2
 800dec0:	0952      	lsrs	r2, r2, #5
 800dec2:	4639      	mov	r1, r7
 800dec4:	4620      	mov	r0, r4
 800dec6:	f7fd fad5 	bl	800b474 <ull_setgpiovalue>
 800deca:	4630      	mov	r0, r6
 800decc:	b005      	add	sp, #20
 800dece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ded0:	2301      	movs	r3, #1
 800ded2:	9300      	str	r3, [sp, #0]
 800ded4:	23ff      	movs	r3, #255	; 0xff
 800ded6:	2200      	movs	r2, #0
 800ded8:	4905      	ldr	r1, [pc, #20]	; (800def0 <_init+0x1ac>)
 800deda:	4620      	mov	r0, r4
 800dedc:	f7fd f816 	bl	800af0c <dwt_modify8bitoffsetreg>
 800dee0:	e7c2      	b.n	800de68 <_init+0x124>
 800dee2:	bf00      	nop
 800dee4:	00090014 	.word	0x00090014
 800dee8:	01200492 	.word	0x01200492
 800deec:	00050008 	.word	0x00050008
 800def0:	00020004 	.word	0x00020004

0800def4 <ull_wakeup_ic>:
 800def4:	b508      	push	{r3, lr}
 800def6:	6843      	ldr	r3, [r0, #4]
 800def8:	4798      	blx	r3
 800defa:	bd08      	pop	{r3, pc}

0800defc <get_sts_mnth>:
 800defc:	fb01 f100 	mul.w	r1, r1, r0
 800df00:	2a03      	cmp	r2, #3
 800df02:	d00a      	beq.n	800df1a <get_sts_mnth+0x1e>
 800df04:	0ac8      	lsrs	r0, r1, #11
 800df06:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800df0a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800df0e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800df12:	bf28      	it	cs
 800df14:	3001      	addcs	r0, #1
 800df16:	b280      	uxth	r0, r0
 800df18:	4770      	bx	lr
 800df1a:	20b5      	movs	r0, #181	; 0xb5
 800df1c:	fb00 f101 	mul.w	r1, r0, r1
 800df20:	09c9      	lsrs	r1, r1, #7
 800df22:	e7ef      	b.n	800df04 <get_sts_mnth+0x8>

0800df24 <dwt_dbg_fn>:
 800df24:	2998      	cmp	r1, #152	; 0x98
 800df26:	4802      	ldr	r0, [pc, #8]	; (800df30 <dwt_dbg_fn+0xc>)
 800df28:	bf18      	it	ne
 800df2a:	2000      	movne	r0, #0
 800df2c:	4770      	bx	lr
 800df2e:	bf00      	nop
 800df30:	080160ac 	.word	0x080160ac

0800df34 <_deinit>:
 800df34:	4770      	bx	lr

0800df36 <dwt_xfer3xxx>:
 800df36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df3a:	b084      	sub	sp, #16
 800df3c:	4605      	mov	r5, r0
 800df3e:	460f      	mov	r7, r1
 800df40:	461e      	mov	r6, r3
 800df42:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800df46:	1e59      	subs	r1, r3, #1
 800df48:	b289      	uxth	r1, r1
 800df4a:	2901      	cmp	r1, #1
 800df4c:	d91c      	bls.n	800df88 <dwt_xfer3xxx+0x52>
 800df4e:	19d0      	adds	r0, r2, r7
 800df50:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800df54:	443a      	add	r2, r7
 800df56:	f3c2 4104 	ubfx	r1, r2, #16, #5
 800df5a:	0082      	lsls	r2, r0, #2
 800df5c:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800df60:	ea43 0102 	orr.w	r1, r3, r2
 800df64:	0a09      	lsrs	r1, r1, #8
 800df66:	f88d 100c 	strb.w	r1, [sp, #12]
 800df6a:	b920      	cbnz	r0, 800df76 <dwt_xfer3xxx+0x40>
 800df6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800df70:	d018      	beq.n	800dfa4 <dwt_xfer3xxx+0x6e>
 800df72:	2b00      	cmp	r3, #0
 800df74:	d037      	beq.n	800dfe6 <dwt_xfer3xxx+0xb0>
 800df76:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800df7a:	f88d 100c 	strb.w	r1, [sp, #12]
 800df7e:	431a      	orrs	r2, r3
 800df80:	f88d 200d 	strb.w	r2, [sp, #13]
 800df84:	2402      	movs	r4, #2
 800df86:	e005      	b.n	800df94 <dwt_xfer3xxx+0x5e>
 800df88:	007a      	lsls	r2, r7, #1
 800df8a:	f062 027e 	orn	r2, r2, #126	; 0x7e
 800df8e:	f88d 200c 	strb.w	r2, [sp, #12]
 800df92:	2401      	movs	r4, #1
 800df94:	2b02      	cmp	r3, #2
 800df96:	d006      	beq.n	800dfa6 <dwt_xfer3xxx+0x70>
 800df98:	d326      	bcc.n	800dfe8 <dwt_xfer3xxx+0xb2>
 800df9a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800df9e:	2b03      	cmp	r3, #3
 800dfa0:	d901      	bls.n	800dfa6 <dwt_xfer3xxx+0x70>
 800dfa2:	e7fe      	b.n	800dfa2 <dwt_xfer3xxx+0x6c>
 800dfa4:	2401      	movs	r4, #1
 800dfa6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800dfa8:	7d1b      	ldrb	r3, [r3, #20]
 800dfaa:	b94b      	cbnz	r3, 800dfc0 <dwt_xfer3xxx+0x8a>
 800dfac:	682b      	ldr	r3, [r5, #0]
 800dfae:	685d      	ldr	r5, [r3, #4]
 800dfb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfb2:	4632      	mov	r2, r6
 800dfb4:	a903      	add	r1, sp, #12
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	47a8      	blx	r5
 800dfba:	b004      	add	sp, #16
 800dfbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	4621      	mov	r1, r4
 800dfc4:	a803      	add	r0, sp, #12
 800dfc6:	f7f7 fad1 	bl	800556c <dwt_generatecrc8>
 800dfca:	4602      	mov	r2, r0
 800dfcc:	4631      	mov	r1, r6
 800dfce:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dfd0:	f7f7 facc 	bl	800556c <dwt_generatecrc8>
 800dfd4:	682b      	ldr	r3, [r5, #0]
 800dfd6:	9000      	str	r0, [sp, #0]
 800dfd8:	689d      	ldr	r5, [r3, #8]
 800dfda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfdc:	4632      	mov	r2, r6
 800dfde:	a903      	add	r1, sp, #12
 800dfe0:	4620      	mov	r0, r4
 800dfe2:	47a8      	blx	r5
 800dfe4:	e7e9      	b.n	800dfba <dwt_xfer3xxx+0x84>
 800dfe6:	2401      	movs	r4, #1
 800dfe8:	682b      	ldr	r3, [r5, #0]
 800dfea:	f8d3 8000 	ldr.w	r8, [r3]
 800dfee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dff0:	4632      	mov	r2, r6
 800dff2:	a903      	add	r1, sp, #12
 800dff4:	4620      	mov	r0, r4
 800dff6:	47c0      	blx	r8
 800dff8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800dffa:	7d1b      	ldrb	r3, [r3, #20]
 800dffc:	2b02      	cmp	r3, #2
 800dffe:	d1dc      	bne.n	800dfba <dwt_xfer3xxx+0x84>
 800e000:	2f18      	cmp	r7, #24
 800e002:	d0da      	beq.n	800dfba <dwt_xfer3xxx+0x84>
 800e004:	2200      	movs	r2, #0
 800e006:	4621      	mov	r1, r4
 800e008:	a803      	add	r0, sp, #12
 800e00a:	f7f7 faaf 	bl	800556c <dwt_generatecrc8>
 800e00e:	4602      	mov	r2, r0
 800e010:	4631      	mov	r1, r6
 800e012:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e014:	f7f7 faaa 	bl	800556c <dwt_generatecrc8>
 800e018:	4604      	mov	r4, r0
 800e01a:	2200      	movs	r2, #0
 800e01c:	2118      	movs	r1, #24
 800e01e:	4628      	mov	r0, r5
 800e020:	f000 f866 	bl	800e0f0 <dwt_read8bitoffsetreg>
 800e024:	4284      	cmp	r4, r0
 800e026:	d0c8      	beq.n	800dfba <dwt_xfer3xxx+0x84>
 800e028:	68eb      	ldr	r3, [r5, #12]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d0c5      	beq.n	800dfba <dwt_xfer3xxx+0x84>
 800e02e:	4798      	blx	r3
 800e030:	e7c3      	b.n	800dfba <dwt_xfer3xxx+0x84>

0800e032 <dwt_readfromdevice>:
 800e032:	b510      	push	{r4, lr}
 800e034:	b082      	sub	sp, #8
 800e036:	2400      	movs	r4, #0
 800e038:	9401      	str	r4, [sp, #4]
 800e03a:	9c04      	ldr	r4, [sp, #16]
 800e03c:	9400      	str	r4, [sp, #0]
 800e03e:	f7ff ff7a 	bl	800df36 <dwt_xfer3xxx>
 800e042:	b002      	add	sp, #8
 800e044:	bd10      	pop	{r4, pc}

0800e046 <dwt_read32bitoffsetreg>:
 800e046:	b500      	push	{lr}
 800e048:	b085      	sub	sp, #20
 800e04a:	ab03      	add	r3, sp, #12
 800e04c:	9300      	str	r3, [sp, #0]
 800e04e:	2304      	movs	r3, #4
 800e050:	b292      	uxth	r2, r2
 800e052:	f7ff ffee 	bl	800e032 <dwt_readfromdevice>
 800e056:	f10d 030f 	add.w	r3, sp, #15
 800e05a:	f10d 010b 	add.w	r1, sp, #11
 800e05e:	2000      	movs	r0, #0
 800e060:	f813 2901 	ldrb.w	r2, [r3], #-1
 800e064:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 800e068:	428b      	cmp	r3, r1
 800e06a:	d1f9      	bne.n	800e060 <dwt_read32bitoffsetreg+0x1a>
 800e06c:	b005      	add	sp, #20
 800e06e:	f85d fb04 	ldr.w	pc, [sp], #4

0800e072 <dwt_read16bitoffsetreg>:
 800e072:	b500      	push	{lr}
 800e074:	b085      	sub	sp, #20
 800e076:	ab03      	add	r3, sp, #12
 800e078:	9300      	str	r3, [sp, #0]
 800e07a:	2302      	movs	r3, #2
 800e07c:	b292      	uxth	r2, r2
 800e07e:	f7ff ffd8 	bl	800e032 <dwt_readfromdevice>
 800e082:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800e086:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800e08a:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 800e08e:	b280      	uxth	r0, r0
 800e090:	b005      	add	sp, #20
 800e092:	f85d fb04 	ldr.w	pc, [sp], #4

0800e096 <ull_getrxantennadelay>:
 800e096:	b508      	push	{r3, lr}
 800e098:	2200      	movs	r2, #0
 800e09a:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800e09e:	f7ff ffe8 	bl	800e072 <dwt_read16bitoffsetreg>
 800e0a2:	bd08      	pop	{r3, pc}

0800e0a4 <ull_gettxantennadelay>:
 800e0a4:	b508      	push	{r3, lr}
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	217c      	movs	r1, #124	; 0x7c
 800e0aa:	f7ff ffe2 	bl	800e072 <dwt_read16bitoffsetreg>
 800e0ae:	bd08      	pop	{r3, pc}

0800e0b0 <ull_readclockoffset>:
 800e0b0:	b508      	push	{r3, lr}
 800e0b2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e0b4:	7b9b      	ldrb	r3, [r3, #14]
 800e0b6:	2b01      	cmp	r3, #1
 800e0b8:	d00a      	beq.n	800e0d0 <ull_readclockoffset+0x20>
 800e0ba:	2b03      	cmp	r3, #3
 800e0bc:	d10e      	bne.n	800e0dc <ull_readclockoffset+0x2c>
 800e0be:	220c      	movs	r2, #12
 800e0c0:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800e0c4:	f7ff ffd5 	bl	800e072 <dwt_read16bitoffsetreg>
 800e0c8:	b200      	sxth	r0, r0
 800e0ca:	f340 000c 	sbfx	r0, r0, #0, #13
 800e0ce:	bd08      	pop	{r3, pc}
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	4905      	ldr	r1, [pc, #20]	; (800e0e8 <ull_readclockoffset+0x38>)
 800e0d4:	f7ff ffcd 	bl	800e072 <dwt_read16bitoffsetreg>
 800e0d8:	b200      	sxth	r0, r0
 800e0da:	e7f6      	b.n	800e0ca <ull_readclockoffset+0x1a>
 800e0dc:	2200      	movs	r2, #0
 800e0de:	4903      	ldr	r1, [pc, #12]	; (800e0ec <ull_readclockoffset+0x3c>)
 800e0e0:	f7ff ffc7 	bl	800e072 <dwt_read16bitoffsetreg>
 800e0e4:	b200      	sxth	r0, r0
 800e0e6:	e7f0      	b.n	800e0ca <ull_readclockoffset+0x1a>
 800e0e8:	0018000c 	.word	0x0018000c
 800e0ec:	000c0020 	.word	0x000c0020

0800e0f0 <dwt_read8bitoffsetreg>:
 800e0f0:	b500      	push	{lr}
 800e0f2:	b085      	sub	sp, #20
 800e0f4:	f10d 030f 	add.w	r3, sp, #15
 800e0f8:	9300      	str	r3, [sp, #0]
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	b292      	uxth	r2, r2
 800e0fe:	f7ff ff98 	bl	800e032 <dwt_readfromdevice>
 800e102:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800e106:	b005      	add	sp, #20
 800e108:	f85d fb04 	ldr.w	pc, [sp], #4

0800e10c <ull_readcarrierintegrator>:
 800e10c:	b500      	push	{lr}
 800e10e:	b085      	sub	sp, #20
 800e110:	ab03      	add	r3, sp, #12
 800e112:	9300      	str	r3, [sp, #0]
 800e114:	2303      	movs	r3, #3
 800e116:	2200      	movs	r2, #0
 800e118:	490b      	ldr	r1, [pc, #44]	; (800e148 <ull_readcarrierintegrator+0x3c>)
 800e11a:	f7ff ff8a 	bl	800e032 <dwt_readfromdevice>
 800e11e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800e122:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800e126:	eb00 2303 	add.w	r3, r0, r3, lsl #8
 800e12a:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800e12e:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 800e132:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800e136:	bf1c      	itt	ne
 800e138:	ea6f 3000 	mvnne.w	r0, r0, lsl #12
 800e13c:	ea6f 3010 	mvnne.w	r0, r0, lsr #12
 800e140:	b005      	add	sp, #20
 800e142:	f85d fb04 	ldr.w	pc, [sp], #4
 800e146:	bf00      	nop
 800e148:	00060029 	.word	0x00060029

0800e14c <ull_readdiagnostics>:
 800e14c:	b530      	push	{r4, r5, lr}
 800e14e:	b0bd      	sub	sp, #244	; 0xf4
 800e150:	4605      	mov	r5, r0
 800e152:	460c      	mov	r4, r1
 800e154:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e156:	7b9a      	ldrb	r2, [r3, #14]
 800e158:	2a01      	cmp	r2, #1
 800e15a:	d01c      	beq.n	800e196 <ull_readdiagnostics+0x4a>
 800e15c:	2a03      	cmp	r2, #3
 800e15e:	f040 81f1 	bne.w	800e544 <ull_readdiagnostics+0x3f8>
 800e162:	7d9b      	ldrb	r3, [r3, #22]
 800e164:	f013 0f08 	tst.w	r3, #8
 800e168:	d10c      	bne.n	800e184 <ull_readdiagnostics+0x38>
 800e16a:	f013 0f04 	tst.w	r3, #4
 800e16e:	ab02      	add	r3, sp, #8
 800e170:	9300      	str	r3, [sp, #0]
 800e172:	bf14      	ite	ne
 800e174:	2338      	movne	r3, #56	; 0x38
 800e176:	2320      	moveq	r3, #32
 800e178:	2200      	movs	r2, #0
 800e17a:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800e17e:	f7ff ff58 	bl	800e032 <dwt_readfromdevice>
 800e182:	e019      	b.n	800e1b8 <ull_readdiagnostics+0x6c>
 800e184:	ab02      	add	r3, sp, #8
 800e186:	9300      	str	r3, [sp, #0]
 800e188:	23e8      	movs	r3, #232	; 0xe8
 800e18a:	2200      	movs	r2, #0
 800e18c:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800e190:	f7ff ff4f 	bl	800e032 <dwt_readfromdevice>
 800e194:	e010      	b.n	800e1b8 <ull_readdiagnostics+0x6c>
 800e196:	7d9b      	ldrb	r3, [r3, #22]
 800e198:	f013 0f08 	tst.w	r3, #8
 800e19c:	f040 81c9 	bne.w	800e532 <ull_readdiagnostics+0x3e6>
 800e1a0:	f013 0f04 	tst.w	r3, #4
 800e1a4:	ab02      	add	r3, sp, #8
 800e1a6:	9300      	str	r3, [sp, #0]
 800e1a8:	bf14      	ite	ne
 800e1aa:	2338      	movne	r3, #56	; 0x38
 800e1ac:	2320      	moveq	r3, #32
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800e1b4:	f7ff ff3d 	bl	800e032 <dwt_readfromdevice>
 800e1b8:	f10d 0217 	add.w	r2, sp, #23
 800e1bc:	f104 031a 	add.w	r3, r4, #26
 800e1c0:	f104 0020 	add.w	r0, r4, #32
 800e1c4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800e1c8:	f803 1b01 	strb.w	r1, [r3], #1
 800e1cc:	4283      	cmp	r3, r0
 800e1ce:	d1f9      	bne.n	800e1c4 <ull_readdiagnostics+0x78>
 800e1d0:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800e1d4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800e1d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e1dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e1e0:	8463      	strh	r3, [r4, #34]	; 0x22
 800e1e2:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800e1e6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800e1ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e1ee:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e1f2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800e1f6:	bf1c      	itt	ne
 800e1f8:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 800e1fc:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 800e200:	8423      	strh	r3, [r4, #32]
 800e202:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 800e206:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800e20a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e20e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e212:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800e214:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800e216:	7d9b      	ldrb	r3, [r3, #22]
 800e218:	f013 0f02 	tst.w	r3, #2
 800e21c:	f040 817e 	bne.w	800e51c <ull_readdiagnostics+0x3d0>
 800e220:	aa0a      	add	r2, sp, #40	; 0x28
 800e222:	1e63      	subs	r3, r4, #1
 800e224:	1d20      	adds	r0, r4, #4
 800e226:	f812 1b01 	ldrb.w	r1, [r2], #1
 800e22a:	f803 1f01 	strb.w	r1, [r3, #1]!
 800e22e:	79d1      	ldrb	r1, [r2, #7]
 800e230:	7219      	strb	r1, [r3, #8]
 800e232:	7bd1      	ldrb	r1, [r2, #15]
 800e234:	7459      	strb	r1, [r3, #17]
 800e236:	4283      	cmp	r3, r0
 800e238:	d1f5      	bne.n	800e226 <ull_readdiagnostics+0xda>
 800e23a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800e23e:	7163      	strb	r3, [r4, #5]
 800e240:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 800e244:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 800e248:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e24c:	80e3      	strh	r3, [r4, #6]
 800e24e:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800e252:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800e256:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e25a:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800e25e:	f8a4 300d 	strh.w	r3, [r4, #13]
 800e262:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800e266:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800e26a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e26e:	f8a4 300f 	strh.w	r3, [r4, #15]
 800e272:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 800e276:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800e27a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e27e:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800e282:	82e3      	strh	r3, [r4, #22]
 800e284:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 800e288:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 800e28c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e290:	8323      	strh	r3, [r4, #24]
 800e292:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800e294:	7d9b      	ldrb	r3, [r3, #22]
 800e296:	f013 0f04 	tst.w	r3, #4
 800e29a:	f040 813f 	bne.w	800e51c <ull_readdiagnostics+0x3d0>
 800e29e:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 800e2a2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800e2a6:	041b      	lsls	r3, r3, #16
 800e2a8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e2ac:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800e2b0:	4313      	orrs	r3, r2
 800e2b2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800e2b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e2ba:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800e2be:	6263      	str	r3, [r4, #36]	; 0x24
 800e2c0:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 800e2c4:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 800e2c8:	041b      	lsls	r3, r3, #16
 800e2ca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e2ce:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800e2d2:	4313      	orrs	r3, r2
 800e2d4:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 800e2d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e2dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e2e0:	62a3      	str	r3, [r4, #40]	; 0x28
 800e2e2:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 800e2e6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 800e2ea:	041b      	lsls	r3, r3, #16
 800e2ec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e2f0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 800e2f4:	4313      	orrs	r3, r2
 800e2f6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 800e2fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e2fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e302:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e304:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 800e308:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 800e30c:	041b      	lsls	r3, r3, #16
 800e30e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e312:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 800e316:	4313      	orrs	r3, r2
 800e318:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 800e31c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e320:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e324:	6323      	str	r3, [r4, #48]	; 0x30
 800e326:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 800e32a:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 800e32e:	041b      	lsls	r3, r3, #16
 800e330:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e334:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800e338:	4313      	orrs	r3, r2
 800e33a:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 800e33e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e342:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e346:	6363      	str	r3, [r4, #52]	; 0x34
 800e348:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 800e34c:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 800e350:	041b      	lsls	r3, r3, #16
 800e352:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e356:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800e35a:	4313      	orrs	r3, r2
 800e35c:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 800e360:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e364:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e368:	63a3      	str	r3, [r4, #56]	; 0x38
 800e36a:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 800e36e:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800e372:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e376:	87a3      	strh	r3, [r4, #60]	; 0x3c
 800e378:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 800e37c:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 800e380:	041b      	lsls	r3, r3, #16
 800e382:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e386:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 800e38a:	4313      	orrs	r3, r2
 800e38c:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 800e390:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e394:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800e398:	6423      	str	r3, [r4, #64]	; 0x40
 800e39a:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 800e39e:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 800e3a2:	041b      	lsls	r3, r3, #16
 800e3a4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e3a8:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 800e3ac:	4313      	orrs	r3, r2
 800e3ae:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
 800e3b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e3b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e3ba:	6463      	str	r3, [r4, #68]	; 0x44
 800e3bc:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 800e3c0:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 800e3c4:	041b      	lsls	r3, r3, #16
 800e3c6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e3ca:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 800e3ce:	4313      	orrs	r3, r2
 800e3d0:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 800e3d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e3d8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e3dc:	64a3      	str	r3, [r4, #72]	; 0x48
 800e3de:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 800e3e2:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 800e3e6:	041b      	lsls	r3, r3, #16
 800e3e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e3ec:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 800e3f0:	4313      	orrs	r3, r2
 800e3f2:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
 800e3f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e3fa:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e3fe:	64e3      	str	r3, [r4, #76]	; 0x4c
 800e400:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 800e404:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
 800e408:	041b      	lsls	r3, r3, #16
 800e40a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e40e:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 800e412:	4313      	orrs	r3, r2
 800e414:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 800e418:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e41c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e420:	6523      	str	r3, [r4, #80]	; 0x50
 800e422:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 800e426:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 800e42a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e42e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800e432:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 800e436:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 800e43a:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 800e43e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e442:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e446:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 800e44a:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 800e44e:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 800e452:	041b      	lsls	r3, r3, #16
 800e454:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e458:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 800e45c:	4313      	orrs	r3, r2
 800e45e:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 800e462:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e466:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800e46a:	65a3      	str	r3, [r4, #88]	; 0x58
 800e46c:	f89d 20c3 	ldrb.w	r2, [sp, #195]	; 0xc3
 800e470:	f89d 30c2 	ldrb.w	r3, [sp, #194]	; 0xc2
 800e474:	041b      	lsls	r3, r3, #16
 800e476:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e47a:	f89d 20c0 	ldrb.w	r2, [sp, #192]	; 0xc0
 800e47e:	4313      	orrs	r3, r2
 800e480:	f89d 20c1 	ldrb.w	r2, [sp, #193]	; 0xc1
 800e484:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e488:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e48c:	65e3      	str	r3, [r4, #92]	; 0x5c
 800e48e:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
 800e492:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
 800e496:	041b      	lsls	r3, r3, #16
 800e498:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e49c:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 800e4a0:	4313      	orrs	r3, r2
 800e4a2:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
 800e4a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e4aa:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e4ae:	6623      	str	r3, [r4, #96]	; 0x60
 800e4b0:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
 800e4b4:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 800e4b8:	041b      	lsls	r3, r3, #16
 800e4ba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e4be:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 800e4c2:	4313      	orrs	r3, r2
 800e4c4:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 800e4c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e4cc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e4d0:	6663      	str	r3, [r4, #100]	; 0x64
 800e4d2:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
 800e4d6:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
 800e4da:	041b      	lsls	r3, r3, #16
 800e4dc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e4e0:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 800e4e4:	4313      	orrs	r3, r2
 800e4e6:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 800e4ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e4ee:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e4f2:	66a3      	str	r3, [r4, #104]	; 0x68
 800e4f4:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 800e4f8:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 800e4fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e500:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800e504:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800e508:	f89d 20ed 	ldrb.w	r2, [sp, #237]	; 0xed
 800e50c:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 800e510:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e518:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 800e51c:	f994 301b 	ldrsb.w	r3, [r4, #27]
 800e520:	2b00      	cmp	r3, #0
 800e522:	f2c0 81d0 	blt.w	800e8c6 <ull_readdiagnostics+0x77a>
 800e526:	7fe3      	ldrb	r3, [r4, #31]
 800e528:	f003 0301 	and.w	r3, r3, #1
 800e52c:	77e3      	strb	r3, [r4, #31]
 800e52e:	b03d      	add	sp, #244	; 0xf4
 800e530:	bd30      	pop	{r4, r5, pc}
 800e532:	ab02      	add	r3, sp, #8
 800e534:	9300      	str	r3, [sp, #0]
 800e536:	23e8      	movs	r3, #232	; 0xe8
 800e538:	2200      	movs	r2, #0
 800e53a:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800e53e:	f7ff fd78 	bl	800e032 <dwt_readfromdevice>
 800e542:	e639      	b.n	800e1b8 <ull_readdiagnostics+0x6c>
 800e544:	7d9b      	ldrb	r3, [r3, #22]
 800e546:	f013 0f01 	tst.w	r3, #1
 800e54a:	f000 81b3 	beq.w	800e8b4 <ull_readdiagnostics+0x768>
 800e54e:	ab02      	add	r3, sp, #8
 800e550:	9300      	str	r3, [sp, #0]
 800e552:	236c      	movs	r3, #108	; 0x6c
 800e554:	2200      	movs	r2, #0
 800e556:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800e55a:	f7ff fd6a 	bl	800e032 <dwt_readfromdevice>
 800e55e:	ab1d      	add	r3, sp, #116	; 0x74
 800e560:	9300      	str	r3, [sp, #0]
 800e562:	236c      	movs	r3, #108	; 0x6c
 800e564:	2200      	movs	r2, #0
 800e566:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 800e56a:	4628      	mov	r0, r5
 800e56c:	f7ff fd61 	bl	800e032 <dwt_readfromdevice>
 800e570:	aa02      	add	r2, sp, #8
 800e572:	1e63      	subs	r3, r4, #1
 800e574:	1d20      	adds	r0, r4, #4
 800e576:	f812 1b01 	ldrb.w	r1, [r2], #1
 800e57a:	f803 1f01 	strb.w	r1, [r3, #1]!
 800e57e:	79d1      	ldrb	r1, [r2, #7]
 800e580:	7219      	strb	r1, [r3, #8]
 800e582:	7bd1      	ldrb	r1, [r2, #15]
 800e584:	7459      	strb	r1, [r3, #17]
 800e586:	7dd1      	ldrb	r1, [r2, #23]
 800e588:	7699      	strb	r1, [r3, #26]
 800e58a:	4283      	cmp	r3, r0
 800e58c:	d1f3      	bne.n	800e576 <ull_readdiagnostics+0x42a>
 800e58e:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800e592:	77e3      	strb	r3, [r4, #31]
 800e594:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800e598:	7163      	strb	r3, [r4, #5]
 800e59a:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800e59e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800e5a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e5a6:	80e3      	strh	r3, [r4, #6]
 800e5a8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e5ac:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800e5b0:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800e5b4:	f3c2 12cf 	ubfx	r2, r2, #7, #16
 800e5b8:	f8a4 200d 	strh.w	r2, [r4, #13]
 800e5bc:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800e5c0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800e5c4:	f8a4 200f 	strh.w	r2, [r4, #15]
 800e5c8:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800e5cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e5d0:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800e5d4:	82e3      	strh	r3, [r4, #22]
 800e5d6:	f89d 201e 	ldrb.w	r2, [sp, #30]
 800e5da:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800e5de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e5e2:	8323      	strh	r3, [r4, #24]
 800e5e4:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 800e5e8:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 800e5ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e5f0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e5f4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800e5f8:	bf1c      	itt	ne
 800e5fa:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 800e5fe:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 800e602:	8423      	strh	r3, [r4, #32]
 800e604:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 800e608:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800e60c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e610:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e614:	8463      	strh	r3, [r4, #34]	; 0x22
 800e616:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 800e61a:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800e61e:	041b      	lsls	r3, r3, #16
 800e620:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e624:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 800e628:	4313      	orrs	r3, r2
 800e62a:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 800e62e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e632:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800e636:	6263      	str	r3, [r4, #36]	; 0x24
 800e638:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800e63a:	7d9b      	ldrb	r3, [r3, #22]
 800e63c:	f013 0f01 	tst.w	r3, #1
 800e640:	f43f af6c 	beq.w	800e51c <ull_readdiagnostics+0x3d0>
 800e644:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800e648:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 800e64c:	041b      	lsls	r3, r3, #16
 800e64e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e652:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800e656:	4313      	orrs	r3, r2
 800e658:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 800e65c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e660:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e664:	62a3      	str	r3, [r4, #40]	; 0x28
 800e666:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800e66a:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800e66e:	041b      	lsls	r3, r3, #16
 800e670:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e674:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800e678:	4313      	orrs	r3, r2
 800e67a:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800e67e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e682:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e686:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e688:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 800e68c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 800e690:	041b      	lsls	r3, r3, #16
 800e692:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e696:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 800e69a:	4313      	orrs	r3, r2
 800e69c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 800e6a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e6a4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e6a8:	6323      	str	r3, [r4, #48]	; 0x30
 800e6aa:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 800e6ae:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800e6b2:	041b      	lsls	r3, r3, #16
 800e6b4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e6b8:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800e6bc:	4313      	orrs	r3, r2
 800e6be:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 800e6c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e6c6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e6ca:	6363      	str	r3, [r4, #52]	; 0x34
 800e6cc:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 800e6d0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800e6d4:	041b      	lsls	r3, r3, #16
 800e6d6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e6da:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800e6de:	4313      	orrs	r3, r2
 800e6e0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800e6e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e6e8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e6ec:	63a3      	str	r3, [r4, #56]	; 0x38
 800e6ee:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 800e6f2:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800e6f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e6fa:	87a3      	strh	r3, [r4, #60]	; 0x3c
 800e6fc:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 800e700:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800e704:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e70c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800e70e:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 800e712:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 800e716:	041b      	lsls	r3, r3, #16
 800e718:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e71c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800e720:	4313      	orrs	r3, r2
 800e722:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 800e726:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e72a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800e72e:	6423      	str	r3, [r4, #64]	; 0x40
 800e730:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 800e734:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
 800e738:	041b      	lsls	r3, r3, #16
 800e73a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e73e:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 800e742:	4313      	orrs	r3, r2
 800e744:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 800e748:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e74c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e750:	6463      	str	r3, [r4, #68]	; 0x44
 800e752:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
 800e756:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 800e75a:	041b      	lsls	r3, r3, #16
 800e75c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e760:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 800e764:	4313      	orrs	r3, r2
 800e766:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 800e76a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e76e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e772:	64a3      	str	r3, [r4, #72]	; 0x48
 800e774:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 800e778:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 800e77c:	041b      	lsls	r3, r3, #16
 800e77e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e782:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 800e786:	4313      	orrs	r3, r2
 800e788:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
 800e78c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e790:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e794:	64e3      	str	r3, [r4, #76]	; 0x4c
 800e796:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 800e79a:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 800e79e:	041b      	lsls	r3, r3, #16
 800e7a0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e7a4:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 800e7a8:	4313      	orrs	r3, r2
 800e7aa:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 800e7ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e7b2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e7b6:	6523      	str	r3, [r4, #80]	; 0x50
 800e7b8:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 800e7bc:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 800e7c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e7c4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800e7c8:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 800e7cc:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 800e7d0:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 800e7d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e7d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e7dc:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 800e7e0:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 800e7e4:	f89d 30ae 	ldrb.w	r3, [sp, #174]	; 0xae
 800e7e8:	041b      	lsls	r3, r3, #16
 800e7ea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e7ee:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 800e7f2:	4313      	orrs	r3, r2
 800e7f4:	f89d 20ad 	ldrb.w	r2, [sp, #173]	; 0xad
 800e7f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e7fc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800e800:	65a3      	str	r3, [r4, #88]	; 0x58
 800e802:	f89d 20b3 	ldrb.w	r2, [sp, #179]	; 0xb3
 800e806:	f89d 30b2 	ldrb.w	r3, [sp, #178]	; 0xb2
 800e80a:	041b      	lsls	r3, r3, #16
 800e80c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e810:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 800e814:	4313      	orrs	r3, r2
 800e816:	f89d 20b1 	ldrb.w	r2, [sp, #177]	; 0xb1
 800e81a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e81e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e822:	65e3      	str	r3, [r4, #92]	; 0x5c
 800e824:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 800e828:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
 800e82c:	041b      	lsls	r3, r3, #16
 800e82e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e832:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 800e836:	4313      	orrs	r3, r2
 800e838:	f89d 20b5 	ldrb.w	r2, [sp, #181]	; 0xb5
 800e83c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e840:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e844:	6623      	str	r3, [r4, #96]	; 0x60
 800e846:	f89d 20bb 	ldrb.w	r2, [sp, #187]	; 0xbb
 800e84a:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
 800e84e:	041b      	lsls	r3, r3, #16
 800e850:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e854:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 800e858:	4313      	orrs	r3, r2
 800e85a:	f89d 20b9 	ldrb.w	r2, [sp, #185]	; 0xb9
 800e85e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e862:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e866:	6663      	str	r3, [r4, #100]	; 0x64
 800e868:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 800e86c:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 800e870:	041b      	lsls	r3, r3, #16
 800e872:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e876:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 800e87a:	4313      	orrs	r3, r2
 800e87c:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 800e880:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e884:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e888:	66a3      	str	r3, [r4, #104]	; 0x68
 800e88a:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 800e88e:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 800e892:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e896:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800e89a:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800e89e:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 800e8a2:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 800e8a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e8aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e8ae:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 800e8b2:	e633      	b.n	800e51c <ull_readdiagnostics+0x3d0>
 800e8b4:	ab02      	add	r3, sp, #8
 800e8b6:	9300      	str	r3, [sp, #0]
 800e8b8:	2328      	movs	r3, #40	; 0x28
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800e8c0:	f7ff fbb7 	bl	800e032 <dwt_readfromdevice>
 800e8c4:	e654      	b.n	800e570 <ull_readdiagnostics+0x424>
 800e8c6:	23ff      	movs	r3, #255	; 0xff
 800e8c8:	7723      	strb	r3, [r4, #28]
 800e8ca:	7763      	strb	r3, [r4, #29]
 800e8cc:	77a3      	strb	r3, [r4, #30]
 800e8ce:	77e3      	strb	r3, [r4, #31]
 800e8d0:	e629      	b.n	800e526 <ull_readdiagnostics+0x3da>
	...

0800e8d4 <ull_readrxtimestamp>:
 800e8d4:	b500      	push	{lr}
 800e8d6:	b083      	sub	sp, #12
 800e8d8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e8da:	7b9b      	ldrb	r3, [r3, #14]
 800e8dc:	2b01      	cmp	r3, #1
 800e8de:	d00b      	beq.n	800e8f8 <ull_readrxtimestamp+0x24>
 800e8e0:	2b03      	cmp	r3, #3
 800e8e2:	d110      	bne.n	800e906 <ull_readrxtimestamp+0x32>
 800e8e4:	9100      	str	r1, [sp, #0]
 800e8e6:	2305      	movs	r3, #5
 800e8e8:	2204      	movs	r2, #4
 800e8ea:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800e8ee:	f7ff fba0 	bl	800e032 <dwt_readfromdevice>
 800e8f2:	b003      	add	sp, #12
 800e8f4:	f85d fb04 	ldr.w	pc, [sp], #4
 800e8f8:	9100      	str	r1, [sp, #0]
 800e8fa:	2305      	movs	r3, #5
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	4905      	ldr	r1, [pc, #20]	; (800e914 <ull_readrxtimestamp+0x40>)
 800e900:	f7ff fb97 	bl	800e032 <dwt_readfromdevice>
 800e904:	e7f5      	b.n	800e8f2 <ull_readrxtimestamp+0x1e>
 800e906:	9100      	str	r1, [sp, #0]
 800e908:	2305      	movs	r3, #5
 800e90a:	2200      	movs	r2, #0
 800e90c:	2160      	movs	r1, #96	; 0x60
 800e90e:	f7ff fb90 	bl	800e032 <dwt_readfromdevice>
 800e912:	e7ee      	b.n	800e8f2 <ull_readrxtimestamp+0x1e>
 800e914:	00180004 	.word	0x00180004

0800e918 <dwt_writetodevice>:
 800e918:	b510      	push	{r4, lr}
 800e91a:	b082      	sub	sp, #8
 800e91c:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 800e920:	9401      	str	r4, [sp, #4]
 800e922:	9c04      	ldr	r4, [sp, #16]
 800e924:	9400      	str	r4, [sp, #0]
 800e926:	f7ff fb06 	bl	800df36 <dwt_xfer3xxx>
 800e92a:	b002      	add	sp, #8
 800e92c:	bd10      	pop	{r4, pc}

0800e92e <dwt_write16bitoffsetreg>:
 800e92e:	b500      	push	{lr}
 800e930:	b085      	sub	sp, #20
 800e932:	f88d 300c 	strb.w	r3, [sp, #12]
 800e936:	0a1b      	lsrs	r3, r3, #8
 800e938:	f88d 300d 	strb.w	r3, [sp, #13]
 800e93c:	ab03      	add	r3, sp, #12
 800e93e:	9300      	str	r3, [sp, #0]
 800e940:	2302      	movs	r3, #2
 800e942:	b292      	uxth	r2, r2
 800e944:	f7ff ffe8 	bl	800e918 <dwt_writetodevice>
 800e948:	b005      	add	sp, #20
 800e94a:	f85d fb04 	ldr.w	pc, [sp], #4

0800e94e <ull_setrxantennadelay>:
 800e94e:	b508      	push	{r3, lr}
 800e950:	460b      	mov	r3, r1
 800e952:	2200      	movs	r2, #0
 800e954:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800e958:	f7ff ffe9 	bl	800e92e <dwt_write16bitoffsetreg>
 800e95c:	bd08      	pop	{r3, pc}

0800e95e <ull_settxantennadelay>:
 800e95e:	b508      	push	{r3, lr}
 800e960:	460b      	mov	r3, r1
 800e962:	2200      	movs	r2, #0
 800e964:	217c      	movs	r1, #124	; 0x7c
 800e966:	f7ff ffe2 	bl	800e92e <dwt_write16bitoffsetreg>
 800e96a:	bd08      	pop	{r3, pc}

0800e96c <ull_force_clocks>:
 800e96c:	b508      	push	{r3, lr}
 800e96e:	2901      	cmp	r1, #1
 800e970:	d002      	beq.n	800e978 <ull_force_clocks+0xc>
 800e972:	2905      	cmp	r1, #5
 800e974:	d007      	beq.n	800e986 <ull_force_clocks+0x1a>
 800e976:	bd08      	pop	{r3, pc}
 800e978:	f641 0322 	movw	r3, #6178	; 0x1822
 800e97c:	2200      	movs	r2, #0
 800e97e:	4905      	ldr	r1, [pc, #20]	; (800e994 <ull_force_clocks+0x28>)
 800e980:	f7ff ffd5 	bl	800e92e <dwt_write16bitoffsetreg>
 800e984:	e7f7      	b.n	800e976 <ull_force_clocks+0xa>
 800e986:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e98a:	2200      	movs	r2, #0
 800e98c:	4901      	ldr	r1, [pc, #4]	; (800e994 <ull_force_clocks+0x28>)
 800e98e:	f7ff ffce 	bl	800e92e <dwt_write16bitoffsetreg>
 800e992:	e7f0      	b.n	800e976 <ull_force_clocks+0xa>
 800e994:	00110004 	.word	0x00110004

0800e998 <__dwt_otp_write_wdata_id_reg>:
 800e998:	b538      	push	{r3, r4, r5, lr}
 800e99a:	4605      	mov	r5, r0
 800e99c:	460c      	mov	r4, r1
 800e99e:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 800e9a2:	b29b      	uxth	r3, r3
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800e9aa:	f7ff ffc0 	bl	800e92e <dwt_write16bitoffsetreg>
 800e9ae:	b2a3      	uxth	r3, r4
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800e9b6:	4628      	mov	r0, r5
 800e9b8:	f7ff ffb9 	bl	800e92e <dwt_write16bitoffsetreg>
 800e9bc:	bd38      	pop	{r3, r4, r5, pc}
	...

0800e9c0 <_dwt_otpread>:
 800e9c0:	b570      	push	{r4, r5, r6, lr}
 800e9c2:	4604      	mov	r4, r0
 800e9c4:	460e      	mov	r6, r1
 800e9c6:	4d0c      	ldr	r5, [pc, #48]	; (800e9f8 <_dwt_otpread+0x38>)
 800e9c8:	2301      	movs	r3, #1
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	4629      	mov	r1, r5
 800e9ce:	f7ff ffae 	bl	800e92e <dwt_write16bitoffsetreg>
 800e9d2:	4633      	mov	r3, r6
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	4909      	ldr	r1, [pc, #36]	; (800e9fc <_dwt_otpread+0x3c>)
 800e9d8:	4620      	mov	r0, r4
 800e9da:	f7ff ffa8 	bl	800e92e <dwt_write16bitoffsetreg>
 800e9de:	2302      	movs	r3, #2
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	4629      	mov	r1, r5
 800e9e4:	4620      	mov	r0, r4
 800e9e6:	f7ff ffa2 	bl	800e92e <dwt_write16bitoffsetreg>
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	4904      	ldr	r1, [pc, #16]	; (800ea00 <_dwt_otpread+0x40>)
 800e9ee:	4620      	mov	r0, r4
 800e9f0:	f7ff fb29 	bl	800e046 <dwt_read32bitoffsetreg>
 800e9f4:	bd70      	pop	{r4, r5, r6, pc}
 800e9f6:	bf00      	nop
 800e9f8:	000b0008 	.word	0x000b0008
 800e9fc:	000b0004 	.word	0x000b0004
 800ea00:	000b0010 	.word	0x000b0010

0800ea04 <dwt_write32bitoffsetreg>:
 800ea04:	b510      	push	{r4, lr}
 800ea06:	b084      	sub	sp, #16
 800ea08:	f88d 300c 	strb.w	r3, [sp, #12]
 800ea0c:	0a1c      	lsrs	r4, r3, #8
 800ea0e:	f88d 400d 	strb.w	r4, [sp, #13]
 800ea12:	0c1c      	lsrs	r4, r3, #16
 800ea14:	f88d 400e 	strb.w	r4, [sp, #14]
 800ea18:	0e1b      	lsrs	r3, r3, #24
 800ea1a:	f88d 300f 	strb.w	r3, [sp, #15]
 800ea1e:	ab03      	add	r3, sp, #12
 800ea20:	9300      	str	r3, [sp, #0]
 800ea22:	2304      	movs	r3, #4
 800ea24:	b292      	uxth	r2, r2
 800ea26:	f7ff ff77 	bl	800e918 <dwt_writetodevice>
 800ea2a:	b004      	add	sp, #16
 800ea2c:	bd10      	pop	{r4, pc}

0800ea2e <_dwt_adjust_delaytime>:
 800ea2e:	b538      	push	{r3, r4, r5, lr}
 800ea30:	4604      	mov	r4, r0
 800ea32:	b989      	cbnz	r1, 800ea58 <_dwt_adjust_delaytime+0x2a>
 800ea34:	2200      	movs	r2, #0
 800ea36:	2128      	movs	r1, #40	; 0x28
 800ea38:	f7ff fb05 	bl	800e046 <dwt_read32bitoffsetreg>
 800ea3c:	4605      	mov	r5, r0
 800ea3e:	2201      	movs	r2, #1
 800ea40:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800ea44:	4620      	mov	r0, r4
 800ea46:	f7ff fb53 	bl	800e0f0 <dwt_read8bitoffsetreg>
 800ea4a:	1a2b      	subs	r3, r5, r0
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	2128      	movs	r1, #40	; 0x28
 800ea50:	4620      	mov	r0, r4
 800ea52:	f7ff ffd7 	bl	800ea04 <dwt_write32bitoffsetreg>
 800ea56:	bd38      	pop	{r3, r4, r5, pc}
 800ea58:	2200      	movs	r2, #0
 800ea5a:	2128      	movs	r1, #40	; 0x28
 800ea5c:	f7ff faf3 	bl	800e046 <dwt_read32bitoffsetreg>
 800ea60:	4605      	mov	r5, r0
 800ea62:	2201      	movs	r2, #1
 800ea64:	217c      	movs	r1, #124	; 0x7c
 800ea66:	4620      	mov	r0, r4
 800ea68:	f7ff fb42 	bl	800e0f0 <dwt_read8bitoffsetreg>
 800ea6c:	1a2b      	subs	r3, r5, r0
 800ea6e:	2200      	movs	r2, #0
 800ea70:	2128      	movs	r1, #40	; 0x28
 800ea72:	4620      	mov	r0, r4
 800ea74:	f7ff ffc6 	bl	800ea04 <dwt_write32bitoffsetreg>
 800ea78:	e7ed      	b.n	800ea56 <_dwt_adjust_delaytime+0x28>

0800ea7a <ull_setrxaftertxdelay>:
 800ea7a:	b538      	push	{r3, r4, r5, lr}
 800ea7c:	4605      	mov	r5, r0
 800ea7e:	460c      	mov	r4, r1
 800ea80:	2200      	movs	r2, #0
 800ea82:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800ea86:	f7ff fade 	bl	800e046 <dwt_read32bitoffsetreg>
 800ea8a:	0d00      	lsrs	r0, r0, #20
 800ea8c:	0500      	lsls	r0, r0, #20
 800ea8e:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800ea92:	4303      	orrs	r3, r0
 800ea94:	2200      	movs	r2, #0
 800ea96:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800ea9a:	4628      	mov	r0, r5
 800ea9c:	f7ff ffb2 	bl	800ea04 <dwt_write32bitoffsetreg>
 800eaa0:	bd38      	pop	{r3, r4, r5, pc}
	...

0800eaa4 <ull_setfinegraintxseq>:
 800eaa4:	b508      	push	{r3, lr}
 800eaa6:	b929      	cbnz	r1, 800eab4 <ull_setfinegraintxseq+0x10>
 800eaa8:	4b05      	ldr	r3, [pc, #20]	; (800eac0 <ull_setfinegraintxseq+0x1c>)
 800eaaa:	2202      	movs	r2, #2
 800eaac:	4905      	ldr	r1, [pc, #20]	; (800eac4 <ull_setfinegraintxseq+0x20>)
 800eaae:	f7ff ffa9 	bl	800ea04 <dwt_write32bitoffsetreg>
 800eab2:	bd08      	pop	{r3, pc}
 800eab4:	4b04      	ldr	r3, [pc, #16]	; (800eac8 <ull_setfinegraintxseq+0x24>)
 800eab6:	2202      	movs	r2, #2
 800eab8:	4902      	ldr	r1, [pc, #8]	; (800eac4 <ull_setfinegraintxseq+0x20>)
 800eaba:	f7ff ffa3 	bl	800ea04 <dwt_write32bitoffsetreg>
 800eabe:	e7f8      	b.n	800eab2 <ull_setfinegraintxseq+0xe>
 800eac0:	00d20874 	.word	0x00d20874
 800eac4:	00110010 	.word	0x00110010
 800eac8:	04d28874 	.word	0x04d28874

0800eacc <ull_setlnapamode>:
 800eacc:	b538      	push	{r3, r4, r5, lr}
 800eace:	4605      	mov	r5, r0
 800ead0:	460c      	mov	r4, r1
 800ead2:	2200      	movs	r2, #0
 800ead4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800ead8:	f7ff fab5 	bl	800e046 <dwt_read32bitoffsetreg>
 800eadc:	f420 337c 	bic.w	r3, r0, #258048	; 0x3f000
 800eae0:	f014 0f01 	tst.w	r4, #1
 800eae4:	bf18      	it	ne
 800eae6:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
 800eaea:	f014 0f02 	tst.w	r4, #2
 800eaee:	bf18      	it	ne
 800eaf0:	f443 5300 	orrne.w	r3, r3, #8192	; 0x2000
 800eaf4:	f014 0f04 	tst.w	r4, #4
 800eaf8:	bf18      	it	ne
 800eafa:	f443 3390 	orrne.w	r3, r3, #73728	; 0x12000
 800eafe:	2200      	movs	r2, #0
 800eb00:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800eb04:	4628      	mov	r0, r5
 800eb06:	f7ff ff7d 	bl	800ea04 <dwt_write32bitoffsetreg>
 800eb0a:	bd38      	pop	{r3, r4, r5, pc}

0800eb0c <ull_configurestskey>:
 800eb0c:	b538      	push	{r3, r4, r5, lr}
 800eb0e:	4605      	mov	r5, r0
 800eb10:	460c      	mov	r4, r1
 800eb12:	680b      	ldr	r3, [r1, #0]
 800eb14:	2200      	movs	r2, #0
 800eb16:	490b      	ldr	r1, [pc, #44]	; (800eb44 <ull_configurestskey+0x38>)
 800eb18:	f7ff ff74 	bl	800ea04 <dwt_write32bitoffsetreg>
 800eb1c:	6863      	ldr	r3, [r4, #4]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	4909      	ldr	r1, [pc, #36]	; (800eb48 <ull_configurestskey+0x3c>)
 800eb22:	4628      	mov	r0, r5
 800eb24:	f7ff ff6e 	bl	800ea04 <dwt_write32bitoffsetreg>
 800eb28:	68a3      	ldr	r3, [r4, #8]
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	4907      	ldr	r1, [pc, #28]	; (800eb4c <ull_configurestskey+0x40>)
 800eb2e:	4628      	mov	r0, r5
 800eb30:	f7ff ff68 	bl	800ea04 <dwt_write32bitoffsetreg>
 800eb34:	68e3      	ldr	r3, [r4, #12]
 800eb36:	2200      	movs	r2, #0
 800eb38:	4905      	ldr	r1, [pc, #20]	; (800eb50 <ull_configurestskey+0x44>)
 800eb3a:	4628      	mov	r0, r5
 800eb3c:	f7ff ff62 	bl	800ea04 <dwt_write32bitoffsetreg>
 800eb40:	bd38      	pop	{r3, r4, r5, pc}
 800eb42:	bf00      	nop
 800eb44:	0002000c 	.word	0x0002000c
 800eb48:	00020010 	.word	0x00020010
 800eb4c:	00020014 	.word	0x00020014
 800eb50:	00020018 	.word	0x00020018

0800eb54 <ull_configurestsiv>:
 800eb54:	b538      	push	{r3, r4, r5, lr}
 800eb56:	4605      	mov	r5, r0
 800eb58:	460c      	mov	r4, r1
 800eb5a:	680b      	ldr	r3, [r1, #0]
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	490b      	ldr	r1, [pc, #44]	; (800eb8c <ull_configurestsiv+0x38>)
 800eb60:	f7ff ff50 	bl	800ea04 <dwt_write32bitoffsetreg>
 800eb64:	6863      	ldr	r3, [r4, #4]
 800eb66:	2200      	movs	r2, #0
 800eb68:	4909      	ldr	r1, [pc, #36]	; (800eb90 <ull_configurestsiv+0x3c>)
 800eb6a:	4628      	mov	r0, r5
 800eb6c:	f7ff ff4a 	bl	800ea04 <dwt_write32bitoffsetreg>
 800eb70:	68a3      	ldr	r3, [r4, #8]
 800eb72:	2200      	movs	r2, #0
 800eb74:	4907      	ldr	r1, [pc, #28]	; (800eb94 <ull_configurestsiv+0x40>)
 800eb76:	4628      	mov	r0, r5
 800eb78:	f7ff ff44 	bl	800ea04 <dwt_write32bitoffsetreg>
 800eb7c:	68e3      	ldr	r3, [r4, #12]
 800eb7e:	2200      	movs	r2, #0
 800eb80:	4905      	ldr	r1, [pc, #20]	; (800eb98 <ull_configurestsiv+0x44>)
 800eb82:	4628      	mov	r0, r5
 800eb84:	f7ff ff3e 	bl	800ea04 <dwt_write32bitoffsetreg>
 800eb88:	bd38      	pop	{r3, r4, r5, pc}
 800eb8a:	bf00      	nop
 800eb8c:	0002001c 	.word	0x0002001c
 800eb90:	00020020 	.word	0x00020020
 800eb94:	00020024 	.word	0x00020024
 800eb98:	00020028 	.word	0x00020028

0800eb9c <ull_configmrxlut>:
 800eb9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eba0:	4604      	mov	r4, r0
 800eba2:	4d35      	ldr	r5, [pc, #212]	; (800ec78 <ull_configmrxlut+0xdc>)
 800eba4:	4b35      	ldr	r3, [pc, #212]	; (800ec7c <ull_configmrxlut+0xe0>)
 800eba6:	2905      	cmp	r1, #5
 800eba8:	bf18      	it	ne
 800ebaa:	461d      	movne	r5, r3
 800ebac:	4e34      	ldr	r6, [pc, #208]	; (800ec80 <ull_configmrxlut+0xe4>)
 800ebae:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800ebb2:	2905      	cmp	r1, #5
 800ebb4:	bf18      	it	ne
 800ebb6:	461e      	movne	r6, r3
 800ebb8:	4f32      	ldr	r7, [pc, #200]	; (800ec84 <ull_configmrxlut+0xe8>)
 800ebba:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ebbe:	2905      	cmp	r1, #5
 800ebc0:	bf18      	it	ne
 800ebc2:	461f      	movne	r7, r3
 800ebc4:	4a30      	ldr	r2, [pc, #192]	; (800ec88 <ull_configmrxlut+0xec>)
 800ebc6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800ebca:	2905      	cmp	r1, #5
 800ebcc:	bf0c      	ite	eq
 800ebce:	4690      	moveq	r8, r2
 800ebd0:	4698      	movne	r8, r3
 800ebd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ebd6:	f5a3 5388 	sub.w	r3, r3, #4352	; 0x1100
 800ebda:	2905      	cmp	r1, #5
 800ebdc:	bf0c      	ite	eq
 800ebde:	4691      	moveq	r9, r2
 800ebe0:	4699      	movne	r9, r3
 800ebe2:	4a2a      	ldr	r2, [pc, #168]	; (800ec8c <ull_configmrxlut+0xf0>)
 800ebe4:	f5a3 63af 	sub.w	r3, r3, #1400	; 0x578
 800ebe8:	2905      	cmp	r1, #5
 800ebea:	bf0c      	ite	eq
 800ebec:	4692      	moveq	sl, r2
 800ebee:	469a      	movne	sl, r3
 800ebf0:	4b27      	ldr	r3, [pc, #156]	; (800ec90 <ull_configmrxlut+0xf4>)
 800ebf2:	4a28      	ldr	r2, [pc, #160]	; (800ec94 <ull_configmrxlut+0xf8>)
 800ebf4:	2905      	cmp	r1, #5
 800ebf6:	bf0c      	ite	eq
 800ebf8:	469b      	moveq	fp, r3
 800ebfa:	4693      	movne	fp, r2
 800ebfc:	f44f 7310 	mov.w	r3, #576	; 0x240
 800ec00:	2200      	movs	r2, #0
 800ec02:	4925      	ldr	r1, [pc, #148]	; (800ec98 <ull_configmrxlut+0xfc>)
 800ec04:	f7ff fefe 	bl	800ea04 <dwt_write32bitoffsetreg>
 800ec08:	4b24      	ldr	r3, [pc, #144]	; (800ec9c <ull_configmrxlut+0x100>)
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	4924      	ldr	r1, [pc, #144]	; (800eca0 <ull_configmrxlut+0x104>)
 800ec0e:	4620      	mov	r0, r4
 800ec10:	f7ff fef8 	bl	800ea04 <dwt_write32bitoffsetreg>
 800ec14:	4b23      	ldr	r3, [pc, #140]	; (800eca4 <ull_configmrxlut+0x108>)
 800ec16:	2200      	movs	r2, #0
 800ec18:	4923      	ldr	r1, [pc, #140]	; (800eca8 <ull_configmrxlut+0x10c>)
 800ec1a:	4620      	mov	r0, r4
 800ec1c:	f7ff fef2 	bl	800ea04 <dwt_write32bitoffsetreg>
 800ec20:	465b      	mov	r3, fp
 800ec22:	2200      	movs	r2, #0
 800ec24:	4921      	ldr	r1, [pc, #132]	; (800ecac <ull_configmrxlut+0x110>)
 800ec26:	4620      	mov	r0, r4
 800ec28:	f7ff feec 	bl	800ea04 <dwt_write32bitoffsetreg>
 800ec2c:	4653      	mov	r3, sl
 800ec2e:	2200      	movs	r2, #0
 800ec30:	491f      	ldr	r1, [pc, #124]	; (800ecb0 <ull_configmrxlut+0x114>)
 800ec32:	4620      	mov	r0, r4
 800ec34:	f7ff fee6 	bl	800ea04 <dwt_write32bitoffsetreg>
 800ec38:	464b      	mov	r3, r9
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	491d      	ldr	r1, [pc, #116]	; (800ecb4 <ull_configmrxlut+0x118>)
 800ec3e:	4620      	mov	r0, r4
 800ec40:	f7ff fee0 	bl	800ea04 <dwt_write32bitoffsetreg>
 800ec44:	4643      	mov	r3, r8
 800ec46:	2200      	movs	r2, #0
 800ec48:	491b      	ldr	r1, [pc, #108]	; (800ecb8 <ull_configmrxlut+0x11c>)
 800ec4a:	4620      	mov	r0, r4
 800ec4c:	f7ff feda 	bl	800ea04 <dwt_write32bitoffsetreg>
 800ec50:	463b      	mov	r3, r7
 800ec52:	2200      	movs	r2, #0
 800ec54:	4919      	ldr	r1, [pc, #100]	; (800ecbc <ull_configmrxlut+0x120>)
 800ec56:	4620      	mov	r0, r4
 800ec58:	f7ff fed4 	bl	800ea04 <dwt_write32bitoffsetreg>
 800ec5c:	4633      	mov	r3, r6
 800ec5e:	2200      	movs	r2, #0
 800ec60:	4917      	ldr	r1, [pc, #92]	; (800ecc0 <ull_configmrxlut+0x124>)
 800ec62:	4620      	mov	r0, r4
 800ec64:	f7ff fece 	bl	800ea04 <dwt_write32bitoffsetreg>
 800ec68:	462b      	mov	r3, r5
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	4915      	ldr	r1, [pc, #84]	; (800ecc4 <ull_configmrxlut+0x128>)
 800ec6e:	4620      	mov	r0, r4
 800ec70:	f7ff fec8 	bl	800ea04 <dwt_write32bitoffsetreg>
 800ec74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec78:	00039ff6 	.word	0x00039ff6
 800ec7c:	00055ffe 	.word	0x00055ffe
 800ec80:	00039dfe 	.word	0x00039dfe
 800ec84:	00039c7e 	.word	0x00039c7e
 800ec88:	00038efe 	.word	0x00038efe
 800ec8c:	0003876e 	.word	0x0003876e
 800ec90:	0003803e 	.word	0x0003803e
 800ec94:	0005407e 	.word	0x0005407e
 800ec98:	0003001c 	.word	0x0003001c
 800ec9c:	1a491248 	.word	0x1a491248
 800eca0:	00030020 	.word	0x00030020
 800eca4:	2db248db 	.word	0x2db248db
 800eca8:	00030024 	.word	0x00030024
 800ecac:	0003002c 	.word	0x0003002c
 800ecb0:	00030030 	.word	0x00030030
 800ecb4:	00030034 	.word	0x00030034
 800ecb8:	00030038 	.word	0x00030038
 800ecbc:	0003003c 	.word	0x0003003c
 800ecc0:	00030040 	.word	0x00030040
 800ecc4:	00030044 	.word	0x00030044

0800ecc8 <ull_disable_rftx_blocks>:
 800ecc8:	b508      	push	{r3, lr}
 800ecca:	2300      	movs	r3, #0
 800eccc:	461a      	mov	r2, r3
 800ecce:	4902      	ldr	r1, [pc, #8]	; (800ecd8 <ull_disable_rftx_blocks+0x10>)
 800ecd0:	f7ff fe98 	bl	800ea04 <dwt_write32bitoffsetreg>
 800ecd4:	bd08      	pop	{r3, pc}
 800ecd6:	bf00      	nop
 800ecd8:	00070004 	.word	0x00070004

0800ecdc <ull_disable_rf_tx>:
 800ecdc:	b538      	push	{r3, r4, r5, lr}
 800ecde:	4604      	mov	r4, r0
 800ece0:	460d      	mov	r5, r1
 800ece2:	2300      	movs	r3, #0
 800ece4:	461a      	mov	r2, r3
 800ece6:	490a      	ldr	r1, [pc, #40]	; (800ed10 <ull_disable_rf_tx+0x34>)
 800ece8:	f7ff fe8c 	bl	800ea04 <dwt_write32bitoffsetreg>
 800ecec:	2300      	movs	r3, #0
 800ecee:	461a      	mov	r2, r3
 800ecf0:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800ecf4:	4620      	mov	r0, r4
 800ecf6:	f7ff fe85 	bl	800ea04 <dwt_write32bitoffsetreg>
 800ecfa:	b905      	cbnz	r5, 800ecfe <ull_disable_rf_tx+0x22>
 800ecfc:	bd38      	pop	{r3, r4, r5, pc}
 800ecfe:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 800ed02:	2200      	movs	r2, #0
 800ed04:	4903      	ldr	r1, [pc, #12]	; (800ed14 <ull_disable_rf_tx+0x38>)
 800ed06:	4620      	mov	r0, r4
 800ed08:	f7ff fe7c 	bl	800ea04 <dwt_write32bitoffsetreg>
 800ed0c:	e7f6      	b.n	800ecfc <ull_disable_rf_tx+0x20>
 800ed0e:	bf00      	nop
 800ed10:	00070048 	.word	0x00070048
 800ed14:	00070014 	.word	0x00070014

0800ed18 <ull_repeated_cw>:
 800ed18:	b570      	push	{r4, r5, r6, lr}
 800ed1a:	4606      	mov	r6, r0
 800ed1c:	460c      	mov	r4, r1
 800ed1e:	4615      	mov	r5, r2
 800ed20:	2100      	movs	r1, #0
 800ed22:	f7ff febf 	bl	800eaa4 <ull_setfinegraintxseq>
 800ed26:	2d0f      	cmp	r5, #15
 800ed28:	bfa8      	it	ge
 800ed2a:	250f      	movge	r5, #15
 800ed2c:	1e63      	subs	r3, r4, #1
 800ed2e:	2b03      	cmp	r3, #3
 800ed30:	bf28      	it	cs
 800ed32:	2404      	movcs	r4, #4
 800ed34:	2310      	movs	r3, #16
 800ed36:	4123      	asrs	r3, r4
 800ed38:	2200      	movs	r2, #0
 800ed3a:	4907      	ldr	r1, [pc, #28]	; (800ed58 <ull_repeated_cw+0x40>)
 800ed3c:	4630      	mov	r0, r6
 800ed3e:	f7ff fe61 	bl	800ea04 <dwt_write32bitoffsetreg>
 800ed42:	1e63      	subs	r3, r4, #1
 800ed44:	009b      	lsls	r3, r3, #2
 800ed46:	fa05 f303 	lsl.w	r3, r5, r3
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	4903      	ldr	r1, [pc, #12]	; (800ed5c <ull_repeated_cw+0x44>)
 800ed4e:	4630      	mov	r0, r6
 800ed50:	f7ff fe58 	bl	800ea04 <dwt_write32bitoffsetreg>
 800ed54:	bd70      	pop	{r4, r5, r6, pc}
 800ed56:	bf00      	nop
 800ed58:	00070028 	.word	0x00070028
 800ed5c:	00080018 	.word	0x00080018

0800ed60 <ull_readrxdata>:
 800ed60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed62:	b083      	sub	sp, #12
 800ed64:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800ed66:	7ba4      	ldrb	r4, [r4, #14]
 800ed68:	2c03      	cmp	r4, #3
 800ed6a:	bf0c      	ite	eq
 800ed6c:	f44f 1c98 	moveq.w	ip, #1245184	; 0x130000
 800ed70:	f44f 1c90 	movne.w	ip, #1179648	; 0x120000
 800ed74:	189c      	adds	r4, r3, r2
 800ed76:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800ed7a:	da19      	bge.n	800edb0 <ull_readrxdata+0x50>
 800ed7c:	461d      	mov	r5, r3
 800ed7e:	4616      	mov	r6, r2
 800ed80:	460f      	mov	r7, r1
 800ed82:	4604      	mov	r4, r0
 800ed84:	2b7f      	cmp	r3, #127	; 0x7f
 800ed86:	d915      	bls.n	800edb4 <ull_readrxdata+0x54>
 800ed88:	ea4f 431c 	mov.w	r3, ip, lsr #16
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	490d      	ldr	r1, [pc, #52]	; (800edc4 <ull_readrxdata+0x64>)
 800ed90:	f7ff fe38 	bl	800ea04 <dwt_write32bitoffsetreg>
 800ed94:	462b      	mov	r3, r5
 800ed96:	2200      	movs	r2, #0
 800ed98:	490b      	ldr	r1, [pc, #44]	; (800edc8 <ull_readrxdata+0x68>)
 800ed9a:	4620      	mov	r0, r4
 800ed9c:	f7ff fe32 	bl	800ea04 <dwt_write32bitoffsetreg>
 800eda0:	9700      	str	r7, [sp, #0]
 800eda2:	4633      	mov	r3, r6
 800eda4:	2200      	movs	r2, #0
 800eda6:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800edaa:	4620      	mov	r0, r4
 800edac:	f7ff f941 	bl	800e032 <dwt_readfromdevice>
 800edb0:	b003      	add	sp, #12
 800edb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edb4:	9100      	str	r1, [sp, #0]
 800edb6:	4613      	mov	r3, r2
 800edb8:	462a      	mov	r2, r5
 800edba:	4661      	mov	r1, ip
 800edbc:	f7ff f939 	bl	800e032 <dwt_readfromdevice>
 800edc0:	e7f6      	b.n	800edb0 <ull_readrxdata+0x50>
 800edc2:	bf00      	nop
 800edc4:	001f0004 	.word	0x001f0004
 800edc8:	001f0008 	.word	0x001f0008

0800edcc <dwt_write8bitoffsetreg>:
 800edcc:	b510      	push	{r4, lr}
 800edce:	b084      	sub	sp, #16
 800edd0:	ac04      	add	r4, sp, #16
 800edd2:	f804 3d01 	strb.w	r3, [r4, #-1]!
 800edd6:	9400      	str	r4, [sp, #0]
 800edd8:	2301      	movs	r3, #1
 800edda:	b292      	uxth	r2, r2
 800eddc:	f7ff fd9c 	bl	800e918 <dwt_writetodevice>
 800ede0:	b004      	add	sp, #16
 800ede2:	bd10      	pop	{r4, pc}

0800ede4 <ull_getframelength>:
 800ede4:	b510      	push	{r4, lr}
 800ede6:	4604      	mov	r4, r0
 800ede8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800edea:	7b9b      	ldrb	r3, [r3, #14]
 800edec:	2b01      	cmp	r3, #1
 800edee:	d013      	beq.n	800ee18 <ull_getframelength+0x34>
 800edf0:	2b03      	cmp	r3, #3
 800edf2:	d11d      	bne.n	800ee30 <ull_getframelength+0x4c>
 800edf4:	23f0      	movs	r3, #240	; 0xf0
 800edf6:	2200      	movs	r2, #0
 800edf8:	4912      	ldr	r1, [pc, #72]	; (800ee44 <ull_getframelength+0x60>)
 800edfa:	f7ff ffe7 	bl	800edcc <dwt_write8bitoffsetreg>
 800edfe:	2200      	movs	r2, #0
 800ee00:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800ee04:	4620      	mov	r0, r4
 800ee06:	f7ff f934 	bl	800e072 <dwt_read16bitoffsetreg>
 800ee0a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ee0c:	7ada      	ldrb	r2, [r3, #11]
 800ee0e:	b1a2      	cbz	r2, 800ee3a <ull_getframelength+0x56>
 800ee10:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800ee14:	83d8      	strh	r0, [r3, #30]
 800ee16:	bd10      	pop	{r4, pc}
 800ee18:	230f      	movs	r3, #15
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	4909      	ldr	r1, [pc, #36]	; (800ee44 <ull_getframelength+0x60>)
 800ee1e:	f7ff ffd5 	bl	800edcc <dwt_write8bitoffsetreg>
 800ee22:	2200      	movs	r2, #0
 800ee24:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800ee28:	4620      	mov	r0, r4
 800ee2a:	f7ff f922 	bl	800e072 <dwt_read16bitoffsetreg>
 800ee2e:	e7ec      	b.n	800ee0a <ull_getframelength+0x26>
 800ee30:	2200      	movs	r2, #0
 800ee32:	214c      	movs	r1, #76	; 0x4c
 800ee34:	f7ff f91d 	bl	800e072 <dwt_read16bitoffsetreg>
 800ee38:	e7e7      	b.n	800ee0a <ull_getframelength+0x26>
 800ee3a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800ee3e:	83d8      	strh	r0, [r3, #30]
 800ee40:	e7e9      	b.n	800ee16 <ull_getframelength+0x32>
 800ee42:	bf00      	nop
 800ee44:	00010018 	.word	0x00010018

0800ee48 <_dwt_clear_db_events>:
 800ee48:	b510      	push	{r4, lr}
 800ee4a:	4604      	mov	r4, r0
 800ee4c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ee4e:	7b9b      	ldrb	r3, [r3, #14]
 800ee50:	2b01      	cmp	r3, #1
 800ee52:	d004      	beq.n	800ee5e <_dwt_clear_db_events+0x16>
 800ee54:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ee56:	7b9b      	ldrb	r3, [r3, #14]
 800ee58:	2b03      	cmp	r3, #3
 800ee5a:	d006      	beq.n	800ee6a <_dwt_clear_db_events+0x22>
 800ee5c:	bd10      	pop	{r4, pc}
 800ee5e:	230f      	movs	r3, #15
 800ee60:	2200      	movs	r2, #0
 800ee62:	4905      	ldr	r1, [pc, #20]	; (800ee78 <_dwt_clear_db_events+0x30>)
 800ee64:	f7ff ffb2 	bl	800edcc <dwt_write8bitoffsetreg>
 800ee68:	e7f4      	b.n	800ee54 <_dwt_clear_db_events+0xc>
 800ee6a:	23f0      	movs	r3, #240	; 0xf0
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	4902      	ldr	r1, [pc, #8]	; (800ee78 <_dwt_clear_db_events+0x30>)
 800ee70:	4620      	mov	r0, r4
 800ee72:	f7ff ffab 	bl	800edcc <dwt_write8bitoffsetreg>
 800ee76:	e7f1      	b.n	800ee5c <_dwt_clear_db_events+0x14>
 800ee78:	00010018 	.word	0x00010018

0800ee7c <ull_clearaonconfig>:
 800ee7c:	b538      	push	{r3, r4, r5, lr}
 800ee7e:	4604      	mov	r4, r0
 800ee80:	2300      	movs	r3, #0
 800ee82:	461a      	mov	r2, r3
 800ee84:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800ee88:	f7ff fd51 	bl	800e92e <dwt_write16bitoffsetreg>
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	461a      	mov	r2, r3
 800ee90:	4908      	ldr	r1, [pc, #32]	; (800eeb4 <ull_clearaonconfig+0x38>)
 800ee92:	4620      	mov	r0, r4
 800ee94:	f7ff ff9a 	bl	800edcc <dwt_write8bitoffsetreg>
 800ee98:	4d07      	ldr	r5, [pc, #28]	; (800eeb8 <ull_clearaonconfig+0x3c>)
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	461a      	mov	r2, r3
 800ee9e:	4629      	mov	r1, r5
 800eea0:	4620      	mov	r0, r4
 800eea2:	f7ff ff93 	bl	800edcc <dwt_write8bitoffsetreg>
 800eea6:	2302      	movs	r3, #2
 800eea8:	2200      	movs	r2, #0
 800eeaa:	4629      	mov	r1, r5
 800eeac:	4620      	mov	r0, r4
 800eeae:	f7ff ff8d 	bl	800edcc <dwt_write8bitoffsetreg>
 800eeb2:	bd38      	pop	{r3, r4, r5, pc}
 800eeb4:	000a0014 	.word	0x000a0014
 800eeb8:	000a0004 	.word	0x000a0004

0800eebc <ull_configeventcounters>:
 800eebc:	b538      	push	{r3, r4, r5, lr}
 800eebe:	4605      	mov	r5, r0
 800eec0:	460c      	mov	r4, r1
 800eec2:	2302      	movs	r3, #2
 800eec4:	2200      	movs	r2, #0
 800eec6:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800eeca:	f7ff ff7f 	bl	800edcc <dwt_write8bitoffsetreg>
 800eece:	b904      	cbnz	r4, 800eed2 <ull_configeventcounters+0x16>
 800eed0:	bd38      	pop	{r3, r4, r5, pc}
 800eed2:	2301      	movs	r3, #1
 800eed4:	2200      	movs	r2, #0
 800eed6:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800eeda:	4628      	mov	r0, r5
 800eedc:	f7ff ff76 	bl	800edcc <dwt_write8bitoffsetreg>
 800eee0:	e7f6      	b.n	800eed0 <ull_configeventcounters+0x14>
	...

0800eee4 <ull_aon_read>:
 800eee4:	b538      	push	{r3, r4, r5, lr}
 800eee6:	4604      	mov	r4, r0
 800eee8:	460b      	mov	r3, r1
 800eeea:	2200      	movs	r2, #0
 800eeec:	490a      	ldr	r1, [pc, #40]	; (800ef18 <ull_aon_read+0x34>)
 800eeee:	f7ff fd1e 	bl	800e92e <dwt_write16bitoffsetreg>
 800eef2:	4d0a      	ldr	r5, [pc, #40]	; (800ef1c <ull_aon_read+0x38>)
 800eef4:	2388      	movs	r3, #136	; 0x88
 800eef6:	2200      	movs	r2, #0
 800eef8:	4629      	mov	r1, r5
 800eefa:	4620      	mov	r0, r4
 800eefc:	f7ff ff66 	bl	800edcc <dwt_write8bitoffsetreg>
 800ef00:	2300      	movs	r3, #0
 800ef02:	461a      	mov	r2, r3
 800ef04:	4629      	mov	r1, r5
 800ef06:	4620      	mov	r0, r4
 800ef08:	f7ff ff60 	bl	800edcc <dwt_write8bitoffsetreg>
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	4904      	ldr	r1, [pc, #16]	; (800ef20 <ull_aon_read+0x3c>)
 800ef10:	4620      	mov	r0, r4
 800ef12:	f7ff f8ed 	bl	800e0f0 <dwt_read8bitoffsetreg>
 800ef16:	bd38      	pop	{r3, r4, r5, pc}
 800ef18:	000a000c 	.word	0x000a000c
 800ef1c:	000a0004 	.word	0x000a0004
 800ef20:	000a0008 	.word	0x000a0008

0800ef24 <ull_aon_write>:
 800ef24:	b570      	push	{r4, r5, r6, lr}
 800ef26:	4604      	mov	r4, r0
 800ef28:	460b      	mov	r3, r1
 800ef2a:	4615      	mov	r5, r2
 800ef2c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800ef30:	bf34      	ite	cc
 800ef32:	2600      	movcc	r6, #0
 800ef34:	2620      	movcs	r6, #32
 800ef36:	2200      	movs	r2, #0
 800ef38:	490b      	ldr	r1, [pc, #44]	; (800ef68 <ull_aon_write+0x44>)
 800ef3a:	f7ff fcf8 	bl	800e92e <dwt_write16bitoffsetreg>
 800ef3e:	462b      	mov	r3, r5
 800ef40:	2200      	movs	r2, #0
 800ef42:	490a      	ldr	r1, [pc, #40]	; (800ef6c <ull_aon_write+0x48>)
 800ef44:	4620      	mov	r0, r4
 800ef46:	f7ff ff41 	bl	800edcc <dwt_write8bitoffsetreg>
 800ef4a:	4d09      	ldr	r5, [pc, #36]	; (800ef70 <ull_aon_write+0x4c>)
 800ef4c:	f046 0390 	orr.w	r3, r6, #144	; 0x90
 800ef50:	2200      	movs	r2, #0
 800ef52:	4629      	mov	r1, r5
 800ef54:	4620      	mov	r0, r4
 800ef56:	f7ff ff39 	bl	800edcc <dwt_write8bitoffsetreg>
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	461a      	mov	r2, r3
 800ef5e:	4629      	mov	r1, r5
 800ef60:	4620      	mov	r0, r4
 800ef62:	f7ff ff33 	bl	800edcc <dwt_write8bitoffsetreg>
 800ef66:	bd70      	pop	{r4, r5, r6, pc}
 800ef68:	000a000c 	.word	0x000a000c
 800ef6c:	000a0010 	.word	0x000a0010
 800ef70:	000a0004 	.word	0x000a0004

0800ef74 <ull_configuresleep>:
 800ef74:	b570      	push	{r4, r5, r6, lr}
 800ef76:	4604      	mov	r4, r0
 800ef78:	460d      	mov	r5, r1
 800ef7a:	4616      	mov	r6, r2
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	f240 110b 	movw	r1, #267	; 0x10b
 800ef82:	f7ff ffcf 	bl	800ef24 <ull_aon_write>
 800ef86:	f44f 7182 	mov.w	r1, #260	; 0x104
 800ef8a:	4620      	mov	r0, r4
 800ef8c:	f7ff ffaa 	bl	800eee4 <ull_aon_read>
 800ef90:	f000 021f 	and.w	r2, r0, #31
 800ef94:	f44f 7182 	mov.w	r1, #260	; 0x104
 800ef98:	4620      	mov	r0, r4
 800ef9a:	f7ff ffc3 	bl	800ef24 <ull_aon_write>
 800ef9e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800efa0:	8a1a      	ldrh	r2, [r3, #16]
 800efa2:	4315      	orrs	r5, r2
 800efa4:	821d      	strh	r5, [r3, #16]
 800efa6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800efa8:	8a13      	ldrh	r3, [r2, #16]
 800efaa:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800efae:	bf1c      	itt	ne
 800efb0:	f423 6300 	bicne.w	r3, r3, #2048	; 0x800
 800efb4:	8213      	strhne	r3, [r2, #16]
 800efb6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800efb8:	8a1b      	ldrh	r3, [r3, #16]
 800efba:	2200      	movs	r2, #0
 800efbc:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800efc0:	4620      	mov	r0, r4
 800efc2:	f7ff fcb4 	bl	800e92e <dwt_write16bitoffsetreg>
 800efc6:	4633      	mov	r3, r6
 800efc8:	2200      	movs	r2, #0
 800efca:	4902      	ldr	r1, [pc, #8]	; (800efd4 <ull_configuresleep+0x60>)
 800efcc:	4620      	mov	r0, r4
 800efce:	f7ff fefd 	bl	800edcc <dwt_write8bitoffsetreg>
 800efd2:	bd70      	pop	{r4, r5, r6, pc}
 800efd4:	000a0014 	.word	0x000a0014

0800efd8 <ull_setplenfine>:
 800efd8:	b508      	push	{r3, lr}
 800efda:	460b      	mov	r3, r1
 800efdc:	2201      	movs	r2, #1
 800efde:	2124      	movs	r1, #36	; 0x24
 800efe0:	f7ff fef4 	bl	800edcc <dwt_write8bitoffsetreg>
 800efe4:	bd08      	pop	{r3, pc}
	...

0800efe8 <ull_update_nonce_GCM>:
 800efe8:	b500      	push	{lr}
 800efea:	b083      	sub	sp, #12
 800efec:	9100      	str	r1, [sp, #0]
 800efee:	230c      	movs	r3, #12
 800eff0:	2200      	movs	r2, #0
 800eff2:	4903      	ldr	r1, [pc, #12]	; (800f000 <ull_update_nonce_GCM+0x18>)
 800eff4:	f7ff fc90 	bl	800e918 <dwt_writetodevice>
 800eff8:	b003      	add	sp, #12
 800effa:	f85d fb04 	ldr.w	pc, [sp], #4
 800effe:	bf00      	nop
 800f000:	00010034 	.word	0x00010034

0800f004 <ull_update_nonce_CCM>:
 800f004:	b500      	push	{lr}
 800f006:	b087      	sub	sp, #28
 800f008:	4613      	mov	r3, r2
 800f00a:	7a8a      	ldrb	r2, [r1, #10]
 800f00c:	f88d 2008 	strb.w	r2, [sp, #8]
 800f010:	7a4a      	ldrb	r2, [r1, #9]
 800f012:	f88d 2009 	strb.w	r2, [sp, #9]
 800f016:	7a0a      	ldrb	r2, [r1, #8]
 800f018:	f88d 200a 	strb.w	r2, [sp, #10]
 800f01c:	79ca      	ldrb	r2, [r1, #7]
 800f01e:	f88d 200b 	strb.w	r2, [sp, #11]
 800f022:	798a      	ldrb	r2, [r1, #6]
 800f024:	f88d 200c 	strb.w	r2, [sp, #12]
 800f028:	794a      	ldrb	r2, [r1, #5]
 800f02a:	f88d 200d 	strb.w	r2, [sp, #13]
 800f02e:	790a      	ldrb	r2, [r1, #4]
 800f030:	f88d 200e 	strb.w	r2, [sp, #14]
 800f034:	78ca      	ldrb	r2, [r1, #3]
 800f036:	f88d 200f 	strb.w	r2, [sp, #15]
 800f03a:	788a      	ldrb	r2, [r1, #2]
 800f03c:	f88d 2010 	strb.w	r2, [sp, #16]
 800f040:	784a      	ldrb	r2, [r1, #1]
 800f042:	f88d 2011 	strb.w	r2, [sp, #17]
 800f046:	780a      	ldrb	r2, [r1, #0]
 800f048:	f88d 2012 	strb.w	r2, [sp, #18]
 800f04c:	2200      	movs	r2, #0
 800f04e:	f88d 2013 	strb.w	r2, [sp, #19]
 800f052:	f88d 3014 	strb.w	r3, [sp, #20]
 800f056:	0a1b      	lsrs	r3, r3, #8
 800f058:	f88d 3015 	strb.w	r3, [sp, #21]
 800f05c:	7b0b      	ldrb	r3, [r1, #12]
 800f05e:	f88d 3016 	strb.w	r3, [sp, #22]
 800f062:	7acb      	ldrb	r3, [r1, #11]
 800f064:	f88d 3017 	strb.w	r3, [sp, #23]
 800f068:	ab02      	add	r3, sp, #8
 800f06a:	9300      	str	r3, [sp, #0]
 800f06c:	2310      	movs	r3, #16
 800f06e:	4903      	ldr	r1, [pc, #12]	; (800f07c <ull_update_nonce_CCM+0x78>)
 800f070:	f7ff fc52 	bl	800e918 <dwt_writetodevice>
 800f074:	b007      	add	sp, #28
 800f076:	f85d fb04 	ldr.w	pc, [sp], #4
 800f07a:	bf00      	nop
 800f07c:	00010034 	.word	0x00010034

0800f080 <ull_writetxdata>:
 800f080:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f082:	b083      	sub	sp, #12
 800f084:	185c      	adds	r4, r3, r1
 800f086:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800f08a:	da24      	bge.n	800f0d6 <ull_writetxdata+0x56>
 800f08c:	461c      	mov	r4, r3
 800f08e:	4617      	mov	r7, r2
 800f090:	460e      	mov	r6, r1
 800f092:	4605      	mov	r5, r0
 800f094:	2b7f      	cmp	r3, #127	; 0x7f
 800f096:	d915      	bls.n	800f0c4 <ull_writetxdata+0x44>
 800f098:	2314      	movs	r3, #20
 800f09a:	2200      	movs	r2, #0
 800f09c:	490f      	ldr	r1, [pc, #60]	; (800f0dc <ull_writetxdata+0x5c>)
 800f09e:	f7ff fcb1 	bl	800ea04 <dwt_write32bitoffsetreg>
 800f0a2:	4623      	mov	r3, r4
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	490e      	ldr	r1, [pc, #56]	; (800f0e0 <ull_writetxdata+0x60>)
 800f0a8:	4628      	mov	r0, r5
 800f0aa:	f7ff fcab 	bl	800ea04 <dwt_write32bitoffsetreg>
 800f0ae:	9700      	str	r7, [sp, #0]
 800f0b0:	4633      	mov	r3, r6
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800f0b8:	4628      	mov	r0, r5
 800f0ba:	f7ff fc2d 	bl	800e918 <dwt_writetodevice>
 800f0be:	2000      	movs	r0, #0
 800f0c0:	b003      	add	sp, #12
 800f0c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0c4:	9200      	str	r2, [sp, #0]
 800f0c6:	460b      	mov	r3, r1
 800f0c8:	4622      	mov	r2, r4
 800f0ca:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 800f0ce:	f7ff fc23 	bl	800e918 <dwt_writetodevice>
 800f0d2:	2000      	movs	r0, #0
 800f0d4:	e7f4      	b.n	800f0c0 <ull_writetxdata+0x40>
 800f0d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f0da:	e7f1      	b.n	800f0c0 <ull_writetxdata+0x40>
 800f0dc:	001f0004 	.word	0x001f0004
 800f0e0:	001f0008 	.word	0x001f0008

0800f0e4 <ull_signal_rx_buff_free>:
 800f0e4:	b510      	push	{r4, lr}
 800f0e6:	b082      	sub	sp, #8
 800f0e8:	4604      	mov	r4, r0
 800f0ea:	2302      	movs	r3, #2
 800f0ec:	9301      	str	r3, [sp, #4]
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	9200      	str	r2, [sp, #0]
 800f0f2:	4613      	mov	r3, r2
 800f0f4:	2113      	movs	r1, #19
 800f0f6:	f7fe ff1e 	bl	800df36 <dwt_xfer3xxx>
 800f0fa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f0fc:	7b9a      	ldrb	r2, [r3, #14]
 800f0fe:	2a03      	cmp	r2, #3
 800f100:	bf0c      	ite	eq
 800f102:	2201      	moveq	r2, #1
 800f104:	2203      	movne	r2, #3
 800f106:	739a      	strb	r2, [r3, #14]
 800f108:	b002      	add	sp, #8
 800f10a:	bd10      	pop	{r4, pc}

0800f10c <ull_isr>:
 800f10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f110:	4604      	mov	r4, r0
 800f112:	2200      	movs	r2, #0
 800f114:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 800f118:	f7fe ffea 	bl	800e0f0 <dwt_read8bitoffsetreg>
 800f11c:	4605      	mov	r5, r0
 800f11e:	2200      	movs	r2, #0
 800f120:	2144      	movs	r1, #68	; 0x44
 800f122:	4620      	mov	r0, r4
 800f124:	f7fe ff8f 	bl	800e046 <dwt_read32bitoffsetreg>
 800f128:	4606      	mov	r6, r0
 800f12a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f12c:	2200      	movs	r2, #0
 800f12e:	83da      	strh	r2, [r3, #30]
 800f130:	f883 2020 	strb.w	r2, [r3, #32]
 800f134:	619a      	str	r2, [r3, #24]
 800f136:	839a      	strh	r2, [r3, #28]
 800f138:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800f13c:	625a      	str	r2, [r3, #36]	; 0x24
 800f13e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f140:	625c      	str	r4, [r3, #36]	; 0x24
 800f142:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f144:	7b9f      	ldrb	r7, [r3, #14]
 800f146:	2f00      	cmp	r7, #0
 800f148:	d17f      	bne.n	800f24a <ull_isr+0x13e>
 800f14a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f14c:	619e      	str	r6, [r3, #24]
 800f14e:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
 800f152:	f898 3015 	ldrb.w	r3, [r8, #21]
 800f156:	f003 0303 	and.w	r3, r3, #3
 800f15a:	2b03      	cmp	r3, #3
 800f15c:	f000 8090 	beq.w	800f280 <ull_isr+0x174>
 800f160:	f015 0f80 	tst.w	r5, #128	; 0x80
 800f164:	f040 8093 	bne.w	800f28e <ull_isr+0x182>
 800f168:	f015 0f01 	tst.w	r5, #1
 800f16c:	f040 80c1 	bne.w	800f2f2 <ull_isr+0x1e6>
 800f170:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f174:	d00b      	beq.n	800f18e <ull_isr+0x82>
 800f176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f178:	b113      	cbz	r3, 800f180 <ull_isr+0x74>
 800f17a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f17c:	3018      	adds	r0, #24
 800f17e:	4798      	blx	r3
 800f180:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800f184:	2202      	movs	r2, #2
 800f186:	2144      	movs	r1, #68	; 0x44
 800f188:	4620      	mov	r0, r4
 800f18a:	f7ff fbd0 	bl	800e92e <dwt_write16bitoffsetreg>
 800f18e:	f015 0f08 	tst.w	r5, #8
 800f192:	d107      	bne.n	800f1a4 <ull_isr+0x98>
 800f194:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f196:	7b9b      	ldrb	r3, [r3, #14]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	f000 80ea 	beq.w	800f372 <ull_isr+0x266>
 800f19e:	2f00      	cmp	r7, #0
 800f1a0:	f000 80e7 	beq.w	800f372 <ull_isr+0x266>
 800f1a4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	f883 2020 	strb.w	r2, [r3, #32]
 800f1ac:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 800f1b0:	f000 80ad 	beq.w	800f30e <ull_isr+0x202>
 800f1b4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f1b6:	f892 3020 	ldrb.w	r3, [r2, #32]
 800f1ba:	f043 0308 	orr.w	r3, r3, #8
 800f1be:	f882 3020 	strb.w	r3, [r2, #32]
 800f1c2:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 800f1c6:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 800f1ca:	d008      	beq.n	800f1de <ull_isr+0xd2>
 800f1cc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f1ce:	f892 3020 	ldrb.w	r3, [r2, #32]
 800f1d2:	f043 0310 	orr.w	r3, r3, #16
 800f1d6:	f882 3020 	strb.w	r3, [r2, #32]
 800f1da:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 800f1de:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800f1e2:	d006      	beq.n	800f1f2 <ull_isr+0xe6>
 800f1e4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f1e6:	7d53      	ldrb	r3, [r2, #21]
 800f1e8:	f003 0303 	and.w	r3, r3, #3
 800f1ec:	2b03      	cmp	r3, #3
 800f1ee:	f000 809a 	beq.w	800f326 <ull_isr+0x21a>
 800f1f2:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800f1f6:	f040 80a2 	bne.w	800f33e <ull_isr+0x232>
 800f1fa:	f447 43de 	orr.w	r3, r7, #28416	; 0x6f00
 800f1fe:	2200      	movs	r2, #0
 800f200:	2144      	movs	r1, #68	; 0x44
 800f202:	4620      	mov	r0, r4
 800f204:	f7ff fbfe 	bl	800ea04 <dwt_write32bitoffsetreg>
 800f208:	4620      	mov	r0, r4
 800f20a:	f7ff fe1d 	bl	800ee48 <_dwt_clear_db_events>
 800f20e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f210:	8bc3      	ldrh	r3, [r0, #30]
 800f212:	2b00      	cmp	r3, #0
 800f214:	f040 80a2 	bne.w	800f35c <ull_isr+0x250>
 800f218:	7d43      	ldrb	r3, [r0, #21]
 800f21a:	f003 0303 	and.w	r3, r3, #3
 800f21e:	2b03      	cmp	r3, #3
 800f220:	f000 809c 	beq.w	800f35c <ull_isr+0x250>
 800f224:	6983      	ldr	r3, [r0, #24]
 800f226:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800f22a:	6183      	str	r3, [r0, #24]
 800f22c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f22e:	6993      	ldr	r3, [r2, #24]
 800f230:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f234:	6193      	str	r3, [r2, #24]
 800f236:	69e3      	ldr	r3, [r4, #28]
 800f238:	b113      	cbz	r3, 800f240 <ull_isr+0x134>
 800f23a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f23c:	3018      	adds	r0, #24
 800f23e:	4798      	blx	r3
 800f240:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f242:	2200      	movs	r2, #0
 800f244:	f883 2020 	strb.w	r2, [r3, #32]
 800f248:	e08c      	b.n	800f364 <ull_isr+0x258>
 800f24a:	496d      	ldr	r1, [pc, #436]	; (800f400 <ull_isr+0x2f4>)
 800f24c:	4620      	mov	r0, r4
 800f24e:	f7fe ff4f 	bl	800e0f0 <dwt_read8bitoffsetreg>
 800f252:	4607      	mov	r7, r0
 800f254:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f256:	7b9b      	ldrb	r3, [r3, #14]
 800f258:	2b03      	cmp	r3, #3
 800f25a:	bf08      	it	eq
 800f25c:	f3c0 1707 	ubfxeq	r7, r0, #4, #8
 800f260:	f017 0f01 	tst.w	r7, #1
 800f264:	bf18      	it	ne
 800f266:	f446 4680 	orrne.w	r6, r6, #16384	; 0x4000
 800f26a:	f017 0f02 	tst.w	r7, #2
 800f26e:	bf18      	it	ne
 800f270:	f446 5600 	orrne.w	r6, r6, #8192	; 0x2000
 800f274:	f017 0f04 	tst.w	r7, #4
 800f278:	bf18      	it	ne
 800f27a:	f446 6680 	orrne.w	r6, r6, #1024	; 0x400
 800f27e:	e764      	b.n	800f14a <ull_isr+0x3e>
 800f280:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800f284:	bf1c      	itt	ne
 800f286:	f045 0508 	orrne.w	r5, r5, #8
 800f28a:	b2ed      	uxtbne	r5, r5
 800f28c:	e768      	b.n	800f160 <ull_isr+0x54>
 800f28e:	2200      	movs	r2, #0
 800f290:	2148      	movs	r1, #72	; 0x48
 800f292:	4620      	mov	r0, r4
 800f294:	f7fe feed 	bl	800e072 <dwt_read16bitoffsetreg>
 800f298:	f8a8 001c 	strh.w	r0, [r8, #28]
 800f29c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f29e:	7d1a      	ldrb	r2, [r3, #20]
 800f2a0:	b11a      	cbz	r2, 800f2aa <ull_isr+0x19e>
 800f2a2:	699a      	ldr	r2, [r3, #24]
 800f2a4:	f012 0f04 	tst.w	r2, #4
 800f2a8:	d103      	bne.n	800f2b2 <ull_isr+0x1a6>
 800f2aa:	8b9b      	ldrh	r3, [r3, #28]
 800f2ac:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800f2b0:	b18b      	cbz	r3, 800f2d6 <ull_isr+0x1ca>
 800f2b2:	2304      	movs	r3, #4
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	2144      	movs	r1, #68	; 0x44
 800f2b8:	4620      	mov	r0, r4
 800f2ba:	f7ff fd87 	bl	800edcc <dwt_write8bitoffsetreg>
 800f2be:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	2148      	movs	r1, #72	; 0x48
 800f2c6:	4620      	mov	r0, r4
 800f2c8:	f7ff fb31 	bl	800e92e <dwt_write16bitoffsetreg>
 800f2cc:	6a23      	ldr	r3, [r4, #32]
 800f2ce:	b113      	cbz	r3, 800f2d6 <ull_isr+0x1ca>
 800f2d0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f2d2:	3018      	adds	r0, #24
 800f2d4:	4798      	blx	r3
 800f2d6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f2d8:	8b9b      	ldrh	r3, [r3, #28]
 800f2da:	f413 7f80 	tst.w	r3, #256	; 0x100
 800f2de:	f43f af43 	beq.w	800f168 <ull_isr+0x5c>
 800f2e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	2148      	movs	r1, #72	; 0x48
 800f2ea:	4620      	mov	r0, r4
 800f2ec:	f7ff fb1f 	bl	800e92e <dwt_write16bitoffsetreg>
 800f2f0:	e73a      	b.n	800f168 <ull_isr+0x5c>
 800f2f2:	23f8      	movs	r3, #248	; 0xf8
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	2144      	movs	r1, #68	; 0x44
 800f2f8:	4620      	mov	r0, r4
 800f2fa:	f7ff fd67 	bl	800edcc <dwt_write8bitoffsetreg>
 800f2fe:	6923      	ldr	r3, [r4, #16]
 800f300:	2b00      	cmp	r3, #0
 800f302:	f43f af35 	beq.w	800f170 <ull_isr+0x64>
 800f306:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f308:	3018      	adds	r0, #24
 800f30a:	4798      	blx	r3
 800f30c:	e730      	b.n	800f170 <ull_isr+0x64>
 800f30e:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800f312:	bf1f      	itttt	ne
 800f314:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 800f316:	f892 3020 	ldrbne.w	r3, [r2, #32]
 800f31a:	f043 0304 	orrne.w	r3, r3, #4
 800f31e:	f882 3020 	strbne.w	r3, [r2, #32]
 800f322:	2700      	movs	r7, #0
 800f324:	e74f      	b.n	800f1c6 <ull_isr+0xba>
 800f326:	f892 3020 	ldrb.w	r3, [r2, #32]
 800f32a:	f043 0302 	orr.w	r3, r3, #2
 800f32e:	f882 3020 	strb.w	r3, [r2, #32]
 800f332:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f334:	2200      	movs	r2, #0
 800f336:	83da      	strh	r2, [r3, #30]
 800f338:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 800f33c:	e75d      	b.n	800f1fa <ull_isr+0xee>
 800f33e:	4620      	mov	r0, r4
 800f340:	f7ff fd50 	bl	800ede4 <ull_getframelength>
 800f344:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800f348:	f43f af57 	beq.w	800f1fa <ull_isr+0xee>
 800f34c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f34e:	f892 3020 	ldrb.w	r3, [r2, #32]
 800f352:	f043 0301 	orr.w	r3, r3, #1
 800f356:	f882 3020 	strb.w	r3, [r2, #32]
 800f35a:	e74e      	b.n	800f1fa <ull_isr+0xee>
 800f35c:	6963      	ldr	r3, [r4, #20]
 800f35e:	b10b      	cbz	r3, 800f364 <ull_isr+0x258>
 800f360:	3018      	adds	r0, #24
 800f362:	4798      	blx	r3
 800f364:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f366:	7b9b      	ldrb	r3, [r3, #14]
 800f368:	bb03      	cbnz	r3, 800f3ac <ull_isr+0x2a0>
 800f36a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f36c:	2200      	movs	r2, #0
 800f36e:	f883 2020 	strb.w	r2, [r3, #32]
 800f372:	f015 0f10 	tst.w	r5, #16
 800f376:	d11d      	bne.n	800f3b4 <ull_isr+0x2a8>
 800f378:	f015 0f20 	tst.w	r5, #32
 800f37c:	d12d      	bne.n	800f3da <ull_isr+0x2ce>
 800f37e:	2200      	movs	r2, #0
 800f380:	4920      	ldr	r1, [pc, #128]	; (800f404 <ull_isr+0x2f8>)
 800f382:	4620      	mov	r0, r4
 800f384:	f7fe feb4 	bl	800e0f0 <dwt_read8bitoffsetreg>
 800f388:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f38a:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
 800f38e:	f010 0303 	ands.w	r3, r0, #3
 800f392:	d009      	beq.n	800f3a8 <ull_isr+0x29c>
 800f394:	2200      	movs	r2, #0
 800f396:	491b      	ldr	r1, [pc, #108]	; (800f404 <ull_isr+0x2f8>)
 800f398:	4620      	mov	r0, r4
 800f39a:	f7ff fd17 	bl	800edcc <dwt_write8bitoffsetreg>
 800f39e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f3a0:	b113      	cbz	r3, 800f3a8 <ull_isr+0x29c>
 800f3a2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f3a4:	3018      	adds	r0, #24
 800f3a6:	4798      	blx	r3
 800f3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3ac:	4620      	mov	r0, r4
 800f3ae:	f7ff fe99 	bl	800f0e4 <ull_signal_rx_buff_free>
 800f3b2:	e7da      	b.n	800f36a <ull_isr+0x25e>
 800f3b4:	4b14      	ldr	r3, [pc, #80]	; (800f408 <ull_isr+0x2fc>)
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	2144      	movs	r1, #68	; 0x44
 800f3ba:	4620      	mov	r0, r4
 800f3bc:	f7ff fb22 	bl	800ea04 <dwt_write32bitoffsetreg>
 800f3c0:	4620      	mov	r0, r4
 800f3c2:	f7ff fd41 	bl	800ee48 <_dwt_clear_db_events>
 800f3c6:	69e3      	ldr	r3, [r4, #28]
 800f3c8:	b113      	cbz	r3, 800f3d0 <ull_isr+0x2c4>
 800f3ca:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f3cc:	3018      	adds	r0, #24
 800f3ce:	4798      	blx	r3
 800f3d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	f883 2020 	strb.w	r2, [r3, #32]
 800f3d8:	e7ce      	b.n	800f378 <ull_isr+0x26c>
 800f3da:	4b0c      	ldr	r3, [pc, #48]	; (800f40c <ull_isr+0x300>)
 800f3dc:	2200      	movs	r2, #0
 800f3de:	2144      	movs	r1, #68	; 0x44
 800f3e0:	4620      	mov	r0, r4
 800f3e2:	f7ff fb0f 	bl	800ea04 <dwt_write32bitoffsetreg>
 800f3e6:	4620      	mov	r0, r4
 800f3e8:	f7ff fd2e 	bl	800ee48 <_dwt_clear_db_events>
 800f3ec:	69a3      	ldr	r3, [r4, #24]
 800f3ee:	b113      	cbz	r3, 800f3f6 <ull_isr+0x2ea>
 800f3f0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f3f2:	3018      	adds	r0, #24
 800f3f4:	4798      	blx	r3
 800f3f6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	f883 2020 	strb.w	r2, [r3, #32]
 800f3fe:	e7be      	b.n	800f37e <ull_isr+0x272>
 800f400:	00010018 	.word	0x00010018
 800f404:	00110038 	.word	0x00110038
 800f408:	34059400 	.word	0x34059400
 800f40c:	10220400 	.word	0x10220400

0800f410 <dwt_modify32bitoffsetreg>:
 800f410:	b530      	push	{r4, r5, lr}
 800f412:	b085      	sub	sp, #20
 800f414:	9c08      	ldr	r4, [sp, #32]
 800f416:	f88d 3008 	strb.w	r3, [sp, #8]
 800f41a:	0a1d      	lsrs	r5, r3, #8
 800f41c:	f88d 5009 	strb.w	r5, [sp, #9]
 800f420:	0c1d      	lsrs	r5, r3, #16
 800f422:	f88d 500a 	strb.w	r5, [sp, #10]
 800f426:	0e1b      	lsrs	r3, r3, #24
 800f428:	f88d 300b 	strb.w	r3, [sp, #11]
 800f42c:	f88d 400c 	strb.w	r4, [sp, #12]
 800f430:	0a23      	lsrs	r3, r4, #8
 800f432:	f88d 300d 	strb.w	r3, [sp, #13]
 800f436:	0c23      	lsrs	r3, r4, #16
 800f438:	f88d 300e 	strb.w	r3, [sp, #14]
 800f43c:	0e24      	lsrs	r4, r4, #24
 800f43e:	f88d 400f 	strb.w	r4, [sp, #15]
 800f442:	f248 0303 	movw	r3, #32771	; 0x8003
 800f446:	9301      	str	r3, [sp, #4]
 800f448:	ab02      	add	r3, sp, #8
 800f44a:	9300      	str	r3, [sp, #0]
 800f44c:	2308      	movs	r3, #8
 800f44e:	b292      	uxth	r2, r2
 800f450:	f7fe fd71 	bl	800df36 <dwt_xfer3xxx>
 800f454:	b005      	add	sp, #20
 800f456:	bd30      	pop	{r4, r5, pc}

0800f458 <ull_enablegpioclocks>:
 800f458:	b500      	push	{lr}
 800f45a:	b083      	sub	sp, #12
 800f45c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f460:	9300      	str	r3, [sp, #0]
 800f462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f466:	2200      	movs	r2, #0
 800f468:	4902      	ldr	r1, [pc, #8]	; (800f474 <ull_enablegpioclocks+0x1c>)
 800f46a:	f7ff ffd1 	bl	800f410 <dwt_modify32bitoffsetreg>
 800f46e:	b003      	add	sp, #12
 800f470:	f85d fb04 	ldr.w	pc, [sp], #4
 800f474:	00110004 	.word	0x00110004

0800f478 <ull_enable_rf_tx>:
 800f478:	b570      	push	{r4, r5, r6, lr}
 800f47a:	b082      	sub	sp, #8
 800f47c:	4604      	mov	r4, r0
 800f47e:	460e      	mov	r6, r1
 800f480:	4d13      	ldr	r5, [pc, #76]	; (800f4d0 <ull_enable_rf_tx+0x58>)
 800f482:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 800f486:	9300      	str	r3, [sp, #0]
 800f488:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f48c:	2200      	movs	r2, #0
 800f48e:	4629      	mov	r1, r5
 800f490:	f7ff ffbe 	bl	800f410 <dwt_modify32bitoffsetreg>
 800f494:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 800f498:	9300      	str	r3, [sp, #0]
 800f49a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f49e:	2200      	movs	r2, #0
 800f4a0:	4629      	mov	r1, r5
 800f4a2:	4620      	mov	r0, r4
 800f4a4:	f7ff ffb4 	bl	800f410 <dwt_modify32bitoffsetreg>
 800f4a8:	4b0a      	ldr	r3, [pc, #40]	; (800f4d4 <ull_enable_rf_tx+0x5c>)
 800f4aa:	9300      	str	r3, [sp, #0]
 800f4ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800f4b6:	4620      	mov	r0, r4
 800f4b8:	f7ff ffaa 	bl	800f410 <dwt_modify32bitoffsetreg>
 800f4bc:	b90e      	cbnz	r6, 800f4c2 <ull_enable_rf_tx+0x4a>
 800f4be:	b002      	add	sp, #8
 800f4c0:	bd70      	pop	{r4, r5, r6, pc}
 800f4c2:	4b05      	ldr	r3, [pc, #20]	; (800f4d8 <ull_enable_rf_tx+0x60>)
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	4905      	ldr	r1, [pc, #20]	; (800f4dc <ull_enable_rf_tx+0x64>)
 800f4c8:	4620      	mov	r0, r4
 800f4ca:	f7ff fa9b 	bl	800ea04 <dwt_write32bitoffsetreg>
 800f4ce:	e7f6      	b.n	800f4be <ull_enable_rf_tx+0x46>
 800f4d0:	00070048 	.word	0x00070048
 800f4d4:	02003c00 	.word	0x02003c00
 800f4d8:	01011100 	.word	0x01011100
 800f4dc:	00070014 	.word	0x00070014

0800f4e0 <ull_enable_rftx_blocks>:
 800f4e0:	b500      	push	{lr}
 800f4e2:	b083      	sub	sp, #12
 800f4e4:	4b05      	ldr	r3, [pc, #20]	; (800f4fc <ull_enable_rftx_blocks+0x1c>)
 800f4e6:	9300      	str	r3, [sp, #0]
 800f4e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	4904      	ldr	r1, [pc, #16]	; (800f500 <ull_enable_rftx_blocks+0x20>)
 800f4f0:	f7ff ff8e 	bl	800f410 <dwt_modify32bitoffsetreg>
 800f4f4:	b003      	add	sp, #12
 800f4f6:	f85d fb04 	ldr.w	pc, [sp], #4
 800f4fa:	bf00      	nop
 800f4fc:	02003c00 	.word	0x02003c00
 800f500:	00070004 	.word	0x00070004

0800f504 <_dwt_otpprogword32>:
 800f504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f508:	b083      	sub	sp, #12
 800f50a:	4604      	mov	r4, r0
 800f50c:	460d      	mov	r5, r1
 800f50e:	4617      	mov	r7, r2
 800f510:	4e56      	ldr	r6, [pc, #344]	; (800f66c <_dwt_otpprogword32+0x168>)
 800f512:	2200      	movs	r2, #0
 800f514:	4631      	mov	r1, r6
 800f516:	f7fe fd96 	bl	800e046 <dwt_read32bitoffsetreg>
 800f51a:	4681      	mov	r9, r0
 800f51c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800f520:	9300      	str	r3, [sp, #0]
 800f522:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f526:	2200      	movs	r2, #0
 800f528:	4631      	mov	r1, r6
 800f52a:	4620      	mov	r0, r4
 800f52c:	f7ff ff70 	bl	800f410 <dwt_modify32bitoffsetreg>
 800f530:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800f670 <_dwt_otpprogword32+0x16c>
 800f534:	2318      	movs	r3, #24
 800f536:	2200      	movs	r2, #0
 800f538:	4641      	mov	r1, r8
 800f53a:	4620      	mov	r0, r4
 800f53c:	f7ff f9f7 	bl	800e92e <dwt_write16bitoffsetreg>
 800f540:	2125      	movs	r1, #37	; 0x25
 800f542:	4620      	mov	r0, r4
 800f544:	f7ff fa28 	bl	800e998 <__dwt_otp_write_wdata_id_reg>
 800f548:	2102      	movs	r1, #2
 800f54a:	4620      	mov	r0, r4
 800f54c:	f7ff fa24 	bl	800e998 <__dwt_otp_write_wdata_id_reg>
 800f550:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 800f554:	4620      	mov	r0, r4
 800f556:	f7ff fa1f 	bl	800e998 <__dwt_otp_write_wdata_id_reg>
 800f55a:	b2f9      	uxtb	r1, r7
 800f55c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800f560:	4620      	mov	r0, r4
 800f562:	f7ff fa19 	bl	800e998 <__dwt_otp_write_wdata_id_reg>
 800f566:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f56a:	4620      	mov	r0, r4
 800f56c:	f7ff fa14 	bl	800e998 <__dwt_otp_write_wdata_id_reg>
 800f570:	2100      	movs	r1, #0
 800f572:	4620      	mov	r0, r4
 800f574:	f7ff fa10 	bl	800e998 <__dwt_otp_write_wdata_id_reg>
 800f578:	2102      	movs	r1, #2
 800f57a:	4620      	mov	r0, r4
 800f57c:	f7ff fa0c 	bl	800e998 <__dwt_otp_write_wdata_id_reg>
 800f580:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800f584:	4620      	mov	r0, r4
 800f586:	f7ff fa07 	bl	800e998 <__dwt_otp_write_wdata_id_reg>
 800f58a:	b2e9      	uxtb	r1, r5
 800f58c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800f590:	4620      	mov	r0, r4
 800f592:	f7ff fa01 	bl	800e998 <__dwt_otp_write_wdata_id_reg>
 800f596:	f3c5 2107 	ubfx	r1, r5, #8, #8
 800f59a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800f59e:	4620      	mov	r0, r4
 800f5a0:	f7ff f9fa 	bl	800e998 <__dwt_otp_write_wdata_id_reg>
 800f5a4:	f3c5 4107 	ubfx	r1, r5, #16, #8
 800f5a8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800f5ac:	4620      	mov	r0, r4
 800f5ae:	f7ff f9f3 	bl	800e998 <__dwt_otp_write_wdata_id_reg>
 800f5b2:	0e29      	lsrs	r1, r5, #24
 800f5b4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800f5b8:	4620      	mov	r0, r4
 800f5ba:	f7ff f9ed 	bl	800e998 <__dwt_otp_write_wdata_id_reg>
 800f5be:	2100      	movs	r1, #0
 800f5c0:	4620      	mov	r0, r4
 800f5c2:	f7ff f9e9 	bl	800e998 <__dwt_otp_write_wdata_id_reg>
 800f5c6:	213a      	movs	r1, #58	; 0x3a
 800f5c8:	4620      	mov	r0, r4
 800f5ca:	f7ff f9e5 	bl	800e998 <__dwt_otp_write_wdata_id_reg>
 800f5ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 800f5d2:	4620      	mov	r0, r4
 800f5d4:	f7ff f9e0 	bl	800e998 <__dwt_otp_write_wdata_id_reg>
 800f5d8:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800f5dc:	4620      	mov	r0, r4
 800f5de:	f7ff f9db 	bl	800e998 <__dwt_otp_write_wdata_id_reg>
 800f5e2:	2100      	movs	r1, #0
 800f5e4:	4620      	mov	r0, r4
 800f5e6:	f7ff f9d7 	bl	800e998 <__dwt_otp_write_wdata_id_reg>
 800f5ea:	213a      	movs	r1, #58	; 0x3a
 800f5ec:	4620      	mov	r0, r4
 800f5ee:	f7ff f9d3 	bl	800e998 <__dwt_otp_write_wdata_id_reg>
 800f5f2:	f240 1101 	movw	r1, #257	; 0x101
 800f5f6:	4620      	mov	r0, r4
 800f5f8:	f7ff f9ce 	bl	800e998 <__dwt_otp_write_wdata_id_reg>
 800f5fc:	2302      	movs	r3, #2
 800f5fe:	2200      	movs	r2, #0
 800f600:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800f604:	4620      	mov	r0, r4
 800f606:	f7ff f992 	bl	800e92e <dwt_write16bitoffsetreg>
 800f60a:	2300      	movs	r3, #0
 800f60c:	461a      	mov	r2, r3
 800f60e:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800f612:	4620      	mov	r0, r4
 800f614:	f7ff f98b 	bl	800e92e <dwt_write16bitoffsetreg>
 800f618:	2002      	movs	r0, #2
 800f61a:	f7f1 ff93 	bl	8001544 <deca_sleep>
 800f61e:	213a      	movs	r1, #58	; 0x3a
 800f620:	4620      	mov	r0, r4
 800f622:	f7ff f9b9 	bl	800e998 <__dwt_otp_write_wdata_id_reg>
 800f626:	f44f 7181 	mov.w	r1, #258	; 0x102
 800f62a:	4620      	mov	r0, r4
 800f62c:	f7ff f9b4 	bl	800e998 <__dwt_otp_write_wdata_id_reg>
 800f630:	2302      	movs	r3, #2
 800f632:	2200      	movs	r2, #0
 800f634:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800f638:	4620      	mov	r0, r4
 800f63a:	f7ff f978 	bl	800e92e <dwt_write16bitoffsetreg>
 800f63e:	2300      	movs	r3, #0
 800f640:	461a      	mov	r2, r3
 800f642:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800f646:	4620      	mov	r0, r4
 800f648:	f7ff f971 	bl	800e92e <dwt_write16bitoffsetreg>
 800f64c:	2300      	movs	r3, #0
 800f64e:	461a      	mov	r2, r3
 800f650:	4641      	mov	r1, r8
 800f652:	4620      	mov	r0, r4
 800f654:	f7ff f96b 	bl	800e92e <dwt_write16bitoffsetreg>
 800f658:	464b      	mov	r3, r9
 800f65a:	2200      	movs	r2, #0
 800f65c:	4631      	mov	r1, r6
 800f65e:	4620      	mov	r0, r4
 800f660:	f7ff f9d0 	bl	800ea04 <dwt_write32bitoffsetreg>
 800f664:	b003      	add	sp, #12
 800f666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f66a:	bf00      	nop
 800f66c:	00070044 	.word	0x00070044
 800f670:	000b0008 	.word	0x000b0008

0800f674 <ull_setgpiomode>:
 800f674:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f676:	b083      	sub	sp, #12
 800f678:	2400      	movs	r4, #0
 800f67a:	4623      	mov	r3, r4
 800f67c:	2601      	movs	r6, #1
 800f67e:	2707      	movs	r7, #7
 800f680:	e002      	b.n	800f688 <ull_setgpiomode+0x14>
 800f682:	3401      	adds	r4, #1
 800f684:	2c09      	cmp	r4, #9
 800f686:	d009      	beq.n	800f69c <ull_setgpiomode+0x28>
 800f688:	fa06 f504 	lsl.w	r5, r6, r4
 800f68c:	420d      	tst	r5, r1
 800f68e:	d0f8      	beq.n	800f682 <ull_setgpiomode+0xe>
 800f690:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800f694:	fa07 f505 	lsl.w	r5, r7, r5
 800f698:	432b      	orrs	r3, r5
 800f69a:	e7f2      	b.n	800f682 <ull_setgpiomode+0xe>
 800f69c:	401a      	ands	r2, r3
 800f69e:	9200      	str	r2, [sp, #0]
 800f6a0:	43db      	mvns	r3, r3
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800f6a8:	f7ff feb2 	bl	800f410 <dwt_modify32bitoffsetreg>
 800f6ac:	b003      	add	sp, #12
 800f6ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f6b0 <ull_writetxfctrl>:
 800f6b0:	b500      	push	{lr}
 800f6b2:	b083      	sub	sp, #12
 800f6b4:	2a7f      	cmp	r2, #127	; 0x7f
 800f6b6:	bf88      	it	hi
 800f6b8:	3280      	addhi	r2, #128	; 0x80
 800f6ba:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 800f6be:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f6c2:	9100      	str	r1, [sp, #0]
 800f6c4:	4b03      	ldr	r3, [pc, #12]	; (800f6d4 <ull_writetxfctrl+0x24>)
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	2120      	movs	r1, #32
 800f6ca:	f7ff fea1 	bl	800f410 <dwt_modify32bitoffsetreg>
 800f6ce:	b003      	add	sp, #12
 800f6d0:	f85d fb04 	ldr.w	pc, [sp], #4
 800f6d4:	fc00f400 	.word	0xfc00f400

0800f6d8 <prs_sys_status_and_or>:
 800f6d8:	b500      	push	{lr}
 800f6da:	b083      	sub	sp, #12
 800f6dc:	9200      	str	r2, [sp, #0]
 800f6de:	460b      	mov	r3, r1
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	2144      	movs	r1, #68	; 0x44
 800f6e4:	f7ff fe94 	bl	800f410 <dwt_modify32bitoffsetreg>
 800f6e8:	2000      	movs	r0, #0
 800f6ea:	b003      	add	sp, #12
 800f6ec:	f85d fb04 	ldr.w	pc, [sp], #4

0800f6f0 <dwt_modify8bitoffsetreg>:
 800f6f0:	b500      	push	{lr}
 800f6f2:	b085      	sub	sp, #20
 800f6f4:	f88d 300c 	strb.w	r3, [sp, #12]
 800f6f8:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800f6fc:	f88d 300d 	strb.w	r3, [sp, #13]
 800f700:	f248 0301 	movw	r3, #32769	; 0x8001
 800f704:	9301      	str	r3, [sp, #4]
 800f706:	ab03      	add	r3, sp, #12
 800f708:	9300      	str	r3, [sp, #0]
 800f70a:	2302      	movs	r3, #2
 800f70c:	b292      	uxth	r2, r2
 800f70e:	f7fe fc12 	bl	800df36 <dwt_xfer3xxx>
 800f712:	b005      	add	sp, #20
 800f714:	f85d fb04 	ldr.w	pc, [sp], #4

0800f718 <ull_enablespicrccheck>:
 800f718:	b570      	push	{r4, r5, r6, lr}
 800f71a:	b082      	sub	sp, #8
 800f71c:	4604      	mov	r4, r0
 800f71e:	460d      	mov	r5, r1
 800f720:	b159      	cbz	r1, 800f73a <ull_enablespicrccheck+0x22>
 800f722:	4616      	mov	r6, r2
 800f724:	2340      	movs	r3, #64	; 0x40
 800f726:	9300      	str	r3, [sp, #0]
 800f728:	23ff      	movs	r3, #255	; 0xff
 800f72a:	2200      	movs	r2, #0
 800f72c:	2110      	movs	r1, #16
 800f72e:	f7ff ffdf 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 800f732:	2d02      	cmp	r5, #2
 800f734:	d107      	bne.n	800f746 <ull_enablespicrccheck+0x2e>
 800f736:	60e6      	str	r6, [r4, #12]
 800f738:	e005      	b.n	800f746 <ull_enablespicrccheck+0x2e>
 800f73a:	2200      	movs	r2, #0
 800f73c:	9200      	str	r2, [sp, #0]
 800f73e:	23bf      	movs	r3, #191	; 0xbf
 800f740:	2110      	movs	r1, #16
 800f742:	f7ff ffd5 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 800f746:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f748:	751d      	strb	r5, [r3, #20]
 800f74a:	b002      	add	sp, #8
 800f74c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f750 <ull_configciadiag>:
 800f750:	b530      	push	{r4, r5, lr}
 800f752:	b083      	sub	sp, #12
 800f754:	4604      	mov	r4, r0
 800f756:	460d      	mov	r5, r1
 800f758:	f011 0f01 	tst.w	r1, #1
 800f75c:	d015      	beq.n	800f78a <ull_configciadiag+0x3a>
 800f75e:	2300      	movs	r3, #0
 800f760:	9300      	str	r3, [sp, #0]
 800f762:	23ef      	movs	r3, #239	; 0xef
 800f764:	2202      	movs	r2, #2
 800f766:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800f76a:	f7ff ffc1 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 800f76e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f770:	759d      	strb	r5, [r3, #22]
 800f772:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f774:	7d9b      	ldrb	r3, [r3, #22]
 800f776:	085b      	lsrs	r3, r3, #1
 800f778:	d010      	beq.n	800f79c <ull_configciadiag+0x4c>
 800f77a:	086b      	lsrs	r3, r5, #1
 800f77c:	2200      	movs	r2, #0
 800f77e:	490e      	ldr	r1, [pc, #56]	; (800f7b8 <ull_configciadiag+0x68>)
 800f780:	4620      	mov	r0, r4
 800f782:	f7ff fb23 	bl	800edcc <dwt_write8bitoffsetreg>
 800f786:	b003      	add	sp, #12
 800f788:	bd30      	pop	{r4, r5, pc}
 800f78a:	2310      	movs	r3, #16
 800f78c:	9300      	str	r3, [sp, #0]
 800f78e:	23ff      	movs	r3, #255	; 0xff
 800f790:	2202      	movs	r2, #2
 800f792:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800f796:	f7ff ffab 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 800f79a:	e7e8      	b.n	800f76e <ull_configciadiag+0x1e>
 800f79c:	2301      	movs	r3, #1
 800f79e:	9300      	str	r3, [sp, #0]
 800f7a0:	23ff      	movs	r3, #255	; 0xff
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	4904      	ldr	r1, [pc, #16]	; (800f7b8 <ull_configciadiag+0x68>)
 800f7a6:	4620      	mov	r0, r4
 800f7a8:	f7ff ffa2 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 800f7ac:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f7ae:	7d93      	ldrb	r3, [r2, #22]
 800f7b0:	f043 0302 	orr.w	r3, r3, #2
 800f7b4:	7593      	strb	r3, [r2, #22]
 800f7b6:	e7e6      	b.n	800f786 <ull_configciadiag+0x36>
 800f7b8:	00010020 	.word	0x00010020

0800f7bc <ull_configurestsloadiv>:
 800f7bc:	b500      	push	{lr}
 800f7be:	b083      	sub	sp, #12
 800f7c0:	2301      	movs	r3, #1
 800f7c2:	9300      	str	r3, [sp, #0]
 800f7c4:	23ff      	movs	r3, #255	; 0xff
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	4902      	ldr	r1, [pc, #8]	; (800f7d4 <ull_configurestsloadiv+0x18>)
 800f7ca:	f7ff ff91 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 800f7ce:	b003      	add	sp, #12
 800f7d0:	f85d fb04 	ldr.w	pc, [sp], #4
 800f7d4:	00020004 	.word	0x00020004

0800f7d8 <ull_adcoffsetscalibration>:
 800f7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7dc:	b08b      	sub	sp, #44	; 0x2c
 800f7de:	4607      	mov	r7, r0
 800f7e0:	f8df 8220 	ldr.w	r8, [pc, #544]	; 800fa04 <ull_adcoffsetscalibration+0x22c>
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	4641      	mov	r1, r8
 800f7e8:	f7fe fc2d 	bl	800e046 <dwt_read32bitoffsetreg>
 800f7ec:	9004      	str	r0, [sp, #16]
 800f7ee:	4c7d      	ldr	r4, [pc, #500]	; (800f9e4 <ull_adcoffsetscalibration+0x20c>)
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	4621      	mov	r1, r4
 800f7f4:	4638      	mov	r0, r7
 800f7f6:	f7fe fc26 	bl	800e046 <dwt_read32bitoffsetreg>
 800f7fa:	9005      	str	r0, [sp, #20]
 800f7fc:	4d7a      	ldr	r5, [pc, #488]	; (800f9e8 <ull_adcoffsetscalibration+0x210>)
 800f7fe:	2200      	movs	r2, #0
 800f800:	4629      	mov	r1, r5
 800f802:	4638      	mov	r0, r7
 800f804:	f7fe fc74 	bl	800e0f0 <dwt_read8bitoffsetreg>
 800f808:	9006      	str	r0, [sp, #24]
 800f80a:	4e78      	ldr	r6, [pc, #480]	; (800f9ec <ull_adcoffsetscalibration+0x214>)
 800f80c:	2200      	movs	r2, #0
 800f80e:	4631      	mov	r1, r6
 800f810:	4638      	mov	r0, r7
 800f812:	f7fe fc18 	bl	800e046 <dwt_read32bitoffsetreg>
 800f816:	4682      	mov	sl, r0
 800f818:	9007      	str	r0, [sp, #28]
 800f81a:	2200      	movs	r2, #0
 800f81c:	4974      	ldr	r1, [pc, #464]	; (800f9f0 <ull_adcoffsetscalibration+0x218>)
 800f81e:	4638      	mov	r0, r7
 800f820:	f7fe fc11 	bl	800e046 <dwt_read32bitoffsetreg>
 800f824:	4681      	mov	r9, r0
 800f826:	4b73      	ldr	r3, [pc, #460]	; (800f9f4 <ull_adcoffsetscalibration+0x21c>)
 800f828:	9300      	str	r3, [sp, #0]
 800f82a:	f06f 537c 	mvn.w	r3, #1056964608	; 0x3f000000
 800f82e:	2200      	movs	r2, #0
 800f830:	4641      	mov	r1, r8
 800f832:	4638      	mov	r0, r7
 800f834:	f7ff fdec 	bl	800f410 <dwt_modify32bitoffsetreg>
 800f838:	464b      	mov	r3, r9
 800f83a:	2200      	movs	r2, #0
 800f83c:	4631      	mov	r1, r6
 800f83e:	4638      	mov	r0, r7
 800f840:	f7ff f8e0 	bl	800ea04 <dwt_write32bitoffsetreg>
 800f844:	4653      	mov	r3, sl
 800f846:	00db      	lsls	r3, r3, #3
 800f848:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f84c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f850:	9300      	str	r3, [sp, #0]
 800f852:	2386      	movs	r3, #134	; 0x86
 800f854:	2200      	movs	r2, #0
 800f856:	4621      	mov	r1, r4
 800f858:	4638      	mov	r0, r7
 800f85a:	f7ff ff49 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 800f85e:	2300      	movs	r3, #0
 800f860:	2203      	movs	r2, #3
 800f862:	4621      	mov	r1, r4
 800f864:	4638      	mov	r0, r7
 800f866:	f7ff fab1 	bl	800edcc <dwt_write8bitoffsetreg>
 800f86a:	f04f 0900 	mov.w	r9, #0
 800f86e:	f8cd 9000 	str.w	r9, [sp]
 800f872:	23fe      	movs	r3, #254	; 0xfe
 800f874:	464a      	mov	r2, r9
 800f876:	4629      	mov	r1, r5
 800f878:	4638      	mov	r0, r7
 800f87a:	f7ff ff39 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 800f87e:	464a      	mov	r2, r9
 800f880:	213c      	movs	r1, #60	; 0x3c
 800f882:	4638      	mov	r0, r7
 800f884:	f7fe fbdf 	bl	800e046 <dwt_read32bitoffsetreg>
 800f888:	9008      	str	r0, [sp, #32]
 800f88a:	464a      	mov	r2, r9
 800f88c:	2140      	movs	r1, #64	; 0x40
 800f88e:	4638      	mov	r0, r7
 800f890:	f7fe fbd9 	bl	800e046 <dwt_read32bitoffsetreg>
 800f894:	9009      	str	r0, [sp, #36]	; 0x24
 800f896:	464b      	mov	r3, r9
 800f898:	464a      	mov	r2, r9
 800f89a:	213c      	movs	r1, #60	; 0x3c
 800f89c:	4638      	mov	r0, r7
 800f89e:	f7ff f8b1 	bl	800ea04 <dwt_write32bitoffsetreg>
 800f8a2:	464b      	mov	r3, r9
 800f8a4:	464a      	mov	r2, r9
 800f8a6:	2140      	movs	r1, #64	; 0x40
 800f8a8:	4638      	mov	r0, r7
 800f8aa:	f7ff f8ab 	bl	800ea04 <dwt_write32bitoffsetreg>
 800f8ae:	f7f5 fdf3 	bl	8005498 <dwt_forcetrxoff>
 800f8b2:	f04f 0b02 	mov.w	fp, #2
 800f8b6:	464c      	mov	r4, r9
 800f8b8:	464d      	mov	r5, r9
 800f8ba:	464e      	mov	r6, r9
 800f8bc:	46c8      	mov	r8, r9
 800f8be:	f8cd 900c 	str.w	r9, [sp, #12]
 800f8c2:	46ca      	mov	sl, r9
 800f8c4:	e00e      	b.n	800f8e4 <ull_adcoffsetscalibration+0x10c>
 800f8c6:	f7f5 fde7 	bl	8005498 <dwt_forcetrxoff>
 800f8ca:	9b03      	ldr	r3, [sp, #12]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	f000 8082 	beq.w	800f9d6 <ull_adcoffsetscalibration+0x1fe>
 800f8d2:	f1bb 0f01 	cmp.w	fp, #1
 800f8d6:	f000 8081 	beq.w	800f9dc <ull_adcoffsetscalibration+0x204>
 800f8da:	2301      	movs	r3, #1
 800f8dc:	9303      	str	r3, [sp, #12]
 800f8de:	f1bb 0b01 	subs.w	fp, fp, #1
 800f8e2:	d043      	beq.n	800f96c <ull_adcoffsetscalibration+0x194>
 800f8e4:	4650      	mov	r0, sl
 800f8e6:	f7f5 fde5 	bl	80054b4 <dwt_rxenable>
 800f8ea:	2014      	movs	r0, #20
 800f8ec:	f7f1 fe35 	bl	800155a <deca_usleep>
 800f8f0:	f04f 0904 	mov.w	r9, #4
 800f8f4:	f8cd a000 	str.w	sl, [sp]
 800f8f8:	23fe      	movs	r3, #254	; 0xfe
 800f8fa:	4652      	mov	r2, sl
 800f8fc:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800f900:	4638      	mov	r0, r7
 800f902:	f7ff fef5 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 800f906:	2301      	movs	r3, #1
 800f908:	9300      	str	r3, [sp, #0]
 800f90a:	23fe      	movs	r3, #254	; 0xfe
 800f90c:	4652      	mov	r2, sl
 800f90e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800f912:	4638      	mov	r0, r7
 800f914:	f7ff feec 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 800f918:	4652      	mov	r2, sl
 800f91a:	4937      	ldr	r1, [pc, #220]	; (800f9f8 <ull_adcoffsetscalibration+0x220>)
 800f91c:	4638      	mov	r0, r7
 800f91e:	f7fe fb92 	bl	800e046 <dwt_read32bitoffsetreg>
 800f922:	fa58 f880 	uxtab	r8, r8, r0
 800f926:	fa1f f888 	uxth.w	r8, r8
 800f92a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f92e:	441e      	add	r6, r3
 800f930:	b2b6      	uxth	r6, r6
 800f932:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f936:	441d      	add	r5, r3
 800f938:	b2ad      	uxth	r5, r5
 800f93a:	eb04 6410 	add.w	r4, r4, r0, lsr #24
 800f93e:	b2a4      	uxth	r4, r4
 800f940:	f1b9 0901 	subs.w	r9, r9, #1
 800f944:	d1d6      	bne.n	800f8f4 <ull_adcoffsetscalibration+0x11c>
 800f946:	f3c8 0887 	ubfx	r8, r8, #2, #8
 800f94a:	f3c6 0687 	ubfx	r6, r6, #2, #8
 800f94e:	f3c5 0587 	ubfx	r5, r5, #2, #8
 800f952:	f3c4 0487 	ubfx	r4, r4, #2, #8
 800f956:	4652      	mov	r2, sl
 800f958:	2144      	movs	r1, #68	; 0x44
 800f95a:	4638      	mov	r0, r7
 800f95c:	f7fe fb73 	bl	800e046 <dwt_read32bitoffsetreg>
 800f960:	4b26      	ldr	r3, [pc, #152]	; (800f9fc <ull_adcoffsetscalibration+0x224>)
 800f962:	4218      	tst	r0, r3
 800f964:	d0af      	beq.n	800f8c6 <ull_adcoffsetscalibration+0xee>
 800f966:	f7f5 fd97 	bl	8005498 <dwt_forcetrxoff>
 800f96a:	e7b2      	b.n	800f8d2 <ull_adcoffsetscalibration+0xfa>
 800f96c:	f04f 0900 	mov.w	r9, #0
 800f970:	9b08      	ldr	r3, [sp, #32]
 800f972:	2200      	movs	r2, #0
 800f974:	213c      	movs	r1, #60	; 0x3c
 800f976:	4638      	mov	r0, r7
 800f978:	f7ff f844 	bl	800ea04 <dwt_write32bitoffsetreg>
 800f97c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f97e:	2200      	movs	r2, #0
 800f980:	2140      	movs	r1, #64	; 0x40
 800f982:	4638      	mov	r0, r7
 800f984:	f7ff f83e 	bl	800ea04 <dwt_write32bitoffsetreg>
 800f988:	042b      	lsls	r3, r5, #16
 800f98a:	eb03 6304 	add.w	r3, r3, r4, lsl #24
 800f98e:	eb03 2306 	add.w	r3, r3, r6, lsl #8
 800f992:	4443      	add	r3, r8
 800f994:	2200      	movs	r2, #0
 800f996:	491a      	ldr	r1, [pc, #104]	; (800fa00 <ull_adcoffsetscalibration+0x228>)
 800f998:	4638      	mov	r0, r7
 800f99a:	f7ff f833 	bl	800ea04 <dwt_write32bitoffsetreg>
 800f99e:	9b04      	ldr	r3, [sp, #16]
 800f9a0:	2200      	movs	r2, #0
 800f9a2:	4918      	ldr	r1, [pc, #96]	; (800fa04 <ull_adcoffsetscalibration+0x22c>)
 800f9a4:	4638      	mov	r0, r7
 800f9a6:	f7ff f82d 	bl	800ea04 <dwt_write32bitoffsetreg>
 800f9aa:	9b05      	ldr	r3, [sp, #20]
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	490d      	ldr	r1, [pc, #52]	; (800f9e4 <ull_adcoffsetscalibration+0x20c>)
 800f9b0:	4638      	mov	r0, r7
 800f9b2:	f7ff f827 	bl	800ea04 <dwt_write32bitoffsetreg>
 800f9b6:	9b06      	ldr	r3, [sp, #24]
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	490b      	ldr	r1, [pc, #44]	; (800f9e8 <ull_adcoffsetscalibration+0x210>)
 800f9bc:	4638      	mov	r0, r7
 800f9be:	f7ff fa05 	bl	800edcc <dwt_write8bitoffsetreg>
 800f9c2:	9b07      	ldr	r3, [sp, #28]
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	4909      	ldr	r1, [pc, #36]	; (800f9ec <ull_adcoffsetscalibration+0x214>)
 800f9c8:	4638      	mov	r0, r7
 800f9ca:	f7ff f81b 	bl	800ea04 <dwt_write32bitoffsetreg>
 800f9ce:	4648      	mov	r0, r9
 800f9d0:	b00b      	add	sp, #44	; 0x2c
 800f9d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9d6:	f04f 0900 	mov.w	r9, #0
 800f9da:	e7c9      	b.n	800f970 <ull_adcoffsetscalibration+0x198>
 800f9dc:	f06f 0905 	mvn.w	r9, #5
 800f9e0:	e7c6      	b.n	800f970 <ull_adcoffsetscalibration+0x198>
 800f9e2:	bf00      	nop
 800f9e4:	00030014 	.word	0x00030014
 800f9e8:	00030018 	.word	0x00030018
 800f9ec:	0003002c 	.word	0x0003002c
 800f9f0:	00030044 	.word	0x00030044
 800f9f4:	38010000 	.word	0x38010000
 800f9f8:	0003004c 	.word	0x0003004c
 800f9fc:	3427ff00 	.word	0x3427ff00
 800fa00:	00030010 	.word	0x00030010
 800fa04:	00070014 	.word	0x00070014

0800fa08 <ull_restoreconfig>:
 800fa08:	b510      	push	{r4, lr}
 800fa0a:	4604      	mov	r4, r0
 800fa0c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fa0e:	7d9b      	ldrb	r3, [r3, #22]
 800fa10:	085b      	lsrs	r3, r3, #1
 800fa12:	d01a      	beq.n	800fa4a <ull_restoreconfig+0x42>
 800fa14:	2200      	movs	r2, #0
 800fa16:	4912      	ldr	r1, [pc, #72]	; (800fa60 <ull_restoreconfig+0x58>)
 800fa18:	4620      	mov	r0, r4
 800fa1a:	f7fe fb2a 	bl	800e072 <dwt_read16bitoffsetreg>
 800fa1e:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 800fa22:	3b09      	subs	r3, #9
 800fa24:	2b0f      	cmp	r3, #15
 800fa26:	d80c      	bhi.n	800fa42 <ull_restoreconfig+0x3a>
 800fa28:	f000 0001 	and.w	r0, r0, #1
 800fa2c:	2800      	cmp	r0, #0
 800fa2e:	bf0c      	ite	eq
 800fa30:	2105      	moveq	r1, #5
 800fa32:	2109      	movne	r1, #9
 800fa34:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800fa36:	7a1b      	ldrb	r3, [r3, #8]
 800fa38:	2b01      	cmp	r3, #1
 800fa3a:	d002      	beq.n	800fa42 <ull_restoreconfig+0x3a>
 800fa3c:	4620      	mov	r0, r4
 800fa3e:	f7ff f8ad 	bl	800eb9c <ull_configmrxlut>
 800fa42:	4620      	mov	r0, r4
 800fa44:	f7ff fec8 	bl	800f7d8 <ull_adcoffsetscalibration>
 800fa48:	bd10      	pop	{r4, pc}
 800fa4a:	2301      	movs	r3, #1
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	4905      	ldr	r1, [pc, #20]	; (800fa64 <ull_restoreconfig+0x5c>)
 800fa50:	f7ff f9bc 	bl	800edcc <dwt_write8bitoffsetreg>
 800fa54:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800fa56:	7d93      	ldrb	r3, [r2, #22]
 800fa58:	f043 0302 	orr.w	r3, r3, #2
 800fa5c:	7593      	strb	r3, [r2, #22]
 800fa5e:	e7d9      	b.n	800fa14 <ull_restoreconfig+0xc>
 800fa60:	00010008 	.word	0x00010008
 800fa64:	00010020 	.word	0x00010020

0800fa68 <ull_calcbandwidthadj>:
 800fa68:	b570      	push	{r4, r5, r6, lr}
 800fa6a:	b082      	sub	sp, #8
 800fa6c:	4604      	mov	r4, r0
 800fa6e:	460d      	mov	r5, r1
 800fa70:	2101      	movs	r1, #1
 800fa72:	f7fe ff7b 	bl	800e96c <ull_force_clocks>
 800fa76:	2100      	movs	r1, #0
 800fa78:	4620      	mov	r0, r4
 800fa7a:	f7ff fcfd 	bl	800f478 <ull_enable_rf_tx>
 800fa7e:	4620      	mov	r0, r4
 800fa80:	f7ff fd2e 	bl	800f4e0 <ull_enable_rftx_blocks>
 800fa84:	f3c5 030b 	ubfx	r3, r5, #0, #12
 800fa88:	2200      	movs	r2, #0
 800fa8a:	4915      	ldr	r1, [pc, #84]	; (800fae0 <ull_calcbandwidthadj+0x78>)
 800fa8c:	4620      	mov	r0, r4
 800fa8e:	f7fe ff4e 	bl	800e92e <dwt_write16bitoffsetreg>
 800fa92:	2303      	movs	r3, #3
 800fa94:	9300      	str	r3, [sp, #0]
 800fa96:	23ff      	movs	r3, #255	; 0xff
 800fa98:	2200      	movs	r2, #0
 800fa9a:	4912      	ldr	r1, [pc, #72]	; (800fae4 <ull_calcbandwidthadj+0x7c>)
 800fa9c:	4620      	mov	r0, r4
 800fa9e:	f7ff fe27 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 800faa2:	4e10      	ldr	r6, [pc, #64]	; (800fae4 <ull_calcbandwidthadj+0x7c>)
 800faa4:	2500      	movs	r5, #0
 800faa6:	462a      	mov	r2, r5
 800faa8:	4631      	mov	r1, r6
 800faaa:	4620      	mov	r0, r4
 800faac:	f7fe fb20 	bl	800e0f0 <dwt_read8bitoffsetreg>
 800fab0:	f010 0f01 	tst.w	r0, #1
 800fab4:	d1f7      	bne.n	800faa6 <ull_calcbandwidthadj+0x3e>
 800fab6:	4620      	mov	r0, r4
 800fab8:	f7ff f906 	bl	800ecc8 <ull_disable_rftx_blocks>
 800fabc:	2100      	movs	r1, #0
 800fabe:	4620      	mov	r0, r4
 800fac0:	f7ff f90c 	bl	800ecdc <ull_disable_rf_tx>
 800fac4:	2105      	movs	r1, #5
 800fac6:	4620      	mov	r0, r4
 800fac8:	f7fe ff50 	bl	800e96c <ull_force_clocks>
 800facc:	2200      	movs	r2, #0
 800face:	4906      	ldr	r1, [pc, #24]	; (800fae8 <ull_calcbandwidthadj+0x80>)
 800fad0:	4620      	mov	r0, r4
 800fad2:	f7fe fb0d 	bl	800e0f0 <dwt_read8bitoffsetreg>
 800fad6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800fada:	b002      	add	sp, #8
 800fadc:	bd70      	pop	{r4, r5, r6, pc}
 800fade:	bf00      	nop
 800fae0:	0008001c 	.word	0x0008001c
 800fae4:	00080010 	.word	0x00080010
 800fae8:	0007001c 	.word	0x0007001c

0800faec <ull_configuretxrf>:
 800faec:	b538      	push	{r3, r4, r5, lr}
 800faee:	4605      	mov	r5, r0
 800faf0:	460c      	mov	r4, r1
 800faf2:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 800faf6:	b149      	cbz	r1, 800fb0c <ull_configuretxrf+0x20>
 800faf8:	f7ff ffb6 	bl	800fa68 <ull_calcbandwidthadj>
 800fafc:	f8d4 3001 	ldr.w	r3, [r4, #1]
 800fb00:	2200      	movs	r2, #0
 800fb02:	4905      	ldr	r1, [pc, #20]	; (800fb18 <ull_configuretxrf+0x2c>)
 800fb04:	4628      	mov	r0, r5
 800fb06:	f7fe ff7d 	bl	800ea04 <dwt_write32bitoffsetreg>
 800fb0a:	bd38      	pop	{r3, r4, r5, pc}
 800fb0c:	7823      	ldrb	r3, [r4, #0]
 800fb0e:	2200      	movs	r2, #0
 800fb10:	4902      	ldr	r1, [pc, #8]	; (800fb1c <ull_configuretxrf+0x30>)
 800fb12:	f7ff f95b 	bl	800edcc <dwt_write8bitoffsetreg>
 800fb16:	e7f1      	b.n	800fafc <ull_configuretxrf+0x10>
 800fb18:	00010004 	.word	0x00010004
 800fb1c:	0007001c 	.word	0x0007001c

0800fb20 <ull_repeated_frames>:
 800fb20:	b530      	push	{r4, r5, lr}
 800fb22:	b083      	sub	sp, #12
 800fb24:	4604      	mov	r4, r0
 800fb26:	460d      	mov	r5, r1
 800fb28:	2310      	movs	r3, #16
 800fb2a:	9300      	str	r3, [sp, #0]
 800fb2c:	23ff      	movs	r3, #255	; 0xff
 800fb2e:	2200      	movs	r2, #0
 800fb30:	4906      	ldr	r1, [pc, #24]	; (800fb4c <ull_repeated_frames+0x2c>)
 800fb32:	f7ff fddd 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 800fb36:	462b      	mov	r3, r5
 800fb38:	2d02      	cmp	r5, #2
 800fb3a:	bf38      	it	cc
 800fb3c:	2302      	movcc	r3, #2
 800fb3e:	2200      	movs	r2, #0
 800fb40:	2128      	movs	r1, #40	; 0x28
 800fb42:	4620      	mov	r0, r4
 800fb44:	f7fe ff5e 	bl	800ea04 <dwt_write32bitoffsetreg>
 800fb48:	b003      	add	sp, #12
 800fb4a:	bd30      	pop	{r4, r5, pc}
 800fb4c:	000f0028 	.word	0x000f0028

0800fb50 <ull_setdwstate>:
 800fb50:	b530      	push	{r4, r5, lr}
 800fb52:	b083      	sub	sp, #12
 800fb54:	4604      	mov	r4, r0
 800fb56:	2901      	cmp	r1, #1
 800fb58:	d01d      	beq.n	800fb96 <ull_setdwstate+0x46>
 800fb5a:	2902      	cmp	r1, #2
 800fb5c:	d030      	beq.n	800fbc0 <ull_setdwstate+0x70>
 800fb5e:	2301      	movs	r3, #1
 800fb60:	9300      	str	r3, [sp, #0]
 800fb62:	23ff      	movs	r3, #255	; 0xff
 800fb64:	2200      	movs	r2, #0
 800fb66:	4926      	ldr	r1, [pc, #152]	; (800fc00 <ull_setdwstate+0xb0>)
 800fb68:	f7ff fdc2 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 800fb6c:	4d25      	ldr	r5, [pc, #148]	; (800fc04 <ull_setdwstate+0xb4>)
 800fb6e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800fb72:	9300      	str	r3, [sp, #0]
 800fb74:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800fb78:	2200      	movs	r2, #0
 800fb7a:	4629      	mov	r1, r5
 800fb7c:	4620      	mov	r0, r4
 800fb7e:	f7ff fc47 	bl	800f410 <dwt_modify32bitoffsetreg>
 800fb82:	2300      	movs	r3, #0
 800fb84:	9300      	str	r3, [sp, #0]
 800fb86:	237f      	movs	r3, #127	; 0x7f
 800fb88:	2202      	movs	r2, #2
 800fb8a:	4629      	mov	r1, r5
 800fb8c:	4620      	mov	r0, r4
 800fb8e:	f7ff fdaf 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 800fb92:	b003      	add	sp, #12
 800fb94:	bd30      	pop	{r4, r5, pc}
 800fb96:	2105      	movs	r1, #5
 800fb98:	f7fe fee8 	bl	800e96c <ull_force_clocks>
 800fb9c:	f44f 7381 	mov.w	r3, #258	; 0x102
 800fba0:	9300      	str	r3, [sp, #0]
 800fba2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fba6:	2200      	movs	r2, #0
 800fba8:	4917      	ldr	r1, [pc, #92]	; (800fc08 <ull_setdwstate+0xb8>)
 800fbaa:	4620      	mov	r0, r4
 800fbac:	f7ff fc30 	bl	800f410 <dwt_modify32bitoffsetreg>
 800fbb0:	2201      	movs	r2, #1
 800fbb2:	9200      	str	r2, [sp, #0]
 800fbb4:	23ff      	movs	r3, #255	; 0xff
 800fbb6:	4913      	ldr	r1, [pc, #76]	; (800fc04 <ull_setdwstate+0xb4>)
 800fbb8:	4620      	mov	r0, r4
 800fbba:	f7ff fd99 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 800fbbe:	e7e8      	b.n	800fb92 <ull_setdwstate+0x42>
 800fbc0:	2303      	movs	r3, #3
 800fbc2:	9300      	str	r3, [sp, #0]
 800fbc4:	23ff      	movs	r3, #255	; 0xff
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	490d      	ldr	r1, [pc, #52]	; (800fc00 <ull_setdwstate+0xb0>)
 800fbca:	f7ff fd91 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 800fbce:	4d0d      	ldr	r5, [pc, #52]	; (800fc04 <ull_setdwstate+0xb4>)
 800fbd0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800fbd4:	9300      	str	r3, [sp, #0]
 800fbd6:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800fbda:	2200      	movs	r2, #0
 800fbdc:	4629      	mov	r1, r5
 800fbde:	4620      	mov	r0, r4
 800fbe0:	f7ff fc16 	bl	800f410 <dwt_modify32bitoffsetreg>
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	9300      	str	r3, [sp, #0]
 800fbe8:	237f      	movs	r3, #127	; 0x7f
 800fbea:	2202      	movs	r2, #2
 800fbec:	4629      	mov	r1, r5
 800fbee:	4620      	mov	r0, r4
 800fbf0:	f7ff fd7e 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 800fbf4:	2105      	movs	r1, #5
 800fbf6:	4620      	mov	r0, r4
 800fbf8:	f7fe feb8 	bl	800e96c <ull_force_clocks>
 800fbfc:	e7c9      	b.n	800fb92 <ull_setdwstate+0x42>
 800fbfe:	bf00      	nop
 800fc00:	00110004 	.word	0x00110004
 800fc04:	00110008 	.word	0x00110008
 800fc08:	00090008 	.word	0x00090008

0800fc0c <ull_configureframefilter>:
 800fc0c:	b530      	push	{r4, r5, lr}
 800fc0e:	b083      	sub	sp, #12
 800fc10:	4605      	mov	r5, r0
 800fc12:	2902      	cmp	r1, #2
 800fc14:	d00e      	beq.n	800fc34 <ull_configureframefilter+0x28>
 800fc16:	2400      	movs	r4, #0
 800fc18:	9400      	str	r4, [sp, #0]
 800fc1a:	23fe      	movs	r3, #254	; 0xfe
 800fc1c:	4622      	mov	r2, r4
 800fc1e:	2110      	movs	r1, #16
 800fc20:	f7ff fd66 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 800fc24:	4623      	mov	r3, r4
 800fc26:	4622      	mov	r2, r4
 800fc28:	2114      	movs	r1, #20
 800fc2a:	4628      	mov	r0, r5
 800fc2c:	f7fe fe7f 	bl	800e92e <dwt_write16bitoffsetreg>
 800fc30:	b003      	add	sp, #12
 800fc32:	bd30      	pop	{r4, r5, pc}
 800fc34:	4614      	mov	r4, r2
 800fc36:	2301      	movs	r3, #1
 800fc38:	9300      	str	r3, [sp, #0]
 800fc3a:	23ff      	movs	r3, #255	; 0xff
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	2110      	movs	r1, #16
 800fc40:	f7ff fd56 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 800fc44:	4623      	mov	r3, r4
 800fc46:	2200      	movs	r2, #0
 800fc48:	2114      	movs	r1, #20
 800fc4a:	4628      	mov	r0, r5
 800fc4c:	f7fe fe6f 	bl	800e92e <dwt_write16bitoffsetreg>
 800fc50:	e7ee      	b.n	800fc30 <ull_configureframefilter+0x24>
	...

0800fc54 <ull_run_pgfcal>:
 800fc54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc58:	b082      	sub	sp, #8
 800fc5a:	4605      	mov	r5, r0
 800fc5c:	4c2a      	ldr	r4, [pc, #168]	; (800fd08 <ull_run_pgfcal+0xb4>)
 800fc5e:	2301      	movs	r3, #1
 800fc60:	9300      	str	r3, [sp, #0]
 800fc62:	23ff      	movs	r3, #255	; 0xff
 800fc64:	2200      	movs	r2, #0
 800fc66:	4621      	mov	r1, r4
 800fc68:	f7ff fd42 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 800fc6c:	2310      	movs	r3, #16
 800fc6e:	9300      	str	r3, [sp, #0]
 800fc70:	23ff      	movs	r3, #255	; 0xff
 800fc72:	2200      	movs	r2, #0
 800fc74:	4621      	mov	r1, r4
 800fc76:	4628      	mov	r0, r5
 800fc78:	f7ff fd3a 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 800fc7c:	2403      	movs	r4, #3
 800fc7e:	f04f 0814 	mov.w	r8, #20
 800fc82:	4f22      	ldr	r7, [pc, #136]	; (800fd0c <ull_run_pgfcal+0xb8>)
 800fc84:	2600      	movs	r6, #0
 800fc86:	4640      	mov	r0, r8
 800fc88:	f7f1 fc67 	bl	800155a <deca_usleep>
 800fc8c:	4632      	mov	r2, r6
 800fc8e:	4639      	mov	r1, r7
 800fc90:	4628      	mov	r0, r5
 800fc92:	f7fe fa2d 	bl	800e0f0 <dwt_read8bitoffsetreg>
 800fc96:	2801      	cmp	r0, #1
 800fc98:	d034      	beq.n	800fd04 <ull_run_pgfcal+0xb0>
 800fc9a:	1e63      	subs	r3, r4, #1
 800fc9c:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800fca0:	d1f1      	bne.n	800fc86 <ull_run_pgfcal+0x32>
 800fca2:	f06f 0402 	mvn.w	r4, #2
 800fca6:	4e18      	ldr	r6, [pc, #96]	; (800fd08 <ull_run_pgfcal+0xb4>)
 800fca8:	2300      	movs	r3, #0
 800fcaa:	461a      	mov	r2, r3
 800fcac:	4631      	mov	r1, r6
 800fcae:	4628      	mov	r0, r5
 800fcb0:	f7ff f88c 	bl	800edcc <dwt_write8bitoffsetreg>
 800fcb4:	2301      	movs	r3, #1
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	4914      	ldr	r1, [pc, #80]	; (800fd0c <ull_run_pgfcal+0xb8>)
 800fcba:	4628      	mov	r0, r5
 800fcbc:	f7ff f886 	bl	800edcc <dwt_write8bitoffsetreg>
 800fcc0:	2301      	movs	r3, #1
 800fcc2:	9300      	str	r3, [sp, #0]
 800fcc4:	23ff      	movs	r3, #255	; 0xff
 800fcc6:	2202      	movs	r2, #2
 800fcc8:	4631      	mov	r1, r6
 800fcca:	4628      	mov	r0, r5
 800fccc:	f7ff fd10 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	490f      	ldr	r1, [pc, #60]	; (800fd10 <ull_run_pgfcal+0xbc>)
 800fcd4:	4628      	mov	r0, r5
 800fcd6:	f7fe f9b6 	bl	800e046 <dwt_read32bitoffsetreg>
 800fcda:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800fcde:	4298      	cmp	r0, r3
 800fce0:	bf08      	it	eq
 800fce2:	f06f 0403 	mvneq.w	r4, #3
 800fce6:	2200      	movs	r2, #0
 800fce8:	490a      	ldr	r1, [pc, #40]	; (800fd14 <ull_run_pgfcal+0xc0>)
 800fcea:	4628      	mov	r0, r5
 800fcec:	f7fe f9ab 	bl	800e046 <dwt_read32bitoffsetreg>
 800fcf0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800fcf4:	4298      	cmp	r0, r3
 800fcf6:	bf14      	ite	ne
 800fcf8:	4620      	movne	r0, r4
 800fcfa:	f06f 0004 	mvneq.w	r0, #4
 800fcfe:	b002      	add	sp, #8
 800fd00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd04:	2400      	movs	r4, #0
 800fd06:	e7ce      	b.n	800fca6 <ull_run_pgfcal+0x52>
 800fd08:	0004000c 	.word	0x0004000c
 800fd0c:	00040020 	.word	0x00040020
 800fd10:	00040014 	.word	0x00040014
 800fd14:	0004001c 	.word	0x0004001c

0800fd18 <ull_setinterrupt>:
 800fd18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fd1c:	b083      	sub	sp, #12
 800fd1e:	4605      	mov	r5, r0
 800fd20:	4688      	mov	r8, r1
 800fd22:	4617      	mov	r7, r2
 800fd24:	461c      	mov	r4, r3
 800fd26:	f7f1 fbef 	bl	8001508 <decamutexon>
 800fd2a:	4606      	mov	r6, r0
 800fd2c:	2c02      	cmp	r4, #2
 800fd2e:	d019      	beq.n	800fd64 <ull_setinterrupt+0x4c>
 800fd30:	2c04      	cmp	r4, #4
 800fd32:	d017      	beq.n	800fd64 <ull_setinterrupt+0x4c>
 800fd34:	f004 03fd 	and.w	r3, r4, #253	; 0xfd
 800fd38:	2b01      	cmp	r3, #1
 800fd3a:	d03f      	beq.n	800fdbc <ull_setinterrupt+0xa4>
 800fd3c:	f04f 0900 	mov.w	r9, #0
 800fd40:	f8cd 9000 	str.w	r9, [sp]
 800fd44:	ea6f 0308 	mvn.w	r3, r8
 800fd48:	464a      	mov	r2, r9
 800fd4a:	213c      	movs	r1, #60	; 0x3c
 800fd4c:	4628      	mov	r0, r5
 800fd4e:	f7ff fb5f 	bl	800f410 <dwt_modify32bitoffsetreg>
 800fd52:	f8cd 9000 	str.w	r9, [sp]
 800fd56:	43fb      	mvns	r3, r7
 800fd58:	464a      	mov	r2, r9
 800fd5a:	2140      	movs	r1, #64	; 0x40
 800fd5c:	4628      	mov	r0, r5
 800fd5e:	f7ff fb57 	bl	800f410 <dwt_modify32bitoffsetreg>
 800fd62:	e00b      	b.n	800fd7c <ull_setinterrupt+0x64>
 800fd64:	4643      	mov	r3, r8
 800fd66:	2200      	movs	r2, #0
 800fd68:	213c      	movs	r1, #60	; 0x3c
 800fd6a:	4628      	mov	r0, r5
 800fd6c:	f7fe fe4a 	bl	800ea04 <dwt_write32bitoffsetreg>
 800fd70:	463b      	mov	r3, r7
 800fd72:	2200      	movs	r2, #0
 800fd74:	2140      	movs	r1, #64	; 0x40
 800fd76:	4628      	mov	r0, r5
 800fd78:	f7fe fe44 	bl	800ea04 <dwt_write32bitoffsetreg>
 800fd7c:	3c03      	subs	r4, #3
 800fd7e:	b2e4      	uxtb	r4, r4
 800fd80:	2c01      	cmp	r4, #1
 800fd82:	d92d      	bls.n	800fde0 <ull_setinterrupt+0xc8>
 800fd84:	2200      	movs	r2, #0
 800fd86:	213c      	movs	r1, #60	; 0x3c
 800fd88:	4628      	mov	r0, r5
 800fd8a:	f7fe f95c 	bl	800e046 <dwt_read32bitoffsetreg>
 800fd8e:	4603      	mov	r3, r0
 800fd90:	2200      	movs	r2, #0
 800fd92:	2144      	movs	r1, #68	; 0x44
 800fd94:	4628      	mov	r0, r5
 800fd96:	f7fe fe35 	bl	800ea04 <dwt_write32bitoffsetreg>
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	2140      	movs	r1, #64	; 0x40
 800fd9e:	4628      	mov	r0, r5
 800fda0:	f7fe f951 	bl	800e046 <dwt_read32bitoffsetreg>
 800fda4:	4603      	mov	r3, r0
 800fda6:	2200      	movs	r2, #0
 800fda8:	2148      	movs	r1, #72	; 0x48
 800fdaa:	4628      	mov	r0, r5
 800fdac:	f7fe fe2a 	bl	800ea04 <dwt_write32bitoffsetreg>
 800fdb0:	4630      	mov	r0, r6
 800fdb2:	f7f1 fbba 	bl	800152a <decamutexoff>
 800fdb6:	b003      	add	sp, #12
 800fdb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fdbc:	f8cd 8000 	str.w	r8, [sp]
 800fdc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	213c      	movs	r1, #60	; 0x3c
 800fdc8:	4628      	mov	r0, r5
 800fdca:	f7ff fb21 	bl	800f410 <dwt_modify32bitoffsetreg>
 800fdce:	9700      	str	r7, [sp, #0]
 800fdd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	2140      	movs	r1, #64	; 0x40
 800fdd8:	4628      	mov	r0, r5
 800fdda:	f7ff fb19 	bl	800f410 <dwt_modify32bitoffsetreg>
 800fdde:	e7cd      	b.n	800fd7c <ull_setinterrupt+0x64>
 800fde0:	2110      	movs	r1, #16
 800fde2:	9100      	str	r1, [sp, #0]
 800fde4:	23ff      	movs	r3, #255	; 0xff
 800fde6:	2202      	movs	r2, #2
 800fde8:	4628      	mov	r0, r5
 800fdea:	f7ff fc81 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 800fdee:	e7c9      	b.n	800fd84 <ull_setinterrupt+0x6c>

0800fdf0 <prs_ack_enable>:
 800fdf0:	b500      	push	{lr}
 800fdf2:	b083      	sub	sp, #12
 800fdf4:	2900      	cmp	r1, #0
 800fdf6:	bf0b      	itete	eq
 800fdf8:	23ff      	moveq	r3, #255	; 0xff
 800fdfa:	23f7      	movne	r3, #247	; 0xf7
 800fdfc:	2200      	moveq	r2, #0
 800fdfe:	2208      	movne	r2, #8
 800fe00:	9200      	str	r2, [sp, #0]
 800fe02:	2201      	movs	r2, #1
 800fe04:	2110      	movs	r1, #16
 800fe06:	f7ff fc73 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 800fe0a:	b003      	add	sp, #12
 800fe0c:	f85d fb04 	ldr.w	pc, [sp], #4

0800fe10 <dwt_modify16bitoffsetreg>:
 800fe10:	b510      	push	{r4, lr}
 800fe12:	b084      	sub	sp, #16
 800fe14:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 800fe18:	f88d 300c 	strb.w	r3, [sp, #12]
 800fe1c:	0a1b      	lsrs	r3, r3, #8
 800fe1e:	f88d 300d 	strb.w	r3, [sp, #13]
 800fe22:	f88d 400e 	strb.w	r4, [sp, #14]
 800fe26:	0a24      	lsrs	r4, r4, #8
 800fe28:	f88d 400f 	strb.w	r4, [sp, #15]
 800fe2c:	f248 0302 	movw	r3, #32770	; 0x8002
 800fe30:	9301      	str	r3, [sp, #4]
 800fe32:	ab03      	add	r3, sp, #12
 800fe34:	9300      	str	r3, [sp, #0]
 800fe36:	2304      	movs	r3, #4
 800fe38:	b292      	uxth	r2, r2
 800fe3a:	f7fe f87c 	bl	800df36 <dwt_xfer3xxx>
 800fe3e:	b004      	add	sp, #16
 800fe40:	bd10      	pop	{r4, pc}
	...

0800fe44 <ull_configurestsmode>:
 800fe44:	b530      	push	{r4, r5, lr}
 800fe46:	b083      	sub	sp, #12
 800fe48:	4605      	mov	r5, r0
 800fe4a:	460c      	mov	r4, r1
 800fe4c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fe4e:	7559      	strb	r1, [r3, #21]
 800fe50:	030b      	lsls	r3, r1, #12
 800fe52:	f403 4330 	and.w	r3, r3, #45056	; 0xb000
 800fe56:	9300      	str	r3, [sp, #0]
 800fe58:	f644 73ff 	movw	r3, #20479	; 0x4fff
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	2110      	movs	r1, #16
 800fe60:	f7ff ffd6 	bl	800fe10 <dwt_modify16bitoffsetreg>
 800fe64:	f004 0403 	and.w	r4, r4, #3
 800fe68:	2c03      	cmp	r4, #3
 800fe6a:	bf0c      	ite	eq
 800fe6c:	4b04      	ldreq	r3, [pc, #16]	; (800fe80 <ull_configurestsmode+0x3c>)
 800fe6e:	4b05      	ldrne	r3, [pc, #20]	; (800fe84 <ull_configurestsmode+0x40>)
 800fe70:	2200      	movs	r2, #0
 800fe72:	4905      	ldr	r1, [pc, #20]	; (800fe88 <ull_configurestsmode+0x44>)
 800fe74:	4628      	mov	r0, r5
 800fe76:	f7fe fdc5 	bl	800ea04 <dwt_write32bitoffsetreg>
 800fe7a:	b003      	add	sp, #12
 800fe7c:	bd30      	pop	{r4, r5, pc}
 800fe7e:	bf00      	nop
 800fe80:	af5f35cc 	.word	0xaf5f35cc
 800fe84:	af5f584c 	.word	0xaf5f584c
 800fe88:	0006000c 	.word	0x0006000c

0800fe8c <ull_setleds>:
 800fe8c:	b530      	push	{r4, r5, lr}
 800fe8e:	b083      	sub	sp, #12
 800fe90:	4604      	mov	r4, r0
 800fe92:	f011 0f01 	tst.w	r1, #1
 800fe96:	d01f      	beq.n	800fed8 <ull_setleds+0x4c>
 800fe98:	460d      	mov	r5, r1
 800fe9a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800fe9e:	9300      	str	r3, [sp, #0]
 800fea0:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 800fea4:	2200      	movs	r2, #0
 800fea6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800feaa:	f7ff fab1 	bl	800f410 <dwt_modify32bitoffsetreg>
 800feae:	f44f 0304 	mov.w	r3, #8650752	; 0x840000
 800feb2:	9300      	str	r3, [sp, #0]
 800feb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800feb8:	2200      	movs	r2, #0
 800feba:	4918      	ldr	r1, [pc, #96]	; (800ff1c <ull_setleds+0x90>)
 800febc:	4620      	mov	r0, r4
 800febe:	f7ff faa7 	bl	800f410 <dwt_modify32bitoffsetreg>
 800fec2:	f015 0f02 	tst.w	r5, #2
 800fec6:	d11a      	bne.n	800fefe <ull_setleds+0x72>
 800fec8:	f44f 7388 	mov.w	r3, #272	; 0x110
 800fecc:	2200      	movs	r2, #0
 800fece:	4914      	ldr	r1, [pc, #80]	; (800ff20 <ull_setleds+0x94>)
 800fed0:	4620      	mov	r0, r4
 800fed2:	f7fe fd97 	bl	800ea04 <dwt_write32bitoffsetreg>
 800fed6:	e010      	b.n	800fefa <ull_setleds+0x6e>
 800fed8:	2500      	movs	r5, #0
 800feda:	9500      	str	r5, [sp, #0]
 800fedc:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 800fee0:	462a      	mov	r2, r5
 800fee2:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800fee6:	f7ff fa93 	bl	800f410 <dwt_modify32bitoffsetreg>
 800feea:	9500      	str	r5, [sp, #0]
 800feec:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800fef0:	462a      	mov	r2, r5
 800fef2:	490b      	ldr	r1, [pc, #44]	; (800ff20 <ull_setleds+0x94>)
 800fef4:	4620      	mov	r0, r4
 800fef6:	f7ff ff8b 	bl	800fe10 <dwt_modify16bitoffsetreg>
 800fefa:	b003      	add	sp, #12
 800fefc:	bd30      	pop	{r4, r5, pc}
 800fefe:	4d08      	ldr	r5, [pc, #32]	; (800ff20 <ull_setleds+0x94>)
 800ff00:	4b08      	ldr	r3, [pc, #32]	; (800ff24 <ull_setleds+0x98>)
 800ff02:	2200      	movs	r2, #0
 800ff04:	4629      	mov	r1, r5
 800ff06:	4620      	mov	r0, r4
 800ff08:	f7fe fd7c 	bl	800ea04 <dwt_write32bitoffsetreg>
 800ff0c:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ff10:	2200      	movs	r2, #0
 800ff12:	4629      	mov	r1, r5
 800ff14:	4620      	mov	r0, r4
 800ff16:	f7fe fd75 	bl	800ea04 <dwt_write32bitoffsetreg>
 800ff1a:	e7ee      	b.n	800fefa <ull_setleds+0x6e>
 800ff1c:	00110004 	.word	0x00110004
 800ff20:	00110018 	.word	0x00110018
 800ff24:	000f0110 	.word	0x000f0110

0800ff28 <ull_pgf_cal>:
 800ff28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff2a:	b083      	sub	sp, #12
 800ff2c:	4604      	mov	r4, r0
 800ff2e:	2901      	cmp	r1, #1
 800ff30:	d009      	beq.n	800ff46 <ull_pgf_cal+0x1e>
 800ff32:	2014      	movs	r0, #20
 800ff34:	f7f1 fb11 	bl	800155a <deca_usleep>
 800ff38:	4620      	mov	r0, r4
 800ff3a:	f7ff fe8b 	bl	800fc54 <ull_run_pgfcal>
 800ff3e:	4605      	mov	r5, r0
 800ff40:	4628      	mov	r0, r5
 800ff42:	b003      	add	sp, #12
 800ff44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff46:	4e0f      	ldr	r6, [pc, #60]	; (800ff84 <ull_pgf_cal+0x5c>)
 800ff48:	2200      	movs	r2, #0
 800ff4a:	4631      	mov	r1, r6
 800ff4c:	f7fe f891 	bl	800e072 <dwt_read16bitoffsetreg>
 800ff50:	4607      	mov	r7, r0
 800ff52:	f240 1307 	movw	r3, #263	; 0x107
 800ff56:	9300      	str	r3, [sp, #0]
 800ff58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	4631      	mov	r1, r6
 800ff60:	4620      	mov	r0, r4
 800ff62:	f7ff ff55 	bl	800fe10 <dwt_modify16bitoffsetreg>
 800ff66:	2014      	movs	r0, #20
 800ff68:	f7f1 faf7 	bl	800155a <deca_usleep>
 800ff6c:	4620      	mov	r0, r4
 800ff6e:	f7ff fe71 	bl	800fc54 <ull_run_pgfcal>
 800ff72:	4605      	mov	r5, r0
 800ff74:	2200      	movs	r2, #0
 800ff76:	9200      	str	r2, [sp, #0]
 800ff78:	463b      	mov	r3, r7
 800ff7a:	4631      	mov	r1, r6
 800ff7c:	4620      	mov	r0, r4
 800ff7e:	f7ff ff47 	bl	800fe10 <dwt_modify16bitoffsetreg>
 800ff82:	e7dd      	b.n	800ff40 <ull_pgf_cal+0x18>
 800ff84:	00070048 	.word	0x00070048

0800ff88 <ull_setgpiovalue>:
 800ff88:	b500      	push	{lr}
 800ff8a:	b083      	sub	sp, #12
 800ff8c:	2a01      	cmp	r2, #1
 800ff8e:	d009      	beq.n	800ffa4 <ull_setgpiovalue+0x1c>
 800ff90:	43cb      	mvns	r3, r1
 800ff92:	2200      	movs	r2, #0
 800ff94:	9200      	str	r2, [sp, #0]
 800ff96:	b29b      	uxth	r3, r3
 800ff98:	4906      	ldr	r1, [pc, #24]	; (800ffb4 <ull_setgpiovalue+0x2c>)
 800ff9a:	f7ff ff39 	bl	800fe10 <dwt_modify16bitoffsetreg>
 800ff9e:	b003      	add	sp, #12
 800ffa0:	f85d fb04 	ldr.w	pc, [sp], #4
 800ffa4:	9100      	str	r1, [sp, #0]
 800ffa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ffaa:	2200      	movs	r2, #0
 800ffac:	4901      	ldr	r1, [pc, #4]	; (800ffb4 <ull_setgpiovalue+0x2c>)
 800ffae:	f7ff ff2f 	bl	800fe10 <dwt_modify16bitoffsetreg>
 800ffb2:	e7f4      	b.n	800ff9e <ull_setgpiovalue+0x16>
 800ffb4:	0005000c 	.word	0x0005000c

0800ffb8 <ull_readaccdata>:
 800ffb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffba:	b083      	sub	sp, #12
 800ffbc:	4604      	mov	r4, r0
 800ffbe:	460f      	mov	r7, r1
 800ffc0:	4616      	mov	r6, r2
 800ffc2:	461d      	mov	r5, r3
 800ffc4:	f248 0340 	movw	r3, #32832	; 0x8040
 800ffc8:	9300      	str	r3, [sp, #0]
 800ffca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ffce:	2200      	movs	r2, #0
 800ffd0:	4918      	ldr	r1, [pc, #96]	; (8010034 <ull_readaccdata+0x7c>)
 800ffd2:	f7ff ff1d 	bl	800fe10 <dwt_modify16bitoffsetreg>
 800ffd6:	19aa      	adds	r2, r5, r6
 800ffd8:	f243 0301 	movw	r3, #12289	; 0x3001
 800ffdc:	429a      	cmp	r2, r3
 800ffde:	dc15      	bgt.n	801000c <ull_readaccdata+0x54>
 800ffe0:	2d7f      	cmp	r5, #127	; 0x7f
 800ffe2:	d91d      	bls.n	8010020 <ull_readaccdata+0x68>
 800ffe4:	2315      	movs	r3, #21
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	4913      	ldr	r1, [pc, #76]	; (8010038 <ull_readaccdata+0x80>)
 800ffea:	4620      	mov	r0, r4
 800ffec:	f7fe fd0a 	bl	800ea04 <dwt_write32bitoffsetreg>
 800fff0:	462b      	mov	r3, r5
 800fff2:	2200      	movs	r2, #0
 800fff4:	4911      	ldr	r1, [pc, #68]	; (801003c <ull_readaccdata+0x84>)
 800fff6:	4620      	mov	r0, r4
 800fff8:	f7fe fd04 	bl	800ea04 <dwt_write32bitoffsetreg>
 800fffc:	9700      	str	r7, [sp, #0]
 800fffe:	4633      	mov	r3, r6
 8010000:	2200      	movs	r2, #0
 8010002:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8010006:	4620      	mov	r0, r4
 8010008:	f7fe f813 	bl	800e032 <dwt_readfromdevice>
 801000c:	2200      	movs	r2, #0
 801000e:	9200      	str	r2, [sp, #0]
 8010010:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 8010014:	4907      	ldr	r1, [pc, #28]	; (8010034 <ull_readaccdata+0x7c>)
 8010016:	4620      	mov	r0, r4
 8010018:	f7ff fefa 	bl	800fe10 <dwt_modify16bitoffsetreg>
 801001c:	b003      	add	sp, #12
 801001e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010020:	9700      	str	r7, [sp, #0]
 8010022:	4633      	mov	r3, r6
 8010024:	462a      	mov	r2, r5
 8010026:	f44f 11a8 	mov.w	r1, #1376256	; 0x150000
 801002a:	4620      	mov	r0, r4
 801002c:	f7fe f801 	bl	800e032 <dwt_readfromdevice>
 8010030:	e7ec      	b.n	801000c <ull_readaccdata+0x54>
 8010032:	bf00      	nop
 8010034:	00110004 	.word	0x00110004
 8010038:	001f0004 	.word	0x001f0004
 801003c:	001f0008 	.word	0x001f0008

08010040 <ull_configure>:
 8010040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010044:	b083      	sub	sp, #12
 8010046:	4604      	mov	r4, r0
 8010048:	460d      	mov	r5, r1
 801004a:	f891 9000 	ldrb.w	r9, [r1]
 801004e:	790b      	ldrb	r3, [r1, #4]
 8010050:	2b18      	cmp	r3, #24
 8010052:	d814      	bhi.n	801007e <ull_configure+0x3e>
 8010054:	78cf      	ldrb	r7, [r1, #3]
 8010056:	2f18      	cmp	r7, #24
 8010058:	bf94      	ite	ls
 801005a:	2700      	movls	r7, #0
 801005c:	2701      	movhi	r7, #1
 801005e:	b2ff      	uxtb	r7, r7
 8010060:	79eb      	ldrb	r3, [r5, #7]
 8010062:	2b01      	cmp	r3, #1
 8010064:	bf0c      	ite	eq
 8010066:	2110      	moveq	r1, #16
 8010068:	2100      	movne	r1, #0
 801006a:	786b      	ldrb	r3, [r5, #1]
 801006c:	3b01      	subs	r3, #1
 801006e:	2b06      	cmp	r3, #6
 8010070:	d810      	bhi.n	8010094 <ull_configure+0x54>
 8010072:	e8df f003 	tbb	[pc, r3]
 8010076:	0f06      	.short	0x0f06
 8010078:	0f0c120f 	.word	0x0f0c120f
 801007c:	09          	.byte	0x09
 801007d:	00          	.byte	0x00
 801007e:	2701      	movs	r7, #1
 8010080:	e7ed      	b.n	801005e <ull_configure+0x1e>
 8010082:	f04f 0a40 	mov.w	sl, #64	; 0x40
 8010086:	e00a      	b.n	801009e <ull_configure+0x5e>
 8010088:	f04f 0a48 	mov.w	sl, #72	; 0x48
 801008c:	e007      	b.n	801009e <ull_configure+0x5e>
 801008e:	f04f 0a80 	mov.w	sl, #128	; 0x80
 8010092:	e004      	b.n	801009e <ull_configure+0x5e>
 8010094:	f44f 7a80 	mov.w	sl, #256	; 0x100
 8010098:	e001      	b.n	801009e <ull_configure+0x5e>
 801009a:	f04f 0a20 	mov.w	sl, #32
 801009e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80100a0:	8a13      	ldrh	r3, [r2, #16]
 80100a2:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80100a6:	8213      	strh	r3, [r2, #16]
 80100a8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80100aa:	79ea      	ldrb	r2, [r5, #7]
 80100ac:	72da      	strb	r2, [r3, #11]
 80100ae:	7b2e      	ldrb	r6, [r5, #12]
 80100b0:	1cb3      	adds	r3, r6, #2
 80100b2:	2601      	movs	r6, #1
 80100b4:	409e      	lsls	r6, r3
 80100b6:	fa1f f886 	uxth.w	r8, r6
 80100ba:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80100bc:	4bca      	ldr	r3, [pc, #808]	; (80103e8 <ull_configure+0x3a8>)
 80100be:	fb03 f308 	mul.w	r3, r3, r8
 80100c2:	0bdb      	lsrs	r3, r3, #15
 80100c4:	8253      	strh	r3, [r2, #18]
 80100c6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80100c8:	7aea      	ldrb	r2, [r5, #11]
 80100ca:	755a      	strb	r2, [r3, #21]
 80100cc:	7a2b      	ldrb	r3, [r5, #8]
 80100ce:	015b      	lsls	r3, r3, #5
 80100d0:	f003 0320 	and.w	r3, r3, #32
 80100d4:	7b6a      	ldrb	r2, [r5, #13]
 80100d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80100da:	7aea      	ldrb	r2, [r5, #11]
 80100dc:	0312      	lsls	r2, r2, #12
 80100de:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 80100e2:	4313      	orrs	r3, r2
 80100e4:	430b      	orrs	r3, r1
 80100e6:	9300      	str	r3, [sp, #0]
 80100e8:	4bc0      	ldr	r3, [pc, #768]	; (80103ec <ull_configure+0x3ac>)
 80100ea:	2200      	movs	r2, #0
 80100ec:	2110      	movs	r1, #16
 80100ee:	4620      	mov	r0, r4
 80100f0:	f7ff f98e 	bl	800f410 <dwt_modify32bitoffsetreg>
 80100f4:	2f00      	cmp	r7, #0
 80100f6:	f040 80fe 	bne.w	80102f6 <ull_configure+0x2b6>
 80100fa:	7aeb      	ldrb	r3, [r5, #11]
 80100fc:	b1bb      	cbz	r3, 801012e <ull_configure+0xee>
 80100fe:	7b6b      	ldrb	r3, [r5, #13]
 8010100:	2b01      	cmp	r3, #1
 8010102:	7b28      	ldrb	r0, [r5, #12]
 8010104:	bf94      	ite	ls
 8010106:	2203      	movls	r2, #3
 8010108:	2204      	movhi	r2, #4
 801010a:	2110      	movs	r1, #16
 801010c:	4bb8      	ldr	r3, [pc, #736]	; (80103f0 <ull_configure+0x3b0>)
 801010e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8010112:	f7fd fef3 	bl	800defc <get_sts_mnth>
 8010116:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
 801011a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801011e:	9000      	str	r0, [sp, #0]
 8010120:	f64f 7380 	movw	r3, #65408	; 0xff80
 8010124:	2202      	movs	r2, #2
 8010126:	49b3      	ldr	r1, [pc, #716]	; (80103f4 <ull_configure+0x3b4>)
 8010128:	4620      	mov	r0, r4
 801012a:	f7ff fe71 	bl	800fe10 <dwt_modify16bitoffsetreg>
 801012e:	2394      	movs	r3, #148	; 0x94
 8010130:	9300      	str	r3, [sp, #0]
 8010132:	4bb1      	ldr	r3, [pc, #708]	; (80103f8 <ull_configure+0x3b8>)
 8010134:	2200      	movs	r2, #0
 8010136:	49b1      	ldr	r1, [pc, #708]	; (80103fc <ull_configure+0x3bc>)
 8010138:	4620      	mov	r0, r4
 801013a:	f7ff f969 	bl	800f410 <dwt_modify32bitoffsetreg>
 801013e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8010142:	f340 8103 	ble.w	801034c <ull_configure+0x30c>
 8010146:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8010148:	8a13      	ldrh	r3, [r2, #16]
 801014a:	f043 0320 	orr.w	r3, r3, #32
 801014e:	8213      	strh	r3, [r2, #16]
 8010150:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010154:	9300      	str	r3, [sp, #0]
 8010156:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 801015a:	2200      	movs	r2, #0
 801015c:	49a8      	ldr	r1, [pc, #672]	; (8010400 <ull_configure+0x3c0>)
 801015e:	4620      	mov	r0, r4
 8010160:	f7ff fe56 	bl	800fe10 <dwt_modify16bitoffsetreg>
 8010164:	7b6b      	ldrb	r3, [r5, #13]
 8010166:	2b01      	cmp	r3, #1
 8010168:	f000 80fb 	beq.w	8010362 <ull_configure+0x322>
 801016c:	78ab      	ldrb	r3, [r5, #2]
 801016e:	f043 0310 	orr.w	r3, r3, #16
 8010172:	9300      	str	r3, [sp, #0]
 8010174:	23fc      	movs	r3, #252	; 0xfc
 8010176:	2200      	movs	r2, #0
 8010178:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 801017c:	4620      	mov	r0, r4
 801017e:	f7ff fab7 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 8010182:	1e73      	subs	r3, r6, #1
 8010184:	b2db      	uxtb	r3, r3
 8010186:	2200      	movs	r2, #0
 8010188:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801018c:	4620      	mov	r0, r4
 801018e:	f7fe fe1d 	bl	800edcc <dwt_write8bitoffsetreg>
 8010192:	786b      	ldrb	r3, [r5, #1]
 8010194:	2b07      	cmp	r3, #7
 8010196:	bf0c      	ite	eq
 8010198:	2108      	moveq	r1, #8
 801019a:	2100      	movne	r1, #0
 801019c:	4620      	mov	r0, r4
 801019e:	f7fe ff1b 	bl	800efd8 <ull_setplenfine>
 80101a2:	7aeb      	ldrb	r3, [r5, #11]
 80101a4:	f003 0303 	and.w	r3, r3, #3
 80101a8:	2b03      	cmp	r3, #3
 80101aa:	bf0c      	ite	eq
 80101ac:	4b95      	ldreq	r3, [pc, #596]	; (8010404 <ull_configure+0x3c4>)
 80101ae:	4b96      	ldrne	r3, [pc, #600]	; (8010408 <ull_configure+0x3c8>)
 80101b0:	2200      	movs	r2, #0
 80101b2:	4996      	ldr	r1, [pc, #600]	; (801040c <ull_configure+0x3cc>)
 80101b4:	4620      	mov	r0, r4
 80101b6:	f7fe fc25 	bl	800ea04 <dwt_write32bitoffsetreg>
 80101ba:	2200      	movs	r2, #0
 80101bc:	4994      	ldr	r1, [pc, #592]	; (8010410 <ull_configure+0x3d0>)
 80101be:	4620      	mov	r0, r4
 80101c0:	f7fd ff41 	bl	800e046 <dwt_read32bitoffsetreg>
 80101c4:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 80101c8:	f020 001f 	bic.w	r0, r0, #31
 80101cc:	f1b9 0f09 	cmp.w	r9, #9
 80101d0:	bf08      	it	eq
 80101d2:	f040 0001 	orreq.w	r0, r0, #1
 80101d6:	792a      	ldrb	r2, [r5, #4]
 80101d8:	0212      	lsls	r2, r2, #8
 80101da:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 80101de:	78eb      	ldrb	r3, [r5, #3]
 80101e0:	00db      	lsls	r3, r3, #3
 80101e2:	b2db      	uxtb	r3, r3
 80101e4:	431a      	orrs	r2, r3
 80101e6:	796b      	ldrb	r3, [r5, #5]
 80101e8:	005b      	lsls	r3, r3, #1
 80101ea:	f003 0306 	and.w	r3, r3, #6
 80101ee:	4313      	orrs	r3, r2
 80101f0:	4303      	orrs	r3, r0
 80101f2:	2200      	movs	r2, #0
 80101f4:	4986      	ldr	r1, [pc, #536]	; (8010410 <ull_configure+0x3d0>)
 80101f6:	4620      	mov	r0, r4
 80101f8:	f7fe fc04 	bl	800ea04 <dwt_write32bitoffsetreg>
 80101fc:	79aa      	ldrb	r2, [r5, #6]
 80101fe:	786b      	ldrb	r3, [r5, #1]
 8010200:	031b      	lsls	r3, r3, #12
 8010202:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8010206:	9300      	str	r3, [sp, #0]
 8010208:	f46f 4374 	mvn.w	r3, #62464	; 0xf400
 801020c:	2200      	movs	r2, #0
 801020e:	2120      	movs	r1, #32
 8010210:	4620      	mov	r0, r4
 8010212:	f7ff f8fd 	bl	800f410 <dwt_modify32bitoffsetreg>
 8010216:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 801021a:	b923      	cbnz	r3, 8010226 <ull_configure+0x1e6>
 801021c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8010220:	726b      	strb	r3, [r5, #9]
 8010222:	2300      	movs	r3, #0
 8010224:	72ab      	strb	r3, [r5, #10]
 8010226:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 801022a:	2202      	movs	r2, #2
 801022c:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8010230:	4620      	mov	r0, r4
 8010232:	f7fe fb7c 	bl	800e92e <dwt_write16bitoffsetreg>
 8010236:	2202      	movs	r2, #2
 8010238:	4976      	ldr	r1, [pc, #472]	; (8010414 <ull_configure+0x3d4>)
 801023a:	4620      	mov	r0, r4
 801023c:	f7fd ff58 	bl	800e0f0 <dwt_read8bitoffsetreg>
 8010240:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010242:	7bdb      	ldrb	r3, [r3, #15]
 8010244:	454b      	cmp	r3, r9
 8010246:	f000 8096 	beq.w	8010376 <ull_configure+0x336>
 801024a:	2803      	cmp	r0, #3
 801024c:	f000 8097 	beq.w	801037e <ull_configure+0x33e>
 8010250:	f1b9 0f09 	cmp.w	r9, #9
 8010254:	f000 8098 	beq.w	8010388 <ull_configure+0x348>
 8010258:	4b6f      	ldr	r3, [pc, #444]	; (8010418 <ull_configure+0x3d8>)
 801025a:	9300      	str	r3, [sp, #0]
 801025c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010260:	2200      	movs	r2, #0
 8010262:	496e      	ldr	r1, [pc, #440]	; (801041c <ull_configure+0x3dc>)
 8010264:	4620      	mov	r0, r4
 8010266:	f7ff f8d3 	bl	800f410 <dwt_modify32bitoffsetreg>
 801026a:	f641 733c 	movw	r3, #7996	; 0x1f3c
 801026e:	2200      	movs	r2, #0
 8010270:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 8010274:	4620      	mov	r0, r4
 8010276:	f7fe fb5a 	bl	800e92e <dwt_write16bitoffsetreg>
 801027a:	2314      	movs	r3, #20
 801027c:	2201      	movs	r2, #1
 801027e:	4968      	ldr	r1, [pc, #416]	; (8010420 <ull_configure+0x3e0>)
 8010280:	4620      	mov	r0, r4
 8010282:	f7fe fda3 	bl	800edcc <dwt_write8bitoffsetreg>
 8010286:	230e      	movs	r3, #14
 8010288:	2202      	movs	r2, #2
 801028a:	4966      	ldr	r1, [pc, #408]	; (8010424 <ull_configure+0x3e4>)
 801028c:	4620      	mov	r0, r4
 801028e:	f7fe fd9d 	bl	800edcc <dwt_write8bitoffsetreg>
 8010292:	2381      	movs	r3, #129	; 0x81
 8010294:	2200      	movs	r2, #0
 8010296:	4964      	ldr	r1, [pc, #400]	; (8010428 <ull_configure+0x3e8>)
 8010298:	4620      	mov	r0, r4
 801029a:	f7fe fd97 	bl	800edcc <dwt_write8bitoffsetreg>
 801029e:	2600      	movs	r6, #0
 80102a0:	9600      	str	r6, [sp, #0]
 80102a2:	23fc      	movs	r3, #252	; 0xfc
 80102a4:	2203      	movs	r2, #3
 80102a6:	4961      	ldr	r1, [pc, #388]	; (801042c <ull_configure+0x3ec>)
 80102a8:	4620      	mov	r0, r4
 80102aa:	f7ff fa21 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 80102ae:	2302      	movs	r3, #2
 80102b0:	4632      	mov	r2, r6
 80102b2:	2144      	movs	r1, #68	; 0x44
 80102b4:	4620      	mov	r0, r4
 80102b6:	f7fe fd89 	bl	800edcc <dwt_write8bitoffsetreg>
 80102ba:	2101      	movs	r1, #1
 80102bc:	4620      	mov	r0, r4
 80102be:	f7ff fc47 	bl	800fb50 <ull_setdwstate>
 80102c2:	f04f 0b32 	mov.w	fp, #50	; 0x32
 80102c6:	f04f 0814 	mov.w	r8, #20
 80102ca:	4637      	mov	r7, r6
 80102cc:	2644      	movs	r6, #68	; 0x44
 80102ce:	4640      	mov	r0, r8
 80102d0:	f7f1 f943 	bl	800155a <deca_usleep>
 80102d4:	463a      	mov	r2, r7
 80102d6:	4631      	mov	r1, r6
 80102d8:	4620      	mov	r0, r4
 80102da:	f7fd ff09 	bl	800e0f0 <dwt_read8bitoffsetreg>
 80102de:	f010 0f02 	tst.w	r0, #2
 80102e2:	f040 80af 	bne.w	8010444 <ull_configure+0x404>
 80102e6:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80102ea:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 80102ee:	d1ee      	bne.n	80102ce <ull_configure+0x28e>
 80102f0:	f06f 0001 	mvn.w	r0, #1
 80102f4:	e0e6      	b.n	80104c4 <ull_configure+0x484>
 80102f6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80102f8:	8a13      	ldrh	r3, [r2, #16]
 80102fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80102fe:	8213      	strh	r3, [r2, #16]
 8010300:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010304:	9300      	str	r3, [sp, #0]
 8010306:	f46f 5340 	mvn.w	r3, #12288	; 0x3000
 801030a:	2200      	movs	r2, #0
 801030c:	493c      	ldr	r1, [pc, #240]	; (8010400 <ull_configure+0x3c0>)
 801030e:	4620      	mov	r0, r4
 8010310:	f7ff f87e 	bl	800f410 <dwt_modify32bitoffsetreg>
 8010314:	f240 3306 	movw	r3, #774	; 0x306
 8010318:	2200      	movs	r2, #0
 801031a:	4945      	ldr	r1, [pc, #276]	; (8010430 <ull_configure+0x3f0>)
 801031c:	4620      	mov	r0, r4
 801031e:	f7fe fb71 	bl	800ea04 <dwt_write32bitoffsetreg>
 8010322:	2300      	movs	r3, #0
 8010324:	461a      	mov	r2, r3
 8010326:	4943      	ldr	r1, [pc, #268]	; (8010434 <ull_configure+0x3f4>)
 8010328:	4620      	mov	r0, r4
 801032a:	f7fe fb6b 	bl	800ea04 <dwt_write32bitoffsetreg>
 801032e:	4b42      	ldr	r3, [pc, #264]	; (8010438 <ull_configure+0x3f8>)
 8010330:	2200      	movs	r2, #0
 8010332:	4930      	ldr	r1, [pc, #192]	; (80103f4 <ull_configure+0x3b4>)
 8010334:	4620      	mov	r0, r4
 8010336:	f7fe fb65 	bl	800ea04 <dwt_write32bitoffsetreg>
 801033a:	239d      	movs	r3, #157	; 0x9d
 801033c:	9300      	str	r3, [sp, #0]
 801033e:	4b2e      	ldr	r3, [pc, #184]	; (80103f8 <ull_configure+0x3b8>)
 8010340:	2200      	movs	r2, #0
 8010342:	492e      	ldr	r1, [pc, #184]	; (80103fc <ull_configure+0x3bc>)
 8010344:	4620      	mov	r0, r4
 8010346:	f7ff f863 	bl	800f410 <dwt_modify32bitoffsetreg>
 801034a:	e70b      	b.n	8010164 <ull_configure+0x124>
 801034c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8010350:	9300      	str	r3, [sp, #0]
 8010352:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8010356:	2200      	movs	r2, #0
 8010358:	4929      	ldr	r1, [pc, #164]	; (8010400 <ull_configure+0x3c0>)
 801035a:	4620      	mov	r0, r4
 801035c:	f7ff fd58 	bl	800fe10 <dwt_modify16bitoffsetreg>
 8010360:	e700      	b.n	8010164 <ull_configure+0x124>
 8010362:	78ab      	ldrb	r3, [r5, #2]
 8010364:	9300      	str	r3, [sp, #0]
 8010366:	23ec      	movs	r3, #236	; 0xec
 8010368:	2200      	movs	r2, #0
 801036a:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 801036e:	4620      	mov	r0, r4
 8010370:	f7ff f9be 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 8010374:	e705      	b.n	8010182 <ull_configure+0x142>
 8010376:	2803      	cmp	r0, #3
 8010378:	f47f af6a 	bne.w	8010250 <ull_configure+0x210>
 801037c:	e065      	b.n	801044a <ull_configure+0x40a>
 801037e:	2102      	movs	r1, #2
 8010380:	4620      	mov	r0, r4
 8010382:	f7ff fbe5 	bl	800fb50 <ull_setdwstate>
 8010386:	e763      	b.n	8010250 <ull_configure+0x210>
 8010388:	4b2c      	ldr	r3, [pc, #176]	; (801043c <ull_configure+0x3fc>)
 801038a:	9300      	str	r3, [sp, #0]
 801038c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010390:	2200      	movs	r2, #0
 8010392:	4922      	ldr	r1, [pc, #136]	; (801041c <ull_configure+0x3dc>)
 8010394:	4620      	mov	r0, r4
 8010396:	f7ff f83b 	bl	800f410 <dwt_modify32bitoffsetreg>
 801039a:	f640 733c 	movw	r3, #3900	; 0xf3c
 801039e:	2200      	movs	r2, #0
 80103a0:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 80103a4:	4620      	mov	r0, r4
 80103a6:	f7fe fac2 	bl	800e92e <dwt_write16bitoffsetreg>
 80103aa:	e766      	b.n	801027a <ull_configure+0x23a>
 80103ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80103b0:	9300      	str	r3, [sp, #0]
 80103b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80103b6:	2200      	movs	r2, #0
 80103b8:	4911      	ldr	r1, [pc, #68]	; (8010400 <ull_configure+0x3c0>)
 80103ba:	4620      	mov	r0, r4
 80103bc:	f7ff fd28 	bl	800fe10 <dwt_modify16bitoffsetreg>
 80103c0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80103c2:	8a13      	ldrh	r3, [r2, #16]
 80103c4:	f043 0308 	orr.w	r3, r3, #8
 80103c8:	8213      	strh	r3, [r2, #16]
 80103ca:	e050      	b.n	801046e <ull_configure+0x42e>
 80103cc:	2200      	movs	r2, #0
 80103ce:	9200      	str	r2, [sp, #0]
 80103d0:	23fe      	movs	r3, #254	; 0xfe
 80103d2:	491b      	ldr	r1, [pc, #108]	; (8010440 <ull_configure+0x400>)
 80103d4:	4620      	mov	r0, r4
 80103d6:	f7ff f98b 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 80103da:	e052      	b.n	8010482 <ull_configure+0x442>
 80103dc:	2101      	movs	r1, #1
 80103de:	4620      	mov	r0, r4
 80103e0:	f7ff fda2 	bl	800ff28 <ull_pgf_cal>
 80103e4:	e06b      	b.n	80104be <ull_configure+0x47e>
 80103e6:	bf00      	nop
 80103e8:	00026668 	.word	0x00026668
 80103ec:	fffc4fcf 	.word	0xfffc4fcf
 80103f0:	080160b4 	.word	0x080160b4
 80103f4:	000e0014 	.word	0x000e0014
 80103f8:	bfffff00 	.word	0xbfffff00
 80103fc:	000e0018 	.word	0x000e0018
 8010400:	000b0008 	.word	0x000b0008
 8010404:	af5f35cc 	.word	0xaf5f35cc
 8010408:	af5f584c 	.word	0xaf5f584c
 801040c:	0006000c 	.word	0x0006000c
 8010410:	00010008 	.word	0x00010008
 8010414:	000f0030 	.word	0x000f0030
 8010418:	1c071134 	.word	0x1c071134
 801041c:	0007001c 	.word	0x0007001c
 8010420:	00070050 	.word	0x00070050
 8010424:	00070018 	.word	0x00070018
 8010428:	00090008 	.word	0x00090008
 801042c:	00090004 	.word	0x00090004
 8010430:	000e000c 	.word	0x000e000c
 8010434:	000e0010 	.word	0x000e0010
 8010438:	000c5a0a 	.word	0x000c5a0a
 801043c:	1c010034 	.word	0x1c010034
 8010440:	00030018 	.word	0x00030018
 8010444:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010446:	f883 900f 	strb.w	r9, [r3, #15]
 801044a:	792b      	ldrb	r3, [r5, #4]
 801044c:	3b09      	subs	r3, #9
 801044e:	b2db      	uxtb	r3, r3
 8010450:	2b0f      	cmp	r3, #15
 8010452:	d8bb      	bhi.n	80103cc <ull_configure+0x38c>
 8010454:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010456:	7a1b      	ldrb	r3, [r3, #8]
 8010458:	2b01      	cmp	r3, #1
 801045a:	d0a7      	beq.n	80103ac <ull_configure+0x36c>
 801045c:	4649      	mov	r1, r9
 801045e:	4620      	mov	r0, r4
 8010460:	f7fe fb9c 	bl	800eb9c <ull_configmrxlut>
 8010464:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8010466:	8a13      	ldrh	r3, [r2, #16]
 8010468:	f023 0308 	bic.w	r3, r3, #8
 801046c:	8213      	strh	r3, [r2, #16]
 801046e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8010472:	9300      	str	r3, [sp, #0]
 8010474:	f248 13ff 	movw	r3, #33279	; 0x81ff
 8010478:	2200      	movs	r2, #0
 801047a:	4914      	ldr	r1, [pc, #80]	; (80104cc <ull_configure+0x48c>)
 801047c:	4620      	mov	r0, r4
 801047e:	f7ff fcc7 	bl	800fe10 <dwt_modify16bitoffsetreg>
 8010482:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8010486:	bfcc      	ite	gt
 8010488:	f04f 5300 	movgt.w	r3, #536870912	; 0x20000000
 801048c:	f04f 53a0 	movle.w	r3, #335544320	; 0x14000000
 8010490:	9300      	str	r3, [sp, #0]
 8010492:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8010496:	2200      	movs	r2, #0
 8010498:	490d      	ldr	r1, [pc, #52]	; (80104d0 <ull_configure+0x490>)
 801049a:	4620      	mov	r0, r4
 801049c:	f7fe ffb8 	bl	800f410 <dwt_modify32bitoffsetreg>
 80104a0:	2301      	movs	r3, #1
 80104a2:	9300      	str	r3, [sp, #0]
 80104a4:	23ff      	movs	r3, #255	; 0xff
 80104a6:	2202      	movs	r2, #2
 80104a8:	490a      	ldr	r1, [pc, #40]	; (80104d4 <ull_configure+0x494>)
 80104aa:	4620      	mov	r0, r4
 80104ac:	f7ff f920 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 80104b0:	2200      	movs	r2, #0
 80104b2:	4909      	ldr	r1, [pc, #36]	; (80104d8 <ull_configure+0x498>)
 80104b4:	4620      	mov	r0, r4
 80104b6:	f7fd fdc6 	bl	800e046 <dwt_read32bitoffsetreg>
 80104ba:	2800      	cmp	r0, #0
 80104bc:	d08e      	beq.n	80103dc <ull_configure+0x39c>
 80104be:	4620      	mov	r0, r4
 80104c0:	f7ff f98a 	bl	800f7d8 <ull_adcoffsetscalibration>
 80104c4:	b003      	add	sp, #12
 80104c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104ca:	bf00      	nop
 80104cc:	00030018 	.word	0x00030018
 80104d0:	00060010 	.word	0x00060010
 80104d4:	0004000c 	.word	0x0004000c
 80104d8:	00040014 	.word	0x00040014

080104dc <ull_initialise>:
 80104dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104e0:	b082      	sub	sp, #8
 80104e2:	4605      	mov	r5, r0
 80104e4:	460e      	mov	r6, r1
 80104e6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d05b      	beq.n	80105a4 <ull_initialise+0xc8>
 80104ec:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 80104ee:	2300      	movs	r3, #0
 80104f0:	73a3      	strb	r3, [r4, #14]
 80104f2:	2202      	movs	r2, #2
 80104f4:	8222      	strh	r2, [r4, #16]
 80104f6:	7523      	strb	r3, [r4, #20]
 80104f8:	7563      	strb	r3, [r4, #21]
 80104fa:	73e3      	strb	r3, [r4, #15]
 80104fc:	7263      	strb	r3, [r4, #9]
 80104fe:	72a3      	strb	r3, [r4, #10]
 8010500:	2104      	movs	r1, #4
 8010502:	4628      	mov	r0, r5
 8010504:	f7fe fa5c 	bl	800e9c0 <_dwt_otpread>
 8010508:	4607      	mov	r7, r0
 801050a:	2105      	movs	r1, #5
 801050c:	4628      	mov	r0, r5
 801050e:	f7fe fa57 	bl	800e9c0 <_dwt_otpread>
 8010512:	4680      	mov	r8, r0
 8010514:	210a      	movs	r1, #10
 8010516:	4628      	mov	r0, r5
 8010518:	f7fe fa52 	bl	800e9c0 <_dwt_otpread>
 801051c:	b12f      	cbz	r7, 801052a <ull_initialise+0x4e>
 801051e:	f1b8 0f00 	cmp.w	r8, #0
 8010522:	d002      	beq.n	801052a <ull_initialise+0x4e>
 8010524:	b280      	uxth	r0, r0
 8010526:	2800      	cmp	r0, #0
 8010528:	d141      	bne.n	80105ae <ull_initialise+0xd2>
 801052a:	2120      	movs	r1, #32
 801052c:	4628      	mov	r0, r5
 801052e:	f7fe fa47 	bl	800e9c0 <_dwt_otpread>
 8010532:	f5b0 7f10 	cmp.w	r0, #576	; 0x240
 8010536:	bf0c      	ite	eq
 8010538:	2301      	moveq	r3, #1
 801053a:	2300      	movne	r3, #0
 801053c:	7223      	strb	r3, [r4, #8]
 801053e:	f016 0f10 	tst.w	r6, #16
 8010542:	d143      	bne.n	80105cc <ull_initialise+0xf0>
 8010544:	f016 0f20 	tst.w	r6, #32
 8010548:	d146      	bne.n	80105d8 <ull_initialise+0xfc>
 801054a:	f016 0f40 	tst.w	r6, #64	; 0x40
 801054e:	d149      	bne.n	80105e4 <ull_initialise+0x108>
 8010550:	f016 0f80 	tst.w	r6, #128	; 0x80
 8010554:	d14d      	bne.n	80105f2 <ull_initialise+0x116>
 8010556:	7aa3      	ldrb	r3, [r4, #10]
 8010558:	b90b      	cbnz	r3, 801055e <ull_initialise+0x82>
 801055a:	2385      	movs	r3, #133	; 0x85
 801055c:	72a3      	strb	r3, [r4, #10]
 801055e:	7a63      	ldrb	r3, [r4, #9]
 8010560:	b90b      	cbnz	r3, 8010566 <ull_initialise+0x8a>
 8010562:	2374      	movs	r3, #116	; 0x74
 8010564:	7263      	strb	r3, [r4, #9]
 8010566:	211f      	movs	r1, #31
 8010568:	4628      	mov	r0, r5
 801056a:	f7fe fa29 	bl	800e9c0 <_dwt_otpread>
 801056e:	7320      	strb	r0, [r4, #12]
 8010570:	211e      	movs	r1, #30
 8010572:	4628      	mov	r0, r5
 8010574:	f7fe fa24 	bl	800e9c0 <_dwt_otpread>
 8010578:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
 801057c:	bf12      	itee	ne
 801057e:	7360      	strbne	r0, [r4, #13]
 8010580:	232e      	moveq	r3, #46	; 0x2e
 8010582:	7363      	strbeq	r3, [r4, #13]
 8010584:	7b63      	ldrb	r3, [r4, #13]
 8010586:	2200      	movs	r2, #0
 8010588:	4920      	ldr	r1, [pc, #128]	; (801060c <ull_initialise+0x130>)
 801058a:	4628      	mov	r0, r5
 801058c:	f7fe fc1e 	bl	800edcc <dwt_write8bitoffsetreg>
 8010590:	2135      	movs	r1, #53	; 0x35
 8010592:	4628      	mov	r0, r5
 8010594:	f7fe fa14 	bl	800e9c0 <_dwt_otpread>
 8010598:	4603      	mov	r3, r0
 801059a:	bb80      	cbnz	r0, 80105fe <ull_initialise+0x122>
 801059c:	2000      	movs	r0, #0
 801059e:	b002      	add	sp, #8
 80105a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105a4:	2028      	movs	r0, #40	; 0x28
 80105a6:	f003 fb7f 	bl	8013ca8 <malloc>
 80105aa:	6528      	str	r0, [r5, #80]	; 0x50
 80105ac:	e79e      	b.n	80104ec <ull_initialise+0x10>
 80105ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80105b2:	9300      	str	r3, [sp, #0]
 80105b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80105b8:	2200      	movs	r2, #0
 80105ba:	4915      	ldr	r1, [pc, #84]	; (8010610 <ull_initialise+0x134>)
 80105bc:	4628      	mov	r0, r5
 80105be:	f7ff fc27 	bl	800fe10 <dwt_modify16bitoffsetreg>
 80105c2:	8a23      	ldrh	r3, [r4, #16]
 80105c4:	f043 0314 	orr.w	r3, r3, #20
 80105c8:	8223      	strh	r3, [r4, #16]
 80105ca:	e7ae      	b.n	801052a <ull_initialise+0x4e>
 80105cc:	2106      	movs	r1, #6
 80105ce:	4628      	mov	r0, r5
 80105d0:	f7fe f9f6 	bl	800e9c0 <_dwt_otpread>
 80105d4:	6020      	str	r0, [r4, #0]
 80105d6:	e7b5      	b.n	8010544 <ull_initialise+0x68>
 80105d8:	2107      	movs	r1, #7
 80105da:	4628      	mov	r0, r5
 80105dc:	f7fe f9f0 	bl	800e9c0 <_dwt_otpread>
 80105e0:	6060      	str	r0, [r4, #4]
 80105e2:	e7b2      	b.n	801054a <ull_initialise+0x6e>
 80105e4:	2108      	movs	r1, #8
 80105e6:	4628      	mov	r0, r5
 80105e8:	f7fe f9ea 	bl	800e9c0 <_dwt_otpread>
 80105ec:	0c00      	lsrs	r0, r0, #16
 80105ee:	7260      	strb	r0, [r4, #9]
 80105f0:	e7ae      	b.n	8010550 <ull_initialise+0x74>
 80105f2:	2109      	movs	r1, #9
 80105f4:	4628      	mov	r0, r5
 80105f6:	f7fe f9e3 	bl	800e9c0 <_dwt_otpread>
 80105fa:	72a0      	strb	r0, [r4, #10]
 80105fc:	e7ab      	b.n	8010556 <ull_initialise+0x7a>
 80105fe:	2200      	movs	r2, #0
 8010600:	4904      	ldr	r1, [pc, #16]	; (8010614 <ull_initialise+0x138>)
 8010602:	4628      	mov	r0, r5
 8010604:	f7fe f9fe 	bl	800ea04 <dwt_write32bitoffsetreg>
 8010608:	e7c8      	b.n	801059c <ull_initialise+0xc0>
 801060a:	bf00      	nop
 801060c:	00090014 	.word	0x00090014
 8010610:	000b0008 	.word	0x000b0008
 8010614:	00090004 	.word	0x00090004

08010618 <ull_rxenable>:
 8010618:	b530      	push	{r4, r5, lr}
 801061a:	b083      	sub	sp, #12
 801061c:	4605      	mov	r5, r0
 801061e:	460c      	mov	r4, r1
 8010620:	b171      	cbz	r1, 8010640 <ull_rxenable+0x28>
 8010622:	f021 0302 	bic.w	r3, r1, #2
 8010626:	3b01      	subs	r3, #1
 8010628:	2b0f      	cmp	r3, #15
 801062a:	d862      	bhi.n	80106f2 <ull_rxenable+0xda>
 801062c:	e8df f003 	tbb	[pc, r3]
 8010630:	24616111 	.word	0x24616111
 8010634:	2d616161 	.word	0x2d616161
 8010638:	61616161 	.word	0x61616161
 801063c:	3a616161 	.word	0x3a616161
 8010640:	2102      	movs	r1, #2
 8010642:	9101      	str	r1, [sp, #4]
 8010644:	2200      	movs	r2, #0
 8010646:	9200      	str	r2, [sp, #0]
 8010648:	4613      	mov	r3, r2
 801064a:	f7fd fc74 	bl	800df36 <dwt_xfer3xxx>
 801064e:	4620      	mov	r0, r4
 8010650:	e010      	b.n	8010674 <ull_rxenable+0x5c>
 8010652:	2302      	movs	r3, #2
 8010654:	9301      	str	r3, [sp, #4]
 8010656:	2200      	movs	r2, #0
 8010658:	9200      	str	r2, [sp, #0]
 801065a:	4613      	mov	r3, r2
 801065c:	2104      	movs	r1, #4
 801065e:	f7fd fc6a 	bl	800df36 <dwt_xfer3xxx>
 8010662:	2203      	movs	r2, #3
 8010664:	2144      	movs	r1, #68	; 0x44
 8010666:	4628      	mov	r0, r5
 8010668:	f7fd fd42 	bl	800e0f0 <dwt_read8bitoffsetreg>
 801066c:	f010 0f08 	tst.w	r0, #8
 8010670:	d125      	bne.n	80106be <ull_rxenable+0xa6>
 8010672:	2000      	movs	r0, #0
 8010674:	b003      	add	sp, #12
 8010676:	bd30      	pop	{r4, r5, pc}
 8010678:	2302      	movs	r3, #2
 801067a:	9301      	str	r3, [sp, #4]
 801067c:	2200      	movs	r2, #0
 801067e:	9200      	str	r2, [sp, #0]
 8010680:	4613      	mov	r3, r2
 8010682:	210a      	movs	r1, #10
 8010684:	f7fd fc57 	bl	800df36 <dwt_xfer3xxx>
 8010688:	e7eb      	b.n	8010662 <ull_rxenable+0x4a>
 801068a:	2100      	movs	r1, #0
 801068c:	f7fe f9cf 	bl	800ea2e <_dwt_adjust_delaytime>
 8010690:	2302      	movs	r3, #2
 8010692:	9301      	str	r3, [sp, #4]
 8010694:	2200      	movs	r2, #0
 8010696:	9200      	str	r2, [sp, #0]
 8010698:	4613      	mov	r3, r2
 801069a:	2108      	movs	r1, #8
 801069c:	4628      	mov	r0, r5
 801069e:	f7fd fc4a 	bl	800df36 <dwt_xfer3xxx>
 80106a2:	e7de      	b.n	8010662 <ull_rxenable+0x4a>
 80106a4:	2101      	movs	r1, #1
 80106a6:	f7fe f9c2 	bl	800ea2e <_dwt_adjust_delaytime>
 80106aa:	2302      	movs	r3, #2
 80106ac:	9301      	str	r3, [sp, #4]
 80106ae:	2200      	movs	r2, #0
 80106b0:	9200      	str	r2, [sp, #0]
 80106b2:	4613      	mov	r3, r2
 80106b4:	2106      	movs	r1, #6
 80106b6:	4628      	mov	r0, r5
 80106b8:	f7fd fc3d 	bl	800df36 <dwt_xfer3xxx>
 80106bc:	e7d1      	b.n	8010662 <ull_rxenable+0x4a>
 80106be:	2302      	movs	r3, #2
 80106c0:	9301      	str	r3, [sp, #4]
 80106c2:	2100      	movs	r1, #0
 80106c4:	9100      	str	r1, [sp, #0]
 80106c6:	460b      	mov	r3, r1
 80106c8:	460a      	mov	r2, r1
 80106ca:	4628      	mov	r0, r5
 80106cc:	f7fd fc33 	bl	800df36 <dwt_xfer3xxx>
 80106d0:	f014 0f02 	tst.w	r4, #2
 80106d4:	d002      	beq.n	80106dc <ull_rxenable+0xc4>
 80106d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80106da:	e7cb      	b.n	8010674 <ull_rxenable+0x5c>
 80106dc:	2102      	movs	r1, #2
 80106de:	9101      	str	r1, [sp, #4]
 80106e0:	2200      	movs	r2, #0
 80106e2:	9200      	str	r2, [sp, #0]
 80106e4:	4613      	mov	r3, r2
 80106e6:	4628      	mov	r0, r5
 80106e8:	f7fd fc25 	bl	800df36 <dwt_xfer3xxx>
 80106ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80106f0:	e7c0      	b.n	8010674 <ull_rxenable+0x5c>
 80106f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80106f6:	e7bd      	b.n	8010674 <ull_rxenable+0x5c>

080106f8 <ull_softreset_no_sema_fcmd>:
 80106f8:	b570      	push	{r4, r5, r6, lr}
 80106fa:	b082      	sub	sp, #8
 80106fc:	4606      	mov	r6, r0
 80106fe:	2502      	movs	r5, #2
 8010700:	9501      	str	r5, [sp, #4]
 8010702:	2400      	movs	r4, #0
 8010704:	9400      	str	r4, [sp, #0]
 8010706:	4623      	mov	r3, r4
 8010708:	4622      	mov	r2, r4
 801070a:	2119      	movs	r1, #25
 801070c:	f7fd fc13 	bl	800df36 <dwt_xfer3xxx>
 8010710:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8010712:	739c      	strb	r4, [r3, #14]
 8010714:	821d      	strh	r5, [r3, #16]
 8010716:	751c      	strb	r4, [r3, #20]
 8010718:	755c      	strb	r4, [r3, #21]
 801071a:	73dc      	strb	r4, [r3, #15]
 801071c:	b002      	add	sp, #8
 801071e:	bd70      	pop	{r4, r5, r6, pc}

08010720 <ull_softreset_fcmd>:
 8010720:	b570      	push	{r4, r5, r6, lr}
 8010722:	b082      	sub	sp, #8
 8010724:	4606      	mov	r6, r0
 8010726:	2502      	movs	r5, #2
 8010728:	9501      	str	r5, [sp, #4]
 801072a:	2400      	movs	r4, #0
 801072c:	9400      	str	r4, [sp, #0]
 801072e:	4623      	mov	r3, r4
 8010730:	4622      	mov	r2, r4
 8010732:	2118      	movs	r1, #24
 8010734:	f7fd fbff 	bl	800df36 <dwt_xfer3xxx>
 8010738:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801073a:	739c      	strb	r4, [r3, #14]
 801073c:	821d      	strh	r5, [r3, #16]
 801073e:	751c      	strb	r4, [r3, #20]
 8010740:	755c      	strb	r4, [r3, #21]
 8010742:	73dc      	strb	r4, [r3, #15]
 8010744:	b002      	add	sp, #8
 8010746:	bd70      	pop	{r4, r5, r6, pc}

08010748 <dwt_ioctl>:
 8010748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801074c:	b08d      	sub	sp, #52	; 0x34
 801074e:	4606      	mov	r6, r0
 8010750:	4615      	mov	r5, r2
 8010752:	461c      	mov	r4, r3
 8010754:	299c      	cmp	r1, #156	; 0x9c
 8010756:	f200 809f 	bhi.w	8010898 <dwt_ioctl+0x150>
 801075a:	e8df f011 	tbh	[pc, r1, lsl #1]
 801075e:	09b9      	.short	0x09b9
 8010760:	00a109c4 	.word	0x00a109c4
 8010764:	00c100a6 	.word	0x00c100a6
 8010768:	019d0151 	.word	0x019d0151
 801076c:	015c0176 	.word	0x015c0176
 8010770:	01b301ae 	.word	0x01b301ae
 8010774:	01c501bc 	.word	0x01c501bc
 8010778:	01d701ce 	.word	0x01d701ce
 801077c:	01e501e0 	.word	0x01e501e0
 8010780:	027201ee 	.word	0x027201ee
 8010784:	027e0278 	.word	0x027e0278
 8010788:	028f0289 	.word	0x028f0289
 801078c:	029a0295 	.word	0x029a0295
 8010790:	02a502a0 	.word	0x02a502a0
 8010794:	02b702ae 	.word	0x02b702ae
 8010798:	02c902c0 	.word	0x02c902c0
 801079c:	02f90304 	.word	0x02f90304
 80107a0:	02d202ee 	.word	0x02d202ee
 80107a4:	031e02e0 	.word	0x031e02e0
 80107a8:	021a01f8 	.word	0x021a01f8
 80107ac:	02420239 	.word	0x02420239
 80107b0:	08ba0258 	.word	0x08ba0258
 80107b4:	031508bf 	.word	0x031508bf
 80107b8:	032c0327 	.word	0x032c0327
 80107bc:	033c0336 	.word	0x033c0336
 80107c0:	03520347 	.word	0x03520347
 80107c4:	0386035b 	.word	0x0386035b
 80107c8:	03a9039d 	.word	0x03a9039d
 80107cc:	03b5030a 	.word	0x03b5030a
 80107d0:	03d203bf 	.word	0x03d203bf
 80107d4:	040b03f9 	.word	0x040b03f9
 80107d8:	0457044d 	.word	0x0457044d
 80107dc:	048c047d 	.word	0x048c047d
 80107e0:	049504a7 	.word	0x049504a7
 80107e4:	04f704b1 	.word	0x04f704b1
 80107e8:	052f050f 	.word	0x052f050f
 80107ec:	05580544 	.word	0x05580544
 80107f0:	057d0561 	.word	0x057d0561
 80107f4:	0692056a 	.word	0x0692056a
 80107f8:	071106c1 	.word	0x071106c1
 80107fc:	07220717 	.word	0x07220717
 8010800:	075b073b 	.word	0x075b073b
 8010804:	078f0765 	.word	0x078f0765
 8010808:	07c607bd 	.word	0x07c607bd
 801080c:	07d507cc 	.word	0x07d507cc
 8010810:	07ef07e2 	.word	0x07ef07e2
 8010814:	080207f9 	.word	0x080207f9
 8010818:	0816080b 	.word	0x0816080b
 801081c:	08270821 	.word	0x08270821
 8010820:	0855084a 	.word	0x0855084a
 8010824:	086b0860 	.word	0x086b0860
 8010828:	0898088d 	.word	0x0898088d
 801082c:	08c508b1 	.word	0x08c508b1
 8010830:	0959094f 	.word	0x0959094f
 8010834:	09cc0964 	.word	0x09cc0964
 8010838:	09ae096e 	.word	0x09ae096e
 801083c:	090306b3 	.word	0x090306b3
 8010840:	0a3a0924 	.word	0x0a3a0924
 8010844:	09d90a2f 	.word	0x09d90a2f
 8010848:	09ef09e4 	.word	0x09ef09e4
 801084c:	0a0509fa 	.word	0x0a0509fa
 8010850:	0a1b0a10 	.word	0x0a1b0a10
 8010854:	0c320a24 	.word	0x0c320a24
 8010858:	0ca30c69 	.word	0x0ca30c69
 801085c:	0e2d0cc5 	.word	0x0e2d0cc5
 8010860:	0a4a0e41 	.word	0x0a4a0e41
 8010864:	0b890b57 	.word	0x0b890b57
 8010868:	0b970b93 	.word	0x0b970b93
 801086c:	0ba50b9b 	.word	0x0ba50b9b
 8010870:	0bc10bb7 	.word	0x0bc10bb7
 8010874:	0be80bd4 	.word	0x0be80bd4
 8010878:	0cdb0c22 	.word	0x0cdb0c22
 801087c:	0cfd0ce5 	.word	0x0cfd0ce5
 8010880:	0d2d0d18 	.word	0x0d2d0d18
 8010884:	0d890d4d 	.word	0x0d890d4d
 8010888:	0db70da1 	.word	0x0db70da1
 801088c:	0efc0dc7 	.word	0x0efc0dc7
 8010890:	0dec0df6 	.word	0x0dec0df6
 8010894:	0e000e08 	.word	0x0e000e08
 8010898:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801089c:	f001 be5c 	b.w	8012558 <dwt_ioctl+0x1e10>
 80108a0:	f7fd fb28 	bl	800def4 <ull_wakeup_ic>
 80108a4:	2500      	movs	r5, #0
 80108a6:	f001 be57 	b.w	8012558 <dwt_ioctl+0x1e10>
 80108aa:	2202      	movs	r2, #2
 80108ac:	49c0      	ldr	r1, [pc, #768]	; (8010bb0 <dwt_ioctl+0x468>)
 80108ae:	f7fd fc1f 	bl	800e0f0 <dwt_read8bitoffsetreg>
 80108b2:	2803      	cmp	r0, #3
 80108b4:	d802      	bhi.n	80108bc <dwt_ioctl+0x174>
 80108b6:	2500      	movs	r5, #0
 80108b8:	f001 be4e 	b.w	8012558 <dwt_ioctl+0x1e10>
 80108bc:	f7f0 fe24 	bl	8001508 <decamutexon>
 80108c0:	4604      	mov	r4, r0
 80108c2:	2302      	movs	r3, #2
 80108c4:	9301      	str	r3, [sp, #4]
 80108c6:	2500      	movs	r5, #0
 80108c8:	9500      	str	r5, [sp, #0]
 80108ca:	462b      	mov	r3, r5
 80108cc:	462a      	mov	r2, r5
 80108ce:	4629      	mov	r1, r5
 80108d0:	4630      	mov	r0, r6
 80108d2:	f7fd fb30 	bl	800df36 <dwt_xfer3xxx>
 80108d6:	4620      	mov	r0, r4
 80108d8:	f7f0 fe27 	bl	800152a <decamutexoff>
 80108dc:	f001 be3c 	b.w	8012558 <dwt_ioctl+0x1e10>
 80108e0:	2c00      	cmp	r4, #0
 80108e2:	f001 863d 	beq.w	8012560 <dwt_ioctl+0x1e18>
 80108e6:	7824      	ldrb	r4, [r4, #0]
 80108e8:	f014 0f1d 	tst.w	r4, #29
 80108ec:	d063      	beq.n	80109b6 <dwt_ioctl+0x26e>
 80108ee:	f014 0f01 	tst.w	r4, #1
 80108f2:	d025      	beq.n	8010940 <dwt_ioctl+0x1f8>
 80108f4:	f014 0f02 	tst.w	r4, #2
 80108f8:	f04f 0302 	mov.w	r3, #2
 80108fc:	9301      	str	r3, [sp, #4]
 80108fe:	f04f 0200 	mov.w	r2, #0
 8010902:	9200      	str	r2, [sp, #0]
 8010904:	4613      	mov	r3, r2
 8010906:	bf14      	ite	ne
 8010908:	210d      	movne	r1, #13
 801090a:	2103      	moveq	r1, #3
 801090c:	f7fd fb13 	bl	800df36 <dwt_xfer3xxx>
 8010910:	2203      	movs	r2, #3
 8010912:	2144      	movs	r1, #68	; 0x44
 8010914:	4630      	mov	r0, r6
 8010916:	f7fd fbeb 	bl	800e0f0 <dwt_read8bitoffsetreg>
 801091a:	f010 0f08 	tst.w	r0, #8
 801091e:	bf08      	it	eq
 8010920:	2500      	moveq	r5, #0
 8010922:	f001 8619 	beq.w	8012558 <dwt_ioctl+0x1e10>
 8010926:	2302      	movs	r3, #2
 8010928:	9301      	str	r3, [sp, #4]
 801092a:	2100      	movs	r1, #0
 801092c:	9100      	str	r1, [sp, #0]
 801092e:	460b      	mov	r3, r1
 8010930:	460a      	mov	r2, r1
 8010932:	4630      	mov	r0, r6
 8010934:	f7fd faff 	bl	800df36 <dwt_xfer3xxx>
 8010938:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801093c:	f001 be0c 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010940:	f014 0f08 	tst.w	r4, #8
 8010944:	d111      	bne.n	801096a <dwt_ioctl+0x222>
 8010946:	f014 0f10 	tst.w	r4, #16
 801094a:	d121      	bne.n	8010990 <dwt_ioctl+0x248>
 801094c:	f014 0f02 	tst.w	r4, #2
 8010950:	f04f 0302 	mov.w	r3, #2
 8010954:	9301      	str	r3, [sp, #4]
 8010956:	f04f 0200 	mov.w	r2, #0
 801095a:	9200      	str	r2, [sp, #0]
 801095c:	4613      	mov	r3, r2
 801095e:	bf14      	ite	ne
 8010960:	2110      	movne	r1, #16
 8010962:	2109      	moveq	r1, #9
 8010964:	f7fd fae7 	bl	800df36 <dwt_xfer3xxx>
 8010968:	e7d2      	b.n	8010910 <dwt_ioctl+0x1c8>
 801096a:	2100      	movs	r1, #0
 801096c:	f7fe f85f 	bl	800ea2e <_dwt_adjust_delaytime>
 8010970:	f014 0f02 	tst.w	r4, #2
 8010974:	f04f 0302 	mov.w	r3, #2
 8010978:	9301      	str	r3, [sp, #4]
 801097a:	f04f 0200 	mov.w	r2, #0
 801097e:	9200      	str	r2, [sp, #0]
 8010980:	4613      	mov	r3, r2
 8010982:	bf14      	ite	ne
 8010984:	210f      	movne	r1, #15
 8010986:	2107      	moveq	r1, #7
 8010988:	4630      	mov	r0, r6
 801098a:	f7fd fad4 	bl	800df36 <dwt_xfer3xxx>
 801098e:	e7bf      	b.n	8010910 <dwt_ioctl+0x1c8>
 8010990:	2101      	movs	r1, #1
 8010992:	f7fe f84c 	bl	800ea2e <_dwt_adjust_delaytime>
 8010996:	f014 0f02 	tst.w	r4, #2
 801099a:	f04f 0302 	mov.w	r3, #2
 801099e:	9301      	str	r3, [sp, #4]
 80109a0:	f04f 0200 	mov.w	r2, #0
 80109a4:	9200      	str	r2, [sp, #0]
 80109a6:	4613      	mov	r3, r2
 80109a8:	bf14      	ite	ne
 80109aa:	210e      	movne	r1, #14
 80109ac:	2105      	moveq	r1, #5
 80109ae:	4630      	mov	r0, r6
 80109b0:	f7fd fac1 	bl	800df36 <dwt_xfer3xxx>
 80109b4:	e7ac      	b.n	8010910 <dwt_ioctl+0x1c8>
 80109b6:	f014 0f20 	tst.w	r4, #32
 80109ba:	d010      	beq.n	80109de <dwt_ioctl+0x296>
 80109bc:	f014 0f02 	tst.w	r4, #2
 80109c0:	f04f 0302 	mov.w	r3, #2
 80109c4:	9301      	str	r3, [sp, #4]
 80109c6:	f04f 0500 	mov.w	r5, #0
 80109ca:	9500      	str	r5, [sp, #0]
 80109cc:	462b      	mov	r3, r5
 80109ce:	462a      	mov	r2, r5
 80109d0:	bf14      	ite	ne
 80109d2:	2111      	movne	r1, #17
 80109d4:	210b      	moveq	r1, #11
 80109d6:	f7fd faae 	bl	800df36 <dwt_xfer3xxx>
 80109da:	f001 bdbd 	b.w	8012558 <dwt_ioctl+0x1e10>
 80109de:	f014 0f02 	tst.w	r4, #2
 80109e2:	f04f 0302 	mov.w	r3, #2
 80109e6:	9301      	str	r3, [sp, #4]
 80109e8:	f04f 0500 	mov.w	r5, #0
 80109ec:	9500      	str	r5, [sp, #0]
 80109ee:	462b      	mov	r3, r5
 80109f0:	462a      	mov	r2, r5
 80109f2:	bf14      	ite	ne
 80109f4:	210c      	movne	r1, #12
 80109f6:	2101      	moveq	r1, #1
 80109f8:	f7fd fa9d 	bl	800df36 <dwt_xfer3xxx>
 80109fc:	f001 bdac 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010a00:	2c00      	cmp	r4, #0
 8010a02:	f001 85af 	beq.w	8012564 <dwt_ioctl+0x1e1c>
 8010a06:	6823      	ldr	r3, [r4, #0]
 8010a08:	2200      	movs	r2, #0
 8010a0a:	2128      	movs	r1, #40	; 0x28
 8010a0c:	f7fd fffa 	bl	800ea04 <dwt_write32bitoffsetreg>
 8010a10:	2500      	movs	r5, #0
 8010a12:	f001 bda1 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010a16:	6823      	ldr	r3, [r4, #0]
 8010a18:	2200      	movs	r2, #0
 8010a1a:	4966      	ldr	r1, [pc, #408]	; (8010bb4 <dwt_ioctl+0x46c>)
 8010a1c:	f7fd fff2 	bl	800ea04 <dwt_write32bitoffsetreg>
 8010a20:	6863      	ldr	r3, [r4, #4]
 8010a22:	2200      	movs	r2, #0
 8010a24:	4964      	ldr	r1, [pc, #400]	; (8010bb8 <dwt_ioctl+0x470>)
 8010a26:	4630      	mov	r0, r6
 8010a28:	f7fd ffec 	bl	800ea04 <dwt_write32bitoffsetreg>
 8010a2c:	68a3      	ldr	r3, [r4, #8]
 8010a2e:	2200      	movs	r2, #0
 8010a30:	4962      	ldr	r1, [pc, #392]	; (8010bbc <dwt_ioctl+0x474>)
 8010a32:	4630      	mov	r0, r6
 8010a34:	f7fd ffe6 	bl	800ea04 <dwt_write32bitoffsetreg>
 8010a38:	68e3      	ldr	r3, [r4, #12]
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	4960      	ldr	r1, [pc, #384]	; (8010bc0 <dwt_ioctl+0x478>)
 8010a3e:	4630      	mov	r0, r6
 8010a40:	f7fd ffe0 	bl	800ea04 <dwt_write32bitoffsetreg>
 8010a44:	2500      	movs	r5, #0
 8010a46:	f001 bd87 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010a4a:	2c00      	cmp	r4, #0
 8010a4c:	f001 858c 	beq.w	8012568 <dwt_ioctl+0x1e20>
 8010a50:	8823      	ldrh	r3, [r4, #0]
 8010a52:	6865      	ldr	r5, [r4, #4]
 8010a54:	2d03      	cmp	r5, #3
 8010a56:	f201 8589 	bhi.w	801256c <dwt_ioctl+0x1e24>
 8010a5a:	e8df f005 	tbb	[pc, r5]
 8010a5e:	0802      	.short	0x0802
 8010a60:	160f      	.short	0x160f
 8010a62:	2200      	movs	r2, #0
 8010a64:	4957      	ldr	r1, [pc, #348]	; (8010bc4 <dwt_ioctl+0x47c>)
 8010a66:	f7fd ff62 	bl	800e92e <dwt_write16bitoffsetreg>
 8010a6a:	f001 bd75 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010a6e:	2202      	movs	r2, #2
 8010a70:	4954      	ldr	r1, [pc, #336]	; (8010bc4 <dwt_ioctl+0x47c>)
 8010a72:	f7fd ff5c 	bl	800e92e <dwt_write16bitoffsetreg>
 8010a76:	2500      	movs	r5, #0
 8010a78:	f001 bd6e 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	4952      	ldr	r1, [pc, #328]	; (8010bc8 <dwt_ioctl+0x480>)
 8010a80:	f7fd ff55 	bl	800e92e <dwt_write16bitoffsetreg>
 8010a84:	2500      	movs	r5, #0
 8010a86:	f001 bd67 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010a8a:	2202      	movs	r2, #2
 8010a8c:	494e      	ldr	r1, [pc, #312]	; (8010bc8 <dwt_ioctl+0x480>)
 8010a8e:	f7fd ff4e 	bl	800e92e <dwt_write16bitoffsetreg>
 8010a92:	2500      	movs	r5, #0
 8010a94:	f001 bd60 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010a98:	2c00      	cmp	r4, #0
 8010a9a:	f001 8569 	beq.w	8012570 <dwt_ioctl+0x1e28>
 8010a9e:	7823      	ldrb	r3, [r4, #0]
 8010aa0:	005b      	lsls	r3, r3, #1
 8010aa2:	f003 0306 	and.w	r3, r3, #6
 8010aa6:	9300      	str	r3, [sp, #0]
 8010aa8:	f06f 0306 	mvn.w	r3, #6
 8010aac:	2200      	movs	r2, #0
 8010aae:	4947      	ldr	r1, [pc, #284]	; (8010bcc <dwt_ioctl+0x484>)
 8010ab0:	f7fe fcae 	bl	800f410 <dwt_modify32bitoffsetreg>
 8010ab4:	2500      	movs	r5, #0
 8010ab6:	f001 bd4f 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010aba:	f7fe fccd 	bl	800f458 <ull_enablegpioclocks>
 8010abe:	2500      	movs	r5, #0
 8010ac0:	f001 bd4a 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010ac4:	2c00      	cmp	r4, #0
 8010ac6:	f001 8555 	beq.w	8012574 <dwt_ioctl+0x1e2c>
 8010aca:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010acc:	7b1b      	ldrb	r3, [r3, #12]
 8010ace:	7023      	strb	r3, [r4, #0]
 8010ad0:	2500      	movs	r5, #0
 8010ad2:	f001 bd41 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010ad6:	2c00      	cmp	r4, #0
 8010ad8:	f001 854e 	beq.w	8012578 <dwt_ioctl+0x1e30>
 8010adc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010ade:	7a5b      	ldrb	r3, [r3, #9]
 8010ae0:	7023      	strb	r3, [r4, #0]
 8010ae2:	2500      	movs	r5, #0
 8010ae4:	f001 bd38 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010ae8:	2c00      	cmp	r4, #0
 8010aea:	f001 8547 	beq.w	801257c <dwt_ioctl+0x1e34>
 8010aee:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010af0:	7a9b      	ldrb	r3, [r3, #10]
 8010af2:	7023      	strb	r3, [r4, #0]
 8010af4:	2500      	movs	r5, #0
 8010af6:	f001 bd2f 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010afa:	2c00      	cmp	r4, #0
 8010afc:	f001 8540 	beq.w	8012580 <dwt_ioctl+0x1e38>
 8010b00:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	6023      	str	r3, [r4, #0]
 8010b06:	2500      	movs	r5, #0
 8010b08:	f001 bd26 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010b0c:	2c00      	cmp	r4, #0
 8010b0e:	f001 8539 	beq.w	8012584 <dwt_ioctl+0x1e3c>
 8010b12:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010b14:	685b      	ldr	r3, [r3, #4]
 8010b16:	6023      	str	r3, [r4, #0]
 8010b18:	2500      	movs	r5, #0
 8010b1a:	f001 bd1d 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010b1e:	f7fe fae1 	bl	800f0e4 <ull_signal_rx_buff_free>
 8010b22:	2500      	movs	r5, #0
 8010b24:	f001 bd18 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010b28:	2c00      	cmp	r4, #0
 8010b2a:	f001 852d 	beq.w	8012588 <dwt_ioctl+0x1e40>
 8010b2e:	6821      	ldr	r1, [r4, #0]
 8010b30:	f7fd ffa3 	bl	800ea7a <ull_setrxaftertxdelay>
 8010b34:	2500      	movs	r5, #0
 8010b36:	f001 bd0f 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010b3a:	2c00      	cmp	r4, #0
 8010b3c:	f001 8526 	beq.w	801258c <dwt_ioctl+0x1e44>
 8010b40:	6862      	ldr	r2, [r4, #4]
 8010b42:	7821      	ldrb	r1, [r4, #0]
 8010b44:	f7fe fde8 	bl	800f718 <ull_enablespicrccheck>
 8010b48:	2500      	movs	r5, #0
 8010b4a:	f001 bd05 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010b4e:	2c00      	cmp	r4, #0
 8010b50:	f001 851e 	beq.w	8012590 <dwt_ioctl+0x1e48>
 8010b54:	6865      	ldr	r5, [r4, #4]
 8010b56:	7823      	ldrb	r3, [r4, #0]
 8010b58:	2203      	movs	r2, #3
 8010b5a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8010b5e:	f7fe f935 	bl	800edcc <dwt_write8bitoffsetreg>
 8010b62:	b94d      	cbnz	r5, 8010b78 <dwt_ioctl+0x430>
 8010b64:	2200      	movs	r2, #0
 8010b66:	9200      	str	r2, [sp, #0]
 8010b68:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8010b6c:	2110      	movs	r1, #16
 8010b6e:	4630      	mov	r0, r6
 8010b70:	f7ff f94e 	bl	800fe10 <dwt_modify16bitoffsetreg>
 8010b74:	f001 bcf0 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010b78:	f44f 2381 	mov.w	r3, #264192	; 0x40800
 8010b7c:	9300      	str	r3, [sp, #0]
 8010b7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010b82:	2200      	movs	r2, #0
 8010b84:	2110      	movs	r1, #16
 8010b86:	4630      	mov	r0, r6
 8010b88:	f7fe fc42 	bl	800f410 <dwt_modify32bitoffsetreg>
 8010b8c:	2500      	movs	r5, #0
 8010b8e:	f001 bce3 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010b92:	2200      	movs	r2, #0
 8010b94:	4611      	mov	r1, r2
 8010b96:	f7fd fa56 	bl	800e046 <dwt_read32bitoffsetreg>
 8010b9a:	68b2      	ldr	r2, [r6, #8]
 8010b9c:	6813      	ldr	r3, [r2, #0]
 8010b9e:	4043      	eors	r3, r0
 8010ba0:	6852      	ldr	r2, [r2, #4]
 8010ba2:	4213      	tst	r3, r2
 8010ba4:	bf14      	ite	ne
 8010ba6:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8010baa:	2500      	moveq	r5, #0
 8010bac:	f001 bcd4 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010bb0:	000f0030 	.word	0x000f0030
 8010bb4:	00010054 	.word	0x00010054
 8010bb8:	00010058 	.word	0x00010058
 8010bbc:	0001005c 	.word	0x0001005c
 8010bc0:	00010060 	.word	0x00010060
 8010bc4:	0001000c 	.word	0x0001000c
 8010bc8:	00010010 	.word	0x00010010
 8010bcc:	00010008 	.word	0x00010008
 8010bd0:	2c00      	cmp	r4, #0
 8010bd2:	f001 84df 	beq.w	8012594 <dwt_ioctl+0x1e4c>
 8010bd6:	7821      	ldrb	r1, [r4, #0]
 8010bd8:	f7fe fdba 	bl	800f750 <ull_configciadiag>
 8010bdc:	2500      	movs	r5, #0
 8010bde:	f001 bcbb 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010be2:	b942      	cbnz	r2, 8010bf6 <dwt_ioctl+0x4ae>
 8010be4:	2200      	movs	r2, #0
 8010be6:	9200      	str	r2, [sp, #0]
 8010be8:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8010bec:	49d2      	ldr	r1, [pc, #840]	; (8010f38 <dwt_ioctl+0x7f0>)
 8010bee:	f7ff f90f 	bl	800fe10 <dwt_modify16bitoffsetreg>
 8010bf2:	f001 bcb1 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010bf6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010bfa:	9300      	str	r3, [sp, #0]
 8010bfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010c00:	2200      	movs	r2, #0
 8010c02:	49cd      	ldr	r1, [pc, #820]	; (8010f38 <dwt_ioctl+0x7f0>)
 8010c04:	f7ff f904 	bl	800fe10 <dwt_modify16bitoffsetreg>
 8010c08:	2500      	movs	r5, #0
 8010c0a:	f001 bca5 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010c0e:	f002 0201 	and.w	r2, r2, #1
 8010c12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010c16:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8010c1a:	2a00      	cmp	r2, #0
 8010c1c:	bf08      	it	eq
 8010c1e:	460b      	moveq	r3, r1
 8010c20:	02d2      	lsls	r2, r2, #11
 8010c22:	f015 0f02 	tst.w	r5, #2
 8010c26:	bf12      	itee	ne
 8010c28:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8010c2c:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010c30:	b29b      	uxtheq	r3, r3
 8010c32:	9200      	str	r2, [sp, #0]
 8010c34:	2200      	movs	r2, #0
 8010c36:	49c0      	ldr	r1, [pc, #768]	; (8010f38 <dwt_ioctl+0x7f0>)
 8010c38:	f7ff f8ea 	bl	800fe10 <dwt_modify16bitoffsetreg>
 8010c3c:	2500      	movs	r5, #0
 8010c3e:	f001 bc8b 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010c42:	4611      	mov	r1, r2
 8010c44:	f7fd ff2e 	bl	800eaa4 <ull_setfinegraintxseq>
 8010c48:	2500      	movs	r5, #0
 8010c4a:	f001 bc85 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010c4e:	4611      	mov	r1, r2
 8010c50:	f7fd ff3c 	bl	800eacc <ull_setlnapamode>
 8010c54:	2500      	movs	r5, #0
 8010c56:	f001 bc7f 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010c5a:	2c00      	cmp	r4, #0
 8010c5c:	f001 849c 	beq.w	8012598 <dwt_ioctl+0x1e50>
 8010c60:	2200      	movs	r2, #0
 8010c62:	49b6      	ldr	r1, [pc, #728]	; (8010f3c <dwt_ioctl+0x7f4>)
 8010c64:	f7fd fa44 	bl	800e0f0 <dwt_read8bitoffsetreg>
 8010c68:	7020      	strb	r0, [r4, #0]
 8010c6a:	2500      	movs	r5, #0
 8010c6c:	f001 bc74 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010c70:	4621      	mov	r1, r4
 8010c72:	f7fd ff4b 	bl	800eb0c <ull_configurestskey>
 8010c76:	2500      	movs	r5, #0
 8010c78:	f001 bc6e 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010c7c:	4621      	mov	r1, r4
 8010c7e:	f7fd ff69 	bl	800eb54 <ull_configurestsiv>
 8010c82:	2500      	movs	r5, #0
 8010c84:	f001 bc68 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010c88:	f7fe fd98 	bl	800f7bc <ull_configurestsloadiv>
 8010c8c:	2500      	movs	r5, #0
 8010c8e:	f001 bc63 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010c92:	4611      	mov	r1, r2
 8010c94:	f7fd ff82 	bl	800eb9c <ull_configmrxlut>
 8010c98:	2500      	movs	r5, #0
 8010c9a:	f001 bc5d 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010c9e:	f7fe feb3 	bl	800fa08 <ull_restoreconfig>
 8010ca2:	2500      	movs	r5, #0
 8010ca4:	f001 bc58 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010ca8:	2c00      	cmp	r4, #0
 8010caa:	f001 8477 	beq.w	801259c <dwt_ioctl+0x1e54>
 8010cae:	7821      	ldrb	r1, [r4, #0]
 8010cb0:	f7ff f8c8 	bl	800fe44 <ull_configurestsmode>
 8010cb4:	2500      	movs	r5, #0
 8010cb6:	f001 bc4f 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010cba:	2c00      	cmp	r4, #0
 8010cbc:	f001 8470 	beq.w	80125a0 <dwt_ioctl+0x1e58>
 8010cc0:	8821      	ldrh	r1, [r4, #0]
 8010cc2:	f7fd fe44 	bl	800e94e <ull_setrxantennadelay>
 8010cc6:	2500      	movs	r5, #0
 8010cc8:	f001 bc46 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010ccc:	2c00      	cmp	r4, #0
 8010cce:	f001 8469 	beq.w	80125a4 <dwt_ioctl+0x1e5c>
 8010cd2:	f7fd f9e0 	bl	800e096 <ull_getrxantennadelay>
 8010cd6:	8020      	strh	r0, [r4, #0]
 8010cd8:	2500      	movs	r5, #0
 8010cda:	f001 bc3d 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010cde:	2c00      	cmp	r4, #0
 8010ce0:	f001 8462 	beq.w	80125a8 <dwt_ioctl+0x1e60>
 8010ce4:	8821      	ldrh	r1, [r4, #0]
 8010ce6:	f7fd fe3a 	bl	800e95e <ull_settxantennadelay>
 8010cea:	2500      	movs	r5, #0
 8010cec:	f001 bc34 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010cf0:	2c00      	cmp	r4, #0
 8010cf2:	f001 845b 	beq.w	80125ac <dwt_ioctl+0x1e64>
 8010cf6:	f7fd f9d5 	bl	800e0a4 <ull_gettxantennadelay>
 8010cfa:	8020      	strh	r0, [r4, #0]
 8010cfc:	2500      	movs	r5, #0
 8010cfe:	f001 bc2b 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010d02:	2c00      	cmp	r4, #0
 8010d04:	f001 8454 	beq.w	80125b0 <dwt_ioctl+0x1e68>
 8010d08:	88a3      	ldrh	r3, [r4, #4]
 8010d0a:	88e2      	ldrh	r2, [r4, #6]
 8010d0c:	6821      	ldr	r1, [r4, #0]
 8010d0e:	9100      	str	r1, [sp, #0]
 8010d10:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 8010d14:	f7fd fe00 	bl	800e918 <dwt_writetodevice>
 8010d18:	2500      	movs	r5, #0
 8010d1a:	f001 bc1d 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010d1e:	2c00      	cmp	r4, #0
 8010d20:	f001 8448 	beq.w	80125b4 <dwt_ioctl+0x1e6c>
 8010d24:	88a3      	ldrh	r3, [r4, #4]
 8010d26:	88e2      	ldrh	r2, [r4, #6]
 8010d28:	6821      	ldr	r1, [r4, #0]
 8010d2a:	9100      	str	r1, [sp, #0]
 8010d2c:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 8010d30:	f7fd f97f 	bl	800e032 <dwt_readfromdevice>
 8010d34:	2500      	movs	r5, #0
 8010d36:	f001 bc0f 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010d3a:	2c00      	cmp	r4, #0
 8010d3c:	f001 843c 	beq.w	80125b8 <dwt_ioctl+0x1e70>
 8010d40:	88e3      	ldrh	r3, [r4, #6]
 8010d42:	88a2      	ldrh	r2, [r4, #4]
 8010d44:	6821      	ldr	r1, [r4, #0]
 8010d46:	f7fe f80b 	bl	800ed60 <ull_readrxdata>
 8010d4a:	2500      	movs	r5, #0
 8010d4c:	f001 bc04 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010d50:	2c00      	cmp	r4, #0
 8010d52:	f001 8433 	beq.w	80125bc <dwt_ioctl+0x1e74>
 8010d56:	88e3      	ldrh	r3, [r4, #6]
 8010d58:	6822      	ldr	r2, [r4, #0]
 8010d5a:	88a1      	ldrh	r1, [r4, #4]
 8010d5c:	f7fe f990 	bl	800f080 <ull_writetxdata>
 8010d60:	2500      	movs	r5, #0
 8010d62:	f001 bbf9 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010d66:	4611      	mov	r1, r2
 8010d68:	f7ff fc56 	bl	8010618 <ull_rxenable>
 8010d6c:	2500      	movs	r5, #0
 8010d6e:	f001 bbf3 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010d72:	2c00      	cmp	r4, #0
 8010d74:	f001 8424 	beq.w	80125c0 <dwt_ioctl+0x1e78>
 8010d78:	7923      	ldrb	r3, [r4, #4]
 8010d7a:	8862      	ldrh	r2, [r4, #2]
 8010d7c:	8821      	ldrh	r1, [r4, #0]
 8010d7e:	f7fe fc97 	bl	800f6b0 <ull_writetxfctrl>
 8010d82:	2500      	movs	r5, #0
 8010d84:	f001 bbe8 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010d88:	2c00      	cmp	r4, #0
 8010d8a:	f001 841b 	beq.w	80125c4 <dwt_ioctl+0x1e7c>
 8010d8e:	f7fd f98f 	bl	800e0b0 <ull_readclockoffset>
 8010d92:	8020      	strh	r0, [r4, #0]
 8010d94:	2500      	movs	r5, #0
 8010d96:	f001 bbdf 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010d9a:	2c00      	cmp	r4, #0
 8010d9c:	f001 8414 	beq.w	80125c8 <dwt_ioctl+0x1e80>
 8010da0:	f7fd f9b4 	bl	800e10c <ull_readcarrierintegrator>
 8010da4:	6020      	str	r0, [r4, #0]
 8010da6:	2500      	movs	r5, #0
 8010da8:	f001 bbd6 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010dac:	f7fe f866 	bl	800ee7c <ull_clearaonconfig>
 8010db0:	2500      	movs	r5, #0
 8010db2:	f001 bbd1 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010db6:	2c00      	cmp	r4, #0
 8010db8:	f001 8408 	beq.w	80125cc <dwt_ioctl+0x1e84>
 8010dbc:	8861      	ldrh	r1, [r4, #2]
 8010dbe:	f7fe fe53 	bl	800fa68 <ull_calcbandwidthadj>
 8010dc2:	7020      	strb	r0, [r4, #0]
 8010dc4:	2500      	movs	r5, #0
 8010dc6:	f001 bbc7 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010dca:	4621      	mov	r1, r4
 8010dcc:	f7fd f9be 	bl	800e14c <ull_readdiagnostics>
 8010dd0:	2500      	movs	r5, #0
 8010dd2:	f001 bbc1 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010dd6:	2c00      	cmp	r4, #0
 8010dd8:	f001 83fa 	beq.w	80125d0 <dwt_ioctl+0x1e88>
 8010ddc:	2201      	movs	r2, #1
 8010dde:	2170      	movs	r1, #112	; 0x70
 8010de0:	f7fd f931 	bl	800e046 <dwt_read32bitoffsetreg>
 8010de4:	6020      	str	r0, [r4, #0]
 8010de6:	2500      	movs	r5, #0
 8010de8:	f001 bbb6 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010dec:	2c00      	cmp	r4, #0
 8010dee:	f001 83f1 	beq.w	80125d4 <dwt_ioctl+0x1e8c>
 8010df2:	2200      	movs	r2, #0
 8010df4:	2170      	movs	r1, #112	; 0x70
 8010df6:	f7fd f926 	bl	800e046 <dwt_read32bitoffsetreg>
 8010dfa:	6020      	str	r0, [r4, #0]
 8010dfc:	2500      	movs	r5, #0
 8010dfe:	f001 bbab 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010e02:	9400      	str	r4, [sp, #0]
 8010e04:	2305      	movs	r3, #5
 8010e06:	2200      	movs	r2, #0
 8010e08:	2170      	movs	r1, #112	; 0x70
 8010e0a:	f7fd f912 	bl	800e032 <dwt_readfromdevice>
 8010e0e:	2500      	movs	r5, #0
 8010e10:	f001 bba2 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010e14:	2c00      	cmp	r4, #0
 8010e16:	f001 83df 	beq.w	80125d8 <dwt_ioctl+0x1e90>
 8010e1a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010e1c:	7b9b      	ldrb	r3, [r3, #14]
 8010e1e:	2b01      	cmp	r3, #1
 8010e20:	d015      	beq.n	8010e4e <dwt_ioctl+0x706>
 8010e22:	2b03      	cmp	r3, #3
 8010e24:	d11a      	bne.n	8010e5c <dwt_ioctl+0x714>
 8010e26:	2216      	movs	r2, #22
 8010e28:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8010e2c:	f7fd f921 	bl	800e072 <dwt_read16bitoffsetreg>
 8010e30:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8010e34:	b283      	uxth	r3, r0
 8010e36:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8010e3a:	d004      	beq.n	8010e46 <dwt_ioctl+0x6fe>
 8010e3c:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8010e40:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8010e44:	b218      	sxth	r0, r3
 8010e46:	8020      	strh	r0, [r4, #0]
 8010e48:	2500      	movs	r5, #0
 8010e4a:	f001 bb85 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010e4e:	2202      	movs	r2, #2
 8010e50:	493b      	ldr	r1, [pc, #236]	; (8010f40 <dwt_ioctl+0x7f8>)
 8010e52:	f7fd f90e 	bl	800e072 <dwt_read16bitoffsetreg>
 8010e56:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8010e5a:	e7eb      	b.n	8010e34 <dwt_ioctl+0x6ec>
 8010e5c:	2202      	movs	r2, #2
 8010e5e:	4939      	ldr	r1, [pc, #228]	; (8010f44 <dwt_ioctl+0x7fc>)
 8010e60:	f7fd f907 	bl	800e072 <dwt_read16bitoffsetreg>
 8010e64:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8010e68:	e7e4      	b.n	8010e34 <dwt_ioctl+0x6ec>
 8010e6a:	9400      	str	r4, [sp, #0]
 8010e6c:	2306      	movs	r3, #6
 8010e6e:	2200      	movs	r2, #0
 8010e70:	4935      	ldr	r1, [pc, #212]	; (8010f48 <dwt_ioctl+0x800>)
 8010e72:	f7fd f8de 	bl	800e032 <dwt_readfromdevice>
 8010e76:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	db06      	blt.n	8010e8c <dwt_ioctl+0x744>
 8010e7e:	7963      	ldrb	r3, [r4, #5]
 8010e80:	f003 0301 	and.w	r3, r3, #1
 8010e84:	7163      	strb	r3, [r4, #5]
 8010e86:	2500      	movs	r5, #0
 8010e88:	f001 bb66 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010e8c:	23ff      	movs	r3, #255	; 0xff
 8010e8e:	70a3      	strb	r3, [r4, #2]
 8010e90:	70e3      	strb	r3, [r4, #3]
 8010e92:	7123      	strb	r3, [r4, #4]
 8010e94:	7163      	strb	r3, [r4, #5]
 8010e96:	e7f2      	b.n	8010e7e <dwt_ioctl+0x736>
 8010e98:	2c00      	cmp	r4, #0
 8010e9a:	f001 839f 	beq.w	80125dc <dwt_ioctl+0x1e94>
 8010e9e:	2201      	movs	r2, #1
 8010ea0:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8010ea4:	f7fd f924 	bl	800e0f0 <dwt_read8bitoffsetreg>
 8010ea8:	7020      	strb	r0, [r4, #0]
 8010eaa:	2500      	movs	r5, #0
 8010eac:	f001 bb54 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010eb0:	2c00      	cmp	r4, #0
 8010eb2:	f001 8395 	beq.w	80125e0 <dwt_ioctl+0x1e98>
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8010ebc:	f7fd f918 	bl	800e0f0 <dwt_read8bitoffsetreg>
 8010ec0:	7020      	strb	r0, [r4, #0]
 8010ec2:	2500      	movs	r5, #0
 8010ec4:	f001 bb48 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010ec8:	2c00      	cmp	r4, #0
 8010eca:	f001 838b 	beq.w	80125e4 <dwt_ioctl+0x1e9c>
 8010ece:	88a2      	ldrh	r2, [r4, #4]
 8010ed0:	6821      	ldr	r1, [r4, #0]
 8010ed2:	f7fe fb17 	bl	800f504 <_dwt_otpprogword32>
 8010ed6:	2500      	movs	r5, #0
 8010ed8:	f001 bb3e 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010edc:	2c00      	cmp	r4, #0
 8010ede:	f001 8383 	beq.w	80125e8 <dwt_ioctl+0x1ea0>
 8010ee2:	6825      	ldr	r5, [r4, #0]
 8010ee4:	88a4      	ldrh	r4, [r4, #4]
 8010ee6:	4622      	mov	r2, r4
 8010ee8:	4629      	mov	r1, r5
 8010eea:	f7fe fb0b 	bl	800f504 <_dwt_otpprogword32>
 8010eee:	4621      	mov	r1, r4
 8010ef0:	4630      	mov	r0, r6
 8010ef2:	f7fd fd65 	bl	800e9c0 <_dwt_otpread>
 8010ef6:	1a2d      	subs	r5, r5, r0
 8010ef8:	bf18      	it	ne
 8010efa:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8010efe:	f001 bb2b 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010f02:	2a02      	cmp	r2, #2
 8010f04:	d00f      	beq.n	8010f26 <dwt_ioctl+0x7de>
 8010f06:	4c11      	ldr	r4, [pc, #68]	; (8010f4c <dwt_ioctl+0x804>)
 8010f08:	2300      	movs	r3, #0
 8010f0a:	461a      	mov	r2, r3
 8010f0c:	4621      	mov	r1, r4
 8010f0e:	4630      	mov	r0, r6
 8010f10:	f7fd ff5c 	bl	800edcc <dwt_write8bitoffsetreg>
 8010f14:	2302      	movs	r3, #2
 8010f16:	2200      	movs	r2, #0
 8010f18:	4621      	mov	r1, r4
 8010f1a:	4630      	mov	r0, r6
 8010f1c:	f7fd ff56 	bl	800edcc <dwt_write8bitoffsetreg>
 8010f20:	2500      	movs	r5, #0
 8010f22:	f001 bb19 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010f26:	2300      	movs	r3, #0
 8010f28:	9300      	str	r3, [sp, #0]
 8010f2a:	23fe      	movs	r3, #254	; 0xfe
 8010f2c:	2201      	movs	r2, #1
 8010f2e:	4902      	ldr	r1, [pc, #8]	; (8010f38 <dwt_ioctl+0x7f0>)
 8010f30:	f7fe fbde 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 8010f34:	e7e7      	b.n	8010f06 <dwt_ioctl+0x7be>
 8010f36:	bf00      	nop
 8010f38:	00110008 	.word	0x00110008
 8010f3c:	0007001c 	.word	0x0007001c
 8010f40:	00180014 	.word	0x00180014
 8010f44:	000c001c 	.word	0x000c001c
 8010f48:	000c0018 	.word	0x000c0018
 8010f4c:	000a0004 	.word	0x000a0004
 8010f50:	2c00      	cmp	r4, #0
 8010f52:	f001 834b 	beq.w	80125ec <dwt_ioctl+0x1ea4>
 8010f56:	8824      	ldrh	r4, [r4, #0]
 8010f58:	b2e2      	uxtb	r2, r4
 8010f5a:	f44f 7181 	mov.w	r1, #258	; 0x102
 8010f5e:	f7fd ffe1 	bl	800ef24 <ull_aon_write>
 8010f62:	0a22      	lsrs	r2, r4, #8
 8010f64:	f240 1103 	movw	r1, #259	; 0x103
 8010f68:	4630      	mov	r0, r6
 8010f6a:	f7fd ffdb 	bl	800ef24 <ull_aon_write>
 8010f6e:	2500      	movs	r5, #0
 8010f70:	f001 baf2 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010f74:	2c00      	cmp	r4, #0
 8010f76:	f001 833b 	beq.w	80125f0 <dwt_ioctl+0x1ea8>
 8010f7a:	f8df 8370 	ldr.w	r8, [pc, #880]	; 80112ec <dwt_ioctl+0xba4>
 8010f7e:	2310      	movs	r3, #16
 8010f80:	9300      	str	r3, [sp, #0]
 8010f82:	23ff      	movs	r3, #255	; 0xff
 8010f84:	2200      	movs	r2, #0
 8010f86:	4641      	mov	r1, r8
 8010f88:	f7fe fbb2 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 8010f8c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8010f90:	4630      	mov	r0, r6
 8010f92:	f7fd ffa7 	bl	800eee4 <ull_aon_read>
 8010f96:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 8010f9a:	462a      	mov	r2, r5
 8010f9c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8010fa0:	4630      	mov	r0, r6
 8010fa2:	f7fd ffbf 	bl	800ef24 <ull_aon_write>
 8010fa6:	f045 0204 	orr.w	r2, r5, #4
 8010faa:	f44f 7182 	mov.w	r1, #260	; 0x104
 8010fae:	4630      	mov	r0, r6
 8010fb0:	f7fd ffb8 	bl	800ef24 <ull_aon_write>
 8010fb4:	2002      	movs	r0, #2
 8010fb6:	f7f0 fac5 	bl	8001544 <deca_sleep>
 8010fba:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8010fbe:	4630      	mov	r0, r6
 8010fc0:	f7fd ff90 	bl	800eee4 <ull_aon_read>
 8010fc4:	4607      	mov	r7, r0
 8010fc6:	f240 110f 	movw	r1, #271	; 0x10f
 8010fca:	4630      	mov	r0, r6
 8010fcc:	f7fd ff8a 	bl	800eee4 <ull_aon_read>
 8010fd0:	4681      	mov	r9, r0
 8010fd2:	462a      	mov	r2, r5
 8010fd4:	f44f 7182 	mov.w	r1, #260	; 0x104
 8010fd8:	4630      	mov	r0, r6
 8010fda:	f7fd ffa3 	bl	800ef24 <ull_aon_write>
 8010fde:	2500      	movs	r5, #0
 8010fe0:	9500      	str	r5, [sp, #0]
 8010fe2:	23ef      	movs	r3, #239	; 0xef
 8010fe4:	462a      	mov	r2, r5
 8010fe6:	4641      	mov	r1, r8
 8010fe8:	4630      	mov	r0, r6
 8010fea:	f7fe fb81 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 8010fee:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 8010ff2:	8027      	strh	r7, [r4, #0]
 8010ff4:	f001 bab0 	b.w	8012558 <dwt_ioctl+0x1e10>
 8010ff8:	2c00      	cmp	r4, #0
 8010ffa:	f001 82fb 	beq.w	80125f4 <dwt_ioctl+0x1eac>
 8010ffe:	78a2      	ldrb	r2, [r4, #2]
 8011000:	8821      	ldrh	r1, [r4, #0]
 8011002:	f7fd ffb7 	bl	800ef74 <ull_configuresleep>
 8011006:	2500      	movs	r5, #0
 8011008:	f001 baa6 	b.w	8012558 <dwt_ioctl+0x1e10>
 801100c:	2c00      	cmp	r4, #0
 801100e:	f001 82f3 	beq.w	80125f8 <dwt_ioctl+0x1eb0>
 8011012:	6824      	ldr	r4, [r4, #0]
 8011014:	f7fd ff32 	bl	800ee7c <ull_clearaonconfig>
 8011018:	2001      	movs	r0, #1
 801101a:	f7f0 fa93 	bl	8001544 <deca_sleep>
 801101e:	2303      	movs	r3, #3
 8011020:	9300      	str	r3, [sp, #0]
 8011022:	23ff      	movs	r3, #255	; 0xff
 8011024:	2200      	movs	r2, #0
 8011026:	49af      	ldr	r1, [pc, #700]	; (80112e4 <dwt_ioctl+0xb9c>)
 8011028:	4630      	mov	r0, r6
 801102a:	f7fe fb61 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 801102e:	b97c      	cbnz	r4, 8011050 <dwt_ioctl+0x908>
 8011030:	4630      	mov	r0, r6
 8011032:	f7ff fb61 	bl	80106f8 <ull_softreset_no_sema_fcmd>
 8011036:	2001      	movs	r0, #1
 8011038:	f7f0 fa84 	bl	8001544 <deca_sleep>
 801103c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801103e:	2500      	movs	r5, #0
 8011040:	739d      	strb	r5, [r3, #14]
 8011042:	2202      	movs	r2, #2
 8011044:	821a      	strh	r2, [r3, #16]
 8011046:	751d      	strb	r5, [r3, #20]
 8011048:	755d      	strb	r5, [r3, #21]
 801104a:	73dd      	strb	r5, [r3, #15]
 801104c:	f001 ba84 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011050:	4630      	mov	r0, r6
 8011052:	f7ff fb65 	bl	8010720 <ull_softreset_fcmd>
 8011056:	e7ee      	b.n	8011036 <dwt_ioctl+0x8ee>
 8011058:	2c00      	cmp	r4, #0
 801105a:	f001 82cf 	beq.w	80125fc <dwt_ioctl+0x1eb4>
 801105e:	7823      	ldrb	r3, [r4, #0]
 8011060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011064:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8011066:	7353      	strb	r3, [r2, #13]
 8011068:	2200      	movs	r2, #0
 801106a:	499f      	ldr	r1, [pc, #636]	; (80112e8 <dwt_ioctl+0xba0>)
 801106c:	f7fd feae 	bl	800edcc <dwt_write8bitoffsetreg>
 8011070:	2500      	movs	r5, #0
 8011072:	f001 ba71 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011076:	2c00      	cmp	r4, #0
 8011078:	f001 82c2 	beq.w	8012600 <dwt_ioctl+0x1eb8>
 801107c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801107e:	7b5b      	ldrb	r3, [r3, #13]
 8011080:	7023      	strb	r3, [r4, #0]
 8011082:	2500      	movs	r5, #0
 8011084:	f001 ba68 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011088:	2101      	movs	r1, #1
 801108a:	f7fe f9f5 	bl	800f478 <ull_enable_rf_tx>
 801108e:	4630      	mov	r0, r6
 8011090:	f7fe fa26 	bl	800f4e0 <ull_enable_rftx_blocks>
 8011094:	2101      	movs	r1, #1
 8011096:	4630      	mov	r0, r6
 8011098:	f7fd fc68 	bl	800e96c <ull_force_clocks>
 801109c:	220f      	movs	r2, #15
 801109e:	2101      	movs	r1, #1
 80110a0:	4630      	mov	r0, r6
 80110a2:	f7fd fe39 	bl	800ed18 <ull_repeated_cw>
 80110a6:	2500      	movs	r5, #0
 80110a8:	f001 ba56 	b.w	8012558 <dwt_ioctl+0x1e10>
 80110ac:	2c00      	cmp	r4, #0
 80110ae:	f001 82a9 	beq.w	8012604 <dwt_ioctl+0x1ebc>
 80110b2:	6862      	ldr	r2, [r4, #4]
 80110b4:	6821      	ldr	r1, [r4, #0]
 80110b6:	f7fd fe2f 	bl	800ed18 <ull_repeated_cw>
 80110ba:	2500      	movs	r5, #0
 80110bc:	f001 ba4c 	b.w	8012558 <dwt_ioctl+0x1e10>
 80110c0:	2c00      	cmp	r4, #0
 80110c2:	f001 82a1 	beq.w	8012608 <dwt_ioctl+0x1ec0>
 80110c6:	4d89      	ldr	r5, [pc, #548]	; (80112ec <dwt_ioctl+0xba4>)
 80110c8:	2200      	movs	r2, #0
 80110ca:	4629      	mov	r1, r5
 80110cc:	f7fd f810 	bl	800e0f0 <dwt_read8bitoffsetreg>
 80110d0:	4680      	mov	r8, r0
 80110d2:	2302      	movs	r3, #2
 80110d4:	9300      	str	r3, [sp, #0]
 80110d6:	23ff      	movs	r3, #255	; 0xff
 80110d8:	2200      	movs	r2, #0
 80110da:	4629      	mov	r1, r5
 80110dc:	4630      	mov	r0, r6
 80110de:	f7fe fb07 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 80110e2:	2304      	movs	r3, #4
 80110e4:	2200      	movs	r2, #0
 80110e6:	4982      	ldr	r1, [pc, #520]	; (80112f0 <dwt_ioctl+0xba8>)
 80110e8:	4630      	mov	r0, r6
 80110ea:	f7fd fe6f 	bl	800edcc <dwt_write8bitoffsetreg>
 80110ee:	2301      	movs	r3, #1
 80110f0:	2200      	movs	r2, #0
 80110f2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80110f6:	4630      	mov	r0, r6
 80110f8:	f7fd fe68 	bl	800edcc <dwt_write8bitoffsetreg>
 80110fc:	4f7d      	ldr	r7, [pc, #500]	; (80112f4 <dwt_ioctl+0xbac>)
 80110fe:	2500      	movs	r5, #0
 8011100:	462a      	mov	r2, r5
 8011102:	4639      	mov	r1, r7
 8011104:	4630      	mov	r0, r6
 8011106:	f7fc fff3 	bl	800e0f0 <dwt_read8bitoffsetreg>
 801110a:	f010 0f01 	tst.w	r0, #1
 801110e:	d0f7      	beq.n	8011100 <dwt_ioctl+0x9b8>
 8011110:	2200      	movs	r2, #0
 8011112:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8011116:	4630      	mov	r0, r6
 8011118:	f7fc ffab 	bl	800e072 <dwt_read16bitoffsetreg>
 801111c:	4605      	mov	r5, r0
 801111e:	2300      	movs	r3, #0
 8011120:	461a      	mov	r2, r3
 8011122:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011126:	4630      	mov	r0, r6
 8011128:	f7fd fe50 	bl	800edcc <dwt_write8bitoffsetreg>
 801112c:	2300      	movs	r3, #0
 801112e:	461a      	mov	r2, r3
 8011130:	496f      	ldr	r1, [pc, #444]	; (80112f0 <dwt_ioctl+0xba8>)
 8011132:	4630      	mov	r0, r6
 8011134:	f7fd fe4a 	bl	800edcc <dwt_write8bitoffsetreg>
 8011138:	4643      	mov	r3, r8
 801113a:	2200      	movs	r2, #0
 801113c:	496b      	ldr	r1, [pc, #428]	; (80112ec <dwt_ioctl+0xba4>)
 801113e:	4630      	mov	r0, r6
 8011140:	f7fd fe44 	bl	800edcc <dwt_write8bitoffsetreg>
 8011144:	8025      	strh	r5, [r4, #0]
 8011146:	2500      	movs	r5, #0
 8011148:	f001 ba06 	b.w	8012558 <dwt_ioctl+0x1e10>
 801114c:	2c00      	cmp	r4, #0
 801114e:	f001 825d 	beq.w	801260c <dwt_ioctl+0x1ec4>
 8011152:	7923      	ldrb	r3, [r4, #4]
 8011154:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8011156:	7a92      	ldrb	r2, [r2, #10]
 8011158:	1a9b      	subs	r3, r3, r2
 801115a:	ee07 3a90 	vmov	s15, r3
 801115e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011162:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80112f8 <dwt_ioctl+0xbb0>
 8011166:	ee67 7a87 	vmul.f32	s15, s15, s14
 801116a:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 801116e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011172:	edc4 7a00 	vstr	s15, [r4]
 8011176:	2500      	movs	r5, #0
 8011178:	f001 b9ee 	b.w	8012558 <dwt_ioctl+0x1e10>
 801117c:	2c00      	cmp	r4, #0
 801117e:	f001 8247 	beq.w	8012610 <dwt_ioctl+0x1ec8>
 8011182:	7923      	ldrb	r3, [r4, #4]
 8011184:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8011186:	7a52      	ldrb	r2, [r2, #9]
 8011188:	1a9b      	subs	r3, r3, r2
 801118a:	ee07 3a90 	vmov	s15, r3
 801118e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011192:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80112fc <dwt_ioctl+0xbb4>
 8011196:	ee67 7a87 	vmul.f32	s15, s15, s14
 801119a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 801119e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80111a2:	eddf 6a57 	vldr	s13, [pc, #348]	; 8011300 <dwt_ioctl+0xbb8>
 80111a6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80111aa:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80111ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80111b2:	edc4 7a00 	vstr	s15, [r4]
 80111b6:	2500      	movs	r5, #0
 80111b8:	f001 b9ce 	b.w	8012558 <dwt_ioctl+0x1e10>
 80111bc:	2c00      	cmp	r4, #0
 80111be:	f001 8229 	beq.w	8012614 <dwt_ioctl+0x1ecc>
 80111c2:	6824      	ldr	r4, [r4, #0]
 80111c4:	2101      	movs	r1, #1
 80111c6:	f7fe f957 	bl	800f478 <ull_enable_rf_tx>
 80111ca:	4630      	mov	r0, r6
 80111cc:	f7fe f988 	bl	800f4e0 <ull_enable_rftx_blocks>
 80111d0:	2101      	movs	r1, #1
 80111d2:	4630      	mov	r0, r6
 80111d4:	f7fd fbca 	bl	800e96c <ull_force_clocks>
 80111d8:	4621      	mov	r1, r4
 80111da:	4630      	mov	r0, r6
 80111dc:	f7fe fca0 	bl	800fb20 <ull_repeated_frames>
 80111e0:	2500      	movs	r5, #0
 80111e2:	f001 b9b9 	b.w	8012558 <dwt_ioctl+0x1e10>
 80111e6:	2500      	movs	r5, #0
 80111e8:	9500      	str	r5, [sp, #0]
 80111ea:	23ef      	movs	r3, #239	; 0xef
 80111ec:	462a      	mov	r2, r5
 80111ee:	4945      	ldr	r1, [pc, #276]	; (8011304 <dwt_ioctl+0xbbc>)
 80111f0:	f7fe fa7e 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 80111f4:	2105      	movs	r1, #5
 80111f6:	4630      	mov	r0, r6
 80111f8:	f7fd fbb8 	bl	800e96c <ull_force_clocks>
 80111fc:	2101      	movs	r1, #1
 80111fe:	4630      	mov	r0, r6
 8011200:	f7fd fd6c 	bl	800ecdc <ull_disable_rf_tx>
 8011204:	4630      	mov	r0, r6
 8011206:	f7fd fd5f 	bl	800ecc8 <ull_disable_rftx_blocks>
 801120a:	f001 b9a5 	b.w	8012558 <dwt_ioctl+0x1e10>
 801120e:	2500      	movs	r5, #0
 8011210:	9500      	str	r5, [sp, #0]
 8011212:	23ef      	movs	r3, #239	; 0xef
 8011214:	462a      	mov	r2, r5
 8011216:	493b      	ldr	r1, [pc, #236]	; (8011304 <dwt_ioctl+0xbbc>)
 8011218:	f7fe fa6a 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 801121c:	f001 b99c 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011220:	2c00      	cmp	r4, #0
 8011222:	f001 81f9 	beq.w	8012618 <dwt_ioctl+0x1ed0>
 8011226:	6821      	ldr	r1, [r4, #0]
 8011228:	f7fe fc7a 	bl	800fb20 <ull_repeated_frames>
 801122c:	2500      	movs	r5, #0
 801122e:	f001 b993 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011232:	2200      	movs	r2, #0
 8011234:	4934      	ldr	r1, [pc, #208]	; (8011308 <dwt_ioctl+0xbc0>)
 8011236:	f7fc ff1c 	bl	800e072 <dwt_read16bitoffsetreg>
 801123a:	f3c0 050b 	ubfx	r5, r0, #0, #12
 801123e:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8011242:	bf18      	it	ne
 8011244:	f445 4570 	orrne.w	r5, r5, #61440	; 0xf000
 8011248:	b22d      	sxth	r5, r5
 801124a:	8025      	strh	r5, [r4, #0]
 801124c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801124e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8011252:	1aed      	subs	r5, r5, r3
 8011254:	f001 b980 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011258:	2c00      	cmp	r4, #0
 801125a:	f001 81df 	beq.w	801261c <dwt_ioctl+0x1ed4>
 801125e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8011262:	7a23      	ldrb	r3, [r4, #8]
 8011264:	f899 2013 	ldrb.w	r2, [r9, #19]
 8011268:	2aff      	cmp	r2, #255	; 0xff
 801126a:	f000 80fe 	beq.w	801146a <dwt_ioctl+0xd22>
 801126e:	bb93      	cbnz	r3, 80112d6 <dwt_ioctl+0xb8e>
 8011270:	f8d9 1000 	ldr.w	r1, [r9]
 8011274:	f7fd feb8 	bl	800efe8 <ull_update_nonce_GCM>
 8011278:	f899 300c 	ldrb.w	r3, [r9, #12]
 801127c:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 8011280:	18d1      	adds	r1, r2, r3
 8011282:	f899 2012 	ldrb.w	r2, [r9, #18]
 8011286:	2a00      	cmp	r2, #0
 8011288:	d140      	bne.n	801130c <dwt_ioctl+0xbc4>
 801128a:	f899 0010 	ldrb.w	r0, [r9, #16]
 801128e:	2800      	cmp	r0, #0
 8011290:	bf0b      	itete	eq
 8011292:	227f      	moveq	r2, #127	; 0x7f
 8011294:	f44f 6280 	movne.w	r2, #1024	; 0x400
 8011298:	f44f 15b0 	moveq.w	r5, #1441792	; 0x160000
 801129c:	f44f 15a0 	movne.w	r5, #1310720	; 0x140000
 80112a0:	f899 0013 	ldrb.w	r0, [r9, #19]
 80112a4:	1a12      	subs	r2, r2, r0
 80112a6:	3a02      	subs	r2, #2
 80112a8:	4291      	cmp	r1, r2
 80112aa:	f200 80e7 	bhi.w	801147c <dwt_ioctl+0xd34>
 80112ae:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80112b2:	9200      	str	r2, [sp, #0]
 80112b4:	2200      	movs	r2, #0
 80112b6:	4629      	mov	r1, r5
 80112b8:	4630      	mov	r0, r6
 80112ba:	f7fd fb2d 	bl	800e918 <dwt_writetodevice>
 80112be:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 80112c2:	f899 200c 	ldrb.w	r2, [r9, #12]
 80112c6:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80112ca:	9100      	str	r1, [sp, #0]
 80112cc:	4629      	mov	r1, r5
 80112ce:	4630      	mov	r0, r6
 80112d0:	f7fd fb22 	bl	800e918 <dwt_writetodevice>
 80112d4:	e02b      	b.n	801132e <dwt_ioctl+0xbe6>
 80112d6:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 80112da:	f8d9 1000 	ldr.w	r1, [r9]
 80112de:	f7fd fe91 	bl	800f004 <ull_update_nonce_CCM>
 80112e2:	e7c9      	b.n	8011278 <dwt_ioctl+0xb30>
 80112e4:	00110004 	.word	0x00110004
 80112e8:	00090014 	.word	0x00090014
 80112ec:	00070048 	.word	0x00070048
 80112f0:	00070034 	.word	0x00070034
 80112f4:	00080004 	.word	0x00080004
 80112f8:	3f866666 	.word	0x3f866666
 80112fc:	3ecccccd 	.word	0x3ecccccd
 8011300:	437f0000 	.word	0x437f0000
 8011304:	000f0028 	.word	0x000f0028
 8011308:	00020008 	.word	0x00020008
 801130c:	2a01      	cmp	r2, #1
 801130e:	f040 80af 	bne.w	8011470 <dwt_ioctl+0xd28>
 8011312:	f899 3011 	ldrb.w	r3, [r9, #17]
 8011316:	2b00      	cmp	r3, #0
 8011318:	f240 33ff 	movw	r3, #1023	; 0x3ff
 801131c:	bf08      	it	eq
 801131e:	237f      	moveq	r3, #127	; 0x7f
 8011320:	f899 2013 	ldrb.w	r2, [r9, #19]
 8011324:	1a9b      	subs	r3, r3, r2
 8011326:	3b02      	subs	r3, #2
 8011328:	4299      	cmp	r1, r3
 801132a:	f200 80a4 	bhi.w	8011476 <dwt_ioctl+0xd2e>
 801132e:	f899 2010 	ldrb.w	r2, [r9, #16]
 8011332:	1e53      	subs	r3, r2, #1
 8011334:	b2db      	uxtb	r3, r3
 8011336:	2b01      	cmp	r3, #1
 8011338:	d940      	bls.n	80113bc <dwt_ioctl+0xc74>
 801133a:	f899 3011 	ldrb.w	r3, [r9, #17]
 801133e:	1e59      	subs	r1, r3, #1
 8011340:	b2c9      	uxtb	r1, r1
 8011342:	2901      	cmp	r1, #1
 8011344:	d947      	bls.n	80113d6 <dwt_ioctl+0xc8e>
 8011346:	2b04      	cmp	r3, #4
 8011348:	d04c      	beq.n	80113e4 <dwt_ioctl+0xc9c>
 801134a:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 801134e:	2200      	movs	r2, #0
 8011350:	49ba      	ldr	r1, [pc, #744]	; (801163c <dwt_ioctl+0xef4>)
 8011352:	4630      	mov	r0, r6
 8011354:	f7fd fb56 	bl	800ea04 <dwt_write32bitoffsetreg>
 8011358:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 801135c:	4ab8      	ldr	r2, [pc, #736]	; (8011640 <dwt_ioctl+0xef8>)
 801135e:	ea02 12c3 	and.w	r2, r2, r3, lsl #7
 8011362:	f899 300c 	ldrb.w	r3, [r9, #12]
 8011366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801136a:	4313      	orrs	r3, r2
 801136c:	2200      	movs	r2, #0
 801136e:	49b5      	ldr	r1, [pc, #724]	; (8011644 <dwt_ioctl+0xefc>)
 8011370:	4630      	mov	r0, r6
 8011372:	f7fd fb47 	bl	800ea04 <dwt_write32bitoffsetreg>
 8011376:	2301      	movs	r3, #1
 8011378:	2200      	movs	r2, #0
 801137a:	49b3      	ldr	r1, [pc, #716]	; (8011648 <dwt_ioctl+0xf00>)
 801137c:	4630      	mov	r0, r6
 801137e:	f7fd fd25 	bl	800edcc <dwt_write8bitoffsetreg>
 8011382:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 801164c <dwt_ioctl+0xf04>
 8011386:	2700      	movs	r7, #0
 8011388:	463a      	mov	r2, r7
 801138a:	4641      	mov	r1, r8
 801138c:	4630      	mov	r0, r6
 801138e:	f7fc feaf 	bl	800e0f0 <dwt_read8bitoffsetreg>
 8011392:	f010 0f05 	tst.w	r0, #5
 8011396:	d0f7      	beq.n	8011388 <dwt_ioctl+0xc40>
 8011398:	4605      	mov	r5, r0
 801139a:	4603      	mov	r3, r0
 801139c:	2200      	movs	r2, #0
 801139e:	49ab      	ldr	r1, [pc, #684]	; (801164c <dwt_ioctl+0xf04>)
 80113a0:	4630      	mov	r0, r6
 80113a2:	f7fd fd13 	bl	800edcc <dwt_write8bitoffsetreg>
 80113a6:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 80113aa:	f025 0330 	bic.w	r3, r5, #48	; 0x30
 80113ae:	2b01      	cmp	r3, #1
 80113b0:	d025      	beq.n	80113fe <dwt_ioctl+0xcb6>
 80113b2:	b26b      	sxtb	r3, r5
 80113b4:	7023      	strb	r3, [r4, #0]
 80113b6:	2500      	movs	r5, #0
 80113b8:	f001 b8ce 	b.w	8012558 <dwt_ioctl+0x1e10>
 80113bc:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80113be:	7b9b      	ldrb	r3, [r3, #14]
 80113c0:	2b03      	cmp	r3, #3
 80113c2:	f001 81af 	beq.w	8012724 <dwt_ioctl+0x1fdc>
 80113c6:	f899 3011 	ldrb.w	r3, [r9, #17]
 80113ca:	1e5a      	subs	r2, r3, #1
 80113cc:	b2d2      	uxtb	r2, r2
 80113ce:	2a01      	cmp	r2, #1
 80113d0:	d912      	bls.n	80113f8 <dwt_ioctl+0xcb0>
 80113d2:	2201      	movs	r2, #1
 80113d4:	e7b7      	b.n	8011346 <dwt_ioctl+0xbfe>
 80113d6:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80113d8:	7b9b      	ldrb	r3, [r3, #14]
 80113da:	2b03      	cmp	r3, #3
 80113dc:	bf0c      	ite	eq
 80113de:	2302      	moveq	r3, #2
 80113e0:	2301      	movne	r3, #1
 80113e2:	e7b2      	b.n	801134a <dwt_ioctl+0xc02>
 80113e4:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 80113e8:	2910      	cmp	r1, #16
 80113ea:	d9ae      	bls.n	801134a <dwt_ioctl+0xc02>
 80113ec:	f06f 0303 	mvn.w	r3, #3
 80113f0:	e7e0      	b.n	80113b4 <dwt_ioctl+0xc6c>
 80113f2:	2202      	movs	r2, #2
 80113f4:	4613      	mov	r3, r2
 80113f6:	e7a8      	b.n	801134a <dwt_ioctl+0xc02>
 80113f8:	2201      	movs	r2, #1
 80113fa:	4613      	mov	r3, r2
 80113fc:	e7a5      	b.n	801134a <dwt_ioctl+0xc02>
 80113fe:	f899 3012 	ldrb.w	r3, [r9, #18]
 8011402:	2b01      	cmp	r3, #1
 8011404:	d1d5      	bne.n	80113b2 <dwt_ioctl+0xc6a>
 8011406:	f899 2011 	ldrb.w	r2, [r9, #17]
 801140a:	1e53      	subs	r3, r2, #1
 801140c:	b2db      	uxtb	r3, r3
 801140e:	2b01      	cmp	r3, #1
 8011410:	d91b      	bls.n	801144a <dwt_ioctl+0xd02>
 8011412:	2a03      	cmp	r2, #3
 8011414:	bf0c      	ite	eq
 8011416:	f44f 17a0 	moveq.w	r7, #1310720	; 0x140000
 801141a:	f44f 17b0 	movne.w	r7, #1441792	; 0x160000
 801141e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8011422:	b112      	cbz	r2, 801142a <dwt_ioctl+0xce2>
 8011424:	f899 300c 	ldrb.w	r3, [r9, #12]
 8011428:	b9c3      	cbnz	r3, 801145c <dwt_ioctl+0xd14>
 801142a:	f8d9 1008 	ldr.w	r1, [r9, #8]
 801142e:	2900      	cmp	r1, #0
 8011430:	d0bf      	beq.n	80113b2 <dwt_ioctl+0xc6a>
 8011432:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d0bb      	beq.n	80113b2 <dwt_ioctl+0xc6a>
 801143a:	f899 200c 	ldrb.w	r2, [r9, #12]
 801143e:	9100      	str	r1, [sp, #0]
 8011440:	4639      	mov	r1, r7
 8011442:	4630      	mov	r0, r6
 8011444:	f7fc fdf5 	bl	800e032 <dwt_readfromdevice>
 8011448:	e7b3      	b.n	80113b2 <dwt_ioctl+0xc6a>
 801144a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801144c:	7b9b      	ldrb	r3, [r3, #14]
 801144e:	2b03      	cmp	r3, #3
 8011450:	bf0c      	ite	eq
 8011452:	f44f 1798 	moveq.w	r7, #1245184	; 0x130000
 8011456:	f44f 1790 	movne.w	r7, #1179648	; 0x120000
 801145a:	e7e0      	b.n	801141e <dwt_ioctl+0xcd6>
 801145c:	9200      	str	r2, [sp, #0]
 801145e:	2200      	movs	r2, #0
 8011460:	4639      	mov	r1, r7
 8011462:	4630      	mov	r0, r6
 8011464:	f7fc fde5 	bl	800e032 <dwt_readfromdevice>
 8011468:	e7df      	b.n	801142a <dwt_ioctl+0xce2>
 801146a:	f06f 0302 	mvn.w	r3, #2
 801146e:	e7a1      	b.n	80113b4 <dwt_ioctl+0xc6c>
 8011470:	f06f 0301 	mvn.w	r3, #1
 8011474:	e79e      	b.n	80113b4 <dwt_ioctl+0xc6c>
 8011476:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801147a:	e79b      	b.n	80113b4 <dwt_ioctl+0xc6c>
 801147c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011480:	e798      	b.n	80113b4 <dwt_ioctl+0xc6c>
 8011482:	7a23      	ldrb	r3, [r4, #8]
 8011484:	79e1      	ldrb	r1, [r4, #7]
 8011486:	79a2      	ldrb	r2, [r4, #6]
 8011488:	00d2      	lsls	r2, r2, #3
 801148a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801148e:	4313      	orrs	r3, r2
 8011490:	7962      	ldrb	r2, [r4, #5]
 8011492:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8011496:	7922      	ldrb	r2, [r4, #4]
 8011498:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801149c:	78e2      	ldrb	r2, [r4, #3]
 801149e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80114a2:	78a2      	ldrb	r2, [r4, #2]
 80114a4:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 80114a8:	7862      	ldrb	r2, [r4, #1]
 80114aa:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80114ae:	7822      	ldrb	r2, [r4, #0]
 80114b0:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80114b4:	b29b      	uxth	r3, r3
 80114b6:	2200      	movs	r2, #0
 80114b8:	4965      	ldr	r1, [pc, #404]	; (8011650 <dwt_ioctl+0xf08>)
 80114ba:	f7fd fa38 	bl	800e92e <dwt_write16bitoffsetreg>
 80114be:	2500      	movs	r5, #0
 80114c0:	f001 b84a 	b.w	8012558 <dwt_ioctl+0x1e10>
 80114c4:	2c00      	cmp	r4, #0
 80114c6:	f001 80ab 	beq.w	8012620 <dwt_ioctl+0x1ed8>
 80114ca:	7863      	ldrb	r3, [r4, #1]
 80114cc:	b133      	cbz	r3, 80114dc <dwt_ioctl+0xd94>
 80114ce:	085b      	lsrs	r3, r3, #1
 80114d0:	3b01      	subs	r3, #1
 80114d2:	b2db      	uxtb	r3, r3
 80114d4:	7023      	strb	r3, [r4, #0]
 80114d6:	2500      	movs	r5, #0
 80114d8:	f001 b83e 	b.w	8012558 <dwt_ioctl+0x1e10>
 80114dc:	2300      	movs	r3, #0
 80114de:	e7f9      	b.n	80114d4 <dwt_ioctl+0xd8c>
 80114e0:	2200      	movs	r2, #0
 80114e2:	495c      	ldr	r1, [pc, #368]	; (8011654 <dwt_ioctl+0xf0c>)
 80114e4:	f7fc fdaf 	bl	800e046 <dwt_read32bitoffsetreg>
 80114e8:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80114ec:	8023      	strh	r3, [r4, #0]
 80114ee:	f3c0 400b 	ubfx	r0, r0, #16, #12
 80114f2:	8060      	strh	r0, [r4, #2]
 80114f4:	2200      	movs	r2, #0
 80114f6:	4958      	ldr	r1, [pc, #352]	; (8011658 <dwt_ioctl+0xf10>)
 80114f8:	4630      	mov	r0, r6
 80114fa:	f7fc fda4 	bl	800e046 <dwt_read32bitoffsetreg>
 80114fe:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8011502:	80a3      	strh	r3, [r4, #4]
 8011504:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8011508:	80e0      	strh	r0, [r4, #6]
 801150a:	2200      	movs	r2, #0
 801150c:	4953      	ldr	r1, [pc, #332]	; (801165c <dwt_ioctl+0xf14>)
 801150e:	4630      	mov	r0, r6
 8011510:	f7fc fd99 	bl	800e046 <dwt_read32bitoffsetreg>
 8011514:	7220      	strb	r0, [r4, #8]
 8011516:	0c00      	lsrs	r0, r0, #16
 8011518:	7260      	strb	r0, [r4, #9]
 801151a:	2200      	movs	r2, #0
 801151c:	4950      	ldr	r1, [pc, #320]	; (8011660 <dwt_ioctl+0xf18>)
 801151e:	4630      	mov	r0, r6
 8011520:	f7fc fd91 	bl	800e046 <dwt_read32bitoffsetreg>
 8011524:	f3c0 430b 	ubfx	r3, r0, #16, #12
 8011528:	81a3      	strh	r3, [r4, #12]
 801152a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 801152e:	8160      	strh	r0, [r4, #10]
 8011530:	2200      	movs	r2, #0
 8011532:	494c      	ldr	r1, [pc, #304]	; (8011664 <dwt_ioctl+0xf1c>)
 8011534:	4630      	mov	r0, r6
 8011536:	f7fc fd86 	bl	800e046 <dwt_read32bitoffsetreg>
 801153a:	f3c0 430b 	ubfx	r3, r0, #16, #12
 801153e:	f8a4 300f 	strh.w	r3, [r4, #15]
 8011542:	73a0      	strb	r0, [r4, #14]
 8011544:	2200      	movs	r2, #0
 8011546:	4948      	ldr	r1, [pc, #288]	; (8011668 <dwt_ioctl+0xf20>)
 8011548:	4630      	mov	r0, r6
 801154a:	f7fc fd7c 	bl	800e046 <dwt_read32bitoffsetreg>
 801154e:	7460      	strb	r0, [r4, #17]
 8011550:	0c00      	lsrs	r0, r0, #16
 8011552:	74a0      	strb	r0, [r4, #18]
 8011554:	2200      	movs	r2, #0
 8011556:	4945      	ldr	r1, [pc, #276]	; (801166c <dwt_ioctl+0xf24>)
 8011558:	4630      	mov	r0, r6
 801155a:	f7fc fd74 	bl	800e046 <dwt_read32bitoffsetreg>
 801155e:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8011562:	f8a4 3013 	strh.w	r3, [r4, #19]
 8011566:	f3c0 400b 	ubfx	r0, r0, #16, #12
 801156a:	f8a4 0015 	strh.w	r0, [r4, #21]
 801156e:	2200      	movs	r2, #0
 8011570:	493f      	ldr	r1, [pc, #252]	; (8011670 <dwt_ioctl+0xf28>)
 8011572:	4630      	mov	r0, r6
 8011574:	f7fc fdbc 	bl	800e0f0 <dwt_read8bitoffsetreg>
 8011578:	75e0      	strb	r0, [r4, #23]
 801157a:	2500      	movs	r5, #0
 801157c:	f000 bfec 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011580:	4611      	mov	r1, r2
 8011582:	f7fd fc9b 	bl	800eebc <ull_configeventcounters>
 8011586:	2500      	movs	r5, #0
 8011588:	f000 bfe6 	b.w	8012558 <dwt_ioctl+0x1e10>
 801158c:	2c00      	cmp	r4, #0
 801158e:	f001 8049 	beq.w	8012624 <dwt_ioctl+0x1edc>
 8011592:	8823      	ldrh	r3, [r4, #0]
 8011594:	2200      	movs	r2, #0
 8011596:	4937      	ldr	r1, [pc, #220]	; (8011674 <dwt_ioctl+0xf2c>)
 8011598:	f7fd f9c9 	bl	800e92e <dwt_write16bitoffsetreg>
 801159c:	2500      	movs	r5, #0
 801159e:	f000 bfdb 	b.w	8012558 <dwt_ioctl+0x1e10>
 80115a2:	2c00      	cmp	r4, #0
 80115a4:	f001 8040 	beq.w	8012628 <dwt_ioctl+0x1ee0>
 80115a8:	6825      	ldr	r5, [r4, #0]
 80115aa:	b935      	cbnz	r5, 80115ba <dwt_ioctl+0xe72>
 80115ac:	2300      	movs	r3, #0
 80115ae:	461a      	mov	r2, r3
 80115b0:	4931      	ldr	r1, [pc, #196]	; (8011678 <dwt_ioctl+0xf30>)
 80115b2:	f7fd f9bc 	bl	800e92e <dwt_write16bitoffsetreg>
 80115b6:	f000 bfcf 	b.w	8012558 <dwt_ioctl+0x1e10>
 80115ba:	7962      	ldrb	r2, [r4, #5]
 80115bc:	7923      	ldrb	r3, [r4, #4]
 80115be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80115c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80115c6:	2200      	movs	r2, #0
 80115c8:	492b      	ldr	r1, [pc, #172]	; (8011678 <dwt_ioctl+0xf30>)
 80115ca:	f7fd f9b0 	bl	800e92e <dwt_write16bitoffsetreg>
 80115ce:	2500      	movs	r5, #0
 80115d0:	f000 bfc2 	b.w	8012558 <dwt_ioctl+0x1e10>
 80115d4:	2c00      	cmp	r4, #0
 80115d6:	f001 8029 	beq.w	801262c <dwt_ioctl+0x1ee4>
 80115da:	6823      	ldr	r3, [r4, #0]
 80115dc:	b94b      	cbnz	r3, 80115f2 <dwt_ioctl+0xeaa>
 80115de:	2500      	movs	r5, #0
 80115e0:	9500      	str	r5, [sp, #0]
 80115e2:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 80115e6:	462a      	mov	r2, r5
 80115e8:	2110      	movs	r1, #16
 80115ea:	f7fe fc11 	bl	800fe10 <dwt_modify16bitoffsetreg>
 80115ee:	f000 bfb3 	b.w	8012558 <dwt_ioctl+0x1e10>
 80115f2:	2200      	movs	r2, #0
 80115f4:	2134      	movs	r1, #52	; 0x34
 80115f6:	f7fd fa05 	bl	800ea04 <dwt_write32bitoffsetreg>
 80115fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80115fe:	9300      	str	r3, [sp, #0]
 8011600:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011604:	2200      	movs	r2, #0
 8011606:	2110      	movs	r1, #16
 8011608:	4630      	mov	r0, r6
 801160a:	f7fe fc01 	bl	800fe10 <dwt_modify16bitoffsetreg>
 801160e:	2500      	movs	r5, #0
 8011610:	f000 bfa2 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011614:	2c00      	cmp	r4, #0
 8011616:	f001 800b 	beq.w	8012630 <dwt_ioctl+0x1ee8>
 801161a:	8861      	ldrh	r1, [r4, #2]
 801161c:	f7fd fc62 	bl	800eee4 <ull_aon_read>
 8011620:	7020      	strb	r0, [r4, #0]
 8011622:	2500      	movs	r5, #0
 8011624:	f000 bf98 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011628:	2c00      	cmp	r4, #0
 801162a:	f001 8003 	beq.w	8012634 <dwt_ioctl+0x1eec>
 801162e:	78a2      	ldrb	r2, [r4, #2]
 8011630:	8821      	ldrh	r1, [r4, #0]
 8011632:	f7fd fc77 	bl	800ef24 <ull_aon_write>
 8011636:	2500      	movs	r5, #0
 8011638:	f000 bf8e 	b.w	8012558 <dwt_ioctl+0x1e10>
 801163c:	00010044 	.word	0x00010044
 8011640:	0001ff80 	.word	0x0001ff80
 8011644:	00010048 	.word	0x00010048
 8011648:	0001004c 	.word	0x0001004c
 801164c:	00010050 	.word	0x00010050
 8011650:	00010030 	.word	0x00010030
 8011654:	000f0004 	.word	0x000f0004
 8011658:	000f0008 	.word	0x000f0008
 801165c:	000f000c 	.word	0x000f000c
 8011660:	000f0010 	.word	0x000f0010
 8011664:	000f0014 	.word	0x000f0014
 8011668:	000f0018 	.word	0x000f0018
 801166c:	000f001c 	.word	0x000f001c
 8011670:	000f0020 	.word	0x000f0020
 8011674:	00060004 	.word	0x00060004
 8011678:	0011001c 	.word	0x0011001c
 801167c:	4bd5      	ldr	r3, [pc, #852]	; (80119d4 <dwt_ioctl+0x128c>)
 801167e:	4ad6      	ldr	r2, [pc, #856]	; (80119d8 <dwt_ioctl+0x1290>)
 8011680:	2d01      	cmp	r5, #1
 8011682:	bf18      	it	ne
 8011684:	4613      	movne	r3, r2
 8011686:	2d01      	cmp	r5, #1
 8011688:	49d4      	ldr	r1, [pc, #848]	; (80119dc <dwt_ioctl+0x1294>)
 801168a:	bf18      	it	ne
 801168c:	f04f 110c 	movne.w	r1, #786444	; 0xc000c
 8011690:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8011692:	7b92      	ldrb	r2, [r2, #14]
 8011694:	2a01      	cmp	r2, #1
 8011696:	d012      	beq.n	80116be <dwt_ioctl+0xf76>
 8011698:	2a03      	cmp	r2, #3
 801169a:	d117      	bne.n	80116cc <dwt_ioctl+0xf84>
 801169c:	f5a2 12c0 	sub.w	r2, r2, #1572864	; 0x180000
 80116a0:	3a01      	subs	r2, #1
 80116a2:	441a      	add	r2, r3
 80116a4:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80116a8:	f7fc fce3 	bl	800e072 <dwt_read16bitoffsetreg>
 80116ac:	09c0      	lsrs	r0, r0, #7
 80116ae:	8020      	strh	r0, [r4, #0]
 80116b0:	8825      	ldrh	r5, [r4, #0]
 80116b2:	3500      	adds	r5, #0
 80116b4:	bf18      	it	ne
 80116b6:	2501      	movne	r5, #1
 80116b8:	426d      	negs	r5, r5
 80116ba:	f000 bf4d 	b.w	8012558 <dwt_ioctl+0x1e10>
 80116be:	2202      	movs	r2, #2
 80116c0:	4619      	mov	r1, r3
 80116c2:	f7fc fcd6 	bl	800e072 <dwt_read16bitoffsetreg>
 80116c6:	09c0      	lsrs	r0, r0, #7
 80116c8:	8020      	strh	r0, [r4, #0]
 80116ca:	e7f1      	b.n	80116b0 <dwt_ioctl+0xf68>
 80116cc:	2202      	movs	r2, #2
 80116ce:	f7fc fcd0 	bl	800e072 <dwt_read16bitoffsetreg>
 80116d2:	09c0      	lsrs	r0, r0, #7
 80116d4:	8020      	strh	r0, [r4, #0]
 80116d6:	e7eb      	b.n	80116b0 <dwt_ioctl+0xf68>
 80116d8:	2c00      	cmp	r4, #0
 80116da:	f000 87ad 	beq.w	8012638 <dwt_ioctl+0x1ef0>
 80116de:	7821      	ldrb	r1, [r4, #0]
 80116e0:	f7fe fbd4 	bl	800fe8c <ull_setleds>
 80116e4:	2500      	movs	r5, #0
 80116e6:	f000 bf37 	b.w	8012558 <dwt_ioctl+0x1e10>
 80116ea:	4611      	mov	r1, r2
 80116ec:	f7fe fa30 	bl	800fb50 <ull_setdwstate>
 80116f0:	2500      	movs	r5, #0
 80116f2:	f000 bf31 	b.w	8012558 <dwt_ioctl+0x1e10>
 80116f6:	9400      	str	r4, [sp, #0]
 80116f8:	2304      	movs	r3, #4
 80116fa:	2200      	movs	r2, #0
 80116fc:	211c      	movs	r1, #28
 80116fe:	f7fc fc98 	bl	800e032 <dwt_readfromdevice>
 8011702:	2500      	movs	r5, #0
 8011704:	f000 bf28 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011708:	2c00      	cmp	r4, #0
 801170a:	f000 8797 	beq.w	801263c <dwt_ioctl+0x1ef4>
 801170e:	2202      	movs	r2, #2
 8011710:	2144      	movs	r1, #68	; 0x44
 8011712:	f7fc fcae 	bl	800e072 <dwt_read16bitoffsetreg>
 8011716:	f3c0 2000 	ubfx	r0, r0, #8, #1
 801171a:	7020      	strb	r0, [r4, #0]
 801171c:	2500      	movs	r5, #0
 801171e:	f000 bf1b 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011722:	2c00      	cmp	r4, #0
 8011724:	f000 878c 	beq.w	8012640 <dwt_ioctl+0x1ef8>
 8011728:	2200      	movs	r2, #0
 801172a:	2144      	movs	r1, #68	; 0x44
 801172c:	f7fc fce0 	bl	800e0f0 <dwt_read8bitoffsetreg>
 8011730:	f000 0001 	and.w	r0, r0, #1
 8011734:	7020      	strb	r0, [r4, #0]
 8011736:	2500      	movs	r5, #0
 8011738:	f000 bf0e 	b.w	8012558 <dwt_ioctl+0x1e10>
 801173c:	2c00      	cmp	r4, #0
 801173e:	f000 8781 	beq.w	8012644 <dwt_ioctl+0x1efc>
 8011742:	8862      	ldrh	r2, [r4, #2]
 8011744:	8821      	ldrh	r1, [r4, #0]
 8011746:	f7fe fa61 	bl	800fc0c <ull_configureframefilter>
 801174a:	2500      	movs	r5, #0
 801174c:	f000 bf04 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011750:	9400      	str	r4, [sp, #0]
 8011752:	2308      	movs	r3, #8
 8011754:	2200      	movs	r2, #0
 8011756:	2104      	movs	r1, #4
 8011758:	f7fd f8de 	bl	800e918 <dwt_writetodevice>
 801175c:	2500      	movs	r5, #0
 801175e:	f000 befb 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011762:	9400      	str	r4, [sp, #0]
 8011764:	2308      	movs	r3, #8
 8011766:	2200      	movs	r2, #0
 8011768:	2104      	movs	r1, #4
 801176a:	f7fc fc62 	bl	800e032 <dwt_readfromdevice>
 801176e:	2500      	movs	r5, #0
 8011770:	f000 bef2 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011774:	2c00      	cmp	r4, #0
 8011776:	f000 8767 	beq.w	8012648 <dwt_ioctl+0x1f00>
 801177a:	8823      	ldrh	r3, [r4, #0]
 801177c:	2202      	movs	r2, #2
 801177e:	210c      	movs	r1, #12
 8011780:	f7fd f8d5 	bl	800e92e <dwt_write16bitoffsetreg>
 8011784:	2500      	movs	r5, #0
 8011786:	f000 bee7 	b.w	8012558 <dwt_ioctl+0x1e10>
 801178a:	2c00      	cmp	r4, #0
 801178c:	f000 875e 	beq.w	801264c <dwt_ioctl+0x1f04>
 8011790:	8823      	ldrh	r3, [r4, #0]
 8011792:	2200      	movs	r2, #0
 8011794:	210c      	movs	r1, #12
 8011796:	f7fd f8ca 	bl	800e92e <dwt_write16bitoffsetreg>
 801179a:	2500      	movs	r5, #0
 801179c:	f000 bedc 	b.w	8012558 <dwt_ioctl+0x1e10>
 80117a0:	4621      	mov	r1, r4
 80117a2:	f7fd f897 	bl	800e8d4 <ull_readrxtimestamp>
 80117a6:	2500      	movs	r5, #0
 80117a8:	f000 bed6 	b.w	8012558 <dwt_ioctl+0x1e10>
 80117ac:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80117ae:	7b9b      	ldrb	r3, [r3, #14]
 80117b0:	2b01      	cmp	r3, #1
 80117b2:	d00b      	beq.n	80117cc <dwt_ioctl+0x1084>
 80117b4:	2b03      	cmp	r3, #3
 80117b6:	d112      	bne.n	80117de <dwt_ioctl+0x1096>
 80117b8:	9400      	str	r4, [sp, #0]
 80117ba:	2305      	movs	r3, #5
 80117bc:	2220      	movs	r2, #32
 80117be:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80117c2:	f7fc fc36 	bl	800e032 <dwt_readfromdevice>
 80117c6:	2500      	movs	r5, #0
 80117c8:	f000 bec6 	b.w	8012558 <dwt_ioctl+0x1e10>
 80117cc:	9400      	str	r4, [sp, #0]
 80117ce:	2305      	movs	r3, #5
 80117d0:	2200      	movs	r2, #0
 80117d2:	4983      	ldr	r1, [pc, #524]	; (80119e0 <dwt_ioctl+0x1298>)
 80117d4:	f7fc fc2d 	bl	800e032 <dwt_readfromdevice>
 80117d8:	2500      	movs	r5, #0
 80117da:	f000 bebd 	b.w	8012558 <dwt_ioctl+0x1e10>
 80117de:	9400      	str	r4, [sp, #0]
 80117e0:	2305      	movs	r3, #5
 80117e2:	2200      	movs	r2, #0
 80117e4:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 80117e8:	f7fc fc23 	bl	800e032 <dwt_readfromdevice>
 80117ec:	2500      	movs	r5, #0
 80117ee:	f000 beb3 	b.w	8012558 <dwt_ioctl+0x1e10>
 80117f2:	2500      	movs	r5, #0
 80117f4:	f804 5b01 	strb.w	r5, [r4], #1
 80117f8:	9400      	str	r4, [sp, #0]
 80117fa:	2304      	movs	r3, #4
 80117fc:	462a      	mov	r2, r5
 80117fe:	216c      	movs	r1, #108	; 0x6c
 8011800:	f7fc fc17 	bl	800e032 <dwt_readfromdevice>
 8011804:	f000 bea8 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011808:	2c00      	cmp	r4, #0
 801180a:	f000 8721 	beq.w	8012650 <dwt_ioctl+0x1f08>
 801180e:	2201      	movs	r2, #1
 8011810:	2160      	movs	r1, #96	; 0x60
 8011812:	f7fc fc18 	bl	800e046 <dwt_read32bitoffsetreg>
 8011816:	6020      	str	r0, [r4, #0]
 8011818:	2500      	movs	r5, #0
 801181a:	f000 be9d 	b.w	8012558 <dwt_ioctl+0x1e10>
 801181e:	2c00      	cmp	r4, #0
 8011820:	f000 8718 	beq.w	8012654 <dwt_ioctl+0x1f0c>
 8011824:	2200      	movs	r2, #0
 8011826:	2160      	movs	r1, #96	; 0x60
 8011828:	f7fc fc0d 	bl	800e046 <dwt_read32bitoffsetreg>
 801182c:	6020      	str	r0, [r4, #0]
 801182e:	2500      	movs	r5, #0
 8011830:	f000 be92 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011834:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011836:	7b9b      	ldrb	r3, [r3, #14]
 8011838:	2b01      	cmp	r3, #1
 801183a:	d00b      	beq.n	8011854 <dwt_ioctl+0x110c>
 801183c:	2b03      	cmp	r3, #3
 801183e:	d112      	bne.n	8011866 <dwt_ioctl+0x111e>
 8011840:	9400      	str	r4, [sp, #0]
 8011842:	2305      	movs	r3, #5
 8011844:	2228      	movs	r2, #40	; 0x28
 8011846:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 801184a:	f7fc fbf2 	bl	800e032 <dwt_readfromdevice>
 801184e:	2500      	movs	r5, #0
 8011850:	f000 be82 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011854:	9400      	str	r4, [sp, #0]
 8011856:	2305      	movs	r3, #5
 8011858:	2200      	movs	r2, #0
 801185a:	4962      	ldr	r1, [pc, #392]	; (80119e4 <dwt_ioctl+0x129c>)
 801185c:	f7fc fbe9 	bl	800e032 <dwt_readfromdevice>
 8011860:	2500      	movs	r5, #0
 8011862:	f000 be79 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011866:	9400      	str	r4, [sp, #0]
 8011868:	2305      	movs	r3, #5
 801186a:	2200      	movs	r2, #0
 801186c:	495e      	ldr	r1, [pc, #376]	; (80119e8 <dwt_ioctl+0x12a0>)
 801186e:	f7fc fbe0 	bl	800e032 <dwt_readfromdevice>
 8011872:	2500      	movs	r5, #0
 8011874:	f000 be70 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011878:	2c00      	cmp	r4, #0
 801187a:	f000 86ed 	beq.w	8012658 <dwt_ioctl+0x1f10>
 801187e:	2200      	movs	r2, #0
 8011880:	211c      	movs	r1, #28
 8011882:	f7fc fbe0 	bl	800e046 <dwt_read32bitoffsetreg>
 8011886:	6020      	str	r0, [r4, #0]
 8011888:	2500      	movs	r5, #0
 801188a:	f000 be65 	b.w	8012558 <dwt_ioctl+0x1e10>
 801188e:	2c00      	cmp	r4, #0
 8011890:	f000 86e4 	beq.w	801265c <dwt_ioctl+0x1f14>
 8011894:	8825      	ldrh	r5, [r4, #0]
 8011896:	6867      	ldr	r7, [r4, #4]
 8011898:	7a23      	ldrb	r3, [r4, #8]
 801189a:	2b00      	cmp	r3, #0
 801189c:	f000 86e0 	beq.w	8012660 <dwt_ioctl+0x1f18>
 80118a0:	463c      	mov	r4, r7
 80118a2:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 80118a6:	4629      	mov	r1, r5
 80118a8:	4630      	mov	r0, r6
 80118aa:	f7fd f889 	bl	800e9c0 <_dwt_otpread>
 80118ae:	f844 0b04 	str.w	r0, [r4], #4
 80118b2:	3501      	adds	r5, #1
 80118b4:	b2ad      	uxth	r5, r5
 80118b6:	42bc      	cmp	r4, r7
 80118b8:	d1f5      	bne.n	80118a6 <dwt_ioctl+0x115e>
 80118ba:	2500      	movs	r5, #0
 80118bc:	f000 be4c 	b.w	8012558 <dwt_ioctl+0x1e10>
 80118c0:	2c00      	cmp	r4, #0
 80118c2:	f000 86cf 	beq.w	8012664 <dwt_ioctl+0x1f1c>
 80118c6:	7821      	ldrb	r1, [r4, #0]
 80118c8:	f7fd fb86 	bl	800efd8 <ull_setplenfine>
 80118cc:	2500      	movs	r5, #0
 80118ce:	f000 be43 	b.w	8012558 <dwt_ioctl+0x1e10>
 80118d2:	f7fe f9bf 	bl	800fc54 <ull_run_pgfcal>
 80118d6:	4605      	mov	r5, r0
 80118d8:	f000 be3e 	b.w	8012558 <dwt_ioctl+0x1e10>
 80118dc:	4611      	mov	r1, r2
 80118de:	f7fe fb23 	bl	800ff28 <ull_pgf_cal>
 80118e2:	4605      	mov	r5, r0
 80118e4:	f000 be38 	b.w	8012558 <dwt_ioctl+0x1e10>
 80118e8:	2c00      	cmp	r4, #0
 80118ea:	f000 86bd 	beq.w	8012668 <dwt_ioctl+0x1f20>
 80118ee:	78a5      	ldrb	r5, [r4, #2]
 80118f0:	2101      	movs	r1, #1
 80118f2:	f7fd f83b 	bl	800e96c <ull_force_clocks>
 80118f6:	2100      	movs	r1, #0
 80118f8:	4630      	mov	r0, r6
 80118fa:	f7fd fdbd 	bl	800f478 <ull_enable_rf_tx>
 80118fe:	4630      	mov	r0, r6
 8011900:	f7fd fdee 	bl	800f4e0 <ull_enable_rftx_blocks>
 8011904:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 8011908:	2200      	movs	r2, #0
 801190a:	4938      	ldr	r1, [pc, #224]	; (80119ec <dwt_ioctl+0x12a4>)
 801190c:	4630      	mov	r0, r6
 801190e:	f7fd fa5d 	bl	800edcc <dwt_write8bitoffsetreg>
 8011912:	2301      	movs	r3, #1
 8011914:	9300      	str	r3, [sp, #0]
 8011916:	23ff      	movs	r3, #255	; 0xff
 8011918:	2200      	movs	r2, #0
 801191a:	4935      	ldr	r1, [pc, #212]	; (80119f0 <dwt_ioctl+0x12a8>)
 801191c:	4630      	mov	r0, r6
 801191e:	f7fd fee7 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 8011922:	4f33      	ldr	r7, [pc, #204]	; (80119f0 <dwt_ioctl+0x12a8>)
 8011924:	2500      	movs	r5, #0
 8011926:	462a      	mov	r2, r5
 8011928:	4639      	mov	r1, r7
 801192a:	4630      	mov	r0, r6
 801192c:	f7fc fbe0 	bl	800e0f0 <dwt_read8bitoffsetreg>
 8011930:	f010 0f01 	tst.w	r0, #1
 8011934:	d1f7      	bne.n	8011926 <dwt_ioctl+0x11de>
 8011936:	2200      	movs	r2, #0
 8011938:	492e      	ldr	r1, [pc, #184]	; (80119f4 <dwt_ioctl+0x12ac>)
 801193a:	4630      	mov	r0, r6
 801193c:	f7fc fb99 	bl	800e072 <dwt_read16bitoffsetreg>
 8011940:	4605      	mov	r5, r0
 8011942:	4630      	mov	r0, r6
 8011944:	f7fd f9c0 	bl	800ecc8 <ull_disable_rftx_blocks>
 8011948:	2100      	movs	r1, #0
 801194a:	4630      	mov	r0, r6
 801194c:	f7fd f9c6 	bl	800ecdc <ull_disable_rf_tx>
 8011950:	2105      	movs	r1, #5
 8011952:	4630      	mov	r0, r6
 8011954:	f7fd f80a 	bl	800e96c <ull_force_clocks>
 8011958:	f3c5 050b 	ubfx	r5, r5, #0, #12
 801195c:	8025      	strh	r5, [r4, #0]
 801195e:	2500      	movs	r5, #0
 8011960:	f000 bdfa 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011964:	2102      	movs	r1, #2
 8011966:	f7fe f8f3 	bl	800fb50 <ull_setdwstate>
 801196a:	2101      	movs	r1, #1
 801196c:	4630      	mov	r0, r6
 801196e:	f7fe f8ef 	bl	800fb50 <ull_setdwstate>
 8011972:	2432      	movs	r4, #50	; 0x32
 8011974:	f04f 0814 	mov.w	r8, #20
 8011978:	2700      	movs	r7, #0
 801197a:	2544      	movs	r5, #68	; 0x44
 801197c:	4640      	mov	r0, r8
 801197e:	f7ef fdec 	bl	800155a <deca_usleep>
 8011982:	463a      	mov	r2, r7
 8011984:	4629      	mov	r1, r5
 8011986:	4630      	mov	r0, r6
 8011988:	f7fc fbb2 	bl	800e0f0 <dwt_read8bitoffsetreg>
 801198c:	f010 0f02 	tst.w	r0, #2
 8011990:	d105      	bne.n	801199e <dwt_ioctl+0x1256>
 8011992:	1e63      	subs	r3, r4, #1
 8011994:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8011998:	d1f0      	bne.n	801197c <dwt_ioctl+0x1234>
 801199a:	2501      	movs	r5, #1
 801199c:	e000      	b.n	80119a0 <dwt_ioctl+0x1258>
 801199e:	2500      	movs	r5, #0
 80119a0:	426d      	negs	r5, r5
 80119a2:	f000 bdd9 	b.w	8012558 <dwt_ioctl+0x1e10>
 80119a6:	2c00      	cmp	r4, #0
 80119a8:	f000 8660 	beq.w	801266c <dwt_ioctl+0x1f24>
 80119ac:	7823      	ldrb	r3, [r4, #0]
 80119ae:	031b      	lsls	r3, r3, #12
 80119b0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80119b4:	7862      	ldrb	r2, [r4, #1]
 80119b6:	2a01      	cmp	r2, #1
 80119b8:	bf08      	it	eq
 80119ba:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 80119be:	9300      	str	r3, [sp, #0]
 80119c0:	f46f 43e2 	mvn.w	r3, #28928	; 0x7100
 80119c4:	2200      	movs	r2, #0
 80119c6:	490c      	ldr	r1, [pc, #48]	; (80119f8 <dwt_ioctl+0x12b0>)
 80119c8:	f7fd fd22 	bl	800f410 <dwt_modify32bitoffsetreg>
 80119cc:	2500      	movs	r5, #0
 80119ce:	f000 bdc3 	b.w	8012558 <dwt_ioctl+0x1e10>
 80119d2:	bf00      	nop
 80119d4:	00180034 	.word	0x00180034
 80119d8:	0018002c 	.word	0x0018002c
 80119dc:	000c0014 	.word	0x000c0014
 80119e0:	00180020 	.word	0x00180020
 80119e4:	00180028 	.word	0x00180028
 80119e8:	000c0008 	.word	0x000c0008
 80119ec:	0007001c 	.word	0x0007001c
 80119f0:	00080010 	.word	0x00080010
 80119f4:	00080014 	.word	0x00080014
 80119f8:	00070014 	.word	0x00070014
 80119fc:	2c00      	cmp	r4, #0
 80119fe:	f000 8637 	beq.w	8012670 <dwt_ioctl+0x1f28>
 8011a02:	6862      	ldr	r2, [r4, #4]
 8011a04:	6821      	ldr	r1, [r4, #0]
 8011a06:	f7fd fe35 	bl	800f674 <ull_setgpiomode>
 8011a0a:	2500      	movs	r5, #0
 8011a0c:	f000 bda4 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011a10:	2c00      	cmp	r4, #0
 8011a12:	f000 862f 	beq.w	8012674 <dwt_ioctl+0x1f2c>
 8011a16:	8823      	ldrh	r3, [r4, #0]
 8011a18:	2200      	movs	r2, #0
 8011a1a:	49c4      	ldr	r1, [pc, #784]	; (8011d2c <dwt_ioctl+0x15e4>)
 8011a1c:	f7fc ff87 	bl	800e92e <dwt_write16bitoffsetreg>
 8011a20:	2500      	movs	r5, #0
 8011a22:	f000 bd99 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011a26:	2c00      	cmp	r4, #0
 8011a28:	f000 8626 	beq.w	8012678 <dwt_ioctl+0x1f30>
 8011a2c:	6862      	ldr	r2, [r4, #4]
 8011a2e:	8821      	ldrh	r1, [r4, #0]
 8011a30:	f7fe faaa 	bl	800ff88 <ull_setgpiovalue>
 8011a34:	2500      	movs	r5, #0
 8011a36:	f000 bd8f 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011a3a:	2c00      	cmp	r4, #0
 8011a3c:	f000 861e 	beq.w	801267c <dwt_ioctl+0x1f34>
 8011a40:	7865      	ldrb	r5, [r4, #1]
 8011a42:	7823      	ldrb	r3, [r4, #0]
 8011a44:	b18b      	cbz	r3, 8011a6a <dwt_ioctl+0x1322>
 8011a46:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011a48:	2200      	movs	r2, #0
 8011a4a:	739a      	strb	r2, [r3, #14]
 8011a4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a50:	2208      	movs	r2, #8
 8011a52:	b37d      	cbz	r5, 8011ab4 <dwt_ioctl+0x136c>
 8011a54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011a58:	9200      	str	r2, [sp, #0]
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	2110      	movs	r1, #16
 8011a5e:	4630      	mov	r0, r6
 8011a60:	f7fd fcd6 	bl	800f410 <dwt_modify32bitoffsetreg>
 8011a64:	2500      	movs	r5, #0
 8011a66:	f000 bd77 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011a6a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011a6c:	2201      	movs	r2, #1
 8011a6e:	739a      	strb	r2, [r3, #14]
 8011a70:	2318      	movs	r3, #24
 8011a72:	2200      	movs	r2, #0
 8011a74:	49ae      	ldr	r1, [pc, #696]	; (8011d30 <dwt_ioctl+0x15e8>)
 8011a76:	f7fc ffc5 	bl	800ea04 <dwt_write32bitoffsetreg>
 8011a7a:	23e8      	movs	r3, #232	; 0xe8
 8011a7c:	2200      	movs	r2, #0
 8011a7e:	49ad      	ldr	r1, [pc, #692]	; (8011d34 <dwt_ioctl+0x15ec>)
 8011a80:	4630      	mov	r0, r6
 8011a82:	f7fc ffbf 	bl	800ea04 <dwt_write32bitoffsetreg>
 8011a86:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8011a88:	7d9b      	ldrb	r3, [r3, #22]
 8011a8a:	085b      	lsrs	r3, r3, #1
 8011a8c:	d003      	beq.n	8011a96 <dwt_ioctl+0x134e>
 8011a8e:	f06f 0308 	mvn.w	r3, #8
 8011a92:	2200      	movs	r2, #0
 8011a94:	e7dd      	b.n	8011a52 <dwt_ioctl+0x130a>
 8011a96:	2301      	movs	r3, #1
 8011a98:	2200      	movs	r2, #0
 8011a9a:	49a7      	ldr	r1, [pc, #668]	; (8011d38 <dwt_ioctl+0x15f0>)
 8011a9c:	4630      	mov	r0, r6
 8011a9e:	f7fd f995 	bl	800edcc <dwt_write8bitoffsetreg>
 8011aa2:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8011aa4:	7d93      	ldrb	r3, [r2, #22]
 8011aa6:	f043 0302 	orr.w	r3, r3, #2
 8011aaa:	7593      	strb	r3, [r2, #22]
 8011aac:	f06f 0308 	mvn.w	r3, #8
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	e7ce      	b.n	8011a52 <dwt_ioctl+0x130a>
 8011ab4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011ab8:	e7ce      	b.n	8011a58 <dwt_ioctl+0x1310>
 8011aba:	2c00      	cmp	r4, #0
 8011abc:	f000 85e0 	beq.w	8012680 <dwt_ioctl+0x1f38>
 8011ac0:	6823      	ldr	r3, [r4, #0]
 8011ac2:	2200      	movs	r2, #0
 8011ac4:	2130      	movs	r1, #48	; 0x30
 8011ac6:	f7fc ff9d 	bl	800ea04 <dwt_write32bitoffsetreg>
 8011aca:	2500      	movs	r5, #0
 8011acc:	f000 bd44 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011ad0:	2c00      	cmp	r4, #0
 8011ad2:	f000 85d7 	beq.w	8012684 <dwt_ioctl+0x1f3c>
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	4629      	mov	r1, r5
 8011ada:	f7fc fab4 	bl	800e046 <dwt_read32bitoffsetreg>
 8011ade:	6020      	str	r0, [r4, #0]
 8011ae0:	2500      	movs	r5, #0
 8011ae2:	f000 bd39 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011ae6:	4623      	mov	r3, r4
 8011ae8:	2200      	movs	r2, #0
 8011aea:	4629      	mov	r1, r5
 8011aec:	f7fc ff8a 	bl	800ea04 <dwt_write32bitoffsetreg>
 8011af0:	2500      	movs	r5, #0
 8011af2:	f000 bd31 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011af6:	2c00      	cmp	r4, #0
 8011af8:	f000 85c6 	beq.w	8012688 <dwt_ioctl+0x1f40>
 8011afc:	2203      	movs	r2, #3
 8011afe:	498f      	ldr	r1, [pc, #572]	; (8011d3c <dwt_ioctl+0x15f4>)
 8011b00:	f7fc faf6 	bl	800e0f0 <dwt_read8bitoffsetreg>
 8011b04:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8011b08:	7020      	strb	r0, [r4, #0]
 8011b0a:	2500      	movs	r5, #0
 8011b0c:	f000 bd24 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011b10:	2c00      	cmp	r4, #0
 8011b12:	f000 85bb 	beq.w	801268c <dwt_ioctl+0x1f44>
 8011b16:	6823      	ldr	r3, [r4, #0]
 8011b18:	2200      	movs	r2, #0
 8011b1a:	2144      	movs	r1, #68	; 0x44
 8011b1c:	f7fc ff72 	bl	800ea04 <dwt_write32bitoffsetreg>
 8011b20:	2500      	movs	r5, #0
 8011b22:	f000 bd19 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011b26:	2c00      	cmp	r4, #0
 8011b28:	f000 85b2 	beq.w	8012690 <dwt_ioctl+0x1f48>
 8011b2c:	8823      	ldrh	r3, [r4, #0]
 8011b2e:	2200      	movs	r2, #0
 8011b30:	2148      	movs	r1, #72	; 0x48
 8011b32:	f7fc fefc 	bl	800e92e <dwt_write16bitoffsetreg>
 8011b36:	2500      	movs	r5, #0
 8011b38:	f000 bd0e 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011b3c:	2c00      	cmp	r4, #0
 8011b3e:	f000 85a9 	beq.w	8012694 <dwt_ioctl+0x1f4c>
 8011b42:	2200      	movs	r2, #0
 8011b44:	2144      	movs	r1, #68	; 0x44
 8011b46:	f7fc fa7e 	bl	800e046 <dwt_read32bitoffsetreg>
 8011b4a:	6020      	str	r0, [r4, #0]
 8011b4c:	2500      	movs	r5, #0
 8011b4e:	f000 bd03 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011b52:	2c00      	cmp	r4, #0
 8011b54:	f000 85a0 	beq.w	8012698 <dwt_ioctl+0x1f50>
 8011b58:	2200      	movs	r2, #0
 8011b5a:	2148      	movs	r1, #72	; 0x48
 8011b5c:	f7fc fa89 	bl	800e072 <dwt_read16bitoffsetreg>
 8011b60:	6020      	str	r0, [r4, #0]
 8011b62:	2500      	movs	r5, #0
 8011b64:	f000 bcf8 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011b68:	2c00      	cmp	r4, #0
 8011b6a:	f000 8597 	beq.w	801269c <dwt_ioctl+0x1f54>
 8011b6e:	7823      	ldrb	r3, [r4, #0]
 8011b70:	2200      	movs	r2, #0
 8011b72:	4973      	ldr	r1, [pc, #460]	; (8011d40 <dwt_ioctl+0x15f8>)
 8011b74:	f7fd f92a 	bl	800edcc <dwt_write8bitoffsetreg>
 8011b78:	2500      	movs	r5, #0
 8011b7a:	f000 bced 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011b7e:	2c00      	cmp	r4, #0
 8011b80:	f000 858e 	beq.w	80126a0 <dwt_ioctl+0x1f58>
 8011b84:	2200      	movs	r2, #0
 8011b86:	2144      	movs	r1, #68	; 0x44
 8011b88:	f7fc fab2 	bl	800e0f0 <dwt_read8bitoffsetreg>
 8011b8c:	7020      	strb	r0, [r4, #0]
 8011b8e:	2500      	movs	r5, #0
 8011b90:	f000 bce2 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011b94:	2c00      	cmp	r4, #0
 8011b96:	f000 8585 	beq.w	80126a4 <dwt_ioctl+0x1f5c>
 8011b9a:	f7fd f923 	bl	800ede4 <ull_getframelength>
 8011b9e:	6020      	str	r0, [r4, #0]
 8011ba0:	2500      	movs	r5, #0
 8011ba2:	f000 bcd9 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011ba6:	2c00      	cmp	r4, #0
 8011ba8:	f000 857e 	beq.w	80126a8 <dwt_ioctl+0x1f60>
 8011bac:	2200      	movs	r2, #0
 8011bae:	4965      	ldr	r1, [pc, #404]	; (8011d44 <dwt_ioctl+0x15fc>)
 8011bb0:	f7fc fa5f 	bl	800e072 <dwt_read16bitoffsetreg>
 8011bb4:	8020      	strh	r0, [r4, #0]
 8011bb6:	2500      	movs	r5, #0
 8011bb8:	f000 bcce 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011bbc:	2c00      	cmp	r4, #0
 8011bbe:	f000 8575 	beq.w	80126ac <dwt_ioctl+0x1f64>
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	4960      	ldr	r1, [pc, #384]	; (8011d48 <dwt_ioctl+0x1600>)
 8011bc6:	f7fc fa3e 	bl	800e046 <dwt_read32bitoffsetreg>
 8011bca:	6020      	str	r0, [r4, #0]
 8011bcc:	2500      	movs	r5, #0
 8011bce:	f000 bcc3 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011bd2:	2c00      	cmp	r4, #0
 8011bd4:	f000 856c 	beq.w	80126b0 <dwt_ioctl+0x1f68>
 8011bd8:	8823      	ldrh	r3, [r4, #0]
 8011bda:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011bde:	9300      	str	r3, [sp, #0]
 8011be0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8011be4:	2200      	movs	r2, #0
 8011be6:	4958      	ldr	r1, [pc, #352]	; (8011d48 <dwt_ioctl+0x1600>)
 8011be8:	f7fe f912 	bl	800fe10 <dwt_modify16bitoffsetreg>
 8011bec:	2500      	movs	r5, #0
 8011bee:	f000 bcb3 	b.w	8012558 <dwt_ioctl+0x1e10>
 8011bf2:	2c00      	cmp	r4, #0
 8011bf4:	f000 855e 	beq.w	80126b4 <dwt_ioctl+0x1f6c>
 8011bf8:	88a7      	ldrh	r7, [r4, #4]
 8011bfa:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8011bfe:	7b23      	ldrb	r3, [r4, #12]
 8011c00:	9306      	str	r3, [sp, #24]
 8011c02:	6922      	ldr	r2, [r4, #16]
 8011c04:	9204      	str	r2, [sp, #16]
 8011c06:	6962      	ldr	r2, [r4, #20]
 8011c08:	9205      	str	r2, [sp, #20]
 8011c0a:	f00b 0203 	and.w	r2, fp, #3
 8011c0e:	f3cb 0585 	ubfx	r5, fp, #2, #6
 8011c12:	2b05      	cmp	r3, #5
 8011c14:	d147      	bne.n	8011ca6 <dwt_ioctl+0x155e>
 8011c16:	f5b7 7fb1 	cmp.w	r7, #354	; 0x162
 8011c1a:	bf28      	it	cs
 8011c1c:	f44f 77b1 	movcs.w	r7, #354	; 0x162
 8011c20:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8011d50 <dwt_ioctl+0x1608>
 8011c24:	2f04      	cmp	r7, #4
 8011c26:	d805      	bhi.n	8011c34 <dwt_ioctl+0x14ec>
 8011c28:	eb09 0305 	add.w	r3, r9, r5
 8011c2c:	785b      	ldrb	r3, [r3, #1]
 8011c2e:	3b05      	subs	r3, #5
 8011c30:	429f      	cmp	r7, r3
 8011c32:	db40      	blt.n	8011cb6 <dwt_ioctl+0x156e>
 8011c34:	2a01      	cmp	r2, #1
 8011c36:	f200 80c8 	bhi.w	8011dca <dwt_ioctl+0x1682>
 8011c3a:	4b44      	ldr	r3, [pc, #272]	; (8011d4c <dwt_ioctl+0x1604>)
 8011c3c:	5c99      	ldrb	r1, [r3, r2]
 8011c3e:	463e      	mov	r6, r7
 8011c40:	42b9      	cmp	r1, r7
 8011c42:	f280 80c4 	bge.w	8011dce <dwt_ioctl+0x1686>
 8011c46:	1c50      	adds	r0, r2, #1
 8011c48:	fa53 f080 	uxtab	r0, r3, r0
 8011c4c:	2300      	movs	r3, #0
 8011c4e:	440b      	add	r3, r1
 8011c50:	b29b      	uxth	r3, r3
 8011c52:	3201      	adds	r2, #1
 8011c54:	b2d2      	uxtb	r2, r2
 8011c56:	2a02      	cmp	r2, #2
 8011c58:	d005      	beq.n	8011c66 <dwt_ioctl+0x151e>
 8011c5a:	f810 1b01 	ldrb.w	r1, [r0], #1
 8011c5e:	eba6 0c03 	sub.w	ip, r6, r3
 8011c62:	4561      	cmp	r1, ip
 8011c64:	dbf3      	blt.n	8011c4e <dwt_ioctl+0x1506>
 8011c66:	429f      	cmp	r7, r3
 8011c68:	bf08      	it	eq
 8011c6a:	9503      	streq	r5, [sp, #12]
 8011c6c:	f000 80b4 	beq.w	8011dd8 <dwt_ioctl+0x1690>
 8011c70:	f107 0c05 	add.w	ip, r7, #5
 8011c74:	fa1f fc8c 	uxth.w	ip, ip
 8011c78:	2680      	movs	r6, #128	; 0x80
 8011c7a:	2100      	movs	r1, #0
 8011c7c:	9107      	str	r1, [sp, #28]
 8011c7e:	9103      	str	r1, [sp, #12]
 8011c80:	9108      	str	r1, [sp, #32]
 8011c82:	2005      	movs	r0, #5
 8011c84:	46b8      	mov	r8, r7
 8011c86:	4287      	cmp	r7, r0
 8011c88:	bf38      	it	cc
 8011c8a:	4680      	movcc	r8, r0
 8011c8c:	f1a8 0805 	sub.w	r8, r8, #5
 8011c90:	fa1f f888 	uxth.w	r8, r8
 8011c94:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 8011d4c <dwt_ioctl+0x1604>
 8011c98:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8011c9c:	4683      	mov	fp, r0
 8011c9e:	4620      	mov	r0, r4
 8011ca0:	460c      	mov	r4, r1
 8011ca2:	4686      	mov	lr, r0
 8011ca4:	e031      	b.n	8011d0a <dwt_ioctl+0x15c2>
 8011ca6:	f240 1331 	movw	r3, #305	; 0x131
 8011caa:	429f      	cmp	r7, r3
 8011cac:	bf28      	it	cs
 8011cae:	461f      	movcs	r7, r3
 8011cb0:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8011d54 <dwt_ioctl+0x160c>
 8011cb4:	e7b6      	b.n	8011c24 <dwt_ioctl+0x14dc>
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	9a05      	ldr	r2, [sp, #20]
 8011cba:	8013      	strh	r3, [r2, #0]
 8011cbc:	9a04      	ldr	r2, [sp, #16]
 8011cbe:	f8c2 b000 	str.w	fp, [r2]
 8011cc2:	e098      	b.n	8011df6 <dwt_ioctl+0x16ae>
 8011cc4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8011cc8:	4674      	mov	r4, lr
 8011cca:	2300      	movs	r3, #0
 8011ccc:	9a05      	ldr	r2, [sp, #20]
 8011cce:	8013      	strh	r3, [r2, #0]
 8011cd0:	9b04      	ldr	r3, [sp, #16]
 8011cd2:	f8c3 b000 	str.w	fp, [r3]
 8011cd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011cda:	e08c      	b.n	8011df6 <dwt_ioctl+0x16ae>
 8011cdc:	fa1f fb80 	uxth.w	fp, r0
 8011ce0:	9207      	str	r2, [sp, #28]
 8011ce2:	9503      	str	r5, [sp, #12]
 8011ce4:	9308      	str	r3, [sp, #32]
 8011ce6:	2401      	movs	r4, #1
 8011ce8:	2d3f      	cmp	r5, #63	; 0x3f
 8011cea:	d050      	beq.n	8011d8e <dwt_ioctl+0x1646>
 8011cec:	2900      	cmp	r1, #0
 8011cee:	d139      	bne.n	8011d64 <dwt_ioctl+0x161c>
 8011cf0:	3501      	adds	r5, #1
 8011cf2:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8011cf6:	f819 0005 	ldrb.w	r0, [r9, r5]
 8011cfa:	4403      	add	r3, r0
 8011cfc:	b29b      	uxth	r3, r3
 8011cfe:	429f      	cmp	r7, r3
 8011d00:	d067      	beq.n	8011dd2 <dwt_ioctl+0x168a>
 8011d02:	3e01      	subs	r6, #1
 8011d04:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8011d08:	d0dc      	beq.n	8011cc4 <dwt_ioctl+0x157c>
 8011d0a:	4543      	cmp	r3, r8
 8011d0c:	d924      	bls.n	8011d58 <dwt_ioctl+0x1610>
 8011d0e:	4563      	cmp	r3, ip
 8011d10:	d222      	bcs.n	8011d58 <dwt_ioctl+0x1610>
 8011d12:	1af8      	subs	r0, r7, r3
 8011d14:	b200      	sxth	r0, r0
 8011d16:	2800      	cmp	r0, #0
 8011d18:	bfb8      	it	lt
 8011d1a:	4240      	neglt	r0, r0
 8011d1c:	4558      	cmp	r0, fp
 8011d1e:	dddd      	ble.n	8011cdc <dwt_ioctl+0x1594>
 8011d20:	2c00      	cmp	r4, #0
 8011d22:	d0e1      	beq.n	8011ce8 <dwt_ioctl+0x15a0>
 8011d24:	4674      	mov	r4, lr
 8011d26:	9a07      	ldr	r2, [sp, #28]
 8011d28:	9b08      	ldr	r3, [sp, #32]
 8011d2a:	e055      	b.n	8011dd8 <dwt_ioctl+0x1690>
 8011d2c:	00050008 	.word	0x00050008
 8011d30:	001f000c 	.word	0x001f000c
 8011d34:	001f0010 	.word	0x001f0010
 8011d38:	00010020 	.word	0x00010020
 8011d3c:	00030054 	.word	0x00030054
 8011d40:	00010018 	.word	0x00010018
 8011d44:	0005002c 	.word	0x0005002c
 8011d48:	000e001c 	.word	0x000e001c
 8011d4c:	080160a8 	.word	0x080160a8
 8011d50:	08016028 	.word	0x08016028
 8011d54:	08016068 	.word	0x08016068
 8011d58:	b984      	cbnz	r4, 8011d7c <dwt_ioctl+0x1634>
 8011d5a:	4563      	cmp	r3, ip
 8011d5c:	d3c4      	bcc.n	8011ce8 <dwt_ioctl+0x15a0>
 8011d5e:	b199      	cbz	r1, 8011d88 <dwt_ioctl+0x1640>
 8011d60:	2d3f      	cmp	r5, #63	; 0x3f
 8011d62:	d014      	beq.n	8011d8e <dwt_ioctl+0x1646>
 8011d64:	f819 1005 	ldrb.w	r1, [r9, r5]
 8011d68:	1a5b      	subs	r3, r3, r1
 8011d6a:	b29b      	uxth	r3, r3
 8011d6c:	1e69      	subs	r1, r5, #1
 8011d6e:	f001 053f 	and.w	r5, r1, #63	; 0x3f
 8011d72:	f011 013f 	ands.w	r1, r1, #63	; 0x3f
 8011d76:	bf18      	it	ne
 8011d78:	2101      	movne	r1, #1
 8011d7a:	e7c0      	b.n	8011cfe <dwt_ioctl+0x15b6>
 8011d7c:	4674      	mov	r4, lr
 8011d7e:	f819 1005 	ldrb.w	r1, [r9, r5]
 8011d82:	1a5b      	subs	r3, r3, r1
 8011d84:	b29b      	uxth	r3, r3
 8011d86:	e027      	b.n	8011dd8 <dwt_ioctl+0x1690>
 8011d88:	4674      	mov	r4, lr
 8011d8a:	9503      	str	r5, [sp, #12]
 8011d8c:	e024      	b.n	8011dd8 <dwt_ioctl+0x1690>
 8011d8e:	2c00      	cmp	r4, #0
 8011d90:	d134      	bne.n	8011dfc <dwt_ioctl+0x16b4>
 8011d92:	2a03      	cmp	r2, #3
 8011d94:	d036      	beq.n	8011e04 <dwt_ioctl+0x16bc>
 8011d96:	2a02      	cmp	r2, #2
 8011d98:	d009      	beq.n	8011dae <dwt_ioctl+0x1666>
 8011d9a:	f81a 1002 	ldrb.w	r1, [sl, r2]
 8011d9e:	1858      	adds	r0, r3, r1
 8011da0:	42b8      	cmp	r0, r7
 8011da2:	dd0b      	ble.n	8011dbc <dwt_ioctl+0x1674>
 8011da4:	440b      	add	r3, r1
 8011da6:	b29b      	uxth	r3, r3
 8011da8:	3201      	adds	r2, #1
 8011daa:	b2d2      	uxtb	r2, r2
 8011dac:	e7da      	b.n	8011d64 <dwt_ioctl+0x161c>
 8011dae:	9906      	ldr	r1, [sp, #24]
 8011db0:	2909      	cmp	r1, #9
 8011db2:	d1f2      	bne.n	8011d9a <dwt_ioctl+0x1652>
 8011db4:	4674      	mov	r4, lr
 8011db6:	213f      	movs	r1, #63	; 0x3f
 8011db8:	9103      	str	r1, [sp, #12]
 8011dba:	e00d      	b.n	8011dd8 <dwt_ioctl+0x1690>
 8011dbc:	4674      	mov	r4, lr
 8011dbe:	b283      	uxth	r3, r0
 8011dc0:	3201      	adds	r2, #1
 8011dc2:	b2d2      	uxtb	r2, r2
 8011dc4:	213f      	movs	r1, #63	; 0x3f
 8011dc6:	9103      	str	r1, [sp, #12]
 8011dc8:	e006      	b.n	8011dd8 <dwt_ioctl+0x1690>
 8011dca:	2300      	movs	r3, #0
 8011dcc:	e74b      	b.n	8011c66 <dwt_ioctl+0x151e>
 8011dce:	2300      	movs	r3, #0
 8011dd0:	e749      	b.n	8011c66 <dwt_ioctl+0x151e>
 8011dd2:	4674      	mov	r4, lr
 8011dd4:	9503      	str	r5, [sp, #12]
 8011dd6:	463b      	mov	r3, r7
 8011dd8:	9905      	ldr	r1, [sp, #20]
 8011dda:	800b      	strh	r3, [r1, #0]
 8011ddc:	9b03      	ldr	r3, [sp, #12]
 8011dde:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
 8011de2:	b2db      	uxtb	r3, r3
 8011de4:	041a      	lsls	r2, r3, #16
 8011de6:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8011dea:	431a      	orrs	r2, r3
 8011dec:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8011df0:	9a04      	ldr	r2, [sp, #16]
 8011df2:	6013      	str	r3, [r2, #0]
 8011df4:	2300      	movs	r3, #0
 8011df6:	6023      	str	r3, [r4, #0]
 8011df8:	2500      	movs	r5, #0
 8011dfa:	e3ad      	b.n	8012558 <dwt_ioctl+0x1e10>
 8011dfc:	4674      	mov	r4, lr
 8011dfe:	9a07      	ldr	r2, [sp, #28]
 8011e00:	9b08      	ldr	r3, [sp, #32]
 8011e02:	e7e9      	b.n	8011dd8 <dwt_ioctl+0x1690>
 8011e04:	4674      	mov	r4, lr
 8011e06:	213f      	movs	r1, #63	; 0x3f
 8011e08:	9103      	str	r1, [sp, #12]
 8011e0a:	e7e5      	b.n	8011dd8 <dwt_ioctl+0x1690>
 8011e0c:	2c00      	cmp	r4, #0
 8011e0e:	f000 8453 	beq.w	80126b8 <dwt_ioctl+0x1f70>
 8011e12:	7827      	ldrb	r7, [r4, #0]
 8011e14:	7864      	ldrb	r4, [r4, #1]
 8011e16:	f7ef fb77 	bl	8001508 <decamutexon>
 8011e1a:	4605      	mov	r5, r0
 8011e1c:	2c02      	cmp	r4, #2
 8011e1e:	d00e      	beq.n	8011e3e <dwt_ioctl+0x16f6>
 8011e20:	2c04      	cmp	r4, #4
 8011e22:	d00c      	beq.n	8011e3e <dwt_ioctl+0x16f6>
 8011e24:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
 8011e28:	2c01      	cmp	r4, #1
 8011e2a:	d019      	beq.n	8011e60 <dwt_ioctl+0x1718>
 8011e2c:	43fb      	mvns	r3, r7
 8011e2e:	2200      	movs	r2, #0
 8011e30:	9200      	str	r2, [sp, #0]
 8011e32:	b2db      	uxtb	r3, r3
 8011e34:	49c1      	ldr	r1, [pc, #772]	; (801213c <dwt_ioctl+0x19f4>)
 8011e36:	4630      	mov	r0, r6
 8011e38:	f7fd fc5a 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 8011e3c:	e005      	b.n	8011e4a <dwt_ioctl+0x1702>
 8011e3e:	463b      	mov	r3, r7
 8011e40:	2200      	movs	r2, #0
 8011e42:	49be      	ldr	r1, [pc, #760]	; (801213c <dwt_ioctl+0x19f4>)
 8011e44:	4630      	mov	r0, r6
 8011e46:	f7fc ffc1 	bl	800edcc <dwt_write8bitoffsetreg>
 8011e4a:	463b      	mov	r3, r7
 8011e4c:	2200      	movs	r2, #0
 8011e4e:	49bc      	ldr	r1, [pc, #752]	; (8012140 <dwt_ioctl+0x19f8>)
 8011e50:	4630      	mov	r0, r6
 8011e52:	f7fc fdd7 	bl	800ea04 <dwt_write32bitoffsetreg>
 8011e56:	4628      	mov	r0, r5
 8011e58:	f7ef fb67 	bl	800152a <decamutexoff>
 8011e5c:	2500      	movs	r5, #0
 8011e5e:	e37b      	b.n	8012558 <dwt_ioctl+0x1e10>
 8011e60:	9700      	str	r7, [sp, #0]
 8011e62:	23ff      	movs	r3, #255	; 0xff
 8011e64:	2200      	movs	r2, #0
 8011e66:	49b5      	ldr	r1, [pc, #724]	; (801213c <dwt_ioctl+0x19f4>)
 8011e68:	4630      	mov	r0, r6
 8011e6a:	f7fd fc41 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 8011e6e:	e7ec      	b.n	8011e4a <dwt_ioctl+0x1702>
 8011e70:	2302      	movs	r3, #2
 8011e72:	9301      	str	r3, [sp, #4]
 8011e74:	2500      	movs	r5, #0
 8011e76:	9500      	str	r5, [sp, #0]
 8011e78:	462b      	mov	r3, r5
 8011e7a:	462a      	mov	r2, r5
 8011e7c:	211a      	movs	r1, #26
 8011e7e:	f7fc f85a 	bl	800df36 <dwt_xfer3xxx>
 8011e82:	e369      	b.n	8012558 <dwt_ioctl+0x1e10>
 8011e84:	f7fe fc4c 	bl	8010720 <ull_softreset_fcmd>
 8011e88:	2500      	movs	r5, #0
 8011e8a:	e365      	b.n	8012558 <dwt_ioctl+0x1e10>
 8011e8c:	f7fe fc34 	bl	80106f8 <ull_softreset_no_sema_fcmd>
 8011e90:	2500      	movs	r5, #0
 8011e92:	e361      	b.n	8012558 <dwt_ioctl+0x1e10>
 8011e94:	2302      	movs	r3, #2
 8011e96:	9301      	str	r3, [sp, #4]
 8011e98:	2500      	movs	r5, #0
 8011e9a:	9500      	str	r5, [sp, #0]
 8011e9c:	462b      	mov	r3, r5
 8011e9e:	462a      	mov	r2, r5
 8011ea0:	2114      	movs	r1, #20
 8011ea2:	f7fc f848 	bl	800df36 <dwt_xfer3xxx>
 8011ea6:	e357      	b.n	8012558 <dwt_ioctl+0x1e10>
 8011ea8:	2402      	movs	r4, #2
 8011eaa:	9401      	str	r4, [sp, #4]
 8011eac:	2500      	movs	r5, #0
 8011eae:	9500      	str	r5, [sp, #0]
 8011eb0:	462b      	mov	r3, r5
 8011eb2:	462a      	mov	r2, r5
 8011eb4:	2115      	movs	r1, #21
 8011eb6:	f7fc f83e 	bl	800df36 <dwt_xfer3xxx>
 8011eba:	9401      	str	r4, [sp, #4]
 8011ebc:	9500      	str	r5, [sp, #0]
 8011ebe:	462b      	mov	r3, r5
 8011ec0:	462a      	mov	r2, r5
 8011ec2:	2115      	movs	r1, #21
 8011ec4:	4630      	mov	r0, r6
 8011ec6:	f7fc f836 	bl	800df36 <dwt_xfer3xxx>
 8011eca:	e345      	b.n	8012558 <dwt_ioctl+0x1e10>
 8011ecc:	2302      	movs	r3, #2
 8011ece:	9301      	str	r3, [sp, #4]
 8011ed0:	2500      	movs	r5, #0
 8011ed2:	9500      	str	r5, [sp, #0]
 8011ed4:	462b      	mov	r3, r5
 8011ed6:	462a      	mov	r2, r5
 8011ed8:	2116      	movs	r1, #22
 8011eda:	f7fc f82c 	bl	800df36 <dwt_xfer3xxx>
 8011ede:	e33b      	b.n	8012558 <dwt_ioctl+0x1e10>
 8011ee0:	2c00      	cmp	r4, #0
 8011ee2:	f000 83eb 	beq.w	80126bc <dwt_ioctl+0x1f74>
 8011ee6:	b932      	cbnz	r2, 8011ef6 <dwt_ioctl+0x17ae>
 8011ee8:	2200      	movs	r2, #0
 8011eea:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8011eee:	f7fc f8ff 	bl	800e0f0 <dwt_read8bitoffsetreg>
 8011ef2:	7020      	strb	r0, [r4, #0]
 8011ef4:	e330      	b.n	8012558 <dwt_ioctl+0x1e10>
 8011ef6:	2201      	movs	r2, #1
 8011ef8:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8011efc:	f7fc f8f8 	bl	800e0f0 <dwt_read8bitoffsetreg>
 8011f00:	7020      	strb	r0, [r4, #0]
 8011f02:	2500      	movs	r5, #0
 8011f04:	e328      	b.n	8012558 <dwt_ioctl+0x1e10>
 8011f06:	2c00      	cmp	r4, #0
 8011f08:	f000 83da 	beq.w	80126c0 <dwt_ioctl+0x1f78>
 8011f0c:	7824      	ldrb	r4, [r4, #0]
 8011f0e:	2200      	movs	r2, #0
 8011f10:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8011f14:	f7fc f8ec 	bl	800e0f0 <dwt_read8bitoffsetreg>
 8011f18:	f000 039f 	and.w	r3, r0, #159	; 0x9f
 8011f1c:	4323      	orrs	r3, r4
 8011f1e:	2200      	movs	r2, #0
 8011f20:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8011f24:	4630      	mov	r0, r6
 8011f26:	f7fc ff51 	bl	800edcc <dwt_write8bitoffsetreg>
 8011f2a:	2500      	movs	r5, #0
 8011f2c:	e314      	b.n	8012558 <dwt_ioctl+0x1e10>
 8011f2e:	2c00      	cmp	r4, #0
 8011f30:	f000 83c8 	beq.w	80126c4 <dwt_ioctl+0x1f7c>
 8011f34:	7824      	ldrb	r4, [r4, #0]
 8011f36:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
 8011f3a:	d01d      	beq.n	8011f78 <dwt_ioctl+0x1830>
 8011f3c:	2d01      	cmp	r5, #1
 8011f3e:	f040 83c3 	bne.w	80126c8 <dwt_ioctl+0x1f80>
 8011f42:	2502      	movs	r5, #2
 8011f44:	2201      	movs	r2, #1
 8011f46:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8011f4a:	4630      	mov	r0, r6
 8011f4c:	f7fc f8d0 	bl	800e0f0 <dwt_read8bitoffsetreg>
 8011f50:	b9a4      	cbnz	r4, 8011f7c <dwt_ioctl+0x1834>
 8011f52:	ea20 0305 	bic.w	r3, r0, r5
 8011f56:	b2db      	uxtb	r3, r3
 8011f58:	2201      	movs	r2, #1
 8011f5a:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8011f5e:	4630      	mov	r0, r6
 8011f60:	f7fc ff34 	bl	800edcc <dwt_write8bitoffsetreg>
 8011f64:	2200      	movs	r2, #0
 8011f66:	2110      	movs	r1, #16
 8011f68:	4630      	mov	r0, r6
 8011f6a:	f7fc f86c 	bl	800e046 <dwt_read32bitoffsetreg>
 8011f6e:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8011f72:	d00a      	beq.n	8011f8a <dwt_ioctl+0x1842>
 8011f74:	2500      	movs	r5, #0
 8011f76:	e2ef      	b.n	8012558 <dwt_ioctl+0x1e10>
 8011f78:	2504      	movs	r5, #4
 8011f7a:	e7e3      	b.n	8011f44 <dwt_ioctl+0x17fc>
 8011f7c:	2c01      	cmp	r4, #1
 8011f7e:	f040 83a6 	bne.w	80126ce <dwt_ioctl+0x1f86>
 8011f82:	ea40 0305 	orr.w	r3, r0, r5
 8011f86:	b2db      	uxtb	r3, r3
 8011f88:	e7e6      	b.n	8011f58 <dwt_ioctl+0x1810>
 8011f8a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011f8e:	9300      	str	r3, [sp, #0]
 8011f90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011f94:	2200      	movs	r2, #0
 8011f96:	2110      	movs	r1, #16
 8011f98:	4630      	mov	r0, r6
 8011f9a:	f7fd fa39 	bl	800f410 <dwt_modify32bitoffsetreg>
 8011f9e:	2500      	movs	r5, #0
 8011fa0:	e2da      	b.n	8012558 <dwt_ioctl+0x1e10>
 8011fa2:	2c00      	cmp	r4, #0
 8011fa4:	f000 8396 	beq.w	80126d4 <dwt_ioctl+0x1f8c>
 8011fa8:	7823      	ldrb	r3, [r4, #0]
 8011faa:	035b      	lsls	r3, r3, #13
 8011fac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011fb0:	9300      	str	r3, [sp, #0]
 8011fb2:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	4962      	ldr	r1, [pc, #392]	; (8012144 <dwt_ioctl+0x19fc>)
 8011fba:	f7fd ff29 	bl	800fe10 <dwt_modify16bitoffsetreg>
 8011fbe:	2500      	movs	r5, #0
 8011fc0:	e2ca      	b.n	8012558 <dwt_ioctl+0x1e10>
 8011fc2:	2c00      	cmp	r4, #0
 8011fc4:	f000 8388 	beq.w	80126d8 <dwt_ioctl+0x1f90>
 8011fc8:	7825      	ldrb	r5, [r4, #0]
 8011fca:	6862      	ldr	r2, [r4, #4]
 8011fcc:	2a01      	cmp	r2, #1
 8011fce:	bf15      	itete	ne
 8011fd0:	f46f 3360 	mvnne.w	r3, #229376	; 0x38000
 8011fd4:	f46f 43e0 	mvneq.w	r3, #28672	; 0x7000
 8011fd8:	27df      	movne	r7, #223	; 0xdf
 8011fda:	27ef      	moveq	r7, #239	; 0xef
 8011fdc:	bf14      	ite	ne
 8011fde:	f04f 0820 	movne.w	r8, #32
 8011fe2:	f04f 0810 	moveq.w	r8, #16
 8011fe6:	2400      	movs	r4, #0
 8011fe8:	9400      	str	r4, [sp, #0]
 8011fea:	4622      	mov	r2, r4
 8011fec:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8011ff0:	f7fd fa0e 	bl	800f410 <dwt_modify32bitoffsetreg>
 8011ff4:	9400      	str	r4, [sp, #0]
 8011ff6:	463b      	mov	r3, r7
 8011ff8:	4622      	mov	r2, r4
 8011ffa:	4953      	ldr	r1, [pc, #332]	; (8012148 <dwt_ioctl+0x1a00>)
 8011ffc:	4630      	mov	r0, r6
 8011ffe:	f7fd fb77 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 8012002:	2d01      	cmp	r5, #1
 8012004:	d002      	beq.n	801200c <dwt_ioctl+0x18c4>
 8012006:	b155      	cbz	r5, 801201e <dwt_ioctl+0x18d6>
 8012008:	2500      	movs	r5, #0
 801200a:	e2a5      	b.n	8012558 <dwt_ioctl+0x1e10>
 801200c:	4625      	mov	r5, r4
 801200e:	9400      	str	r4, [sp, #0]
 8012010:	463b      	mov	r3, r7
 8012012:	4622      	mov	r2, r4
 8012014:	494d      	ldr	r1, [pc, #308]	; (801214c <dwt_ioctl+0x1a04>)
 8012016:	4630      	mov	r0, r6
 8012018:	f7fd fb6a 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 801201c:	e29c      	b.n	8012558 <dwt_ioctl+0x1e10>
 801201e:	f8cd 8000 	str.w	r8, [sp]
 8012022:	23ff      	movs	r3, #255	; 0xff
 8012024:	2200      	movs	r2, #0
 8012026:	4949      	ldr	r1, [pc, #292]	; (801214c <dwt_ioctl+0x1a04>)
 8012028:	4630      	mov	r0, r6
 801202a:	f7fd fb61 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 801202e:	e293      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012030:	2c00      	cmp	r4, #0
 8012032:	f000 8353 	beq.w	80126dc <dwt_ioctl+0x1f94>
 8012036:	7822      	ldrb	r2, [r4, #0]
 8012038:	f012 0f01 	tst.w	r2, #1
 801203c:	d02c      	beq.n	8012098 <dwt_ioctl+0x1950>
 801203e:	0157      	lsls	r7, r2, #5
 8012040:	f007 0740 	and.w	r7, r7, #64	; 0x40
 8012044:	2440      	movs	r4, #64	; 0x40
 8012046:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 801204a:	f012 0f04 	tst.w	r2, #4
 801204e:	d027      	beq.n	80120a0 <dwt_ioctl+0x1958>
 8012050:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 8012054:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8012058:	0112      	lsls	r2, r2, #4
 801205a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 801205e:	4317      	orrs	r7, r2
 8012060:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8012064:	9200      	str	r2, [sp, #0]
 8012066:	43db      	mvns	r3, r3
 8012068:	2200      	movs	r2, #0
 801206a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801206e:	4630      	mov	r0, r6
 8012070:	f7fd f9ce 	bl	800f410 <dwt_modify32bitoffsetreg>
 8012074:	43e4      	mvns	r4, r4
 8012076:	b2a4      	uxth	r4, r4
 8012078:	2500      	movs	r5, #0
 801207a:	9500      	str	r5, [sp, #0]
 801207c:	4623      	mov	r3, r4
 801207e:	462a      	mov	r2, r5
 8012080:	4931      	ldr	r1, [pc, #196]	; (8012148 <dwt_ioctl+0x1a00>)
 8012082:	4630      	mov	r0, r6
 8012084:	f7fd fec4 	bl	800fe10 <dwt_modify16bitoffsetreg>
 8012088:	9700      	str	r7, [sp, #0]
 801208a:	4623      	mov	r3, r4
 801208c:	462a      	mov	r2, r5
 801208e:	492f      	ldr	r1, [pc, #188]	; (801214c <dwt_ioctl+0x1a04>)
 8012090:	4630      	mov	r0, r6
 8012092:	f7fd febd 	bl	800fe10 <dwt_modify16bitoffsetreg>
 8012096:	e25f      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012098:	2700      	movs	r7, #0
 801209a:	463c      	mov	r4, r7
 801209c:	463b      	mov	r3, r7
 801209e:	e7d4      	b.n	801204a <dwt_ioctl+0x1902>
 80120a0:	2200      	movs	r2, #0
 80120a2:	e7df      	b.n	8012064 <dwt_ioctl+0x191c>
 80120a4:	2308      	movs	r3, #8
 80120a6:	9300      	str	r3, [sp, #0]
 80120a8:	23ff      	movs	r3, #255	; 0xff
 80120aa:	2201      	movs	r2, #1
 80120ac:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80120b0:	f7fd fb1e 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 80120b4:	4c26      	ldr	r4, [pc, #152]	; (8012150 <dwt_ioctl+0x1a08>)
 80120b6:	2302      	movs	r3, #2
 80120b8:	9300      	str	r3, [sp, #0]
 80120ba:	23ff      	movs	r3, #255	; 0xff
 80120bc:	2203      	movs	r2, #3
 80120be:	4621      	mov	r1, r4
 80120c0:	4630      	mov	r0, r6
 80120c2:	f7fd fb15 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 80120c6:	2500      	movs	r5, #0
 80120c8:	9500      	str	r5, [sp, #0]
 80120ca:	23f7      	movs	r3, #247	; 0xf7
 80120cc:	2201      	movs	r2, #1
 80120ce:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80120d2:	4630      	mov	r0, r6
 80120d4:	f7fd fb0c 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 80120d8:	9500      	str	r5, [sp, #0]
 80120da:	23fd      	movs	r3, #253	; 0xfd
 80120dc:	2203      	movs	r2, #3
 80120de:	4621      	mov	r1, r4
 80120e0:	4630      	mov	r0, r6
 80120e2:	f7fd fb05 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 80120e6:	e237      	b.n	8012558 <dwt_ioctl+0x1e10>
 80120e8:	2c00      	cmp	r4, #0
 80120ea:	f000 82f9 	beq.w	80126e0 <dwt_ioctl+0x1f98>
 80120ee:	8863      	ldrh	r3, [r4, #2]
 80120f0:	00db      	lsls	r3, r3, #3
 80120f2:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80120f6:	7822      	ldrb	r2, [r4, #0]
 80120f8:	b10a      	cbz	r2, 80120fe <dwt_ioctl+0x19b6>
 80120fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80120fe:	9300      	str	r3, [sp, #0]
 8012100:	f24f 0307 	movw	r3, #61447	; 0xf007
 8012104:	2200      	movs	r2, #0
 8012106:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801210a:	4630      	mov	r0, r6
 801210c:	f7fd fe80 	bl	800fe10 <dwt_modify16bitoffsetreg>
 8012110:	2500      	movs	r5, #0
 8012112:	e221      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012114:	2500      	movs	r5, #0
 8012116:	9500      	str	r5, [sp, #0]
 8012118:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 801211c:	462a      	mov	r2, r5
 801211e:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
 8012122:	f7fd fe75 	bl	800fe10 <dwt_modify16bitoffsetreg>
 8012126:	e217      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012128:	2c00      	cmp	r4, #0
 801212a:	f000 82db 	beq.w	80126e4 <dwt_ioctl+0x1f9c>
 801212e:	2200      	movs	r2, #0
 8012130:	4908      	ldr	r1, [pc, #32]	; (8012154 <dwt_ioctl+0x1a0c>)
 8012132:	f7fb ff9e 	bl	800e072 <dwt_read16bitoffsetreg>
 8012136:	8020      	strh	r0, [r4, #0]
 8012138:	2500      	movs	r5, #0
 801213a:	e20d      	b.n	8012558 <dwt_ioctl+0x1e10>
 801213c:	0001001c 	.word	0x0001001c
 8012140:	00010018 	.word	0x00010018
 8012144:	000e000c 	.word	0x000e000c
 8012148:	00050008 	.word	0x00050008
 801214c:	0005000c 	.word	0x0005000c
 8012150:	00110008 	.word	0x00110008
 8012154:	00110048 	.word	0x00110048
 8012158:	2c00      	cmp	r4, #0
 801215a:	f000 82c5 	beq.w	80126e8 <dwt_ioctl+0x1fa0>
 801215e:	7823      	ldrb	r3, [r4, #0]
 8012160:	2b01      	cmp	r3, #1
 8012162:	7862      	ldrb	r2, [r4, #1]
 8012164:	78a3      	ldrb	r3, [r4, #2]
 8012166:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 801216a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801216e:	78e2      	ldrb	r2, [r4, #3]
 8012170:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8012174:	7922      	ldrb	r2, [r4, #4]
 8012176:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
 801217a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801217e:	bf0c      	ite	eq
 8012180:	2202      	moveq	r2, #2
 8012182:	2200      	movne	r2, #0
 8012184:	49b6      	ldr	r1, [pc, #728]	; (8012460 <dwt_ioctl+0x1d18>)
 8012186:	f7fc fbd2 	bl	800e92e <dwt_write16bitoffsetreg>
 801218a:	2500      	movs	r5, #0
 801218c:	e1e4      	b.n	8012558 <dwt_ioctl+0x1e10>
 801218e:	2c00      	cmp	r4, #0
 8012190:	f000 82ac 	beq.w	80126ec <dwt_ioctl+0x1fa4>
 8012194:	6863      	ldr	r3, [r4, #4]
 8012196:	7822      	ldrb	r2, [r4, #0]
 8012198:	b13a      	cbz	r2, 80121aa <dwt_ioctl+0x1a62>
 801219a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801219e:	2200      	movs	r2, #0
 80121a0:	49b0      	ldr	r1, [pc, #704]	; (8012464 <dwt_ioctl+0x1d1c>)
 80121a2:	f7fc fc2f 	bl	800ea04 <dwt_write32bitoffsetreg>
 80121a6:	2500      	movs	r5, #0
 80121a8:	e1d6      	b.n	8012558 <dwt_ioctl+0x1e10>
 80121aa:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80121ae:	49ae      	ldr	r1, [pc, #696]	; (8012468 <dwt_ioctl+0x1d20>)
 80121b0:	f7fc fc28 	bl	800ea04 <dwt_write32bitoffsetreg>
 80121b4:	2500      	movs	r5, #0
 80121b6:	e1cf      	b.n	8012558 <dwt_ioctl+0x1e10>
 80121b8:	2c00      	cmp	r4, #0
 80121ba:	f000 8299 	beq.w	80126f0 <dwt_ioctl+0x1fa8>
 80121be:	7823      	ldrb	r3, [r4, #0]
 80121c0:	2401      	movs	r4, #1
 80121c2:	409c      	lsls	r4, r3
 80121c4:	b2e4      	uxtb	r4, r4
 80121c6:	2310      	movs	r3, #16
 80121c8:	9300      	str	r3, [sp, #0]
 80121ca:	23ff      	movs	r3, #255	; 0xff
 80121cc:	2200      	movs	r2, #0
 80121ce:	49a7      	ldr	r1, [pc, #668]	; (801246c <dwt_ioctl+0x1d24>)
 80121d0:	f7fd fa8e 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 80121d4:	43e3      	mvns	r3, r4
 80121d6:	4fa2      	ldr	r7, [pc, #648]	; (8012460 <dwt_ioctl+0x1d18>)
 80121d8:	2500      	movs	r5, #0
 80121da:	9500      	str	r5, [sp, #0]
 80121dc:	b2db      	uxtb	r3, r3
 80121de:	462a      	mov	r2, r5
 80121e0:	4639      	mov	r1, r7
 80121e2:	4630      	mov	r0, r6
 80121e4:	f7fd fa84 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 80121e8:	9400      	str	r4, [sp, #0]
 80121ea:	23ff      	movs	r3, #255	; 0xff
 80121ec:	462a      	mov	r2, r5
 80121ee:	4639      	mov	r1, r7
 80121f0:	4630      	mov	r0, r6
 80121f2:	f7fd fa7d 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 80121f6:	e1af      	b.n	8012558 <dwt_ioctl+0x1e10>
 80121f8:	2c00      	cmp	r4, #0
 80121fa:	f000 827b 	beq.w	80126f4 <dwt_ioctl+0x1fac>
 80121fe:	7822      	ldrb	r2, [r4, #0]
 8012200:	7863      	ldrb	r3, [r4, #1]
 8012202:	b19b      	cbz	r3, 801222c <dwt_ioctl+0x1ae4>
 8012204:	2a00      	cmp	r2, #0
 8012206:	f040 8297 	bne.w	8012738 <dwt_ioctl+0x1ff0>
 801220a:	2400      	movs	r4, #0
 801220c:	9400      	str	r4, [sp, #0]
 801220e:	f06f 73c0 	mvn.w	r3, #25165824	; 0x1800000
 8012212:	4622      	mov	r2, r4
 8012214:	2110      	movs	r1, #16
 8012216:	f7fd f8fb 	bl	800f410 <dwt_modify32bitoffsetreg>
 801221a:	9400      	str	r4, [sp, #0]
 801221c:	4b94      	ldr	r3, [pc, #592]	; (8012470 <dwt_ioctl+0x1d28>)
 801221e:	4622      	mov	r2, r4
 8012220:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8012224:	4630      	mov	r0, r6
 8012226:	f7fd f8f3 	bl	800f410 <dwt_modify32bitoffsetreg>
 801222a:	e017      	b.n	801225c <dwt_ioctl+0x1b14>
 801222c:	2a00      	cmp	r2, #0
 801222e:	f000 8285 	beq.w	801273c <dwt_ioctl+0x1ff4>
 8012232:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 8012236:	2400      	movs	r4, #0
 8012238:	9400      	str	r4, [sp, #0]
 801223a:	f06f 73c0 	mvn.w	r3, #25165824	; 0x1800000
 801223e:	4622      	mov	r2, r4
 8012240:	2110      	movs	r1, #16
 8012242:	4630      	mov	r0, r6
 8012244:	f7fd f8e4 	bl	800f410 <dwt_modify32bitoffsetreg>
 8012248:	9500      	str	r5, [sp, #0]
 801224a:	4b89      	ldr	r3, [pc, #548]	; (8012470 <dwt_ioctl+0x1d28>)
 801224c:	4622      	mov	r2, r4
 801224e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8012252:	4630      	mov	r0, r6
 8012254:	f7fd f8dc 	bl	800f410 <dwt_modify32bitoffsetreg>
 8012258:	f04f 74c0 	mov.w	r4, #25165824	; 0x1800000
 801225c:	9400      	str	r4, [sp, #0]
 801225e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012262:	2200      	movs	r2, #0
 8012264:	2110      	movs	r1, #16
 8012266:	4630      	mov	r0, r6
 8012268:	f7fd f8d2 	bl	800f410 <dwt_modify32bitoffsetreg>
 801226c:	2500      	movs	r5, #0
 801226e:	e173      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012270:	2c00      	cmp	r4, #0
 8012272:	f000 8241 	beq.w	80126f8 <dwt_ioctl+0x1fb0>
 8012276:	7823      	ldrb	r3, [r4, #0]
 8012278:	b93b      	cbnz	r3, 801228a <dwt_ioctl+0x1b42>
 801227a:	2500      	movs	r5, #0
 801227c:	9500      	str	r5, [sp, #0]
 801227e:	23df      	movs	r3, #223	; 0xdf
 8012280:	2203      	movs	r2, #3
 8012282:	497c      	ldr	r1, [pc, #496]	; (8012474 <dwt_ioctl+0x1d2c>)
 8012284:	f7fd fa34 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 8012288:	e166      	b.n	8012558 <dwt_ioctl+0x1e10>
 801228a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 801228e:	9300      	str	r3, [sp, #0]
 8012290:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012294:	2200      	movs	r2, #0
 8012296:	4977      	ldr	r1, [pc, #476]	; (8012474 <dwt_ioctl+0x1d2c>)
 8012298:	f7fd f8ba 	bl	800f410 <dwt_modify32bitoffsetreg>
 801229c:	2500      	movs	r5, #0
 801229e:	e15b      	b.n	8012558 <dwt_ioctl+0x1e10>
 80122a0:	2c00      	cmp	r4, #0
 80122a2:	f000 822b 	beq.w	80126fc <dwt_ioctl+0x1fb4>
 80122a6:	7823      	ldrb	r3, [r4, #0]
 80122a8:	b93b      	cbnz	r3, 80122ba <dwt_ioctl+0x1b72>
 80122aa:	2500      	movs	r5, #0
 80122ac:	9500      	str	r5, [sp, #0]
 80122ae:	237f      	movs	r3, #127	; 0x7f
 80122b0:	2203      	movs	r2, #3
 80122b2:	4971      	ldr	r1, [pc, #452]	; (8012478 <dwt_ioctl+0x1d30>)
 80122b4:	f7fd fa1c 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 80122b8:	e14e      	b.n	8012558 <dwt_ioctl+0x1e10>
 80122ba:	2380      	movs	r3, #128	; 0x80
 80122bc:	9300      	str	r3, [sp, #0]
 80122be:	23ff      	movs	r3, #255	; 0xff
 80122c0:	2203      	movs	r2, #3
 80122c2:	496d      	ldr	r1, [pc, #436]	; (8012478 <dwt_ioctl+0x1d30>)
 80122c4:	f7fd fa14 	bl	800f6f0 <dwt_modify8bitoffsetreg>
 80122c8:	2500      	movs	r5, #0
 80122ca:	e145      	b.n	8012558 <dwt_ioctl+0x1e10>
 80122cc:	2c00      	cmp	r4, #0
 80122ce:	f000 8217 	beq.w	8012700 <dwt_ioctl+0x1fb8>
 80122d2:	b2e3      	uxtb	r3, r4
 80122d4:	1c9a      	adds	r2, r3, #2
 80122d6:	2301      	movs	r3, #1
 80122d8:	4093      	lsls	r3, r2
 80122da:	3b01      	subs	r3, #1
 80122dc:	b2db      	uxtb	r3, r3
 80122de:	2200      	movs	r2, #0
 80122e0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80122e4:	f7fc fd72 	bl	800edcc <dwt_write8bitoffsetreg>
 80122e8:	2500      	movs	r5, #0
 80122ea:	e135      	b.n	8012558 <dwt_ioctl+0x1e10>
 80122ec:	2c00      	cmp	r4, #0
 80122ee:	f000 8209 	beq.w	8012704 <dwt_ioctl+0x1fbc>
 80122f2:	7ae3      	ldrb	r3, [r4, #11]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	f000 8207 	beq.w	8012708 <dwt_ioctl+0x1fc0>
 80122fa:	7b63      	ldrb	r3, [r4, #13]
 80122fc:	2b01      	cmp	r3, #1
 80122fe:	7b20      	ldrb	r0, [r4, #12]
 8012300:	bf94      	ite	ls
 8012302:	2203      	movls	r2, #3
 8012304:	2204      	movhi	r2, #4
 8012306:	2110      	movs	r1, #16
 8012308:	4b5c      	ldr	r3, [pc, #368]	; (801247c <dwt_ioctl+0x1d34>)
 801230a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801230e:	f7fb fdf5 	bl	800defc <get_sts_mnth>
 8012312:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8012316:	9000      	str	r0, [sp, #0]
 8012318:	f64f 7380 	movw	r3, #65408	; 0xff80
 801231c:	2202      	movs	r2, #2
 801231e:	4958      	ldr	r1, [pc, #352]	; (8012480 <dwt_ioctl+0x1d38>)
 8012320:	4630      	mov	r0, r6
 8012322:	f7fd fd75 	bl	800fe10 <dwt_modify16bitoffsetreg>
 8012326:	2394      	movs	r3, #148	; 0x94
 8012328:	2200      	movs	r2, #0
 801232a:	4956      	ldr	r1, [pc, #344]	; (8012484 <dwt_ioctl+0x1d3c>)
 801232c:	4630      	mov	r0, r6
 801232e:	f7fc fd4d 	bl	800edcc <dwt_write8bitoffsetreg>
 8012332:	2500      	movs	r5, #0
 8012334:	e110      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012336:	2c00      	cmp	r4, #0
 8012338:	f000 81e8 	beq.w	801270c <dwt_ioctl+0x1fc4>
 801233c:	2200      	movs	r2, #0
 801233e:	4952      	ldr	r1, [pc, #328]	; (8012488 <dwt_ioctl+0x1d40>)
 8012340:	f7fb fe81 	bl	800e046 <dwt_read32bitoffsetreg>
 8012344:	6020      	str	r0, [r4, #0]
 8012346:	2500      	movs	r5, #0
 8012348:	e106      	b.n	8012558 <dwt_ioctl+0x1e10>
 801234a:	2c00      	cmp	r4, #0
 801234c:	f000 81e0 	beq.w	8012710 <dwt_ioctl+0x1fc8>
 8012350:	2200      	movs	r2, #0
 8012352:	494e      	ldr	r1, [pc, #312]	; (801248c <dwt_ioctl+0x1d44>)
 8012354:	f7fb fe77 	bl	800e046 <dwt_read32bitoffsetreg>
 8012358:	6020      	str	r0, [r4, #0]
 801235a:	2500      	movs	r5, #0
 801235c:	e0fc      	b.n	8012558 <dwt_ioctl+0x1e10>
 801235e:	2c00      	cmp	r4, #0
 8012360:	f000 81d8 	beq.w	8012714 <dwt_ioctl+0x1fcc>
 8012364:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 8012368:	6023      	str	r3, [r4, #0]
 801236a:	2500      	movs	r5, #0
 801236c:	e0f4      	b.n	8012558 <dwt_ioctl+0x1e10>
 801236e:	2c00      	cmp	r4, #0
 8012370:	f000 81d2 	beq.w	8012718 <dwt_ioctl+0x1fd0>
 8012374:	2500      	movs	r5, #0
 8012376:	950a      	str	r5, [sp, #40]	; 0x28
 8012378:	af0c      	add	r7, sp, #48	; 0x30
 801237a:	2319      	movs	r3, #25
 801237c:	f847 3d04 	str.w	r3, [r7, #-4]!
 8012380:	9700      	str	r7, [sp, #0]
 8012382:	2304      	movs	r3, #4
 8012384:	462a      	mov	r2, r5
 8012386:	4942      	ldr	r1, [pc, #264]	; (8012490 <dwt_ioctl+0x1d48>)
 8012388:	f7fc fac6 	bl	800e918 <dwt_writetodevice>
 801238c:	f641 7348 	movw	r3, #8008	; 0x1f48
 8012390:	930b      	str	r3, [sp, #44]	; 0x2c
 8012392:	9700      	str	r7, [sp, #0]
 8012394:	2304      	movs	r3, #4
 8012396:	462a      	mov	r2, r5
 8012398:	493e      	ldr	r1, [pc, #248]	; (8012494 <dwt_ioctl+0x1d4c>)
 801239a:	4630      	mov	r0, r6
 801239c:	f7fc fabc 	bl	800e918 <dwt_writetodevice>
 80123a0:	ab0a      	add	r3, sp, #40	; 0x28
 80123a2:	9300      	str	r3, [sp, #0]
 80123a4:	2304      	movs	r3, #4
 80123a6:	462a      	mov	r2, r5
 80123a8:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 80123ac:	4630      	mov	r0, r6
 80123ae:	f7fb fe40 	bl	800e032 <dwt_readfromdevice>
 80123b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123b4:	6023      	str	r3, [r4, #0]
 80123b6:	e0cf      	b.n	8012558 <dwt_ioctl+0x1e10>
 80123b8:	2c00      	cmp	r4, #0
 80123ba:	f000 81af 	beq.w	801271c <dwt_ioctl+0x1fd4>
 80123be:	2200      	movs	r2, #0
 80123c0:	4935      	ldr	r1, [pc, #212]	; (8012498 <dwt_ioctl+0x1d50>)
 80123c2:	f7fb fe40 	bl	800e046 <dwt_read32bitoffsetreg>
 80123c6:	b280      	uxth	r0, r0
 80123c8:	6020      	str	r0, [r4, #0]
 80123ca:	2200      	movs	r2, #0
 80123cc:	4933      	ldr	r1, [pc, #204]	; (801249c <dwt_ioctl+0x1d54>)
 80123ce:	4630      	mov	r0, r6
 80123d0:	f7fb fe39 	bl	800e046 <dwt_read32bitoffsetreg>
 80123d4:	0d43      	lsrs	r3, r0, #21
 80123d6:	019b      	lsls	r3, r3, #6
 80123d8:	b29b      	uxth	r3, r3
 80123da:	6063      	str	r3, [r4, #4]
 80123dc:	2500      	movs	r5, #0
 80123de:	e0bb      	b.n	8012558 <dwt_ioctl+0x1e10>
 80123e0:	2c00      	cmp	r4, #0
 80123e2:	f000 819d 	beq.w	8012720 <dwt_ioctl+0x1fd8>
 80123e6:	7d63      	ldrb	r3, [r4, #21]
 80123e8:	b133      	cbz	r3, 80123f8 <dwt_ioctl+0x1cb0>
 80123ea:	2b01      	cmp	r3, #1
 80123ec:	d062      	beq.n	80124b4 <dwt_ioctl+0x1d6c>
 80123ee:	2b02      	cmp	r3, #2
 80123f0:	f000 8089 	beq.w	8012506 <dwt_ioctl+0x1dbe>
 80123f4:	23ff      	movs	r3, #255	; 0xff
 80123f6:	e02f      	b.n	8012458 <dwt_ioctl+0x1d10>
 80123f8:	2200      	movs	r2, #0
 80123fa:	4929      	ldr	r1, [pc, #164]	; (80124a0 <dwt_ioctl+0x1d58>)
 80123fc:	f7fb fe23 	bl	800e046 <dwt_read32bitoffsetreg>
 8012400:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8012404:	6020      	str	r0, [r4, #0]
 8012406:	2200      	movs	r2, #0
 8012408:	4926      	ldr	r1, [pc, #152]	; (80124a4 <dwt_ioctl+0x1d5c>)
 801240a:	4630      	mov	r0, r6
 801240c:	f7fb fe1b 	bl	800e046 <dwt_read32bitoffsetreg>
 8012410:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8012414:	6060      	str	r0, [r4, #4]
 8012416:	2200      	movs	r2, #0
 8012418:	4923      	ldr	r1, [pc, #140]	; (80124a8 <dwt_ioctl+0x1d60>)
 801241a:	4630      	mov	r0, r6
 801241c:	f7fb fe13 	bl	800e046 <dwt_read32bitoffsetreg>
 8012420:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8012424:	60a0      	str	r0, [r4, #8]
 8012426:	2200      	movs	r2, #0
 8012428:	4920      	ldr	r1, [pc, #128]	; (80124ac <dwt_ioctl+0x1d64>)
 801242a:	4630      	mov	r0, r6
 801242c:	f7fb fe0b 	bl	800e046 <dwt_read32bitoffsetreg>
 8012430:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8012434:	60e0      	str	r0, [r4, #12]
 8012436:	2200      	movs	r2, #0
 8012438:	491d      	ldr	r1, [pc, #116]	; (80124b0 <dwt_ioctl+0x1d68>)
 801243a:	4630      	mov	r0, r6
 801243c:	f7fb fe03 	bl	800e046 <dwt_read32bitoffsetreg>
 8012440:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8012444:	6120      	str	r0, [r4, #16]
 8012446:	2203      	movs	r2, #3
 8012448:	490f      	ldr	r1, [pc, #60]	; (8012488 <dwt_ioctl+0x1d40>)
 801244a:	4630      	mov	r0, r6
 801244c:	f7fb fe50 	bl	800e0f0 <dwt_read8bitoffsetreg>
 8012450:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8012454:	7520      	strb	r0, [r4, #20]
 8012456:	2300      	movs	r3, #0
 8012458:	75a3      	strb	r3, [r4, #22]
 801245a:	2500      	movs	r5, #0
 801245c:	e07c      	b.n	8012558 <dwt_ioctl+0x1e10>
 801245e:	bf00      	nop
 8012460:	0011003c 	.word	0x0011003c
 8012464:	00110044 	.word	0x00110044
 8012468:	00110040 	.word	0x00110040
 801246c:	00070048 	.word	0x00070048
 8012470:	f7fc0fff 	.word	0xf7fc0fff
 8012474:	000f0028 	.word	0x000f0028
 8012478:	0007001c 	.word	0x0007001c
 801247c:	080160b4 	.word	0x080160b4
 8012480:	000e0014 	.word	0x000e0014
 8012484:	000e0018 	.word	0x000e0018
 8012488:	00030054 	.word	0x00030054
 801248c:	000f004c 	.word	0x000f004c
 8012490:	001f0004 	.word	0x001f0004
 8012494:	001f0008 	.word	0x001f0008
 8012498:	000c0048 	.word	0x000c0048
 801249c:	000c0028 	.word	0x000c0028
 80124a0:	000c0058 	.word	0x000c0058
 80124a4:	000c0030 	.word	0x000c0030
 80124a8:	000c0034 	.word	0x000c0034
 80124ac:	000c0038 	.word	0x000c0038
 80124b0:	000c002c 	.word	0x000c002c
 80124b4:	2200      	movs	r2, #0
 80124b6:	49aa      	ldr	r1, [pc, #680]	; (8012760 <dwt_ioctl+0x2018>)
 80124b8:	f7fb fdc5 	bl	800e046 <dwt_read32bitoffsetreg>
 80124bc:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80124c0:	6020      	str	r0, [r4, #0]
 80124c2:	2200      	movs	r2, #0
 80124c4:	49a7      	ldr	r1, [pc, #668]	; (8012764 <dwt_ioctl+0x201c>)
 80124c6:	4630      	mov	r0, r6
 80124c8:	f7fb fdbd 	bl	800e046 <dwt_read32bitoffsetreg>
 80124cc:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80124d0:	6060      	str	r0, [r4, #4]
 80124d2:	2200      	movs	r2, #0
 80124d4:	49a4      	ldr	r1, [pc, #656]	; (8012768 <dwt_ioctl+0x2020>)
 80124d6:	4630      	mov	r0, r6
 80124d8:	f7fb fdb5 	bl	800e046 <dwt_read32bitoffsetreg>
 80124dc:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80124e0:	60a0      	str	r0, [r4, #8]
 80124e2:	2200      	movs	r2, #0
 80124e4:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 80124e8:	4630      	mov	r0, r6
 80124ea:	f7fb fdac 	bl	800e046 <dwt_read32bitoffsetreg>
 80124ee:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80124f2:	60e0      	str	r0, [r4, #12]
 80124f4:	2200      	movs	r2, #0
 80124f6:	499d      	ldr	r1, [pc, #628]	; (801276c <dwt_ioctl+0x2024>)
 80124f8:	4630      	mov	r0, r6
 80124fa:	f7fb fda4 	bl	800e046 <dwt_read32bitoffsetreg>
 80124fe:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8012502:	6120      	str	r0, [r4, #16]
 8012504:	e79f      	b.n	8012446 <dwt_ioctl+0x1cfe>
 8012506:	2200      	movs	r2, #0
 8012508:	4999      	ldr	r1, [pc, #612]	; (8012770 <dwt_ioctl+0x2028>)
 801250a:	f7fb fd9c 	bl	800e046 <dwt_read32bitoffsetreg>
 801250e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8012512:	6020      	str	r0, [r4, #0]
 8012514:	2200      	movs	r2, #0
 8012516:	4997      	ldr	r1, [pc, #604]	; (8012774 <dwt_ioctl+0x202c>)
 8012518:	4630      	mov	r0, r6
 801251a:	f7fb fd94 	bl	800e046 <dwt_read32bitoffsetreg>
 801251e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8012522:	6060      	str	r0, [r4, #4]
 8012524:	2200      	movs	r2, #0
 8012526:	4994      	ldr	r1, [pc, #592]	; (8012778 <dwt_ioctl+0x2030>)
 8012528:	4630      	mov	r0, r6
 801252a:	f7fb fd8c 	bl	800e046 <dwt_read32bitoffsetreg>
 801252e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8012532:	60a0      	str	r0, [r4, #8]
 8012534:	2200      	movs	r2, #0
 8012536:	4991      	ldr	r1, [pc, #580]	; (801277c <dwt_ioctl+0x2034>)
 8012538:	4630      	mov	r0, r6
 801253a:	f7fb fd84 	bl	800e046 <dwt_read32bitoffsetreg>
 801253e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8012542:	60e0      	str	r0, [r4, #12]
 8012544:	2200      	movs	r2, #0
 8012546:	498e      	ldr	r1, [pc, #568]	; (8012780 <dwt_ioctl+0x2038>)
 8012548:	4630      	mov	r0, r6
 801254a:	f7fb fd7c 	bl	800e046 <dwt_read32bitoffsetreg>
 801254e:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8012552:	6120      	str	r0, [r4, #16]
 8012554:	e777      	b.n	8012446 <dwt_ioctl+0x1cfe>
 8012556:	2500      	movs	r5, #0
 8012558:	4628      	mov	r0, r5
 801255a:	b00d      	add	sp, #52	; 0x34
 801255c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012560:	2500      	movs	r5, #0
 8012562:	e7f9      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012564:	2500      	movs	r5, #0
 8012566:	e7f7      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012568:	2500      	movs	r5, #0
 801256a:	e7f5      	b.n	8012558 <dwt_ioctl+0x1e10>
 801256c:	2500      	movs	r5, #0
 801256e:	e7f3      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012570:	2500      	movs	r5, #0
 8012572:	e7f1      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012574:	2500      	movs	r5, #0
 8012576:	e7ef      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012578:	2500      	movs	r5, #0
 801257a:	e7ed      	b.n	8012558 <dwt_ioctl+0x1e10>
 801257c:	2500      	movs	r5, #0
 801257e:	e7eb      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012580:	2500      	movs	r5, #0
 8012582:	e7e9      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012584:	2500      	movs	r5, #0
 8012586:	e7e7      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012588:	2500      	movs	r5, #0
 801258a:	e7e5      	b.n	8012558 <dwt_ioctl+0x1e10>
 801258c:	2500      	movs	r5, #0
 801258e:	e7e3      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012590:	2500      	movs	r5, #0
 8012592:	e7e1      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012594:	2500      	movs	r5, #0
 8012596:	e7df      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012598:	2500      	movs	r5, #0
 801259a:	e7dd      	b.n	8012558 <dwt_ioctl+0x1e10>
 801259c:	2500      	movs	r5, #0
 801259e:	e7db      	b.n	8012558 <dwt_ioctl+0x1e10>
 80125a0:	2500      	movs	r5, #0
 80125a2:	e7d9      	b.n	8012558 <dwt_ioctl+0x1e10>
 80125a4:	2500      	movs	r5, #0
 80125a6:	e7d7      	b.n	8012558 <dwt_ioctl+0x1e10>
 80125a8:	2500      	movs	r5, #0
 80125aa:	e7d5      	b.n	8012558 <dwt_ioctl+0x1e10>
 80125ac:	2500      	movs	r5, #0
 80125ae:	e7d3      	b.n	8012558 <dwt_ioctl+0x1e10>
 80125b0:	2500      	movs	r5, #0
 80125b2:	e7d1      	b.n	8012558 <dwt_ioctl+0x1e10>
 80125b4:	2500      	movs	r5, #0
 80125b6:	e7cf      	b.n	8012558 <dwt_ioctl+0x1e10>
 80125b8:	2500      	movs	r5, #0
 80125ba:	e7cd      	b.n	8012558 <dwt_ioctl+0x1e10>
 80125bc:	2500      	movs	r5, #0
 80125be:	e7cb      	b.n	8012558 <dwt_ioctl+0x1e10>
 80125c0:	2500      	movs	r5, #0
 80125c2:	e7c9      	b.n	8012558 <dwt_ioctl+0x1e10>
 80125c4:	2500      	movs	r5, #0
 80125c6:	e7c7      	b.n	8012558 <dwt_ioctl+0x1e10>
 80125c8:	2500      	movs	r5, #0
 80125ca:	e7c5      	b.n	8012558 <dwt_ioctl+0x1e10>
 80125cc:	2500      	movs	r5, #0
 80125ce:	e7c3      	b.n	8012558 <dwt_ioctl+0x1e10>
 80125d0:	2500      	movs	r5, #0
 80125d2:	e7c1      	b.n	8012558 <dwt_ioctl+0x1e10>
 80125d4:	2500      	movs	r5, #0
 80125d6:	e7bf      	b.n	8012558 <dwt_ioctl+0x1e10>
 80125d8:	2500      	movs	r5, #0
 80125da:	e7bd      	b.n	8012558 <dwt_ioctl+0x1e10>
 80125dc:	2500      	movs	r5, #0
 80125de:	e7bb      	b.n	8012558 <dwt_ioctl+0x1e10>
 80125e0:	2500      	movs	r5, #0
 80125e2:	e7b9      	b.n	8012558 <dwt_ioctl+0x1e10>
 80125e4:	2500      	movs	r5, #0
 80125e6:	e7b7      	b.n	8012558 <dwt_ioctl+0x1e10>
 80125e8:	2500      	movs	r5, #0
 80125ea:	e7b5      	b.n	8012558 <dwt_ioctl+0x1e10>
 80125ec:	2500      	movs	r5, #0
 80125ee:	e7b3      	b.n	8012558 <dwt_ioctl+0x1e10>
 80125f0:	2500      	movs	r5, #0
 80125f2:	e7b1      	b.n	8012558 <dwt_ioctl+0x1e10>
 80125f4:	2500      	movs	r5, #0
 80125f6:	e7af      	b.n	8012558 <dwt_ioctl+0x1e10>
 80125f8:	2500      	movs	r5, #0
 80125fa:	e7ad      	b.n	8012558 <dwt_ioctl+0x1e10>
 80125fc:	2500      	movs	r5, #0
 80125fe:	e7ab      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012600:	2500      	movs	r5, #0
 8012602:	e7a9      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012604:	2500      	movs	r5, #0
 8012606:	e7a7      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012608:	2500      	movs	r5, #0
 801260a:	e7a5      	b.n	8012558 <dwt_ioctl+0x1e10>
 801260c:	2500      	movs	r5, #0
 801260e:	e7a3      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012610:	2500      	movs	r5, #0
 8012612:	e7a1      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012614:	2500      	movs	r5, #0
 8012616:	e79f      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012618:	2500      	movs	r5, #0
 801261a:	e79d      	b.n	8012558 <dwt_ioctl+0x1e10>
 801261c:	2500      	movs	r5, #0
 801261e:	e79b      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012620:	2500      	movs	r5, #0
 8012622:	e799      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012624:	2500      	movs	r5, #0
 8012626:	e797      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012628:	2500      	movs	r5, #0
 801262a:	e795      	b.n	8012558 <dwt_ioctl+0x1e10>
 801262c:	2500      	movs	r5, #0
 801262e:	e793      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012630:	2500      	movs	r5, #0
 8012632:	e791      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012634:	2500      	movs	r5, #0
 8012636:	e78f      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012638:	2500      	movs	r5, #0
 801263a:	e78d      	b.n	8012558 <dwt_ioctl+0x1e10>
 801263c:	2500      	movs	r5, #0
 801263e:	e78b      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012640:	2500      	movs	r5, #0
 8012642:	e789      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012644:	2500      	movs	r5, #0
 8012646:	e787      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012648:	2500      	movs	r5, #0
 801264a:	e785      	b.n	8012558 <dwt_ioctl+0x1e10>
 801264c:	2500      	movs	r5, #0
 801264e:	e783      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012650:	2500      	movs	r5, #0
 8012652:	e781      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012654:	2500      	movs	r5, #0
 8012656:	e77f      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012658:	2500      	movs	r5, #0
 801265a:	e77d      	b.n	8012558 <dwt_ioctl+0x1e10>
 801265c:	2500      	movs	r5, #0
 801265e:	e77b      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012660:	2500      	movs	r5, #0
 8012662:	e779      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012664:	2500      	movs	r5, #0
 8012666:	e777      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012668:	2500      	movs	r5, #0
 801266a:	e775      	b.n	8012558 <dwt_ioctl+0x1e10>
 801266c:	2500      	movs	r5, #0
 801266e:	e773      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012670:	2500      	movs	r5, #0
 8012672:	e771      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012674:	2500      	movs	r5, #0
 8012676:	e76f      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012678:	2500      	movs	r5, #0
 801267a:	e76d      	b.n	8012558 <dwt_ioctl+0x1e10>
 801267c:	2500      	movs	r5, #0
 801267e:	e76b      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012680:	2500      	movs	r5, #0
 8012682:	e769      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012684:	2500      	movs	r5, #0
 8012686:	e767      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012688:	2500      	movs	r5, #0
 801268a:	e765      	b.n	8012558 <dwt_ioctl+0x1e10>
 801268c:	2500      	movs	r5, #0
 801268e:	e763      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012690:	2500      	movs	r5, #0
 8012692:	e761      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012694:	2500      	movs	r5, #0
 8012696:	e75f      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012698:	2500      	movs	r5, #0
 801269a:	e75d      	b.n	8012558 <dwt_ioctl+0x1e10>
 801269c:	2500      	movs	r5, #0
 801269e:	e75b      	b.n	8012558 <dwt_ioctl+0x1e10>
 80126a0:	2500      	movs	r5, #0
 80126a2:	e759      	b.n	8012558 <dwt_ioctl+0x1e10>
 80126a4:	2500      	movs	r5, #0
 80126a6:	e757      	b.n	8012558 <dwt_ioctl+0x1e10>
 80126a8:	2500      	movs	r5, #0
 80126aa:	e755      	b.n	8012558 <dwt_ioctl+0x1e10>
 80126ac:	2500      	movs	r5, #0
 80126ae:	e753      	b.n	8012558 <dwt_ioctl+0x1e10>
 80126b0:	2500      	movs	r5, #0
 80126b2:	e751      	b.n	8012558 <dwt_ioctl+0x1e10>
 80126b4:	2500      	movs	r5, #0
 80126b6:	e74f      	b.n	8012558 <dwt_ioctl+0x1e10>
 80126b8:	2500      	movs	r5, #0
 80126ba:	e74d      	b.n	8012558 <dwt_ioctl+0x1e10>
 80126bc:	2500      	movs	r5, #0
 80126be:	e74b      	b.n	8012558 <dwt_ioctl+0x1e10>
 80126c0:	2500      	movs	r5, #0
 80126c2:	e749      	b.n	8012558 <dwt_ioctl+0x1e10>
 80126c4:	2500      	movs	r5, #0
 80126c6:	e747      	b.n	8012558 <dwt_ioctl+0x1e10>
 80126c8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80126cc:	e744      	b.n	8012558 <dwt_ioctl+0x1e10>
 80126ce:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80126d2:	e741      	b.n	8012558 <dwt_ioctl+0x1e10>
 80126d4:	2500      	movs	r5, #0
 80126d6:	e73f      	b.n	8012558 <dwt_ioctl+0x1e10>
 80126d8:	2500      	movs	r5, #0
 80126da:	e73d      	b.n	8012558 <dwt_ioctl+0x1e10>
 80126dc:	2500      	movs	r5, #0
 80126de:	e73b      	b.n	8012558 <dwt_ioctl+0x1e10>
 80126e0:	2500      	movs	r5, #0
 80126e2:	e739      	b.n	8012558 <dwt_ioctl+0x1e10>
 80126e4:	2500      	movs	r5, #0
 80126e6:	e737      	b.n	8012558 <dwt_ioctl+0x1e10>
 80126e8:	2500      	movs	r5, #0
 80126ea:	e735      	b.n	8012558 <dwt_ioctl+0x1e10>
 80126ec:	2500      	movs	r5, #0
 80126ee:	e733      	b.n	8012558 <dwt_ioctl+0x1e10>
 80126f0:	2500      	movs	r5, #0
 80126f2:	e731      	b.n	8012558 <dwt_ioctl+0x1e10>
 80126f4:	2500      	movs	r5, #0
 80126f6:	e72f      	b.n	8012558 <dwt_ioctl+0x1e10>
 80126f8:	2500      	movs	r5, #0
 80126fa:	e72d      	b.n	8012558 <dwt_ioctl+0x1e10>
 80126fc:	2500      	movs	r5, #0
 80126fe:	e72b      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012700:	2500      	movs	r5, #0
 8012702:	e729      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012704:	2500      	movs	r5, #0
 8012706:	e727      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012708:	2500      	movs	r5, #0
 801270a:	e725      	b.n	8012558 <dwt_ioctl+0x1e10>
 801270c:	2500      	movs	r5, #0
 801270e:	e723      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012710:	2500      	movs	r5, #0
 8012712:	e721      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012714:	2500      	movs	r5, #0
 8012716:	e71f      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012718:	2500      	movs	r5, #0
 801271a:	e71d      	b.n	8012558 <dwt_ioctl+0x1e10>
 801271c:	2500      	movs	r5, #0
 801271e:	e71b      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012720:	2500      	movs	r5, #0
 8012722:	e719      	b.n	8012558 <dwt_ioctl+0x1e10>
 8012724:	f899 3011 	ldrb.w	r3, [r9, #17]
 8012728:	1e5a      	subs	r2, r3, #1
 801272a:	b2d2      	uxtb	r2, r2
 801272c:	2a01      	cmp	r2, #1
 801272e:	f67e ae60 	bls.w	80113f2 <dwt_ioctl+0xcaa>
 8012732:	2202      	movs	r2, #2
 8012734:	f7fe be07 	b.w	8011346 <dwt_ioctl+0xbfe>
 8012738:	4d12      	ldr	r5, [pc, #72]	; (8012784 <dwt_ioctl+0x203c>)
 801273a:	e57c      	b.n	8012236 <dwt_ioctl+0x1aee>
 801273c:	2400      	movs	r4, #0
 801273e:	9400      	str	r4, [sp, #0]
 8012740:	f06f 73c0 	mvn.w	r3, #25165824	; 0x1800000
 8012744:	4622      	mov	r2, r4
 8012746:	2110      	movs	r1, #16
 8012748:	f7fc fe62 	bl	800f410 <dwt_modify32bitoffsetreg>
 801274c:	9400      	str	r4, [sp, #0]
 801274e:	4b0e      	ldr	r3, [pc, #56]	; (8012788 <dwt_ioctl+0x2040>)
 8012750:	4622      	mov	r2, r4
 8012752:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8012756:	4630      	mov	r0, r6
 8012758:	f7fc fe5a 	bl	800f410 <dwt_modify32bitoffsetreg>
 801275c:	e57e      	b.n	801225c <dwt_ioctl+0x1b14>
 801275e:	bf00      	nop
 8012760:	000d0020 	.word	0x000d0020
 8012764:	000c0064 	.word	0x000c0064
 8012768:	000c0068 	.word	0x000c0068
 801276c:	000c0060 	.word	0x000c0060
 8012770:	000d0068 	.word	0x000d0068
 8012774:	000d0040 	.word	0x000d0040
 8012778:	000d0044 	.word	0x000d0044
 801277c:	000d0048 	.word	0x000d0048
 8012780:	000d003c 	.word	0x000d003c
 8012784:	08001000 	.word	0x08001000
 8012788:	f7fc0fff 	.word	0xf7fc0fff

0801278c <_init>:
 801278c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801278e:	b085      	sub	sp, #20
 8012790:	4604      	mov	r4, r0
 8012792:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012794:	6819      	ldr	r1, [r3, #0]
 8012796:	f7fd fea1 	bl	80104dc <ull_initialise>
 801279a:	4606      	mov	r6, r0
 801279c:	6823      	ldr	r3, [r4, #0]
 801279e:	691b      	ldr	r3, [r3, #16]
 80127a0:	4798      	blx	r3
 80127a2:	ab03      	add	r3, sp, #12
 80127a4:	2200      	movs	r2, #0
 80127a6:	4611      	mov	r1, r2
 80127a8:	4620      	mov	r0, r4
 80127aa:	f7fd ffcd 	bl	8010748 <dwt_ioctl>
 80127ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80127b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127b2:	6819      	ldr	r1, [r3, #0]
 80127b4:	4620      	mov	r0, r4
 80127b6:	f7fd fc43 	bl	8010040 <ull_configure>
 80127ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80127bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127be:	6859      	ldr	r1, [r3, #4]
 80127c0:	4620      	mov	r0, r4
 80127c2:	f7fd f993 	bl	800faec <ull_configuretxrf>
 80127c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80127c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127ca:	89d9      	ldrh	r1, [r3, #14]
 80127cc:	4620      	mov	r0, r4
 80127ce:	f7fc f8be 	bl	800e94e <ull_setrxantennadelay>
 80127d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80127d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127d6:	8999      	ldrh	r1, [r3, #12]
 80127d8:	4620      	mov	r0, r4
 80127da:	f7fc f8c0 	bl	800e95e <ull_settxantennadelay>
 80127de:	2100      	movs	r1, #0
 80127e0:	4620      	mov	r0, r4
 80127e2:	f7fc f94a 	bl	800ea7a <ull_setrxaftertxdelay>
 80127e6:	2500      	movs	r5, #0
 80127e8:	9500      	str	r5, [sp, #0]
 80127ea:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 80127ee:	462a      	mov	r2, r5
 80127f0:	2110      	movs	r1, #16
 80127f2:	4620      	mov	r0, r4
 80127f4:	f7fd fb0c 	bl	800fe10 <dwt_modify16bitoffsetreg>
 80127f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80127fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127fc:	895a      	ldrh	r2, [r3, #10]
 80127fe:	8919      	ldrh	r1, [r3, #8]
 8012800:	4620      	mov	r0, r4
 8012802:	f7fd fa03 	bl	800fc0c <ull_configureframefilter>
 8012806:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801280a:	8a1b      	ldrh	r3, [r3, #16]
 801280c:	2202      	movs	r2, #2
 801280e:	210c      	movs	r1, #12
 8012810:	4620      	mov	r0, r4
 8012812:	f7fc f88c 	bl	800e92e <dwt_write16bitoffsetreg>
 8012816:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801281a:	8a5b      	ldrh	r3, [r3, #18]
 801281c:	462a      	mov	r2, r5
 801281e:	210c      	movs	r1, #12
 8012820:	4620      	mov	r0, r4
 8012822:	f7fc f884 	bl	800e92e <dwt_write16bitoffsetreg>
 8012826:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012828:	7a19      	ldrb	r1, [r3, #8]
 801282a:	4620      	mov	r0, r4
 801282c:	f7fd fb2e 	bl	800fe8c <ull_setleds>
 8012830:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012832:	68d9      	ldr	r1, [r3, #12]
 8012834:	4620      	mov	r0, r4
 8012836:	f7fc f949 	bl	800eacc <ull_setlnapamode>
 801283a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801283c:	7e0b      	ldrb	r3, [r1, #24]
 801283e:	694a      	ldr	r2, [r1, #20]
 8012840:	6909      	ldr	r1, [r1, #16]
 8012842:	4620      	mov	r0, r4
 8012844:	f7fd fa68 	bl	800fd18 <ull_setinterrupt>
 8012848:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801284a:	7f9a      	ldrb	r2, [r3, #30]
 801284c:	8b99      	ldrh	r1, [r3, #28]
 801284e:	4620      	mov	r0, r4
 8012850:	f7fc fb90 	bl	800ef74 <ull_configuresleep>
 8012854:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8012856:	7b53      	ldrb	r3, [r2, #13]
 8012858:	2b2e      	cmp	r3, #46	; 0x2e
 801285a:	d005      	beq.n	8012868 <_init+0xdc>
 801285c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801285e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012862:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 8012866:	d00a      	beq.n	801287e <_init+0xf2>
 8012868:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801286a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801286e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012872:	7353      	strb	r3, [r2, #13]
 8012874:	2200      	movs	r2, #0
 8012876:	4928      	ldr	r1, [pc, #160]	; (8012918 <_init+0x18c>)
 8012878:	4620      	mov	r0, r4
 801287a:	f7fc faa7 	bl	800edcc <dwt_write8bitoffsetreg>
 801287e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012880:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 8012884:	4620      	mov	r0, r4
 8012886:	f7fc ff63 	bl	800f750 <ull_configciadiag>
 801288a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801288c:	6a19      	ldr	r1, [r3, #32]
 801288e:	4620      	mov	r0, r4
 8012890:	f7fc f93c 	bl	800eb0c <ull_configurestskey>
 8012894:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012896:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8012898:	4620      	mov	r0, r4
 801289a:	f7fc f95b 	bl	800eb54 <ull_configurestsiv>
 801289e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80128a0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80128a4:	bb9b      	cbnz	r3, 801290e <_init+0x182>
 80128a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80128a8:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 80128ac:	4620      	mov	r0, r4
 80128ae:	f7fc fb05 	bl	800eebc <ull_configeventcounters>
 80128b2:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
 80128b6:	2d00      	cmp	r5, #0
 80128b8:	db26      	blt.n	8012908 <_init+0x17c>
 80128ba:	2301      	movs	r3, #1
 80128bc:	fa03 f505 	lsl.w	r5, r3, r5
 80128c0:	b2af      	uxth	r7, r5
 80128c2:	4a16      	ldr	r2, [pc, #88]	; (801291c <_init+0x190>)
 80128c4:	4639      	mov	r1, r7
 80128c6:	4620      	mov	r0, r4
 80128c8:	f7fc fed4 	bl	800f674 <ull_setgpiomode>
 80128cc:	f10d 030a 	add.w	r3, sp, #10
 80128d0:	9300      	str	r3, [sp, #0]
 80128d2:	2302      	movs	r3, #2
 80128d4:	2200      	movs	r2, #0
 80128d6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80128da:	4620      	mov	r0, r4
 80128dc:	f7fb fba9 	bl	800e032 <dwt_readfromdevice>
 80128e0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80128e4:	ea23 0305 	bic.w	r3, r3, r5
 80128e8:	f8ad 300a 	strh.w	r3, [sp, #10]
 80128ec:	2200      	movs	r2, #0
 80128ee:	490c      	ldr	r1, [pc, #48]	; (8012920 <_init+0x194>)
 80128f0:	4620      	mov	r0, r4
 80128f2:	f7fc f81c 	bl	800e92e <dwt_write16bitoffsetreg>
 80128f6:	f994 204d 	ldrsb.w	r2, [r4, #77]	; 0x4d
 80128fa:	fab2 f282 	clz	r2, r2
 80128fe:	0952      	lsrs	r2, r2, #5
 8012900:	4639      	mov	r1, r7
 8012902:	4620      	mov	r0, r4
 8012904:	f7fd fb40 	bl	800ff88 <ull_setgpiovalue>
 8012908:	4630      	mov	r0, r6
 801290a:	b005      	add	sp, #20
 801290c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801290e:	4620      	mov	r0, r4
 8012910:	f7fc ff54 	bl	800f7bc <ull_configurestsloadiv>
 8012914:	e7c7      	b.n	80128a6 <_init+0x11a>
 8012916:	bf00      	nop
 8012918:	00090014 	.word	0x00090014
 801291c:	01200492 	.word	0x01200492
 8012920:	00050008 	.word	0x00050008

08012924 <__register_exitproc>:
 8012924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012928:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80129e4 <__register_exitproc+0xc0>
 801292c:	4606      	mov	r6, r0
 801292e:	f8d8 0000 	ldr.w	r0, [r8]
 8012932:	461f      	mov	r7, r3
 8012934:	460d      	mov	r5, r1
 8012936:	4691      	mov	r9, r2
 8012938:	f001 f93b 	bl	8013bb2 <__retarget_lock_acquire_recursive>
 801293c:	4b25      	ldr	r3, [pc, #148]	; (80129d4 <__register_exitproc+0xb0>)
 801293e:	681c      	ldr	r4, [r3, #0]
 8012940:	b934      	cbnz	r4, 8012950 <__register_exitproc+0x2c>
 8012942:	4c25      	ldr	r4, [pc, #148]	; (80129d8 <__register_exitproc+0xb4>)
 8012944:	601c      	str	r4, [r3, #0]
 8012946:	4b25      	ldr	r3, [pc, #148]	; (80129dc <__register_exitproc+0xb8>)
 8012948:	b113      	cbz	r3, 8012950 <__register_exitproc+0x2c>
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8012950:	6863      	ldr	r3, [r4, #4]
 8012952:	2b1f      	cmp	r3, #31
 8012954:	dd07      	ble.n	8012966 <__register_exitproc+0x42>
 8012956:	f8d8 0000 	ldr.w	r0, [r8]
 801295a:	f001 f92c 	bl	8013bb6 <__retarget_lock_release_recursive>
 801295e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012966:	b34e      	cbz	r6, 80129bc <__register_exitproc+0x98>
 8012968:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801296c:	b988      	cbnz	r0, 8012992 <__register_exitproc+0x6e>
 801296e:	4b1c      	ldr	r3, [pc, #112]	; (80129e0 <__register_exitproc+0xbc>)
 8012970:	b923      	cbnz	r3, 801297c <__register_exitproc+0x58>
 8012972:	f8d8 0000 	ldr.w	r0, [r8]
 8012976:	f001 f91d 	bl	8013bb4 <__retarget_lock_release>
 801297a:	e7f0      	b.n	801295e <__register_exitproc+0x3a>
 801297c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8012980:	f001 f992 	bl	8013ca8 <malloc>
 8012984:	2800      	cmp	r0, #0
 8012986:	d0f4      	beq.n	8012972 <__register_exitproc+0x4e>
 8012988:	2300      	movs	r3, #0
 801298a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801298e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8012992:	6863      	ldr	r3, [r4, #4]
 8012994:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8012998:	2201      	movs	r2, #1
 801299a:	409a      	lsls	r2, r3
 801299c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80129a0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80129a4:	4313      	orrs	r3, r2
 80129a6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80129aa:	2e02      	cmp	r6, #2
 80129ac:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80129b0:	bf02      	ittt	eq
 80129b2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80129b6:	4313      	orreq	r3, r2
 80129b8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80129bc:	6863      	ldr	r3, [r4, #4]
 80129be:	f8d8 0000 	ldr.w	r0, [r8]
 80129c2:	1c5a      	adds	r2, r3, #1
 80129c4:	3302      	adds	r3, #2
 80129c6:	6062      	str	r2, [r4, #4]
 80129c8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80129cc:	f001 f8f3 	bl	8013bb6 <__retarget_lock_release_recursive>
 80129d0:	2000      	movs	r0, #0
 80129d2:	e7c6      	b.n	8012962 <__register_exitproc+0x3e>
 80129d4:	200004f8 	.word	0x200004f8
 80129d8:	2000046c 	.word	0x2000046c
 80129dc:	080164a0 	.word	0x080164a0
 80129e0:	08013ca9 	.word	0x08013ca9
 80129e4:	2000005c 	.word	0x2000005c

080129e8 <abort>:
 80129e8:	b508      	push	{r3, lr}
 80129ea:	2006      	movs	r0, #6
 80129ec:	f002 fddc 	bl	80155a8 <raise>
 80129f0:	2001      	movs	r0, #1
 80129f2:	f7ef fca3 	bl	800233c <_exit>
	...

080129f8 <__assert_func>:
 80129f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80129fa:	4614      	mov	r4, r2
 80129fc:	461a      	mov	r2, r3
 80129fe:	4b09      	ldr	r3, [pc, #36]	; (8012a24 <__assert_func+0x2c>)
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	4605      	mov	r5, r0
 8012a04:	68d8      	ldr	r0, [r3, #12]
 8012a06:	b14c      	cbz	r4, 8012a1c <__assert_func+0x24>
 8012a08:	4b07      	ldr	r3, [pc, #28]	; (8012a28 <__assert_func+0x30>)
 8012a0a:	9100      	str	r1, [sp, #0]
 8012a0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012a10:	4906      	ldr	r1, [pc, #24]	; (8012a2c <__assert_func+0x34>)
 8012a12:	462b      	mov	r3, r5
 8012a14:	f001 f850 	bl	8013ab8 <fiprintf>
 8012a18:	f7ff ffe6 	bl	80129e8 <abort>
 8012a1c:	4b04      	ldr	r3, [pc, #16]	; (8012a30 <__assert_func+0x38>)
 8012a1e:	461c      	mov	r4, r3
 8012a20:	e7f3      	b.n	8012a0a <__assert_func+0x12>
 8012a22:	bf00      	nop
 8012a24:	20000060 	.word	0x20000060
 8012a28:	080160c2 	.word	0x080160c2
 8012a2c:	080160cf 	.word	0x080160cf
 8012a30:	080160fd 	.word	0x080160fd

08012a34 <atexit>:
 8012a34:	2300      	movs	r3, #0
 8012a36:	4601      	mov	r1, r0
 8012a38:	461a      	mov	r2, r3
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f7ff bf72 	b.w	8012924 <__register_exitproc>

08012a40 <_close_r>:
 8012a40:	b538      	push	{r3, r4, r5, lr}
 8012a42:	4d06      	ldr	r5, [pc, #24]	; (8012a5c <_close_r+0x1c>)
 8012a44:	2300      	movs	r3, #0
 8012a46:	4604      	mov	r4, r0
 8012a48:	4608      	mov	r0, r1
 8012a4a:	602b      	str	r3, [r5, #0]
 8012a4c:	f7ef fc80 	bl	8002350 <_close>
 8012a50:	1c43      	adds	r3, r0, #1
 8012a52:	d102      	bne.n	8012a5a <_close_r+0x1a>
 8012a54:	682b      	ldr	r3, [r5, #0]
 8012a56:	b103      	cbz	r3, 8012a5a <_close_r+0x1a>
 8012a58:	6023      	str	r3, [r4, #0]
 8012a5a:	bd38      	pop	{r3, r4, r5, pc}
 8012a5c:	20000610 	.word	0x20000610

08012a60 <quorem>:
 8012a60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a64:	6903      	ldr	r3, [r0, #16]
 8012a66:	690c      	ldr	r4, [r1, #16]
 8012a68:	42a3      	cmp	r3, r4
 8012a6a:	4607      	mov	r7, r0
 8012a6c:	f2c0 8081 	blt.w	8012b72 <quorem+0x112>
 8012a70:	3c01      	subs	r4, #1
 8012a72:	f101 0814 	add.w	r8, r1, #20
 8012a76:	f100 0514 	add.w	r5, r0, #20
 8012a7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012a7e:	9301      	str	r3, [sp, #4]
 8012a80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012a84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012a88:	3301      	adds	r3, #1
 8012a8a:	429a      	cmp	r2, r3
 8012a8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012a90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012a94:	fbb2 f6f3 	udiv	r6, r2, r3
 8012a98:	d331      	bcc.n	8012afe <quorem+0x9e>
 8012a9a:	f04f 0e00 	mov.w	lr, #0
 8012a9e:	4640      	mov	r0, r8
 8012aa0:	46ac      	mov	ip, r5
 8012aa2:	46f2      	mov	sl, lr
 8012aa4:	f850 2b04 	ldr.w	r2, [r0], #4
 8012aa8:	b293      	uxth	r3, r2
 8012aaa:	fb06 e303 	mla	r3, r6, r3, lr
 8012aae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012ab2:	b29b      	uxth	r3, r3
 8012ab4:	ebaa 0303 	sub.w	r3, sl, r3
 8012ab8:	f8dc a000 	ldr.w	sl, [ip]
 8012abc:	0c12      	lsrs	r2, r2, #16
 8012abe:	fa13 f38a 	uxtah	r3, r3, sl
 8012ac2:	fb06 e202 	mla	r2, r6, r2, lr
 8012ac6:	9300      	str	r3, [sp, #0]
 8012ac8:	9b00      	ldr	r3, [sp, #0]
 8012aca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012ace:	b292      	uxth	r2, r2
 8012ad0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012ad4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012ad8:	f8bd 3000 	ldrh.w	r3, [sp]
 8012adc:	4581      	cmp	r9, r0
 8012ade:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012ae2:	f84c 3b04 	str.w	r3, [ip], #4
 8012ae6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012aea:	d2db      	bcs.n	8012aa4 <quorem+0x44>
 8012aec:	f855 300b 	ldr.w	r3, [r5, fp]
 8012af0:	b92b      	cbnz	r3, 8012afe <quorem+0x9e>
 8012af2:	9b01      	ldr	r3, [sp, #4]
 8012af4:	3b04      	subs	r3, #4
 8012af6:	429d      	cmp	r5, r3
 8012af8:	461a      	mov	r2, r3
 8012afa:	d32e      	bcc.n	8012b5a <quorem+0xfa>
 8012afc:	613c      	str	r4, [r7, #16]
 8012afe:	4638      	mov	r0, r7
 8012b00:	f001 fbba 	bl	8014278 <__mcmp>
 8012b04:	2800      	cmp	r0, #0
 8012b06:	db24      	blt.n	8012b52 <quorem+0xf2>
 8012b08:	3601      	adds	r6, #1
 8012b0a:	4628      	mov	r0, r5
 8012b0c:	f04f 0c00 	mov.w	ip, #0
 8012b10:	f858 2b04 	ldr.w	r2, [r8], #4
 8012b14:	f8d0 e000 	ldr.w	lr, [r0]
 8012b18:	b293      	uxth	r3, r2
 8012b1a:	ebac 0303 	sub.w	r3, ip, r3
 8012b1e:	0c12      	lsrs	r2, r2, #16
 8012b20:	fa13 f38e 	uxtah	r3, r3, lr
 8012b24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012b28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012b2c:	b29b      	uxth	r3, r3
 8012b2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012b32:	45c1      	cmp	r9, r8
 8012b34:	f840 3b04 	str.w	r3, [r0], #4
 8012b38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012b3c:	d2e8      	bcs.n	8012b10 <quorem+0xb0>
 8012b3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012b42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012b46:	b922      	cbnz	r2, 8012b52 <quorem+0xf2>
 8012b48:	3b04      	subs	r3, #4
 8012b4a:	429d      	cmp	r5, r3
 8012b4c:	461a      	mov	r2, r3
 8012b4e:	d30a      	bcc.n	8012b66 <quorem+0x106>
 8012b50:	613c      	str	r4, [r7, #16]
 8012b52:	4630      	mov	r0, r6
 8012b54:	b003      	add	sp, #12
 8012b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b5a:	6812      	ldr	r2, [r2, #0]
 8012b5c:	3b04      	subs	r3, #4
 8012b5e:	2a00      	cmp	r2, #0
 8012b60:	d1cc      	bne.n	8012afc <quorem+0x9c>
 8012b62:	3c01      	subs	r4, #1
 8012b64:	e7c7      	b.n	8012af6 <quorem+0x96>
 8012b66:	6812      	ldr	r2, [r2, #0]
 8012b68:	3b04      	subs	r3, #4
 8012b6a:	2a00      	cmp	r2, #0
 8012b6c:	d1f0      	bne.n	8012b50 <quorem+0xf0>
 8012b6e:	3c01      	subs	r4, #1
 8012b70:	e7eb      	b.n	8012b4a <quorem+0xea>
 8012b72:	2000      	movs	r0, #0
 8012b74:	e7ee      	b.n	8012b54 <quorem+0xf4>
	...

08012b78 <_dtoa_r>:
 8012b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b7c:	ed2d 8b04 	vpush	{d8-d9}
 8012b80:	ec57 6b10 	vmov	r6, r7, d0
 8012b84:	b093      	sub	sp, #76	; 0x4c
 8012b86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012b88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012b8c:	9106      	str	r1, [sp, #24]
 8012b8e:	ee10 aa10 	vmov	sl, s0
 8012b92:	4604      	mov	r4, r0
 8012b94:	9209      	str	r2, [sp, #36]	; 0x24
 8012b96:	930c      	str	r3, [sp, #48]	; 0x30
 8012b98:	46bb      	mov	fp, r7
 8012b9a:	b975      	cbnz	r5, 8012bba <_dtoa_r+0x42>
 8012b9c:	2010      	movs	r0, #16
 8012b9e:	f001 f883 	bl	8013ca8 <malloc>
 8012ba2:	4602      	mov	r2, r0
 8012ba4:	6260      	str	r0, [r4, #36]	; 0x24
 8012ba6:	b920      	cbnz	r0, 8012bb2 <_dtoa_r+0x3a>
 8012ba8:	4ba7      	ldr	r3, [pc, #668]	; (8012e48 <_dtoa_r+0x2d0>)
 8012baa:	21ea      	movs	r1, #234	; 0xea
 8012bac:	48a7      	ldr	r0, [pc, #668]	; (8012e4c <_dtoa_r+0x2d4>)
 8012bae:	f7ff ff23 	bl	80129f8 <__assert_func>
 8012bb2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012bb6:	6005      	str	r5, [r0, #0]
 8012bb8:	60c5      	str	r5, [r0, #12]
 8012bba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012bbc:	6819      	ldr	r1, [r3, #0]
 8012bbe:	b151      	cbz	r1, 8012bd6 <_dtoa_r+0x5e>
 8012bc0:	685a      	ldr	r2, [r3, #4]
 8012bc2:	604a      	str	r2, [r1, #4]
 8012bc4:	2301      	movs	r3, #1
 8012bc6:	4093      	lsls	r3, r2
 8012bc8:	608b      	str	r3, [r1, #8]
 8012bca:	4620      	mov	r0, r4
 8012bcc:	f001 f912 	bl	8013df4 <_Bfree>
 8012bd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012bd2:	2200      	movs	r2, #0
 8012bd4:	601a      	str	r2, [r3, #0]
 8012bd6:	1e3b      	subs	r3, r7, #0
 8012bd8:	bfaa      	itet	ge
 8012bda:	2300      	movge	r3, #0
 8012bdc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8012be0:	f8c8 3000 	strge.w	r3, [r8]
 8012be4:	4b9a      	ldr	r3, [pc, #616]	; (8012e50 <_dtoa_r+0x2d8>)
 8012be6:	bfbc      	itt	lt
 8012be8:	2201      	movlt	r2, #1
 8012bea:	f8c8 2000 	strlt.w	r2, [r8]
 8012bee:	ea33 030b 	bics.w	r3, r3, fp
 8012bf2:	d11b      	bne.n	8012c2c <_dtoa_r+0xb4>
 8012bf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012bf6:	f242 730f 	movw	r3, #9999	; 0x270f
 8012bfa:	6013      	str	r3, [r2, #0]
 8012bfc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012c00:	4333      	orrs	r3, r6
 8012c02:	f000 8592 	beq.w	801372a <_dtoa_r+0xbb2>
 8012c06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012c08:	b963      	cbnz	r3, 8012c24 <_dtoa_r+0xac>
 8012c0a:	4b92      	ldr	r3, [pc, #584]	; (8012e54 <_dtoa_r+0x2dc>)
 8012c0c:	e022      	b.n	8012c54 <_dtoa_r+0xdc>
 8012c0e:	4b92      	ldr	r3, [pc, #584]	; (8012e58 <_dtoa_r+0x2e0>)
 8012c10:	9301      	str	r3, [sp, #4]
 8012c12:	3308      	adds	r3, #8
 8012c14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012c16:	6013      	str	r3, [r2, #0]
 8012c18:	9801      	ldr	r0, [sp, #4]
 8012c1a:	b013      	add	sp, #76	; 0x4c
 8012c1c:	ecbd 8b04 	vpop	{d8-d9}
 8012c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c24:	4b8b      	ldr	r3, [pc, #556]	; (8012e54 <_dtoa_r+0x2dc>)
 8012c26:	9301      	str	r3, [sp, #4]
 8012c28:	3303      	adds	r3, #3
 8012c2a:	e7f3      	b.n	8012c14 <_dtoa_r+0x9c>
 8012c2c:	2200      	movs	r2, #0
 8012c2e:	2300      	movs	r3, #0
 8012c30:	4650      	mov	r0, sl
 8012c32:	4659      	mov	r1, fp
 8012c34:	f7ed ff82 	bl	8000b3c <__aeabi_dcmpeq>
 8012c38:	ec4b ab19 	vmov	d9, sl, fp
 8012c3c:	4680      	mov	r8, r0
 8012c3e:	b158      	cbz	r0, 8012c58 <_dtoa_r+0xe0>
 8012c40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012c42:	2301      	movs	r3, #1
 8012c44:	6013      	str	r3, [r2, #0]
 8012c46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	f000 856b 	beq.w	8013724 <_dtoa_r+0xbac>
 8012c4e:	4883      	ldr	r0, [pc, #524]	; (8012e5c <_dtoa_r+0x2e4>)
 8012c50:	6018      	str	r0, [r3, #0]
 8012c52:	1e43      	subs	r3, r0, #1
 8012c54:	9301      	str	r3, [sp, #4]
 8012c56:	e7df      	b.n	8012c18 <_dtoa_r+0xa0>
 8012c58:	ec4b ab10 	vmov	d0, sl, fp
 8012c5c:	aa10      	add	r2, sp, #64	; 0x40
 8012c5e:	a911      	add	r1, sp, #68	; 0x44
 8012c60:	4620      	mov	r0, r4
 8012c62:	f001 fbaf 	bl	80143c4 <__d2b>
 8012c66:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8012c6a:	ee08 0a10 	vmov	s16, r0
 8012c6e:	2d00      	cmp	r5, #0
 8012c70:	f000 8084 	beq.w	8012d7c <_dtoa_r+0x204>
 8012c74:	ee19 3a90 	vmov	r3, s19
 8012c78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012c7c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012c80:	4656      	mov	r6, sl
 8012c82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8012c86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012c8a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8012c8e:	4b74      	ldr	r3, [pc, #464]	; (8012e60 <_dtoa_r+0x2e8>)
 8012c90:	2200      	movs	r2, #0
 8012c92:	4630      	mov	r0, r6
 8012c94:	4639      	mov	r1, r7
 8012c96:	f7ed fb31 	bl	80002fc <__aeabi_dsub>
 8012c9a:	a365      	add	r3, pc, #404	; (adr r3, 8012e30 <_dtoa_r+0x2b8>)
 8012c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ca0:	f7ed fce4 	bl	800066c <__aeabi_dmul>
 8012ca4:	a364      	add	r3, pc, #400	; (adr r3, 8012e38 <_dtoa_r+0x2c0>)
 8012ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012caa:	f7ed fb29 	bl	8000300 <__adddf3>
 8012cae:	4606      	mov	r6, r0
 8012cb0:	4628      	mov	r0, r5
 8012cb2:	460f      	mov	r7, r1
 8012cb4:	f7ed fc70 	bl	8000598 <__aeabi_i2d>
 8012cb8:	a361      	add	r3, pc, #388	; (adr r3, 8012e40 <_dtoa_r+0x2c8>)
 8012cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cbe:	f7ed fcd5 	bl	800066c <__aeabi_dmul>
 8012cc2:	4602      	mov	r2, r0
 8012cc4:	460b      	mov	r3, r1
 8012cc6:	4630      	mov	r0, r6
 8012cc8:	4639      	mov	r1, r7
 8012cca:	f7ed fb19 	bl	8000300 <__adddf3>
 8012cce:	4606      	mov	r6, r0
 8012cd0:	460f      	mov	r7, r1
 8012cd2:	f7ed ff7b 	bl	8000bcc <__aeabi_d2iz>
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	9000      	str	r0, [sp, #0]
 8012cda:	2300      	movs	r3, #0
 8012cdc:	4630      	mov	r0, r6
 8012cde:	4639      	mov	r1, r7
 8012ce0:	f7ed ff36 	bl	8000b50 <__aeabi_dcmplt>
 8012ce4:	b150      	cbz	r0, 8012cfc <_dtoa_r+0x184>
 8012ce6:	9800      	ldr	r0, [sp, #0]
 8012ce8:	f7ed fc56 	bl	8000598 <__aeabi_i2d>
 8012cec:	4632      	mov	r2, r6
 8012cee:	463b      	mov	r3, r7
 8012cf0:	f7ed ff24 	bl	8000b3c <__aeabi_dcmpeq>
 8012cf4:	b910      	cbnz	r0, 8012cfc <_dtoa_r+0x184>
 8012cf6:	9b00      	ldr	r3, [sp, #0]
 8012cf8:	3b01      	subs	r3, #1
 8012cfa:	9300      	str	r3, [sp, #0]
 8012cfc:	9b00      	ldr	r3, [sp, #0]
 8012cfe:	2b16      	cmp	r3, #22
 8012d00:	d85a      	bhi.n	8012db8 <_dtoa_r+0x240>
 8012d02:	9a00      	ldr	r2, [sp, #0]
 8012d04:	4b57      	ldr	r3, [pc, #348]	; (8012e64 <_dtoa_r+0x2ec>)
 8012d06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d0e:	ec51 0b19 	vmov	r0, r1, d9
 8012d12:	f7ed ff1d 	bl	8000b50 <__aeabi_dcmplt>
 8012d16:	2800      	cmp	r0, #0
 8012d18:	d050      	beq.n	8012dbc <_dtoa_r+0x244>
 8012d1a:	9b00      	ldr	r3, [sp, #0]
 8012d1c:	3b01      	subs	r3, #1
 8012d1e:	9300      	str	r3, [sp, #0]
 8012d20:	2300      	movs	r3, #0
 8012d22:	930b      	str	r3, [sp, #44]	; 0x2c
 8012d24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012d26:	1b5d      	subs	r5, r3, r5
 8012d28:	1e6b      	subs	r3, r5, #1
 8012d2a:	9305      	str	r3, [sp, #20]
 8012d2c:	bf45      	ittet	mi
 8012d2e:	f1c5 0301 	rsbmi	r3, r5, #1
 8012d32:	9304      	strmi	r3, [sp, #16]
 8012d34:	2300      	movpl	r3, #0
 8012d36:	2300      	movmi	r3, #0
 8012d38:	bf4c      	ite	mi
 8012d3a:	9305      	strmi	r3, [sp, #20]
 8012d3c:	9304      	strpl	r3, [sp, #16]
 8012d3e:	9b00      	ldr	r3, [sp, #0]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	db3d      	blt.n	8012dc0 <_dtoa_r+0x248>
 8012d44:	9b05      	ldr	r3, [sp, #20]
 8012d46:	9a00      	ldr	r2, [sp, #0]
 8012d48:	920a      	str	r2, [sp, #40]	; 0x28
 8012d4a:	4413      	add	r3, r2
 8012d4c:	9305      	str	r3, [sp, #20]
 8012d4e:	2300      	movs	r3, #0
 8012d50:	9307      	str	r3, [sp, #28]
 8012d52:	9b06      	ldr	r3, [sp, #24]
 8012d54:	2b09      	cmp	r3, #9
 8012d56:	f200 8089 	bhi.w	8012e6c <_dtoa_r+0x2f4>
 8012d5a:	2b05      	cmp	r3, #5
 8012d5c:	bfc4      	itt	gt
 8012d5e:	3b04      	subgt	r3, #4
 8012d60:	9306      	strgt	r3, [sp, #24]
 8012d62:	9b06      	ldr	r3, [sp, #24]
 8012d64:	f1a3 0302 	sub.w	r3, r3, #2
 8012d68:	bfcc      	ite	gt
 8012d6a:	2500      	movgt	r5, #0
 8012d6c:	2501      	movle	r5, #1
 8012d6e:	2b03      	cmp	r3, #3
 8012d70:	f200 8087 	bhi.w	8012e82 <_dtoa_r+0x30a>
 8012d74:	e8df f003 	tbb	[pc, r3]
 8012d78:	59383a2d 	.word	0x59383a2d
 8012d7c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012d80:	441d      	add	r5, r3
 8012d82:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012d86:	2b20      	cmp	r3, #32
 8012d88:	bfc1      	itttt	gt
 8012d8a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012d8e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012d92:	fa0b f303 	lslgt.w	r3, fp, r3
 8012d96:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012d9a:	bfda      	itte	le
 8012d9c:	f1c3 0320 	rsble	r3, r3, #32
 8012da0:	fa06 f003 	lslle.w	r0, r6, r3
 8012da4:	4318      	orrgt	r0, r3
 8012da6:	f7ed fbe7 	bl	8000578 <__aeabi_ui2d>
 8012daa:	2301      	movs	r3, #1
 8012dac:	4606      	mov	r6, r0
 8012dae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012db2:	3d01      	subs	r5, #1
 8012db4:	930e      	str	r3, [sp, #56]	; 0x38
 8012db6:	e76a      	b.n	8012c8e <_dtoa_r+0x116>
 8012db8:	2301      	movs	r3, #1
 8012dba:	e7b2      	b.n	8012d22 <_dtoa_r+0x1aa>
 8012dbc:	900b      	str	r0, [sp, #44]	; 0x2c
 8012dbe:	e7b1      	b.n	8012d24 <_dtoa_r+0x1ac>
 8012dc0:	9b04      	ldr	r3, [sp, #16]
 8012dc2:	9a00      	ldr	r2, [sp, #0]
 8012dc4:	1a9b      	subs	r3, r3, r2
 8012dc6:	9304      	str	r3, [sp, #16]
 8012dc8:	4253      	negs	r3, r2
 8012dca:	9307      	str	r3, [sp, #28]
 8012dcc:	2300      	movs	r3, #0
 8012dce:	930a      	str	r3, [sp, #40]	; 0x28
 8012dd0:	e7bf      	b.n	8012d52 <_dtoa_r+0x1da>
 8012dd2:	2300      	movs	r3, #0
 8012dd4:	9308      	str	r3, [sp, #32]
 8012dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	dc55      	bgt.n	8012e88 <_dtoa_r+0x310>
 8012ddc:	2301      	movs	r3, #1
 8012dde:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012de2:	461a      	mov	r2, r3
 8012de4:	9209      	str	r2, [sp, #36]	; 0x24
 8012de6:	e00c      	b.n	8012e02 <_dtoa_r+0x28a>
 8012de8:	2301      	movs	r3, #1
 8012dea:	e7f3      	b.n	8012dd4 <_dtoa_r+0x25c>
 8012dec:	2300      	movs	r3, #0
 8012dee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012df0:	9308      	str	r3, [sp, #32]
 8012df2:	9b00      	ldr	r3, [sp, #0]
 8012df4:	4413      	add	r3, r2
 8012df6:	9302      	str	r3, [sp, #8]
 8012df8:	3301      	adds	r3, #1
 8012dfa:	2b01      	cmp	r3, #1
 8012dfc:	9303      	str	r3, [sp, #12]
 8012dfe:	bfb8      	it	lt
 8012e00:	2301      	movlt	r3, #1
 8012e02:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012e04:	2200      	movs	r2, #0
 8012e06:	6042      	str	r2, [r0, #4]
 8012e08:	2204      	movs	r2, #4
 8012e0a:	f102 0614 	add.w	r6, r2, #20
 8012e0e:	429e      	cmp	r6, r3
 8012e10:	6841      	ldr	r1, [r0, #4]
 8012e12:	d93d      	bls.n	8012e90 <_dtoa_r+0x318>
 8012e14:	4620      	mov	r0, r4
 8012e16:	f000 ffad 	bl	8013d74 <_Balloc>
 8012e1a:	9001      	str	r0, [sp, #4]
 8012e1c:	2800      	cmp	r0, #0
 8012e1e:	d13b      	bne.n	8012e98 <_dtoa_r+0x320>
 8012e20:	4b11      	ldr	r3, [pc, #68]	; (8012e68 <_dtoa_r+0x2f0>)
 8012e22:	4602      	mov	r2, r0
 8012e24:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012e28:	e6c0      	b.n	8012bac <_dtoa_r+0x34>
 8012e2a:	2301      	movs	r3, #1
 8012e2c:	e7df      	b.n	8012dee <_dtoa_r+0x276>
 8012e2e:	bf00      	nop
 8012e30:	636f4361 	.word	0x636f4361
 8012e34:	3fd287a7 	.word	0x3fd287a7
 8012e38:	8b60c8b3 	.word	0x8b60c8b3
 8012e3c:	3fc68a28 	.word	0x3fc68a28
 8012e40:	509f79fb 	.word	0x509f79fb
 8012e44:	3fd34413 	.word	0x3fd34413
 8012e48:	0801620e 	.word	0x0801620e
 8012e4c:	08016225 	.word	0x08016225
 8012e50:	7ff00000 	.word	0x7ff00000
 8012e54:	08016208 	.word	0x08016208
 8012e58:	080161ff 	.word	0x080161ff
 8012e5c:	0801620d 	.word	0x0801620d
 8012e60:	3ff80000 	.word	0x3ff80000
 8012e64:	08016388 	.word	0x08016388
 8012e68:	08016280 	.word	0x08016280
 8012e6c:	2501      	movs	r5, #1
 8012e6e:	2300      	movs	r3, #0
 8012e70:	9306      	str	r3, [sp, #24]
 8012e72:	9508      	str	r5, [sp, #32]
 8012e74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e78:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012e7c:	2200      	movs	r2, #0
 8012e7e:	2312      	movs	r3, #18
 8012e80:	e7b0      	b.n	8012de4 <_dtoa_r+0x26c>
 8012e82:	2301      	movs	r3, #1
 8012e84:	9308      	str	r3, [sp, #32]
 8012e86:	e7f5      	b.n	8012e74 <_dtoa_r+0x2fc>
 8012e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e8a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012e8e:	e7b8      	b.n	8012e02 <_dtoa_r+0x28a>
 8012e90:	3101      	adds	r1, #1
 8012e92:	6041      	str	r1, [r0, #4]
 8012e94:	0052      	lsls	r2, r2, #1
 8012e96:	e7b8      	b.n	8012e0a <_dtoa_r+0x292>
 8012e98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012e9a:	9a01      	ldr	r2, [sp, #4]
 8012e9c:	601a      	str	r2, [r3, #0]
 8012e9e:	9b03      	ldr	r3, [sp, #12]
 8012ea0:	2b0e      	cmp	r3, #14
 8012ea2:	f200 809d 	bhi.w	8012fe0 <_dtoa_r+0x468>
 8012ea6:	2d00      	cmp	r5, #0
 8012ea8:	f000 809a 	beq.w	8012fe0 <_dtoa_r+0x468>
 8012eac:	9b00      	ldr	r3, [sp, #0]
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	dd32      	ble.n	8012f18 <_dtoa_r+0x3a0>
 8012eb2:	4ab7      	ldr	r2, [pc, #732]	; (8013190 <_dtoa_r+0x618>)
 8012eb4:	f003 030f 	and.w	r3, r3, #15
 8012eb8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012ebc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012ec0:	9b00      	ldr	r3, [sp, #0]
 8012ec2:	05d8      	lsls	r0, r3, #23
 8012ec4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8012ec8:	d516      	bpl.n	8012ef8 <_dtoa_r+0x380>
 8012eca:	4bb2      	ldr	r3, [pc, #712]	; (8013194 <_dtoa_r+0x61c>)
 8012ecc:	ec51 0b19 	vmov	r0, r1, d9
 8012ed0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012ed4:	f7ed fcf4 	bl	80008c0 <__aeabi_ddiv>
 8012ed8:	f007 070f 	and.w	r7, r7, #15
 8012edc:	4682      	mov	sl, r0
 8012ede:	468b      	mov	fp, r1
 8012ee0:	2503      	movs	r5, #3
 8012ee2:	4eac      	ldr	r6, [pc, #688]	; (8013194 <_dtoa_r+0x61c>)
 8012ee4:	b957      	cbnz	r7, 8012efc <_dtoa_r+0x384>
 8012ee6:	4642      	mov	r2, r8
 8012ee8:	464b      	mov	r3, r9
 8012eea:	4650      	mov	r0, sl
 8012eec:	4659      	mov	r1, fp
 8012eee:	f7ed fce7 	bl	80008c0 <__aeabi_ddiv>
 8012ef2:	4682      	mov	sl, r0
 8012ef4:	468b      	mov	fp, r1
 8012ef6:	e028      	b.n	8012f4a <_dtoa_r+0x3d2>
 8012ef8:	2502      	movs	r5, #2
 8012efa:	e7f2      	b.n	8012ee2 <_dtoa_r+0x36a>
 8012efc:	07f9      	lsls	r1, r7, #31
 8012efe:	d508      	bpl.n	8012f12 <_dtoa_r+0x39a>
 8012f00:	4640      	mov	r0, r8
 8012f02:	4649      	mov	r1, r9
 8012f04:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012f08:	f7ed fbb0 	bl	800066c <__aeabi_dmul>
 8012f0c:	3501      	adds	r5, #1
 8012f0e:	4680      	mov	r8, r0
 8012f10:	4689      	mov	r9, r1
 8012f12:	107f      	asrs	r7, r7, #1
 8012f14:	3608      	adds	r6, #8
 8012f16:	e7e5      	b.n	8012ee4 <_dtoa_r+0x36c>
 8012f18:	f000 809b 	beq.w	8013052 <_dtoa_r+0x4da>
 8012f1c:	9b00      	ldr	r3, [sp, #0]
 8012f1e:	4f9d      	ldr	r7, [pc, #628]	; (8013194 <_dtoa_r+0x61c>)
 8012f20:	425e      	negs	r6, r3
 8012f22:	4b9b      	ldr	r3, [pc, #620]	; (8013190 <_dtoa_r+0x618>)
 8012f24:	f006 020f 	and.w	r2, r6, #15
 8012f28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f30:	ec51 0b19 	vmov	r0, r1, d9
 8012f34:	f7ed fb9a 	bl	800066c <__aeabi_dmul>
 8012f38:	1136      	asrs	r6, r6, #4
 8012f3a:	4682      	mov	sl, r0
 8012f3c:	468b      	mov	fp, r1
 8012f3e:	2300      	movs	r3, #0
 8012f40:	2502      	movs	r5, #2
 8012f42:	2e00      	cmp	r6, #0
 8012f44:	d17a      	bne.n	801303c <_dtoa_r+0x4c4>
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d1d3      	bne.n	8012ef2 <_dtoa_r+0x37a>
 8012f4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	f000 8082 	beq.w	8013056 <_dtoa_r+0x4de>
 8012f52:	4b91      	ldr	r3, [pc, #580]	; (8013198 <_dtoa_r+0x620>)
 8012f54:	2200      	movs	r2, #0
 8012f56:	4650      	mov	r0, sl
 8012f58:	4659      	mov	r1, fp
 8012f5a:	f7ed fdf9 	bl	8000b50 <__aeabi_dcmplt>
 8012f5e:	2800      	cmp	r0, #0
 8012f60:	d079      	beq.n	8013056 <_dtoa_r+0x4de>
 8012f62:	9b03      	ldr	r3, [sp, #12]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d076      	beq.n	8013056 <_dtoa_r+0x4de>
 8012f68:	9b02      	ldr	r3, [sp, #8]
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	dd36      	ble.n	8012fdc <_dtoa_r+0x464>
 8012f6e:	9b00      	ldr	r3, [sp, #0]
 8012f70:	4650      	mov	r0, sl
 8012f72:	4659      	mov	r1, fp
 8012f74:	1e5f      	subs	r7, r3, #1
 8012f76:	2200      	movs	r2, #0
 8012f78:	4b88      	ldr	r3, [pc, #544]	; (801319c <_dtoa_r+0x624>)
 8012f7a:	f7ed fb77 	bl	800066c <__aeabi_dmul>
 8012f7e:	9e02      	ldr	r6, [sp, #8]
 8012f80:	4682      	mov	sl, r0
 8012f82:	468b      	mov	fp, r1
 8012f84:	3501      	adds	r5, #1
 8012f86:	4628      	mov	r0, r5
 8012f88:	f7ed fb06 	bl	8000598 <__aeabi_i2d>
 8012f8c:	4652      	mov	r2, sl
 8012f8e:	465b      	mov	r3, fp
 8012f90:	f7ed fb6c 	bl	800066c <__aeabi_dmul>
 8012f94:	4b82      	ldr	r3, [pc, #520]	; (80131a0 <_dtoa_r+0x628>)
 8012f96:	2200      	movs	r2, #0
 8012f98:	f7ed f9b2 	bl	8000300 <__adddf3>
 8012f9c:	46d0      	mov	r8, sl
 8012f9e:	46d9      	mov	r9, fp
 8012fa0:	4682      	mov	sl, r0
 8012fa2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8012fa6:	2e00      	cmp	r6, #0
 8012fa8:	d158      	bne.n	801305c <_dtoa_r+0x4e4>
 8012faa:	4b7e      	ldr	r3, [pc, #504]	; (80131a4 <_dtoa_r+0x62c>)
 8012fac:	2200      	movs	r2, #0
 8012fae:	4640      	mov	r0, r8
 8012fb0:	4649      	mov	r1, r9
 8012fb2:	f7ed f9a3 	bl	80002fc <__aeabi_dsub>
 8012fb6:	4652      	mov	r2, sl
 8012fb8:	465b      	mov	r3, fp
 8012fba:	4680      	mov	r8, r0
 8012fbc:	4689      	mov	r9, r1
 8012fbe:	f7ed fde5 	bl	8000b8c <__aeabi_dcmpgt>
 8012fc2:	2800      	cmp	r0, #0
 8012fc4:	f040 8295 	bne.w	80134f2 <_dtoa_r+0x97a>
 8012fc8:	4652      	mov	r2, sl
 8012fca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012fce:	4640      	mov	r0, r8
 8012fd0:	4649      	mov	r1, r9
 8012fd2:	f7ed fdbd 	bl	8000b50 <__aeabi_dcmplt>
 8012fd6:	2800      	cmp	r0, #0
 8012fd8:	f040 8289 	bne.w	80134ee <_dtoa_r+0x976>
 8012fdc:	ec5b ab19 	vmov	sl, fp, d9
 8012fe0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	f2c0 8148 	blt.w	8013278 <_dtoa_r+0x700>
 8012fe8:	9a00      	ldr	r2, [sp, #0]
 8012fea:	2a0e      	cmp	r2, #14
 8012fec:	f300 8144 	bgt.w	8013278 <_dtoa_r+0x700>
 8012ff0:	4b67      	ldr	r3, [pc, #412]	; (8013190 <_dtoa_r+0x618>)
 8012ff2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012ff6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	f280 80d5 	bge.w	80131ac <_dtoa_r+0x634>
 8013002:	9b03      	ldr	r3, [sp, #12]
 8013004:	2b00      	cmp	r3, #0
 8013006:	f300 80d1 	bgt.w	80131ac <_dtoa_r+0x634>
 801300a:	f040 826f 	bne.w	80134ec <_dtoa_r+0x974>
 801300e:	4b65      	ldr	r3, [pc, #404]	; (80131a4 <_dtoa_r+0x62c>)
 8013010:	2200      	movs	r2, #0
 8013012:	4640      	mov	r0, r8
 8013014:	4649      	mov	r1, r9
 8013016:	f7ed fb29 	bl	800066c <__aeabi_dmul>
 801301a:	4652      	mov	r2, sl
 801301c:	465b      	mov	r3, fp
 801301e:	f7ed fdab 	bl	8000b78 <__aeabi_dcmpge>
 8013022:	9e03      	ldr	r6, [sp, #12]
 8013024:	4637      	mov	r7, r6
 8013026:	2800      	cmp	r0, #0
 8013028:	f040 8245 	bne.w	80134b6 <_dtoa_r+0x93e>
 801302c:	9d01      	ldr	r5, [sp, #4]
 801302e:	2331      	movs	r3, #49	; 0x31
 8013030:	f805 3b01 	strb.w	r3, [r5], #1
 8013034:	9b00      	ldr	r3, [sp, #0]
 8013036:	3301      	adds	r3, #1
 8013038:	9300      	str	r3, [sp, #0]
 801303a:	e240      	b.n	80134be <_dtoa_r+0x946>
 801303c:	07f2      	lsls	r2, r6, #31
 801303e:	d505      	bpl.n	801304c <_dtoa_r+0x4d4>
 8013040:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013044:	f7ed fb12 	bl	800066c <__aeabi_dmul>
 8013048:	3501      	adds	r5, #1
 801304a:	2301      	movs	r3, #1
 801304c:	1076      	asrs	r6, r6, #1
 801304e:	3708      	adds	r7, #8
 8013050:	e777      	b.n	8012f42 <_dtoa_r+0x3ca>
 8013052:	2502      	movs	r5, #2
 8013054:	e779      	b.n	8012f4a <_dtoa_r+0x3d2>
 8013056:	9f00      	ldr	r7, [sp, #0]
 8013058:	9e03      	ldr	r6, [sp, #12]
 801305a:	e794      	b.n	8012f86 <_dtoa_r+0x40e>
 801305c:	9901      	ldr	r1, [sp, #4]
 801305e:	4b4c      	ldr	r3, [pc, #304]	; (8013190 <_dtoa_r+0x618>)
 8013060:	4431      	add	r1, r6
 8013062:	910d      	str	r1, [sp, #52]	; 0x34
 8013064:	9908      	ldr	r1, [sp, #32]
 8013066:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801306a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801306e:	2900      	cmp	r1, #0
 8013070:	d043      	beq.n	80130fa <_dtoa_r+0x582>
 8013072:	494d      	ldr	r1, [pc, #308]	; (80131a8 <_dtoa_r+0x630>)
 8013074:	2000      	movs	r0, #0
 8013076:	f7ed fc23 	bl	80008c0 <__aeabi_ddiv>
 801307a:	4652      	mov	r2, sl
 801307c:	465b      	mov	r3, fp
 801307e:	f7ed f93d 	bl	80002fc <__aeabi_dsub>
 8013082:	9d01      	ldr	r5, [sp, #4]
 8013084:	4682      	mov	sl, r0
 8013086:	468b      	mov	fp, r1
 8013088:	4649      	mov	r1, r9
 801308a:	4640      	mov	r0, r8
 801308c:	f7ed fd9e 	bl	8000bcc <__aeabi_d2iz>
 8013090:	4606      	mov	r6, r0
 8013092:	f7ed fa81 	bl	8000598 <__aeabi_i2d>
 8013096:	4602      	mov	r2, r0
 8013098:	460b      	mov	r3, r1
 801309a:	4640      	mov	r0, r8
 801309c:	4649      	mov	r1, r9
 801309e:	f7ed f92d 	bl	80002fc <__aeabi_dsub>
 80130a2:	3630      	adds	r6, #48	; 0x30
 80130a4:	f805 6b01 	strb.w	r6, [r5], #1
 80130a8:	4652      	mov	r2, sl
 80130aa:	465b      	mov	r3, fp
 80130ac:	4680      	mov	r8, r0
 80130ae:	4689      	mov	r9, r1
 80130b0:	f7ed fd4e 	bl	8000b50 <__aeabi_dcmplt>
 80130b4:	2800      	cmp	r0, #0
 80130b6:	d163      	bne.n	8013180 <_dtoa_r+0x608>
 80130b8:	4642      	mov	r2, r8
 80130ba:	464b      	mov	r3, r9
 80130bc:	4936      	ldr	r1, [pc, #216]	; (8013198 <_dtoa_r+0x620>)
 80130be:	2000      	movs	r0, #0
 80130c0:	f7ed f91c 	bl	80002fc <__aeabi_dsub>
 80130c4:	4652      	mov	r2, sl
 80130c6:	465b      	mov	r3, fp
 80130c8:	f7ed fd42 	bl	8000b50 <__aeabi_dcmplt>
 80130cc:	2800      	cmp	r0, #0
 80130ce:	f040 80b5 	bne.w	801323c <_dtoa_r+0x6c4>
 80130d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80130d4:	429d      	cmp	r5, r3
 80130d6:	d081      	beq.n	8012fdc <_dtoa_r+0x464>
 80130d8:	4b30      	ldr	r3, [pc, #192]	; (801319c <_dtoa_r+0x624>)
 80130da:	2200      	movs	r2, #0
 80130dc:	4650      	mov	r0, sl
 80130de:	4659      	mov	r1, fp
 80130e0:	f7ed fac4 	bl	800066c <__aeabi_dmul>
 80130e4:	4b2d      	ldr	r3, [pc, #180]	; (801319c <_dtoa_r+0x624>)
 80130e6:	4682      	mov	sl, r0
 80130e8:	468b      	mov	fp, r1
 80130ea:	4640      	mov	r0, r8
 80130ec:	4649      	mov	r1, r9
 80130ee:	2200      	movs	r2, #0
 80130f0:	f7ed fabc 	bl	800066c <__aeabi_dmul>
 80130f4:	4680      	mov	r8, r0
 80130f6:	4689      	mov	r9, r1
 80130f8:	e7c6      	b.n	8013088 <_dtoa_r+0x510>
 80130fa:	4650      	mov	r0, sl
 80130fc:	4659      	mov	r1, fp
 80130fe:	f7ed fab5 	bl	800066c <__aeabi_dmul>
 8013102:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013104:	9d01      	ldr	r5, [sp, #4]
 8013106:	930f      	str	r3, [sp, #60]	; 0x3c
 8013108:	4682      	mov	sl, r0
 801310a:	468b      	mov	fp, r1
 801310c:	4649      	mov	r1, r9
 801310e:	4640      	mov	r0, r8
 8013110:	f7ed fd5c 	bl	8000bcc <__aeabi_d2iz>
 8013114:	4606      	mov	r6, r0
 8013116:	f7ed fa3f 	bl	8000598 <__aeabi_i2d>
 801311a:	3630      	adds	r6, #48	; 0x30
 801311c:	4602      	mov	r2, r0
 801311e:	460b      	mov	r3, r1
 8013120:	4640      	mov	r0, r8
 8013122:	4649      	mov	r1, r9
 8013124:	f7ed f8ea 	bl	80002fc <__aeabi_dsub>
 8013128:	f805 6b01 	strb.w	r6, [r5], #1
 801312c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801312e:	429d      	cmp	r5, r3
 8013130:	4680      	mov	r8, r0
 8013132:	4689      	mov	r9, r1
 8013134:	f04f 0200 	mov.w	r2, #0
 8013138:	d124      	bne.n	8013184 <_dtoa_r+0x60c>
 801313a:	4b1b      	ldr	r3, [pc, #108]	; (80131a8 <_dtoa_r+0x630>)
 801313c:	4650      	mov	r0, sl
 801313e:	4659      	mov	r1, fp
 8013140:	f7ed f8de 	bl	8000300 <__adddf3>
 8013144:	4602      	mov	r2, r0
 8013146:	460b      	mov	r3, r1
 8013148:	4640      	mov	r0, r8
 801314a:	4649      	mov	r1, r9
 801314c:	f7ed fd1e 	bl	8000b8c <__aeabi_dcmpgt>
 8013150:	2800      	cmp	r0, #0
 8013152:	d173      	bne.n	801323c <_dtoa_r+0x6c4>
 8013154:	4652      	mov	r2, sl
 8013156:	465b      	mov	r3, fp
 8013158:	4913      	ldr	r1, [pc, #76]	; (80131a8 <_dtoa_r+0x630>)
 801315a:	2000      	movs	r0, #0
 801315c:	f7ed f8ce 	bl	80002fc <__aeabi_dsub>
 8013160:	4602      	mov	r2, r0
 8013162:	460b      	mov	r3, r1
 8013164:	4640      	mov	r0, r8
 8013166:	4649      	mov	r1, r9
 8013168:	f7ed fcf2 	bl	8000b50 <__aeabi_dcmplt>
 801316c:	2800      	cmp	r0, #0
 801316e:	f43f af35 	beq.w	8012fdc <_dtoa_r+0x464>
 8013172:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8013174:	1e6b      	subs	r3, r5, #1
 8013176:	930f      	str	r3, [sp, #60]	; 0x3c
 8013178:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801317c:	2b30      	cmp	r3, #48	; 0x30
 801317e:	d0f8      	beq.n	8013172 <_dtoa_r+0x5fa>
 8013180:	9700      	str	r7, [sp, #0]
 8013182:	e049      	b.n	8013218 <_dtoa_r+0x6a0>
 8013184:	4b05      	ldr	r3, [pc, #20]	; (801319c <_dtoa_r+0x624>)
 8013186:	f7ed fa71 	bl	800066c <__aeabi_dmul>
 801318a:	4680      	mov	r8, r0
 801318c:	4689      	mov	r9, r1
 801318e:	e7bd      	b.n	801310c <_dtoa_r+0x594>
 8013190:	08016388 	.word	0x08016388
 8013194:	08016360 	.word	0x08016360
 8013198:	3ff00000 	.word	0x3ff00000
 801319c:	40240000 	.word	0x40240000
 80131a0:	401c0000 	.word	0x401c0000
 80131a4:	40140000 	.word	0x40140000
 80131a8:	3fe00000 	.word	0x3fe00000
 80131ac:	9d01      	ldr	r5, [sp, #4]
 80131ae:	4656      	mov	r6, sl
 80131b0:	465f      	mov	r7, fp
 80131b2:	4642      	mov	r2, r8
 80131b4:	464b      	mov	r3, r9
 80131b6:	4630      	mov	r0, r6
 80131b8:	4639      	mov	r1, r7
 80131ba:	f7ed fb81 	bl	80008c0 <__aeabi_ddiv>
 80131be:	f7ed fd05 	bl	8000bcc <__aeabi_d2iz>
 80131c2:	4682      	mov	sl, r0
 80131c4:	f7ed f9e8 	bl	8000598 <__aeabi_i2d>
 80131c8:	4642      	mov	r2, r8
 80131ca:	464b      	mov	r3, r9
 80131cc:	f7ed fa4e 	bl	800066c <__aeabi_dmul>
 80131d0:	4602      	mov	r2, r0
 80131d2:	460b      	mov	r3, r1
 80131d4:	4630      	mov	r0, r6
 80131d6:	4639      	mov	r1, r7
 80131d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80131dc:	f7ed f88e 	bl	80002fc <__aeabi_dsub>
 80131e0:	f805 6b01 	strb.w	r6, [r5], #1
 80131e4:	9e01      	ldr	r6, [sp, #4]
 80131e6:	9f03      	ldr	r7, [sp, #12]
 80131e8:	1bae      	subs	r6, r5, r6
 80131ea:	42b7      	cmp	r7, r6
 80131ec:	4602      	mov	r2, r0
 80131ee:	460b      	mov	r3, r1
 80131f0:	d135      	bne.n	801325e <_dtoa_r+0x6e6>
 80131f2:	f7ed f885 	bl	8000300 <__adddf3>
 80131f6:	4642      	mov	r2, r8
 80131f8:	464b      	mov	r3, r9
 80131fa:	4606      	mov	r6, r0
 80131fc:	460f      	mov	r7, r1
 80131fe:	f7ed fcc5 	bl	8000b8c <__aeabi_dcmpgt>
 8013202:	b9d0      	cbnz	r0, 801323a <_dtoa_r+0x6c2>
 8013204:	4642      	mov	r2, r8
 8013206:	464b      	mov	r3, r9
 8013208:	4630      	mov	r0, r6
 801320a:	4639      	mov	r1, r7
 801320c:	f7ed fc96 	bl	8000b3c <__aeabi_dcmpeq>
 8013210:	b110      	cbz	r0, 8013218 <_dtoa_r+0x6a0>
 8013212:	f01a 0f01 	tst.w	sl, #1
 8013216:	d110      	bne.n	801323a <_dtoa_r+0x6c2>
 8013218:	4620      	mov	r0, r4
 801321a:	ee18 1a10 	vmov	r1, s16
 801321e:	f000 fde9 	bl	8013df4 <_Bfree>
 8013222:	2300      	movs	r3, #0
 8013224:	9800      	ldr	r0, [sp, #0]
 8013226:	702b      	strb	r3, [r5, #0]
 8013228:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801322a:	3001      	adds	r0, #1
 801322c:	6018      	str	r0, [r3, #0]
 801322e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013230:	2b00      	cmp	r3, #0
 8013232:	f43f acf1 	beq.w	8012c18 <_dtoa_r+0xa0>
 8013236:	601d      	str	r5, [r3, #0]
 8013238:	e4ee      	b.n	8012c18 <_dtoa_r+0xa0>
 801323a:	9f00      	ldr	r7, [sp, #0]
 801323c:	462b      	mov	r3, r5
 801323e:	461d      	mov	r5, r3
 8013240:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013244:	2a39      	cmp	r2, #57	; 0x39
 8013246:	d106      	bne.n	8013256 <_dtoa_r+0x6de>
 8013248:	9a01      	ldr	r2, [sp, #4]
 801324a:	429a      	cmp	r2, r3
 801324c:	d1f7      	bne.n	801323e <_dtoa_r+0x6c6>
 801324e:	9901      	ldr	r1, [sp, #4]
 8013250:	2230      	movs	r2, #48	; 0x30
 8013252:	3701      	adds	r7, #1
 8013254:	700a      	strb	r2, [r1, #0]
 8013256:	781a      	ldrb	r2, [r3, #0]
 8013258:	3201      	adds	r2, #1
 801325a:	701a      	strb	r2, [r3, #0]
 801325c:	e790      	b.n	8013180 <_dtoa_r+0x608>
 801325e:	4ba6      	ldr	r3, [pc, #664]	; (80134f8 <_dtoa_r+0x980>)
 8013260:	2200      	movs	r2, #0
 8013262:	f7ed fa03 	bl	800066c <__aeabi_dmul>
 8013266:	2200      	movs	r2, #0
 8013268:	2300      	movs	r3, #0
 801326a:	4606      	mov	r6, r0
 801326c:	460f      	mov	r7, r1
 801326e:	f7ed fc65 	bl	8000b3c <__aeabi_dcmpeq>
 8013272:	2800      	cmp	r0, #0
 8013274:	d09d      	beq.n	80131b2 <_dtoa_r+0x63a>
 8013276:	e7cf      	b.n	8013218 <_dtoa_r+0x6a0>
 8013278:	9a08      	ldr	r2, [sp, #32]
 801327a:	2a00      	cmp	r2, #0
 801327c:	f000 80d7 	beq.w	801342e <_dtoa_r+0x8b6>
 8013280:	9a06      	ldr	r2, [sp, #24]
 8013282:	2a01      	cmp	r2, #1
 8013284:	f300 80ba 	bgt.w	80133fc <_dtoa_r+0x884>
 8013288:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801328a:	2a00      	cmp	r2, #0
 801328c:	f000 80b2 	beq.w	80133f4 <_dtoa_r+0x87c>
 8013290:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013294:	9e07      	ldr	r6, [sp, #28]
 8013296:	9d04      	ldr	r5, [sp, #16]
 8013298:	9a04      	ldr	r2, [sp, #16]
 801329a:	441a      	add	r2, r3
 801329c:	9204      	str	r2, [sp, #16]
 801329e:	9a05      	ldr	r2, [sp, #20]
 80132a0:	2101      	movs	r1, #1
 80132a2:	441a      	add	r2, r3
 80132a4:	4620      	mov	r0, r4
 80132a6:	9205      	str	r2, [sp, #20]
 80132a8:	f000 fe5c 	bl	8013f64 <__i2b>
 80132ac:	4607      	mov	r7, r0
 80132ae:	2d00      	cmp	r5, #0
 80132b0:	dd0c      	ble.n	80132cc <_dtoa_r+0x754>
 80132b2:	9b05      	ldr	r3, [sp, #20]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	dd09      	ble.n	80132cc <_dtoa_r+0x754>
 80132b8:	42ab      	cmp	r3, r5
 80132ba:	9a04      	ldr	r2, [sp, #16]
 80132bc:	bfa8      	it	ge
 80132be:	462b      	movge	r3, r5
 80132c0:	1ad2      	subs	r2, r2, r3
 80132c2:	9204      	str	r2, [sp, #16]
 80132c4:	9a05      	ldr	r2, [sp, #20]
 80132c6:	1aed      	subs	r5, r5, r3
 80132c8:	1ad3      	subs	r3, r2, r3
 80132ca:	9305      	str	r3, [sp, #20]
 80132cc:	9b07      	ldr	r3, [sp, #28]
 80132ce:	b31b      	cbz	r3, 8013318 <_dtoa_r+0x7a0>
 80132d0:	9b08      	ldr	r3, [sp, #32]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	f000 80af 	beq.w	8013436 <_dtoa_r+0x8be>
 80132d8:	2e00      	cmp	r6, #0
 80132da:	dd13      	ble.n	8013304 <_dtoa_r+0x78c>
 80132dc:	4639      	mov	r1, r7
 80132de:	4632      	mov	r2, r6
 80132e0:	4620      	mov	r0, r4
 80132e2:	f000 feff 	bl	80140e4 <__pow5mult>
 80132e6:	ee18 2a10 	vmov	r2, s16
 80132ea:	4601      	mov	r1, r0
 80132ec:	4607      	mov	r7, r0
 80132ee:	4620      	mov	r0, r4
 80132f0:	f000 fe4e 	bl	8013f90 <__multiply>
 80132f4:	ee18 1a10 	vmov	r1, s16
 80132f8:	4680      	mov	r8, r0
 80132fa:	4620      	mov	r0, r4
 80132fc:	f000 fd7a 	bl	8013df4 <_Bfree>
 8013300:	ee08 8a10 	vmov	s16, r8
 8013304:	9b07      	ldr	r3, [sp, #28]
 8013306:	1b9a      	subs	r2, r3, r6
 8013308:	d006      	beq.n	8013318 <_dtoa_r+0x7a0>
 801330a:	ee18 1a10 	vmov	r1, s16
 801330e:	4620      	mov	r0, r4
 8013310:	f000 fee8 	bl	80140e4 <__pow5mult>
 8013314:	ee08 0a10 	vmov	s16, r0
 8013318:	2101      	movs	r1, #1
 801331a:	4620      	mov	r0, r4
 801331c:	f000 fe22 	bl	8013f64 <__i2b>
 8013320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013322:	2b00      	cmp	r3, #0
 8013324:	4606      	mov	r6, r0
 8013326:	f340 8088 	ble.w	801343a <_dtoa_r+0x8c2>
 801332a:	461a      	mov	r2, r3
 801332c:	4601      	mov	r1, r0
 801332e:	4620      	mov	r0, r4
 8013330:	f000 fed8 	bl	80140e4 <__pow5mult>
 8013334:	9b06      	ldr	r3, [sp, #24]
 8013336:	2b01      	cmp	r3, #1
 8013338:	4606      	mov	r6, r0
 801333a:	f340 8081 	ble.w	8013440 <_dtoa_r+0x8c8>
 801333e:	f04f 0800 	mov.w	r8, #0
 8013342:	6933      	ldr	r3, [r6, #16]
 8013344:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013348:	6918      	ldr	r0, [r3, #16]
 801334a:	f000 fdbb 	bl	8013ec4 <__hi0bits>
 801334e:	f1c0 0020 	rsb	r0, r0, #32
 8013352:	9b05      	ldr	r3, [sp, #20]
 8013354:	4418      	add	r0, r3
 8013356:	f010 001f 	ands.w	r0, r0, #31
 801335a:	f000 8092 	beq.w	8013482 <_dtoa_r+0x90a>
 801335e:	f1c0 0320 	rsb	r3, r0, #32
 8013362:	2b04      	cmp	r3, #4
 8013364:	f340 808a 	ble.w	801347c <_dtoa_r+0x904>
 8013368:	f1c0 001c 	rsb	r0, r0, #28
 801336c:	9b04      	ldr	r3, [sp, #16]
 801336e:	4403      	add	r3, r0
 8013370:	9304      	str	r3, [sp, #16]
 8013372:	9b05      	ldr	r3, [sp, #20]
 8013374:	4403      	add	r3, r0
 8013376:	4405      	add	r5, r0
 8013378:	9305      	str	r3, [sp, #20]
 801337a:	9b04      	ldr	r3, [sp, #16]
 801337c:	2b00      	cmp	r3, #0
 801337e:	dd07      	ble.n	8013390 <_dtoa_r+0x818>
 8013380:	ee18 1a10 	vmov	r1, s16
 8013384:	461a      	mov	r2, r3
 8013386:	4620      	mov	r0, r4
 8013388:	f000 ff06 	bl	8014198 <__lshift>
 801338c:	ee08 0a10 	vmov	s16, r0
 8013390:	9b05      	ldr	r3, [sp, #20]
 8013392:	2b00      	cmp	r3, #0
 8013394:	dd05      	ble.n	80133a2 <_dtoa_r+0x82a>
 8013396:	4631      	mov	r1, r6
 8013398:	461a      	mov	r2, r3
 801339a:	4620      	mov	r0, r4
 801339c:	f000 fefc 	bl	8014198 <__lshift>
 80133a0:	4606      	mov	r6, r0
 80133a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d06e      	beq.n	8013486 <_dtoa_r+0x90e>
 80133a8:	ee18 0a10 	vmov	r0, s16
 80133ac:	4631      	mov	r1, r6
 80133ae:	f000 ff63 	bl	8014278 <__mcmp>
 80133b2:	2800      	cmp	r0, #0
 80133b4:	da67      	bge.n	8013486 <_dtoa_r+0x90e>
 80133b6:	9b00      	ldr	r3, [sp, #0]
 80133b8:	3b01      	subs	r3, #1
 80133ba:	ee18 1a10 	vmov	r1, s16
 80133be:	9300      	str	r3, [sp, #0]
 80133c0:	220a      	movs	r2, #10
 80133c2:	2300      	movs	r3, #0
 80133c4:	4620      	mov	r0, r4
 80133c6:	f000 fd37 	bl	8013e38 <__multadd>
 80133ca:	9b08      	ldr	r3, [sp, #32]
 80133cc:	ee08 0a10 	vmov	s16, r0
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	f000 81b1 	beq.w	8013738 <_dtoa_r+0xbc0>
 80133d6:	2300      	movs	r3, #0
 80133d8:	4639      	mov	r1, r7
 80133da:	220a      	movs	r2, #10
 80133dc:	4620      	mov	r0, r4
 80133de:	f000 fd2b 	bl	8013e38 <__multadd>
 80133e2:	9b02      	ldr	r3, [sp, #8]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	4607      	mov	r7, r0
 80133e8:	f300 808e 	bgt.w	8013508 <_dtoa_r+0x990>
 80133ec:	9b06      	ldr	r3, [sp, #24]
 80133ee:	2b02      	cmp	r3, #2
 80133f0:	dc51      	bgt.n	8013496 <_dtoa_r+0x91e>
 80133f2:	e089      	b.n	8013508 <_dtoa_r+0x990>
 80133f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80133f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80133fa:	e74b      	b.n	8013294 <_dtoa_r+0x71c>
 80133fc:	9b03      	ldr	r3, [sp, #12]
 80133fe:	1e5e      	subs	r6, r3, #1
 8013400:	9b07      	ldr	r3, [sp, #28]
 8013402:	42b3      	cmp	r3, r6
 8013404:	bfbf      	itttt	lt
 8013406:	9b07      	ldrlt	r3, [sp, #28]
 8013408:	9607      	strlt	r6, [sp, #28]
 801340a:	1af2      	sublt	r2, r6, r3
 801340c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801340e:	bfb6      	itet	lt
 8013410:	189b      	addlt	r3, r3, r2
 8013412:	1b9e      	subge	r6, r3, r6
 8013414:	930a      	strlt	r3, [sp, #40]	; 0x28
 8013416:	9b03      	ldr	r3, [sp, #12]
 8013418:	bfb8      	it	lt
 801341a:	2600      	movlt	r6, #0
 801341c:	2b00      	cmp	r3, #0
 801341e:	bfb7      	itett	lt
 8013420:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8013424:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8013428:	1a9d      	sublt	r5, r3, r2
 801342a:	2300      	movlt	r3, #0
 801342c:	e734      	b.n	8013298 <_dtoa_r+0x720>
 801342e:	9e07      	ldr	r6, [sp, #28]
 8013430:	9d04      	ldr	r5, [sp, #16]
 8013432:	9f08      	ldr	r7, [sp, #32]
 8013434:	e73b      	b.n	80132ae <_dtoa_r+0x736>
 8013436:	9a07      	ldr	r2, [sp, #28]
 8013438:	e767      	b.n	801330a <_dtoa_r+0x792>
 801343a:	9b06      	ldr	r3, [sp, #24]
 801343c:	2b01      	cmp	r3, #1
 801343e:	dc18      	bgt.n	8013472 <_dtoa_r+0x8fa>
 8013440:	f1ba 0f00 	cmp.w	sl, #0
 8013444:	d115      	bne.n	8013472 <_dtoa_r+0x8fa>
 8013446:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801344a:	b993      	cbnz	r3, 8013472 <_dtoa_r+0x8fa>
 801344c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013450:	0d1b      	lsrs	r3, r3, #20
 8013452:	051b      	lsls	r3, r3, #20
 8013454:	b183      	cbz	r3, 8013478 <_dtoa_r+0x900>
 8013456:	9b04      	ldr	r3, [sp, #16]
 8013458:	3301      	adds	r3, #1
 801345a:	9304      	str	r3, [sp, #16]
 801345c:	9b05      	ldr	r3, [sp, #20]
 801345e:	3301      	adds	r3, #1
 8013460:	9305      	str	r3, [sp, #20]
 8013462:	f04f 0801 	mov.w	r8, #1
 8013466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013468:	2b00      	cmp	r3, #0
 801346a:	f47f af6a 	bne.w	8013342 <_dtoa_r+0x7ca>
 801346e:	2001      	movs	r0, #1
 8013470:	e76f      	b.n	8013352 <_dtoa_r+0x7da>
 8013472:	f04f 0800 	mov.w	r8, #0
 8013476:	e7f6      	b.n	8013466 <_dtoa_r+0x8ee>
 8013478:	4698      	mov	r8, r3
 801347a:	e7f4      	b.n	8013466 <_dtoa_r+0x8ee>
 801347c:	f43f af7d 	beq.w	801337a <_dtoa_r+0x802>
 8013480:	4618      	mov	r0, r3
 8013482:	301c      	adds	r0, #28
 8013484:	e772      	b.n	801336c <_dtoa_r+0x7f4>
 8013486:	9b03      	ldr	r3, [sp, #12]
 8013488:	2b00      	cmp	r3, #0
 801348a:	dc37      	bgt.n	80134fc <_dtoa_r+0x984>
 801348c:	9b06      	ldr	r3, [sp, #24]
 801348e:	2b02      	cmp	r3, #2
 8013490:	dd34      	ble.n	80134fc <_dtoa_r+0x984>
 8013492:	9b03      	ldr	r3, [sp, #12]
 8013494:	9302      	str	r3, [sp, #8]
 8013496:	9b02      	ldr	r3, [sp, #8]
 8013498:	b96b      	cbnz	r3, 80134b6 <_dtoa_r+0x93e>
 801349a:	4631      	mov	r1, r6
 801349c:	2205      	movs	r2, #5
 801349e:	4620      	mov	r0, r4
 80134a0:	f000 fcca 	bl	8013e38 <__multadd>
 80134a4:	4601      	mov	r1, r0
 80134a6:	4606      	mov	r6, r0
 80134a8:	ee18 0a10 	vmov	r0, s16
 80134ac:	f000 fee4 	bl	8014278 <__mcmp>
 80134b0:	2800      	cmp	r0, #0
 80134b2:	f73f adbb 	bgt.w	801302c <_dtoa_r+0x4b4>
 80134b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134b8:	9d01      	ldr	r5, [sp, #4]
 80134ba:	43db      	mvns	r3, r3
 80134bc:	9300      	str	r3, [sp, #0]
 80134be:	f04f 0800 	mov.w	r8, #0
 80134c2:	4631      	mov	r1, r6
 80134c4:	4620      	mov	r0, r4
 80134c6:	f000 fc95 	bl	8013df4 <_Bfree>
 80134ca:	2f00      	cmp	r7, #0
 80134cc:	f43f aea4 	beq.w	8013218 <_dtoa_r+0x6a0>
 80134d0:	f1b8 0f00 	cmp.w	r8, #0
 80134d4:	d005      	beq.n	80134e2 <_dtoa_r+0x96a>
 80134d6:	45b8      	cmp	r8, r7
 80134d8:	d003      	beq.n	80134e2 <_dtoa_r+0x96a>
 80134da:	4641      	mov	r1, r8
 80134dc:	4620      	mov	r0, r4
 80134de:	f000 fc89 	bl	8013df4 <_Bfree>
 80134e2:	4639      	mov	r1, r7
 80134e4:	4620      	mov	r0, r4
 80134e6:	f000 fc85 	bl	8013df4 <_Bfree>
 80134ea:	e695      	b.n	8013218 <_dtoa_r+0x6a0>
 80134ec:	2600      	movs	r6, #0
 80134ee:	4637      	mov	r7, r6
 80134f0:	e7e1      	b.n	80134b6 <_dtoa_r+0x93e>
 80134f2:	9700      	str	r7, [sp, #0]
 80134f4:	4637      	mov	r7, r6
 80134f6:	e599      	b.n	801302c <_dtoa_r+0x4b4>
 80134f8:	40240000 	.word	0x40240000
 80134fc:	9b08      	ldr	r3, [sp, #32]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	f000 80ca 	beq.w	8013698 <_dtoa_r+0xb20>
 8013504:	9b03      	ldr	r3, [sp, #12]
 8013506:	9302      	str	r3, [sp, #8]
 8013508:	2d00      	cmp	r5, #0
 801350a:	dd05      	ble.n	8013518 <_dtoa_r+0x9a0>
 801350c:	4639      	mov	r1, r7
 801350e:	462a      	mov	r2, r5
 8013510:	4620      	mov	r0, r4
 8013512:	f000 fe41 	bl	8014198 <__lshift>
 8013516:	4607      	mov	r7, r0
 8013518:	f1b8 0f00 	cmp.w	r8, #0
 801351c:	d05b      	beq.n	80135d6 <_dtoa_r+0xa5e>
 801351e:	6879      	ldr	r1, [r7, #4]
 8013520:	4620      	mov	r0, r4
 8013522:	f000 fc27 	bl	8013d74 <_Balloc>
 8013526:	4605      	mov	r5, r0
 8013528:	b928      	cbnz	r0, 8013536 <_dtoa_r+0x9be>
 801352a:	4b87      	ldr	r3, [pc, #540]	; (8013748 <_dtoa_r+0xbd0>)
 801352c:	4602      	mov	r2, r0
 801352e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013532:	f7ff bb3b 	b.w	8012bac <_dtoa_r+0x34>
 8013536:	693a      	ldr	r2, [r7, #16]
 8013538:	3202      	adds	r2, #2
 801353a:	0092      	lsls	r2, r2, #2
 801353c:	f107 010c 	add.w	r1, r7, #12
 8013540:	300c      	adds	r0, #12
 8013542:	f000 fbdb 	bl	8013cfc <memcpy>
 8013546:	2201      	movs	r2, #1
 8013548:	4629      	mov	r1, r5
 801354a:	4620      	mov	r0, r4
 801354c:	f000 fe24 	bl	8014198 <__lshift>
 8013550:	9b01      	ldr	r3, [sp, #4]
 8013552:	f103 0901 	add.w	r9, r3, #1
 8013556:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801355a:	4413      	add	r3, r2
 801355c:	9305      	str	r3, [sp, #20]
 801355e:	f00a 0301 	and.w	r3, sl, #1
 8013562:	46b8      	mov	r8, r7
 8013564:	9304      	str	r3, [sp, #16]
 8013566:	4607      	mov	r7, r0
 8013568:	4631      	mov	r1, r6
 801356a:	ee18 0a10 	vmov	r0, s16
 801356e:	f7ff fa77 	bl	8012a60 <quorem>
 8013572:	4641      	mov	r1, r8
 8013574:	9002      	str	r0, [sp, #8]
 8013576:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801357a:	ee18 0a10 	vmov	r0, s16
 801357e:	f000 fe7b 	bl	8014278 <__mcmp>
 8013582:	463a      	mov	r2, r7
 8013584:	9003      	str	r0, [sp, #12]
 8013586:	4631      	mov	r1, r6
 8013588:	4620      	mov	r0, r4
 801358a:	f000 fe91 	bl	80142b0 <__mdiff>
 801358e:	68c2      	ldr	r2, [r0, #12]
 8013590:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8013594:	4605      	mov	r5, r0
 8013596:	bb02      	cbnz	r2, 80135da <_dtoa_r+0xa62>
 8013598:	4601      	mov	r1, r0
 801359a:	ee18 0a10 	vmov	r0, s16
 801359e:	f000 fe6b 	bl	8014278 <__mcmp>
 80135a2:	4602      	mov	r2, r0
 80135a4:	4629      	mov	r1, r5
 80135a6:	4620      	mov	r0, r4
 80135a8:	9207      	str	r2, [sp, #28]
 80135aa:	f000 fc23 	bl	8013df4 <_Bfree>
 80135ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80135b2:	ea43 0102 	orr.w	r1, r3, r2
 80135b6:	9b04      	ldr	r3, [sp, #16]
 80135b8:	430b      	orrs	r3, r1
 80135ba:	464d      	mov	r5, r9
 80135bc:	d10f      	bne.n	80135de <_dtoa_r+0xa66>
 80135be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80135c2:	d02a      	beq.n	801361a <_dtoa_r+0xaa2>
 80135c4:	9b03      	ldr	r3, [sp, #12]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	dd02      	ble.n	80135d0 <_dtoa_r+0xa58>
 80135ca:	9b02      	ldr	r3, [sp, #8]
 80135cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80135d0:	f88b a000 	strb.w	sl, [fp]
 80135d4:	e775      	b.n	80134c2 <_dtoa_r+0x94a>
 80135d6:	4638      	mov	r0, r7
 80135d8:	e7ba      	b.n	8013550 <_dtoa_r+0x9d8>
 80135da:	2201      	movs	r2, #1
 80135dc:	e7e2      	b.n	80135a4 <_dtoa_r+0xa2c>
 80135de:	9b03      	ldr	r3, [sp, #12]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	db04      	blt.n	80135ee <_dtoa_r+0xa76>
 80135e4:	9906      	ldr	r1, [sp, #24]
 80135e6:	430b      	orrs	r3, r1
 80135e8:	9904      	ldr	r1, [sp, #16]
 80135ea:	430b      	orrs	r3, r1
 80135ec:	d122      	bne.n	8013634 <_dtoa_r+0xabc>
 80135ee:	2a00      	cmp	r2, #0
 80135f0:	ddee      	ble.n	80135d0 <_dtoa_r+0xa58>
 80135f2:	ee18 1a10 	vmov	r1, s16
 80135f6:	2201      	movs	r2, #1
 80135f8:	4620      	mov	r0, r4
 80135fa:	f000 fdcd 	bl	8014198 <__lshift>
 80135fe:	4631      	mov	r1, r6
 8013600:	ee08 0a10 	vmov	s16, r0
 8013604:	f000 fe38 	bl	8014278 <__mcmp>
 8013608:	2800      	cmp	r0, #0
 801360a:	dc03      	bgt.n	8013614 <_dtoa_r+0xa9c>
 801360c:	d1e0      	bne.n	80135d0 <_dtoa_r+0xa58>
 801360e:	f01a 0f01 	tst.w	sl, #1
 8013612:	d0dd      	beq.n	80135d0 <_dtoa_r+0xa58>
 8013614:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013618:	d1d7      	bne.n	80135ca <_dtoa_r+0xa52>
 801361a:	2339      	movs	r3, #57	; 0x39
 801361c:	f88b 3000 	strb.w	r3, [fp]
 8013620:	462b      	mov	r3, r5
 8013622:	461d      	mov	r5, r3
 8013624:	3b01      	subs	r3, #1
 8013626:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801362a:	2a39      	cmp	r2, #57	; 0x39
 801362c:	d071      	beq.n	8013712 <_dtoa_r+0xb9a>
 801362e:	3201      	adds	r2, #1
 8013630:	701a      	strb	r2, [r3, #0]
 8013632:	e746      	b.n	80134c2 <_dtoa_r+0x94a>
 8013634:	2a00      	cmp	r2, #0
 8013636:	dd07      	ble.n	8013648 <_dtoa_r+0xad0>
 8013638:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801363c:	d0ed      	beq.n	801361a <_dtoa_r+0xaa2>
 801363e:	f10a 0301 	add.w	r3, sl, #1
 8013642:	f88b 3000 	strb.w	r3, [fp]
 8013646:	e73c      	b.n	80134c2 <_dtoa_r+0x94a>
 8013648:	9b05      	ldr	r3, [sp, #20]
 801364a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801364e:	4599      	cmp	r9, r3
 8013650:	d047      	beq.n	80136e2 <_dtoa_r+0xb6a>
 8013652:	ee18 1a10 	vmov	r1, s16
 8013656:	2300      	movs	r3, #0
 8013658:	220a      	movs	r2, #10
 801365a:	4620      	mov	r0, r4
 801365c:	f000 fbec 	bl	8013e38 <__multadd>
 8013660:	45b8      	cmp	r8, r7
 8013662:	ee08 0a10 	vmov	s16, r0
 8013666:	f04f 0300 	mov.w	r3, #0
 801366a:	f04f 020a 	mov.w	r2, #10
 801366e:	4641      	mov	r1, r8
 8013670:	4620      	mov	r0, r4
 8013672:	d106      	bne.n	8013682 <_dtoa_r+0xb0a>
 8013674:	f000 fbe0 	bl	8013e38 <__multadd>
 8013678:	4680      	mov	r8, r0
 801367a:	4607      	mov	r7, r0
 801367c:	f109 0901 	add.w	r9, r9, #1
 8013680:	e772      	b.n	8013568 <_dtoa_r+0x9f0>
 8013682:	f000 fbd9 	bl	8013e38 <__multadd>
 8013686:	4639      	mov	r1, r7
 8013688:	4680      	mov	r8, r0
 801368a:	2300      	movs	r3, #0
 801368c:	220a      	movs	r2, #10
 801368e:	4620      	mov	r0, r4
 8013690:	f000 fbd2 	bl	8013e38 <__multadd>
 8013694:	4607      	mov	r7, r0
 8013696:	e7f1      	b.n	801367c <_dtoa_r+0xb04>
 8013698:	9b03      	ldr	r3, [sp, #12]
 801369a:	9302      	str	r3, [sp, #8]
 801369c:	9d01      	ldr	r5, [sp, #4]
 801369e:	ee18 0a10 	vmov	r0, s16
 80136a2:	4631      	mov	r1, r6
 80136a4:	f7ff f9dc 	bl	8012a60 <quorem>
 80136a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80136ac:	9b01      	ldr	r3, [sp, #4]
 80136ae:	f805 ab01 	strb.w	sl, [r5], #1
 80136b2:	1aea      	subs	r2, r5, r3
 80136b4:	9b02      	ldr	r3, [sp, #8]
 80136b6:	4293      	cmp	r3, r2
 80136b8:	dd09      	ble.n	80136ce <_dtoa_r+0xb56>
 80136ba:	ee18 1a10 	vmov	r1, s16
 80136be:	2300      	movs	r3, #0
 80136c0:	220a      	movs	r2, #10
 80136c2:	4620      	mov	r0, r4
 80136c4:	f000 fbb8 	bl	8013e38 <__multadd>
 80136c8:	ee08 0a10 	vmov	s16, r0
 80136cc:	e7e7      	b.n	801369e <_dtoa_r+0xb26>
 80136ce:	9b02      	ldr	r3, [sp, #8]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	bfc8      	it	gt
 80136d4:	461d      	movgt	r5, r3
 80136d6:	9b01      	ldr	r3, [sp, #4]
 80136d8:	bfd8      	it	le
 80136da:	2501      	movle	r5, #1
 80136dc:	441d      	add	r5, r3
 80136de:	f04f 0800 	mov.w	r8, #0
 80136e2:	ee18 1a10 	vmov	r1, s16
 80136e6:	2201      	movs	r2, #1
 80136e8:	4620      	mov	r0, r4
 80136ea:	f000 fd55 	bl	8014198 <__lshift>
 80136ee:	4631      	mov	r1, r6
 80136f0:	ee08 0a10 	vmov	s16, r0
 80136f4:	f000 fdc0 	bl	8014278 <__mcmp>
 80136f8:	2800      	cmp	r0, #0
 80136fa:	dc91      	bgt.n	8013620 <_dtoa_r+0xaa8>
 80136fc:	d102      	bne.n	8013704 <_dtoa_r+0xb8c>
 80136fe:	f01a 0f01 	tst.w	sl, #1
 8013702:	d18d      	bne.n	8013620 <_dtoa_r+0xaa8>
 8013704:	462b      	mov	r3, r5
 8013706:	461d      	mov	r5, r3
 8013708:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801370c:	2a30      	cmp	r2, #48	; 0x30
 801370e:	d0fa      	beq.n	8013706 <_dtoa_r+0xb8e>
 8013710:	e6d7      	b.n	80134c2 <_dtoa_r+0x94a>
 8013712:	9a01      	ldr	r2, [sp, #4]
 8013714:	429a      	cmp	r2, r3
 8013716:	d184      	bne.n	8013622 <_dtoa_r+0xaaa>
 8013718:	9b00      	ldr	r3, [sp, #0]
 801371a:	3301      	adds	r3, #1
 801371c:	9300      	str	r3, [sp, #0]
 801371e:	2331      	movs	r3, #49	; 0x31
 8013720:	7013      	strb	r3, [r2, #0]
 8013722:	e6ce      	b.n	80134c2 <_dtoa_r+0x94a>
 8013724:	4b09      	ldr	r3, [pc, #36]	; (801374c <_dtoa_r+0xbd4>)
 8013726:	f7ff ba95 	b.w	8012c54 <_dtoa_r+0xdc>
 801372a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801372c:	2b00      	cmp	r3, #0
 801372e:	f47f aa6e 	bne.w	8012c0e <_dtoa_r+0x96>
 8013732:	4b07      	ldr	r3, [pc, #28]	; (8013750 <_dtoa_r+0xbd8>)
 8013734:	f7ff ba8e 	b.w	8012c54 <_dtoa_r+0xdc>
 8013738:	9b02      	ldr	r3, [sp, #8]
 801373a:	2b00      	cmp	r3, #0
 801373c:	dcae      	bgt.n	801369c <_dtoa_r+0xb24>
 801373e:	9b06      	ldr	r3, [sp, #24]
 8013740:	2b02      	cmp	r3, #2
 8013742:	f73f aea8 	bgt.w	8013496 <_dtoa_r+0x91e>
 8013746:	e7a9      	b.n	801369c <_dtoa_r+0xb24>
 8013748:	08016280 	.word	0x08016280
 801374c:	0801620c 	.word	0x0801620c
 8013750:	080161ff 	.word	0x080161ff

08013754 <__errno>:
 8013754:	4b01      	ldr	r3, [pc, #4]	; (801375c <__errno+0x8>)
 8013756:	6818      	ldr	r0, [r3, #0]
 8013758:	4770      	bx	lr
 801375a:	bf00      	nop
 801375c:	20000060 	.word	0x20000060

08013760 <__sflush_r>:
 8013760:	898a      	ldrh	r2, [r1, #12]
 8013762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013766:	4605      	mov	r5, r0
 8013768:	0710      	lsls	r0, r2, #28
 801376a:	460c      	mov	r4, r1
 801376c:	d458      	bmi.n	8013820 <__sflush_r+0xc0>
 801376e:	684b      	ldr	r3, [r1, #4]
 8013770:	2b00      	cmp	r3, #0
 8013772:	dc05      	bgt.n	8013780 <__sflush_r+0x20>
 8013774:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013776:	2b00      	cmp	r3, #0
 8013778:	dc02      	bgt.n	8013780 <__sflush_r+0x20>
 801377a:	2000      	movs	r0, #0
 801377c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013780:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013782:	2e00      	cmp	r6, #0
 8013784:	d0f9      	beq.n	801377a <__sflush_r+0x1a>
 8013786:	2300      	movs	r3, #0
 8013788:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801378c:	682f      	ldr	r7, [r5, #0]
 801378e:	602b      	str	r3, [r5, #0]
 8013790:	d032      	beq.n	80137f8 <__sflush_r+0x98>
 8013792:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013794:	89a3      	ldrh	r3, [r4, #12]
 8013796:	075a      	lsls	r2, r3, #29
 8013798:	d505      	bpl.n	80137a6 <__sflush_r+0x46>
 801379a:	6863      	ldr	r3, [r4, #4]
 801379c:	1ac0      	subs	r0, r0, r3
 801379e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80137a0:	b10b      	cbz	r3, 80137a6 <__sflush_r+0x46>
 80137a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80137a4:	1ac0      	subs	r0, r0, r3
 80137a6:	2300      	movs	r3, #0
 80137a8:	4602      	mov	r2, r0
 80137aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80137ac:	6a21      	ldr	r1, [r4, #32]
 80137ae:	4628      	mov	r0, r5
 80137b0:	47b0      	blx	r6
 80137b2:	1c43      	adds	r3, r0, #1
 80137b4:	89a3      	ldrh	r3, [r4, #12]
 80137b6:	d106      	bne.n	80137c6 <__sflush_r+0x66>
 80137b8:	6829      	ldr	r1, [r5, #0]
 80137ba:	291d      	cmp	r1, #29
 80137bc:	d82c      	bhi.n	8013818 <__sflush_r+0xb8>
 80137be:	4a2a      	ldr	r2, [pc, #168]	; (8013868 <__sflush_r+0x108>)
 80137c0:	40ca      	lsrs	r2, r1
 80137c2:	07d6      	lsls	r6, r2, #31
 80137c4:	d528      	bpl.n	8013818 <__sflush_r+0xb8>
 80137c6:	2200      	movs	r2, #0
 80137c8:	6062      	str	r2, [r4, #4]
 80137ca:	04d9      	lsls	r1, r3, #19
 80137cc:	6922      	ldr	r2, [r4, #16]
 80137ce:	6022      	str	r2, [r4, #0]
 80137d0:	d504      	bpl.n	80137dc <__sflush_r+0x7c>
 80137d2:	1c42      	adds	r2, r0, #1
 80137d4:	d101      	bne.n	80137da <__sflush_r+0x7a>
 80137d6:	682b      	ldr	r3, [r5, #0]
 80137d8:	b903      	cbnz	r3, 80137dc <__sflush_r+0x7c>
 80137da:	6560      	str	r0, [r4, #84]	; 0x54
 80137dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80137de:	602f      	str	r7, [r5, #0]
 80137e0:	2900      	cmp	r1, #0
 80137e2:	d0ca      	beq.n	801377a <__sflush_r+0x1a>
 80137e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80137e8:	4299      	cmp	r1, r3
 80137ea:	d002      	beq.n	80137f2 <__sflush_r+0x92>
 80137ec:	4628      	mov	r0, r5
 80137ee:	f000 fe5b 	bl	80144a8 <_free_r>
 80137f2:	2000      	movs	r0, #0
 80137f4:	6360      	str	r0, [r4, #52]	; 0x34
 80137f6:	e7c1      	b.n	801377c <__sflush_r+0x1c>
 80137f8:	6a21      	ldr	r1, [r4, #32]
 80137fa:	2301      	movs	r3, #1
 80137fc:	4628      	mov	r0, r5
 80137fe:	47b0      	blx	r6
 8013800:	1c41      	adds	r1, r0, #1
 8013802:	d1c7      	bne.n	8013794 <__sflush_r+0x34>
 8013804:	682b      	ldr	r3, [r5, #0]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d0c4      	beq.n	8013794 <__sflush_r+0x34>
 801380a:	2b1d      	cmp	r3, #29
 801380c:	d001      	beq.n	8013812 <__sflush_r+0xb2>
 801380e:	2b16      	cmp	r3, #22
 8013810:	d101      	bne.n	8013816 <__sflush_r+0xb6>
 8013812:	602f      	str	r7, [r5, #0]
 8013814:	e7b1      	b.n	801377a <__sflush_r+0x1a>
 8013816:	89a3      	ldrh	r3, [r4, #12]
 8013818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801381c:	81a3      	strh	r3, [r4, #12]
 801381e:	e7ad      	b.n	801377c <__sflush_r+0x1c>
 8013820:	690f      	ldr	r7, [r1, #16]
 8013822:	2f00      	cmp	r7, #0
 8013824:	d0a9      	beq.n	801377a <__sflush_r+0x1a>
 8013826:	0793      	lsls	r3, r2, #30
 8013828:	680e      	ldr	r6, [r1, #0]
 801382a:	bf08      	it	eq
 801382c:	694b      	ldreq	r3, [r1, #20]
 801382e:	600f      	str	r7, [r1, #0]
 8013830:	bf18      	it	ne
 8013832:	2300      	movne	r3, #0
 8013834:	eba6 0807 	sub.w	r8, r6, r7
 8013838:	608b      	str	r3, [r1, #8]
 801383a:	f1b8 0f00 	cmp.w	r8, #0
 801383e:	dd9c      	ble.n	801377a <__sflush_r+0x1a>
 8013840:	6a21      	ldr	r1, [r4, #32]
 8013842:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013844:	4643      	mov	r3, r8
 8013846:	463a      	mov	r2, r7
 8013848:	4628      	mov	r0, r5
 801384a:	47b0      	blx	r6
 801384c:	2800      	cmp	r0, #0
 801384e:	dc06      	bgt.n	801385e <__sflush_r+0xfe>
 8013850:	89a3      	ldrh	r3, [r4, #12]
 8013852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013856:	81a3      	strh	r3, [r4, #12]
 8013858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801385c:	e78e      	b.n	801377c <__sflush_r+0x1c>
 801385e:	4407      	add	r7, r0
 8013860:	eba8 0800 	sub.w	r8, r8, r0
 8013864:	e7e9      	b.n	801383a <__sflush_r+0xda>
 8013866:	bf00      	nop
 8013868:	20400001 	.word	0x20400001

0801386c <_fflush_r>:
 801386c:	b538      	push	{r3, r4, r5, lr}
 801386e:	690b      	ldr	r3, [r1, #16]
 8013870:	4605      	mov	r5, r0
 8013872:	460c      	mov	r4, r1
 8013874:	b913      	cbnz	r3, 801387c <_fflush_r+0x10>
 8013876:	2500      	movs	r5, #0
 8013878:	4628      	mov	r0, r5
 801387a:	bd38      	pop	{r3, r4, r5, pc}
 801387c:	b118      	cbz	r0, 8013886 <_fflush_r+0x1a>
 801387e:	6983      	ldr	r3, [r0, #24]
 8013880:	b90b      	cbnz	r3, 8013886 <_fflush_r+0x1a>
 8013882:	f000 f887 	bl	8013994 <__sinit>
 8013886:	4b14      	ldr	r3, [pc, #80]	; (80138d8 <_fflush_r+0x6c>)
 8013888:	429c      	cmp	r4, r3
 801388a:	d11b      	bne.n	80138c4 <_fflush_r+0x58>
 801388c:	686c      	ldr	r4, [r5, #4]
 801388e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d0ef      	beq.n	8013876 <_fflush_r+0xa>
 8013896:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013898:	07d0      	lsls	r0, r2, #31
 801389a:	d404      	bmi.n	80138a6 <_fflush_r+0x3a>
 801389c:	0599      	lsls	r1, r3, #22
 801389e:	d402      	bmi.n	80138a6 <_fflush_r+0x3a>
 80138a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80138a2:	f000 f986 	bl	8013bb2 <__retarget_lock_acquire_recursive>
 80138a6:	4628      	mov	r0, r5
 80138a8:	4621      	mov	r1, r4
 80138aa:	f7ff ff59 	bl	8013760 <__sflush_r>
 80138ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80138b0:	07da      	lsls	r2, r3, #31
 80138b2:	4605      	mov	r5, r0
 80138b4:	d4e0      	bmi.n	8013878 <_fflush_r+0xc>
 80138b6:	89a3      	ldrh	r3, [r4, #12]
 80138b8:	059b      	lsls	r3, r3, #22
 80138ba:	d4dd      	bmi.n	8013878 <_fflush_r+0xc>
 80138bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80138be:	f000 f97a 	bl	8013bb6 <__retarget_lock_release_recursive>
 80138c2:	e7d9      	b.n	8013878 <_fflush_r+0xc>
 80138c4:	4b05      	ldr	r3, [pc, #20]	; (80138dc <_fflush_r+0x70>)
 80138c6:	429c      	cmp	r4, r3
 80138c8:	d101      	bne.n	80138ce <_fflush_r+0x62>
 80138ca:	68ac      	ldr	r4, [r5, #8]
 80138cc:	e7df      	b.n	801388e <_fflush_r+0x22>
 80138ce:	4b04      	ldr	r3, [pc, #16]	; (80138e0 <_fflush_r+0x74>)
 80138d0:	429c      	cmp	r4, r3
 80138d2:	bf08      	it	eq
 80138d4:	68ec      	ldreq	r4, [r5, #12]
 80138d6:	e7da      	b.n	801388e <_fflush_r+0x22>
 80138d8:	080162b4 	.word	0x080162b4
 80138dc:	080162d4 	.word	0x080162d4
 80138e0:	08016294 	.word	0x08016294

080138e4 <std>:
 80138e4:	2300      	movs	r3, #0
 80138e6:	b510      	push	{r4, lr}
 80138e8:	4604      	mov	r4, r0
 80138ea:	e9c0 3300 	strd	r3, r3, [r0]
 80138ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80138f2:	6083      	str	r3, [r0, #8]
 80138f4:	8181      	strh	r1, [r0, #12]
 80138f6:	6643      	str	r3, [r0, #100]	; 0x64
 80138f8:	81c2      	strh	r2, [r0, #14]
 80138fa:	6183      	str	r3, [r0, #24]
 80138fc:	4619      	mov	r1, r3
 80138fe:	2208      	movs	r2, #8
 8013900:	305c      	adds	r0, #92	; 0x5c
 8013902:	f000 fa23 	bl	8013d4c <memset>
 8013906:	4b05      	ldr	r3, [pc, #20]	; (801391c <std+0x38>)
 8013908:	6263      	str	r3, [r4, #36]	; 0x24
 801390a:	4b05      	ldr	r3, [pc, #20]	; (8013920 <std+0x3c>)
 801390c:	62a3      	str	r3, [r4, #40]	; 0x28
 801390e:	4b05      	ldr	r3, [pc, #20]	; (8013924 <std+0x40>)
 8013910:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013912:	4b05      	ldr	r3, [pc, #20]	; (8013928 <std+0x44>)
 8013914:	6224      	str	r4, [r4, #32]
 8013916:	6323      	str	r3, [r4, #48]	; 0x30
 8013918:	bd10      	pop	{r4, pc}
 801391a:	bf00      	nop
 801391c:	08015635 	.word	0x08015635
 8013920:	08015657 	.word	0x08015657
 8013924:	0801568f 	.word	0x0801568f
 8013928:	080156b3 	.word	0x080156b3

0801392c <_cleanup_r>:
 801392c:	4901      	ldr	r1, [pc, #4]	; (8013934 <_cleanup_r+0x8>)
 801392e:	f000 b8e7 	b.w	8013b00 <_fwalk_reent>
 8013932:	bf00      	nop
 8013934:	0801386d 	.word	0x0801386d

08013938 <__sfmoreglue>:
 8013938:	b570      	push	{r4, r5, r6, lr}
 801393a:	2268      	movs	r2, #104	; 0x68
 801393c:	1e4d      	subs	r5, r1, #1
 801393e:	4355      	muls	r5, r2
 8013940:	460e      	mov	r6, r1
 8013942:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013946:	f000 fe1b 	bl	8014580 <_malloc_r>
 801394a:	4604      	mov	r4, r0
 801394c:	b140      	cbz	r0, 8013960 <__sfmoreglue+0x28>
 801394e:	2100      	movs	r1, #0
 8013950:	e9c0 1600 	strd	r1, r6, [r0]
 8013954:	300c      	adds	r0, #12
 8013956:	60a0      	str	r0, [r4, #8]
 8013958:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801395c:	f000 f9f6 	bl	8013d4c <memset>
 8013960:	4620      	mov	r0, r4
 8013962:	bd70      	pop	{r4, r5, r6, pc}

08013964 <__sfp_lock_acquire>:
 8013964:	4801      	ldr	r0, [pc, #4]	; (801396c <__sfp_lock_acquire+0x8>)
 8013966:	f000 b924 	b.w	8013bb2 <__retarget_lock_acquire_recursive>
 801396a:	bf00      	nop
 801396c:	200004fe 	.word	0x200004fe

08013970 <__sfp_lock_release>:
 8013970:	4801      	ldr	r0, [pc, #4]	; (8013978 <__sfp_lock_release+0x8>)
 8013972:	f000 b920 	b.w	8013bb6 <__retarget_lock_release_recursive>
 8013976:	bf00      	nop
 8013978:	200004fe 	.word	0x200004fe

0801397c <__sinit_lock_acquire>:
 801397c:	4801      	ldr	r0, [pc, #4]	; (8013984 <__sinit_lock_acquire+0x8>)
 801397e:	f000 b918 	b.w	8013bb2 <__retarget_lock_acquire_recursive>
 8013982:	bf00      	nop
 8013984:	200004ff 	.word	0x200004ff

08013988 <__sinit_lock_release>:
 8013988:	4801      	ldr	r0, [pc, #4]	; (8013990 <__sinit_lock_release+0x8>)
 801398a:	f000 b914 	b.w	8013bb6 <__retarget_lock_release_recursive>
 801398e:	bf00      	nop
 8013990:	200004ff 	.word	0x200004ff

08013994 <__sinit>:
 8013994:	b510      	push	{r4, lr}
 8013996:	4604      	mov	r4, r0
 8013998:	f7ff fff0 	bl	801397c <__sinit_lock_acquire>
 801399c:	69a3      	ldr	r3, [r4, #24]
 801399e:	b11b      	cbz	r3, 80139a8 <__sinit+0x14>
 80139a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80139a4:	f7ff bff0 	b.w	8013988 <__sinit_lock_release>
 80139a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80139ac:	6523      	str	r3, [r4, #80]	; 0x50
 80139ae:	4b13      	ldr	r3, [pc, #76]	; (80139fc <__sinit+0x68>)
 80139b0:	4a13      	ldr	r2, [pc, #76]	; (8013a00 <__sinit+0x6c>)
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80139b6:	42a3      	cmp	r3, r4
 80139b8:	bf04      	itt	eq
 80139ba:	2301      	moveq	r3, #1
 80139bc:	61a3      	streq	r3, [r4, #24]
 80139be:	4620      	mov	r0, r4
 80139c0:	f000 f820 	bl	8013a04 <__sfp>
 80139c4:	6060      	str	r0, [r4, #4]
 80139c6:	4620      	mov	r0, r4
 80139c8:	f000 f81c 	bl	8013a04 <__sfp>
 80139cc:	60a0      	str	r0, [r4, #8]
 80139ce:	4620      	mov	r0, r4
 80139d0:	f000 f818 	bl	8013a04 <__sfp>
 80139d4:	2200      	movs	r2, #0
 80139d6:	60e0      	str	r0, [r4, #12]
 80139d8:	2104      	movs	r1, #4
 80139da:	6860      	ldr	r0, [r4, #4]
 80139dc:	f7ff ff82 	bl	80138e4 <std>
 80139e0:	68a0      	ldr	r0, [r4, #8]
 80139e2:	2201      	movs	r2, #1
 80139e4:	2109      	movs	r1, #9
 80139e6:	f7ff ff7d 	bl	80138e4 <std>
 80139ea:	68e0      	ldr	r0, [r4, #12]
 80139ec:	2202      	movs	r2, #2
 80139ee:	2112      	movs	r1, #18
 80139f0:	f7ff ff78 	bl	80138e4 <std>
 80139f4:	2301      	movs	r3, #1
 80139f6:	61a3      	str	r3, [r4, #24]
 80139f8:	e7d2      	b.n	80139a0 <__sinit+0xc>
 80139fa:	bf00      	nop
 80139fc:	080162f4 	.word	0x080162f4
 8013a00:	0801392d 	.word	0x0801392d

08013a04 <__sfp>:
 8013a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a06:	4607      	mov	r7, r0
 8013a08:	f7ff ffac 	bl	8013964 <__sfp_lock_acquire>
 8013a0c:	4b1e      	ldr	r3, [pc, #120]	; (8013a88 <__sfp+0x84>)
 8013a0e:	681e      	ldr	r6, [r3, #0]
 8013a10:	69b3      	ldr	r3, [r6, #24]
 8013a12:	b913      	cbnz	r3, 8013a1a <__sfp+0x16>
 8013a14:	4630      	mov	r0, r6
 8013a16:	f7ff ffbd 	bl	8013994 <__sinit>
 8013a1a:	3648      	adds	r6, #72	; 0x48
 8013a1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013a20:	3b01      	subs	r3, #1
 8013a22:	d503      	bpl.n	8013a2c <__sfp+0x28>
 8013a24:	6833      	ldr	r3, [r6, #0]
 8013a26:	b30b      	cbz	r3, 8013a6c <__sfp+0x68>
 8013a28:	6836      	ldr	r6, [r6, #0]
 8013a2a:	e7f7      	b.n	8013a1c <__sfp+0x18>
 8013a2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013a30:	b9d5      	cbnz	r5, 8013a68 <__sfp+0x64>
 8013a32:	4b16      	ldr	r3, [pc, #88]	; (8013a8c <__sfp+0x88>)
 8013a34:	60e3      	str	r3, [r4, #12]
 8013a36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013a3a:	6665      	str	r5, [r4, #100]	; 0x64
 8013a3c:	f000 f8b8 	bl	8013bb0 <__retarget_lock_init_recursive>
 8013a40:	f7ff ff96 	bl	8013970 <__sfp_lock_release>
 8013a44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013a48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013a4c:	6025      	str	r5, [r4, #0]
 8013a4e:	61a5      	str	r5, [r4, #24]
 8013a50:	2208      	movs	r2, #8
 8013a52:	4629      	mov	r1, r5
 8013a54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013a58:	f000 f978 	bl	8013d4c <memset>
 8013a5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013a60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013a64:	4620      	mov	r0, r4
 8013a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a68:	3468      	adds	r4, #104	; 0x68
 8013a6a:	e7d9      	b.n	8013a20 <__sfp+0x1c>
 8013a6c:	2104      	movs	r1, #4
 8013a6e:	4638      	mov	r0, r7
 8013a70:	f7ff ff62 	bl	8013938 <__sfmoreglue>
 8013a74:	4604      	mov	r4, r0
 8013a76:	6030      	str	r0, [r6, #0]
 8013a78:	2800      	cmp	r0, #0
 8013a7a:	d1d5      	bne.n	8013a28 <__sfp+0x24>
 8013a7c:	f7ff ff78 	bl	8013970 <__sfp_lock_release>
 8013a80:	230c      	movs	r3, #12
 8013a82:	603b      	str	r3, [r7, #0]
 8013a84:	e7ee      	b.n	8013a64 <__sfp+0x60>
 8013a86:	bf00      	nop
 8013a88:	080162f4 	.word	0x080162f4
 8013a8c:	ffff0001 	.word	0xffff0001

08013a90 <__libc_fini_array>:
 8013a90:	b538      	push	{r3, r4, r5, lr}
 8013a92:	4d07      	ldr	r5, [pc, #28]	; (8013ab0 <__libc_fini_array+0x20>)
 8013a94:	4c07      	ldr	r4, [pc, #28]	; (8013ab4 <__libc_fini_array+0x24>)
 8013a96:	1b64      	subs	r4, r4, r5
 8013a98:	10a4      	asrs	r4, r4, #2
 8013a9a:	b91c      	cbnz	r4, 8013aa4 <__libc_fini_array+0x14>
 8013a9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013aa0:	f002 b84c 	b.w	8015b3c <_fini>
 8013aa4:	3c01      	subs	r4, #1
 8013aa6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8013aaa:	4798      	blx	r3
 8013aac:	e7f5      	b.n	8013a9a <__libc_fini_array+0xa>
 8013aae:	bf00      	nop
 8013ab0:	080164d8 	.word	0x080164d8
 8013ab4:	080164dc 	.word	0x080164dc

08013ab8 <fiprintf>:
 8013ab8:	b40e      	push	{r1, r2, r3}
 8013aba:	b503      	push	{r0, r1, lr}
 8013abc:	4601      	mov	r1, r0
 8013abe:	ab03      	add	r3, sp, #12
 8013ac0:	4805      	ldr	r0, [pc, #20]	; (8013ad8 <fiprintf+0x20>)
 8013ac2:	f853 2b04 	ldr.w	r2, [r3], #4
 8013ac6:	6800      	ldr	r0, [r0, #0]
 8013ac8:	9301      	str	r3, [sp, #4]
 8013aca:	f000 ff89 	bl	80149e0 <_vfiprintf_r>
 8013ace:	b002      	add	sp, #8
 8013ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8013ad4:	b003      	add	sp, #12
 8013ad6:	4770      	bx	lr
 8013ad8:	20000060 	.word	0x20000060

08013adc <_fstat_r>:
 8013adc:	b538      	push	{r3, r4, r5, lr}
 8013ade:	4d07      	ldr	r5, [pc, #28]	; (8013afc <_fstat_r+0x20>)
 8013ae0:	2300      	movs	r3, #0
 8013ae2:	4604      	mov	r4, r0
 8013ae4:	4608      	mov	r0, r1
 8013ae6:	4611      	mov	r1, r2
 8013ae8:	602b      	str	r3, [r5, #0]
 8013aea:	f7ee fc3d 	bl	8002368 <_fstat>
 8013aee:	1c43      	adds	r3, r0, #1
 8013af0:	d102      	bne.n	8013af8 <_fstat_r+0x1c>
 8013af2:	682b      	ldr	r3, [r5, #0]
 8013af4:	b103      	cbz	r3, 8013af8 <_fstat_r+0x1c>
 8013af6:	6023      	str	r3, [r4, #0]
 8013af8:	bd38      	pop	{r3, r4, r5, pc}
 8013afa:	bf00      	nop
 8013afc:	20000610 	.word	0x20000610

08013b00 <_fwalk_reent>:
 8013b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b04:	4606      	mov	r6, r0
 8013b06:	4688      	mov	r8, r1
 8013b08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013b0c:	2700      	movs	r7, #0
 8013b0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013b12:	f1b9 0901 	subs.w	r9, r9, #1
 8013b16:	d505      	bpl.n	8013b24 <_fwalk_reent+0x24>
 8013b18:	6824      	ldr	r4, [r4, #0]
 8013b1a:	2c00      	cmp	r4, #0
 8013b1c:	d1f7      	bne.n	8013b0e <_fwalk_reent+0xe>
 8013b1e:	4638      	mov	r0, r7
 8013b20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b24:	89ab      	ldrh	r3, [r5, #12]
 8013b26:	2b01      	cmp	r3, #1
 8013b28:	d907      	bls.n	8013b3a <_fwalk_reent+0x3a>
 8013b2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013b2e:	3301      	adds	r3, #1
 8013b30:	d003      	beq.n	8013b3a <_fwalk_reent+0x3a>
 8013b32:	4629      	mov	r1, r5
 8013b34:	4630      	mov	r0, r6
 8013b36:	47c0      	blx	r8
 8013b38:	4307      	orrs	r7, r0
 8013b3a:	3568      	adds	r5, #104	; 0x68
 8013b3c:	e7e9      	b.n	8013b12 <_fwalk_reent+0x12>
	...

08013b40 <__libc_init_array>:
 8013b40:	b570      	push	{r4, r5, r6, lr}
 8013b42:	4d0d      	ldr	r5, [pc, #52]	; (8013b78 <__libc_init_array+0x38>)
 8013b44:	4c0d      	ldr	r4, [pc, #52]	; (8013b7c <__libc_init_array+0x3c>)
 8013b46:	1b64      	subs	r4, r4, r5
 8013b48:	10a4      	asrs	r4, r4, #2
 8013b4a:	2600      	movs	r6, #0
 8013b4c:	42a6      	cmp	r6, r4
 8013b4e:	d109      	bne.n	8013b64 <__libc_init_array+0x24>
 8013b50:	4d0b      	ldr	r5, [pc, #44]	; (8013b80 <__libc_init_array+0x40>)
 8013b52:	4c0c      	ldr	r4, [pc, #48]	; (8013b84 <__libc_init_array+0x44>)
 8013b54:	f001 ffec 	bl	8015b30 <_init>
 8013b58:	1b64      	subs	r4, r4, r5
 8013b5a:	10a4      	asrs	r4, r4, #2
 8013b5c:	2600      	movs	r6, #0
 8013b5e:	42a6      	cmp	r6, r4
 8013b60:	d105      	bne.n	8013b6e <__libc_init_array+0x2e>
 8013b62:	bd70      	pop	{r4, r5, r6, pc}
 8013b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8013b68:	4798      	blx	r3
 8013b6a:	3601      	adds	r6, #1
 8013b6c:	e7ee      	b.n	8013b4c <__libc_init_array+0xc>
 8013b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013b72:	4798      	blx	r3
 8013b74:	3601      	adds	r6, #1
 8013b76:	e7f2      	b.n	8013b5e <__libc_init_array+0x1e>
 8013b78:	080164c0 	.word	0x080164c0
 8013b7c:	080164c0 	.word	0x080164c0
 8013b80:	080164c0 	.word	0x080164c0
 8013b84:	080164d8 	.word	0x080164d8

08013b88 <_isatty_r>:
 8013b88:	b538      	push	{r3, r4, r5, lr}
 8013b8a:	4d06      	ldr	r5, [pc, #24]	; (8013ba4 <_isatty_r+0x1c>)
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	4604      	mov	r4, r0
 8013b90:	4608      	mov	r0, r1
 8013b92:	602b      	str	r3, [r5, #0]
 8013b94:	f7ee fbf8 	bl	8002388 <_isatty>
 8013b98:	1c43      	adds	r3, r0, #1
 8013b9a:	d102      	bne.n	8013ba2 <_isatty_r+0x1a>
 8013b9c:	682b      	ldr	r3, [r5, #0]
 8013b9e:	b103      	cbz	r3, 8013ba2 <_isatty_r+0x1a>
 8013ba0:	6023      	str	r3, [r4, #0]
 8013ba2:	bd38      	pop	{r3, r4, r5, pc}
 8013ba4:	20000610 	.word	0x20000610

08013ba8 <_localeconv_r>:
 8013ba8:	4800      	ldr	r0, [pc, #0]	; (8013bac <_localeconv_r+0x4>)
 8013baa:	4770      	bx	lr
 8013bac:	200001b4 	.word	0x200001b4

08013bb0 <__retarget_lock_init_recursive>:
 8013bb0:	4770      	bx	lr

08013bb2 <__retarget_lock_acquire_recursive>:
 8013bb2:	4770      	bx	lr

08013bb4 <__retarget_lock_release>:
 8013bb4:	4770      	bx	lr

08013bb6 <__retarget_lock_release_recursive>:
 8013bb6:	4770      	bx	lr

08013bb8 <_lseek_r>:
 8013bb8:	b538      	push	{r3, r4, r5, lr}
 8013bba:	4d07      	ldr	r5, [pc, #28]	; (8013bd8 <_lseek_r+0x20>)
 8013bbc:	4604      	mov	r4, r0
 8013bbe:	4608      	mov	r0, r1
 8013bc0:	4611      	mov	r1, r2
 8013bc2:	2200      	movs	r2, #0
 8013bc4:	602a      	str	r2, [r5, #0]
 8013bc6:	461a      	mov	r2, r3
 8013bc8:	f7ee fbe9 	bl	800239e <_lseek>
 8013bcc:	1c43      	adds	r3, r0, #1
 8013bce:	d102      	bne.n	8013bd6 <_lseek_r+0x1e>
 8013bd0:	682b      	ldr	r3, [r5, #0]
 8013bd2:	b103      	cbz	r3, 8013bd6 <_lseek_r+0x1e>
 8013bd4:	6023      	str	r3, [r4, #0]
 8013bd6:	bd38      	pop	{r3, r4, r5, pc}
 8013bd8:	20000610 	.word	0x20000610

08013bdc <__swhatbuf_r>:
 8013bdc:	b570      	push	{r4, r5, r6, lr}
 8013bde:	460e      	mov	r6, r1
 8013be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013be4:	2900      	cmp	r1, #0
 8013be6:	b096      	sub	sp, #88	; 0x58
 8013be8:	4614      	mov	r4, r2
 8013bea:	461d      	mov	r5, r3
 8013bec:	da08      	bge.n	8013c00 <__swhatbuf_r+0x24>
 8013bee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013bf2:	2200      	movs	r2, #0
 8013bf4:	602a      	str	r2, [r5, #0]
 8013bf6:	061a      	lsls	r2, r3, #24
 8013bf8:	d410      	bmi.n	8013c1c <__swhatbuf_r+0x40>
 8013bfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013bfe:	e00e      	b.n	8013c1e <__swhatbuf_r+0x42>
 8013c00:	466a      	mov	r2, sp
 8013c02:	f7ff ff6b 	bl	8013adc <_fstat_r>
 8013c06:	2800      	cmp	r0, #0
 8013c08:	dbf1      	blt.n	8013bee <__swhatbuf_r+0x12>
 8013c0a:	9a01      	ldr	r2, [sp, #4]
 8013c0c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013c10:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013c14:	425a      	negs	r2, r3
 8013c16:	415a      	adcs	r2, r3
 8013c18:	602a      	str	r2, [r5, #0]
 8013c1a:	e7ee      	b.n	8013bfa <__swhatbuf_r+0x1e>
 8013c1c:	2340      	movs	r3, #64	; 0x40
 8013c1e:	2000      	movs	r0, #0
 8013c20:	6023      	str	r3, [r4, #0]
 8013c22:	b016      	add	sp, #88	; 0x58
 8013c24:	bd70      	pop	{r4, r5, r6, pc}
	...

08013c28 <__smakebuf_r>:
 8013c28:	898b      	ldrh	r3, [r1, #12]
 8013c2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013c2c:	079d      	lsls	r5, r3, #30
 8013c2e:	4606      	mov	r6, r0
 8013c30:	460c      	mov	r4, r1
 8013c32:	d507      	bpl.n	8013c44 <__smakebuf_r+0x1c>
 8013c34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013c38:	6023      	str	r3, [r4, #0]
 8013c3a:	6123      	str	r3, [r4, #16]
 8013c3c:	2301      	movs	r3, #1
 8013c3e:	6163      	str	r3, [r4, #20]
 8013c40:	b002      	add	sp, #8
 8013c42:	bd70      	pop	{r4, r5, r6, pc}
 8013c44:	ab01      	add	r3, sp, #4
 8013c46:	466a      	mov	r2, sp
 8013c48:	f7ff ffc8 	bl	8013bdc <__swhatbuf_r>
 8013c4c:	9900      	ldr	r1, [sp, #0]
 8013c4e:	4605      	mov	r5, r0
 8013c50:	4630      	mov	r0, r6
 8013c52:	f000 fc95 	bl	8014580 <_malloc_r>
 8013c56:	b948      	cbnz	r0, 8013c6c <__smakebuf_r+0x44>
 8013c58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c5c:	059a      	lsls	r2, r3, #22
 8013c5e:	d4ef      	bmi.n	8013c40 <__smakebuf_r+0x18>
 8013c60:	f023 0303 	bic.w	r3, r3, #3
 8013c64:	f043 0302 	orr.w	r3, r3, #2
 8013c68:	81a3      	strh	r3, [r4, #12]
 8013c6a:	e7e3      	b.n	8013c34 <__smakebuf_r+0xc>
 8013c6c:	4b0d      	ldr	r3, [pc, #52]	; (8013ca4 <__smakebuf_r+0x7c>)
 8013c6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8013c70:	89a3      	ldrh	r3, [r4, #12]
 8013c72:	6020      	str	r0, [r4, #0]
 8013c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013c78:	81a3      	strh	r3, [r4, #12]
 8013c7a:	9b00      	ldr	r3, [sp, #0]
 8013c7c:	6163      	str	r3, [r4, #20]
 8013c7e:	9b01      	ldr	r3, [sp, #4]
 8013c80:	6120      	str	r0, [r4, #16]
 8013c82:	b15b      	cbz	r3, 8013c9c <__smakebuf_r+0x74>
 8013c84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013c88:	4630      	mov	r0, r6
 8013c8a:	f7ff ff7d 	bl	8013b88 <_isatty_r>
 8013c8e:	b128      	cbz	r0, 8013c9c <__smakebuf_r+0x74>
 8013c90:	89a3      	ldrh	r3, [r4, #12]
 8013c92:	f023 0303 	bic.w	r3, r3, #3
 8013c96:	f043 0301 	orr.w	r3, r3, #1
 8013c9a:	81a3      	strh	r3, [r4, #12]
 8013c9c:	89a0      	ldrh	r0, [r4, #12]
 8013c9e:	4305      	orrs	r5, r0
 8013ca0:	81a5      	strh	r5, [r4, #12]
 8013ca2:	e7cd      	b.n	8013c40 <__smakebuf_r+0x18>
 8013ca4:	0801392d 	.word	0x0801392d

08013ca8 <malloc>:
 8013ca8:	4b02      	ldr	r3, [pc, #8]	; (8013cb4 <malloc+0xc>)
 8013caa:	4601      	mov	r1, r0
 8013cac:	6818      	ldr	r0, [r3, #0]
 8013cae:	f000 bc67 	b.w	8014580 <_malloc_r>
 8013cb2:	bf00      	nop
 8013cb4:	20000060 	.word	0x20000060

08013cb8 <__ascii_mbtowc>:
 8013cb8:	b082      	sub	sp, #8
 8013cba:	b901      	cbnz	r1, 8013cbe <__ascii_mbtowc+0x6>
 8013cbc:	a901      	add	r1, sp, #4
 8013cbe:	b142      	cbz	r2, 8013cd2 <__ascii_mbtowc+0x1a>
 8013cc0:	b14b      	cbz	r3, 8013cd6 <__ascii_mbtowc+0x1e>
 8013cc2:	7813      	ldrb	r3, [r2, #0]
 8013cc4:	600b      	str	r3, [r1, #0]
 8013cc6:	7812      	ldrb	r2, [r2, #0]
 8013cc8:	1e10      	subs	r0, r2, #0
 8013cca:	bf18      	it	ne
 8013ccc:	2001      	movne	r0, #1
 8013cce:	b002      	add	sp, #8
 8013cd0:	4770      	bx	lr
 8013cd2:	4610      	mov	r0, r2
 8013cd4:	e7fb      	b.n	8013cce <__ascii_mbtowc+0x16>
 8013cd6:	f06f 0001 	mvn.w	r0, #1
 8013cda:	e7f8      	b.n	8013cce <__ascii_mbtowc+0x16>

08013cdc <memcmp>:
 8013cdc:	b510      	push	{r4, lr}
 8013cde:	3901      	subs	r1, #1
 8013ce0:	4402      	add	r2, r0
 8013ce2:	4290      	cmp	r0, r2
 8013ce4:	d101      	bne.n	8013cea <memcmp+0xe>
 8013ce6:	2000      	movs	r0, #0
 8013ce8:	e005      	b.n	8013cf6 <memcmp+0x1a>
 8013cea:	7803      	ldrb	r3, [r0, #0]
 8013cec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013cf0:	42a3      	cmp	r3, r4
 8013cf2:	d001      	beq.n	8013cf8 <memcmp+0x1c>
 8013cf4:	1b18      	subs	r0, r3, r4
 8013cf6:	bd10      	pop	{r4, pc}
 8013cf8:	3001      	adds	r0, #1
 8013cfa:	e7f2      	b.n	8013ce2 <memcmp+0x6>

08013cfc <memcpy>:
 8013cfc:	440a      	add	r2, r1
 8013cfe:	4291      	cmp	r1, r2
 8013d00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8013d04:	d100      	bne.n	8013d08 <memcpy+0xc>
 8013d06:	4770      	bx	lr
 8013d08:	b510      	push	{r4, lr}
 8013d0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013d0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013d12:	4291      	cmp	r1, r2
 8013d14:	d1f9      	bne.n	8013d0a <memcpy+0xe>
 8013d16:	bd10      	pop	{r4, pc}

08013d18 <memmove>:
 8013d18:	4288      	cmp	r0, r1
 8013d1a:	b510      	push	{r4, lr}
 8013d1c:	eb01 0402 	add.w	r4, r1, r2
 8013d20:	d902      	bls.n	8013d28 <memmove+0x10>
 8013d22:	4284      	cmp	r4, r0
 8013d24:	4623      	mov	r3, r4
 8013d26:	d807      	bhi.n	8013d38 <memmove+0x20>
 8013d28:	1e43      	subs	r3, r0, #1
 8013d2a:	42a1      	cmp	r1, r4
 8013d2c:	d008      	beq.n	8013d40 <memmove+0x28>
 8013d2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013d32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013d36:	e7f8      	b.n	8013d2a <memmove+0x12>
 8013d38:	4402      	add	r2, r0
 8013d3a:	4601      	mov	r1, r0
 8013d3c:	428a      	cmp	r2, r1
 8013d3e:	d100      	bne.n	8013d42 <memmove+0x2a>
 8013d40:	bd10      	pop	{r4, pc}
 8013d42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013d46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013d4a:	e7f7      	b.n	8013d3c <memmove+0x24>

08013d4c <memset>:
 8013d4c:	4402      	add	r2, r0
 8013d4e:	4603      	mov	r3, r0
 8013d50:	4293      	cmp	r3, r2
 8013d52:	d100      	bne.n	8013d56 <memset+0xa>
 8013d54:	4770      	bx	lr
 8013d56:	f803 1b01 	strb.w	r1, [r3], #1
 8013d5a:	e7f9      	b.n	8013d50 <memset+0x4>

08013d5c <__malloc_lock>:
 8013d5c:	4801      	ldr	r0, [pc, #4]	; (8013d64 <__malloc_lock+0x8>)
 8013d5e:	f7ff bf28 	b.w	8013bb2 <__retarget_lock_acquire_recursive>
 8013d62:	bf00      	nop
 8013d64:	200004fd 	.word	0x200004fd

08013d68 <__malloc_unlock>:
 8013d68:	4801      	ldr	r0, [pc, #4]	; (8013d70 <__malloc_unlock+0x8>)
 8013d6a:	f7ff bf24 	b.w	8013bb6 <__retarget_lock_release_recursive>
 8013d6e:	bf00      	nop
 8013d70:	200004fd 	.word	0x200004fd

08013d74 <_Balloc>:
 8013d74:	b570      	push	{r4, r5, r6, lr}
 8013d76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013d78:	4604      	mov	r4, r0
 8013d7a:	460d      	mov	r5, r1
 8013d7c:	b976      	cbnz	r6, 8013d9c <_Balloc+0x28>
 8013d7e:	2010      	movs	r0, #16
 8013d80:	f7ff ff92 	bl	8013ca8 <malloc>
 8013d84:	4602      	mov	r2, r0
 8013d86:	6260      	str	r0, [r4, #36]	; 0x24
 8013d88:	b920      	cbnz	r0, 8013d94 <_Balloc+0x20>
 8013d8a:	4b18      	ldr	r3, [pc, #96]	; (8013dec <_Balloc+0x78>)
 8013d8c:	4818      	ldr	r0, [pc, #96]	; (8013df0 <_Balloc+0x7c>)
 8013d8e:	2166      	movs	r1, #102	; 0x66
 8013d90:	f7fe fe32 	bl	80129f8 <__assert_func>
 8013d94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013d98:	6006      	str	r6, [r0, #0]
 8013d9a:	60c6      	str	r6, [r0, #12]
 8013d9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013d9e:	68f3      	ldr	r3, [r6, #12]
 8013da0:	b183      	cbz	r3, 8013dc4 <_Balloc+0x50>
 8013da2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013da4:	68db      	ldr	r3, [r3, #12]
 8013da6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013daa:	b9b8      	cbnz	r0, 8013ddc <_Balloc+0x68>
 8013dac:	2101      	movs	r1, #1
 8013dae:	fa01 f605 	lsl.w	r6, r1, r5
 8013db2:	1d72      	adds	r2, r6, #5
 8013db4:	0092      	lsls	r2, r2, #2
 8013db6:	4620      	mov	r0, r4
 8013db8:	f000 fb60 	bl	801447c <_calloc_r>
 8013dbc:	b160      	cbz	r0, 8013dd8 <_Balloc+0x64>
 8013dbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013dc2:	e00e      	b.n	8013de2 <_Balloc+0x6e>
 8013dc4:	2221      	movs	r2, #33	; 0x21
 8013dc6:	2104      	movs	r1, #4
 8013dc8:	4620      	mov	r0, r4
 8013dca:	f000 fb57 	bl	801447c <_calloc_r>
 8013dce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013dd0:	60f0      	str	r0, [r6, #12]
 8013dd2:	68db      	ldr	r3, [r3, #12]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d1e4      	bne.n	8013da2 <_Balloc+0x2e>
 8013dd8:	2000      	movs	r0, #0
 8013dda:	bd70      	pop	{r4, r5, r6, pc}
 8013ddc:	6802      	ldr	r2, [r0, #0]
 8013dde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013de2:	2300      	movs	r3, #0
 8013de4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013de8:	e7f7      	b.n	8013dda <_Balloc+0x66>
 8013dea:	bf00      	nop
 8013dec:	0801620e 	.word	0x0801620e
 8013df0:	08016302 	.word	0x08016302

08013df4 <_Bfree>:
 8013df4:	b570      	push	{r4, r5, r6, lr}
 8013df6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013df8:	4605      	mov	r5, r0
 8013dfa:	460c      	mov	r4, r1
 8013dfc:	b976      	cbnz	r6, 8013e1c <_Bfree+0x28>
 8013dfe:	2010      	movs	r0, #16
 8013e00:	f7ff ff52 	bl	8013ca8 <malloc>
 8013e04:	4602      	mov	r2, r0
 8013e06:	6268      	str	r0, [r5, #36]	; 0x24
 8013e08:	b920      	cbnz	r0, 8013e14 <_Bfree+0x20>
 8013e0a:	4b09      	ldr	r3, [pc, #36]	; (8013e30 <_Bfree+0x3c>)
 8013e0c:	4809      	ldr	r0, [pc, #36]	; (8013e34 <_Bfree+0x40>)
 8013e0e:	218a      	movs	r1, #138	; 0x8a
 8013e10:	f7fe fdf2 	bl	80129f8 <__assert_func>
 8013e14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013e18:	6006      	str	r6, [r0, #0]
 8013e1a:	60c6      	str	r6, [r0, #12]
 8013e1c:	b13c      	cbz	r4, 8013e2e <_Bfree+0x3a>
 8013e1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013e20:	6862      	ldr	r2, [r4, #4]
 8013e22:	68db      	ldr	r3, [r3, #12]
 8013e24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013e28:	6021      	str	r1, [r4, #0]
 8013e2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013e2e:	bd70      	pop	{r4, r5, r6, pc}
 8013e30:	0801620e 	.word	0x0801620e
 8013e34:	08016302 	.word	0x08016302

08013e38 <__multadd>:
 8013e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e3c:	690d      	ldr	r5, [r1, #16]
 8013e3e:	4607      	mov	r7, r0
 8013e40:	460c      	mov	r4, r1
 8013e42:	461e      	mov	r6, r3
 8013e44:	f101 0c14 	add.w	ip, r1, #20
 8013e48:	2000      	movs	r0, #0
 8013e4a:	f8dc 3000 	ldr.w	r3, [ip]
 8013e4e:	b299      	uxth	r1, r3
 8013e50:	fb02 6101 	mla	r1, r2, r1, r6
 8013e54:	0c1e      	lsrs	r6, r3, #16
 8013e56:	0c0b      	lsrs	r3, r1, #16
 8013e58:	fb02 3306 	mla	r3, r2, r6, r3
 8013e5c:	b289      	uxth	r1, r1
 8013e5e:	3001      	adds	r0, #1
 8013e60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013e64:	4285      	cmp	r5, r0
 8013e66:	f84c 1b04 	str.w	r1, [ip], #4
 8013e6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013e6e:	dcec      	bgt.n	8013e4a <__multadd+0x12>
 8013e70:	b30e      	cbz	r6, 8013eb6 <__multadd+0x7e>
 8013e72:	68a3      	ldr	r3, [r4, #8]
 8013e74:	42ab      	cmp	r3, r5
 8013e76:	dc19      	bgt.n	8013eac <__multadd+0x74>
 8013e78:	6861      	ldr	r1, [r4, #4]
 8013e7a:	4638      	mov	r0, r7
 8013e7c:	3101      	adds	r1, #1
 8013e7e:	f7ff ff79 	bl	8013d74 <_Balloc>
 8013e82:	4680      	mov	r8, r0
 8013e84:	b928      	cbnz	r0, 8013e92 <__multadd+0x5a>
 8013e86:	4602      	mov	r2, r0
 8013e88:	4b0c      	ldr	r3, [pc, #48]	; (8013ebc <__multadd+0x84>)
 8013e8a:	480d      	ldr	r0, [pc, #52]	; (8013ec0 <__multadd+0x88>)
 8013e8c:	21b5      	movs	r1, #181	; 0xb5
 8013e8e:	f7fe fdb3 	bl	80129f8 <__assert_func>
 8013e92:	6922      	ldr	r2, [r4, #16]
 8013e94:	3202      	adds	r2, #2
 8013e96:	f104 010c 	add.w	r1, r4, #12
 8013e9a:	0092      	lsls	r2, r2, #2
 8013e9c:	300c      	adds	r0, #12
 8013e9e:	f7ff ff2d 	bl	8013cfc <memcpy>
 8013ea2:	4621      	mov	r1, r4
 8013ea4:	4638      	mov	r0, r7
 8013ea6:	f7ff ffa5 	bl	8013df4 <_Bfree>
 8013eaa:	4644      	mov	r4, r8
 8013eac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013eb0:	3501      	adds	r5, #1
 8013eb2:	615e      	str	r6, [r3, #20]
 8013eb4:	6125      	str	r5, [r4, #16]
 8013eb6:	4620      	mov	r0, r4
 8013eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ebc:	08016280 	.word	0x08016280
 8013ec0:	08016302 	.word	0x08016302

08013ec4 <__hi0bits>:
 8013ec4:	0c03      	lsrs	r3, r0, #16
 8013ec6:	041b      	lsls	r3, r3, #16
 8013ec8:	b9d3      	cbnz	r3, 8013f00 <__hi0bits+0x3c>
 8013eca:	0400      	lsls	r0, r0, #16
 8013ecc:	2310      	movs	r3, #16
 8013ece:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013ed2:	bf04      	itt	eq
 8013ed4:	0200      	lsleq	r0, r0, #8
 8013ed6:	3308      	addeq	r3, #8
 8013ed8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013edc:	bf04      	itt	eq
 8013ede:	0100      	lsleq	r0, r0, #4
 8013ee0:	3304      	addeq	r3, #4
 8013ee2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013ee6:	bf04      	itt	eq
 8013ee8:	0080      	lsleq	r0, r0, #2
 8013eea:	3302      	addeq	r3, #2
 8013eec:	2800      	cmp	r0, #0
 8013eee:	db05      	blt.n	8013efc <__hi0bits+0x38>
 8013ef0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013ef4:	f103 0301 	add.w	r3, r3, #1
 8013ef8:	bf08      	it	eq
 8013efa:	2320      	moveq	r3, #32
 8013efc:	4618      	mov	r0, r3
 8013efe:	4770      	bx	lr
 8013f00:	2300      	movs	r3, #0
 8013f02:	e7e4      	b.n	8013ece <__hi0bits+0xa>

08013f04 <__lo0bits>:
 8013f04:	6803      	ldr	r3, [r0, #0]
 8013f06:	f013 0207 	ands.w	r2, r3, #7
 8013f0a:	4601      	mov	r1, r0
 8013f0c:	d00b      	beq.n	8013f26 <__lo0bits+0x22>
 8013f0e:	07da      	lsls	r2, r3, #31
 8013f10:	d423      	bmi.n	8013f5a <__lo0bits+0x56>
 8013f12:	0798      	lsls	r0, r3, #30
 8013f14:	bf49      	itett	mi
 8013f16:	085b      	lsrmi	r3, r3, #1
 8013f18:	089b      	lsrpl	r3, r3, #2
 8013f1a:	2001      	movmi	r0, #1
 8013f1c:	600b      	strmi	r3, [r1, #0]
 8013f1e:	bf5c      	itt	pl
 8013f20:	600b      	strpl	r3, [r1, #0]
 8013f22:	2002      	movpl	r0, #2
 8013f24:	4770      	bx	lr
 8013f26:	b298      	uxth	r0, r3
 8013f28:	b9a8      	cbnz	r0, 8013f56 <__lo0bits+0x52>
 8013f2a:	0c1b      	lsrs	r3, r3, #16
 8013f2c:	2010      	movs	r0, #16
 8013f2e:	b2da      	uxtb	r2, r3
 8013f30:	b90a      	cbnz	r2, 8013f36 <__lo0bits+0x32>
 8013f32:	3008      	adds	r0, #8
 8013f34:	0a1b      	lsrs	r3, r3, #8
 8013f36:	071a      	lsls	r2, r3, #28
 8013f38:	bf04      	itt	eq
 8013f3a:	091b      	lsreq	r3, r3, #4
 8013f3c:	3004      	addeq	r0, #4
 8013f3e:	079a      	lsls	r2, r3, #30
 8013f40:	bf04      	itt	eq
 8013f42:	089b      	lsreq	r3, r3, #2
 8013f44:	3002      	addeq	r0, #2
 8013f46:	07da      	lsls	r2, r3, #31
 8013f48:	d403      	bmi.n	8013f52 <__lo0bits+0x4e>
 8013f4a:	085b      	lsrs	r3, r3, #1
 8013f4c:	f100 0001 	add.w	r0, r0, #1
 8013f50:	d005      	beq.n	8013f5e <__lo0bits+0x5a>
 8013f52:	600b      	str	r3, [r1, #0]
 8013f54:	4770      	bx	lr
 8013f56:	4610      	mov	r0, r2
 8013f58:	e7e9      	b.n	8013f2e <__lo0bits+0x2a>
 8013f5a:	2000      	movs	r0, #0
 8013f5c:	4770      	bx	lr
 8013f5e:	2020      	movs	r0, #32
 8013f60:	4770      	bx	lr
	...

08013f64 <__i2b>:
 8013f64:	b510      	push	{r4, lr}
 8013f66:	460c      	mov	r4, r1
 8013f68:	2101      	movs	r1, #1
 8013f6a:	f7ff ff03 	bl	8013d74 <_Balloc>
 8013f6e:	4602      	mov	r2, r0
 8013f70:	b928      	cbnz	r0, 8013f7e <__i2b+0x1a>
 8013f72:	4b05      	ldr	r3, [pc, #20]	; (8013f88 <__i2b+0x24>)
 8013f74:	4805      	ldr	r0, [pc, #20]	; (8013f8c <__i2b+0x28>)
 8013f76:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013f7a:	f7fe fd3d 	bl	80129f8 <__assert_func>
 8013f7e:	2301      	movs	r3, #1
 8013f80:	6144      	str	r4, [r0, #20]
 8013f82:	6103      	str	r3, [r0, #16]
 8013f84:	bd10      	pop	{r4, pc}
 8013f86:	bf00      	nop
 8013f88:	08016280 	.word	0x08016280
 8013f8c:	08016302 	.word	0x08016302

08013f90 <__multiply>:
 8013f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f94:	4691      	mov	r9, r2
 8013f96:	690a      	ldr	r2, [r1, #16]
 8013f98:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013f9c:	429a      	cmp	r2, r3
 8013f9e:	bfb8      	it	lt
 8013fa0:	460b      	movlt	r3, r1
 8013fa2:	460c      	mov	r4, r1
 8013fa4:	bfbc      	itt	lt
 8013fa6:	464c      	movlt	r4, r9
 8013fa8:	4699      	movlt	r9, r3
 8013faa:	6927      	ldr	r7, [r4, #16]
 8013fac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013fb0:	68a3      	ldr	r3, [r4, #8]
 8013fb2:	6861      	ldr	r1, [r4, #4]
 8013fb4:	eb07 060a 	add.w	r6, r7, sl
 8013fb8:	42b3      	cmp	r3, r6
 8013fba:	b085      	sub	sp, #20
 8013fbc:	bfb8      	it	lt
 8013fbe:	3101      	addlt	r1, #1
 8013fc0:	f7ff fed8 	bl	8013d74 <_Balloc>
 8013fc4:	b930      	cbnz	r0, 8013fd4 <__multiply+0x44>
 8013fc6:	4602      	mov	r2, r0
 8013fc8:	4b44      	ldr	r3, [pc, #272]	; (80140dc <__multiply+0x14c>)
 8013fca:	4845      	ldr	r0, [pc, #276]	; (80140e0 <__multiply+0x150>)
 8013fcc:	f240 115d 	movw	r1, #349	; 0x15d
 8013fd0:	f7fe fd12 	bl	80129f8 <__assert_func>
 8013fd4:	f100 0514 	add.w	r5, r0, #20
 8013fd8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013fdc:	462b      	mov	r3, r5
 8013fde:	2200      	movs	r2, #0
 8013fe0:	4543      	cmp	r3, r8
 8013fe2:	d321      	bcc.n	8014028 <__multiply+0x98>
 8013fe4:	f104 0314 	add.w	r3, r4, #20
 8013fe8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013fec:	f109 0314 	add.w	r3, r9, #20
 8013ff0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013ff4:	9202      	str	r2, [sp, #8]
 8013ff6:	1b3a      	subs	r2, r7, r4
 8013ff8:	3a15      	subs	r2, #21
 8013ffa:	f022 0203 	bic.w	r2, r2, #3
 8013ffe:	3204      	adds	r2, #4
 8014000:	f104 0115 	add.w	r1, r4, #21
 8014004:	428f      	cmp	r7, r1
 8014006:	bf38      	it	cc
 8014008:	2204      	movcc	r2, #4
 801400a:	9201      	str	r2, [sp, #4]
 801400c:	9a02      	ldr	r2, [sp, #8]
 801400e:	9303      	str	r3, [sp, #12]
 8014010:	429a      	cmp	r2, r3
 8014012:	d80c      	bhi.n	801402e <__multiply+0x9e>
 8014014:	2e00      	cmp	r6, #0
 8014016:	dd03      	ble.n	8014020 <__multiply+0x90>
 8014018:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801401c:	2b00      	cmp	r3, #0
 801401e:	d05a      	beq.n	80140d6 <__multiply+0x146>
 8014020:	6106      	str	r6, [r0, #16]
 8014022:	b005      	add	sp, #20
 8014024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014028:	f843 2b04 	str.w	r2, [r3], #4
 801402c:	e7d8      	b.n	8013fe0 <__multiply+0x50>
 801402e:	f8b3 a000 	ldrh.w	sl, [r3]
 8014032:	f1ba 0f00 	cmp.w	sl, #0
 8014036:	d024      	beq.n	8014082 <__multiply+0xf2>
 8014038:	f104 0e14 	add.w	lr, r4, #20
 801403c:	46a9      	mov	r9, r5
 801403e:	f04f 0c00 	mov.w	ip, #0
 8014042:	f85e 2b04 	ldr.w	r2, [lr], #4
 8014046:	f8d9 1000 	ldr.w	r1, [r9]
 801404a:	fa1f fb82 	uxth.w	fp, r2
 801404e:	b289      	uxth	r1, r1
 8014050:	fb0a 110b 	mla	r1, sl, fp, r1
 8014054:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8014058:	f8d9 2000 	ldr.w	r2, [r9]
 801405c:	4461      	add	r1, ip
 801405e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014062:	fb0a c20b 	mla	r2, sl, fp, ip
 8014066:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801406a:	b289      	uxth	r1, r1
 801406c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014070:	4577      	cmp	r7, lr
 8014072:	f849 1b04 	str.w	r1, [r9], #4
 8014076:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801407a:	d8e2      	bhi.n	8014042 <__multiply+0xb2>
 801407c:	9a01      	ldr	r2, [sp, #4]
 801407e:	f845 c002 	str.w	ip, [r5, r2]
 8014082:	9a03      	ldr	r2, [sp, #12]
 8014084:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014088:	3304      	adds	r3, #4
 801408a:	f1b9 0f00 	cmp.w	r9, #0
 801408e:	d020      	beq.n	80140d2 <__multiply+0x142>
 8014090:	6829      	ldr	r1, [r5, #0]
 8014092:	f104 0c14 	add.w	ip, r4, #20
 8014096:	46ae      	mov	lr, r5
 8014098:	f04f 0a00 	mov.w	sl, #0
 801409c:	f8bc b000 	ldrh.w	fp, [ip]
 80140a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80140a4:	fb09 220b 	mla	r2, r9, fp, r2
 80140a8:	4492      	add	sl, r2
 80140aa:	b289      	uxth	r1, r1
 80140ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80140b0:	f84e 1b04 	str.w	r1, [lr], #4
 80140b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80140b8:	f8be 1000 	ldrh.w	r1, [lr]
 80140bc:	0c12      	lsrs	r2, r2, #16
 80140be:	fb09 1102 	mla	r1, r9, r2, r1
 80140c2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80140c6:	4567      	cmp	r7, ip
 80140c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80140cc:	d8e6      	bhi.n	801409c <__multiply+0x10c>
 80140ce:	9a01      	ldr	r2, [sp, #4]
 80140d0:	50a9      	str	r1, [r5, r2]
 80140d2:	3504      	adds	r5, #4
 80140d4:	e79a      	b.n	801400c <__multiply+0x7c>
 80140d6:	3e01      	subs	r6, #1
 80140d8:	e79c      	b.n	8014014 <__multiply+0x84>
 80140da:	bf00      	nop
 80140dc:	08016280 	.word	0x08016280
 80140e0:	08016302 	.word	0x08016302

080140e4 <__pow5mult>:
 80140e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80140e8:	4615      	mov	r5, r2
 80140ea:	f012 0203 	ands.w	r2, r2, #3
 80140ee:	4606      	mov	r6, r0
 80140f0:	460f      	mov	r7, r1
 80140f2:	d007      	beq.n	8014104 <__pow5mult+0x20>
 80140f4:	4c25      	ldr	r4, [pc, #148]	; (801418c <__pow5mult+0xa8>)
 80140f6:	3a01      	subs	r2, #1
 80140f8:	2300      	movs	r3, #0
 80140fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80140fe:	f7ff fe9b 	bl	8013e38 <__multadd>
 8014102:	4607      	mov	r7, r0
 8014104:	10ad      	asrs	r5, r5, #2
 8014106:	d03d      	beq.n	8014184 <__pow5mult+0xa0>
 8014108:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801410a:	b97c      	cbnz	r4, 801412c <__pow5mult+0x48>
 801410c:	2010      	movs	r0, #16
 801410e:	f7ff fdcb 	bl	8013ca8 <malloc>
 8014112:	4602      	mov	r2, r0
 8014114:	6270      	str	r0, [r6, #36]	; 0x24
 8014116:	b928      	cbnz	r0, 8014124 <__pow5mult+0x40>
 8014118:	4b1d      	ldr	r3, [pc, #116]	; (8014190 <__pow5mult+0xac>)
 801411a:	481e      	ldr	r0, [pc, #120]	; (8014194 <__pow5mult+0xb0>)
 801411c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014120:	f7fe fc6a 	bl	80129f8 <__assert_func>
 8014124:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014128:	6004      	str	r4, [r0, #0]
 801412a:	60c4      	str	r4, [r0, #12]
 801412c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014130:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014134:	b94c      	cbnz	r4, 801414a <__pow5mult+0x66>
 8014136:	f240 2171 	movw	r1, #625	; 0x271
 801413a:	4630      	mov	r0, r6
 801413c:	f7ff ff12 	bl	8013f64 <__i2b>
 8014140:	2300      	movs	r3, #0
 8014142:	f8c8 0008 	str.w	r0, [r8, #8]
 8014146:	4604      	mov	r4, r0
 8014148:	6003      	str	r3, [r0, #0]
 801414a:	f04f 0900 	mov.w	r9, #0
 801414e:	07eb      	lsls	r3, r5, #31
 8014150:	d50a      	bpl.n	8014168 <__pow5mult+0x84>
 8014152:	4639      	mov	r1, r7
 8014154:	4622      	mov	r2, r4
 8014156:	4630      	mov	r0, r6
 8014158:	f7ff ff1a 	bl	8013f90 <__multiply>
 801415c:	4639      	mov	r1, r7
 801415e:	4680      	mov	r8, r0
 8014160:	4630      	mov	r0, r6
 8014162:	f7ff fe47 	bl	8013df4 <_Bfree>
 8014166:	4647      	mov	r7, r8
 8014168:	106d      	asrs	r5, r5, #1
 801416a:	d00b      	beq.n	8014184 <__pow5mult+0xa0>
 801416c:	6820      	ldr	r0, [r4, #0]
 801416e:	b938      	cbnz	r0, 8014180 <__pow5mult+0x9c>
 8014170:	4622      	mov	r2, r4
 8014172:	4621      	mov	r1, r4
 8014174:	4630      	mov	r0, r6
 8014176:	f7ff ff0b 	bl	8013f90 <__multiply>
 801417a:	6020      	str	r0, [r4, #0]
 801417c:	f8c0 9000 	str.w	r9, [r0]
 8014180:	4604      	mov	r4, r0
 8014182:	e7e4      	b.n	801414e <__pow5mult+0x6a>
 8014184:	4638      	mov	r0, r7
 8014186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801418a:	bf00      	nop
 801418c:	08016450 	.word	0x08016450
 8014190:	0801620e 	.word	0x0801620e
 8014194:	08016302 	.word	0x08016302

08014198 <__lshift>:
 8014198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801419c:	460c      	mov	r4, r1
 801419e:	6849      	ldr	r1, [r1, #4]
 80141a0:	6923      	ldr	r3, [r4, #16]
 80141a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80141a6:	68a3      	ldr	r3, [r4, #8]
 80141a8:	4607      	mov	r7, r0
 80141aa:	4691      	mov	r9, r2
 80141ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80141b0:	f108 0601 	add.w	r6, r8, #1
 80141b4:	42b3      	cmp	r3, r6
 80141b6:	db0b      	blt.n	80141d0 <__lshift+0x38>
 80141b8:	4638      	mov	r0, r7
 80141ba:	f7ff fddb 	bl	8013d74 <_Balloc>
 80141be:	4605      	mov	r5, r0
 80141c0:	b948      	cbnz	r0, 80141d6 <__lshift+0x3e>
 80141c2:	4602      	mov	r2, r0
 80141c4:	4b2a      	ldr	r3, [pc, #168]	; (8014270 <__lshift+0xd8>)
 80141c6:	482b      	ldr	r0, [pc, #172]	; (8014274 <__lshift+0xdc>)
 80141c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80141cc:	f7fe fc14 	bl	80129f8 <__assert_func>
 80141d0:	3101      	adds	r1, #1
 80141d2:	005b      	lsls	r3, r3, #1
 80141d4:	e7ee      	b.n	80141b4 <__lshift+0x1c>
 80141d6:	2300      	movs	r3, #0
 80141d8:	f100 0114 	add.w	r1, r0, #20
 80141dc:	f100 0210 	add.w	r2, r0, #16
 80141e0:	4618      	mov	r0, r3
 80141e2:	4553      	cmp	r3, sl
 80141e4:	db37      	blt.n	8014256 <__lshift+0xbe>
 80141e6:	6920      	ldr	r0, [r4, #16]
 80141e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80141ec:	f104 0314 	add.w	r3, r4, #20
 80141f0:	f019 091f 	ands.w	r9, r9, #31
 80141f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80141f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80141fc:	d02f      	beq.n	801425e <__lshift+0xc6>
 80141fe:	f1c9 0e20 	rsb	lr, r9, #32
 8014202:	468a      	mov	sl, r1
 8014204:	f04f 0c00 	mov.w	ip, #0
 8014208:	681a      	ldr	r2, [r3, #0]
 801420a:	fa02 f209 	lsl.w	r2, r2, r9
 801420e:	ea42 020c 	orr.w	r2, r2, ip
 8014212:	f84a 2b04 	str.w	r2, [sl], #4
 8014216:	f853 2b04 	ldr.w	r2, [r3], #4
 801421a:	4298      	cmp	r0, r3
 801421c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8014220:	d8f2      	bhi.n	8014208 <__lshift+0x70>
 8014222:	1b03      	subs	r3, r0, r4
 8014224:	3b15      	subs	r3, #21
 8014226:	f023 0303 	bic.w	r3, r3, #3
 801422a:	3304      	adds	r3, #4
 801422c:	f104 0215 	add.w	r2, r4, #21
 8014230:	4290      	cmp	r0, r2
 8014232:	bf38      	it	cc
 8014234:	2304      	movcc	r3, #4
 8014236:	f841 c003 	str.w	ip, [r1, r3]
 801423a:	f1bc 0f00 	cmp.w	ip, #0
 801423e:	d001      	beq.n	8014244 <__lshift+0xac>
 8014240:	f108 0602 	add.w	r6, r8, #2
 8014244:	3e01      	subs	r6, #1
 8014246:	4638      	mov	r0, r7
 8014248:	612e      	str	r6, [r5, #16]
 801424a:	4621      	mov	r1, r4
 801424c:	f7ff fdd2 	bl	8013df4 <_Bfree>
 8014250:	4628      	mov	r0, r5
 8014252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014256:	f842 0f04 	str.w	r0, [r2, #4]!
 801425a:	3301      	adds	r3, #1
 801425c:	e7c1      	b.n	80141e2 <__lshift+0x4a>
 801425e:	3904      	subs	r1, #4
 8014260:	f853 2b04 	ldr.w	r2, [r3], #4
 8014264:	f841 2f04 	str.w	r2, [r1, #4]!
 8014268:	4298      	cmp	r0, r3
 801426a:	d8f9      	bhi.n	8014260 <__lshift+0xc8>
 801426c:	e7ea      	b.n	8014244 <__lshift+0xac>
 801426e:	bf00      	nop
 8014270:	08016280 	.word	0x08016280
 8014274:	08016302 	.word	0x08016302

08014278 <__mcmp>:
 8014278:	b530      	push	{r4, r5, lr}
 801427a:	6902      	ldr	r2, [r0, #16]
 801427c:	690c      	ldr	r4, [r1, #16]
 801427e:	1b12      	subs	r2, r2, r4
 8014280:	d10e      	bne.n	80142a0 <__mcmp+0x28>
 8014282:	f100 0314 	add.w	r3, r0, #20
 8014286:	3114      	adds	r1, #20
 8014288:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801428c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014290:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014294:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014298:	42a5      	cmp	r5, r4
 801429a:	d003      	beq.n	80142a4 <__mcmp+0x2c>
 801429c:	d305      	bcc.n	80142aa <__mcmp+0x32>
 801429e:	2201      	movs	r2, #1
 80142a0:	4610      	mov	r0, r2
 80142a2:	bd30      	pop	{r4, r5, pc}
 80142a4:	4283      	cmp	r3, r0
 80142a6:	d3f3      	bcc.n	8014290 <__mcmp+0x18>
 80142a8:	e7fa      	b.n	80142a0 <__mcmp+0x28>
 80142aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80142ae:	e7f7      	b.n	80142a0 <__mcmp+0x28>

080142b0 <__mdiff>:
 80142b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142b4:	460c      	mov	r4, r1
 80142b6:	4606      	mov	r6, r0
 80142b8:	4611      	mov	r1, r2
 80142ba:	4620      	mov	r0, r4
 80142bc:	4690      	mov	r8, r2
 80142be:	f7ff ffdb 	bl	8014278 <__mcmp>
 80142c2:	1e05      	subs	r5, r0, #0
 80142c4:	d110      	bne.n	80142e8 <__mdiff+0x38>
 80142c6:	4629      	mov	r1, r5
 80142c8:	4630      	mov	r0, r6
 80142ca:	f7ff fd53 	bl	8013d74 <_Balloc>
 80142ce:	b930      	cbnz	r0, 80142de <__mdiff+0x2e>
 80142d0:	4b3a      	ldr	r3, [pc, #232]	; (80143bc <__mdiff+0x10c>)
 80142d2:	4602      	mov	r2, r0
 80142d4:	f240 2132 	movw	r1, #562	; 0x232
 80142d8:	4839      	ldr	r0, [pc, #228]	; (80143c0 <__mdiff+0x110>)
 80142da:	f7fe fb8d 	bl	80129f8 <__assert_func>
 80142de:	2301      	movs	r3, #1
 80142e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80142e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142e8:	bfa4      	itt	ge
 80142ea:	4643      	movge	r3, r8
 80142ec:	46a0      	movge	r8, r4
 80142ee:	4630      	mov	r0, r6
 80142f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80142f4:	bfa6      	itte	ge
 80142f6:	461c      	movge	r4, r3
 80142f8:	2500      	movge	r5, #0
 80142fa:	2501      	movlt	r5, #1
 80142fc:	f7ff fd3a 	bl	8013d74 <_Balloc>
 8014300:	b920      	cbnz	r0, 801430c <__mdiff+0x5c>
 8014302:	4b2e      	ldr	r3, [pc, #184]	; (80143bc <__mdiff+0x10c>)
 8014304:	4602      	mov	r2, r0
 8014306:	f44f 7110 	mov.w	r1, #576	; 0x240
 801430a:	e7e5      	b.n	80142d8 <__mdiff+0x28>
 801430c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014310:	6926      	ldr	r6, [r4, #16]
 8014312:	60c5      	str	r5, [r0, #12]
 8014314:	f104 0914 	add.w	r9, r4, #20
 8014318:	f108 0514 	add.w	r5, r8, #20
 801431c:	f100 0e14 	add.w	lr, r0, #20
 8014320:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014324:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014328:	f108 0210 	add.w	r2, r8, #16
 801432c:	46f2      	mov	sl, lr
 801432e:	2100      	movs	r1, #0
 8014330:	f859 3b04 	ldr.w	r3, [r9], #4
 8014334:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014338:	fa1f f883 	uxth.w	r8, r3
 801433c:	fa11 f18b 	uxtah	r1, r1, fp
 8014340:	0c1b      	lsrs	r3, r3, #16
 8014342:	eba1 0808 	sub.w	r8, r1, r8
 8014346:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801434a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801434e:	fa1f f888 	uxth.w	r8, r8
 8014352:	1419      	asrs	r1, r3, #16
 8014354:	454e      	cmp	r6, r9
 8014356:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801435a:	f84a 3b04 	str.w	r3, [sl], #4
 801435e:	d8e7      	bhi.n	8014330 <__mdiff+0x80>
 8014360:	1b33      	subs	r3, r6, r4
 8014362:	3b15      	subs	r3, #21
 8014364:	f023 0303 	bic.w	r3, r3, #3
 8014368:	3304      	adds	r3, #4
 801436a:	3415      	adds	r4, #21
 801436c:	42a6      	cmp	r6, r4
 801436e:	bf38      	it	cc
 8014370:	2304      	movcc	r3, #4
 8014372:	441d      	add	r5, r3
 8014374:	4473      	add	r3, lr
 8014376:	469e      	mov	lr, r3
 8014378:	462e      	mov	r6, r5
 801437a:	4566      	cmp	r6, ip
 801437c:	d30e      	bcc.n	801439c <__mdiff+0xec>
 801437e:	f10c 0203 	add.w	r2, ip, #3
 8014382:	1b52      	subs	r2, r2, r5
 8014384:	f022 0203 	bic.w	r2, r2, #3
 8014388:	3d03      	subs	r5, #3
 801438a:	45ac      	cmp	ip, r5
 801438c:	bf38      	it	cc
 801438e:	2200      	movcc	r2, #0
 8014390:	441a      	add	r2, r3
 8014392:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8014396:	b17b      	cbz	r3, 80143b8 <__mdiff+0x108>
 8014398:	6107      	str	r7, [r0, #16]
 801439a:	e7a3      	b.n	80142e4 <__mdiff+0x34>
 801439c:	f856 8b04 	ldr.w	r8, [r6], #4
 80143a0:	fa11 f288 	uxtah	r2, r1, r8
 80143a4:	1414      	asrs	r4, r2, #16
 80143a6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80143aa:	b292      	uxth	r2, r2
 80143ac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80143b0:	f84e 2b04 	str.w	r2, [lr], #4
 80143b4:	1421      	asrs	r1, r4, #16
 80143b6:	e7e0      	b.n	801437a <__mdiff+0xca>
 80143b8:	3f01      	subs	r7, #1
 80143ba:	e7ea      	b.n	8014392 <__mdiff+0xe2>
 80143bc:	08016280 	.word	0x08016280
 80143c0:	08016302 	.word	0x08016302

080143c4 <__d2b>:
 80143c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80143c8:	4689      	mov	r9, r1
 80143ca:	2101      	movs	r1, #1
 80143cc:	ec57 6b10 	vmov	r6, r7, d0
 80143d0:	4690      	mov	r8, r2
 80143d2:	f7ff fccf 	bl	8013d74 <_Balloc>
 80143d6:	4604      	mov	r4, r0
 80143d8:	b930      	cbnz	r0, 80143e8 <__d2b+0x24>
 80143da:	4602      	mov	r2, r0
 80143dc:	4b25      	ldr	r3, [pc, #148]	; (8014474 <__d2b+0xb0>)
 80143de:	4826      	ldr	r0, [pc, #152]	; (8014478 <__d2b+0xb4>)
 80143e0:	f240 310a 	movw	r1, #778	; 0x30a
 80143e4:	f7fe fb08 	bl	80129f8 <__assert_func>
 80143e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80143ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80143f0:	bb35      	cbnz	r5, 8014440 <__d2b+0x7c>
 80143f2:	2e00      	cmp	r6, #0
 80143f4:	9301      	str	r3, [sp, #4]
 80143f6:	d028      	beq.n	801444a <__d2b+0x86>
 80143f8:	4668      	mov	r0, sp
 80143fa:	9600      	str	r6, [sp, #0]
 80143fc:	f7ff fd82 	bl	8013f04 <__lo0bits>
 8014400:	9900      	ldr	r1, [sp, #0]
 8014402:	b300      	cbz	r0, 8014446 <__d2b+0x82>
 8014404:	9a01      	ldr	r2, [sp, #4]
 8014406:	f1c0 0320 	rsb	r3, r0, #32
 801440a:	fa02 f303 	lsl.w	r3, r2, r3
 801440e:	430b      	orrs	r3, r1
 8014410:	40c2      	lsrs	r2, r0
 8014412:	6163      	str	r3, [r4, #20]
 8014414:	9201      	str	r2, [sp, #4]
 8014416:	9b01      	ldr	r3, [sp, #4]
 8014418:	61a3      	str	r3, [r4, #24]
 801441a:	2b00      	cmp	r3, #0
 801441c:	bf14      	ite	ne
 801441e:	2202      	movne	r2, #2
 8014420:	2201      	moveq	r2, #1
 8014422:	6122      	str	r2, [r4, #16]
 8014424:	b1d5      	cbz	r5, 801445c <__d2b+0x98>
 8014426:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801442a:	4405      	add	r5, r0
 801442c:	f8c9 5000 	str.w	r5, [r9]
 8014430:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014434:	f8c8 0000 	str.w	r0, [r8]
 8014438:	4620      	mov	r0, r4
 801443a:	b003      	add	sp, #12
 801443c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014440:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014444:	e7d5      	b.n	80143f2 <__d2b+0x2e>
 8014446:	6161      	str	r1, [r4, #20]
 8014448:	e7e5      	b.n	8014416 <__d2b+0x52>
 801444a:	a801      	add	r0, sp, #4
 801444c:	f7ff fd5a 	bl	8013f04 <__lo0bits>
 8014450:	9b01      	ldr	r3, [sp, #4]
 8014452:	6163      	str	r3, [r4, #20]
 8014454:	2201      	movs	r2, #1
 8014456:	6122      	str	r2, [r4, #16]
 8014458:	3020      	adds	r0, #32
 801445a:	e7e3      	b.n	8014424 <__d2b+0x60>
 801445c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014460:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014464:	f8c9 0000 	str.w	r0, [r9]
 8014468:	6918      	ldr	r0, [r3, #16]
 801446a:	f7ff fd2b 	bl	8013ec4 <__hi0bits>
 801446e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014472:	e7df      	b.n	8014434 <__d2b+0x70>
 8014474:	08016280 	.word	0x08016280
 8014478:	08016302 	.word	0x08016302

0801447c <_calloc_r>:
 801447c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801447e:	fba1 2402 	umull	r2, r4, r1, r2
 8014482:	b94c      	cbnz	r4, 8014498 <_calloc_r+0x1c>
 8014484:	4611      	mov	r1, r2
 8014486:	9201      	str	r2, [sp, #4]
 8014488:	f000 f87a 	bl	8014580 <_malloc_r>
 801448c:	9a01      	ldr	r2, [sp, #4]
 801448e:	4605      	mov	r5, r0
 8014490:	b930      	cbnz	r0, 80144a0 <_calloc_r+0x24>
 8014492:	4628      	mov	r0, r5
 8014494:	b003      	add	sp, #12
 8014496:	bd30      	pop	{r4, r5, pc}
 8014498:	220c      	movs	r2, #12
 801449a:	6002      	str	r2, [r0, #0]
 801449c:	2500      	movs	r5, #0
 801449e:	e7f8      	b.n	8014492 <_calloc_r+0x16>
 80144a0:	4621      	mov	r1, r4
 80144a2:	f7ff fc53 	bl	8013d4c <memset>
 80144a6:	e7f4      	b.n	8014492 <_calloc_r+0x16>

080144a8 <_free_r>:
 80144a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80144aa:	2900      	cmp	r1, #0
 80144ac:	d044      	beq.n	8014538 <_free_r+0x90>
 80144ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80144b2:	9001      	str	r0, [sp, #4]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	f1a1 0404 	sub.w	r4, r1, #4
 80144ba:	bfb8      	it	lt
 80144bc:	18e4      	addlt	r4, r4, r3
 80144be:	f7ff fc4d 	bl	8013d5c <__malloc_lock>
 80144c2:	4a1e      	ldr	r2, [pc, #120]	; (801453c <_free_r+0x94>)
 80144c4:	9801      	ldr	r0, [sp, #4]
 80144c6:	6813      	ldr	r3, [r2, #0]
 80144c8:	b933      	cbnz	r3, 80144d8 <_free_r+0x30>
 80144ca:	6063      	str	r3, [r4, #4]
 80144cc:	6014      	str	r4, [r2, #0]
 80144ce:	b003      	add	sp, #12
 80144d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80144d4:	f7ff bc48 	b.w	8013d68 <__malloc_unlock>
 80144d8:	42a3      	cmp	r3, r4
 80144da:	d908      	bls.n	80144ee <_free_r+0x46>
 80144dc:	6825      	ldr	r5, [r4, #0]
 80144de:	1961      	adds	r1, r4, r5
 80144e0:	428b      	cmp	r3, r1
 80144e2:	bf01      	itttt	eq
 80144e4:	6819      	ldreq	r1, [r3, #0]
 80144e6:	685b      	ldreq	r3, [r3, #4]
 80144e8:	1949      	addeq	r1, r1, r5
 80144ea:	6021      	streq	r1, [r4, #0]
 80144ec:	e7ed      	b.n	80144ca <_free_r+0x22>
 80144ee:	461a      	mov	r2, r3
 80144f0:	685b      	ldr	r3, [r3, #4]
 80144f2:	b10b      	cbz	r3, 80144f8 <_free_r+0x50>
 80144f4:	42a3      	cmp	r3, r4
 80144f6:	d9fa      	bls.n	80144ee <_free_r+0x46>
 80144f8:	6811      	ldr	r1, [r2, #0]
 80144fa:	1855      	adds	r5, r2, r1
 80144fc:	42a5      	cmp	r5, r4
 80144fe:	d10b      	bne.n	8014518 <_free_r+0x70>
 8014500:	6824      	ldr	r4, [r4, #0]
 8014502:	4421      	add	r1, r4
 8014504:	1854      	adds	r4, r2, r1
 8014506:	42a3      	cmp	r3, r4
 8014508:	6011      	str	r1, [r2, #0]
 801450a:	d1e0      	bne.n	80144ce <_free_r+0x26>
 801450c:	681c      	ldr	r4, [r3, #0]
 801450e:	685b      	ldr	r3, [r3, #4]
 8014510:	6053      	str	r3, [r2, #4]
 8014512:	4421      	add	r1, r4
 8014514:	6011      	str	r1, [r2, #0]
 8014516:	e7da      	b.n	80144ce <_free_r+0x26>
 8014518:	d902      	bls.n	8014520 <_free_r+0x78>
 801451a:	230c      	movs	r3, #12
 801451c:	6003      	str	r3, [r0, #0]
 801451e:	e7d6      	b.n	80144ce <_free_r+0x26>
 8014520:	6825      	ldr	r5, [r4, #0]
 8014522:	1961      	adds	r1, r4, r5
 8014524:	428b      	cmp	r3, r1
 8014526:	bf04      	itt	eq
 8014528:	6819      	ldreq	r1, [r3, #0]
 801452a:	685b      	ldreq	r3, [r3, #4]
 801452c:	6063      	str	r3, [r4, #4]
 801452e:	bf04      	itt	eq
 8014530:	1949      	addeq	r1, r1, r5
 8014532:	6021      	streq	r1, [r4, #0]
 8014534:	6054      	str	r4, [r2, #4]
 8014536:	e7ca      	b.n	80144ce <_free_r+0x26>
 8014538:	b003      	add	sp, #12
 801453a:	bd30      	pop	{r4, r5, pc}
 801453c:	20000500 	.word	0x20000500

08014540 <sbrk_aligned>:
 8014540:	b570      	push	{r4, r5, r6, lr}
 8014542:	4e0e      	ldr	r6, [pc, #56]	; (801457c <sbrk_aligned+0x3c>)
 8014544:	460c      	mov	r4, r1
 8014546:	6831      	ldr	r1, [r6, #0]
 8014548:	4605      	mov	r5, r0
 801454a:	b911      	cbnz	r1, 8014552 <sbrk_aligned+0x12>
 801454c:	f000 fff4 	bl	8015538 <_sbrk_r>
 8014550:	6030      	str	r0, [r6, #0]
 8014552:	4621      	mov	r1, r4
 8014554:	4628      	mov	r0, r5
 8014556:	f000 ffef 	bl	8015538 <_sbrk_r>
 801455a:	1c43      	adds	r3, r0, #1
 801455c:	d00a      	beq.n	8014574 <sbrk_aligned+0x34>
 801455e:	1cc4      	adds	r4, r0, #3
 8014560:	f024 0403 	bic.w	r4, r4, #3
 8014564:	42a0      	cmp	r0, r4
 8014566:	d007      	beq.n	8014578 <sbrk_aligned+0x38>
 8014568:	1a21      	subs	r1, r4, r0
 801456a:	4628      	mov	r0, r5
 801456c:	f000 ffe4 	bl	8015538 <_sbrk_r>
 8014570:	3001      	adds	r0, #1
 8014572:	d101      	bne.n	8014578 <sbrk_aligned+0x38>
 8014574:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014578:	4620      	mov	r0, r4
 801457a:	bd70      	pop	{r4, r5, r6, pc}
 801457c:	20000504 	.word	0x20000504

08014580 <_malloc_r>:
 8014580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014584:	1ccd      	adds	r5, r1, #3
 8014586:	f025 0503 	bic.w	r5, r5, #3
 801458a:	3508      	adds	r5, #8
 801458c:	2d0c      	cmp	r5, #12
 801458e:	bf38      	it	cc
 8014590:	250c      	movcc	r5, #12
 8014592:	2d00      	cmp	r5, #0
 8014594:	4607      	mov	r7, r0
 8014596:	db01      	blt.n	801459c <_malloc_r+0x1c>
 8014598:	42a9      	cmp	r1, r5
 801459a:	d905      	bls.n	80145a8 <_malloc_r+0x28>
 801459c:	230c      	movs	r3, #12
 801459e:	603b      	str	r3, [r7, #0]
 80145a0:	2600      	movs	r6, #0
 80145a2:	4630      	mov	r0, r6
 80145a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145a8:	4e2e      	ldr	r6, [pc, #184]	; (8014664 <_malloc_r+0xe4>)
 80145aa:	f7ff fbd7 	bl	8013d5c <__malloc_lock>
 80145ae:	6833      	ldr	r3, [r6, #0]
 80145b0:	461c      	mov	r4, r3
 80145b2:	bb34      	cbnz	r4, 8014602 <_malloc_r+0x82>
 80145b4:	4629      	mov	r1, r5
 80145b6:	4638      	mov	r0, r7
 80145b8:	f7ff ffc2 	bl	8014540 <sbrk_aligned>
 80145bc:	1c43      	adds	r3, r0, #1
 80145be:	4604      	mov	r4, r0
 80145c0:	d14d      	bne.n	801465e <_malloc_r+0xde>
 80145c2:	6834      	ldr	r4, [r6, #0]
 80145c4:	4626      	mov	r6, r4
 80145c6:	2e00      	cmp	r6, #0
 80145c8:	d140      	bne.n	801464c <_malloc_r+0xcc>
 80145ca:	6823      	ldr	r3, [r4, #0]
 80145cc:	4631      	mov	r1, r6
 80145ce:	4638      	mov	r0, r7
 80145d0:	eb04 0803 	add.w	r8, r4, r3
 80145d4:	f000 ffb0 	bl	8015538 <_sbrk_r>
 80145d8:	4580      	cmp	r8, r0
 80145da:	d13a      	bne.n	8014652 <_malloc_r+0xd2>
 80145dc:	6821      	ldr	r1, [r4, #0]
 80145de:	3503      	adds	r5, #3
 80145e0:	1a6d      	subs	r5, r5, r1
 80145e2:	f025 0503 	bic.w	r5, r5, #3
 80145e6:	3508      	adds	r5, #8
 80145e8:	2d0c      	cmp	r5, #12
 80145ea:	bf38      	it	cc
 80145ec:	250c      	movcc	r5, #12
 80145ee:	4629      	mov	r1, r5
 80145f0:	4638      	mov	r0, r7
 80145f2:	f7ff ffa5 	bl	8014540 <sbrk_aligned>
 80145f6:	3001      	adds	r0, #1
 80145f8:	d02b      	beq.n	8014652 <_malloc_r+0xd2>
 80145fa:	6823      	ldr	r3, [r4, #0]
 80145fc:	442b      	add	r3, r5
 80145fe:	6023      	str	r3, [r4, #0]
 8014600:	e00e      	b.n	8014620 <_malloc_r+0xa0>
 8014602:	6822      	ldr	r2, [r4, #0]
 8014604:	1b52      	subs	r2, r2, r5
 8014606:	d41e      	bmi.n	8014646 <_malloc_r+0xc6>
 8014608:	2a0b      	cmp	r2, #11
 801460a:	d916      	bls.n	801463a <_malloc_r+0xba>
 801460c:	1961      	adds	r1, r4, r5
 801460e:	42a3      	cmp	r3, r4
 8014610:	6025      	str	r5, [r4, #0]
 8014612:	bf18      	it	ne
 8014614:	6059      	strne	r1, [r3, #4]
 8014616:	6863      	ldr	r3, [r4, #4]
 8014618:	bf08      	it	eq
 801461a:	6031      	streq	r1, [r6, #0]
 801461c:	5162      	str	r2, [r4, r5]
 801461e:	604b      	str	r3, [r1, #4]
 8014620:	4638      	mov	r0, r7
 8014622:	f104 060b 	add.w	r6, r4, #11
 8014626:	f7ff fb9f 	bl	8013d68 <__malloc_unlock>
 801462a:	f026 0607 	bic.w	r6, r6, #7
 801462e:	1d23      	adds	r3, r4, #4
 8014630:	1af2      	subs	r2, r6, r3
 8014632:	d0b6      	beq.n	80145a2 <_malloc_r+0x22>
 8014634:	1b9b      	subs	r3, r3, r6
 8014636:	50a3      	str	r3, [r4, r2]
 8014638:	e7b3      	b.n	80145a2 <_malloc_r+0x22>
 801463a:	6862      	ldr	r2, [r4, #4]
 801463c:	42a3      	cmp	r3, r4
 801463e:	bf0c      	ite	eq
 8014640:	6032      	streq	r2, [r6, #0]
 8014642:	605a      	strne	r2, [r3, #4]
 8014644:	e7ec      	b.n	8014620 <_malloc_r+0xa0>
 8014646:	4623      	mov	r3, r4
 8014648:	6864      	ldr	r4, [r4, #4]
 801464a:	e7b2      	b.n	80145b2 <_malloc_r+0x32>
 801464c:	4634      	mov	r4, r6
 801464e:	6876      	ldr	r6, [r6, #4]
 8014650:	e7b9      	b.n	80145c6 <_malloc_r+0x46>
 8014652:	230c      	movs	r3, #12
 8014654:	603b      	str	r3, [r7, #0]
 8014656:	4638      	mov	r0, r7
 8014658:	f7ff fb86 	bl	8013d68 <__malloc_unlock>
 801465c:	e7a1      	b.n	80145a2 <_malloc_r+0x22>
 801465e:	6025      	str	r5, [r4, #0]
 8014660:	e7de      	b.n	8014620 <_malloc_r+0xa0>
 8014662:	bf00      	nop
 8014664:	20000500 	.word	0x20000500

08014668 <_malloc_usable_size_r>:
 8014668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801466c:	1f18      	subs	r0, r3, #4
 801466e:	2b00      	cmp	r3, #0
 8014670:	bfbc      	itt	lt
 8014672:	580b      	ldrlt	r3, [r1, r0]
 8014674:	18c0      	addlt	r0, r0, r3
 8014676:	4770      	bx	lr

08014678 <_realloc_r>:
 8014678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801467c:	4680      	mov	r8, r0
 801467e:	4614      	mov	r4, r2
 8014680:	460e      	mov	r6, r1
 8014682:	b921      	cbnz	r1, 801468e <_realloc_r+0x16>
 8014684:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014688:	4611      	mov	r1, r2
 801468a:	f7ff bf79 	b.w	8014580 <_malloc_r>
 801468e:	b92a      	cbnz	r2, 801469c <_realloc_r+0x24>
 8014690:	f7ff ff0a 	bl	80144a8 <_free_r>
 8014694:	4625      	mov	r5, r4
 8014696:	4628      	mov	r0, r5
 8014698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801469c:	f7ff ffe4 	bl	8014668 <_malloc_usable_size_r>
 80146a0:	4284      	cmp	r4, r0
 80146a2:	4607      	mov	r7, r0
 80146a4:	d802      	bhi.n	80146ac <_realloc_r+0x34>
 80146a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80146aa:	d812      	bhi.n	80146d2 <_realloc_r+0x5a>
 80146ac:	4621      	mov	r1, r4
 80146ae:	4640      	mov	r0, r8
 80146b0:	f7ff ff66 	bl	8014580 <_malloc_r>
 80146b4:	4605      	mov	r5, r0
 80146b6:	2800      	cmp	r0, #0
 80146b8:	d0ed      	beq.n	8014696 <_realloc_r+0x1e>
 80146ba:	42bc      	cmp	r4, r7
 80146bc:	4622      	mov	r2, r4
 80146be:	4631      	mov	r1, r6
 80146c0:	bf28      	it	cs
 80146c2:	463a      	movcs	r2, r7
 80146c4:	f7ff fb1a 	bl	8013cfc <memcpy>
 80146c8:	4631      	mov	r1, r6
 80146ca:	4640      	mov	r0, r8
 80146cc:	f7ff feec 	bl	80144a8 <_free_r>
 80146d0:	e7e1      	b.n	8014696 <_realloc_r+0x1e>
 80146d2:	4635      	mov	r5, r6
 80146d4:	e7df      	b.n	8014696 <_realloc_r+0x1e>

080146d6 <__ssputs_r>:
 80146d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80146da:	688e      	ldr	r6, [r1, #8]
 80146dc:	429e      	cmp	r6, r3
 80146de:	4682      	mov	sl, r0
 80146e0:	460c      	mov	r4, r1
 80146e2:	4690      	mov	r8, r2
 80146e4:	461f      	mov	r7, r3
 80146e6:	d838      	bhi.n	801475a <__ssputs_r+0x84>
 80146e8:	898a      	ldrh	r2, [r1, #12]
 80146ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80146ee:	d032      	beq.n	8014756 <__ssputs_r+0x80>
 80146f0:	6825      	ldr	r5, [r4, #0]
 80146f2:	6909      	ldr	r1, [r1, #16]
 80146f4:	eba5 0901 	sub.w	r9, r5, r1
 80146f8:	6965      	ldr	r5, [r4, #20]
 80146fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80146fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014702:	3301      	adds	r3, #1
 8014704:	444b      	add	r3, r9
 8014706:	106d      	asrs	r5, r5, #1
 8014708:	429d      	cmp	r5, r3
 801470a:	bf38      	it	cc
 801470c:	461d      	movcc	r5, r3
 801470e:	0553      	lsls	r3, r2, #21
 8014710:	d531      	bpl.n	8014776 <__ssputs_r+0xa0>
 8014712:	4629      	mov	r1, r5
 8014714:	f7ff ff34 	bl	8014580 <_malloc_r>
 8014718:	4606      	mov	r6, r0
 801471a:	b950      	cbnz	r0, 8014732 <__ssputs_r+0x5c>
 801471c:	230c      	movs	r3, #12
 801471e:	f8ca 3000 	str.w	r3, [sl]
 8014722:	89a3      	ldrh	r3, [r4, #12]
 8014724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014728:	81a3      	strh	r3, [r4, #12]
 801472a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801472e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014732:	6921      	ldr	r1, [r4, #16]
 8014734:	464a      	mov	r2, r9
 8014736:	f7ff fae1 	bl	8013cfc <memcpy>
 801473a:	89a3      	ldrh	r3, [r4, #12]
 801473c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014744:	81a3      	strh	r3, [r4, #12]
 8014746:	6126      	str	r6, [r4, #16]
 8014748:	6165      	str	r5, [r4, #20]
 801474a:	444e      	add	r6, r9
 801474c:	eba5 0509 	sub.w	r5, r5, r9
 8014750:	6026      	str	r6, [r4, #0]
 8014752:	60a5      	str	r5, [r4, #8]
 8014754:	463e      	mov	r6, r7
 8014756:	42be      	cmp	r6, r7
 8014758:	d900      	bls.n	801475c <__ssputs_r+0x86>
 801475a:	463e      	mov	r6, r7
 801475c:	6820      	ldr	r0, [r4, #0]
 801475e:	4632      	mov	r2, r6
 8014760:	4641      	mov	r1, r8
 8014762:	f7ff fad9 	bl	8013d18 <memmove>
 8014766:	68a3      	ldr	r3, [r4, #8]
 8014768:	1b9b      	subs	r3, r3, r6
 801476a:	60a3      	str	r3, [r4, #8]
 801476c:	6823      	ldr	r3, [r4, #0]
 801476e:	4433      	add	r3, r6
 8014770:	6023      	str	r3, [r4, #0]
 8014772:	2000      	movs	r0, #0
 8014774:	e7db      	b.n	801472e <__ssputs_r+0x58>
 8014776:	462a      	mov	r2, r5
 8014778:	f7ff ff7e 	bl	8014678 <_realloc_r>
 801477c:	4606      	mov	r6, r0
 801477e:	2800      	cmp	r0, #0
 8014780:	d1e1      	bne.n	8014746 <__ssputs_r+0x70>
 8014782:	6921      	ldr	r1, [r4, #16]
 8014784:	4650      	mov	r0, sl
 8014786:	f7ff fe8f 	bl	80144a8 <_free_r>
 801478a:	e7c7      	b.n	801471c <__ssputs_r+0x46>

0801478c <_svfiprintf_r>:
 801478c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014790:	4698      	mov	r8, r3
 8014792:	898b      	ldrh	r3, [r1, #12]
 8014794:	061b      	lsls	r3, r3, #24
 8014796:	b09d      	sub	sp, #116	; 0x74
 8014798:	4607      	mov	r7, r0
 801479a:	460d      	mov	r5, r1
 801479c:	4614      	mov	r4, r2
 801479e:	d50e      	bpl.n	80147be <_svfiprintf_r+0x32>
 80147a0:	690b      	ldr	r3, [r1, #16]
 80147a2:	b963      	cbnz	r3, 80147be <_svfiprintf_r+0x32>
 80147a4:	2140      	movs	r1, #64	; 0x40
 80147a6:	f7ff feeb 	bl	8014580 <_malloc_r>
 80147aa:	6028      	str	r0, [r5, #0]
 80147ac:	6128      	str	r0, [r5, #16]
 80147ae:	b920      	cbnz	r0, 80147ba <_svfiprintf_r+0x2e>
 80147b0:	230c      	movs	r3, #12
 80147b2:	603b      	str	r3, [r7, #0]
 80147b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80147b8:	e0d1      	b.n	801495e <_svfiprintf_r+0x1d2>
 80147ba:	2340      	movs	r3, #64	; 0x40
 80147bc:	616b      	str	r3, [r5, #20]
 80147be:	2300      	movs	r3, #0
 80147c0:	9309      	str	r3, [sp, #36]	; 0x24
 80147c2:	2320      	movs	r3, #32
 80147c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80147c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80147cc:	2330      	movs	r3, #48	; 0x30
 80147ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014978 <_svfiprintf_r+0x1ec>
 80147d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80147d6:	f04f 0901 	mov.w	r9, #1
 80147da:	4623      	mov	r3, r4
 80147dc:	469a      	mov	sl, r3
 80147de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80147e2:	b10a      	cbz	r2, 80147e8 <_svfiprintf_r+0x5c>
 80147e4:	2a25      	cmp	r2, #37	; 0x25
 80147e6:	d1f9      	bne.n	80147dc <_svfiprintf_r+0x50>
 80147e8:	ebba 0b04 	subs.w	fp, sl, r4
 80147ec:	d00b      	beq.n	8014806 <_svfiprintf_r+0x7a>
 80147ee:	465b      	mov	r3, fp
 80147f0:	4622      	mov	r2, r4
 80147f2:	4629      	mov	r1, r5
 80147f4:	4638      	mov	r0, r7
 80147f6:	f7ff ff6e 	bl	80146d6 <__ssputs_r>
 80147fa:	3001      	adds	r0, #1
 80147fc:	f000 80aa 	beq.w	8014954 <_svfiprintf_r+0x1c8>
 8014800:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014802:	445a      	add	r2, fp
 8014804:	9209      	str	r2, [sp, #36]	; 0x24
 8014806:	f89a 3000 	ldrb.w	r3, [sl]
 801480a:	2b00      	cmp	r3, #0
 801480c:	f000 80a2 	beq.w	8014954 <_svfiprintf_r+0x1c8>
 8014810:	2300      	movs	r3, #0
 8014812:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014816:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801481a:	f10a 0a01 	add.w	sl, sl, #1
 801481e:	9304      	str	r3, [sp, #16]
 8014820:	9307      	str	r3, [sp, #28]
 8014822:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014826:	931a      	str	r3, [sp, #104]	; 0x68
 8014828:	4654      	mov	r4, sl
 801482a:	2205      	movs	r2, #5
 801482c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014830:	4851      	ldr	r0, [pc, #324]	; (8014978 <_svfiprintf_r+0x1ec>)
 8014832:	f7eb fd05 	bl	8000240 <memchr>
 8014836:	9a04      	ldr	r2, [sp, #16]
 8014838:	b9d8      	cbnz	r0, 8014872 <_svfiprintf_r+0xe6>
 801483a:	06d0      	lsls	r0, r2, #27
 801483c:	bf44      	itt	mi
 801483e:	2320      	movmi	r3, #32
 8014840:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014844:	0711      	lsls	r1, r2, #28
 8014846:	bf44      	itt	mi
 8014848:	232b      	movmi	r3, #43	; 0x2b
 801484a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801484e:	f89a 3000 	ldrb.w	r3, [sl]
 8014852:	2b2a      	cmp	r3, #42	; 0x2a
 8014854:	d015      	beq.n	8014882 <_svfiprintf_r+0xf6>
 8014856:	9a07      	ldr	r2, [sp, #28]
 8014858:	4654      	mov	r4, sl
 801485a:	2000      	movs	r0, #0
 801485c:	f04f 0c0a 	mov.w	ip, #10
 8014860:	4621      	mov	r1, r4
 8014862:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014866:	3b30      	subs	r3, #48	; 0x30
 8014868:	2b09      	cmp	r3, #9
 801486a:	d94e      	bls.n	801490a <_svfiprintf_r+0x17e>
 801486c:	b1b0      	cbz	r0, 801489c <_svfiprintf_r+0x110>
 801486e:	9207      	str	r2, [sp, #28]
 8014870:	e014      	b.n	801489c <_svfiprintf_r+0x110>
 8014872:	eba0 0308 	sub.w	r3, r0, r8
 8014876:	fa09 f303 	lsl.w	r3, r9, r3
 801487a:	4313      	orrs	r3, r2
 801487c:	9304      	str	r3, [sp, #16]
 801487e:	46a2      	mov	sl, r4
 8014880:	e7d2      	b.n	8014828 <_svfiprintf_r+0x9c>
 8014882:	9b03      	ldr	r3, [sp, #12]
 8014884:	1d19      	adds	r1, r3, #4
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	9103      	str	r1, [sp, #12]
 801488a:	2b00      	cmp	r3, #0
 801488c:	bfbb      	ittet	lt
 801488e:	425b      	neglt	r3, r3
 8014890:	f042 0202 	orrlt.w	r2, r2, #2
 8014894:	9307      	strge	r3, [sp, #28]
 8014896:	9307      	strlt	r3, [sp, #28]
 8014898:	bfb8      	it	lt
 801489a:	9204      	strlt	r2, [sp, #16]
 801489c:	7823      	ldrb	r3, [r4, #0]
 801489e:	2b2e      	cmp	r3, #46	; 0x2e
 80148a0:	d10c      	bne.n	80148bc <_svfiprintf_r+0x130>
 80148a2:	7863      	ldrb	r3, [r4, #1]
 80148a4:	2b2a      	cmp	r3, #42	; 0x2a
 80148a6:	d135      	bne.n	8014914 <_svfiprintf_r+0x188>
 80148a8:	9b03      	ldr	r3, [sp, #12]
 80148aa:	1d1a      	adds	r2, r3, #4
 80148ac:	681b      	ldr	r3, [r3, #0]
 80148ae:	9203      	str	r2, [sp, #12]
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	bfb8      	it	lt
 80148b4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80148b8:	3402      	adds	r4, #2
 80148ba:	9305      	str	r3, [sp, #20]
 80148bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014988 <_svfiprintf_r+0x1fc>
 80148c0:	7821      	ldrb	r1, [r4, #0]
 80148c2:	2203      	movs	r2, #3
 80148c4:	4650      	mov	r0, sl
 80148c6:	f7eb fcbb 	bl	8000240 <memchr>
 80148ca:	b140      	cbz	r0, 80148de <_svfiprintf_r+0x152>
 80148cc:	2340      	movs	r3, #64	; 0x40
 80148ce:	eba0 000a 	sub.w	r0, r0, sl
 80148d2:	fa03 f000 	lsl.w	r0, r3, r0
 80148d6:	9b04      	ldr	r3, [sp, #16]
 80148d8:	4303      	orrs	r3, r0
 80148da:	3401      	adds	r4, #1
 80148dc:	9304      	str	r3, [sp, #16]
 80148de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148e2:	4826      	ldr	r0, [pc, #152]	; (801497c <_svfiprintf_r+0x1f0>)
 80148e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80148e8:	2206      	movs	r2, #6
 80148ea:	f7eb fca9 	bl	8000240 <memchr>
 80148ee:	2800      	cmp	r0, #0
 80148f0:	d038      	beq.n	8014964 <_svfiprintf_r+0x1d8>
 80148f2:	4b23      	ldr	r3, [pc, #140]	; (8014980 <_svfiprintf_r+0x1f4>)
 80148f4:	bb1b      	cbnz	r3, 801493e <_svfiprintf_r+0x1b2>
 80148f6:	9b03      	ldr	r3, [sp, #12]
 80148f8:	3307      	adds	r3, #7
 80148fa:	f023 0307 	bic.w	r3, r3, #7
 80148fe:	3308      	adds	r3, #8
 8014900:	9303      	str	r3, [sp, #12]
 8014902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014904:	4433      	add	r3, r6
 8014906:	9309      	str	r3, [sp, #36]	; 0x24
 8014908:	e767      	b.n	80147da <_svfiprintf_r+0x4e>
 801490a:	fb0c 3202 	mla	r2, ip, r2, r3
 801490e:	460c      	mov	r4, r1
 8014910:	2001      	movs	r0, #1
 8014912:	e7a5      	b.n	8014860 <_svfiprintf_r+0xd4>
 8014914:	2300      	movs	r3, #0
 8014916:	3401      	adds	r4, #1
 8014918:	9305      	str	r3, [sp, #20]
 801491a:	4619      	mov	r1, r3
 801491c:	f04f 0c0a 	mov.w	ip, #10
 8014920:	4620      	mov	r0, r4
 8014922:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014926:	3a30      	subs	r2, #48	; 0x30
 8014928:	2a09      	cmp	r2, #9
 801492a:	d903      	bls.n	8014934 <_svfiprintf_r+0x1a8>
 801492c:	2b00      	cmp	r3, #0
 801492e:	d0c5      	beq.n	80148bc <_svfiprintf_r+0x130>
 8014930:	9105      	str	r1, [sp, #20]
 8014932:	e7c3      	b.n	80148bc <_svfiprintf_r+0x130>
 8014934:	fb0c 2101 	mla	r1, ip, r1, r2
 8014938:	4604      	mov	r4, r0
 801493a:	2301      	movs	r3, #1
 801493c:	e7f0      	b.n	8014920 <_svfiprintf_r+0x194>
 801493e:	ab03      	add	r3, sp, #12
 8014940:	9300      	str	r3, [sp, #0]
 8014942:	462a      	mov	r2, r5
 8014944:	4b0f      	ldr	r3, [pc, #60]	; (8014984 <_svfiprintf_r+0x1f8>)
 8014946:	a904      	add	r1, sp, #16
 8014948:	4638      	mov	r0, r7
 801494a:	f000 fa19 	bl	8014d80 <_printf_float>
 801494e:	1c42      	adds	r2, r0, #1
 8014950:	4606      	mov	r6, r0
 8014952:	d1d6      	bne.n	8014902 <_svfiprintf_r+0x176>
 8014954:	89ab      	ldrh	r3, [r5, #12]
 8014956:	065b      	lsls	r3, r3, #25
 8014958:	f53f af2c 	bmi.w	80147b4 <_svfiprintf_r+0x28>
 801495c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801495e:	b01d      	add	sp, #116	; 0x74
 8014960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014964:	ab03      	add	r3, sp, #12
 8014966:	9300      	str	r3, [sp, #0]
 8014968:	462a      	mov	r2, r5
 801496a:	4b06      	ldr	r3, [pc, #24]	; (8014984 <_svfiprintf_r+0x1f8>)
 801496c:	a904      	add	r1, sp, #16
 801496e:	4638      	mov	r0, r7
 8014970:	f000 fcaa 	bl	80152c8 <_printf_i>
 8014974:	e7eb      	b.n	801494e <_svfiprintf_r+0x1c2>
 8014976:	bf00      	nop
 8014978:	0801645c 	.word	0x0801645c
 801497c:	08016466 	.word	0x08016466
 8014980:	08014d81 	.word	0x08014d81
 8014984:	080146d7 	.word	0x080146d7
 8014988:	08016462 	.word	0x08016462

0801498c <__sfputc_r>:
 801498c:	6893      	ldr	r3, [r2, #8]
 801498e:	3b01      	subs	r3, #1
 8014990:	2b00      	cmp	r3, #0
 8014992:	b410      	push	{r4}
 8014994:	6093      	str	r3, [r2, #8]
 8014996:	da08      	bge.n	80149aa <__sfputc_r+0x1e>
 8014998:	6994      	ldr	r4, [r2, #24]
 801499a:	42a3      	cmp	r3, r4
 801499c:	db01      	blt.n	80149a2 <__sfputc_r+0x16>
 801499e:	290a      	cmp	r1, #10
 80149a0:	d103      	bne.n	80149aa <__sfputc_r+0x1e>
 80149a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80149a6:	f000 be89 	b.w	80156bc <__swbuf_r>
 80149aa:	6813      	ldr	r3, [r2, #0]
 80149ac:	1c58      	adds	r0, r3, #1
 80149ae:	6010      	str	r0, [r2, #0]
 80149b0:	7019      	strb	r1, [r3, #0]
 80149b2:	4608      	mov	r0, r1
 80149b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80149b8:	4770      	bx	lr

080149ba <__sfputs_r>:
 80149ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149bc:	4606      	mov	r6, r0
 80149be:	460f      	mov	r7, r1
 80149c0:	4614      	mov	r4, r2
 80149c2:	18d5      	adds	r5, r2, r3
 80149c4:	42ac      	cmp	r4, r5
 80149c6:	d101      	bne.n	80149cc <__sfputs_r+0x12>
 80149c8:	2000      	movs	r0, #0
 80149ca:	e007      	b.n	80149dc <__sfputs_r+0x22>
 80149cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80149d0:	463a      	mov	r2, r7
 80149d2:	4630      	mov	r0, r6
 80149d4:	f7ff ffda 	bl	801498c <__sfputc_r>
 80149d8:	1c43      	adds	r3, r0, #1
 80149da:	d1f3      	bne.n	80149c4 <__sfputs_r+0xa>
 80149dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080149e0 <_vfiprintf_r>:
 80149e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149e4:	460d      	mov	r5, r1
 80149e6:	b09d      	sub	sp, #116	; 0x74
 80149e8:	4614      	mov	r4, r2
 80149ea:	4698      	mov	r8, r3
 80149ec:	4606      	mov	r6, r0
 80149ee:	b118      	cbz	r0, 80149f8 <_vfiprintf_r+0x18>
 80149f0:	6983      	ldr	r3, [r0, #24]
 80149f2:	b90b      	cbnz	r3, 80149f8 <_vfiprintf_r+0x18>
 80149f4:	f7fe ffce 	bl	8013994 <__sinit>
 80149f8:	4b89      	ldr	r3, [pc, #548]	; (8014c20 <_vfiprintf_r+0x240>)
 80149fa:	429d      	cmp	r5, r3
 80149fc:	d11b      	bne.n	8014a36 <_vfiprintf_r+0x56>
 80149fe:	6875      	ldr	r5, [r6, #4]
 8014a00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014a02:	07d9      	lsls	r1, r3, #31
 8014a04:	d405      	bmi.n	8014a12 <_vfiprintf_r+0x32>
 8014a06:	89ab      	ldrh	r3, [r5, #12]
 8014a08:	059a      	lsls	r2, r3, #22
 8014a0a:	d402      	bmi.n	8014a12 <_vfiprintf_r+0x32>
 8014a0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014a0e:	f7ff f8d0 	bl	8013bb2 <__retarget_lock_acquire_recursive>
 8014a12:	89ab      	ldrh	r3, [r5, #12]
 8014a14:	071b      	lsls	r3, r3, #28
 8014a16:	d501      	bpl.n	8014a1c <_vfiprintf_r+0x3c>
 8014a18:	692b      	ldr	r3, [r5, #16]
 8014a1a:	b9eb      	cbnz	r3, 8014a58 <_vfiprintf_r+0x78>
 8014a1c:	4629      	mov	r1, r5
 8014a1e:	4630      	mov	r0, r6
 8014a20:	f000 febe 	bl	80157a0 <__swsetup_r>
 8014a24:	b1c0      	cbz	r0, 8014a58 <_vfiprintf_r+0x78>
 8014a26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014a28:	07dc      	lsls	r4, r3, #31
 8014a2a:	d50e      	bpl.n	8014a4a <_vfiprintf_r+0x6a>
 8014a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014a30:	b01d      	add	sp, #116	; 0x74
 8014a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a36:	4b7b      	ldr	r3, [pc, #492]	; (8014c24 <_vfiprintf_r+0x244>)
 8014a38:	429d      	cmp	r5, r3
 8014a3a:	d101      	bne.n	8014a40 <_vfiprintf_r+0x60>
 8014a3c:	68b5      	ldr	r5, [r6, #8]
 8014a3e:	e7df      	b.n	8014a00 <_vfiprintf_r+0x20>
 8014a40:	4b79      	ldr	r3, [pc, #484]	; (8014c28 <_vfiprintf_r+0x248>)
 8014a42:	429d      	cmp	r5, r3
 8014a44:	bf08      	it	eq
 8014a46:	68f5      	ldreq	r5, [r6, #12]
 8014a48:	e7da      	b.n	8014a00 <_vfiprintf_r+0x20>
 8014a4a:	89ab      	ldrh	r3, [r5, #12]
 8014a4c:	0598      	lsls	r0, r3, #22
 8014a4e:	d4ed      	bmi.n	8014a2c <_vfiprintf_r+0x4c>
 8014a50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014a52:	f7ff f8b0 	bl	8013bb6 <__retarget_lock_release_recursive>
 8014a56:	e7e9      	b.n	8014a2c <_vfiprintf_r+0x4c>
 8014a58:	2300      	movs	r3, #0
 8014a5a:	9309      	str	r3, [sp, #36]	; 0x24
 8014a5c:	2320      	movs	r3, #32
 8014a5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014a62:	f8cd 800c 	str.w	r8, [sp, #12]
 8014a66:	2330      	movs	r3, #48	; 0x30
 8014a68:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014c2c <_vfiprintf_r+0x24c>
 8014a6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014a70:	f04f 0901 	mov.w	r9, #1
 8014a74:	4623      	mov	r3, r4
 8014a76:	469a      	mov	sl, r3
 8014a78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a7c:	b10a      	cbz	r2, 8014a82 <_vfiprintf_r+0xa2>
 8014a7e:	2a25      	cmp	r2, #37	; 0x25
 8014a80:	d1f9      	bne.n	8014a76 <_vfiprintf_r+0x96>
 8014a82:	ebba 0b04 	subs.w	fp, sl, r4
 8014a86:	d00b      	beq.n	8014aa0 <_vfiprintf_r+0xc0>
 8014a88:	465b      	mov	r3, fp
 8014a8a:	4622      	mov	r2, r4
 8014a8c:	4629      	mov	r1, r5
 8014a8e:	4630      	mov	r0, r6
 8014a90:	f7ff ff93 	bl	80149ba <__sfputs_r>
 8014a94:	3001      	adds	r0, #1
 8014a96:	f000 80aa 	beq.w	8014bee <_vfiprintf_r+0x20e>
 8014a9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014a9c:	445a      	add	r2, fp
 8014a9e:	9209      	str	r2, [sp, #36]	; 0x24
 8014aa0:	f89a 3000 	ldrb.w	r3, [sl]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	f000 80a2 	beq.w	8014bee <_vfiprintf_r+0x20e>
 8014aaa:	2300      	movs	r3, #0
 8014aac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014ab0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014ab4:	f10a 0a01 	add.w	sl, sl, #1
 8014ab8:	9304      	str	r3, [sp, #16]
 8014aba:	9307      	str	r3, [sp, #28]
 8014abc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014ac0:	931a      	str	r3, [sp, #104]	; 0x68
 8014ac2:	4654      	mov	r4, sl
 8014ac4:	2205      	movs	r2, #5
 8014ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014aca:	4858      	ldr	r0, [pc, #352]	; (8014c2c <_vfiprintf_r+0x24c>)
 8014acc:	f7eb fbb8 	bl	8000240 <memchr>
 8014ad0:	9a04      	ldr	r2, [sp, #16]
 8014ad2:	b9d8      	cbnz	r0, 8014b0c <_vfiprintf_r+0x12c>
 8014ad4:	06d1      	lsls	r1, r2, #27
 8014ad6:	bf44      	itt	mi
 8014ad8:	2320      	movmi	r3, #32
 8014ada:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014ade:	0713      	lsls	r3, r2, #28
 8014ae0:	bf44      	itt	mi
 8014ae2:	232b      	movmi	r3, #43	; 0x2b
 8014ae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014ae8:	f89a 3000 	ldrb.w	r3, [sl]
 8014aec:	2b2a      	cmp	r3, #42	; 0x2a
 8014aee:	d015      	beq.n	8014b1c <_vfiprintf_r+0x13c>
 8014af0:	9a07      	ldr	r2, [sp, #28]
 8014af2:	4654      	mov	r4, sl
 8014af4:	2000      	movs	r0, #0
 8014af6:	f04f 0c0a 	mov.w	ip, #10
 8014afa:	4621      	mov	r1, r4
 8014afc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014b00:	3b30      	subs	r3, #48	; 0x30
 8014b02:	2b09      	cmp	r3, #9
 8014b04:	d94e      	bls.n	8014ba4 <_vfiprintf_r+0x1c4>
 8014b06:	b1b0      	cbz	r0, 8014b36 <_vfiprintf_r+0x156>
 8014b08:	9207      	str	r2, [sp, #28]
 8014b0a:	e014      	b.n	8014b36 <_vfiprintf_r+0x156>
 8014b0c:	eba0 0308 	sub.w	r3, r0, r8
 8014b10:	fa09 f303 	lsl.w	r3, r9, r3
 8014b14:	4313      	orrs	r3, r2
 8014b16:	9304      	str	r3, [sp, #16]
 8014b18:	46a2      	mov	sl, r4
 8014b1a:	e7d2      	b.n	8014ac2 <_vfiprintf_r+0xe2>
 8014b1c:	9b03      	ldr	r3, [sp, #12]
 8014b1e:	1d19      	adds	r1, r3, #4
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	9103      	str	r1, [sp, #12]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	bfbb      	ittet	lt
 8014b28:	425b      	neglt	r3, r3
 8014b2a:	f042 0202 	orrlt.w	r2, r2, #2
 8014b2e:	9307      	strge	r3, [sp, #28]
 8014b30:	9307      	strlt	r3, [sp, #28]
 8014b32:	bfb8      	it	lt
 8014b34:	9204      	strlt	r2, [sp, #16]
 8014b36:	7823      	ldrb	r3, [r4, #0]
 8014b38:	2b2e      	cmp	r3, #46	; 0x2e
 8014b3a:	d10c      	bne.n	8014b56 <_vfiprintf_r+0x176>
 8014b3c:	7863      	ldrb	r3, [r4, #1]
 8014b3e:	2b2a      	cmp	r3, #42	; 0x2a
 8014b40:	d135      	bne.n	8014bae <_vfiprintf_r+0x1ce>
 8014b42:	9b03      	ldr	r3, [sp, #12]
 8014b44:	1d1a      	adds	r2, r3, #4
 8014b46:	681b      	ldr	r3, [r3, #0]
 8014b48:	9203      	str	r2, [sp, #12]
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	bfb8      	it	lt
 8014b4e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014b52:	3402      	adds	r4, #2
 8014b54:	9305      	str	r3, [sp, #20]
 8014b56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014c3c <_vfiprintf_r+0x25c>
 8014b5a:	7821      	ldrb	r1, [r4, #0]
 8014b5c:	2203      	movs	r2, #3
 8014b5e:	4650      	mov	r0, sl
 8014b60:	f7eb fb6e 	bl	8000240 <memchr>
 8014b64:	b140      	cbz	r0, 8014b78 <_vfiprintf_r+0x198>
 8014b66:	2340      	movs	r3, #64	; 0x40
 8014b68:	eba0 000a 	sub.w	r0, r0, sl
 8014b6c:	fa03 f000 	lsl.w	r0, r3, r0
 8014b70:	9b04      	ldr	r3, [sp, #16]
 8014b72:	4303      	orrs	r3, r0
 8014b74:	3401      	adds	r4, #1
 8014b76:	9304      	str	r3, [sp, #16]
 8014b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b7c:	482c      	ldr	r0, [pc, #176]	; (8014c30 <_vfiprintf_r+0x250>)
 8014b7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014b82:	2206      	movs	r2, #6
 8014b84:	f7eb fb5c 	bl	8000240 <memchr>
 8014b88:	2800      	cmp	r0, #0
 8014b8a:	d03f      	beq.n	8014c0c <_vfiprintf_r+0x22c>
 8014b8c:	4b29      	ldr	r3, [pc, #164]	; (8014c34 <_vfiprintf_r+0x254>)
 8014b8e:	bb1b      	cbnz	r3, 8014bd8 <_vfiprintf_r+0x1f8>
 8014b90:	9b03      	ldr	r3, [sp, #12]
 8014b92:	3307      	adds	r3, #7
 8014b94:	f023 0307 	bic.w	r3, r3, #7
 8014b98:	3308      	adds	r3, #8
 8014b9a:	9303      	str	r3, [sp, #12]
 8014b9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b9e:	443b      	add	r3, r7
 8014ba0:	9309      	str	r3, [sp, #36]	; 0x24
 8014ba2:	e767      	b.n	8014a74 <_vfiprintf_r+0x94>
 8014ba4:	fb0c 3202 	mla	r2, ip, r2, r3
 8014ba8:	460c      	mov	r4, r1
 8014baa:	2001      	movs	r0, #1
 8014bac:	e7a5      	b.n	8014afa <_vfiprintf_r+0x11a>
 8014bae:	2300      	movs	r3, #0
 8014bb0:	3401      	adds	r4, #1
 8014bb2:	9305      	str	r3, [sp, #20]
 8014bb4:	4619      	mov	r1, r3
 8014bb6:	f04f 0c0a 	mov.w	ip, #10
 8014bba:	4620      	mov	r0, r4
 8014bbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014bc0:	3a30      	subs	r2, #48	; 0x30
 8014bc2:	2a09      	cmp	r2, #9
 8014bc4:	d903      	bls.n	8014bce <_vfiprintf_r+0x1ee>
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d0c5      	beq.n	8014b56 <_vfiprintf_r+0x176>
 8014bca:	9105      	str	r1, [sp, #20]
 8014bcc:	e7c3      	b.n	8014b56 <_vfiprintf_r+0x176>
 8014bce:	fb0c 2101 	mla	r1, ip, r1, r2
 8014bd2:	4604      	mov	r4, r0
 8014bd4:	2301      	movs	r3, #1
 8014bd6:	e7f0      	b.n	8014bba <_vfiprintf_r+0x1da>
 8014bd8:	ab03      	add	r3, sp, #12
 8014bda:	9300      	str	r3, [sp, #0]
 8014bdc:	462a      	mov	r2, r5
 8014bde:	4b16      	ldr	r3, [pc, #88]	; (8014c38 <_vfiprintf_r+0x258>)
 8014be0:	a904      	add	r1, sp, #16
 8014be2:	4630      	mov	r0, r6
 8014be4:	f000 f8cc 	bl	8014d80 <_printf_float>
 8014be8:	4607      	mov	r7, r0
 8014bea:	1c78      	adds	r0, r7, #1
 8014bec:	d1d6      	bne.n	8014b9c <_vfiprintf_r+0x1bc>
 8014bee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014bf0:	07d9      	lsls	r1, r3, #31
 8014bf2:	d405      	bmi.n	8014c00 <_vfiprintf_r+0x220>
 8014bf4:	89ab      	ldrh	r3, [r5, #12]
 8014bf6:	059a      	lsls	r2, r3, #22
 8014bf8:	d402      	bmi.n	8014c00 <_vfiprintf_r+0x220>
 8014bfa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014bfc:	f7fe ffdb 	bl	8013bb6 <__retarget_lock_release_recursive>
 8014c00:	89ab      	ldrh	r3, [r5, #12]
 8014c02:	065b      	lsls	r3, r3, #25
 8014c04:	f53f af12 	bmi.w	8014a2c <_vfiprintf_r+0x4c>
 8014c08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014c0a:	e711      	b.n	8014a30 <_vfiprintf_r+0x50>
 8014c0c:	ab03      	add	r3, sp, #12
 8014c0e:	9300      	str	r3, [sp, #0]
 8014c10:	462a      	mov	r2, r5
 8014c12:	4b09      	ldr	r3, [pc, #36]	; (8014c38 <_vfiprintf_r+0x258>)
 8014c14:	a904      	add	r1, sp, #16
 8014c16:	4630      	mov	r0, r6
 8014c18:	f000 fb56 	bl	80152c8 <_printf_i>
 8014c1c:	e7e4      	b.n	8014be8 <_vfiprintf_r+0x208>
 8014c1e:	bf00      	nop
 8014c20:	080162b4 	.word	0x080162b4
 8014c24:	080162d4 	.word	0x080162d4
 8014c28:	08016294 	.word	0x08016294
 8014c2c:	0801645c 	.word	0x0801645c
 8014c30:	08016466 	.word	0x08016466
 8014c34:	08014d81 	.word	0x08014d81
 8014c38:	080149bb 	.word	0x080149bb
 8014c3c:	08016462 	.word	0x08016462

08014c40 <__cvt>:
 8014c40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014c44:	ec55 4b10 	vmov	r4, r5, d0
 8014c48:	2d00      	cmp	r5, #0
 8014c4a:	460e      	mov	r6, r1
 8014c4c:	4619      	mov	r1, r3
 8014c4e:	462b      	mov	r3, r5
 8014c50:	bfbb      	ittet	lt
 8014c52:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8014c56:	461d      	movlt	r5, r3
 8014c58:	2300      	movge	r3, #0
 8014c5a:	232d      	movlt	r3, #45	; 0x2d
 8014c5c:	700b      	strb	r3, [r1, #0]
 8014c5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014c60:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014c64:	4691      	mov	r9, r2
 8014c66:	f023 0820 	bic.w	r8, r3, #32
 8014c6a:	bfbc      	itt	lt
 8014c6c:	4622      	movlt	r2, r4
 8014c6e:	4614      	movlt	r4, r2
 8014c70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014c74:	d005      	beq.n	8014c82 <__cvt+0x42>
 8014c76:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8014c7a:	d100      	bne.n	8014c7e <__cvt+0x3e>
 8014c7c:	3601      	adds	r6, #1
 8014c7e:	2102      	movs	r1, #2
 8014c80:	e000      	b.n	8014c84 <__cvt+0x44>
 8014c82:	2103      	movs	r1, #3
 8014c84:	ab03      	add	r3, sp, #12
 8014c86:	9301      	str	r3, [sp, #4]
 8014c88:	ab02      	add	r3, sp, #8
 8014c8a:	9300      	str	r3, [sp, #0]
 8014c8c:	ec45 4b10 	vmov	d0, r4, r5
 8014c90:	4653      	mov	r3, sl
 8014c92:	4632      	mov	r2, r6
 8014c94:	f7fd ff70 	bl	8012b78 <_dtoa_r>
 8014c98:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8014c9c:	4607      	mov	r7, r0
 8014c9e:	d102      	bne.n	8014ca6 <__cvt+0x66>
 8014ca0:	f019 0f01 	tst.w	r9, #1
 8014ca4:	d022      	beq.n	8014cec <__cvt+0xac>
 8014ca6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014caa:	eb07 0906 	add.w	r9, r7, r6
 8014cae:	d110      	bne.n	8014cd2 <__cvt+0x92>
 8014cb0:	783b      	ldrb	r3, [r7, #0]
 8014cb2:	2b30      	cmp	r3, #48	; 0x30
 8014cb4:	d10a      	bne.n	8014ccc <__cvt+0x8c>
 8014cb6:	2200      	movs	r2, #0
 8014cb8:	2300      	movs	r3, #0
 8014cba:	4620      	mov	r0, r4
 8014cbc:	4629      	mov	r1, r5
 8014cbe:	f7eb ff3d 	bl	8000b3c <__aeabi_dcmpeq>
 8014cc2:	b918      	cbnz	r0, 8014ccc <__cvt+0x8c>
 8014cc4:	f1c6 0601 	rsb	r6, r6, #1
 8014cc8:	f8ca 6000 	str.w	r6, [sl]
 8014ccc:	f8da 3000 	ldr.w	r3, [sl]
 8014cd0:	4499      	add	r9, r3
 8014cd2:	2200      	movs	r2, #0
 8014cd4:	2300      	movs	r3, #0
 8014cd6:	4620      	mov	r0, r4
 8014cd8:	4629      	mov	r1, r5
 8014cda:	f7eb ff2f 	bl	8000b3c <__aeabi_dcmpeq>
 8014cde:	b108      	cbz	r0, 8014ce4 <__cvt+0xa4>
 8014ce0:	f8cd 900c 	str.w	r9, [sp, #12]
 8014ce4:	2230      	movs	r2, #48	; 0x30
 8014ce6:	9b03      	ldr	r3, [sp, #12]
 8014ce8:	454b      	cmp	r3, r9
 8014cea:	d307      	bcc.n	8014cfc <__cvt+0xbc>
 8014cec:	9b03      	ldr	r3, [sp, #12]
 8014cee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014cf0:	1bdb      	subs	r3, r3, r7
 8014cf2:	4638      	mov	r0, r7
 8014cf4:	6013      	str	r3, [r2, #0]
 8014cf6:	b004      	add	sp, #16
 8014cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cfc:	1c59      	adds	r1, r3, #1
 8014cfe:	9103      	str	r1, [sp, #12]
 8014d00:	701a      	strb	r2, [r3, #0]
 8014d02:	e7f0      	b.n	8014ce6 <__cvt+0xa6>

08014d04 <__exponent>:
 8014d04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014d06:	4603      	mov	r3, r0
 8014d08:	2900      	cmp	r1, #0
 8014d0a:	bfb8      	it	lt
 8014d0c:	4249      	neglt	r1, r1
 8014d0e:	f803 2b02 	strb.w	r2, [r3], #2
 8014d12:	bfb4      	ite	lt
 8014d14:	222d      	movlt	r2, #45	; 0x2d
 8014d16:	222b      	movge	r2, #43	; 0x2b
 8014d18:	2909      	cmp	r1, #9
 8014d1a:	7042      	strb	r2, [r0, #1]
 8014d1c:	dd2a      	ble.n	8014d74 <__exponent+0x70>
 8014d1e:	f10d 0407 	add.w	r4, sp, #7
 8014d22:	46a4      	mov	ip, r4
 8014d24:	270a      	movs	r7, #10
 8014d26:	46a6      	mov	lr, r4
 8014d28:	460a      	mov	r2, r1
 8014d2a:	fb91 f6f7 	sdiv	r6, r1, r7
 8014d2e:	fb07 1516 	mls	r5, r7, r6, r1
 8014d32:	3530      	adds	r5, #48	; 0x30
 8014d34:	2a63      	cmp	r2, #99	; 0x63
 8014d36:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8014d3a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8014d3e:	4631      	mov	r1, r6
 8014d40:	dcf1      	bgt.n	8014d26 <__exponent+0x22>
 8014d42:	3130      	adds	r1, #48	; 0x30
 8014d44:	f1ae 0502 	sub.w	r5, lr, #2
 8014d48:	f804 1c01 	strb.w	r1, [r4, #-1]
 8014d4c:	1c44      	adds	r4, r0, #1
 8014d4e:	4629      	mov	r1, r5
 8014d50:	4561      	cmp	r1, ip
 8014d52:	d30a      	bcc.n	8014d6a <__exponent+0x66>
 8014d54:	f10d 0209 	add.w	r2, sp, #9
 8014d58:	eba2 020e 	sub.w	r2, r2, lr
 8014d5c:	4565      	cmp	r5, ip
 8014d5e:	bf88      	it	hi
 8014d60:	2200      	movhi	r2, #0
 8014d62:	4413      	add	r3, r2
 8014d64:	1a18      	subs	r0, r3, r0
 8014d66:	b003      	add	sp, #12
 8014d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014d6e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8014d72:	e7ed      	b.n	8014d50 <__exponent+0x4c>
 8014d74:	2330      	movs	r3, #48	; 0x30
 8014d76:	3130      	adds	r1, #48	; 0x30
 8014d78:	7083      	strb	r3, [r0, #2]
 8014d7a:	70c1      	strb	r1, [r0, #3]
 8014d7c:	1d03      	adds	r3, r0, #4
 8014d7e:	e7f1      	b.n	8014d64 <__exponent+0x60>

08014d80 <_printf_float>:
 8014d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d84:	ed2d 8b02 	vpush	{d8}
 8014d88:	b08d      	sub	sp, #52	; 0x34
 8014d8a:	460c      	mov	r4, r1
 8014d8c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014d90:	4616      	mov	r6, r2
 8014d92:	461f      	mov	r7, r3
 8014d94:	4605      	mov	r5, r0
 8014d96:	f7fe ff07 	bl	8013ba8 <_localeconv_r>
 8014d9a:	f8d0 a000 	ldr.w	sl, [r0]
 8014d9e:	4650      	mov	r0, sl
 8014da0:	f7eb fa9e 	bl	80002e0 <strlen>
 8014da4:	2300      	movs	r3, #0
 8014da6:	930a      	str	r3, [sp, #40]	; 0x28
 8014da8:	6823      	ldr	r3, [r4, #0]
 8014daa:	9305      	str	r3, [sp, #20]
 8014dac:	f8d8 3000 	ldr.w	r3, [r8]
 8014db0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8014db4:	3307      	adds	r3, #7
 8014db6:	f023 0307 	bic.w	r3, r3, #7
 8014dba:	f103 0208 	add.w	r2, r3, #8
 8014dbe:	f8c8 2000 	str.w	r2, [r8]
 8014dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dc6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014dca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014dce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014dd2:	9307      	str	r3, [sp, #28]
 8014dd4:	f8cd 8018 	str.w	r8, [sp, #24]
 8014dd8:	ee08 0a10 	vmov	s16, r0
 8014ddc:	4b9f      	ldr	r3, [pc, #636]	; (801505c <_printf_float+0x2dc>)
 8014dde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014de2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014de6:	f7eb fedb 	bl	8000ba0 <__aeabi_dcmpun>
 8014dea:	bb88      	cbnz	r0, 8014e50 <_printf_float+0xd0>
 8014dec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014df0:	4b9a      	ldr	r3, [pc, #616]	; (801505c <_printf_float+0x2dc>)
 8014df2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014df6:	f7eb feb5 	bl	8000b64 <__aeabi_dcmple>
 8014dfa:	bb48      	cbnz	r0, 8014e50 <_printf_float+0xd0>
 8014dfc:	2200      	movs	r2, #0
 8014dfe:	2300      	movs	r3, #0
 8014e00:	4640      	mov	r0, r8
 8014e02:	4649      	mov	r1, r9
 8014e04:	f7eb fea4 	bl	8000b50 <__aeabi_dcmplt>
 8014e08:	b110      	cbz	r0, 8014e10 <_printf_float+0x90>
 8014e0a:	232d      	movs	r3, #45	; 0x2d
 8014e0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014e10:	4b93      	ldr	r3, [pc, #588]	; (8015060 <_printf_float+0x2e0>)
 8014e12:	4894      	ldr	r0, [pc, #592]	; (8015064 <_printf_float+0x2e4>)
 8014e14:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8014e18:	bf94      	ite	ls
 8014e1a:	4698      	movls	r8, r3
 8014e1c:	4680      	movhi	r8, r0
 8014e1e:	2303      	movs	r3, #3
 8014e20:	6123      	str	r3, [r4, #16]
 8014e22:	9b05      	ldr	r3, [sp, #20]
 8014e24:	f023 0204 	bic.w	r2, r3, #4
 8014e28:	6022      	str	r2, [r4, #0]
 8014e2a:	f04f 0900 	mov.w	r9, #0
 8014e2e:	9700      	str	r7, [sp, #0]
 8014e30:	4633      	mov	r3, r6
 8014e32:	aa0b      	add	r2, sp, #44	; 0x2c
 8014e34:	4621      	mov	r1, r4
 8014e36:	4628      	mov	r0, r5
 8014e38:	f000 f9d8 	bl	80151ec <_printf_common>
 8014e3c:	3001      	adds	r0, #1
 8014e3e:	f040 8090 	bne.w	8014f62 <_printf_float+0x1e2>
 8014e42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014e46:	b00d      	add	sp, #52	; 0x34
 8014e48:	ecbd 8b02 	vpop	{d8}
 8014e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e50:	4642      	mov	r2, r8
 8014e52:	464b      	mov	r3, r9
 8014e54:	4640      	mov	r0, r8
 8014e56:	4649      	mov	r1, r9
 8014e58:	f7eb fea2 	bl	8000ba0 <__aeabi_dcmpun>
 8014e5c:	b140      	cbz	r0, 8014e70 <_printf_float+0xf0>
 8014e5e:	464b      	mov	r3, r9
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	bfbc      	itt	lt
 8014e64:	232d      	movlt	r3, #45	; 0x2d
 8014e66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014e6a:	487f      	ldr	r0, [pc, #508]	; (8015068 <_printf_float+0x2e8>)
 8014e6c:	4b7f      	ldr	r3, [pc, #508]	; (801506c <_printf_float+0x2ec>)
 8014e6e:	e7d1      	b.n	8014e14 <_printf_float+0x94>
 8014e70:	6863      	ldr	r3, [r4, #4]
 8014e72:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8014e76:	9206      	str	r2, [sp, #24]
 8014e78:	1c5a      	adds	r2, r3, #1
 8014e7a:	d13f      	bne.n	8014efc <_printf_float+0x17c>
 8014e7c:	2306      	movs	r3, #6
 8014e7e:	6063      	str	r3, [r4, #4]
 8014e80:	9b05      	ldr	r3, [sp, #20]
 8014e82:	6861      	ldr	r1, [r4, #4]
 8014e84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8014e88:	2300      	movs	r3, #0
 8014e8a:	9303      	str	r3, [sp, #12]
 8014e8c:	ab0a      	add	r3, sp, #40	; 0x28
 8014e8e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8014e92:	ab09      	add	r3, sp, #36	; 0x24
 8014e94:	ec49 8b10 	vmov	d0, r8, r9
 8014e98:	9300      	str	r3, [sp, #0]
 8014e9a:	6022      	str	r2, [r4, #0]
 8014e9c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014ea0:	4628      	mov	r0, r5
 8014ea2:	f7ff fecd 	bl	8014c40 <__cvt>
 8014ea6:	9b06      	ldr	r3, [sp, #24]
 8014ea8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014eaa:	2b47      	cmp	r3, #71	; 0x47
 8014eac:	4680      	mov	r8, r0
 8014eae:	d108      	bne.n	8014ec2 <_printf_float+0x142>
 8014eb0:	1cc8      	adds	r0, r1, #3
 8014eb2:	db02      	blt.n	8014eba <_printf_float+0x13a>
 8014eb4:	6863      	ldr	r3, [r4, #4]
 8014eb6:	4299      	cmp	r1, r3
 8014eb8:	dd41      	ble.n	8014f3e <_printf_float+0x1be>
 8014eba:	f1ab 0b02 	sub.w	fp, fp, #2
 8014ebe:	fa5f fb8b 	uxtb.w	fp, fp
 8014ec2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014ec6:	d820      	bhi.n	8014f0a <_printf_float+0x18a>
 8014ec8:	3901      	subs	r1, #1
 8014eca:	465a      	mov	r2, fp
 8014ecc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014ed0:	9109      	str	r1, [sp, #36]	; 0x24
 8014ed2:	f7ff ff17 	bl	8014d04 <__exponent>
 8014ed6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014ed8:	1813      	adds	r3, r2, r0
 8014eda:	2a01      	cmp	r2, #1
 8014edc:	4681      	mov	r9, r0
 8014ede:	6123      	str	r3, [r4, #16]
 8014ee0:	dc02      	bgt.n	8014ee8 <_printf_float+0x168>
 8014ee2:	6822      	ldr	r2, [r4, #0]
 8014ee4:	07d2      	lsls	r2, r2, #31
 8014ee6:	d501      	bpl.n	8014eec <_printf_float+0x16c>
 8014ee8:	3301      	adds	r3, #1
 8014eea:	6123      	str	r3, [r4, #16]
 8014eec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d09c      	beq.n	8014e2e <_printf_float+0xae>
 8014ef4:	232d      	movs	r3, #45	; 0x2d
 8014ef6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014efa:	e798      	b.n	8014e2e <_printf_float+0xae>
 8014efc:	9a06      	ldr	r2, [sp, #24]
 8014efe:	2a47      	cmp	r2, #71	; 0x47
 8014f00:	d1be      	bne.n	8014e80 <_printf_float+0x100>
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d1bc      	bne.n	8014e80 <_printf_float+0x100>
 8014f06:	2301      	movs	r3, #1
 8014f08:	e7b9      	b.n	8014e7e <_printf_float+0xfe>
 8014f0a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8014f0e:	d118      	bne.n	8014f42 <_printf_float+0x1c2>
 8014f10:	2900      	cmp	r1, #0
 8014f12:	6863      	ldr	r3, [r4, #4]
 8014f14:	dd0b      	ble.n	8014f2e <_printf_float+0x1ae>
 8014f16:	6121      	str	r1, [r4, #16]
 8014f18:	b913      	cbnz	r3, 8014f20 <_printf_float+0x1a0>
 8014f1a:	6822      	ldr	r2, [r4, #0]
 8014f1c:	07d0      	lsls	r0, r2, #31
 8014f1e:	d502      	bpl.n	8014f26 <_printf_float+0x1a6>
 8014f20:	3301      	adds	r3, #1
 8014f22:	440b      	add	r3, r1
 8014f24:	6123      	str	r3, [r4, #16]
 8014f26:	65a1      	str	r1, [r4, #88]	; 0x58
 8014f28:	f04f 0900 	mov.w	r9, #0
 8014f2c:	e7de      	b.n	8014eec <_printf_float+0x16c>
 8014f2e:	b913      	cbnz	r3, 8014f36 <_printf_float+0x1b6>
 8014f30:	6822      	ldr	r2, [r4, #0]
 8014f32:	07d2      	lsls	r2, r2, #31
 8014f34:	d501      	bpl.n	8014f3a <_printf_float+0x1ba>
 8014f36:	3302      	adds	r3, #2
 8014f38:	e7f4      	b.n	8014f24 <_printf_float+0x1a4>
 8014f3a:	2301      	movs	r3, #1
 8014f3c:	e7f2      	b.n	8014f24 <_printf_float+0x1a4>
 8014f3e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8014f42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f44:	4299      	cmp	r1, r3
 8014f46:	db05      	blt.n	8014f54 <_printf_float+0x1d4>
 8014f48:	6823      	ldr	r3, [r4, #0]
 8014f4a:	6121      	str	r1, [r4, #16]
 8014f4c:	07d8      	lsls	r0, r3, #31
 8014f4e:	d5ea      	bpl.n	8014f26 <_printf_float+0x1a6>
 8014f50:	1c4b      	adds	r3, r1, #1
 8014f52:	e7e7      	b.n	8014f24 <_printf_float+0x1a4>
 8014f54:	2900      	cmp	r1, #0
 8014f56:	bfd4      	ite	le
 8014f58:	f1c1 0202 	rsble	r2, r1, #2
 8014f5c:	2201      	movgt	r2, #1
 8014f5e:	4413      	add	r3, r2
 8014f60:	e7e0      	b.n	8014f24 <_printf_float+0x1a4>
 8014f62:	6823      	ldr	r3, [r4, #0]
 8014f64:	055a      	lsls	r2, r3, #21
 8014f66:	d407      	bmi.n	8014f78 <_printf_float+0x1f8>
 8014f68:	6923      	ldr	r3, [r4, #16]
 8014f6a:	4642      	mov	r2, r8
 8014f6c:	4631      	mov	r1, r6
 8014f6e:	4628      	mov	r0, r5
 8014f70:	47b8      	blx	r7
 8014f72:	3001      	adds	r0, #1
 8014f74:	d12c      	bne.n	8014fd0 <_printf_float+0x250>
 8014f76:	e764      	b.n	8014e42 <_printf_float+0xc2>
 8014f78:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014f7c:	f240 80e0 	bls.w	8015140 <_printf_float+0x3c0>
 8014f80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014f84:	2200      	movs	r2, #0
 8014f86:	2300      	movs	r3, #0
 8014f88:	f7eb fdd8 	bl	8000b3c <__aeabi_dcmpeq>
 8014f8c:	2800      	cmp	r0, #0
 8014f8e:	d034      	beq.n	8014ffa <_printf_float+0x27a>
 8014f90:	4a37      	ldr	r2, [pc, #220]	; (8015070 <_printf_float+0x2f0>)
 8014f92:	2301      	movs	r3, #1
 8014f94:	4631      	mov	r1, r6
 8014f96:	4628      	mov	r0, r5
 8014f98:	47b8      	blx	r7
 8014f9a:	3001      	adds	r0, #1
 8014f9c:	f43f af51 	beq.w	8014e42 <_printf_float+0xc2>
 8014fa0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014fa4:	429a      	cmp	r2, r3
 8014fa6:	db02      	blt.n	8014fae <_printf_float+0x22e>
 8014fa8:	6823      	ldr	r3, [r4, #0]
 8014faa:	07d8      	lsls	r0, r3, #31
 8014fac:	d510      	bpl.n	8014fd0 <_printf_float+0x250>
 8014fae:	ee18 3a10 	vmov	r3, s16
 8014fb2:	4652      	mov	r2, sl
 8014fb4:	4631      	mov	r1, r6
 8014fb6:	4628      	mov	r0, r5
 8014fb8:	47b8      	blx	r7
 8014fba:	3001      	adds	r0, #1
 8014fbc:	f43f af41 	beq.w	8014e42 <_printf_float+0xc2>
 8014fc0:	f04f 0800 	mov.w	r8, #0
 8014fc4:	f104 091a 	add.w	r9, r4, #26
 8014fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014fca:	3b01      	subs	r3, #1
 8014fcc:	4543      	cmp	r3, r8
 8014fce:	dc09      	bgt.n	8014fe4 <_printf_float+0x264>
 8014fd0:	6823      	ldr	r3, [r4, #0]
 8014fd2:	079b      	lsls	r3, r3, #30
 8014fd4:	f100 8105 	bmi.w	80151e2 <_printf_float+0x462>
 8014fd8:	68e0      	ldr	r0, [r4, #12]
 8014fda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014fdc:	4298      	cmp	r0, r3
 8014fde:	bfb8      	it	lt
 8014fe0:	4618      	movlt	r0, r3
 8014fe2:	e730      	b.n	8014e46 <_printf_float+0xc6>
 8014fe4:	2301      	movs	r3, #1
 8014fe6:	464a      	mov	r2, r9
 8014fe8:	4631      	mov	r1, r6
 8014fea:	4628      	mov	r0, r5
 8014fec:	47b8      	blx	r7
 8014fee:	3001      	adds	r0, #1
 8014ff0:	f43f af27 	beq.w	8014e42 <_printf_float+0xc2>
 8014ff4:	f108 0801 	add.w	r8, r8, #1
 8014ff8:	e7e6      	b.n	8014fc8 <_printf_float+0x248>
 8014ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	dc39      	bgt.n	8015074 <_printf_float+0x2f4>
 8015000:	4a1b      	ldr	r2, [pc, #108]	; (8015070 <_printf_float+0x2f0>)
 8015002:	2301      	movs	r3, #1
 8015004:	4631      	mov	r1, r6
 8015006:	4628      	mov	r0, r5
 8015008:	47b8      	blx	r7
 801500a:	3001      	adds	r0, #1
 801500c:	f43f af19 	beq.w	8014e42 <_printf_float+0xc2>
 8015010:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015014:	4313      	orrs	r3, r2
 8015016:	d102      	bne.n	801501e <_printf_float+0x29e>
 8015018:	6823      	ldr	r3, [r4, #0]
 801501a:	07d9      	lsls	r1, r3, #31
 801501c:	d5d8      	bpl.n	8014fd0 <_printf_float+0x250>
 801501e:	ee18 3a10 	vmov	r3, s16
 8015022:	4652      	mov	r2, sl
 8015024:	4631      	mov	r1, r6
 8015026:	4628      	mov	r0, r5
 8015028:	47b8      	blx	r7
 801502a:	3001      	adds	r0, #1
 801502c:	f43f af09 	beq.w	8014e42 <_printf_float+0xc2>
 8015030:	f04f 0900 	mov.w	r9, #0
 8015034:	f104 0a1a 	add.w	sl, r4, #26
 8015038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801503a:	425b      	negs	r3, r3
 801503c:	454b      	cmp	r3, r9
 801503e:	dc01      	bgt.n	8015044 <_printf_float+0x2c4>
 8015040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015042:	e792      	b.n	8014f6a <_printf_float+0x1ea>
 8015044:	2301      	movs	r3, #1
 8015046:	4652      	mov	r2, sl
 8015048:	4631      	mov	r1, r6
 801504a:	4628      	mov	r0, r5
 801504c:	47b8      	blx	r7
 801504e:	3001      	adds	r0, #1
 8015050:	f43f aef7 	beq.w	8014e42 <_printf_float+0xc2>
 8015054:	f109 0901 	add.w	r9, r9, #1
 8015058:	e7ee      	b.n	8015038 <_printf_float+0x2b8>
 801505a:	bf00      	nop
 801505c:	7fefffff 	.word	0x7fefffff
 8015060:	0801646d 	.word	0x0801646d
 8015064:	08016471 	.word	0x08016471
 8015068:	08016479 	.word	0x08016479
 801506c:	08016475 	.word	0x08016475
 8015070:	0801620c 	.word	0x0801620c
 8015074:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015076:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015078:	429a      	cmp	r2, r3
 801507a:	bfa8      	it	ge
 801507c:	461a      	movge	r2, r3
 801507e:	2a00      	cmp	r2, #0
 8015080:	4691      	mov	r9, r2
 8015082:	dc37      	bgt.n	80150f4 <_printf_float+0x374>
 8015084:	f04f 0b00 	mov.w	fp, #0
 8015088:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801508c:	f104 021a 	add.w	r2, r4, #26
 8015090:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015092:	9305      	str	r3, [sp, #20]
 8015094:	eba3 0309 	sub.w	r3, r3, r9
 8015098:	455b      	cmp	r3, fp
 801509a:	dc33      	bgt.n	8015104 <_printf_float+0x384>
 801509c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80150a0:	429a      	cmp	r2, r3
 80150a2:	db3b      	blt.n	801511c <_printf_float+0x39c>
 80150a4:	6823      	ldr	r3, [r4, #0]
 80150a6:	07da      	lsls	r2, r3, #31
 80150a8:	d438      	bmi.n	801511c <_printf_float+0x39c>
 80150aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150ac:	9a05      	ldr	r2, [sp, #20]
 80150ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80150b0:	1a9a      	subs	r2, r3, r2
 80150b2:	eba3 0901 	sub.w	r9, r3, r1
 80150b6:	4591      	cmp	r9, r2
 80150b8:	bfa8      	it	ge
 80150ba:	4691      	movge	r9, r2
 80150bc:	f1b9 0f00 	cmp.w	r9, #0
 80150c0:	dc35      	bgt.n	801512e <_printf_float+0x3ae>
 80150c2:	f04f 0800 	mov.w	r8, #0
 80150c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80150ca:	f104 0a1a 	add.w	sl, r4, #26
 80150ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80150d2:	1a9b      	subs	r3, r3, r2
 80150d4:	eba3 0309 	sub.w	r3, r3, r9
 80150d8:	4543      	cmp	r3, r8
 80150da:	f77f af79 	ble.w	8014fd0 <_printf_float+0x250>
 80150de:	2301      	movs	r3, #1
 80150e0:	4652      	mov	r2, sl
 80150e2:	4631      	mov	r1, r6
 80150e4:	4628      	mov	r0, r5
 80150e6:	47b8      	blx	r7
 80150e8:	3001      	adds	r0, #1
 80150ea:	f43f aeaa 	beq.w	8014e42 <_printf_float+0xc2>
 80150ee:	f108 0801 	add.w	r8, r8, #1
 80150f2:	e7ec      	b.n	80150ce <_printf_float+0x34e>
 80150f4:	4613      	mov	r3, r2
 80150f6:	4631      	mov	r1, r6
 80150f8:	4642      	mov	r2, r8
 80150fa:	4628      	mov	r0, r5
 80150fc:	47b8      	blx	r7
 80150fe:	3001      	adds	r0, #1
 8015100:	d1c0      	bne.n	8015084 <_printf_float+0x304>
 8015102:	e69e      	b.n	8014e42 <_printf_float+0xc2>
 8015104:	2301      	movs	r3, #1
 8015106:	4631      	mov	r1, r6
 8015108:	4628      	mov	r0, r5
 801510a:	9205      	str	r2, [sp, #20]
 801510c:	47b8      	blx	r7
 801510e:	3001      	adds	r0, #1
 8015110:	f43f ae97 	beq.w	8014e42 <_printf_float+0xc2>
 8015114:	9a05      	ldr	r2, [sp, #20]
 8015116:	f10b 0b01 	add.w	fp, fp, #1
 801511a:	e7b9      	b.n	8015090 <_printf_float+0x310>
 801511c:	ee18 3a10 	vmov	r3, s16
 8015120:	4652      	mov	r2, sl
 8015122:	4631      	mov	r1, r6
 8015124:	4628      	mov	r0, r5
 8015126:	47b8      	blx	r7
 8015128:	3001      	adds	r0, #1
 801512a:	d1be      	bne.n	80150aa <_printf_float+0x32a>
 801512c:	e689      	b.n	8014e42 <_printf_float+0xc2>
 801512e:	9a05      	ldr	r2, [sp, #20]
 8015130:	464b      	mov	r3, r9
 8015132:	4442      	add	r2, r8
 8015134:	4631      	mov	r1, r6
 8015136:	4628      	mov	r0, r5
 8015138:	47b8      	blx	r7
 801513a:	3001      	adds	r0, #1
 801513c:	d1c1      	bne.n	80150c2 <_printf_float+0x342>
 801513e:	e680      	b.n	8014e42 <_printf_float+0xc2>
 8015140:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015142:	2a01      	cmp	r2, #1
 8015144:	dc01      	bgt.n	801514a <_printf_float+0x3ca>
 8015146:	07db      	lsls	r3, r3, #31
 8015148:	d538      	bpl.n	80151bc <_printf_float+0x43c>
 801514a:	2301      	movs	r3, #1
 801514c:	4642      	mov	r2, r8
 801514e:	4631      	mov	r1, r6
 8015150:	4628      	mov	r0, r5
 8015152:	47b8      	blx	r7
 8015154:	3001      	adds	r0, #1
 8015156:	f43f ae74 	beq.w	8014e42 <_printf_float+0xc2>
 801515a:	ee18 3a10 	vmov	r3, s16
 801515e:	4652      	mov	r2, sl
 8015160:	4631      	mov	r1, r6
 8015162:	4628      	mov	r0, r5
 8015164:	47b8      	blx	r7
 8015166:	3001      	adds	r0, #1
 8015168:	f43f ae6b 	beq.w	8014e42 <_printf_float+0xc2>
 801516c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015170:	2200      	movs	r2, #0
 8015172:	2300      	movs	r3, #0
 8015174:	f7eb fce2 	bl	8000b3c <__aeabi_dcmpeq>
 8015178:	b9d8      	cbnz	r0, 80151b2 <_printf_float+0x432>
 801517a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801517c:	f108 0201 	add.w	r2, r8, #1
 8015180:	3b01      	subs	r3, #1
 8015182:	4631      	mov	r1, r6
 8015184:	4628      	mov	r0, r5
 8015186:	47b8      	blx	r7
 8015188:	3001      	adds	r0, #1
 801518a:	d10e      	bne.n	80151aa <_printf_float+0x42a>
 801518c:	e659      	b.n	8014e42 <_printf_float+0xc2>
 801518e:	2301      	movs	r3, #1
 8015190:	4652      	mov	r2, sl
 8015192:	4631      	mov	r1, r6
 8015194:	4628      	mov	r0, r5
 8015196:	47b8      	blx	r7
 8015198:	3001      	adds	r0, #1
 801519a:	f43f ae52 	beq.w	8014e42 <_printf_float+0xc2>
 801519e:	f108 0801 	add.w	r8, r8, #1
 80151a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80151a4:	3b01      	subs	r3, #1
 80151a6:	4543      	cmp	r3, r8
 80151a8:	dcf1      	bgt.n	801518e <_printf_float+0x40e>
 80151aa:	464b      	mov	r3, r9
 80151ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80151b0:	e6dc      	b.n	8014f6c <_printf_float+0x1ec>
 80151b2:	f04f 0800 	mov.w	r8, #0
 80151b6:	f104 0a1a 	add.w	sl, r4, #26
 80151ba:	e7f2      	b.n	80151a2 <_printf_float+0x422>
 80151bc:	2301      	movs	r3, #1
 80151be:	4642      	mov	r2, r8
 80151c0:	e7df      	b.n	8015182 <_printf_float+0x402>
 80151c2:	2301      	movs	r3, #1
 80151c4:	464a      	mov	r2, r9
 80151c6:	4631      	mov	r1, r6
 80151c8:	4628      	mov	r0, r5
 80151ca:	47b8      	blx	r7
 80151cc:	3001      	adds	r0, #1
 80151ce:	f43f ae38 	beq.w	8014e42 <_printf_float+0xc2>
 80151d2:	f108 0801 	add.w	r8, r8, #1
 80151d6:	68e3      	ldr	r3, [r4, #12]
 80151d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80151da:	1a5b      	subs	r3, r3, r1
 80151dc:	4543      	cmp	r3, r8
 80151de:	dcf0      	bgt.n	80151c2 <_printf_float+0x442>
 80151e0:	e6fa      	b.n	8014fd8 <_printf_float+0x258>
 80151e2:	f04f 0800 	mov.w	r8, #0
 80151e6:	f104 0919 	add.w	r9, r4, #25
 80151ea:	e7f4      	b.n	80151d6 <_printf_float+0x456>

080151ec <_printf_common>:
 80151ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80151f0:	4616      	mov	r6, r2
 80151f2:	4699      	mov	r9, r3
 80151f4:	688a      	ldr	r2, [r1, #8]
 80151f6:	690b      	ldr	r3, [r1, #16]
 80151f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80151fc:	4293      	cmp	r3, r2
 80151fe:	bfb8      	it	lt
 8015200:	4613      	movlt	r3, r2
 8015202:	6033      	str	r3, [r6, #0]
 8015204:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015208:	4607      	mov	r7, r0
 801520a:	460c      	mov	r4, r1
 801520c:	b10a      	cbz	r2, 8015212 <_printf_common+0x26>
 801520e:	3301      	adds	r3, #1
 8015210:	6033      	str	r3, [r6, #0]
 8015212:	6823      	ldr	r3, [r4, #0]
 8015214:	0699      	lsls	r1, r3, #26
 8015216:	bf42      	ittt	mi
 8015218:	6833      	ldrmi	r3, [r6, #0]
 801521a:	3302      	addmi	r3, #2
 801521c:	6033      	strmi	r3, [r6, #0]
 801521e:	6825      	ldr	r5, [r4, #0]
 8015220:	f015 0506 	ands.w	r5, r5, #6
 8015224:	d106      	bne.n	8015234 <_printf_common+0x48>
 8015226:	f104 0a19 	add.w	sl, r4, #25
 801522a:	68e3      	ldr	r3, [r4, #12]
 801522c:	6832      	ldr	r2, [r6, #0]
 801522e:	1a9b      	subs	r3, r3, r2
 8015230:	42ab      	cmp	r3, r5
 8015232:	dc26      	bgt.n	8015282 <_printf_common+0x96>
 8015234:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015238:	1e13      	subs	r3, r2, #0
 801523a:	6822      	ldr	r2, [r4, #0]
 801523c:	bf18      	it	ne
 801523e:	2301      	movne	r3, #1
 8015240:	0692      	lsls	r2, r2, #26
 8015242:	d42b      	bmi.n	801529c <_printf_common+0xb0>
 8015244:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015248:	4649      	mov	r1, r9
 801524a:	4638      	mov	r0, r7
 801524c:	47c0      	blx	r8
 801524e:	3001      	adds	r0, #1
 8015250:	d01e      	beq.n	8015290 <_printf_common+0xa4>
 8015252:	6823      	ldr	r3, [r4, #0]
 8015254:	68e5      	ldr	r5, [r4, #12]
 8015256:	6832      	ldr	r2, [r6, #0]
 8015258:	f003 0306 	and.w	r3, r3, #6
 801525c:	2b04      	cmp	r3, #4
 801525e:	bf08      	it	eq
 8015260:	1aad      	subeq	r5, r5, r2
 8015262:	68a3      	ldr	r3, [r4, #8]
 8015264:	6922      	ldr	r2, [r4, #16]
 8015266:	bf0c      	ite	eq
 8015268:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801526c:	2500      	movne	r5, #0
 801526e:	4293      	cmp	r3, r2
 8015270:	bfc4      	itt	gt
 8015272:	1a9b      	subgt	r3, r3, r2
 8015274:	18ed      	addgt	r5, r5, r3
 8015276:	2600      	movs	r6, #0
 8015278:	341a      	adds	r4, #26
 801527a:	42b5      	cmp	r5, r6
 801527c:	d11a      	bne.n	80152b4 <_printf_common+0xc8>
 801527e:	2000      	movs	r0, #0
 8015280:	e008      	b.n	8015294 <_printf_common+0xa8>
 8015282:	2301      	movs	r3, #1
 8015284:	4652      	mov	r2, sl
 8015286:	4649      	mov	r1, r9
 8015288:	4638      	mov	r0, r7
 801528a:	47c0      	blx	r8
 801528c:	3001      	adds	r0, #1
 801528e:	d103      	bne.n	8015298 <_printf_common+0xac>
 8015290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015298:	3501      	adds	r5, #1
 801529a:	e7c6      	b.n	801522a <_printf_common+0x3e>
 801529c:	18e1      	adds	r1, r4, r3
 801529e:	1c5a      	adds	r2, r3, #1
 80152a0:	2030      	movs	r0, #48	; 0x30
 80152a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80152a6:	4422      	add	r2, r4
 80152a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80152ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80152b0:	3302      	adds	r3, #2
 80152b2:	e7c7      	b.n	8015244 <_printf_common+0x58>
 80152b4:	2301      	movs	r3, #1
 80152b6:	4622      	mov	r2, r4
 80152b8:	4649      	mov	r1, r9
 80152ba:	4638      	mov	r0, r7
 80152bc:	47c0      	blx	r8
 80152be:	3001      	adds	r0, #1
 80152c0:	d0e6      	beq.n	8015290 <_printf_common+0xa4>
 80152c2:	3601      	adds	r6, #1
 80152c4:	e7d9      	b.n	801527a <_printf_common+0x8e>
	...

080152c8 <_printf_i>:
 80152c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80152cc:	7e0f      	ldrb	r7, [r1, #24]
 80152ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80152d0:	2f78      	cmp	r7, #120	; 0x78
 80152d2:	4691      	mov	r9, r2
 80152d4:	4680      	mov	r8, r0
 80152d6:	460c      	mov	r4, r1
 80152d8:	469a      	mov	sl, r3
 80152da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80152de:	d807      	bhi.n	80152f0 <_printf_i+0x28>
 80152e0:	2f62      	cmp	r7, #98	; 0x62
 80152e2:	d80a      	bhi.n	80152fa <_printf_i+0x32>
 80152e4:	2f00      	cmp	r7, #0
 80152e6:	f000 80d8 	beq.w	801549a <_printf_i+0x1d2>
 80152ea:	2f58      	cmp	r7, #88	; 0x58
 80152ec:	f000 80a3 	beq.w	8015436 <_printf_i+0x16e>
 80152f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80152f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80152f8:	e03a      	b.n	8015370 <_printf_i+0xa8>
 80152fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80152fe:	2b15      	cmp	r3, #21
 8015300:	d8f6      	bhi.n	80152f0 <_printf_i+0x28>
 8015302:	a101      	add	r1, pc, #4	; (adr r1, 8015308 <_printf_i+0x40>)
 8015304:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015308:	08015361 	.word	0x08015361
 801530c:	08015375 	.word	0x08015375
 8015310:	080152f1 	.word	0x080152f1
 8015314:	080152f1 	.word	0x080152f1
 8015318:	080152f1 	.word	0x080152f1
 801531c:	080152f1 	.word	0x080152f1
 8015320:	08015375 	.word	0x08015375
 8015324:	080152f1 	.word	0x080152f1
 8015328:	080152f1 	.word	0x080152f1
 801532c:	080152f1 	.word	0x080152f1
 8015330:	080152f1 	.word	0x080152f1
 8015334:	08015481 	.word	0x08015481
 8015338:	080153a5 	.word	0x080153a5
 801533c:	08015463 	.word	0x08015463
 8015340:	080152f1 	.word	0x080152f1
 8015344:	080152f1 	.word	0x080152f1
 8015348:	080154a3 	.word	0x080154a3
 801534c:	080152f1 	.word	0x080152f1
 8015350:	080153a5 	.word	0x080153a5
 8015354:	080152f1 	.word	0x080152f1
 8015358:	080152f1 	.word	0x080152f1
 801535c:	0801546b 	.word	0x0801546b
 8015360:	682b      	ldr	r3, [r5, #0]
 8015362:	1d1a      	adds	r2, r3, #4
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	602a      	str	r2, [r5, #0]
 8015368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801536c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015370:	2301      	movs	r3, #1
 8015372:	e0a3      	b.n	80154bc <_printf_i+0x1f4>
 8015374:	6820      	ldr	r0, [r4, #0]
 8015376:	6829      	ldr	r1, [r5, #0]
 8015378:	0606      	lsls	r6, r0, #24
 801537a:	f101 0304 	add.w	r3, r1, #4
 801537e:	d50a      	bpl.n	8015396 <_printf_i+0xce>
 8015380:	680e      	ldr	r6, [r1, #0]
 8015382:	602b      	str	r3, [r5, #0]
 8015384:	2e00      	cmp	r6, #0
 8015386:	da03      	bge.n	8015390 <_printf_i+0xc8>
 8015388:	232d      	movs	r3, #45	; 0x2d
 801538a:	4276      	negs	r6, r6
 801538c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015390:	485e      	ldr	r0, [pc, #376]	; (801550c <_printf_i+0x244>)
 8015392:	230a      	movs	r3, #10
 8015394:	e019      	b.n	80153ca <_printf_i+0x102>
 8015396:	680e      	ldr	r6, [r1, #0]
 8015398:	602b      	str	r3, [r5, #0]
 801539a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801539e:	bf18      	it	ne
 80153a0:	b236      	sxthne	r6, r6
 80153a2:	e7ef      	b.n	8015384 <_printf_i+0xbc>
 80153a4:	682b      	ldr	r3, [r5, #0]
 80153a6:	6820      	ldr	r0, [r4, #0]
 80153a8:	1d19      	adds	r1, r3, #4
 80153aa:	6029      	str	r1, [r5, #0]
 80153ac:	0601      	lsls	r1, r0, #24
 80153ae:	d501      	bpl.n	80153b4 <_printf_i+0xec>
 80153b0:	681e      	ldr	r6, [r3, #0]
 80153b2:	e002      	b.n	80153ba <_printf_i+0xf2>
 80153b4:	0646      	lsls	r6, r0, #25
 80153b6:	d5fb      	bpl.n	80153b0 <_printf_i+0xe8>
 80153b8:	881e      	ldrh	r6, [r3, #0]
 80153ba:	4854      	ldr	r0, [pc, #336]	; (801550c <_printf_i+0x244>)
 80153bc:	2f6f      	cmp	r7, #111	; 0x6f
 80153be:	bf0c      	ite	eq
 80153c0:	2308      	moveq	r3, #8
 80153c2:	230a      	movne	r3, #10
 80153c4:	2100      	movs	r1, #0
 80153c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80153ca:	6865      	ldr	r5, [r4, #4]
 80153cc:	60a5      	str	r5, [r4, #8]
 80153ce:	2d00      	cmp	r5, #0
 80153d0:	bfa2      	ittt	ge
 80153d2:	6821      	ldrge	r1, [r4, #0]
 80153d4:	f021 0104 	bicge.w	r1, r1, #4
 80153d8:	6021      	strge	r1, [r4, #0]
 80153da:	b90e      	cbnz	r6, 80153e0 <_printf_i+0x118>
 80153dc:	2d00      	cmp	r5, #0
 80153de:	d04d      	beq.n	801547c <_printf_i+0x1b4>
 80153e0:	4615      	mov	r5, r2
 80153e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80153e6:	fb03 6711 	mls	r7, r3, r1, r6
 80153ea:	5dc7      	ldrb	r7, [r0, r7]
 80153ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80153f0:	4637      	mov	r7, r6
 80153f2:	42bb      	cmp	r3, r7
 80153f4:	460e      	mov	r6, r1
 80153f6:	d9f4      	bls.n	80153e2 <_printf_i+0x11a>
 80153f8:	2b08      	cmp	r3, #8
 80153fa:	d10b      	bne.n	8015414 <_printf_i+0x14c>
 80153fc:	6823      	ldr	r3, [r4, #0]
 80153fe:	07de      	lsls	r6, r3, #31
 8015400:	d508      	bpl.n	8015414 <_printf_i+0x14c>
 8015402:	6923      	ldr	r3, [r4, #16]
 8015404:	6861      	ldr	r1, [r4, #4]
 8015406:	4299      	cmp	r1, r3
 8015408:	bfde      	ittt	le
 801540a:	2330      	movle	r3, #48	; 0x30
 801540c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015410:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8015414:	1b52      	subs	r2, r2, r5
 8015416:	6122      	str	r2, [r4, #16]
 8015418:	f8cd a000 	str.w	sl, [sp]
 801541c:	464b      	mov	r3, r9
 801541e:	aa03      	add	r2, sp, #12
 8015420:	4621      	mov	r1, r4
 8015422:	4640      	mov	r0, r8
 8015424:	f7ff fee2 	bl	80151ec <_printf_common>
 8015428:	3001      	adds	r0, #1
 801542a:	d14c      	bne.n	80154c6 <_printf_i+0x1fe>
 801542c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015430:	b004      	add	sp, #16
 8015432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015436:	4835      	ldr	r0, [pc, #212]	; (801550c <_printf_i+0x244>)
 8015438:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801543c:	6829      	ldr	r1, [r5, #0]
 801543e:	6823      	ldr	r3, [r4, #0]
 8015440:	f851 6b04 	ldr.w	r6, [r1], #4
 8015444:	6029      	str	r1, [r5, #0]
 8015446:	061d      	lsls	r5, r3, #24
 8015448:	d514      	bpl.n	8015474 <_printf_i+0x1ac>
 801544a:	07df      	lsls	r7, r3, #31
 801544c:	bf44      	itt	mi
 801544e:	f043 0320 	orrmi.w	r3, r3, #32
 8015452:	6023      	strmi	r3, [r4, #0]
 8015454:	b91e      	cbnz	r6, 801545e <_printf_i+0x196>
 8015456:	6823      	ldr	r3, [r4, #0]
 8015458:	f023 0320 	bic.w	r3, r3, #32
 801545c:	6023      	str	r3, [r4, #0]
 801545e:	2310      	movs	r3, #16
 8015460:	e7b0      	b.n	80153c4 <_printf_i+0xfc>
 8015462:	6823      	ldr	r3, [r4, #0]
 8015464:	f043 0320 	orr.w	r3, r3, #32
 8015468:	6023      	str	r3, [r4, #0]
 801546a:	2378      	movs	r3, #120	; 0x78
 801546c:	4828      	ldr	r0, [pc, #160]	; (8015510 <_printf_i+0x248>)
 801546e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015472:	e7e3      	b.n	801543c <_printf_i+0x174>
 8015474:	0659      	lsls	r1, r3, #25
 8015476:	bf48      	it	mi
 8015478:	b2b6      	uxthmi	r6, r6
 801547a:	e7e6      	b.n	801544a <_printf_i+0x182>
 801547c:	4615      	mov	r5, r2
 801547e:	e7bb      	b.n	80153f8 <_printf_i+0x130>
 8015480:	682b      	ldr	r3, [r5, #0]
 8015482:	6826      	ldr	r6, [r4, #0]
 8015484:	6961      	ldr	r1, [r4, #20]
 8015486:	1d18      	adds	r0, r3, #4
 8015488:	6028      	str	r0, [r5, #0]
 801548a:	0635      	lsls	r5, r6, #24
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	d501      	bpl.n	8015494 <_printf_i+0x1cc>
 8015490:	6019      	str	r1, [r3, #0]
 8015492:	e002      	b.n	801549a <_printf_i+0x1d2>
 8015494:	0670      	lsls	r0, r6, #25
 8015496:	d5fb      	bpl.n	8015490 <_printf_i+0x1c8>
 8015498:	8019      	strh	r1, [r3, #0]
 801549a:	2300      	movs	r3, #0
 801549c:	6123      	str	r3, [r4, #16]
 801549e:	4615      	mov	r5, r2
 80154a0:	e7ba      	b.n	8015418 <_printf_i+0x150>
 80154a2:	682b      	ldr	r3, [r5, #0]
 80154a4:	1d1a      	adds	r2, r3, #4
 80154a6:	602a      	str	r2, [r5, #0]
 80154a8:	681d      	ldr	r5, [r3, #0]
 80154aa:	6862      	ldr	r2, [r4, #4]
 80154ac:	2100      	movs	r1, #0
 80154ae:	4628      	mov	r0, r5
 80154b0:	f7ea fec6 	bl	8000240 <memchr>
 80154b4:	b108      	cbz	r0, 80154ba <_printf_i+0x1f2>
 80154b6:	1b40      	subs	r0, r0, r5
 80154b8:	6060      	str	r0, [r4, #4]
 80154ba:	6863      	ldr	r3, [r4, #4]
 80154bc:	6123      	str	r3, [r4, #16]
 80154be:	2300      	movs	r3, #0
 80154c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80154c4:	e7a8      	b.n	8015418 <_printf_i+0x150>
 80154c6:	6923      	ldr	r3, [r4, #16]
 80154c8:	462a      	mov	r2, r5
 80154ca:	4649      	mov	r1, r9
 80154cc:	4640      	mov	r0, r8
 80154ce:	47d0      	blx	sl
 80154d0:	3001      	adds	r0, #1
 80154d2:	d0ab      	beq.n	801542c <_printf_i+0x164>
 80154d4:	6823      	ldr	r3, [r4, #0]
 80154d6:	079b      	lsls	r3, r3, #30
 80154d8:	d413      	bmi.n	8015502 <_printf_i+0x23a>
 80154da:	68e0      	ldr	r0, [r4, #12]
 80154dc:	9b03      	ldr	r3, [sp, #12]
 80154de:	4298      	cmp	r0, r3
 80154e0:	bfb8      	it	lt
 80154e2:	4618      	movlt	r0, r3
 80154e4:	e7a4      	b.n	8015430 <_printf_i+0x168>
 80154e6:	2301      	movs	r3, #1
 80154e8:	4632      	mov	r2, r6
 80154ea:	4649      	mov	r1, r9
 80154ec:	4640      	mov	r0, r8
 80154ee:	47d0      	blx	sl
 80154f0:	3001      	adds	r0, #1
 80154f2:	d09b      	beq.n	801542c <_printf_i+0x164>
 80154f4:	3501      	adds	r5, #1
 80154f6:	68e3      	ldr	r3, [r4, #12]
 80154f8:	9903      	ldr	r1, [sp, #12]
 80154fa:	1a5b      	subs	r3, r3, r1
 80154fc:	42ab      	cmp	r3, r5
 80154fe:	dcf2      	bgt.n	80154e6 <_printf_i+0x21e>
 8015500:	e7eb      	b.n	80154da <_printf_i+0x212>
 8015502:	2500      	movs	r5, #0
 8015504:	f104 0619 	add.w	r6, r4, #25
 8015508:	e7f5      	b.n	80154f6 <_printf_i+0x22e>
 801550a:	bf00      	nop
 801550c:	0801647d 	.word	0x0801647d
 8015510:	0801648e 	.word	0x0801648e

08015514 <_read_r>:
 8015514:	b538      	push	{r3, r4, r5, lr}
 8015516:	4d07      	ldr	r5, [pc, #28]	; (8015534 <_read_r+0x20>)
 8015518:	4604      	mov	r4, r0
 801551a:	4608      	mov	r0, r1
 801551c:	4611      	mov	r1, r2
 801551e:	2200      	movs	r2, #0
 8015520:	602a      	str	r2, [r5, #0]
 8015522:	461a      	mov	r2, r3
 8015524:	f000 faea 	bl	8015afc <_read>
 8015528:	1c43      	adds	r3, r0, #1
 801552a:	d102      	bne.n	8015532 <_read_r+0x1e>
 801552c:	682b      	ldr	r3, [r5, #0]
 801552e:	b103      	cbz	r3, 8015532 <_read_r+0x1e>
 8015530:	6023      	str	r3, [r4, #0]
 8015532:	bd38      	pop	{r3, r4, r5, pc}
 8015534:	20000610 	.word	0x20000610

08015538 <_sbrk_r>:
 8015538:	b538      	push	{r3, r4, r5, lr}
 801553a:	4d06      	ldr	r5, [pc, #24]	; (8015554 <_sbrk_r+0x1c>)
 801553c:	2300      	movs	r3, #0
 801553e:	4604      	mov	r4, r0
 8015540:	4608      	mov	r0, r1
 8015542:	602b      	str	r3, [r5, #0]
 8015544:	f7ec ff38 	bl	80023b8 <_sbrk>
 8015548:	1c43      	adds	r3, r0, #1
 801554a:	d102      	bne.n	8015552 <_sbrk_r+0x1a>
 801554c:	682b      	ldr	r3, [r5, #0]
 801554e:	b103      	cbz	r3, 8015552 <_sbrk_r+0x1a>
 8015550:	6023      	str	r3, [r4, #0]
 8015552:	bd38      	pop	{r3, r4, r5, pc}
 8015554:	20000610 	.word	0x20000610

08015558 <_raise_r>:
 8015558:	291f      	cmp	r1, #31
 801555a:	b538      	push	{r3, r4, r5, lr}
 801555c:	4604      	mov	r4, r0
 801555e:	460d      	mov	r5, r1
 8015560:	d904      	bls.n	801556c <_raise_r+0x14>
 8015562:	2316      	movs	r3, #22
 8015564:	6003      	str	r3, [r0, #0]
 8015566:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801556a:	bd38      	pop	{r3, r4, r5, pc}
 801556c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801556e:	b112      	cbz	r2, 8015576 <_raise_r+0x1e>
 8015570:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015574:	b94b      	cbnz	r3, 801558a <_raise_r+0x32>
 8015576:	4620      	mov	r0, r4
 8015578:	f000 f830 	bl	80155dc <_getpid_r>
 801557c:	462a      	mov	r2, r5
 801557e:	4601      	mov	r1, r0
 8015580:	4620      	mov	r0, r4
 8015582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015586:	f000 b817 	b.w	80155b8 <_kill_r>
 801558a:	2b01      	cmp	r3, #1
 801558c:	d00a      	beq.n	80155a4 <_raise_r+0x4c>
 801558e:	1c59      	adds	r1, r3, #1
 8015590:	d103      	bne.n	801559a <_raise_r+0x42>
 8015592:	2316      	movs	r3, #22
 8015594:	6003      	str	r3, [r0, #0]
 8015596:	2001      	movs	r0, #1
 8015598:	e7e7      	b.n	801556a <_raise_r+0x12>
 801559a:	2400      	movs	r4, #0
 801559c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80155a0:	4628      	mov	r0, r5
 80155a2:	4798      	blx	r3
 80155a4:	2000      	movs	r0, #0
 80155a6:	e7e0      	b.n	801556a <_raise_r+0x12>

080155a8 <raise>:
 80155a8:	4b02      	ldr	r3, [pc, #8]	; (80155b4 <raise+0xc>)
 80155aa:	4601      	mov	r1, r0
 80155ac:	6818      	ldr	r0, [r3, #0]
 80155ae:	f7ff bfd3 	b.w	8015558 <_raise_r>
 80155b2:	bf00      	nop
 80155b4:	20000060 	.word	0x20000060

080155b8 <_kill_r>:
 80155b8:	b538      	push	{r3, r4, r5, lr}
 80155ba:	4d07      	ldr	r5, [pc, #28]	; (80155d8 <_kill_r+0x20>)
 80155bc:	2300      	movs	r3, #0
 80155be:	4604      	mov	r4, r0
 80155c0:	4608      	mov	r0, r1
 80155c2:	4611      	mov	r1, r2
 80155c4:	602b      	str	r3, [r5, #0]
 80155c6:	f7ec fea9 	bl	800231c <_kill>
 80155ca:	1c43      	adds	r3, r0, #1
 80155cc:	d102      	bne.n	80155d4 <_kill_r+0x1c>
 80155ce:	682b      	ldr	r3, [r5, #0]
 80155d0:	b103      	cbz	r3, 80155d4 <_kill_r+0x1c>
 80155d2:	6023      	str	r3, [r4, #0]
 80155d4:	bd38      	pop	{r3, r4, r5, pc}
 80155d6:	bf00      	nop
 80155d8:	20000610 	.word	0x20000610

080155dc <_getpid_r>:
 80155dc:	f7ec be96 	b.w	800230c <_getpid>

080155e0 <siprintf>:
 80155e0:	b40e      	push	{r1, r2, r3}
 80155e2:	b500      	push	{lr}
 80155e4:	b09c      	sub	sp, #112	; 0x70
 80155e6:	ab1d      	add	r3, sp, #116	; 0x74
 80155e8:	9002      	str	r0, [sp, #8]
 80155ea:	9006      	str	r0, [sp, #24]
 80155ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80155f0:	4809      	ldr	r0, [pc, #36]	; (8015618 <siprintf+0x38>)
 80155f2:	9107      	str	r1, [sp, #28]
 80155f4:	9104      	str	r1, [sp, #16]
 80155f6:	4909      	ldr	r1, [pc, #36]	; (801561c <siprintf+0x3c>)
 80155f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80155fc:	9105      	str	r1, [sp, #20]
 80155fe:	6800      	ldr	r0, [r0, #0]
 8015600:	9301      	str	r3, [sp, #4]
 8015602:	a902      	add	r1, sp, #8
 8015604:	f7ff f8c2 	bl	801478c <_svfiprintf_r>
 8015608:	9b02      	ldr	r3, [sp, #8]
 801560a:	2200      	movs	r2, #0
 801560c:	701a      	strb	r2, [r3, #0]
 801560e:	b01c      	add	sp, #112	; 0x70
 8015610:	f85d eb04 	ldr.w	lr, [sp], #4
 8015614:	b003      	add	sp, #12
 8015616:	4770      	bx	lr
 8015618:	20000060 	.word	0x20000060
 801561c:	ffff0208 	.word	0xffff0208

08015620 <__stack_chk_init>:
 8015620:	4b03      	ldr	r3, [pc, #12]	; (8015630 <__stack_chk_init+0x10>)
 8015622:	681a      	ldr	r2, [r3, #0]
 8015624:	b912      	cbnz	r2, 801562c <__stack_chk_init+0xc>
 8015626:	f5a2 0276 	sub.w	r2, r2, #16121856	; 0xf60000
 801562a:	601a      	str	r2, [r3, #0]
 801562c:	4770      	bx	lr
 801562e:	bf00      	nop
 8015630:	20000614 	.word	0x20000614

08015634 <__sread>:
 8015634:	b510      	push	{r4, lr}
 8015636:	460c      	mov	r4, r1
 8015638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801563c:	f7ff ff6a 	bl	8015514 <_read_r>
 8015640:	2800      	cmp	r0, #0
 8015642:	bfab      	itete	ge
 8015644:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015646:	89a3      	ldrhlt	r3, [r4, #12]
 8015648:	181b      	addge	r3, r3, r0
 801564a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801564e:	bfac      	ite	ge
 8015650:	6563      	strge	r3, [r4, #84]	; 0x54
 8015652:	81a3      	strhlt	r3, [r4, #12]
 8015654:	bd10      	pop	{r4, pc}

08015656 <__swrite>:
 8015656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801565a:	461f      	mov	r7, r3
 801565c:	898b      	ldrh	r3, [r1, #12]
 801565e:	05db      	lsls	r3, r3, #23
 8015660:	4605      	mov	r5, r0
 8015662:	460c      	mov	r4, r1
 8015664:	4616      	mov	r6, r2
 8015666:	d505      	bpl.n	8015674 <__swrite+0x1e>
 8015668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801566c:	2302      	movs	r3, #2
 801566e:	2200      	movs	r2, #0
 8015670:	f7fe faa2 	bl	8013bb8 <_lseek_r>
 8015674:	89a3      	ldrh	r3, [r4, #12]
 8015676:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801567a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801567e:	81a3      	strh	r3, [r4, #12]
 8015680:	4632      	mov	r2, r6
 8015682:	463b      	mov	r3, r7
 8015684:	4628      	mov	r0, r5
 8015686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801568a:	f000 b877 	b.w	801577c <_write_r>

0801568e <__sseek>:
 801568e:	b510      	push	{r4, lr}
 8015690:	460c      	mov	r4, r1
 8015692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015696:	f7fe fa8f 	bl	8013bb8 <_lseek_r>
 801569a:	1c43      	adds	r3, r0, #1
 801569c:	89a3      	ldrh	r3, [r4, #12]
 801569e:	bf15      	itete	ne
 80156a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80156a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80156a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80156aa:	81a3      	strheq	r3, [r4, #12]
 80156ac:	bf18      	it	ne
 80156ae:	81a3      	strhne	r3, [r4, #12]
 80156b0:	bd10      	pop	{r4, pc}

080156b2 <__sclose>:
 80156b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80156b6:	f7fd b9c3 	b.w	8012a40 <_close_r>
	...

080156bc <__swbuf_r>:
 80156bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156be:	460e      	mov	r6, r1
 80156c0:	4614      	mov	r4, r2
 80156c2:	4605      	mov	r5, r0
 80156c4:	b118      	cbz	r0, 80156ce <__swbuf_r+0x12>
 80156c6:	6983      	ldr	r3, [r0, #24]
 80156c8:	b90b      	cbnz	r3, 80156ce <__swbuf_r+0x12>
 80156ca:	f7fe f963 	bl	8013994 <__sinit>
 80156ce:	4b21      	ldr	r3, [pc, #132]	; (8015754 <__swbuf_r+0x98>)
 80156d0:	429c      	cmp	r4, r3
 80156d2:	d12b      	bne.n	801572c <__swbuf_r+0x70>
 80156d4:	686c      	ldr	r4, [r5, #4]
 80156d6:	69a3      	ldr	r3, [r4, #24]
 80156d8:	60a3      	str	r3, [r4, #8]
 80156da:	89a3      	ldrh	r3, [r4, #12]
 80156dc:	071a      	lsls	r2, r3, #28
 80156de:	d52f      	bpl.n	8015740 <__swbuf_r+0x84>
 80156e0:	6923      	ldr	r3, [r4, #16]
 80156e2:	b36b      	cbz	r3, 8015740 <__swbuf_r+0x84>
 80156e4:	6923      	ldr	r3, [r4, #16]
 80156e6:	6820      	ldr	r0, [r4, #0]
 80156e8:	1ac0      	subs	r0, r0, r3
 80156ea:	6963      	ldr	r3, [r4, #20]
 80156ec:	b2f6      	uxtb	r6, r6
 80156ee:	4283      	cmp	r3, r0
 80156f0:	4637      	mov	r7, r6
 80156f2:	dc04      	bgt.n	80156fe <__swbuf_r+0x42>
 80156f4:	4621      	mov	r1, r4
 80156f6:	4628      	mov	r0, r5
 80156f8:	f7fe f8b8 	bl	801386c <_fflush_r>
 80156fc:	bb30      	cbnz	r0, 801574c <__swbuf_r+0x90>
 80156fe:	68a3      	ldr	r3, [r4, #8]
 8015700:	3b01      	subs	r3, #1
 8015702:	60a3      	str	r3, [r4, #8]
 8015704:	6823      	ldr	r3, [r4, #0]
 8015706:	1c5a      	adds	r2, r3, #1
 8015708:	6022      	str	r2, [r4, #0]
 801570a:	701e      	strb	r6, [r3, #0]
 801570c:	6963      	ldr	r3, [r4, #20]
 801570e:	3001      	adds	r0, #1
 8015710:	4283      	cmp	r3, r0
 8015712:	d004      	beq.n	801571e <__swbuf_r+0x62>
 8015714:	89a3      	ldrh	r3, [r4, #12]
 8015716:	07db      	lsls	r3, r3, #31
 8015718:	d506      	bpl.n	8015728 <__swbuf_r+0x6c>
 801571a:	2e0a      	cmp	r6, #10
 801571c:	d104      	bne.n	8015728 <__swbuf_r+0x6c>
 801571e:	4621      	mov	r1, r4
 8015720:	4628      	mov	r0, r5
 8015722:	f7fe f8a3 	bl	801386c <_fflush_r>
 8015726:	b988      	cbnz	r0, 801574c <__swbuf_r+0x90>
 8015728:	4638      	mov	r0, r7
 801572a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801572c:	4b0a      	ldr	r3, [pc, #40]	; (8015758 <__swbuf_r+0x9c>)
 801572e:	429c      	cmp	r4, r3
 8015730:	d101      	bne.n	8015736 <__swbuf_r+0x7a>
 8015732:	68ac      	ldr	r4, [r5, #8]
 8015734:	e7cf      	b.n	80156d6 <__swbuf_r+0x1a>
 8015736:	4b09      	ldr	r3, [pc, #36]	; (801575c <__swbuf_r+0xa0>)
 8015738:	429c      	cmp	r4, r3
 801573a:	bf08      	it	eq
 801573c:	68ec      	ldreq	r4, [r5, #12]
 801573e:	e7ca      	b.n	80156d6 <__swbuf_r+0x1a>
 8015740:	4621      	mov	r1, r4
 8015742:	4628      	mov	r0, r5
 8015744:	f000 f82c 	bl	80157a0 <__swsetup_r>
 8015748:	2800      	cmp	r0, #0
 801574a:	d0cb      	beq.n	80156e4 <__swbuf_r+0x28>
 801574c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015750:	e7ea      	b.n	8015728 <__swbuf_r+0x6c>
 8015752:	bf00      	nop
 8015754:	080162b4 	.word	0x080162b4
 8015758:	080162d4 	.word	0x080162d4
 801575c:	08016294 	.word	0x08016294

08015760 <__ascii_wctomb>:
 8015760:	b149      	cbz	r1, 8015776 <__ascii_wctomb+0x16>
 8015762:	2aff      	cmp	r2, #255	; 0xff
 8015764:	bf85      	ittet	hi
 8015766:	238a      	movhi	r3, #138	; 0x8a
 8015768:	6003      	strhi	r3, [r0, #0]
 801576a:	700a      	strbls	r2, [r1, #0]
 801576c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8015770:	bf98      	it	ls
 8015772:	2001      	movls	r0, #1
 8015774:	4770      	bx	lr
 8015776:	4608      	mov	r0, r1
 8015778:	4770      	bx	lr
	...

0801577c <_write_r>:
 801577c:	b538      	push	{r3, r4, r5, lr}
 801577e:	4d07      	ldr	r5, [pc, #28]	; (801579c <_write_r+0x20>)
 8015780:	4604      	mov	r4, r0
 8015782:	4608      	mov	r0, r1
 8015784:	4611      	mov	r1, r2
 8015786:	2200      	movs	r2, #0
 8015788:	602a      	str	r2, [r5, #0]
 801578a:	461a      	mov	r2, r3
 801578c:	f000 f9be 	bl	8015b0c <_write>
 8015790:	1c43      	adds	r3, r0, #1
 8015792:	d102      	bne.n	801579a <_write_r+0x1e>
 8015794:	682b      	ldr	r3, [r5, #0]
 8015796:	b103      	cbz	r3, 801579a <_write_r+0x1e>
 8015798:	6023      	str	r3, [r4, #0]
 801579a:	bd38      	pop	{r3, r4, r5, pc}
 801579c:	20000610 	.word	0x20000610

080157a0 <__swsetup_r>:
 80157a0:	4b32      	ldr	r3, [pc, #200]	; (801586c <__swsetup_r+0xcc>)
 80157a2:	b570      	push	{r4, r5, r6, lr}
 80157a4:	681d      	ldr	r5, [r3, #0]
 80157a6:	4606      	mov	r6, r0
 80157a8:	460c      	mov	r4, r1
 80157aa:	b125      	cbz	r5, 80157b6 <__swsetup_r+0x16>
 80157ac:	69ab      	ldr	r3, [r5, #24]
 80157ae:	b913      	cbnz	r3, 80157b6 <__swsetup_r+0x16>
 80157b0:	4628      	mov	r0, r5
 80157b2:	f7fe f8ef 	bl	8013994 <__sinit>
 80157b6:	4b2e      	ldr	r3, [pc, #184]	; (8015870 <__swsetup_r+0xd0>)
 80157b8:	429c      	cmp	r4, r3
 80157ba:	d10f      	bne.n	80157dc <__swsetup_r+0x3c>
 80157bc:	686c      	ldr	r4, [r5, #4]
 80157be:	89a3      	ldrh	r3, [r4, #12]
 80157c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80157c4:	0719      	lsls	r1, r3, #28
 80157c6:	d42c      	bmi.n	8015822 <__swsetup_r+0x82>
 80157c8:	06dd      	lsls	r5, r3, #27
 80157ca:	d411      	bmi.n	80157f0 <__swsetup_r+0x50>
 80157cc:	2309      	movs	r3, #9
 80157ce:	6033      	str	r3, [r6, #0]
 80157d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80157d4:	81a3      	strh	r3, [r4, #12]
 80157d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80157da:	e03e      	b.n	801585a <__swsetup_r+0xba>
 80157dc:	4b25      	ldr	r3, [pc, #148]	; (8015874 <__swsetup_r+0xd4>)
 80157de:	429c      	cmp	r4, r3
 80157e0:	d101      	bne.n	80157e6 <__swsetup_r+0x46>
 80157e2:	68ac      	ldr	r4, [r5, #8]
 80157e4:	e7eb      	b.n	80157be <__swsetup_r+0x1e>
 80157e6:	4b24      	ldr	r3, [pc, #144]	; (8015878 <__swsetup_r+0xd8>)
 80157e8:	429c      	cmp	r4, r3
 80157ea:	bf08      	it	eq
 80157ec:	68ec      	ldreq	r4, [r5, #12]
 80157ee:	e7e6      	b.n	80157be <__swsetup_r+0x1e>
 80157f0:	0758      	lsls	r0, r3, #29
 80157f2:	d512      	bpl.n	801581a <__swsetup_r+0x7a>
 80157f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80157f6:	b141      	cbz	r1, 801580a <__swsetup_r+0x6a>
 80157f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80157fc:	4299      	cmp	r1, r3
 80157fe:	d002      	beq.n	8015806 <__swsetup_r+0x66>
 8015800:	4630      	mov	r0, r6
 8015802:	f7fe fe51 	bl	80144a8 <_free_r>
 8015806:	2300      	movs	r3, #0
 8015808:	6363      	str	r3, [r4, #52]	; 0x34
 801580a:	89a3      	ldrh	r3, [r4, #12]
 801580c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015810:	81a3      	strh	r3, [r4, #12]
 8015812:	2300      	movs	r3, #0
 8015814:	6063      	str	r3, [r4, #4]
 8015816:	6923      	ldr	r3, [r4, #16]
 8015818:	6023      	str	r3, [r4, #0]
 801581a:	89a3      	ldrh	r3, [r4, #12]
 801581c:	f043 0308 	orr.w	r3, r3, #8
 8015820:	81a3      	strh	r3, [r4, #12]
 8015822:	6923      	ldr	r3, [r4, #16]
 8015824:	b94b      	cbnz	r3, 801583a <__swsetup_r+0x9a>
 8015826:	89a3      	ldrh	r3, [r4, #12]
 8015828:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801582c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015830:	d003      	beq.n	801583a <__swsetup_r+0x9a>
 8015832:	4621      	mov	r1, r4
 8015834:	4630      	mov	r0, r6
 8015836:	f7fe f9f7 	bl	8013c28 <__smakebuf_r>
 801583a:	89a0      	ldrh	r0, [r4, #12]
 801583c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015840:	f010 0301 	ands.w	r3, r0, #1
 8015844:	d00a      	beq.n	801585c <__swsetup_r+0xbc>
 8015846:	2300      	movs	r3, #0
 8015848:	60a3      	str	r3, [r4, #8]
 801584a:	6963      	ldr	r3, [r4, #20]
 801584c:	425b      	negs	r3, r3
 801584e:	61a3      	str	r3, [r4, #24]
 8015850:	6923      	ldr	r3, [r4, #16]
 8015852:	b943      	cbnz	r3, 8015866 <__swsetup_r+0xc6>
 8015854:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015858:	d1ba      	bne.n	80157d0 <__swsetup_r+0x30>
 801585a:	bd70      	pop	{r4, r5, r6, pc}
 801585c:	0781      	lsls	r1, r0, #30
 801585e:	bf58      	it	pl
 8015860:	6963      	ldrpl	r3, [r4, #20]
 8015862:	60a3      	str	r3, [r4, #8]
 8015864:	e7f4      	b.n	8015850 <__swsetup_r+0xb0>
 8015866:	2000      	movs	r0, #0
 8015868:	e7f7      	b.n	801585a <__swsetup_r+0xba>
 801586a:	bf00      	nop
 801586c:	20000060 	.word	0x20000060
 8015870:	080162b4 	.word	0x080162b4
 8015874:	080162d4 	.word	0x080162d4
 8015878:	08016294 	.word	0x08016294

0801587c <__ieee754_fmod>:
 801587c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015880:	ec53 2b11 	vmov	r2, r3, d1
 8015884:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8015888:	ea5e 0402 	orrs.w	r4, lr, r2
 801588c:	ec51 0b10 	vmov	r0, r1, d0
 8015890:	ee11 7a10 	vmov	r7, s2
 8015894:	ee11 ca10 	vmov	ip, s2
 8015898:	461e      	mov	r6, r3
 801589a:	d00d      	beq.n	80158b8 <__ieee754_fmod+0x3c>
 801589c:	4c7a      	ldr	r4, [pc, #488]	; (8015a88 <__ieee754_fmod+0x20c>)
 801589e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 80158a2:	45a0      	cmp	r8, r4
 80158a4:	4689      	mov	r9, r1
 80158a6:	dc07      	bgt.n	80158b8 <__ieee754_fmod+0x3c>
 80158a8:	4254      	negs	r4, r2
 80158aa:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 8015a94 <__ieee754_fmod+0x218>
 80158ae:	4314      	orrs	r4, r2
 80158b0:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 80158b4:	455c      	cmp	r4, fp
 80158b6:	d909      	bls.n	80158cc <__ieee754_fmod+0x50>
 80158b8:	f7ea fed8 	bl	800066c <__aeabi_dmul>
 80158bc:	4602      	mov	r2, r0
 80158be:	460b      	mov	r3, r1
 80158c0:	f7ea fffe 	bl	80008c0 <__aeabi_ddiv>
 80158c4:	ec41 0b10 	vmov	d0, r0, r1
 80158c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158cc:	45f0      	cmp	r8, lr
 80158ce:	ee10 aa10 	vmov	sl, s0
 80158d2:	ee10 4a10 	vmov	r4, s0
 80158d6:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80158da:	dc09      	bgt.n	80158f0 <__ieee754_fmod+0x74>
 80158dc:	dbf2      	blt.n	80158c4 <__ieee754_fmod+0x48>
 80158de:	4290      	cmp	r0, r2
 80158e0:	d3f0      	bcc.n	80158c4 <__ieee754_fmod+0x48>
 80158e2:	d105      	bne.n	80158f0 <__ieee754_fmod+0x74>
 80158e4:	4b69      	ldr	r3, [pc, #420]	; (8015a8c <__ieee754_fmod+0x210>)
 80158e6:	eb03 7515 	add.w	r5, r3, r5, lsr #28
 80158ea:	e9d5 0100 	ldrd	r0, r1, [r5]
 80158ee:	e7e9      	b.n	80158c4 <__ieee754_fmod+0x48>
 80158f0:	ea19 0f0b 	tst.w	r9, fp
 80158f4:	d14a      	bne.n	801598c <__ieee754_fmod+0x110>
 80158f6:	f1b8 0f00 	cmp.w	r8, #0
 80158fa:	d13f      	bne.n	801597c <__ieee754_fmod+0x100>
 80158fc:	4964      	ldr	r1, [pc, #400]	; (8015a90 <__ieee754_fmod+0x214>)
 80158fe:	4653      	mov	r3, sl
 8015900:	2b00      	cmp	r3, #0
 8015902:	dc38      	bgt.n	8015976 <__ieee754_fmod+0xfa>
 8015904:	4b63      	ldr	r3, [pc, #396]	; (8015a94 <__ieee754_fmod+0x218>)
 8015906:	4033      	ands	r3, r6
 8015908:	2b00      	cmp	r3, #0
 801590a:	d14f      	bne.n	80159ac <__ieee754_fmod+0x130>
 801590c:	f1be 0f00 	cmp.w	lr, #0
 8015910:	d144      	bne.n	801599c <__ieee754_fmod+0x120>
 8015912:	4a5f      	ldr	r2, [pc, #380]	; (8015a90 <__ieee754_fmod+0x214>)
 8015914:	463b      	mov	r3, r7
 8015916:	2b00      	cmp	r3, #0
 8015918:	dc3d      	bgt.n	8015996 <__ieee754_fmod+0x11a>
 801591a:	4b5f      	ldr	r3, [pc, #380]	; (8015a98 <__ieee754_fmod+0x21c>)
 801591c:	4299      	cmp	r1, r3
 801591e:	db4a      	blt.n	80159b6 <__ieee754_fmod+0x13a>
 8015920:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015924:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015928:	485b      	ldr	r0, [pc, #364]	; (8015a98 <__ieee754_fmod+0x21c>)
 801592a:	4282      	cmp	r2, r0
 801592c:	db57      	blt.n	80159de <__ieee754_fmod+0x162>
 801592e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8015932:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8015936:	1a89      	subs	r1, r1, r2
 8015938:	1b98      	subs	r0, r3, r6
 801593a:	eba4 070c 	sub.w	r7, r4, ip
 801593e:	2900      	cmp	r1, #0
 8015940:	d164      	bne.n	8015a0c <__ieee754_fmod+0x190>
 8015942:	4564      	cmp	r4, ip
 8015944:	bf38      	it	cc
 8015946:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 801594a:	2800      	cmp	r0, #0
 801594c:	bfa4      	itt	ge
 801594e:	463c      	movge	r4, r7
 8015950:	4603      	movge	r3, r0
 8015952:	ea53 0104 	orrs.w	r1, r3, r4
 8015956:	d0c5      	beq.n	80158e4 <__ieee754_fmod+0x68>
 8015958:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801595c:	db6b      	blt.n	8015a36 <__ieee754_fmod+0x1ba>
 801595e:	494e      	ldr	r1, [pc, #312]	; (8015a98 <__ieee754_fmod+0x21c>)
 8015960:	428a      	cmp	r2, r1
 8015962:	db6e      	blt.n	8015a42 <__ieee754_fmod+0x1c6>
 8015964:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015968:	431d      	orrs	r5, r3
 801596a:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 801596e:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 8015972:	4620      	mov	r0, r4
 8015974:	e7a6      	b.n	80158c4 <__ieee754_fmod+0x48>
 8015976:	3901      	subs	r1, #1
 8015978:	005b      	lsls	r3, r3, #1
 801597a:	e7c1      	b.n	8015900 <__ieee754_fmod+0x84>
 801597c:	4946      	ldr	r1, [pc, #280]	; (8015a98 <__ieee754_fmod+0x21c>)
 801597e:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8015982:	2b00      	cmp	r3, #0
 8015984:	ddbe      	ble.n	8015904 <__ieee754_fmod+0x88>
 8015986:	3901      	subs	r1, #1
 8015988:	005b      	lsls	r3, r3, #1
 801598a:	e7fa      	b.n	8015982 <__ieee754_fmod+0x106>
 801598c:	ea4f 5128 	mov.w	r1, r8, asr #20
 8015990:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8015994:	e7b6      	b.n	8015904 <__ieee754_fmod+0x88>
 8015996:	3a01      	subs	r2, #1
 8015998:	005b      	lsls	r3, r3, #1
 801599a:	e7bc      	b.n	8015916 <__ieee754_fmod+0x9a>
 801599c:	4a3e      	ldr	r2, [pc, #248]	; (8015a98 <__ieee754_fmod+0x21c>)
 801599e:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	ddb9      	ble.n	801591a <__ieee754_fmod+0x9e>
 80159a6:	3a01      	subs	r2, #1
 80159a8:	005b      	lsls	r3, r3, #1
 80159aa:	e7fa      	b.n	80159a2 <__ieee754_fmod+0x126>
 80159ac:	ea4f 522e 	mov.w	r2, lr, asr #20
 80159b0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80159b4:	e7b1      	b.n	801591a <__ieee754_fmod+0x9e>
 80159b6:	1a5c      	subs	r4, r3, r1
 80159b8:	2c1f      	cmp	r4, #31
 80159ba:	dc0a      	bgt.n	80159d2 <__ieee754_fmod+0x156>
 80159bc:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 80159c0:	fa08 f804 	lsl.w	r8, r8, r4
 80159c4:	fa2a f303 	lsr.w	r3, sl, r3
 80159c8:	ea43 0308 	orr.w	r3, r3, r8
 80159cc:	fa0a f404 	lsl.w	r4, sl, r4
 80159d0:	e7aa      	b.n	8015928 <__ieee754_fmod+0xac>
 80159d2:	4b32      	ldr	r3, [pc, #200]	; (8015a9c <__ieee754_fmod+0x220>)
 80159d4:	1a5b      	subs	r3, r3, r1
 80159d6:	fa0a f303 	lsl.w	r3, sl, r3
 80159da:	2400      	movs	r4, #0
 80159dc:	e7a4      	b.n	8015928 <__ieee754_fmod+0xac>
 80159de:	eba0 0c02 	sub.w	ip, r0, r2
 80159e2:	f1bc 0f1f 	cmp.w	ip, #31
 80159e6:	dc0a      	bgt.n	80159fe <__ieee754_fmod+0x182>
 80159e8:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 80159ec:	fa0e fe0c 	lsl.w	lr, lr, ip
 80159f0:	fa27 f606 	lsr.w	r6, r7, r6
 80159f4:	ea46 060e 	orr.w	r6, r6, lr
 80159f8:	fa07 fc0c 	lsl.w	ip, r7, ip
 80159fc:	e79b      	b.n	8015936 <__ieee754_fmod+0xba>
 80159fe:	4e27      	ldr	r6, [pc, #156]	; (8015a9c <__ieee754_fmod+0x220>)
 8015a00:	1ab6      	subs	r6, r6, r2
 8015a02:	fa07 f606 	lsl.w	r6, r7, r6
 8015a06:	f04f 0c00 	mov.w	ip, #0
 8015a0a:	e794      	b.n	8015936 <__ieee754_fmod+0xba>
 8015a0c:	4564      	cmp	r4, ip
 8015a0e:	bf38      	it	cc
 8015a10:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 8015a14:	2800      	cmp	r0, #0
 8015a16:	da05      	bge.n	8015a24 <__ieee754_fmod+0x1a8>
 8015a18:	0fe0      	lsrs	r0, r4, #31
 8015a1a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8015a1e:	0064      	lsls	r4, r4, #1
 8015a20:	3901      	subs	r1, #1
 8015a22:	e789      	b.n	8015938 <__ieee754_fmod+0xbc>
 8015a24:	ea50 0307 	orrs.w	r3, r0, r7
 8015a28:	f43f af5c 	beq.w	80158e4 <__ieee754_fmod+0x68>
 8015a2c:	0ffb      	lsrs	r3, r7, #31
 8015a2e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8015a32:	007c      	lsls	r4, r7, #1
 8015a34:	e7f4      	b.n	8015a20 <__ieee754_fmod+0x1a4>
 8015a36:	0fe1      	lsrs	r1, r4, #31
 8015a38:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8015a3c:	0064      	lsls	r4, r4, #1
 8015a3e:	3a01      	subs	r2, #1
 8015a40:	e78a      	b.n	8015958 <__ieee754_fmod+0xdc>
 8015a42:	1a89      	subs	r1, r1, r2
 8015a44:	2914      	cmp	r1, #20
 8015a46:	dc0a      	bgt.n	8015a5e <__ieee754_fmod+0x1e2>
 8015a48:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8015a4c:	fa03 f202 	lsl.w	r2, r3, r2
 8015a50:	40cc      	lsrs	r4, r1
 8015a52:	4322      	orrs	r2, r4
 8015a54:	410b      	asrs	r3, r1
 8015a56:	ea43 0105 	orr.w	r1, r3, r5
 8015a5a:	4610      	mov	r0, r2
 8015a5c:	e732      	b.n	80158c4 <__ieee754_fmod+0x48>
 8015a5e:	291f      	cmp	r1, #31
 8015a60:	dc07      	bgt.n	8015a72 <__ieee754_fmod+0x1f6>
 8015a62:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8015a66:	40cc      	lsrs	r4, r1
 8015a68:	fa03 f202 	lsl.w	r2, r3, r2
 8015a6c:	4322      	orrs	r2, r4
 8015a6e:	462b      	mov	r3, r5
 8015a70:	e7f1      	b.n	8015a56 <__ieee754_fmod+0x1da>
 8015a72:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8015a76:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8015a7a:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8015a7e:	32e2      	adds	r2, #226	; 0xe2
 8015a80:	fa43 f202 	asr.w	r2, r3, r2
 8015a84:	e7f3      	b.n	8015a6e <__ieee754_fmod+0x1f2>
 8015a86:	bf00      	nop
 8015a88:	7fefffff 	.word	0x7fefffff
 8015a8c:	080164a8 	.word	0x080164a8
 8015a90:	fffffbed 	.word	0xfffffbed
 8015a94:	7ff00000 	.word	0x7ff00000
 8015a98:	fffffc02 	.word	0xfffffc02
 8015a9c:	fffffbe2 	.word	0xfffffbe2

08015aa0 <fmod>:
 8015aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015aa2:	ed2d 8b02 	vpush	{d8}
 8015aa6:	ec57 6b10 	vmov	r6, r7, d0
 8015aaa:	ec55 4b11 	vmov	r4, r5, d1
 8015aae:	f7ff fee5 	bl	801587c <__ieee754_fmod>
 8015ab2:	4622      	mov	r2, r4
 8015ab4:	462b      	mov	r3, r5
 8015ab6:	4630      	mov	r0, r6
 8015ab8:	4639      	mov	r1, r7
 8015aba:	eeb0 8a40 	vmov.f32	s16, s0
 8015abe:	eef0 8a60 	vmov.f32	s17, s1
 8015ac2:	f7eb f86d 	bl	8000ba0 <__aeabi_dcmpun>
 8015ac6:	b990      	cbnz	r0, 8015aee <fmod+0x4e>
 8015ac8:	2200      	movs	r2, #0
 8015aca:	2300      	movs	r3, #0
 8015acc:	4620      	mov	r0, r4
 8015ace:	4629      	mov	r1, r5
 8015ad0:	f7eb f834 	bl	8000b3c <__aeabi_dcmpeq>
 8015ad4:	b158      	cbz	r0, 8015aee <fmod+0x4e>
 8015ad6:	f7fd fe3d 	bl	8013754 <__errno>
 8015ada:	2321      	movs	r3, #33	; 0x21
 8015adc:	6003      	str	r3, [r0, #0]
 8015ade:	2200      	movs	r2, #0
 8015ae0:	2300      	movs	r3, #0
 8015ae2:	4610      	mov	r0, r2
 8015ae4:	4619      	mov	r1, r3
 8015ae6:	f7ea feeb 	bl	80008c0 <__aeabi_ddiv>
 8015aea:	ec41 0b18 	vmov	d8, r0, r1
 8015aee:	eeb0 0a48 	vmov.f32	s0, s16
 8015af2:	eef0 0a68 	vmov.f32	s1, s17
 8015af6:	ecbd 8b02 	vpop	{d8}
 8015afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015afc <_read>:
 8015afc:	4b02      	ldr	r3, [pc, #8]	; (8015b08 <_read+0xc>)
 8015afe:	2258      	movs	r2, #88	; 0x58
 8015b00:	601a      	str	r2, [r3, #0]
 8015b02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015b06:	4770      	bx	lr
 8015b08:	20000610 	.word	0x20000610

08015b0c <_write>:
 8015b0c:	4b02      	ldr	r3, [pc, #8]	; (8015b18 <_write+0xc>)
 8015b0e:	2258      	movs	r2, #88	; 0x58
 8015b10:	601a      	str	r2, [r3, #0]
 8015b12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015b16:	4770      	bx	lr
 8015b18:	20000610 	.word	0x20000610

08015b1c <register_fini>:
 8015b1c:	4b02      	ldr	r3, [pc, #8]	; (8015b28 <register_fini+0xc>)
 8015b1e:	b113      	cbz	r3, 8015b26 <register_fini+0xa>
 8015b20:	4802      	ldr	r0, [pc, #8]	; (8015b2c <register_fini+0x10>)
 8015b22:	f7fc bf87 	b.w	8012a34 <atexit>
 8015b26:	4770      	bx	lr
 8015b28:	00000000 	.word	0x00000000
 8015b2c:	08013a91 	.word	0x08013a91

08015b30 <_init>:
 8015b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b32:	bf00      	nop
 8015b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015b36:	bc08      	pop	{r3}
 8015b38:	469e      	mov	lr, r3
 8015b3a:	4770      	bx	lr

08015b3c <_fini>:
 8015b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b3e:	bf00      	nop
 8015b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015b42:	bc08      	pop	{r3}
 8015b44:	469e      	mov	lr, r3
 8015b46:	4770      	bx	lr
