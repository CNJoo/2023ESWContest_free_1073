
F411CEU6_V2Xsystem_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015990  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000968  08015b30  08015b30  00025b30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016498  08016498  00030230  2**0
                  CONTENTS
  4 .ARM          00000008  08016498  08016498  00026498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080164a0  080164a0  00030230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000018  080164a0  080164a0  000264a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080164b8  080164b8  000264b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  080164bc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  20000230  080166ec  00030230  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000610  080166ec  00030610  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014096  00000000  00000000  00030260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f77  00000000  00000000  000442f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  00047270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f68  00000000  00000000  00048330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fab  00000000  00000000  00049298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152fc  00000000  00000000  00063243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000957f2  00000000  00000000  0007853f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cf  00000000  00000000  0010dd31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005928  00000000  00000000  0010de00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000030  00000000  00000000  00113b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000453  00000000  00000000  00113728  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <dw3000_driver>:
 80001a0:	12 03 ca de 0f ff ff ff 40 5e 01 08 48 5e 01 08     ........@^..H^..
 80001b0:	7c 5d 01 08 40 5d 01 08 07 00 06 00                 |]..@]......

080001bc <dw3700_driver>:
 80001bc:	13 03 ca de 0f ff ff ff 40 5e 01 08 48 5e 01 08     ........@^..H^..
 80001cc:	bc 5e 01 08 80 5e 01 08 07 00 06 00                 .^...^......

080001d8 <dw3720_driver>:
 80001d8:	14 03 ca de 0f ff ff ff 40 5e 01 08 48 5e 01 08     ........@^..H^..
 80001e8:	cc 5f 01 08 90 5f 01 08 07 00 06 00                 ._..._......

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000230 	.word	0x20000230
 8000210:	00000000 	.word	0x00000000
 8000214:	08015b18 	.word	0x08015b18

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000234 	.word	0x20000234
 8000230:	08015b18 	.word	0x08015b18
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_idiv0>:
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop

080002f4 <__aeabi_drsub>:
 80002f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f8:	e002      	b.n	8000300 <__adddf3>
 80002fa:	bf00      	nop

080002fc <__aeabi_dsub>:
 80002fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000300 <__adddf3>:
 8000300:	b530      	push	{r4, r5, lr}
 8000302:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000306:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800030a:	ea94 0f05 	teq	r4, r5
 800030e:	bf08      	it	eq
 8000310:	ea90 0f02 	teqeq	r0, r2
 8000314:	bf1f      	itttt	ne
 8000316:	ea54 0c00 	orrsne.w	ip, r4, r0
 800031a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000322:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000326:	f000 80e2 	beq.w	80004ee <__adddf3+0x1ee>
 800032a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000332:	bfb8      	it	lt
 8000334:	426d      	neglt	r5, r5
 8000336:	dd0c      	ble.n	8000352 <__adddf3+0x52>
 8000338:	442c      	add	r4, r5
 800033a:	ea80 0202 	eor.w	r2, r0, r2
 800033e:	ea81 0303 	eor.w	r3, r1, r3
 8000342:	ea82 0000 	eor.w	r0, r2, r0
 8000346:	ea83 0101 	eor.w	r1, r3, r1
 800034a:	ea80 0202 	eor.w	r2, r0, r2
 800034e:	ea81 0303 	eor.w	r3, r1, r3
 8000352:	2d36      	cmp	r5, #54	; 0x36
 8000354:	bf88      	it	hi
 8000356:	bd30      	pophi	{r4, r5, pc}
 8000358:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800035c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000360:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000364:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x70>
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000374:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000378:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800037c:	d002      	beq.n	8000384 <__adddf3+0x84>
 800037e:	4252      	negs	r2, r2
 8000380:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000384:	ea94 0f05 	teq	r4, r5
 8000388:	f000 80a7 	beq.w	80004da <__adddf3+0x1da>
 800038c:	f1a4 0401 	sub.w	r4, r4, #1
 8000390:	f1d5 0e20 	rsbs	lr, r5, #32
 8000394:	db0d      	blt.n	80003b2 <__adddf3+0xb2>
 8000396:	fa02 fc0e 	lsl.w	ip, r2, lr
 800039a:	fa22 f205 	lsr.w	r2, r2, r5
 800039e:	1880      	adds	r0, r0, r2
 80003a0:	f141 0100 	adc.w	r1, r1, #0
 80003a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a8:	1880      	adds	r0, r0, r2
 80003aa:	fa43 f305 	asr.w	r3, r3, r5
 80003ae:	4159      	adcs	r1, r3
 80003b0:	e00e      	b.n	80003d0 <__adddf3+0xd0>
 80003b2:	f1a5 0520 	sub.w	r5, r5, #32
 80003b6:	f10e 0e20 	add.w	lr, lr, #32
 80003ba:	2a01      	cmp	r2, #1
 80003bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003c0:	bf28      	it	cs
 80003c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	18c0      	adds	r0, r0, r3
 80003cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	d507      	bpl.n	80003e6 <__adddf3+0xe6>
 80003d6:	f04f 0e00 	mov.w	lr, #0
 80003da:	f1dc 0c00 	rsbs	ip, ip, #0
 80003de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ea:	d31b      	bcc.n	8000424 <__adddf3+0x124>
 80003ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003f0:	d30c      	bcc.n	800040c <__adddf3+0x10c>
 80003f2:	0849      	lsrs	r1, r1, #1
 80003f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003fc:	f104 0401 	add.w	r4, r4, #1
 8000400:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000404:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000408:	f080 809a 	bcs.w	8000540 <__adddf3+0x240>
 800040c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000410:	bf08      	it	eq
 8000412:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000416:	f150 0000 	adcs.w	r0, r0, #0
 800041a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041e:	ea41 0105 	orr.w	r1, r1, r5
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000428:	4140      	adcs	r0, r0
 800042a:	eb41 0101 	adc.w	r1, r1, r1
 800042e:	3c01      	subs	r4, #1
 8000430:	bf28      	it	cs
 8000432:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000436:	d2e9      	bcs.n	800040c <__adddf3+0x10c>
 8000438:	f091 0f00 	teq	r1, #0
 800043c:	bf04      	itt	eq
 800043e:	4601      	moveq	r1, r0
 8000440:	2000      	moveq	r0, #0
 8000442:	fab1 f381 	clz	r3, r1
 8000446:	bf08      	it	eq
 8000448:	3320      	addeq	r3, #32
 800044a:	f1a3 030b 	sub.w	r3, r3, #11
 800044e:	f1b3 0220 	subs.w	r2, r3, #32
 8000452:	da0c      	bge.n	800046e <__adddf3+0x16e>
 8000454:	320c      	adds	r2, #12
 8000456:	dd08      	ble.n	800046a <__adddf3+0x16a>
 8000458:	f102 0c14 	add.w	ip, r2, #20
 800045c:	f1c2 020c 	rsb	r2, r2, #12
 8000460:	fa01 f00c 	lsl.w	r0, r1, ip
 8000464:	fa21 f102 	lsr.w	r1, r1, r2
 8000468:	e00c      	b.n	8000484 <__adddf3+0x184>
 800046a:	f102 0214 	add.w	r2, r2, #20
 800046e:	bfd8      	it	le
 8000470:	f1c2 0c20 	rsble	ip, r2, #32
 8000474:	fa01 f102 	lsl.w	r1, r1, r2
 8000478:	fa20 fc0c 	lsr.w	ip, r0, ip
 800047c:	bfdc      	itt	le
 800047e:	ea41 010c 	orrle.w	r1, r1, ip
 8000482:	4090      	lslle	r0, r2
 8000484:	1ae4      	subs	r4, r4, r3
 8000486:	bfa2      	ittt	ge
 8000488:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800048c:	4329      	orrge	r1, r5
 800048e:	bd30      	popge	{r4, r5, pc}
 8000490:	ea6f 0404 	mvn.w	r4, r4
 8000494:	3c1f      	subs	r4, #31
 8000496:	da1c      	bge.n	80004d2 <__adddf3+0x1d2>
 8000498:	340c      	adds	r4, #12
 800049a:	dc0e      	bgt.n	80004ba <__adddf3+0x1ba>
 800049c:	f104 0414 	add.w	r4, r4, #20
 80004a0:	f1c4 0220 	rsb	r2, r4, #32
 80004a4:	fa20 f004 	lsr.w	r0, r0, r4
 80004a8:	fa01 f302 	lsl.w	r3, r1, r2
 80004ac:	ea40 0003 	orr.w	r0, r0, r3
 80004b0:	fa21 f304 	lsr.w	r3, r1, r4
 80004b4:	ea45 0103 	orr.w	r1, r5, r3
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	f1c4 040c 	rsb	r4, r4, #12
 80004be:	f1c4 0220 	rsb	r2, r4, #32
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 f304 	lsl.w	r3, r1, r4
 80004ca:	ea40 0003 	orr.w	r0, r0, r3
 80004ce:	4629      	mov	r1, r5
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	fa21 f004 	lsr.w	r0, r1, r4
 80004d6:	4629      	mov	r1, r5
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	f094 0f00 	teq	r4, #0
 80004de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004e2:	bf06      	itte	eq
 80004e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e8:	3401      	addeq	r4, #1
 80004ea:	3d01      	subne	r5, #1
 80004ec:	e74e      	b.n	800038c <__adddf3+0x8c>
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf18      	it	ne
 80004f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f8:	d029      	beq.n	800054e <__adddf3+0x24e>
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	d005      	beq.n	8000512 <__adddf3+0x212>
 8000506:	ea54 0c00 	orrs.w	ip, r4, r0
 800050a:	bf04      	itt	eq
 800050c:	4619      	moveq	r1, r3
 800050e:	4610      	moveq	r0, r2
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea91 0f03 	teq	r1, r3
 8000516:	bf1e      	ittt	ne
 8000518:	2100      	movne	r1, #0
 800051a:	2000      	movne	r0, #0
 800051c:	bd30      	popne	{r4, r5, pc}
 800051e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000522:	d105      	bne.n	8000530 <__adddf3+0x230>
 8000524:	0040      	lsls	r0, r0, #1
 8000526:	4149      	adcs	r1, r1
 8000528:	bf28      	it	cs
 800052a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052e:	bd30      	pop	{r4, r5, pc}
 8000530:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000534:	bf3c      	itt	cc
 8000536:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800053a:	bd30      	popcc	{r4, r5, pc}
 800053c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000540:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000544:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000548:	f04f 0000 	mov.w	r0, #0
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000552:	bf1a      	itte	ne
 8000554:	4619      	movne	r1, r3
 8000556:	4610      	movne	r0, r2
 8000558:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800055c:	bf1c      	itt	ne
 800055e:	460b      	movne	r3, r1
 8000560:	4602      	movne	r2, r0
 8000562:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000566:	bf06      	itte	eq
 8000568:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800056c:	ea91 0f03 	teqeq	r1, r3
 8000570:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	bf00      	nop

08000578 <__aeabi_ui2d>:
 8000578:	f090 0f00 	teq	r0, #0
 800057c:	bf04      	itt	eq
 800057e:	2100      	moveq	r1, #0
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000588:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058c:	f04f 0500 	mov.w	r5, #0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e750      	b.n	8000438 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_i2d>:
 8000598:	f090 0f00 	teq	r0, #0
 800059c:	bf04      	itt	eq
 800059e:	2100      	moveq	r1, #0
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005b0:	bf48      	it	mi
 80005b2:	4240      	negmi	r0, r0
 80005b4:	f04f 0100 	mov.w	r1, #0
 80005b8:	e73e      	b.n	8000438 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_f2d>:
 80005bc:	0042      	lsls	r2, r0, #1
 80005be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ca:	bf1f      	itttt	ne
 80005cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d8:	4770      	bxne	lr
 80005da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005de:	bf08      	it	eq
 80005e0:	4770      	bxeq	lr
 80005e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e6:	bf04      	itt	eq
 80005e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005fc:	e71c      	b.n	8000438 <__adddf3+0x138>
 80005fe:	bf00      	nop

08000600 <__aeabi_ul2d>:
 8000600:	ea50 0201 	orrs.w	r2, r0, r1
 8000604:	bf08      	it	eq
 8000606:	4770      	bxeq	lr
 8000608:	b530      	push	{r4, r5, lr}
 800060a:	f04f 0500 	mov.w	r5, #0
 800060e:	e00a      	b.n	8000626 <__aeabi_l2d+0x16>

08000610 <__aeabi_l2d>:
 8000610:	ea50 0201 	orrs.w	r2, r0, r1
 8000614:	bf08      	it	eq
 8000616:	4770      	bxeq	lr
 8000618:	b530      	push	{r4, r5, lr}
 800061a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061e:	d502      	bpl.n	8000626 <__aeabi_l2d+0x16>
 8000620:	4240      	negs	r0, r0
 8000622:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000626:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800062a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000632:	f43f aed8 	beq.w	80003e6 <__adddf3+0xe6>
 8000636:	f04f 0203 	mov.w	r2, #3
 800063a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063e:	bf18      	it	ne
 8000640:	3203      	addne	r2, #3
 8000642:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000646:	bf18      	it	ne
 8000648:	3203      	addne	r2, #3
 800064a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064e:	f1c2 0320 	rsb	r3, r2, #32
 8000652:	fa00 fc03 	lsl.w	ip, r0, r3
 8000656:	fa20 f002 	lsr.w	r0, r0, r2
 800065a:	fa01 fe03 	lsl.w	lr, r1, r3
 800065e:	ea40 000e 	orr.w	r0, r0, lr
 8000662:	fa21 f102 	lsr.w	r1, r1, r2
 8000666:	4414      	add	r4, r2
 8000668:	e6bd      	b.n	80003e6 <__adddf3+0xe6>
 800066a:	bf00      	nop

0800066c <__aeabi_dmul>:
 800066c:	b570      	push	{r4, r5, r6, lr}
 800066e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000672:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000676:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800067a:	bf1d      	ittte	ne
 800067c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000680:	ea94 0f0c 	teqne	r4, ip
 8000684:	ea95 0f0c 	teqne	r5, ip
 8000688:	f000 f8de 	bleq	8000848 <__aeabi_dmul+0x1dc>
 800068c:	442c      	add	r4, r5
 800068e:	ea81 0603 	eor.w	r6, r1, r3
 8000692:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000696:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800069a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069e:	bf18      	it	ne
 80006a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006ac:	d038      	beq.n	8000720 <__aeabi_dmul+0xb4>
 80006ae:	fba0 ce02 	umull	ip, lr, r0, r2
 80006b2:	f04f 0500 	mov.w	r5, #0
 80006b6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006ba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006be:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006c2:	f04f 0600 	mov.w	r6, #0
 80006c6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ca:	f09c 0f00 	teq	ip, #0
 80006ce:	bf18      	it	ne
 80006d0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006dc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006e0:	d204      	bcs.n	80006ec <__aeabi_dmul+0x80>
 80006e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e6:	416d      	adcs	r5, r5
 80006e8:	eb46 0606 	adc.w	r6, r6, r6
 80006ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000700:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000704:	bf88      	it	hi
 8000706:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800070a:	d81e      	bhi.n	800074a <__aeabi_dmul+0xde>
 800070c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000710:	bf08      	it	eq
 8000712:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000716:	f150 0000 	adcs.w	r0, r0, #0
 800071a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071e:	bd70      	pop	{r4, r5, r6, pc}
 8000720:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000724:	ea46 0101 	orr.w	r1, r6, r1
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000734:	bfc2      	ittt	gt
 8000736:	ebd4 050c 	rsbsgt	r5, r4, ip
 800073a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073e:	bd70      	popgt	{r4, r5, r6, pc}
 8000740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000744:	f04f 0e00 	mov.w	lr, #0
 8000748:	3c01      	subs	r4, #1
 800074a:	f300 80ab 	bgt.w	80008a4 <__aeabi_dmul+0x238>
 800074e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000752:	bfde      	ittt	le
 8000754:	2000      	movle	r0, #0
 8000756:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800075a:	bd70      	pople	{r4, r5, r6, pc}
 800075c:	f1c4 0400 	rsb	r4, r4, #0
 8000760:	3c20      	subs	r4, #32
 8000762:	da35      	bge.n	80007d0 <__aeabi_dmul+0x164>
 8000764:	340c      	adds	r4, #12
 8000766:	dc1b      	bgt.n	80007a0 <__aeabi_dmul+0x134>
 8000768:	f104 0414 	add.w	r4, r4, #20
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f305 	lsl.w	r3, r0, r5
 8000774:	fa20 f004 	lsr.w	r0, r0, r4
 8000778:	fa01 f205 	lsl.w	r2, r1, r5
 800077c:	ea40 0002 	orr.w	r0, r0, r2
 8000780:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000784:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	fa21 f604 	lsr.w	r6, r1, r4
 8000790:	eb42 0106 	adc.w	r1, r2, r6
 8000794:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000798:	bf08      	it	eq
 800079a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079e:	bd70      	pop	{r4, r5, r6, pc}
 80007a0:	f1c4 040c 	rsb	r4, r4, #12
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f304 	lsl.w	r3, r0, r4
 80007ac:	fa20 f005 	lsr.w	r0, r0, r5
 80007b0:	fa01 f204 	lsl.w	r2, r1, r4
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c0:	f141 0100 	adc.w	r1, r1, #0
 80007c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c8:	bf08      	it	eq
 80007ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ce:	bd70      	pop	{r4, r5, r6, pc}
 80007d0:	f1c4 0520 	rsb	r5, r4, #32
 80007d4:	fa00 f205 	lsl.w	r2, r0, r5
 80007d8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007dc:	fa20 f304 	lsr.w	r3, r0, r4
 80007e0:	fa01 f205 	lsl.w	r2, r1, r5
 80007e4:	ea43 0302 	orr.w	r3, r3, r2
 80007e8:	fa21 f004 	lsr.w	r0, r1, r4
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	fa21 f204 	lsr.w	r2, r1, r4
 80007f4:	ea20 0002 	bic.w	r0, r0, r2
 80007f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000800:	bf08      	it	eq
 8000802:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000806:	bd70      	pop	{r4, r5, r6, pc}
 8000808:	f094 0f00 	teq	r4, #0
 800080c:	d10f      	bne.n	800082e <__aeabi_dmul+0x1c2>
 800080e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000812:	0040      	lsls	r0, r0, #1
 8000814:	eb41 0101 	adc.w	r1, r1, r1
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	bf08      	it	eq
 800081e:	3c01      	subeq	r4, #1
 8000820:	d0f7      	beq.n	8000812 <__aeabi_dmul+0x1a6>
 8000822:	ea41 0106 	orr.w	r1, r1, r6
 8000826:	f095 0f00 	teq	r5, #0
 800082a:	bf18      	it	ne
 800082c:	4770      	bxne	lr
 800082e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000832:	0052      	lsls	r2, r2, #1
 8000834:	eb43 0303 	adc.w	r3, r3, r3
 8000838:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800083c:	bf08      	it	eq
 800083e:	3d01      	subeq	r5, #1
 8000840:	d0f7      	beq.n	8000832 <__aeabi_dmul+0x1c6>
 8000842:	ea43 0306 	orr.w	r3, r3, r6
 8000846:	4770      	bx	lr
 8000848:	ea94 0f0c 	teq	r4, ip
 800084c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000850:	bf18      	it	ne
 8000852:	ea95 0f0c 	teqne	r5, ip
 8000856:	d00c      	beq.n	8000872 <__aeabi_dmul+0x206>
 8000858:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800085c:	bf18      	it	ne
 800085e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000862:	d1d1      	bne.n	8000808 <__aeabi_dmul+0x19c>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000876:	bf06      	itte	eq
 8000878:	4610      	moveq	r0, r2
 800087a:	4619      	moveq	r1, r3
 800087c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000880:	d019      	beq.n	80008b6 <__aeabi_dmul+0x24a>
 8000882:	ea94 0f0c 	teq	r4, ip
 8000886:	d102      	bne.n	800088e <__aeabi_dmul+0x222>
 8000888:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800088c:	d113      	bne.n	80008b6 <__aeabi_dmul+0x24a>
 800088e:	ea95 0f0c 	teq	r5, ip
 8000892:	d105      	bne.n	80008a0 <__aeabi_dmul+0x234>
 8000894:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000898:	bf1c      	itt	ne
 800089a:	4610      	movne	r0, r2
 800089c:	4619      	movne	r1, r3
 800089e:	d10a      	bne.n	80008b6 <__aeabi_dmul+0x24a>
 80008a0:	ea81 0103 	eor.w	r1, r1, r3
 80008a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008b0:	f04f 0000 	mov.w	r0, #0
 80008b4:	bd70      	pop	{r4, r5, r6, pc}
 80008b6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008ba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008be:	bd70      	pop	{r4, r5, r6, pc}

080008c0 <__aeabi_ddiv>:
 80008c0:	b570      	push	{r4, r5, r6, lr}
 80008c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ce:	bf1d      	ittte	ne
 80008d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d4:	ea94 0f0c 	teqne	r4, ip
 80008d8:	ea95 0f0c 	teqne	r5, ip
 80008dc:	f000 f8a7 	bleq	8000a2e <__aeabi_ddiv+0x16e>
 80008e0:	eba4 0405 	sub.w	r4, r4, r5
 80008e4:	ea81 0e03 	eor.w	lr, r1, r3
 80008e8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008f0:	f000 8088 	beq.w	8000a04 <__aeabi_ddiv+0x144>
 80008f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008fc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000900:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000904:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000908:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800090c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000910:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000914:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000918:	429d      	cmp	r5, r3
 800091a:	bf08      	it	eq
 800091c:	4296      	cmpeq	r6, r2
 800091e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000922:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000926:	d202      	bcs.n	800092e <__aeabi_ddiv+0x6e>
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	1ab6      	subs	r6, r6, r2
 8000930:	eb65 0503 	sbc.w	r5, r5, r3
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000942:	ebb6 0e02 	subs.w	lr, r6, r2
 8000946:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094a:	bf22      	ittt	cs
 800094c:	1ab6      	subcs	r6, r6, r2
 800094e:	4675      	movcs	r5, lr
 8000950:	ea40 000c 	orrcs.w	r0, r0, ip
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	ea4f 0232 	mov.w	r2, r2, rrx
 800095a:	ebb6 0e02 	subs.w	lr, r6, r2
 800095e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000962:	bf22      	ittt	cs
 8000964:	1ab6      	subcs	r6, r6, r2
 8000966:	4675      	movcs	r5, lr
 8000968:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800096c:	085b      	lsrs	r3, r3, #1
 800096e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000972:	ebb6 0e02 	subs.w	lr, r6, r2
 8000976:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097a:	bf22      	ittt	cs
 800097c:	1ab6      	subcs	r6, r6, r2
 800097e:	4675      	movcs	r5, lr
 8000980:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000984:	085b      	lsrs	r3, r3, #1
 8000986:	ea4f 0232 	mov.w	r2, r2, rrx
 800098a:	ebb6 0e02 	subs.w	lr, r6, r2
 800098e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000992:	bf22      	ittt	cs
 8000994:	1ab6      	subcs	r6, r6, r2
 8000996:	4675      	movcs	r5, lr
 8000998:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800099c:	ea55 0e06 	orrs.w	lr, r5, r6
 80009a0:	d018      	beq.n	80009d4 <__aeabi_ddiv+0x114>
 80009a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009b2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009ba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009be:	d1c0      	bne.n	8000942 <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	d10b      	bne.n	80009de <__aeabi_ddiv+0x11e>
 80009c6:	ea41 0100 	orr.w	r1, r1, r0
 80009ca:	f04f 0000 	mov.w	r0, #0
 80009ce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009d2:	e7b6      	b.n	8000942 <__aeabi_ddiv+0x82>
 80009d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d8:	bf04      	itt	eq
 80009da:	4301      	orreq	r1, r0
 80009dc:	2000      	moveq	r0, #0
 80009de:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009e2:	bf88      	it	hi
 80009e4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e8:	f63f aeaf 	bhi.w	800074a <__aeabi_dmul+0xde>
 80009ec:	ebb5 0c03 	subs.w	ip, r5, r3
 80009f0:	bf04      	itt	eq
 80009f2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009fa:	f150 0000 	adcs.w	r0, r0, #0
 80009fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a02:	bd70      	pop	{r4, r5, r6, pc}
 8000a04:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a08:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a0c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a10:	bfc2      	ittt	gt
 8000a12:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a1a:	bd70      	popgt	{r4, r5, r6, pc}
 8000a1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a20:	f04f 0e00 	mov.w	lr, #0
 8000a24:	3c01      	subs	r4, #1
 8000a26:	e690      	b.n	800074a <__aeabi_dmul+0xde>
 8000a28:	ea45 0e06 	orr.w	lr, r5, r6
 8000a2c:	e68d      	b.n	800074a <__aeabi_dmul+0xde>
 8000a2e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a32:	ea94 0f0c 	teq	r4, ip
 8000a36:	bf08      	it	eq
 8000a38:	ea95 0f0c 	teqeq	r5, ip
 8000a3c:	f43f af3b 	beq.w	80008b6 <__aeabi_dmul+0x24a>
 8000a40:	ea94 0f0c 	teq	r4, ip
 8000a44:	d10a      	bne.n	8000a5c <__aeabi_ddiv+0x19c>
 8000a46:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a4a:	f47f af34 	bne.w	80008b6 <__aeabi_dmul+0x24a>
 8000a4e:	ea95 0f0c 	teq	r5, ip
 8000a52:	f47f af25 	bne.w	80008a0 <__aeabi_dmul+0x234>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e72c      	b.n	80008b6 <__aeabi_dmul+0x24a>
 8000a5c:	ea95 0f0c 	teq	r5, ip
 8000a60:	d106      	bne.n	8000a70 <__aeabi_ddiv+0x1b0>
 8000a62:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a66:	f43f aefd 	beq.w	8000864 <__aeabi_dmul+0x1f8>
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	e722      	b.n	80008b6 <__aeabi_dmul+0x24a>
 8000a70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a74:	bf18      	it	ne
 8000a76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a7a:	f47f aec5 	bne.w	8000808 <__aeabi_dmul+0x19c>
 8000a7e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a82:	f47f af0d 	bne.w	80008a0 <__aeabi_dmul+0x234>
 8000a86:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a8a:	f47f aeeb 	bne.w	8000864 <__aeabi_dmul+0x1f8>
 8000a8e:	e712      	b.n	80008b6 <__aeabi_dmul+0x24a>

08000a90 <__gedf2>:
 8000a90:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a94:	e006      	b.n	8000aa4 <__cmpdf2+0x4>
 8000a96:	bf00      	nop

08000a98 <__ledf2>:
 8000a98:	f04f 0c01 	mov.w	ip, #1
 8000a9c:	e002      	b.n	8000aa4 <__cmpdf2+0x4>
 8000a9e:	bf00      	nop

08000aa0 <__cmpdf2>:
 8000aa0:	f04f 0c01 	mov.w	ip, #1
 8000aa4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	bf18      	it	ne
 8000ab6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aba:	d01b      	beq.n	8000af4 <__cmpdf2+0x54>
 8000abc:	b001      	add	sp, #4
 8000abe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ac2:	bf0c      	ite	eq
 8000ac4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac8:	ea91 0f03 	teqne	r1, r3
 8000acc:	bf02      	ittt	eq
 8000ace:	ea90 0f02 	teqeq	r0, r2
 8000ad2:	2000      	moveq	r0, #0
 8000ad4:	4770      	bxeq	lr
 8000ad6:	f110 0f00 	cmn.w	r0, #0
 8000ada:	ea91 0f03 	teq	r1, r3
 8000ade:	bf58      	it	pl
 8000ae0:	4299      	cmppl	r1, r3
 8000ae2:	bf08      	it	eq
 8000ae4:	4290      	cmpeq	r0, r2
 8000ae6:	bf2c      	ite	cs
 8000ae8:	17d8      	asrcs	r0, r3, #31
 8000aea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aee:	f040 0001 	orr.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__cmpdf2+0x64>
 8000afe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b02:	d107      	bne.n	8000b14 <__cmpdf2+0x74>
 8000b04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b0c:	d1d6      	bne.n	8000abc <__cmpdf2+0x1c>
 8000b0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b12:	d0d3      	beq.n	8000abc <__cmpdf2+0x1c>
 8000b14:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_cdrcmple>:
 8000b1c:	4684      	mov	ip, r0
 8000b1e:	4610      	mov	r0, r2
 8000b20:	4662      	mov	r2, ip
 8000b22:	468c      	mov	ip, r1
 8000b24:	4619      	mov	r1, r3
 8000b26:	4663      	mov	r3, ip
 8000b28:	e000      	b.n	8000b2c <__aeabi_cdcmpeq>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_cdcmpeq>:
 8000b2c:	b501      	push	{r0, lr}
 8000b2e:	f7ff ffb7 	bl	8000aa0 <__cmpdf2>
 8000b32:	2800      	cmp	r0, #0
 8000b34:	bf48      	it	mi
 8000b36:	f110 0f00 	cmnmi.w	r0, #0
 8000b3a:	bd01      	pop	{r0, pc}

08000b3c <__aeabi_dcmpeq>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff fff4 	bl	8000b2c <__aeabi_cdcmpeq>
 8000b44:	bf0c      	ite	eq
 8000b46:	2001      	moveq	r0, #1
 8000b48:	2000      	movne	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmplt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffea 	bl	8000b2c <__aeabi_cdcmpeq>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmple>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffe0 	bl	8000b2c <__aeabi_cdcmpeq>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpge>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffce 	bl	8000b1c <__aeabi_cdrcmple>
 8000b80:	bf94      	ite	ls
 8000b82:	2001      	movls	r0, #1
 8000b84:	2000      	movhi	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpgt>:
 8000b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b90:	f7ff ffc4 	bl	8000b1c <__aeabi_cdrcmple>
 8000b94:	bf34      	ite	cc
 8000b96:	2001      	movcc	r0, #1
 8000b98:	2000      	movcs	r0, #0
 8000b9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_dcmpun>:
 8000ba0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d102      	bne.n	8000bb0 <__aeabi_dcmpun+0x10>
 8000baa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bae:	d10a      	bne.n	8000bc6 <__aeabi_dcmpun+0x26>
 8000bb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb8:	d102      	bne.n	8000bc0 <__aeabi_dcmpun+0x20>
 8000bba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_dcmpun+0x26>
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0001 	mov.w	r0, #1
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2iz>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd4:	d215      	bcs.n	8000c02 <__aeabi_d2iz+0x36>
 8000bd6:	d511      	bpl.n	8000bfc <__aeabi_d2iz+0x30>
 8000bd8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bdc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be0:	d912      	bls.n	8000c08 <__aeabi_d2iz+0x3c>
 8000be2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf6:	bf18      	it	ne
 8000bf8:	4240      	negne	r0, r0
 8000bfa:	4770      	bx	lr
 8000bfc:	f04f 0000 	mov.w	r0, #0
 8000c00:	4770      	bx	lr
 8000c02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c06:	d105      	bne.n	8000c14 <__aeabi_d2iz+0x48>
 8000c08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	bf08      	it	eq
 8000c0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c12:	4770      	bx	lr
 8000c14:	f04f 0000 	mov.w	r0, #0
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_d2f>:
 8000c1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c24:	bf24      	itt	cs
 8000c26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2e:	d90d      	bls.n	8000c4c <__aeabi_d2f+0x30>
 8000c30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c44:	bf08      	it	eq
 8000c46:	f020 0001 	biceq.w	r0, r0, #1
 8000c4a:	4770      	bx	lr
 8000c4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c50:	d121      	bne.n	8000c96 <__aeabi_d2f+0x7a>
 8000c52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c56:	bfbc      	itt	lt
 8000c58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	4770      	bxlt	lr
 8000c5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c66:	f1c2 0218 	rsb	r2, r2, #24
 8000c6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c72:	fa20 f002 	lsr.w	r0, r0, r2
 8000c76:	bf18      	it	ne
 8000c78:	f040 0001 	orrne.w	r0, r0, #1
 8000c7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c88:	ea40 000c 	orr.w	r0, r0, ip
 8000c8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c94:	e7cc      	b.n	8000c30 <__aeabi_d2f+0x14>
 8000c96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c9a:	d107      	bne.n	8000cac <__aeabi_d2f+0x90>
 8000c9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ca0:	bf1e      	ittt	ne
 8000ca2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000caa:	4770      	bxne	lr
 8000cac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <__aeabi_uldivmod>:
 8000cbc:	b953      	cbnz	r3, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cbe:	b94a      	cbnz	r2, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cc0:	2900      	cmp	r1, #0
 8000cc2:	bf08      	it	eq
 8000cc4:	2800      	cmpeq	r0, #0
 8000cc6:	bf1c      	itt	ne
 8000cc8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ccc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cd0:	f7ff bb0e 	b.w	80002f0 <__aeabi_idiv0>
 8000cd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cdc:	f000 f806 	bl	8000cec <__udivmoddi4>
 8000ce0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce8:	b004      	add	sp, #16
 8000cea:	4770      	bx	lr

08000cec <__udivmoddi4>:
 8000cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf0:	9d08      	ldr	r5, [sp, #32]
 8000cf2:	4604      	mov	r4, r0
 8000cf4:	468e      	mov	lr, r1
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d14d      	bne.n	8000d96 <__udivmoddi4+0xaa>
 8000cfa:	428a      	cmp	r2, r1
 8000cfc:	4694      	mov	ip, r2
 8000cfe:	d969      	bls.n	8000dd4 <__udivmoddi4+0xe8>
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	b152      	cbz	r2, 8000d1c <__udivmoddi4+0x30>
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	f1c2 0120 	rsb	r1, r2, #32
 8000d0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000d12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d16:	ea41 0e03 	orr.w	lr, r1, r3
 8000d1a:	4094      	lsls	r4, r2
 8000d1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d20:	0c21      	lsrs	r1, r4, #16
 8000d22:	fbbe f6f8 	udiv	r6, lr, r8
 8000d26:	fa1f f78c 	uxth.w	r7, ip
 8000d2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000d2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d32:	fb06 f107 	mul.w	r1, r6, r7
 8000d36:	4299      	cmp	r1, r3
 8000d38:	d90a      	bls.n	8000d50 <__udivmoddi4+0x64>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d42:	f080 811f 	bcs.w	8000f84 <__udivmoddi4+0x298>
 8000d46:	4299      	cmp	r1, r3
 8000d48:	f240 811c 	bls.w	8000f84 <__udivmoddi4+0x298>
 8000d4c:	3e02      	subs	r6, #2
 8000d4e:	4463      	add	r3, ip
 8000d50:	1a5b      	subs	r3, r3, r1
 8000d52:	b2a4      	uxth	r4, r4
 8000d54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d58:	fb08 3310 	mls	r3, r8, r0, r3
 8000d5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d60:	fb00 f707 	mul.w	r7, r0, r7
 8000d64:	42a7      	cmp	r7, r4
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x92>
 8000d68:	eb1c 0404 	adds.w	r4, ip, r4
 8000d6c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d70:	f080 810a 	bcs.w	8000f88 <__udivmoddi4+0x29c>
 8000d74:	42a7      	cmp	r7, r4
 8000d76:	f240 8107 	bls.w	8000f88 <__udivmoddi4+0x29c>
 8000d7a:	4464      	add	r4, ip
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d82:	1be4      	subs	r4, r4, r7
 8000d84:	2600      	movs	r6, #0
 8000d86:	b11d      	cbz	r5, 8000d90 <__udivmoddi4+0xa4>
 8000d88:	40d4      	lsrs	r4, r2
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d909      	bls.n	8000dae <__udivmoddi4+0xc2>
 8000d9a:	2d00      	cmp	r5, #0
 8000d9c:	f000 80ef 	beq.w	8000f7e <__udivmoddi4+0x292>
 8000da0:	2600      	movs	r6, #0
 8000da2:	e9c5 0100 	strd	r0, r1, [r5]
 8000da6:	4630      	mov	r0, r6
 8000da8:	4631      	mov	r1, r6
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	fab3 f683 	clz	r6, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d14a      	bne.n	8000e4c <__udivmoddi4+0x160>
 8000db6:	428b      	cmp	r3, r1
 8000db8:	d302      	bcc.n	8000dc0 <__udivmoddi4+0xd4>
 8000dba:	4282      	cmp	r2, r0
 8000dbc:	f200 80f9 	bhi.w	8000fb2 <__udivmoddi4+0x2c6>
 8000dc0:	1a84      	subs	r4, r0, r2
 8000dc2:	eb61 0303 	sbc.w	r3, r1, r3
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	469e      	mov	lr, r3
 8000dca:	2d00      	cmp	r5, #0
 8000dcc:	d0e0      	beq.n	8000d90 <__udivmoddi4+0xa4>
 8000dce:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dd2:	e7dd      	b.n	8000d90 <__udivmoddi4+0xa4>
 8000dd4:	b902      	cbnz	r2, 8000dd8 <__udivmoddi4+0xec>
 8000dd6:	deff      	udf	#255	; 0xff
 8000dd8:	fab2 f282 	clz	r2, r2
 8000ddc:	2a00      	cmp	r2, #0
 8000dde:	f040 8092 	bne.w	8000f06 <__udivmoddi4+0x21a>
 8000de2:	eba1 010c 	sub.w	r1, r1, ip
 8000de6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dea:	fa1f fe8c 	uxth.w	lr, ip
 8000dee:	2601      	movs	r6, #1
 8000df0:	0c20      	lsrs	r0, r4, #16
 8000df2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000df6:	fb07 1113 	mls	r1, r7, r3, r1
 8000dfa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfe:	fb0e f003 	mul.w	r0, lr, r3
 8000e02:	4288      	cmp	r0, r1
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x12c>
 8000e06:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0x12a>
 8000e10:	4288      	cmp	r0, r1
 8000e12:	f200 80cb 	bhi.w	8000fac <__udivmoddi4+0x2c0>
 8000e16:	4643      	mov	r3, r8
 8000e18:	1a09      	subs	r1, r1, r0
 8000e1a:	b2a4      	uxth	r4, r4
 8000e1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e20:	fb07 1110 	mls	r1, r7, r0, r1
 8000e24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e28:	fb0e fe00 	mul.w	lr, lr, r0
 8000e2c:	45a6      	cmp	lr, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x156>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x154>
 8000e3a:	45a6      	cmp	lr, r4
 8000e3c:	f200 80bb 	bhi.w	8000fb6 <__udivmoddi4+0x2ca>
 8000e40:	4608      	mov	r0, r1
 8000e42:	eba4 040e 	sub.w	r4, r4, lr
 8000e46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e4a:	e79c      	b.n	8000d86 <__udivmoddi4+0x9a>
 8000e4c:	f1c6 0720 	rsb	r7, r6, #32
 8000e50:	40b3      	lsls	r3, r6
 8000e52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000e5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e62:	431c      	orrs	r4, r3
 8000e64:	40f9      	lsrs	r1, r7
 8000e66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000e6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e72:	0c20      	lsrs	r0, r4, #16
 8000e74:	fa1f fe8c 	uxth.w	lr, ip
 8000e78:	fb09 1118 	mls	r1, r9, r8, r1
 8000e7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e80:	fb08 f00e 	mul.w	r0, r8, lr
 8000e84:	4288      	cmp	r0, r1
 8000e86:	fa02 f206 	lsl.w	r2, r2, r6
 8000e8a:	d90b      	bls.n	8000ea4 <__udivmoddi4+0x1b8>
 8000e8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e90:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e94:	f080 8088 	bcs.w	8000fa8 <__udivmoddi4+0x2bc>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f240 8085 	bls.w	8000fa8 <__udivmoddi4+0x2bc>
 8000e9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea2:	4461      	add	r1, ip
 8000ea4:	1a09      	subs	r1, r1, r0
 8000ea6:	b2a4      	uxth	r4, r4
 8000ea8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eac:	fb09 1110 	mls	r1, r9, r0, r1
 8000eb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb8:	458e      	cmp	lr, r1
 8000eba:	d908      	bls.n	8000ece <__udivmoddi4+0x1e2>
 8000ebc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ec4:	d26c      	bcs.n	8000fa0 <__udivmoddi4+0x2b4>
 8000ec6:	458e      	cmp	lr, r1
 8000ec8:	d96a      	bls.n	8000fa0 <__udivmoddi4+0x2b4>
 8000eca:	3802      	subs	r0, #2
 8000ecc:	4461      	add	r1, ip
 8000ece:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ed2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ed6:	eba1 010e 	sub.w	r1, r1, lr
 8000eda:	42a1      	cmp	r1, r4
 8000edc:	46c8      	mov	r8, r9
 8000ede:	46a6      	mov	lr, r4
 8000ee0:	d356      	bcc.n	8000f90 <__udivmoddi4+0x2a4>
 8000ee2:	d053      	beq.n	8000f8c <__udivmoddi4+0x2a0>
 8000ee4:	b15d      	cbz	r5, 8000efe <__udivmoddi4+0x212>
 8000ee6:	ebb3 0208 	subs.w	r2, r3, r8
 8000eea:	eb61 010e 	sbc.w	r1, r1, lr
 8000eee:	fa01 f707 	lsl.w	r7, r1, r7
 8000ef2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ef6:	40f1      	lsrs	r1, r6
 8000ef8:	431f      	orrs	r7, r3
 8000efa:	e9c5 7100 	strd	r7, r1, [r5]
 8000efe:	2600      	movs	r6, #0
 8000f00:	4631      	mov	r1, r6
 8000f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f06:	f1c2 0320 	rsb	r3, r2, #32
 8000f0a:	40d8      	lsrs	r0, r3
 8000f0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f10:	fa21 f303 	lsr.w	r3, r1, r3
 8000f14:	4091      	lsls	r1, r2
 8000f16:	4301      	orrs	r1, r0
 8000f18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f1c:	fa1f fe8c 	uxth.w	lr, ip
 8000f20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f24:	fb07 3610 	mls	r6, r7, r0, r3
 8000f28:	0c0b      	lsrs	r3, r1, #16
 8000f2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000f32:	429e      	cmp	r6, r3
 8000f34:	fa04 f402 	lsl.w	r4, r4, r2
 8000f38:	d908      	bls.n	8000f4c <__udivmoddi4+0x260>
 8000f3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f42:	d22f      	bcs.n	8000fa4 <__udivmoddi4+0x2b8>
 8000f44:	429e      	cmp	r6, r3
 8000f46:	d92d      	bls.n	8000fa4 <__udivmoddi4+0x2b8>
 8000f48:	3802      	subs	r0, #2
 8000f4a:	4463      	add	r3, ip
 8000f4c:	1b9b      	subs	r3, r3, r6
 8000f4e:	b289      	uxth	r1, r1
 8000f50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f54:	fb07 3316 	mls	r3, r7, r6, r3
 8000f58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000f60:	428b      	cmp	r3, r1
 8000f62:	d908      	bls.n	8000f76 <__udivmoddi4+0x28a>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f6c:	d216      	bcs.n	8000f9c <__udivmoddi4+0x2b0>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d914      	bls.n	8000f9c <__udivmoddi4+0x2b0>
 8000f72:	3e02      	subs	r6, #2
 8000f74:	4461      	add	r1, ip
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f7c:	e738      	b.n	8000df0 <__udivmoddi4+0x104>
 8000f7e:	462e      	mov	r6, r5
 8000f80:	4628      	mov	r0, r5
 8000f82:	e705      	b.n	8000d90 <__udivmoddi4+0xa4>
 8000f84:	4606      	mov	r6, r0
 8000f86:	e6e3      	b.n	8000d50 <__udivmoddi4+0x64>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6f8      	b.n	8000d7e <__udivmoddi4+0x92>
 8000f8c:	454b      	cmp	r3, r9
 8000f8e:	d2a9      	bcs.n	8000ee4 <__udivmoddi4+0x1f8>
 8000f90:	ebb9 0802 	subs.w	r8, r9, r2
 8000f94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f98:	3801      	subs	r0, #1
 8000f9a:	e7a3      	b.n	8000ee4 <__udivmoddi4+0x1f8>
 8000f9c:	4646      	mov	r6, r8
 8000f9e:	e7ea      	b.n	8000f76 <__udivmoddi4+0x28a>
 8000fa0:	4620      	mov	r0, r4
 8000fa2:	e794      	b.n	8000ece <__udivmoddi4+0x1e2>
 8000fa4:	4640      	mov	r0, r8
 8000fa6:	e7d1      	b.n	8000f4c <__udivmoddi4+0x260>
 8000fa8:	46d0      	mov	r8, sl
 8000faa:	e77b      	b.n	8000ea4 <__udivmoddi4+0x1b8>
 8000fac:	3b02      	subs	r3, #2
 8000fae:	4461      	add	r1, ip
 8000fb0:	e732      	b.n	8000e18 <__udivmoddi4+0x12c>
 8000fb2:	4630      	mov	r0, r6
 8000fb4:	e709      	b.n	8000dca <__udivmoddi4+0xde>
 8000fb6:	4464      	add	r4, ip
 8000fb8:	3802      	subs	r0, #2
 8000fba:	e742      	b.n	8000e42 <__udivmoddi4+0x156>
 8000fbc:	0000      	movs	r0, r0
	...

08000fc0 <UWB_pdoa>:
uint8_t pdoa_message_data[40]; // Will hold the data to send to the virtual COM
//static uint8_t rx_buffer[FRAME_LEN_MAX];
/**
 * Application entry point.
 */
int UWB_pdoa(void){
 8000fc0:	b5b0      	push	{r4, r5, r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af04      	add	r7, sp, #16

    uint32_t dev_id;
    uint16_t frame_len;

    unsigned char car_f = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	73fb      	strb	r3, [r7, #15]
    unsigned char tli_f = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	73bb      	strb	r3, [r7, #14]


    /* Sends application name to test_run_info function. */

    port_set_dw_ic_spi_fastrate();
 8000fce:	f000 fce5 	bl	800199c <port_set_dw_ic_spi_fastrate>

    /* Reset DW IC */
    reset_DWIC(); /* Target specific drive of RSTn line into DW IC low for a period. */
 8000fd2:	f000 fc63 	bl	800189c <reset_DWIC>

    Sleep(2); // Time needed for DW3000 to start up (transition from INIT_RC to IDLE_RC
 8000fd6:	2002      	movs	r0, #2
 8000fd8:	f000 fc34 	bl	8001844 <Sleep>

    /* Probe for the correct device driver. */
    dwt_probe((struct dwt_probe_s *)&dw3000_probe_interf);
 8000fdc:	488c      	ldr	r0, [pc, #560]	; (8001210 <UWB_pdoa+0x250>)
 8000fde:	f004 f933 	bl	8005248 <dwt_probe>

    dev_id = dwt_readdevid();
 8000fe2:	f004 f97d 	bl	80052e0 <dwt_readdevid>
 8000fe6:	60b8      	str	r0, [r7, #8]


    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */ { };
 8000fe8:	bf00      	nop
 8000fea:	f004 fa85 	bl	80054f8 <dwt_checkidlerc>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d0fa      	beq.n	8000fea <UWB_pdoa+0x2a>

    if (dwt_initialise(DWT_DW_IDLE) == DWT_ERROR)
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f004 f993 	bl	8005320 <dwt_initialise>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001000:	d103      	bne.n	800100a <UWB_pdoa+0x4a>
    {
        test_run_info((unsigned char *)"INIT FAILED");
 8001002:	4884      	ldr	r0, [pc, #528]	; (8001214 <UWB_pdoa+0x254>)
 8001004:	f000 fd98 	bl	8001b38 <test_run_info>
        while (1) { };
 8001008:	e7fe      	b.n	8001008 <UWB_pdoa+0x48>
    }

    /* Configure DW3000. */
    /* if the dwt_configure returns DWT_ERROR either the PLL or RX calibration has failed the host should reset the device */
    if (dwt_configure(&config_PDOA))
 800100a:	4883      	ldr	r0, [pc, #524]	; (8001218 <UWB_pdoa+0x258>)
 800100c:	f004 f994 	bl	8005338 <dwt_configure>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <UWB_pdoa+0x5e>
    {
        test_run_info((unsigned char *)"CONFIG FAILED     ");
 8001016:	4881      	ldr	r0, [pc, #516]	; (800121c <UWB_pdoa+0x25c>)
 8001018:	f000 fd8e 	bl	8001b38 <test_run_info>
        while (1) { };
 800101c:	e7fe      	b.n	800101c <UWB_pdoa+0x5c>
    }

    /* Register RX call-back. */
    dwt_setcallbacks(NULL, *rx_ok_cb, *rx_err_cb, *rx_err_cb, NULL, NULL, NULL);
 800101e:	2300      	movs	r3, #0
 8001020:	9302      	str	r3, [sp, #8]
 8001022:	2300      	movs	r3, #0
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	2300      	movs	r3, #0
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	4b7d      	ldr	r3, [pc, #500]	; (8001220 <UWB_pdoa+0x260>)
 800102c:	4a7c      	ldr	r2, [pc, #496]	; (8001220 <UWB_pdoa+0x260>)
 800102e:	497d      	ldr	r1, [pc, #500]	; (8001224 <UWB_pdoa+0x264>)
 8001030:	2000      	movs	r0, #0
 8001032:	f004 fa4f 	bl	80054d4 <dwt_setcallbacks>

    /* Enable wanted interrupts (RX good frames and RX errors). */
    dwt_setinterrupt(DWT_INT_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_ERR, 0, DWT_ENABLE_INT);
 8001036:	2201      	movs	r2, #1
 8001038:	2100      	movs	r1, #0
 800103a:	487b      	ldr	r0, [pc, #492]	; (8001228 <UWB_pdoa+0x268>)
 800103c:	f004 fa7a 	bl	8005534 <dwt_setinterrupt>

    /*Clearing the SPI ready interrupt*/
    dwt_writesysstatuslo(DWT_INT_RCINIT_BIT_MASK | DWT_INT_SPIRDY_BIT_MASK);
 8001040:	f04f 70c0 	mov.w	r0, #25165824	; 0x1800000
 8001044:	f004 faec 	bl	8005620 <dwt_writesysstatuslo>

    /* Install DW IC IRQ handler. */
    port_set_dwic_isr(dwt_isr);
 8001048:	4878      	ldr	r0, [pc, #480]	; (800122c <UWB_pdoa+0x26c>)
 800104a:	f000 fcf5 	bl	8001a38 <port_set_dwic_isr>

    /* Activate reception immediately. See NOTE 1 below. */
    dwt_rxenable(DWT_START_RX_IMMEDIATE);
 800104e:	2000      	movs	r0, #0
 8001050:	f004 fa22 	bl	8005498 <dwt_rxenable>

    dwt_setleds(DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK);
 8001054:	2003      	movs	r0, #3
 8001056:	f004 fad1 	bl	80055fc <dwt_setleds>
    /*loop forever receiving frames*/

    while (!(tli_f && car_f)){
 800105a:	e0c1      	b.n	80011e0 <UWB_pdoa+0x220>

    	int goodSts = 0; /* Used for checking STS quality in received signal */
 800105c:	2300      	movs	r3, #0
 800105e:	607b      	str	r3, [r7, #4]
    	int16_t stsQual; /* This will contain STS quality index */

    	    // Checking STS quality and STS status. See note 4
    	if (((goodSts = dwt_readstsquality(&stsQual)) >= 0)){
 8001060:	463b      	mov	r3, r7
 8001062:	4618      	mov	r0, r3
 8001064:	f004 fabc 	bl	80055e0 <dwt_readstsquality>
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	db05      	blt.n	800107c <UWB_pdoa+0xbc>
    	        pdoa_val = dwt_readpdoa();
 8001070:	f004 f9de 	bl	8005430 <dwt_readpdoa>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	4b6d      	ldr	r3, [pc, #436]	; (8001230 <UWB_pdoa+0x270>)
 800107a:	801a      	strh	r2, [r3, #0]
    	    }

    	memset(rx_buffer2, 0, sizeof(rx_buffer2)); //meg_rx
 800107c:	227f      	movs	r2, #127	; 0x7f
 800107e:	2100      	movs	r1, #0
 8001080:	486c      	ldr	r0, [pc, #432]	; (8001234 <UWB_pdoa+0x274>)
 8001082:	f012 fe57 	bl	8013d34 <memset>
    	dwt_rxenable(DWT_START_RX_IMMEDIATE);
 8001086:	2000      	movs	r0, #0
 8001088:	f004 fa06 	bl	8005498 <dwt_rxenable>
    	frame_len = dwt_getframelength();
 800108c:	f004 fafe 	bl	800568c <dwt_getframelength>
 8001090:	4603      	mov	r3, r0
 8001092:	807b      	strh	r3, [r7, #2]

    	if (frame_len <= FRAME_LEN_MAX){
 8001094:	887b      	ldrh	r3, [r7, #2]
 8001096:	2b7f      	cmp	r3, #127	; 0x7f
 8001098:	d807      	bhi.n	80010aa <UWB_pdoa+0xea>

    		dwt_readrxdata(rx_buffer2, frame_len - FCS_LEN, 0); /* No need to read the FCS/CRC. */
 800109a:	887b      	ldrh	r3, [r7, #2]
 800109c:	3b02      	subs	r3, #2
 800109e:	b29b      	uxth	r3, r3
 80010a0:	2200      	movs	r2, #0
 80010a2:	4619      	mov	r1, r3
 80010a4:	4863      	ldr	r0, [pc, #396]	; (8001234 <UWB_pdoa+0x274>)
 80010a6:	f004 fa79 	bl	800559c <dwt_readrxdata>
		}

		/* Clear good RX frame event in the DW IC status register. */
		dwt_writesysstatuslo(DWT_INT_RXFCG_BIT_MASK);
 80010aa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80010ae:	f004 fab7 	bl	8005620 <dwt_writesysstatuslo>



        if ((last_pdoa_val != pdoa_val)&&(pdoa_val != 0)){
 80010b2:	4b61      	ldr	r3, [pc, #388]	; (8001238 <UWB_pdoa+0x278>)
 80010b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010b8:	4b5d      	ldr	r3, [pc, #372]	; (8001230 <UWB_pdoa+0x270>)
 80010ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010be:	429a      	cmp	r2, r3
 80010c0:	f000 808e 	beq.w	80011e0 <UWB_pdoa+0x220>
 80010c4:	4b5a      	ldr	r3, [pc, #360]	; (8001230 <UWB_pdoa+0x270>)
 80010c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f000 8088 	beq.w	80011e0 <UWB_pdoa+0x220>

    		last_pdoa_val = pdoa_val;
 80010d0:	4b57      	ldr	r3, [pc, #348]	; (8001230 <UWB_pdoa+0x270>)
 80010d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010d6:	4b58      	ldr	r3, [pc, #352]	; (8001238 <UWB_pdoa+0x278>)
 80010d8:	801a      	strh	r2, [r3, #0]

    		pdoa_deg  = ((float)last_pdoa_val / (1 << 11)) * 180 / M_PI;
 80010da:	4b57      	ldr	r3, [pc, #348]	; (8001238 <UWB_pdoa+0x278>)
 80010dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e0:	ee07 3a90 	vmov	s15, r3
 80010e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010e8:	eddf 6a54 	vldr	s13, [pc, #336]	; 800123c <UWB_pdoa+0x27c>
 80010ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010f0:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001240 <UWB_pdoa+0x280>
 80010f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010f8:	ee17 0a90 	vmov	r0, s15
 80010fc:	f7ff fa5e 	bl	80005bc <__aeabi_f2d>
 8001100:	a33f      	add	r3, pc, #252	; (adr r3, 8001200 <UWB_pdoa+0x240>)
 8001102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001106:	f7ff fbdb 	bl	80008c0 <__aeabi_ddiv>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4610      	mov	r0, r2
 8001110:	4619      	mov	r1, r3
 8001112:	f7ff fd83 	bl	8000c1c <__aeabi_d2f>
 8001116:	4603      	mov	r3, r0
 8001118:	4a4a      	ldr	r2, [pc, #296]	; (8001244 <UWB_pdoa+0x284>)
 800111a:	6013      	str	r3, [r2, #0]
    		pdoa_deg = fmod(pdoa_deg - pdoa_interval_shift + 540.0f, 360.0f) + pdoa_interval_shift - 180.0f;
 800111c:	4b49      	ldr	r3, [pc, #292]	; (8001244 <UWB_pdoa+0x284>)
 800111e:	edd3 7a00 	vldr	s15, [r3]
 8001122:	eebb 7a06 	vmov.f32	s14, #182	; 0xc1b00000 -22.0
 8001126:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800112a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001248 <UWB_pdoa+0x288>
 800112e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001132:	ee17 0a90 	vmov	r0, s15
 8001136:	f7ff fa41 	bl	80005bc <__aeabi_f2d>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	ed9f 1b32 	vldr	d1, [pc, #200]	; 8001208 <UWB_pdoa+0x248>
 8001142:	ec43 2b10 	vmov	d0, r2, r3
 8001146:	f014 fc9f 	bl	8015a88 <fmod>
 800114a:	ec55 4b10 	vmov	r4, r5, d0
 800114e:	4b3f      	ldr	r3, [pc, #252]	; (800124c <UWB_pdoa+0x28c>)
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fa33 	bl	80005bc <__aeabi_f2d>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4620      	mov	r0, r4
 800115c:	4629      	mov	r1, r5
 800115e:	f7ff f8cf 	bl	8000300 <__adddf3>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4610      	mov	r0, r2
 8001168:	4619      	mov	r1, r3
 800116a:	f04f 0200 	mov.w	r2, #0
 800116e:	4b38      	ldr	r3, [pc, #224]	; (8001250 <UWB_pdoa+0x290>)
 8001170:	f7ff f8c4 	bl	80002fc <__aeabi_dsub>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4610      	mov	r0, r2
 800117a:	4619      	mov	r1, r3
 800117c:	f7ff fd4e 	bl	8000c1c <__aeabi_d2f>
 8001180:	4603      	mov	r3, r0
 8001182:	4a30      	ldr	r2, [pc, #192]	; (8001244 <UWB_pdoa+0x284>)
 8001184:	6013      	str	r3, [r2, #0]


            if (rx_buffer2[2] == 'T' && tli_f == 0){
 8001186:	4b2b      	ldr	r3, [pc, #172]	; (8001234 <UWB_pdoa+0x274>)
 8001188:	789b      	ldrb	r3, [r3, #2]
 800118a:	2b54      	cmp	r3, #84	; 0x54
 800118c:	d114      	bne.n	80011b8 <UWB_pdoa+0x1f8>
 800118e:	7bbb      	ldrb	r3, [r7, #14]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d111      	bne.n	80011b8 <UWB_pdoa+0x1f8>
            	sprintf((char *)&data_rx.T_pdoa, "%d", (int)pdoa_deg);
 8001194:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <UWB_pdoa+0x284>)
 8001196:	edd3 7a00 	vldr	s15, [r3]
 800119a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800119e:	ee17 2a90 	vmov	r2, s15
 80011a2:	492c      	ldr	r1, [pc, #176]	; (8001254 <UWB_pdoa+0x294>)
 80011a4:	482c      	ldr	r0, [pc, #176]	; (8001258 <UWB_pdoa+0x298>)
 80011a6:	f014 fa0f 	bl	80155c8 <siprintf>
            	data_rx.T_data[0] = (unsigned char)rx_buffer2[9];
 80011aa:	4b22      	ldr	r3, [pc, #136]	; (8001234 <UWB_pdoa+0x274>)
 80011ac:	7a5a      	ldrb	r2, [r3, #9]
 80011ae:	4b2b      	ldr	r3, [pc, #172]	; (800125c <UWB_pdoa+0x29c>)
 80011b0:	765a      	strb	r2, [r3, #25]
            	tli_f = 1;
 80011b2:	2301      	movs	r3, #1
 80011b4:	73bb      	strb	r3, [r7, #14]
 80011b6:	e013      	b.n	80011e0 <UWB_pdoa+0x220>

//            	test_run_info((unsigned char *)&rx_buffer2 + 9);
            }
            else if (rx_buffer2[2] == 'D' &&car_f == 0){
 80011b8:	4b1e      	ldr	r3, [pc, #120]	; (8001234 <UWB_pdoa+0x274>)
 80011ba:	789b      	ldrb	r3, [r3, #2]
 80011bc:	2b44      	cmp	r3, #68	; 0x44
 80011be:	d10f      	bne.n	80011e0 <UWB_pdoa+0x220>
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10c      	bne.n	80011e0 <UWB_pdoa+0x220>
            	sprintf((char *)&data_rx.C_pdoa, "%d", (int)pdoa_deg);
 80011c6:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <UWB_pdoa+0x284>)
 80011c8:	edd3 7a00 	vldr	s15, [r3]
 80011cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011d0:	ee17 2a90 	vmov	r2, s15
 80011d4:	491f      	ldr	r1, [pc, #124]	; (8001254 <UWB_pdoa+0x294>)
 80011d6:	4822      	ldr	r0, [pc, #136]	; (8001260 <UWB_pdoa+0x2a0>)
 80011d8:	f014 f9f6 	bl	80155c8 <siprintf>
            	car_f = 1;
 80011dc:	2301      	movs	r3, #1
 80011de:	73fb      	strb	r3, [r7, #15]
    while (!(tli_f && car_f)){
 80011e0:	7bbb      	ldrb	r3, [r7, #14]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f43f af3a 	beq.w	800105c <UWB_pdoa+0x9c>
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f43f af36 	beq.w	800105c <UWB_pdoa+0x9c>
            }
        }
    }
    return DWT_SUCCESS;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bdb0      	pop	{r4, r5, r7, pc}
 80011fa:	bf00      	nop
 80011fc:	f3af 8000 	nop.w
 8001200:	54442d18 	.word	0x54442d18
 8001204:	400921fb 	.word	0x400921fb
 8001208:	00000000 	.word	0x00000000
 800120c:	40768000 	.word	0x40768000
 8001210:	08015c1c 	.word	0x08015c1c
 8001214:	08015b30 	.word	0x08015b30
 8001218:	20000000 	.word	0x20000000
 800121c:	08015b3c 	.word	0x08015b3c
 8001220:	080012a1 	.word	0x080012a1
 8001224:	08001265 	.word	0x08001265
 8001228:	3405d000 	.word	0x3405d000
 800122c:	08005521 	.word	0x08005521
 8001230:	2000000e 	.word	0x2000000e
 8001234:	2000026c 	.word	0x2000026c
 8001238:	200002ec 	.word	0x200002ec
 800123c:	45000000 	.word	0x45000000
 8001240:	43340000 	.word	0x43340000
 8001244:	20000268 	.word	0x20000268
 8001248:	44070000 	.word	0x44070000
 800124c:	c1b00000 	.word	0xc1b00000
 8001250:	40668000 	.word	0x40668000
 8001254:	08015b50 	.word	0x08015b50
 8001258:	2000025f 	.word	0x2000025f
 800125c:	2000024c 	.word	0x2000024c
 8001260:	20000252 	.word	0x20000252

08001264 <rx_ok_cb>:
 *
 * @param  cb_data  callback data
 *
 * @return  none
 */
static void rx_ok_cb(const dwt_cb_data_t *cb_data){
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]


    int goodSts = 0; /* Used for checking STS quality in received signal */
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
    int16_t stsQual; /* This will contain STS quality index */

    (void)cb_data;
    // Checking STS quality and STS status. See note 4
    if (((goodSts = dwt_readstsquality(&stsQual)) >= 0))
 8001270:	f107 030a 	add.w	r3, r7, #10
 8001274:	4618      	mov	r0, r3
 8001276:	f004 f9b3 	bl	80055e0 <dwt_readstsquality>
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2b00      	cmp	r3, #0
 8001280:	db05      	blt.n	800128e <rx_ok_cb+0x2a>
    {
        pdoa_val = dwt_readpdoa();
 8001282:	f004 f8d5 	bl	8005430 <dwt_readpdoa>
 8001286:	4603      	mov	r3, r0
 8001288:	461a      	mov	r2, r3
 800128a:	4b04      	ldr	r3, [pc, #16]	; (800129c <rx_ok_cb+0x38>)
 800128c:	801a      	strh	r2, [r3, #0]
    }

    dwt_rxenable(DWT_START_RX_IMMEDIATE);
 800128e:	2000      	movs	r0, #0
 8001290:	f004 f902 	bl	8005498 <dwt_rxenable>
}
 8001294:	bf00      	nop
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	2000000e 	.word	0x2000000e

080012a0 <rx_err_cb>:
 * @param  cb_data  callback data
 *
 * @return  none
 */
static void rx_err_cb(const dwt_cb_data_t *cb_data)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
    (void)cb_data;
    dwt_rxenable(DWT_START_RX_IMMEDIATE);
 80012a8:	2000      	movs	r0, #0
 80012aa:	f004 f8f5 	bl	8005498 <dwt_rxenable>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <ss_twr_initiator_RX>:
 *
 * @param  none
 *
 * @return none
 */
int ss_twr_initiator_RX(uint8_t *data){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	; 0x28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]


    /* Display application name on LCD. */

    /* Configure SPI rate, DW3000 supports up to 36 MHz */
    port_set_dw_ic_spi_fastrate();
 80012c0:	f000 fb6c 	bl	800199c <port_set_dw_ic_spi_fastrate>

    /* Reset and initialize DW chip. */
    reset_DWIC(); /* Target specific drive of RSTn line into DW3000 low for a period. */
 80012c4:	f000 faea 	bl	800189c <reset_DWIC>

    Sleep(2); // Time needed for DW3000 to start up (transition from INIT_RC to IDLE_RC, or could wait for SPIRDY event)
 80012c8:	2002      	movs	r0, #2
 80012ca:	f000 fabb 	bl	8001844 <Sleep>

    /* Probe for the correct device driver. */
    dwt_probe((struct dwt_probe_s *)&dw3000_probe_interf);
 80012ce:	487a      	ldr	r0, [pc, #488]	; (80014b8 <ss_twr_initiator_RX+0x200>)
 80012d0:	f003 ffba 	bl	8005248 <dwt_probe>

    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */ { };
 80012d4:	bf00      	nop
 80012d6:	f004 f90f 	bl	80054f8 <dwt_checkidlerc>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d0fa      	beq.n	80012d6 <ss_twr_initiator_RX+0x1e>
    if (dwt_initialise(DWT_DW_INIT) == DWT_ERROR)
 80012e0:	2000      	movs	r0, #0
 80012e2:	f004 f81d 	bl	8005320 <dwt_initialise>
 80012e6:	4603      	mov	r3, r0
 80012e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012ec:	d103      	bne.n	80012f6 <ss_twr_initiator_RX+0x3e>
    {
        test_run_info((unsigned char *)"INIT FAILED     ");
 80012ee:	4873      	ldr	r0, [pc, #460]	; (80014bc <ss_twr_initiator_RX+0x204>)
 80012f0:	f000 fc22 	bl	8001b38 <test_run_info>
        while (1) { };
 80012f4:	e7fe      	b.n	80012f4 <ss_twr_initiator_RX+0x3c>
    }

    /* Enabling LEDs here for debug so that for each TX the D1 LED will flash on DW3000 red eval-shield boards. */
    dwt_setleds(DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK);
 80012f6:	2003      	movs	r0, #3
 80012f8:	f004 f980 	bl	80055fc <dwt_setleds>

    /* Configure DW IC. See NOTE 13 below. */
    /* if the dwt_configure returns DWT_ERROR either the PLL or RX calibration has failed the host should reset the device */
    if (dwt_configure(&config))
 80012fc:	4870      	ldr	r0, [pc, #448]	; (80014c0 <ss_twr_initiator_RX+0x208>)
 80012fe:	f004 f81b 	bl	8005338 <dwt_configure>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d003      	beq.n	8001310 <ss_twr_initiator_RX+0x58>
    {
        test_run_info((unsigned char *)"CONFIG FAILED     ");
 8001308:	486e      	ldr	r0, [pc, #440]	; (80014c4 <ss_twr_initiator_RX+0x20c>)
 800130a:	f000 fc15 	bl	8001b38 <test_run_info>
        while (1) { };
 800130e:	e7fe      	b.n	800130e <ss_twr_initiator_RX+0x56>
    }

    /* Configure the TX spectrum parameters (power, PG delay and PG count) */
    dwt_configuretxrf(&txconfig_options);
 8001310:	486d      	ldr	r0, [pc, #436]	; (80014c8 <ss_twr_initiator_RX+0x210>)
 8001312:	f004 f81d 	bl	8005350 <dwt_configuretxrf>

    /* Apply default antenna delay value. See NOTE 2 below. */
    dwt_setrxantennadelay(RX_ANT_DLY);
 8001316:	f244 0001 	movw	r0, #16385	; 0x4001
 800131a:	f004 f825 	bl	8005368 <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
 800131e:	f244 0001 	movw	r0, #16385	; 0x4001
 8001322:	f004 f833 	bl	800538c <dwt_settxantennadelay>

    /* Set expected response's delay and timeout. See NOTE 1 and 5 below.
     * As this example only handles one incoming frame with always the same delay and timeout, those values can be set here once for all. */
    dwt_setrxaftertxdelay(POLL_TX_TO_RESP_RX_DLY_UUS);
 8001326:	20f0      	movs	r0, #240	; 0xf0
 8001328:	f004 f926 	bl	8005578 <dwt_setrxaftertxdelay>
    dwt_setrxtimeout(RESP_RX_TIMEOUT_UUS);
 800132c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001330:	f004 f8be 	bl	80054b0 <dwt_setrxtimeout>

    /* Next can enable TX/RX states output on GPIOs 5 and 6 to help debug, and also TX/RX LEDs
     * Note, in real low power applications the LEDs should not be used. */
    dwt_setlnapamode(DWT_LNA_ENABLE | DWT_PA_ENABLE);
 8001334:	2003      	movs	r0, #3
 8001336:	f003 ffe5 	bl	8005304 <dwt_setlnapamode>

    /* Loop forever initiating ranging exchanges. */
    while (1)
    {
        /* Write frame data to DW IC and prepare transmission. See NOTE 7 below. */
        tx_poll_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 800133a:	4b64      	ldr	r3, [pc, #400]	; (80014cc <ss_twr_initiator_RX+0x214>)
 800133c:	781a      	ldrb	r2, [r3, #0]
 800133e:	4b64      	ldr	r3, [pc, #400]	; (80014d0 <ss_twr_initiator_RX+0x218>)
 8001340:	709a      	strb	r2, [r3, #2]
        dwt_writesysstatuslo(DWT_INT_TXFRS_BIT_MASK);
 8001342:	2080      	movs	r0, #128	; 0x80
 8001344:	f004 f96c 	bl	8005620 <dwt_writesysstatuslo>
        dwt_writetxdata(sizeof(tx_poll_msg), tx_poll_msg, 0); /* Zero offset in TX buffer. */
 8001348:	2200      	movs	r2, #0
 800134a:	4961      	ldr	r1, [pc, #388]	; (80014d0 <ss_twr_initiator_RX+0x218>)
 800134c:	200c      	movs	r0, #12
 800134e:	f004 f82f 	bl	80053b0 <dwt_writetxdata>
        dwt_writetxfctrl(sizeof(tx_poll_msg), 0, 1);          /* Zero offset in TX buffer, ranging. */
 8001352:	2201      	movs	r2, #1
 8001354:	2100      	movs	r1, #0
 8001356:	200c      	movs	r0, #12
 8001358:	f004 f838 	bl	80053cc <dwt_writetxfctrl>

        /* Start transmission, indicating that a response is expected so that reception is enabled automatically after the frame is sent and the delay
         * set by dwt_setrxaftertxdelay() has elapsed. */
        dwt_starttx(DWT_START_TX_IMMEDIATE | DWT_RESPONSE_EXPECTED);
 800135c:	2002      	movs	r0, #2
 800135e:	f004 f843 	bl	80053e8 <dwt_starttx>

        /* We assume that the transmission is achieved correctly, poll for reception of a frame or error/timeout. See NOTE 8 below. */
        waitforsysstatus(&status_reg, NULL, (DWT_INT_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR), 0);
 8001362:	2300      	movs	r3, #0
 8001364:	4a5b      	ldr	r2, [pc, #364]	; (80014d4 <ss_twr_initiator_RX+0x21c>)
 8001366:	2100      	movs	r1, #0
 8001368:	485b      	ldr	r0, [pc, #364]	; (80014d8 <ss_twr_initiator_RX+0x220>)
 800136a:	f000 fba3 	bl	8001ab4 <waitforsysstatus>

        /* Increment frame sequence number after transmission of the poll message (modulo 256). */
        frame_seq_nb++;
 800136e:	4b57      	ldr	r3, [pc, #348]	; (80014cc <ss_twr_initiator_RX+0x214>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	3301      	adds	r3, #1
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4b55      	ldr	r3, [pc, #340]	; (80014cc <ss_twr_initiator_RX+0x214>)
 8001378:	701a      	strb	r2, [r3, #0]

        if (status_reg & DWT_INT_RXFCG_BIT_MASK)
 800137a:	4b57      	ldr	r3, [pc, #348]	; (80014d8 <ss_twr_initiator_RX+0x220>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 8085 	beq.w	8001492 <ss_twr_initiator_RX+0x1da>
        {
            uint16_t frame_len;

            /* Clear good RX frame event in the DW IC status register. */
            dwt_writesysstatuslo(DWT_INT_RXFCG_BIT_MASK);
 8001388:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800138c:	f004 f948 	bl	8005620 <dwt_writesysstatuslo>

            /* A frame has been received, read it into the local buffer. */
            frame_len = dwt_getframelength();
 8001390:	f004 f97c 	bl	800568c <dwt_getframelength>
 8001394:	4603      	mov	r3, r0
 8001396:	84fb      	strh	r3, [r7, #38]	; 0x26
            if (frame_len <= sizeof(rx_buffer))
 8001398:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800139a:	2b14      	cmp	r3, #20
 800139c:	d87c      	bhi.n	8001498 <ss_twr_initiator_RX+0x1e0>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 800139e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013a0:	2200      	movs	r2, #0
 80013a2:	4619      	mov	r1, r3
 80013a4:	484d      	ldr	r0, [pc, #308]	; (80014dc <ss_twr_initiator_RX+0x224>)
 80013a6:	f004 f8f9 	bl	800559c <dwt_readrxdata>

                /* Check that the frame is the expected response from the companion "SS TWR responder" example.
                 * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
                rx_buffer[ALL_MSG_SN_IDX] = 0;
 80013aa:	4b4c      	ldr	r3, [pc, #304]	; (80014dc <ss_twr_initiator_RX+0x224>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	709a      	strb	r2, [r3, #2]
                if (memcmp(rx_buffer, rx_resp_msg, ALL_MSG_COMMON_LEN) == 0)
 80013b0:	220a      	movs	r2, #10
 80013b2:	494b      	ldr	r1, [pc, #300]	; (80014e0 <ss_twr_initiator_RX+0x228>)
 80013b4:	4849      	ldr	r0, [pc, #292]	; (80014dc <ss_twr_initiator_RX+0x224>)
 80013b6:	f012 fc85 	bl	8013cc4 <memcmp>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d16b      	bne.n	8001498 <ss_twr_initiator_RX+0x1e0>
                    uint32_t poll_tx_ts, resp_rx_ts, poll_rx_ts, resp_tx_ts;
                    int32_t rtd_init, rtd_resp;
                    float clockOffsetRatio;

                    /* Retrieve poll transmission and response reception timestamps. See NOTE 9 below. */
                    poll_tx_ts = dwt_readtxtimestamplo32();
 80013c0:	f004 f824 	bl	800540c <dwt_readtxtimestamplo32>
 80013c4:	6238      	str	r0, [r7, #32]
                    resp_rx_ts = dwt_readrxtimestamplo32();
 80013c6:	f004 f847 	bl	8005458 <dwt_readrxtimestamplo32>
 80013ca:	61f8      	str	r0, [r7, #28]

                    /* Read carrier integrator value and calculate clock offset ratio. See NOTE 11 below. */
                    clockOffsetRatio = ((float)dwt_readclockoffset()) / (uint32_t)(1 << 26);
 80013cc:	f004 f8f4 	bl	80055b8 <dwt_readclockoffset>
 80013d0:	4603      	mov	r3, r0
 80013d2:	ee07 3a90 	vmov	s15, r3
 80013d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013da:	eddf 6a42 	vldr	s13, [pc, #264]	; 80014e4 <ss_twr_initiator_RX+0x22c>
 80013de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013e2:	edc7 7a06 	vstr	s15, [r7, #24]

                    /* Get timestamps embedded in response message. */
                    resp_msg_get_ts(&rx_buffer[RESP_MSG_POLL_RX_TS_IDX], &poll_rx_ts);
 80013e6:	f107 030c 	add.w	r3, r7, #12
 80013ea:	4619      	mov	r1, r3
 80013ec:	483e      	ldr	r0, [pc, #248]	; (80014e8 <ss_twr_initiator_RX+0x230>)
 80013ee:	f000 fb3b 	bl	8001a68 <resp_msg_get_ts>
                    resp_msg_get_ts(&rx_buffer[RESP_MSG_RESP_TX_TS_IDX], &resp_tx_ts);
 80013f2:	f107 0308 	add.w	r3, r7, #8
 80013f6:	4619      	mov	r1, r3
 80013f8:	483c      	ldr	r0, [pc, #240]	; (80014ec <ss_twr_initiator_RX+0x234>)
 80013fa:	f000 fb35 	bl	8001a68 <resp_msg_get_ts>

                    /* Compute time of flight and distance, using clock offset ratio to correct for differing local and remote clock rates */
                    rtd_init = resp_rx_ts - poll_tx_ts;
 80013fe:	69fa      	ldr	r2, [r7, #28]
 8001400:	6a3b      	ldr	r3, [r7, #32]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	617b      	str	r3, [r7, #20]
                    rtd_resp = resp_tx_ts - poll_rx_ts;
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	613b      	str	r3, [r7, #16]

                    tof = ((rtd_init - rtd_resp * (1 - clockOffsetRatio)) / 2.0) * DWT_TIME_UNITS;
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	ee07 3a90 	vmov	s15, r3
 8001414:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	ee07 3a90 	vmov	s15, r3
 800141e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001422:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001426:	edd7 7a06 	vldr	s15, [r7, #24]
 800142a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800142e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001432:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001436:	ee17 0a90 	vmov	r0, s15
 800143a:	f7ff f8bf 	bl	80005bc <__aeabi_f2d>
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001446:	f7ff fa3b 	bl	80008c0 <__aeabi_ddiv>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4610      	mov	r0, r2
 8001450:	4619      	mov	r1, r3
 8001452:	a315      	add	r3, pc, #84	; (adr r3, 80014a8 <ss_twr_initiator_RX+0x1f0>)
 8001454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001458:	f7ff f908 	bl	800066c <__aeabi_dmul>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4923      	ldr	r1, [pc, #140]	; (80014f0 <ss_twr_initiator_RX+0x238>)
 8001462:	e9c1 2300 	strd	r2, r3, [r1]
                    distance = tof * SPEED_OF_LIGHT;
 8001466:	4b22      	ldr	r3, [pc, #136]	; (80014f0 <ss_twr_initiator_RX+0x238>)
 8001468:	e9d3 0100 	ldrd	r0, r1, [r3]
 800146c:	a310      	add	r3, pc, #64	; (adr r3, 80014b0 <ss_twr_initiator_RX+0x1f8>)
 800146e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001472:	f7ff f8fb 	bl	800066c <__aeabi_dmul>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	491e      	ldr	r1, [pc, #120]	; (80014f4 <ss_twr_initiator_RX+0x23c>)
 800147c:	e9c1 2300 	strd	r2, r3, [r1]
                    /* Display computed distance on LCD. */
                    //snprintf(dist_str, sizeof(dist_str), "DIST: %3.2f m", distance);
                    sprintf((char *)data, "%3.2f",distance);
 8001480:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <ss_twr_initiator_RX+0x23c>)
 8001482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001486:	491c      	ldr	r1, [pc, #112]	; (80014f8 <ss_twr_initiator_RX+0x240>)
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f014 f89d 	bl	80155c8 <siprintf>

                    return 0;
 800148e:	2300      	movs	r3, #0
 8001490:	e006      	b.n	80014a0 <ss_twr_initiator_RX+0x1e8>
            }
        }
        else
        {
            /* Clear RX error/timeout events in the DW IC status register. */
            dwt_writesysstatuslo(SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 8001492:	481a      	ldr	r0, [pc, #104]	; (80014fc <ss_twr_initiator_RX+0x244>)
 8001494:	f004 f8c4 	bl	8005620 <dwt_writesysstatuslo>
        }

        /* Execute a delay between ranging exchanges. */
        Sleep(RNG_DELAY_MS);
 8001498:	2064      	movs	r0, #100	; 0x64
 800149a:	f000 f9d3 	bl	8001844 <Sleep>
        tx_poll_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 800149e:	e74c      	b.n	800133a <ss_twr_initiator_RX+0x82>
    }
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3728      	adds	r7, #40	; 0x28
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	3bce48fa 	.word	0x3bce48fa
 80014ac:	3db13518 	.word	0x3db13518
 80014b0:	13000000 	.word	0x13000000
 80014b4:	41b1dd19 	.word	0x41b1dd19
 80014b8:	08015c1c 	.word	0x08015c1c
 80014bc:	08015b54 	.word	0x08015b54
 80014c0:	20000010 	.word	0x20000010
 80014c4:	08015b68 	.word	0x08015b68
 80014c8:	20000040 	.word	0x20000040
 80014cc:	200002ee 	.word	0x200002ee
 80014d0:	20000020 	.word	0x20000020
 80014d4:	3427d000 	.word	0x3427d000
 80014d8:	20000304 	.word	0x20000304
 80014dc:	200002f0 	.word	0x200002f0
 80014e0:	2000002c 	.word	0x2000002c
 80014e4:	4c800000 	.word	0x4c800000
 80014e8:	200002fa 	.word	0x200002fa
 80014ec:	200002fe 	.word	0x200002fe
 80014f0:	20000308 	.word	0x20000308
 80014f4:	20000310 	.word	0x20000310
 80014f8:	08015b7c 	.word	0x08015b7c
 80014fc:	34279000 	.word	0x34279000

08001500 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
    decaIrqStatus_t s = port_GetEXT_IRQStatus();
 8001506:	f000 fa7d 	bl	8001a04 <port_GetEXT_IRQStatus>
 800150a:	4603      	mov	r3, r0
 800150c:	607b      	str	r3, [r7, #4]

    if (s)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <decamutexon+0x18>
    {
        port_DisableEXT_IRQ(); // disable the external interrupt line
 8001514:	f000 fa52 	bl	80019bc <port_DisableEXT_IRQ>
    }
    return s; // return state before disable, value is used to re-enable in decamutexoff call
 8001518:	687b      	ldr	r3, [r7, #4]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s) // put a function here that re-enables the interrupt at the end of the critical section
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
    if (s)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <decamutexoff+0x12>
    { // need to check the port state as we can't use level sensitive interrupt on the STM ARM
        port_EnableEXT_IRQ();
 8001530:	f000 fa56 	bl	80019e0 <port_EnableEXT_IRQ>
    }
}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <deca_sleep>:
#include <deca_device_api.h>
#include <port.h>

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_sleep(unsigned int time_ms)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
    Sleep(time_ms);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f000 f97d 	bl	8001844 <Sleep>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <deca_usleep>:

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_usleep(unsigned long time_us)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
    usleep(time_us);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f956 	bl	800180c <usleep>
}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <writetospiwithcrc>:
 * Low level abstract function to write to the SPI when SPI CRC mode is used
 * Takes two separate byte buffers for write header and write data, and a CRC8 byte which is written last
 * returns 0 for success, or -1 for error
 */
int writetospiwithcrc(uint16_t headerLength, const uint8_t *headerBuffer, uint16_t bodyLength, const uint8_t *bodyBuffer, uint8_t crc8)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607b      	str	r3, [r7, #4]
 8001572:	4603      	mov	r3, r0
 8001574:	81fb      	strh	r3, [r7, #14]
 8001576:	4613      	mov	r3, r2
 8001578:	81bb      	strh	r3, [r7, #12]
#ifdef DWT_ENABLE_CRC
    decaIrqStatus_t stat;
    stat = decamutexon();
 800157a:	f7ff ffc1 	bl	8001500 <decamutexon>
 800157e:	6178      	str	r0, [r7, #20]
    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 8001580:	bf00      	nop
 8001582:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <writetospiwithcrc+0x90>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f002 f90f 	bl	80037aa <HAL_SPI_GetState>
 800158c:	4603      	mov	r3, r0
 800158e:	2b01      	cmp	r3, #1
 8001590:	d1f7      	bne.n	8001582 <writetospiwithcrc+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, SPI_CS_state); /**< Put chip select line low */
 8001592:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <writetospiwithcrc+0x94>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	4a1a      	ldr	r2, [pc, #104]	; (8001600 <writetospiwithcrc+0x98>)
 8001598:	7812      	ldrb	r2, [r2, #0]
 800159a:	4619      	mov	r1, r3
 800159c:	4819      	ldr	r0, [pc, #100]	; (8001604 <writetospiwithcrc+0x9c>)
 800159e:	f001 facd 	bl	8002b3c <HAL_GPIO_WritePin>


    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)headerBuffer, headerLength, 10);    /* Send header in polling mode */
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <writetospiwithcrc+0x90>)
 80015a4:	6818      	ldr	r0, [r3, #0]
 80015a6:	89fa      	ldrh	r2, [r7, #14]
 80015a8:	230a      	movs	r3, #10
 80015aa:	68b9      	ldr	r1, [r7, #8]
 80015ac:	f001 ffc1 	bl	8003532 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)bodyBuffer, bodyLength, 10);        /* Send data in polling mode */
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <writetospiwithcrc+0x90>)
 80015b2:	6818      	ldr	r0, [r3, #0]
 80015b4:	89ba      	ldrh	r2, [r7, #12]
 80015b6:	230a      	movs	r3, #10
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	f001 ffba 	bl	8003532 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)&crc8, 1, 10);      /* Send data in polling mode */
 80015be:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <writetospiwithcrc+0x90>)
 80015c0:	6818      	ldr	r0, [r3, #0]
 80015c2:	230a      	movs	r3, #10
 80015c4:	2201      	movs	r2, #1
 80015c6:	f107 0120 	add.w	r1, r7, #32
 80015ca:	f001 ffb2 	bl	8003532 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi,(GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <writetospiwithcrc+0x94>)
 80015d0:	8819      	ldrh	r1, [r3, #0]
 80015d2:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <writetospiwithcrc+0x98>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	bf0c      	ite	eq
 80015da:	2301      	moveq	r3, #1
 80015dc:	2300      	movne	r3, #0
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	461a      	mov	r2, r3
 80015e2:	4808      	ldr	r0, [pc, #32]	; (8001604 <writetospiwithcrc+0x9c>)
 80015e4:	f001 faaa 	bl	8002b3c <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80015e8:	6978      	ldr	r0, [r7, #20]
 80015ea:	f7ff ff9a 	bl	8001522 <decamutexoff>
#endif //DWT_ENABLE_CRC
    return 0;
 80015ee:	2300      	movs	r3, #0
} // end writetospiwithcrc()
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000048 	.word	0x20000048
 80015fc:	2000004c 	.word	0x2000004c
 8001600:	20000400 	.word	0x20000400
 8001604:	40020000 	.word	0x40020000

08001608 <writetospi>:
 * Low level abstract function to write to the SPI
 * Takes two separate byte buffers for write header and write data
 * returns 0 for success, or -1 for error
 */
int writetospi(uint16_t headerLength, const uint8_t *headerBuffer, uint16_t bodyLength, const uint8_t *bodyBuffer)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	4603      	mov	r3, r0
 8001614:	81fb      	strh	r3, [r7, #14]
 8001616:	4613      	mov	r3, r2
 8001618:	81bb      	strh	r3, [r7, #12]
    decaIrqStatus_t stat;
    stat = decamutexon();
 800161a:	f7ff ff71 	bl	8001500 <decamutexon>
 800161e:	6178      	str	r0, [r7, #20]

    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 8001620:	bf00      	nop
 8001622:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <writetospi+0x8c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f002 f8bf 	bl	80037aa <HAL_SPI_GetState>
 800162c:	4603      	mov	r3, r0
 800162e:	2b01      	cmp	r3, #1
 8001630:	d1f7      	bne.n	8001622 <writetospi+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, SPI_CS_state); /**< Put chip select line low */
 8001632:	4b19      	ldr	r3, [pc, #100]	; (8001698 <writetospi+0x90>)
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	4a19      	ldr	r2, [pc, #100]	; (800169c <writetospi+0x94>)
 8001638:	7812      	ldrb	r2, [r2, #0]
 800163a:	4619      	mov	r1, r3
 800163c:	4818      	ldr	r0, [pc, #96]	; (80016a0 <writetospi+0x98>)
 800163e:	f001 fa7d 	bl	8002b3c <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)headerBuffer, headerLength, HAL_MAX_DELAY); /* Send header in polling mode */
 8001642:	4b14      	ldr	r3, [pc, #80]	; (8001694 <writetospi+0x8c>)
 8001644:	6818      	ldr	r0, [r3, #0]
 8001646:	89fa      	ldrh	r2, [r7, #14]
 8001648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800164c:	68b9      	ldr	r1, [r7, #8]
 800164e:	f001 ff70 	bl	8003532 <HAL_SPI_Transmit>

    if(bodyLength != 0)
 8001652:	89bb      	ldrh	r3, [r7, #12]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d007      	beq.n	8001668 <writetospi+0x60>
    {
        HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)bodyBuffer,   bodyLength, HAL_MAX_DELAY);     /* Send data in polling mode */
 8001658:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <writetospi+0x8c>)
 800165a:	6818      	ldr	r0, [r3, #0]
 800165c:	89ba      	ldrh	r2, [r7, #12]
 800165e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	f001 ff65 	bl	8003532 <HAL_SPI_Transmit>
    }

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, (GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 8001668:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <writetospi+0x90>)
 800166a:	8819      	ldrh	r1, [r3, #0]
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <writetospi+0x94>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	bf0c      	ite	eq
 8001674:	2301      	moveq	r3, #1
 8001676:	2300      	movne	r3, #0
 8001678:	b2db      	uxtb	r3, r3
 800167a:	461a      	mov	r2, r3
 800167c:	4808      	ldr	r0, [pc, #32]	; (80016a0 <writetospi+0x98>)
 800167e:	f001 fa5d 	bl	8002b3c <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8001682:	6978      	ldr	r0, [r7, #20]
 8001684:	f7ff ff4d 	bl	8001522 <decamutexoff>

    return 0;
 8001688:	2300      	movs	r3, #0
} // end writetospi()
 800168a:	4618      	mov	r0, r3
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000048 	.word	0x20000048
 8001698:	2000004c 	.word	0x2000004c
 800169c:	20000400 	.word	0x20000400
 80016a0:	40020000 	.word	0x40020000

080016a4 <readfromspi>:
 * returns the offset into read buffer where first byte of read data may be found,
 * or returns -1 if there was an error
 */
//#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength, uint8_t *headerBuffer, uint16_t readlength, uint8_t *readBuffer)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	4603      	mov	r3, r0
 80016b0:	81fb      	strh	r3, [r7, #14]
 80016b2:	4613      	mov	r3, r2
 80016b4:	81bb      	strh	r3, [r7, #12]

    decaIrqStatus_t stat;
    stat = decamutexon();
 80016b6:	f7ff ff23 	bl	8001500 <decamutexon>
 80016ba:	6178      	str	r0, [r7, #20]

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 80016bc:	bf00      	nop
 80016be:	4b2e      	ldr	r3, [pc, #184]	; (8001778 <readfromspi+0xd4>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f002 f871 	bl	80037aa <HAL_SPI_GetState>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d1f7      	bne.n	80016be <readfromspi+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, SPI_CS_state); /**< Put chip select line low */
 80016ce:	4b2b      	ldr	r3, [pc, #172]	; (800177c <readfromspi+0xd8>)
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	4a2b      	ldr	r2, [pc, #172]	; (8001780 <readfromspi+0xdc>)
 80016d4:	7812      	ldrb	r2, [r2, #0]
 80016d6:	4619      	mov	r1, r3
 80016d8:	482a      	ldr	r0, [pc, #168]	; (8001784 <readfromspi+0xe0>)
 80016da:	f001 fa2f 	bl	8002b3c <HAL_GPIO_WritePin>

    /* Send header */
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t*)headerBuffer, headerLength, HAL_MAX_DELAY); //No timeout
 80016de:	4b26      	ldr	r3, [pc, #152]	; (8001778 <readfromspi+0xd4>)
 80016e0:	6818      	ldr	r0, [r3, #0]
 80016e2:	89fa      	ldrh	r2, [r7, #14]
 80016e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	f001 ff22 	bl	8003532 <HAL_SPI_Transmit>

    while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_TXE) == RESET)//Verify that the transmit was ended
 80016ee:	bf00      	nop
 80016f0:	4b21      	ldr	r3, [pc, #132]	; (8001778 <readfromspi+0xd4>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d1f7      	bne.n	80016f0 <readfromspi+0x4c>
    {
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while (readlength-- > 0)
 8001700:	e01f      	b.n	8001742 <readfromspi+0x9e>
    {
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_TXE) == RESET)
 8001702:	bf00      	nop
 8001704:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <readfromspi+0xd4>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b02      	cmp	r3, #2
 8001712:	d1f7      	bne.n	8001704 <readfromspi+0x60>
        {
        }

        hcurrent_active_spi->Instance->DR=0;
 8001714:	4b18      	ldr	r3, [pc, #96]	; (8001778 <readfromspi+0xd4>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2200      	movs	r2, #0
 800171c:	60da      	str	r2, [r3, #12]
        /* set output to 0 (MOSI), this is necessary for
        e.g. when waking up DW3000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_RXNE) == RESET)
 800171e:	bf00      	nop
 8001720:	4b15      	ldr	r3, [pc, #84]	; (8001778 <readfromspi+0xd4>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	2b01      	cmp	r3, #1
 800172e:	d1f7      	bne.n	8001720 <readfromspi+0x7c>
        {
        }

        (*readBuffer++) = hcurrent_active_spi->Instance->DR;  //copy data read form (MISO)
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <readfromspi+0xd4>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68d9      	ldr	r1, [r3, #12]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	607a      	str	r2, [r7, #4]
 800173e:	b2ca      	uxtb	r2, r1
 8001740:	701a      	strb	r2, [r3, #0]
    while (readlength-- > 0)
 8001742:	89bb      	ldrh	r3, [r7, #12]
 8001744:	1e5a      	subs	r2, r3, #1
 8001746:	81ba      	strh	r2, [r7, #12]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1da      	bne.n	8001702 <readfromspi+0x5e>
    }


    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, pin_io_active_spi, (GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <readfromspi+0xd8>)
 800174e:	8819      	ldrh	r1, [r3, #0]
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <readfromspi+0xdc>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	bf0c      	ite	eq
 8001758:	2301      	moveq	r3, #1
 800175a:	2300      	movne	r3, #0
 800175c:	b2db      	uxtb	r3, r3
 800175e:	461a      	mov	r2, r3
 8001760:	4808      	ldr	r0, [pc, #32]	; (8001784 <readfromspi+0xe0>)
 8001762:	f001 f9eb 	bl	8002b3c <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8001766:	6978      	ldr	r0, [r7, #20]
 8001768:	f7ff fedb 	bl	8001522 <decamutexoff>

    return 0;
 800176c:	2300      	movs	r3, #0
} // end readfromspi()
 800176e:	4618      	mov	r0, r3
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000048 	.word	0x20000048
 800177c:	2000004c 	.word	0x2000004c
 8001780:	20000400 	.word	0x20000400
 8001784:	40020000 	.word	0x40020000

08001788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	2b00      	cmp	r3, #0
 8001798:	db0b      	blt.n	80017b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	f003 021f 	and.w	r2, r3, #31
 80017a0:	4907      	ldr	r1, [pc, #28]	; (80017c0 <__NVIC_EnableIRQ+0x38>)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	095b      	lsrs	r3, r3, #5
 80017a8:	2001      	movs	r0, #1
 80017aa:	fa00 f202 	lsl.w	r2, r0, r2
 80017ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	e000e100 	.word	0xe000e100

080017c4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	db12      	blt.n	80017fc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	f003 021f 	and.w	r2, r3, #31
 80017dc:	490a      	ldr	r1, [pc, #40]	; (8001808 <__NVIC_DisableIRQ+0x44>)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	095b      	lsrs	r3, r3, #5
 80017e4:	2001      	movs	r0, #1
 80017e6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ea:	3320      	adds	r3, #32
 80017ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80017f0:	f3bf 8f4f 	dsb	sy
}
 80017f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017f6:	f3bf 8f6f 	isb	sy
}
 80017fa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000e100 	.word	0xe000e100

0800180c <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize("O0")
int usleep(useconds_t usec)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
    unsigned int i;

    usec *= 12;
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	4613      	mov	r3, r2
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	4413      	add	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	607b      	str	r3, [r7, #4]
    for (i = 0; i < usec; i++)
 8001820:	2300      	movs	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	e003      	b.n	800182e <usleep+0x22>
    {
        __NOP();
 8001826:	bf00      	nop
    for (i = 0; i < usec; i++)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	3301      	adds	r3, #1
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	429a      	cmp	r2, r3
 8001834:	d3f7      	bcc.n	8001826 <usleep+0x1a>
    }
    return 0;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <Sleep>:

/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void Sleep(uint32_t x)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f000 fe89 	bl	8002564 <HAL_Delay>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <EXTI_GetITEnStatus>:
 * @brief  Checks whether the specified IRQn line is enabled or not.
 * @param  IRQn: specifies the IRQn line to check.
 * @return "0" when IRQn is "not enabled" and !0 otherwise
 */
ITStatus EXTI_GetITEnStatus(IRQn_Type IRQn)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
    return ((NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) == (uint32_t)RESET) ? (RESET) : (SET);
 8001866:	4a0c      	ldr	r2, [pc, #48]	; (8001898 <EXTI_GetITEnStatus+0x3c>)
 8001868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186c:	095b      	lsrs	r3, r3, #5
 800186e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	f003 031f 	and.w	r3, r3, #31
 8001878:	fa22 f303 	lsr.w	r3, r2, r3
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	2b00      	cmp	r3, #0
 8001882:	bf14      	ite	ne
 8001884:	2301      	movne	r3, #1
 8001886:	2300      	moveq	r3, #0
 8001888:	b2db      	uxtb	r3, r3
}
 800188a:	4618      	mov	r0, r3
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000e100 	.word	0xe000e100

0800189c <reset_DWIC>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW IC by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DWIC(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RESET_Pin;
 80018a2:	2301      	movs	r3, #1
 80018a4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80018a6:	2311      	movs	r3, #17
 80018a8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	4619      	mov	r1, r3
 80018b2:	480a      	ldr	r0, [pc, #40]	; (80018dc <reset_DWIC+0x40>)
 80018b4:	f000 ffbe 	bl	8002834 <HAL_GPIO_Init>

    // drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2101      	movs	r1, #1
 80018bc:	4807      	ldr	r0, [pc, #28]	; (80018dc <reset_DWIC+0x40>)
 80018be:	f001 f93d 	bl	8002b3c <HAL_GPIO_WritePin>

    usleep(1);
 80018c2:	2001      	movs	r0, #1
 80018c4:	f7ff ffa2 	bl	800180c <usleep>

    // put the pin back to output open-drain (not active)
    setup_DWICRSTnIRQ(0);
 80018c8:	2000      	movs	r0, #0
 80018ca:	f000 f809 	bl	80018e0 <setup_DWICRSTnIRQ>
    Sleep(2);
 80018ce:	2002      	movs	r0, #2
 80018d0:	f7ff ffb8 	bl	8001844 <Sleep>
}
 80018d4:	bf00      	nop
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40020400 	.word	0x40020400

080018e0 <setup_DWICRSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DWICRSTnIRQ(int enable)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if (enable)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d015      	beq.n	800191a <setup_DWICRSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 80018ee:	2301      	movs	r3, #1
 80018f0:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018f6:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 80018fc:	f107 030c 	add.w	r3, r7, #12
 8001900:	4619      	mov	r1, r3
 8001902:	4813      	ldr	r0, [pc, #76]	; (8001950 <setup_DWICRSTnIRQ+0x70>)
 8001904:	f000 ff96 	bl	8002834 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn); // pin #0 -> EXTI #0
 8001908:	2006      	movs	r0, #6
 800190a:	f000 ff6a 	bl	80027e2 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	2105      	movs	r1, #5
 8001912:	2006      	movs	r0, #6
 8001914:	f000 ff49 	bl	80027aa <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
    }
}
 8001918:	e015      	b.n	8001946 <setup_DWICRSTnIRQ+0x66>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn); // pin #0 -> EXTI #0
 800191a:	2006      	movs	r0, #6
 800191c:	f000 ff6f 	bl	80027fe <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 8001920:	2301      	movs	r3, #1
 8001922:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001924:	2311      	movs	r3, #17
 8001926:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800192c:	2302      	movs	r3, #2
 800192e:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8001930:	f107 030c 	add.w	r3, r7, #12
 8001934:	4619      	mov	r1, r3
 8001936:	4806      	ldr	r0, [pc, #24]	; (8001950 <setup_DWICRSTnIRQ+0x70>)
 8001938:	f000 ff7c 	bl	8002834 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 800193c:	2201      	movs	r2, #1
 800193e:	2101      	movs	r1, #1
 8001940:	4803      	ldr	r0, [pc, #12]	; (8001950 <setup_DWICRSTnIRQ+0x70>)
 8001942:	f001 f8fb 	bl	8002b3c <HAL_GPIO_WritePin>
}
 8001946:	bf00      	nop
 8001948:	3720      	adds	r7, #32
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40020400 	.word	0x40020400

08001954 <wakeup_device_with_io>:
 *
 * output -None
 *
 */
void wakeup_device_with_io(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
    SET_WAKEUP_PIN_IO_HIGH;
 8001958:	2201      	movs	r2, #1
 800195a:	2102      	movs	r1, #2
 800195c:	4806      	ldr	r0, [pc, #24]	; (8001978 <wakeup_device_with_io+0x24>)
 800195e:	f001 f8ed 	bl	8002b3c <HAL_GPIO_WritePin>
    WAIT_200uSEC;
 8001962:	2001      	movs	r0, #1
 8001964:	f7ff ff6e 	bl	8001844 <Sleep>
    SET_WAKEUP_PIN_IO_LOW;
 8001968:	2200      	movs	r2, #0
 800196a:	2102      	movs	r1, #2
 800196c:	4802      	ldr	r0, [pc, #8]	; (8001978 <wakeup_device_with_io+0x24>)
 800196e:	f001 f8e5 	bl	8002b3c <HAL_GPIO_WritePin>
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40020400 	.word	0x40020400

0800197c <port_set_dw_ic_spi_slowrate>:
/* @fn      port_set_dw_ic_spi_slowrate
 * @brief   set 4.5MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw_ic_spi_slowrate(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
    hcurrent_active_spi->Init.BaudRatePrescaler=SPI_BAUDRATEPRESCALER_16;
 8001980:	4b05      	ldr	r3, [pc, #20]	; (8001998 <port_set_dw_ic_spi_slowrate+0x1c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2218      	movs	r2, #24
 8001986:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(hcurrent_active_spi);
 8001988:	4b03      	ldr	r3, [pc, #12]	; (8001998 <port_set_dw_ic_spi_slowrate+0x1c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f001 fd47 	bl	8003420 <HAL_SPI_Init>
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000048 	.word	0x20000048

0800199c <port_set_dw_ic_spi_fastrate>:
/* @fn      port_set_dw_ic_spi_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw_ic_spi_fastrate(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
    hcurrent_active_spi->Init.BaudRatePrescaler=SPI_BAUDRATEPRESCALER_2;
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <port_set_dw_ic_spi_fastrate+0x1c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2200      	movs	r2, #0
 80019a6:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(hcurrent_active_spi);
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <port_set_dw_ic_spi_fastrate+0x1c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f001 fd37 	bl	8003420 <HAL_SPI_Init>
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000048 	.word	0x20000048

080019bc <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
    if(SPI_1 == host_spi)
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <port_DisableEXT_IRQ+0x20>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d103      	bne.n	80019d0 <port_DisableEXT_IRQ+0x14>
    {
        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 80019c8:	2028      	movs	r0, #40	; 0x28
 80019ca:	f7ff fefb 	bl	80017c4 <__NVIC_DisableIRQ>
    else
    {
        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn2);
    }

}
 80019ce:	e002      	b.n	80019d6 <port_DisableEXT_IRQ+0x1a>
        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn2);
 80019d0:	2017      	movs	r0, #23
 80019d2:	f7ff fef7 	bl	80017c4 <__NVIC_DisableIRQ>
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000401 	.word	0x20000401

080019e0 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
    if(SPI_1 == host_spi)
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <port_EnableEXT_IRQ+0x20>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d103      	bne.n	80019f4 <port_EnableEXT_IRQ+0x14>
    {
        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 80019ec:	2028      	movs	r0, #40	; 0x28
 80019ee:	f7ff fecb 	bl	8001788 <__NVIC_EnableIRQ>
    }
    else
    {
        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn2);
    }
}
 80019f2:	e002      	b.n	80019fa <port_EnableEXT_IRQ+0x1a>
        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn2);
 80019f4:	2017      	movs	r0, #23
 80019f6:	f7ff fec7 	bl	8001788 <__NVIC_EnableIRQ>
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000401 	.word	0x20000401

08001a04 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
    uint32_t status;

    if(SPI_1 == host_spi)
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <port_GetEXT_IRQStatus+0x30>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d105      	bne.n	8001a1e <port_GetEXT_IRQStatus+0x1a>
    {
        status = EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 8001a12:	2028      	movs	r0, #40	; 0x28
 8001a14:	f7ff ff22 	bl	800185c <EXTI_GetITEnStatus>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	607b      	str	r3, [r7, #4]
 8001a1c:	e004      	b.n	8001a28 <port_GetEXT_IRQStatus+0x24>
    }
    else
    {
        status = EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn2);
 8001a1e:	2017      	movs	r0, #23
 8001a20:	f7ff ff1c 	bl	800185c <EXTI_GetITEnStatus>
 8001a24:	4603      	mov	r3, r0
 8001a26:	607b      	str	r3, [r7, #4]
    }
    return status;
 8001a28:	687b      	ldr	r3, [r7, #4]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000401 	.word	0x20000401

08001a38 <port_set_dwic_isr>:
// * @param deca_isr function pointer to DW IC interrupt handler to install
// *
// * @return none
// */
void port_set_dwic_isr(port_dwic_isr_t dwic_isr)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
    /* Check DW IC IRQ activation status. */
    ITStatus en = port_GetEXT_IRQStatus();
 8001a40:	f7ff ffe0 	bl	8001a04 <port_GetEXT_IRQStatus>
 8001a44:	4603      	mov	r3, r0
 8001a46:	73fb      	strb	r3, [r7, #15]

    /* If needed, deactivate DW IC IRQ during the installation of the new handler. */
    port_DisableEXT_IRQ();
 8001a48:	f7ff ffb8 	bl	80019bc <port_DisableEXT_IRQ>

    port_dwic_isr = dwic_isr;
 8001a4c:	4a05      	ldr	r2, [pc, #20]	; (8001a64 <port_set_dwic_isr+0x2c>)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6013      	str	r3, [r2, #0]

    if (!en)
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <port_set_dwic_isr+0x24>
    {
        port_EnableEXT_IRQ();
 8001a58:	f7ff ffc2 	bl	80019e0 <port_EnableEXT_IRQ>
    }
}
 8001a5c:	bf00      	nop
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000318 	.word	0x20000318

08001a68 <resp_msg_get_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
void resp_msg_get_ts(uint8_t *ts_field, uint32_t *ts)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
    int i;
    *ts = 0;
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
    for (i = 0; i < RESP_MSG_TS_LEN; i++)
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	e010      	b.n	8001aa0 <resp_msg_get_ts+0x38>
    {
        *ts += (uint32_t)ts_field[i] << (i * 8);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6879      	ldr	r1, [r7, #4]
 8001a86:	440b      	add	r3, r1
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	fa01 f303 	lsl.w	r3, r1, r3
 8001a94:	441a      	add	r2, r3
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	601a      	str	r2, [r3, #0]
    for (i = 0; i < RESP_MSG_TS_LEN; i++)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	ddeb      	ble.n	8001a7e <resp_msg_get_ts+0x16>
    }
}
 8001aa6:	bf00      	nop
 8001aa8:	bf00      	nop
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <waitforsysstatus>:
 *               0 - The function will not wait for any bits in the system status register (lower 32 bits).
 *
 * return None
 */
void waitforsysstatus(uint32_t *lo_result, uint32_t *hi_result, uint32_t lo_mask, uint32_t hi_mask)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
 8001ac0:	603b      	str	r3, [r7, #0]
    uint32_t lo_result_tmp = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
    uint32_t hi_result_tmp = 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]

    // If a mask has been passed into the function for the system status register (lower 32-bits)
    if (lo_mask)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d014      	beq.n	8001afa <waitforsysstatus+0x46>
    {
        while (!((lo_result_tmp = dwt_readsysstatuslo()) & (lo_mask)))
 8001ad0:	e00a      	b.n	8001ae8 <waitforsysstatus+0x34>
        {
            // If a mask value is set for the system status register (higher 32-bits)
            if (hi_mask)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d007      	beq.n	8001ae8 <waitforsysstatus+0x34>
            {
                // If mask value for the system status register (higher 32-bits) is found
                if ((hi_result_tmp = dwt_readsysstatushi()) & hi_mask)
 8001ad8:	f003 fdc6 	bl	8005668 <dwt_readsysstatushi>
 8001adc:	6138      	str	r0, [r7, #16]
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d115      	bne.n	8001b14 <waitforsysstatus+0x60>
        while (!((lo_result_tmp = dwt_readsysstatuslo()) & (lo_mask)))
 8001ae8:	f003 fdac 	bl	8005644 <dwt_readsysstatuslo>
 8001aec:	6178      	str	r0, [r7, #20]
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4013      	ands	r3, r2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0ec      	beq.n	8001ad2 <waitforsysstatus+0x1e>
 8001af8:	e00d      	b.n	8001b16 <waitforsysstatus+0x62>
                }
            }
        }
    }
    // if only a mask value for the system status register (higher 32-bits) is set
    else if (hi_mask)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00a      	beq.n	8001b16 <waitforsysstatus+0x62>
    {
        while (!((hi_result_tmp = dwt_readsysstatushi()) & (hi_mask))) { };
 8001b00:	bf00      	nop
 8001b02:	f003 fdb1 	bl	8005668 <dwt_readsysstatushi>
 8001b06:	6138      	str	r0, [r7, #16]
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d0f7      	beq.n	8001b02 <waitforsysstatus+0x4e>
 8001b12:	e000      	b.n	8001b16 <waitforsysstatus+0x62>
                    break;
 8001b14:	bf00      	nop
    }

    if (lo_result != NULL)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d002      	beq.n	8001b22 <waitforsysstatus+0x6e>
    {
        *lo_result = lo_result_tmp;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	601a      	str	r2, [r3, #0]
    }

    if (hi_result != NULL)
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d002      	beq.n	8001b2e <waitforsysstatus+0x7a>
    {
        *hi_result = hi_result_tmp;
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	601a      	str	r2, [r3, #0]
    }
}
 8001b2e:	bf00      	nop
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <test_run_info>:
extern struct data data_rx;

extern int unit_test_main(void);


void test_run_info(unsigned char *data){
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]

	uint16_t data_length = strlen((const char *)data);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7fe fbcd 	bl	80002e0 <strlen>
 8001b46:	4603      	mov	r3, r0
 8001b48:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart1, data, data_length, 1000);
 8001b4a:	89fa      	ldrh	r2, [r7, #14]
 8001b4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	4803      	ldr	r0, [pc, #12]	; (8001b60 <test_run_info+0x28>)
 8001b54:	f002 fea3 	bl	800489e <HAL_UART_Transmit>
}
 8001b58:	bf00      	nop
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	200003bc 	.word	0x200003bc

08001b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b68:	f000 fc8a 	bl	8002480 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b6c:	f000 f84c 	bl	8001c08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b70:	f000 f9cc 	bl	8001f0c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001b74:	f000 f8b2 	bl	8001cdc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001b78:	f000 f99e 	bl	8001eb8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001b7c:	f000 f8e4 	bl	8001d48 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE BEGIN 2 */
  port_DisableEXT_IRQ();
 8001b80:	f7ff ff1c 	bl	80019bc <port_DisableEXT_IRQ>
  setup_DWICRSTnIRQ(0);
 8001b84:	2000      	movs	r0, #0
 8001b86:	f7ff feab 	bl	80018e0 <setup_DWICRSTnIRQ>

  HAL_GPIO_WritePin(GPIOB,  GPIO_PIN_13, GPIO_PIN_RESET);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b90:	4813      	ldr	r0, [pc, #76]	; (8001be0 <main+0x7c>)
 8001b92:	f000 ffd3 	bl	8002b3c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){

	  UWB_pdoa();
 8001b96:	f7ff fa13 	bl	8000fc0 <UWB_pdoa>

	  test_run_info((unsigned char *)"[type:Tli, PDoA : ");
 8001b9a:	4812      	ldr	r0, [pc, #72]	; (8001be4 <main+0x80>)
 8001b9c:	f7ff ffcc 	bl	8001b38 <test_run_info>
	  test_run_info((unsigned char *)&data_rx.T_pdoa);
 8001ba0:	4811      	ldr	r0, [pc, #68]	; (8001be8 <main+0x84>)
 8001ba2:	f7ff ffc9 	bl	8001b38 <test_run_info>
	  test_run_info((unsigned char *)", data : ");
 8001ba6:	4811      	ldr	r0, [pc, #68]	; (8001bec <main+0x88>)
 8001ba8:	f7ff ffc6 	bl	8001b38 <test_run_info>
	  test_run_info((unsigned char *)&data_rx.T_data);
 8001bac:	4810      	ldr	r0, [pc, #64]	; (8001bf0 <main+0x8c>)
 8001bae:	f7ff ffc3 	bl	8001b38 <test_run_info>
	  test_run_info((unsigned char *)"]\n");
 8001bb2:	4810      	ldr	r0, [pc, #64]	; (8001bf4 <main+0x90>)
 8001bb4:	f7ff ffc0 	bl	8001b38 <test_run_info>

	  ss_twr_initiator_RX(data_rx.C_dist);
 8001bb8:	480f      	ldr	r0, [pc, #60]	; (8001bf8 <main+0x94>)
 8001bba:	f7ff fb7d 	bl	80012b8 <ss_twr_initiator_RX>


	  test_run_info((unsigned char *)"[type:car, PDoA : ");
 8001bbe:	480f      	ldr	r0, [pc, #60]	; (8001bfc <main+0x98>)
 8001bc0:	f7ff ffba 	bl	8001b38 <test_run_info>
	  test_run_info((unsigned char *)&data_rx.C_pdoa);
 8001bc4:	480e      	ldr	r0, [pc, #56]	; (8001c00 <main+0x9c>)
 8001bc6:	f7ff ffb7 	bl	8001b38 <test_run_info>
	  test_run_info((unsigned char *)", DIST : ");
 8001bca:	480e      	ldr	r0, [pc, #56]	; (8001c04 <main+0xa0>)
 8001bcc:	f7ff ffb4 	bl	8001b38 <test_run_info>
	  test_run_info((unsigned char *)&data_rx.C_dist);
 8001bd0:	4809      	ldr	r0, [pc, #36]	; (8001bf8 <main+0x94>)
 8001bd2:	f7ff ffb1 	bl	8001b38 <test_run_info>
	  test_run_info((unsigned char *)"]\n");
 8001bd6:	4807      	ldr	r0, [pc, #28]	; (8001bf4 <main+0x90>)
 8001bd8:	f7ff ffae 	bl	8001b38 <test_run_info>
	  UWB_pdoa();
 8001bdc:	e7db      	b.n	8001b96 <main+0x32>
 8001bde:	bf00      	nop
 8001be0:	40020400 	.word	0x40020400
 8001be4:	08015bc4 	.word	0x08015bc4
 8001be8:	2000025f 	.word	0x2000025f
 8001bec:	08015bd8 	.word	0x08015bd8
 8001bf0:	20000265 	.word	0x20000265
 8001bf4:	08015be4 	.word	0x08015be4
 8001bf8:	2000024c 	.word	0x2000024c
 8001bfc:	08015be8 	.word	0x08015be8
 8001c00:	20000252 	.word	0x20000252
 8001c04:	08015bfc 	.word	0x08015bfc

08001c08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b094      	sub	sp, #80	; 0x50
 8001c0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c0e:	f107 0320 	add.w	r3, r7, #32
 8001c12:	2230      	movs	r2, #48	; 0x30
 8001c14:	2100      	movs	r1, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f012 f88c 	bl	8013d34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c1c:	f107 030c 	add.w	r3, r7, #12
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	4b28      	ldr	r3, [pc, #160]	; (8001cd4 <SystemClock_Config+0xcc>)
 8001c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c34:	4a27      	ldr	r2, [pc, #156]	; (8001cd4 <SystemClock_Config+0xcc>)
 8001c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3c:	4b25      	ldr	r3, [pc, #148]	; (8001cd4 <SystemClock_Config+0xcc>)
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c48:	2300      	movs	r3, #0
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <SystemClock_Config+0xd0>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a21      	ldr	r2, [pc, #132]	; (8001cd8 <SystemClock_Config+0xd0>)
 8001c52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	4b1f      	ldr	r3, [pc, #124]	; (8001cd8 <SystemClock_Config+0xd0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c64:	2301      	movs	r3, #1
 8001c66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 20;
 8001c78:	2314      	movs	r3, #20
 8001c7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001c7c:	23a0      	movs	r3, #160	; 0xa0
 8001c7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c80:	2304      	movs	r3, #4
 8001c82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c84:	2304      	movs	r3, #4
 8001c86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c88:	f107 0320 	add.w	r3, r7, #32
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f000 ff6f 	bl	8002b70 <HAL_RCC_OscConfig>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c98:	f000 f9e4 	bl	8002064 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c9c:	230f      	movs	r3, #15
 8001c9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cb2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001cb4:	f107 030c 	add.w	r3, r7, #12
 8001cb8:	2101      	movs	r1, #1
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f001 f9d0 	bl	8003060 <HAL_RCC_ClockConfig>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001cc6:	f000 f9cd 	bl	8002064 <Error_Handler>
  }
}
 8001cca:	bf00      	nop
 8001ccc:	3750      	adds	r7, #80	; 0x50
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40007000 	.word	0x40007000

08001cdc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ce0:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001ce2:	4a18      	ldr	r2, [pc, #96]	; (8001d44 <MX_SPI1_Init+0x68>)
 8001ce4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ce6:	4b16      	ldr	r3, [pc, #88]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001ce8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cee:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cf4:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cfa:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d00:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d06:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001d0e:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d10:	2210      	movs	r2, #16
 8001d12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d14:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d1a:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d20:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d28:	220a      	movs	r2, #10
 8001d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d2c:	4804      	ldr	r0, [pc, #16]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d2e:	f001 fb77 	bl	8003420 <HAL_SPI_Init>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d38:	f000 f994 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d3c:	bf00      	nop
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	2000031c 	.word	0x2000031c
 8001d44:	40013000 	.word	0x40013000

08001d48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b09a      	sub	sp, #104	; 0x68
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d4e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001d5c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d6c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d76:	f107 0320 	add.w	r3, r7, #32
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	605a      	str	r2, [r3, #4]
 8001d80:	609a      	str	r2, [r3, #8]
 8001d82:	60da      	str	r2, [r3, #12]
 8001d84:	611a      	str	r2, [r3, #16]
 8001d86:	615a      	str	r2, [r3, #20]
 8001d88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d8a:	463b      	mov	r3, r7
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	2100      	movs	r1, #0
 8001d90:	4618      	mov	r0, r3
 8001d92:	f011 ffcf 	bl	8013d34 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d96:	4b46      	ldr	r3, [pc, #280]	; (8001eb0 <MX_TIM1_Init+0x168>)
 8001d98:	4a46      	ldr	r2, [pc, #280]	; (8001eb4 <MX_TIM1_Init+0x16c>)
 8001d9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d9c:	4b44      	ldr	r3, [pc, #272]	; (8001eb0 <MX_TIM1_Init+0x168>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da2:	4b43      	ldr	r3, [pc, #268]	; (8001eb0 <MX_TIM1_Init+0x168>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001da8:	4b41      	ldr	r3, [pc, #260]	; (8001eb0 <MX_TIM1_Init+0x168>)
 8001daa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001db0:	4b3f      	ldr	r3, [pc, #252]	; (8001eb0 <MX_TIM1_Init+0x168>)
 8001db2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001db6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001db8:	4b3d      	ldr	r3, [pc, #244]	; (8001eb0 <MX_TIM1_Init+0x168>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dbe:	4b3c      	ldr	r3, [pc, #240]	; (8001eb0 <MX_TIM1_Init+0x168>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001dc4:	483a      	ldr	r0, [pc, #232]	; (8001eb0 <MX_TIM1_Init+0x168>)
 8001dc6:	f001 fdc9 	bl	800395c <HAL_TIM_Base_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001dd0:	f000 f948 	bl	8002064 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dd8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001dda:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001dde:	4619      	mov	r1, r3
 8001de0:	4833      	ldr	r0, [pc, #204]	; (8001eb0 <MX_TIM1_Init+0x168>)
 8001de2:	f001 ffc7 	bl	8003d74 <HAL_TIM_ConfigClockSource>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001dec:	f000 f93a 	bl	8002064 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001df0:	482f      	ldr	r0, [pc, #188]	; (8001eb0 <MX_TIM1_Init+0x168>)
 8001df2:	f001 fe02 	bl	80039fa <HAL_TIM_OC_Init>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8001dfc:	f000 f932 	bl	8002064 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001e00:	2306      	movs	r3, #6
 8001e02:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001e08:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4828      	ldr	r0, [pc, #160]	; (8001eb0 <MX_TIM1_Init+0x168>)
 8001e10:	f002 f877 	bl	8003f02 <HAL_TIM_SlaveConfigSynchro>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001e1a:	f000 f923 	bl	8002064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e26:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4820      	ldr	r0, [pc, #128]	; (8001eb0 <MX_TIM1_Init+0x168>)
 8001e2e:	f002 fc15 	bl	800465c <HAL_TIMEx_MasterConfigSynchronization>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001e38:	f000 f914 	bl	8002064 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e44:	2300      	movs	r3, #0
 8001e46:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e50:	2300      	movs	r3, #0
 8001e52:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e54:	2300      	movs	r3, #0
 8001e56:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e58:	f107 0320 	add.w	r3, r7, #32
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4813      	ldr	r0, [pc, #76]	; (8001eb0 <MX_TIM1_Init+0x168>)
 8001e62:	f001 ff2b 	bl	8003cbc <HAL_TIM_OC_ConfigChannel>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001e6c:	f000 f8fa 	bl	8002064 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e70:	2300      	movs	r3, #0
 8001e72:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e80:	2300      	movs	r3, #0
 8001e82:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e88:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e8e:	463b      	mov	r3, r7
 8001e90:	4619      	mov	r1, r3
 8001e92:	4807      	ldr	r0, [pc, #28]	; (8001eb0 <MX_TIM1_Init+0x168>)
 8001e94:	f002 fc50 	bl	8004738 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001e9e:	f000 f8e1 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ea2:	4803      	ldr	r0, [pc, #12]	; (8001eb0 <MX_TIM1_Init+0x168>)
 8001ea4:	f000 f97c 	bl	80021a0 <HAL_TIM_MspPostInit>

}
 8001ea8:	bf00      	nop
 8001eaa:	3768      	adds	r7, #104	; 0x68
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000374 	.word	0x20000374
 8001eb4:	40010000 	.word	0x40010000

08001eb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ebc:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <MX_USART1_UART_Init+0x4c>)
 8001ebe:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <MX_USART1_UART_Init+0x50>)
 8001ec0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <MX_USART1_UART_Init+0x4c>)
 8001ec4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ec8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001eca:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <MX_USART1_UART_Init+0x4c>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <MX_USART1_UART_Init+0x4c>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ed6:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <MX_USART1_UART_Init+0x4c>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001edc:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <MX_USART1_UART_Init+0x4c>)
 8001ede:	220c      	movs	r2, #12
 8001ee0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ee2:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <MX_USART1_UART_Init+0x4c>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee8:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <MX_USART1_UART_Init+0x4c>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eee:	4805      	ldr	r0, [pc, #20]	; (8001f04 <MX_USART1_UART_Init+0x4c>)
 8001ef0:	f002 fc88 	bl	8004804 <HAL_UART_Init>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001efa:	f000 f8b3 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	200003bc 	.word	0x200003bc
 8001f08:	40011000 	.word	0x40011000

08001f0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08a      	sub	sp, #40	; 0x28
 8001f10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f12:	f107 0314 	add.w	r3, r7, #20
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
 8001f1e:	60da      	str	r2, [r3, #12]
 8001f20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	4b4b      	ldr	r3, [pc, #300]	; (8002054 <MX_GPIO_Init+0x148>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4a4a      	ldr	r2, [pc, #296]	; (8002054 <MX_GPIO_Init+0x148>)
 8001f2c:	f043 0304 	orr.w	r3, r3, #4
 8001f30:	6313      	str	r3, [r2, #48]	; 0x30
 8001f32:	4b48      	ldr	r3, [pc, #288]	; (8002054 <MX_GPIO_Init+0x148>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	4b44      	ldr	r3, [pc, #272]	; (8002054 <MX_GPIO_Init+0x148>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a43      	ldr	r2, [pc, #268]	; (8002054 <MX_GPIO_Init+0x148>)
 8001f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b41      	ldr	r3, [pc, #260]	; (8002054 <MX_GPIO_Init+0x148>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	4b3d      	ldr	r3, [pc, #244]	; (8002054 <MX_GPIO_Init+0x148>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a3c      	ldr	r2, [pc, #240]	; (8002054 <MX_GPIO_Init+0x148>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4b3a      	ldr	r3, [pc, #232]	; (8002054 <MX_GPIO_Init+0x148>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	4b36      	ldr	r3, [pc, #216]	; (8002054 <MX_GPIO_Init+0x148>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a35      	ldr	r2, [pc, #212]	; (8002054 <MX_GPIO_Init+0x148>)
 8001f80:	f043 0302 	orr.w	r3, r3, #2
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b33      	ldr	r3, [pc, #204]	; (8002054 <MX_GPIO_Init+0x148>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	607b      	str	r3, [r7, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_S_GPIO_Port, LED_S_Pin, GPIO_PIN_RESET);
 8001f92:	2200      	movs	r2, #0
 8001f94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f98:	482f      	ldr	r0, [pc, #188]	; (8002058 <MX_GPIO_Init+0x14c>)
 8001f9a:	f000 fdcf 	bl	8002b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2110      	movs	r1, #16
 8001fa2:	482e      	ldr	r0, [pc, #184]	; (800205c <MX_GPIO_Init+0x150>)
 8001fa4:	f000 fdca 	bl	8002b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DW_RESET_Pin|DW_NSS1_WAKEUP_Pin, GPIO_PIN_RESET);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2103      	movs	r1, #3
 8001fac:	482c      	ldr	r0, [pc, #176]	; (8002060 <MX_GPIO_Init+0x154>)
 8001fae:	f000 fdc5 	bl	8002b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_r_Pin|LED_y_Pin|LED_g_Pin, GPIO_PIN_SET);
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001fb8:	4829      	ldr	r0, [pc, #164]	; (8002060 <MX_GPIO_Init+0x154>)
 8001fba:	f000 fdbf 	bl	8002b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_S_Pin */
  GPIO_InitStruct.Pin = LED_S_Pin;
 8001fbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_S_GPIO_Port, &GPIO_InitStruct);
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4820      	ldr	r0, [pc, #128]	; (8002058 <MX_GPIO_Init+0x14c>)
 8001fd8:	f000 fc2c 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pins : DW_IRQ2_Pin DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQ2_Pin|DW_IRQn_Pin;
 8001fdc:	2306      	movs	r3, #6
 8001fde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fe0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001fe4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fea:	f107 0314 	add.w	r3, r7, #20
 8001fee:	4619      	mov	r1, r3
 8001ff0:	481a      	ldr	r0, [pc, #104]	; (800205c <MX_GPIO_Init+0x150>)
 8001ff2:	f000 fc1f 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_NSS_Pin */
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 8001ff6:	2310      	movs	r3, #16
 8001ff8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002002:	2300      	movs	r3, #0
 8002004:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 8002006:	f107 0314 	add.w	r3, r7, #20
 800200a:	4619      	mov	r1, r3
 800200c:	4813      	ldr	r0, [pc, #76]	; (800205c <MX_GPIO_Init+0x150>)
 800200e:	f000 fc11 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pins : DW_RESET_Pin DW_NSS1_WAKEUP_Pin */
  GPIO_InitStruct.Pin = DW_RESET_Pin|DW_NSS1_WAKEUP_Pin;
 8002012:	2303      	movs	r3, #3
 8002014:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002016:	2301      	movs	r3, #1
 8002018:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201e:	2300      	movs	r3, #0
 8002020:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002022:	f107 0314 	add.w	r3, r7, #20
 8002026:	4619      	mov	r1, r3
 8002028:	480d      	ldr	r0, [pc, #52]	; (8002060 <MX_GPIO_Init+0x154>)
 800202a:	f000 fc03 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_r_Pin LED_y_Pin LED_g_Pin */
  GPIO_InitStruct.Pin = LED_r_Pin|LED_y_Pin|LED_g_Pin;
 800202e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002032:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002034:	2301      	movs	r3, #1
 8002036:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002038:	2301      	movs	r3, #1
 800203a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203c:	2300      	movs	r3, #0
 800203e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	4619      	mov	r1, r3
 8002046:	4806      	ldr	r0, [pc, #24]	; (8002060 <MX_GPIO_Init+0x154>)
 8002048:	f000 fbf4 	bl	8002834 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800204c:	bf00      	nop
 800204e:	3728      	adds	r7, #40	; 0x28
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40023800 	.word	0x40023800
 8002058:	40020800 	.word	0x40020800
 800205c:	40020000 	.word	0x40020000
 8002060:	40020400 	.word	0x40020400

08002064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002068:	b672      	cpsid	i
}
 800206a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800206c:	e7fe      	b.n	800206c <Error_Handler+0x8>
	...

08002070 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	607b      	str	r3, [r7, #4]
 800207a:	4b10      	ldr	r3, [pc, #64]	; (80020bc <HAL_MspInit+0x4c>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207e:	4a0f      	ldr	r2, [pc, #60]	; (80020bc <HAL_MspInit+0x4c>)
 8002080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002084:	6453      	str	r3, [r2, #68]	; 0x44
 8002086:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <HAL_MspInit+0x4c>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800208e:	607b      	str	r3, [r7, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	603b      	str	r3, [r7, #0]
 8002096:	4b09      	ldr	r3, [pc, #36]	; (80020bc <HAL_MspInit+0x4c>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	4a08      	ldr	r2, [pc, #32]	; (80020bc <HAL_MspInit+0x4c>)
 800209c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a0:	6413      	str	r3, [r2, #64]	; 0x40
 80020a2:	4b06      	ldr	r3, [pc, #24]	; (80020bc <HAL_MspInit+0x4c>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020aa:	603b      	str	r3, [r7, #0]
 80020ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	40023800 	.word	0x40023800

080020c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08a      	sub	sp, #40	; 0x28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a19      	ldr	r2, [pc, #100]	; (8002144 <HAL_SPI_MspInit+0x84>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d12b      	bne.n	800213a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	4b18      	ldr	r3, [pc, #96]	; (8002148 <HAL_SPI_MspInit+0x88>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	4a17      	ldr	r2, [pc, #92]	; (8002148 <HAL_SPI_MspInit+0x88>)
 80020ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020f0:	6453      	str	r3, [r2, #68]	; 0x44
 80020f2:	4b15      	ldr	r3, [pc, #84]	; (8002148 <HAL_SPI_MspInit+0x88>)
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	4b11      	ldr	r3, [pc, #68]	; (8002148 <HAL_SPI_MspInit+0x88>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	4a10      	ldr	r2, [pc, #64]	; (8002148 <HAL_SPI_MspInit+0x88>)
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	6313      	str	r3, [r2, #48]	; 0x30
 800210e:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <HAL_SPI_MspInit+0x88>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800211a:	23e0      	movs	r3, #224	; 0xe0
 800211c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211e:	2302      	movs	r3, #2
 8002120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002126:	2303      	movs	r3, #3
 8002128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800212a:	2305      	movs	r3, #5
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212e:	f107 0314 	add.w	r3, r7, #20
 8002132:	4619      	mov	r1, r3
 8002134:	4805      	ldr	r0, [pc, #20]	; (800214c <HAL_SPI_MspInit+0x8c>)
 8002136:	f000 fb7d 	bl	8002834 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800213a:	bf00      	nop
 800213c:	3728      	adds	r7, #40	; 0x28
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40013000 	.word	0x40013000
 8002148:	40023800 	.word	0x40023800
 800214c:	40020000 	.word	0x40020000

08002150 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a0e      	ldr	r2, [pc, #56]	; (8002198 <HAL_TIM_Base_MspInit+0x48>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d115      	bne.n	800218e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	4b0d      	ldr	r3, [pc, #52]	; (800219c <HAL_TIM_Base_MspInit+0x4c>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	4a0c      	ldr	r2, [pc, #48]	; (800219c <HAL_TIM_Base_MspInit+0x4c>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	6453      	str	r3, [r2, #68]	; 0x44
 8002172:	4b0a      	ldr	r3, [pc, #40]	; (800219c <HAL_TIM_Base_MspInit+0x4c>)
 8002174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800217e:	2200      	movs	r2, #0
 8002180:	2105      	movs	r1, #5
 8002182:	201b      	movs	r0, #27
 8002184:	f000 fb11 	bl	80027aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002188:	201b      	movs	r0, #27
 800218a:	f000 fb2a 	bl	80027e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800218e:	bf00      	nop
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40010000 	.word	0x40010000
 800219c:	40023800 	.word	0x40023800

080021a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b088      	sub	sp, #32
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a8:	f107 030c 	add.w	r3, r7, #12
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a12      	ldr	r2, [pc, #72]	; (8002208 <HAL_TIM_MspPostInit+0x68>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d11e      	bne.n	8002200 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	4b11      	ldr	r3, [pc, #68]	; (800220c <HAL_TIM_MspPostInit+0x6c>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	4a10      	ldr	r2, [pc, #64]	; (800220c <HAL_TIM_MspPostInit+0x6c>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	6313      	str	r3, [r2, #48]	; 0x30
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <HAL_TIM_MspPostInit+0x6c>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e4:	2302      	movs	r3, #2
 80021e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021f0:	2301      	movs	r3, #1
 80021f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f4:	f107 030c 	add.w	r3, r7, #12
 80021f8:	4619      	mov	r1, r3
 80021fa:	4805      	ldr	r0, [pc, #20]	; (8002210 <HAL_TIM_MspPostInit+0x70>)
 80021fc:	f000 fb1a 	bl	8002834 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002200:	bf00      	nop
 8002202:	3720      	adds	r7, #32
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40010000 	.word	0x40010000
 800220c:	40023800 	.word	0x40023800
 8002210:	40020000 	.word	0x40020000

08002214 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08a      	sub	sp, #40	; 0x28
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221c:	f107 0314 	add.w	r3, r7, #20
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
 800222a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a19      	ldr	r2, [pc, #100]	; (8002298 <HAL_UART_MspInit+0x84>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d12b      	bne.n	800228e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	613b      	str	r3, [r7, #16]
 800223a:	4b18      	ldr	r3, [pc, #96]	; (800229c <HAL_UART_MspInit+0x88>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	4a17      	ldr	r2, [pc, #92]	; (800229c <HAL_UART_MspInit+0x88>)
 8002240:	f043 0310 	orr.w	r3, r3, #16
 8002244:	6453      	str	r3, [r2, #68]	; 0x44
 8002246:	4b15      	ldr	r3, [pc, #84]	; (800229c <HAL_UART_MspInit+0x88>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224a:	f003 0310 	and.w	r3, r3, #16
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	4b11      	ldr	r3, [pc, #68]	; (800229c <HAL_UART_MspInit+0x88>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	4a10      	ldr	r2, [pc, #64]	; (800229c <HAL_UART_MspInit+0x88>)
 800225c:	f043 0302 	orr.w	r3, r3, #2
 8002260:	6313      	str	r3, [r2, #48]	; 0x30
 8002262:	4b0e      	ldr	r3, [pc, #56]	; (800229c <HAL_UART_MspInit+0x88>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800226e:	23c0      	movs	r3, #192	; 0xc0
 8002270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002272:	2302      	movs	r3, #2
 8002274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227a:	2303      	movs	r3, #3
 800227c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800227e:	2307      	movs	r3, #7
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002282:	f107 0314 	add.w	r3, r7, #20
 8002286:	4619      	mov	r1, r3
 8002288:	4805      	ldr	r0, [pc, #20]	; (80022a0 <HAL_UART_MspInit+0x8c>)
 800228a:	f000 fad3 	bl	8002834 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800228e:	bf00      	nop
 8002290:	3728      	adds	r7, #40	; 0x28
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40011000 	.word	0x40011000
 800229c:	40023800 	.word	0x40023800
 80022a0:	40020400 	.word	0x40020400

080022a4 <SVC_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022d2:	f000 f927 	bl	8002524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
	...

080022dc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022e0:	4802      	ldr	r0, [pc, #8]	; (80022ec <TIM1_CC_IRQHandler+0x10>)
 80022e2:	f001 fbe3 	bl	8003aac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000374 	.word	0x20000374

080022f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  return 1;
 80022f4:	2301      	movs	r3, #1
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <_kill>:

int _kill(int pid, int sig)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800230a:	f011 fa17 	bl	801373c <__errno>
 800230e:	4603      	mov	r3, r0
 8002310:	2216      	movs	r2, #22
 8002312:	601a      	str	r2, [r3, #0]
  return -1;
 8002314:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002318:	4618      	mov	r0, r3
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <_exit>:

void _exit (int status)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002328:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7ff ffe7 	bl	8002300 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002332:	e7fe      	b.n	8002332 <_exit+0x12>

08002334 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800233c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800235c:	605a      	str	r2, [r3, #4]
  return 0;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <_isatty>:

int _isatty(int file)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002374:	2301      	movs	r3, #1
}
 8002376:	4618      	mov	r0, r3
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002382:	b480      	push	{r7}
 8002384:	b085      	sub	sp, #20
 8002386:	af00      	add	r7, sp, #0
 8002388:	60f8      	str	r0, [r7, #12]
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023a4:	4a14      	ldr	r2, [pc, #80]	; (80023f8 <_sbrk+0x5c>)
 80023a6:	4b15      	ldr	r3, [pc, #84]	; (80023fc <_sbrk+0x60>)
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023b0:	4b13      	ldr	r3, [pc, #76]	; (8002400 <_sbrk+0x64>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d102      	bne.n	80023be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023b8:	4b11      	ldr	r3, [pc, #68]	; (8002400 <_sbrk+0x64>)
 80023ba:	4a12      	ldr	r2, [pc, #72]	; (8002404 <_sbrk+0x68>)
 80023bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023be:	4b10      	ldr	r3, [pc, #64]	; (8002400 <_sbrk+0x64>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d207      	bcs.n	80023dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023cc:	f011 f9b6 	bl	801373c <__errno>
 80023d0:	4603      	mov	r3, r0
 80023d2:	220c      	movs	r2, #12
 80023d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023da:	e009      	b.n	80023f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023dc:	4b08      	ldr	r3, [pc, #32]	; (8002400 <_sbrk+0x64>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023e2:	4b07      	ldr	r3, [pc, #28]	; (8002400 <_sbrk+0x64>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4413      	add	r3, r2
 80023ea:	4a05      	ldr	r2, [pc, #20]	; (8002400 <_sbrk+0x64>)
 80023ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ee:	68fb      	ldr	r3, [r7, #12]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20020000 	.word	0x20020000
 80023fc:	00000400 	.word	0x00000400
 8002400:	20000404 	.word	0x20000404
 8002404:	20000610 	.word	0x20000610

08002408 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <SystemInit+0x20>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002412:	4a05      	ldr	r2, [pc, #20]	; (8002428 <SystemInit+0x20>)
 8002414:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002418:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800242c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002464 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002430:	480d      	ldr	r0, [pc, #52]	; (8002468 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002432:	490e      	ldr	r1, [pc, #56]	; (800246c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002434:	4a0e      	ldr	r2, [pc, #56]	; (8002470 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002438:	e002      	b.n	8002440 <LoopCopyDataInit>

0800243a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800243a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800243c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800243e:	3304      	adds	r3, #4

08002440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002444:	d3f9      	bcc.n	800243a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002446:	4a0b      	ldr	r2, [pc, #44]	; (8002474 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002448:	4c0b      	ldr	r4, [pc, #44]	; (8002478 <LoopFillZerobss+0x26>)
  movs r3, #0
 800244a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800244c:	e001      	b.n	8002452 <LoopFillZerobss>

0800244e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800244e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002450:	3204      	adds	r2, #4

08002452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002454:	d3fb      	bcc.n	800244e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002456:	f7ff ffd7 	bl	8002408 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800245a:	f011 fb65 	bl	8013b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800245e:	f7ff fb81 	bl	8001b64 <main>
  bx  lr    
 8002462:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002464:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800246c:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 8002470:	080164bc 	.word	0x080164bc
  ldr r2, =_sbss
 8002474:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8002478:	20000610 	.word	0x20000610

0800247c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800247c:	e7fe      	b.n	800247c <ADC_IRQHandler>
	...

08002480 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002484:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <HAL_Init+0x40>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a0d      	ldr	r2, [pc, #52]	; (80024c0 <HAL_Init+0x40>)
 800248a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800248e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <HAL_Init+0x40>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a0a      	ldr	r2, [pc, #40]	; (80024c0 <HAL_Init+0x40>)
 8002496:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800249a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800249c:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <HAL_Init+0x40>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a07      	ldr	r2, [pc, #28]	; (80024c0 <HAL_Init+0x40>)
 80024a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024a8:	2003      	movs	r0, #3
 80024aa:	f000 f973 	bl	8002794 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ae:	2000      	movs	r0, #0
 80024b0:	f000 f808 	bl	80024c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024b4:	f7ff fddc 	bl	8002070 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40023c00 	.word	0x40023c00

080024c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024cc:	4b12      	ldr	r3, [pc, #72]	; (8002518 <HAL_InitTick+0x54>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	4b12      	ldr	r3, [pc, #72]	; (800251c <HAL_InitTick+0x58>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	4619      	mov	r1, r3
 80024d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024da:	fbb3 f3f1 	udiv	r3, r3, r1
 80024de:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 f999 	bl	800281a <HAL_SYSTICK_Config>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e00e      	b.n	8002510 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b0f      	cmp	r3, #15
 80024f6:	d80a      	bhi.n	800250e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024f8:	2200      	movs	r2, #0
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002500:	f000 f953 	bl	80027aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002504:	4a06      	ldr	r2, [pc, #24]	; (8002520 <HAL_InitTick+0x5c>)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800250a:	2300      	movs	r3, #0
 800250c:	e000      	b.n	8002510 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
}
 8002510:	4618      	mov	r0, r3
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20000050 	.word	0x20000050
 800251c:	20000058 	.word	0x20000058
 8002520:	20000054 	.word	0x20000054

08002524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <HAL_IncTick+0x20>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	461a      	mov	r2, r3
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <HAL_IncTick+0x24>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4413      	add	r3, r2
 8002534:	4a04      	ldr	r2, [pc, #16]	; (8002548 <HAL_IncTick+0x24>)
 8002536:	6013      	str	r3, [r2, #0]
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	20000058 	.word	0x20000058
 8002548:	20000408 	.word	0x20000408

0800254c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return uwTick;
 8002550:	4b03      	ldr	r3, [pc, #12]	; (8002560 <HAL_GetTick+0x14>)
 8002552:	681b      	ldr	r3, [r3, #0]
}
 8002554:	4618      	mov	r0, r3
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	20000408 	.word	0x20000408

08002564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800256c:	f7ff ffee 	bl	800254c <HAL_GetTick>
 8002570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800257c:	d005      	beq.n	800258a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800257e:	4b0a      	ldr	r3, [pc, #40]	; (80025a8 <HAL_Delay+0x44>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	461a      	mov	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4413      	add	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800258a:	bf00      	nop
 800258c:	f7ff ffde 	bl	800254c <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	429a      	cmp	r2, r3
 800259a:	d8f7      	bhi.n	800258c <HAL_Delay+0x28>
  {
  }
}
 800259c:	bf00      	nop
 800259e:	bf00      	nop
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000058 	.word	0x20000058

080025ac <__NVIC_SetPriorityGrouping>:
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <__NVIC_SetPriorityGrouping+0x44>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025c8:	4013      	ands	r3, r2
 80025ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025de:	4a04      	ldr	r2, [pc, #16]	; (80025f0 <__NVIC_SetPriorityGrouping+0x44>)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	60d3      	str	r3, [r2, #12]
}
 80025e4:	bf00      	nop
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <__NVIC_GetPriorityGrouping>:
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f8:	4b04      	ldr	r3, [pc, #16]	; (800260c <__NVIC_GetPriorityGrouping+0x18>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	0a1b      	lsrs	r3, r3, #8
 80025fe:	f003 0307 	and.w	r3, r3, #7
}
 8002602:	4618      	mov	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <__NVIC_EnableIRQ>:
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	2b00      	cmp	r3, #0
 8002620:	db0b      	blt.n	800263a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	f003 021f 	and.w	r2, r3, #31
 8002628:	4907      	ldr	r1, [pc, #28]	; (8002648 <__NVIC_EnableIRQ+0x38>)
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	2001      	movs	r0, #1
 8002632:	fa00 f202 	lsl.w	r2, r0, r2
 8002636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	e000e100 	.word	0xe000e100

0800264c <__NVIC_DisableIRQ>:
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	2b00      	cmp	r3, #0
 800265c:	db12      	blt.n	8002684 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	f003 021f 	and.w	r2, r3, #31
 8002664:	490a      	ldr	r1, [pc, #40]	; (8002690 <__NVIC_DisableIRQ+0x44>)
 8002666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266a:	095b      	lsrs	r3, r3, #5
 800266c:	2001      	movs	r0, #1
 800266e:	fa00 f202 	lsl.w	r2, r0, r2
 8002672:	3320      	adds	r3, #32
 8002674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002678:	f3bf 8f4f 	dsb	sy
}
 800267c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800267e:	f3bf 8f6f 	isb	sy
}
 8002682:	bf00      	nop
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	e000e100 	.word	0xe000e100

08002694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	6039      	str	r1, [r7, #0]
 800269e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	db0a      	blt.n	80026be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	490c      	ldr	r1, [pc, #48]	; (80026e0 <__NVIC_SetPriority+0x4c>)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	0112      	lsls	r2, r2, #4
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	440b      	add	r3, r1
 80026b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026bc:	e00a      	b.n	80026d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	4908      	ldr	r1, [pc, #32]	; (80026e4 <__NVIC_SetPriority+0x50>)
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	3b04      	subs	r3, #4
 80026cc:	0112      	lsls	r2, r2, #4
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	440b      	add	r3, r1
 80026d2:	761a      	strb	r2, [r3, #24]
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	e000e100 	.word	0xe000e100
 80026e4:	e000ed00 	.word	0xe000ed00

080026e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b089      	sub	sp, #36	; 0x24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f1c3 0307 	rsb	r3, r3, #7
 8002702:	2b04      	cmp	r3, #4
 8002704:	bf28      	it	cs
 8002706:	2304      	movcs	r3, #4
 8002708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3304      	adds	r3, #4
 800270e:	2b06      	cmp	r3, #6
 8002710:	d902      	bls.n	8002718 <NVIC_EncodePriority+0x30>
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3b03      	subs	r3, #3
 8002716:	e000      	b.n	800271a <NVIC_EncodePriority+0x32>
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800271c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43da      	mvns	r2, r3
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	401a      	ands	r2, r3
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002730:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	fa01 f303 	lsl.w	r3, r1, r3
 800273a:	43d9      	mvns	r1, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002740:	4313      	orrs	r3, r2
         );
}
 8002742:	4618      	mov	r0, r3
 8002744:	3724      	adds	r7, #36	; 0x24
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
	...

08002750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3b01      	subs	r3, #1
 800275c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002760:	d301      	bcc.n	8002766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002762:	2301      	movs	r3, #1
 8002764:	e00f      	b.n	8002786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002766:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <SysTick_Config+0x40>)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3b01      	subs	r3, #1
 800276c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800276e:	210f      	movs	r1, #15
 8002770:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002774:	f7ff ff8e 	bl	8002694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002778:	4b05      	ldr	r3, [pc, #20]	; (8002790 <SysTick_Config+0x40>)
 800277a:	2200      	movs	r2, #0
 800277c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800277e:	4b04      	ldr	r3, [pc, #16]	; (8002790 <SysTick_Config+0x40>)
 8002780:	2207      	movs	r2, #7
 8002782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	e000e010 	.word	0xe000e010

08002794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7ff ff05 	bl	80025ac <__NVIC_SetPriorityGrouping>
}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b086      	sub	sp, #24
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	4603      	mov	r3, r0
 80027b2:	60b9      	str	r1, [r7, #8]
 80027b4:	607a      	str	r2, [r7, #4]
 80027b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027bc:	f7ff ff1a 	bl	80025f4 <__NVIC_GetPriorityGrouping>
 80027c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	68b9      	ldr	r1, [r7, #8]
 80027c6:	6978      	ldr	r0, [r7, #20]
 80027c8:	f7ff ff8e 	bl	80026e8 <NVIC_EncodePriority>
 80027cc:	4602      	mov	r2, r0
 80027ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027d2:	4611      	mov	r1, r2
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff ff5d 	bl	8002694 <__NVIC_SetPriority>
}
 80027da:	bf00      	nop
 80027dc:	3718      	adds	r7, #24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	4603      	mov	r3, r0
 80027ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ff0d 	bl	8002610 <__NVIC_EnableIRQ>
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	4603      	mov	r3, r0
 8002806:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff ff1d 	bl	800264c <__NVIC_DisableIRQ>
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7ff ff94 	bl	8002750 <SysTick_Config>
 8002828:	4603      	mov	r3, r0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002834:	b480      	push	{r7}
 8002836:	b089      	sub	sp, #36	; 0x24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800283e:	2300      	movs	r3, #0
 8002840:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002842:	2300      	movs	r3, #0
 8002844:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002846:	2300      	movs	r3, #0
 8002848:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800284a:	2300      	movs	r3, #0
 800284c:	61fb      	str	r3, [r7, #28]
 800284e:	e159      	b.n	8002b04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002850:	2201      	movs	r2, #1
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	4013      	ands	r3, r2
 8002862:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	429a      	cmp	r2, r3
 800286a:	f040 8148 	bne.w	8002afe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	2b01      	cmp	r3, #1
 8002878:	d005      	beq.n	8002886 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002882:	2b02      	cmp	r3, #2
 8002884:	d130      	bne.n	80028e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	2203      	movs	r2, #3
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4013      	ands	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028bc:	2201      	movs	r2, #1
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	091b      	lsrs	r3, r3, #4
 80028d2:	f003 0201 	and.w	r2, r3, #1
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4313      	orrs	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 0303 	and.w	r3, r3, #3
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d017      	beq.n	8002924 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	2203      	movs	r2, #3
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4313      	orrs	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 0303 	and.w	r3, r3, #3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d123      	bne.n	8002978 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	08da      	lsrs	r2, r3, #3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3208      	adds	r2, #8
 8002938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800293c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	220f      	movs	r2, #15
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4013      	ands	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	691a      	ldr	r2, [r3, #16]
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4313      	orrs	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	08da      	lsrs	r2, r3, #3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3208      	adds	r2, #8
 8002972:	69b9      	ldr	r1, [r7, #24]
 8002974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	2203      	movs	r2, #3
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4013      	ands	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 0203 	and.w	r2, r3, #3
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 80a2 	beq.w	8002afe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	4b57      	ldr	r3, [pc, #348]	; (8002b1c <HAL_GPIO_Init+0x2e8>)
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	4a56      	ldr	r2, [pc, #344]	; (8002b1c <HAL_GPIO_Init+0x2e8>)
 80029c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c8:	6453      	str	r3, [r2, #68]	; 0x44
 80029ca:	4b54      	ldr	r3, [pc, #336]	; (8002b1c <HAL_GPIO_Init+0x2e8>)
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029d6:	4a52      	ldr	r2, [pc, #328]	; (8002b20 <HAL_GPIO_Init+0x2ec>)
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	089b      	lsrs	r3, r3, #2
 80029dc:	3302      	adds	r3, #2
 80029de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	220f      	movs	r2, #15
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43db      	mvns	r3, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4013      	ands	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a49      	ldr	r2, [pc, #292]	; (8002b24 <HAL_GPIO_Init+0x2f0>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d019      	beq.n	8002a36 <HAL_GPIO_Init+0x202>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a48      	ldr	r2, [pc, #288]	; (8002b28 <HAL_GPIO_Init+0x2f4>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d013      	beq.n	8002a32 <HAL_GPIO_Init+0x1fe>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a47      	ldr	r2, [pc, #284]	; (8002b2c <HAL_GPIO_Init+0x2f8>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d00d      	beq.n	8002a2e <HAL_GPIO_Init+0x1fa>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a46      	ldr	r2, [pc, #280]	; (8002b30 <HAL_GPIO_Init+0x2fc>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d007      	beq.n	8002a2a <HAL_GPIO_Init+0x1f6>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a45      	ldr	r2, [pc, #276]	; (8002b34 <HAL_GPIO_Init+0x300>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d101      	bne.n	8002a26 <HAL_GPIO_Init+0x1f2>
 8002a22:	2304      	movs	r3, #4
 8002a24:	e008      	b.n	8002a38 <HAL_GPIO_Init+0x204>
 8002a26:	2307      	movs	r3, #7
 8002a28:	e006      	b.n	8002a38 <HAL_GPIO_Init+0x204>
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e004      	b.n	8002a38 <HAL_GPIO_Init+0x204>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e002      	b.n	8002a38 <HAL_GPIO_Init+0x204>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <HAL_GPIO_Init+0x204>
 8002a36:	2300      	movs	r3, #0
 8002a38:	69fa      	ldr	r2, [r7, #28]
 8002a3a:	f002 0203 	and.w	r2, r2, #3
 8002a3e:	0092      	lsls	r2, r2, #2
 8002a40:	4093      	lsls	r3, r2
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a48:	4935      	ldr	r1, [pc, #212]	; (8002b20 <HAL_GPIO_Init+0x2ec>)
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	089b      	lsrs	r3, r3, #2
 8002a4e:	3302      	adds	r3, #2
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a56:	4b38      	ldr	r3, [pc, #224]	; (8002b38 <HAL_GPIO_Init+0x304>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4013      	ands	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a7a:	4a2f      	ldr	r2, [pc, #188]	; (8002b38 <HAL_GPIO_Init+0x304>)
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a80:	4b2d      	ldr	r3, [pc, #180]	; (8002b38 <HAL_GPIO_Init+0x304>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002aa4:	4a24      	ldr	r2, [pc, #144]	; (8002b38 <HAL_GPIO_Init+0x304>)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002aaa:	4b23      	ldr	r3, [pc, #140]	; (8002b38 <HAL_GPIO_Init+0x304>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ace:	4a1a      	ldr	r2, [pc, #104]	; (8002b38 <HAL_GPIO_Init+0x304>)
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ad4:	4b18      	ldr	r3, [pc, #96]	; (8002b38 <HAL_GPIO_Init+0x304>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	43db      	mvns	r3, r3
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002af8:	4a0f      	ldr	r2, [pc, #60]	; (8002b38 <HAL_GPIO_Init+0x304>)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	3301      	adds	r3, #1
 8002b02:	61fb      	str	r3, [r7, #28]
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	2b0f      	cmp	r3, #15
 8002b08:	f67f aea2 	bls.w	8002850 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b0c:	bf00      	nop
 8002b0e:	bf00      	nop
 8002b10:	3724      	adds	r7, #36	; 0x24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	40013800 	.word	0x40013800
 8002b24:	40020000 	.word	0x40020000
 8002b28:	40020400 	.word	0x40020400
 8002b2c:	40020800 	.word	0x40020800
 8002b30:	40020c00 	.word	0x40020c00
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40013c00 	.word	0x40013c00

08002b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	807b      	strh	r3, [r7, #2]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b4c:	787b      	ldrb	r3, [r7, #1]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b52:	887a      	ldrh	r2, [r7, #2]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b58:	e003      	b.n	8002b62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b5a:	887b      	ldrh	r3, [r7, #2]
 8002b5c:	041a      	lsls	r2, r3, #16
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	619a      	str	r2, [r3, #24]
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
	...

08002b70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e267      	b.n	8003052 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d075      	beq.n	8002c7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b8e:	4b88      	ldr	r3, [pc, #544]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 030c 	and.w	r3, r3, #12
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d00c      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b9a:	4b85      	ldr	r3, [pc, #532]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	d112      	bne.n	8002bcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ba6:	4b82      	ldr	r3, [pc, #520]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bb2:	d10b      	bne.n	8002bcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb4:	4b7e      	ldr	r3, [pc, #504]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d05b      	beq.n	8002c78 <HAL_RCC_OscConfig+0x108>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d157      	bne.n	8002c78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e242      	b.n	8003052 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd4:	d106      	bne.n	8002be4 <HAL_RCC_OscConfig+0x74>
 8002bd6:	4b76      	ldr	r3, [pc, #472]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a75      	ldr	r2, [pc, #468]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	e01d      	b.n	8002c20 <HAL_RCC_OscConfig+0xb0>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bec:	d10c      	bne.n	8002c08 <HAL_RCC_OscConfig+0x98>
 8002bee:	4b70      	ldr	r3, [pc, #448]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a6f      	ldr	r2, [pc, #444]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	4b6d      	ldr	r3, [pc, #436]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a6c      	ldr	r2, [pc, #432]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	e00b      	b.n	8002c20 <HAL_RCC_OscConfig+0xb0>
 8002c08:	4b69      	ldr	r3, [pc, #420]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a68      	ldr	r2, [pc, #416]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c12:	6013      	str	r3, [r2, #0]
 8002c14:	4b66      	ldr	r3, [pc, #408]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a65      	ldr	r2, [pc, #404]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d013      	beq.n	8002c50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c28:	f7ff fc90 	bl	800254c <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c30:	f7ff fc8c 	bl	800254c <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b64      	cmp	r3, #100	; 0x64
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e207      	b.n	8003052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c42:	4b5b      	ldr	r3, [pc, #364]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0f0      	beq.n	8002c30 <HAL_RCC_OscConfig+0xc0>
 8002c4e:	e014      	b.n	8002c7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7ff fc7c 	bl	800254c <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c58:	f7ff fc78 	bl	800254c <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b64      	cmp	r3, #100	; 0x64
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e1f3      	b.n	8003052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c6a:	4b51      	ldr	r3, [pc, #324]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0xe8>
 8002c76:	e000      	b.n	8002c7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d063      	beq.n	8002d4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c86:	4b4a      	ldr	r3, [pc, #296]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00b      	beq.n	8002caa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c92:	4b47      	ldr	r3, [pc, #284]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d11c      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c9e:	4b44      	ldr	r3, [pc, #272]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d116      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002caa:	4b41      	ldr	r3, [pc, #260]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d005      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x152>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d001      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e1c7      	b.n	8003052 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc2:	4b3b      	ldr	r3, [pc, #236]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	4937      	ldr	r1, [pc, #220]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd6:	e03a      	b.n	8002d4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d020      	beq.n	8002d22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ce0:	4b34      	ldr	r3, [pc, #208]	; (8002db4 <HAL_RCC_OscConfig+0x244>)
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce6:	f7ff fc31 	bl	800254c <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cee:	f7ff fc2d 	bl	800254c <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e1a8      	b.n	8003052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d00:	4b2b      	ldr	r3, [pc, #172]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0f0      	beq.n	8002cee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d0c:	4b28      	ldr	r3, [pc, #160]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	4925      	ldr	r1, [pc, #148]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	600b      	str	r3, [r1, #0]
 8002d20:	e015      	b.n	8002d4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d22:	4b24      	ldr	r3, [pc, #144]	; (8002db4 <HAL_RCC_OscConfig+0x244>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d28:	f7ff fc10 	bl	800254c <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d30:	f7ff fc0c 	bl	800254c <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e187      	b.n	8003052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d42:	4b1b      	ldr	r3, [pc, #108]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f0      	bne.n	8002d30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d036      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d016      	beq.n	8002d90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d62:	4b15      	ldr	r3, [pc, #84]	; (8002db8 <HAL_RCC_OscConfig+0x248>)
 8002d64:	2201      	movs	r2, #1
 8002d66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d68:	f7ff fbf0 	bl	800254c <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d70:	f7ff fbec 	bl	800254c <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e167      	b.n	8003052 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d82:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0f0      	beq.n	8002d70 <HAL_RCC_OscConfig+0x200>
 8002d8e:	e01b      	b.n	8002dc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d90:	4b09      	ldr	r3, [pc, #36]	; (8002db8 <HAL_RCC_OscConfig+0x248>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d96:	f7ff fbd9 	bl	800254c <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d9c:	e00e      	b.n	8002dbc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d9e:	f7ff fbd5 	bl	800254c <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d907      	bls.n	8002dbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e150      	b.n	8003052 <HAL_RCC_OscConfig+0x4e2>
 8002db0:	40023800 	.word	0x40023800
 8002db4:	42470000 	.word	0x42470000
 8002db8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dbc:	4b88      	ldr	r3, [pc, #544]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1ea      	bne.n	8002d9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 8097 	beq.w	8002f04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dda:	4b81      	ldr	r3, [pc, #516]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10f      	bne.n	8002e06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	60bb      	str	r3, [r7, #8]
 8002dea:	4b7d      	ldr	r3, [pc, #500]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	4a7c      	ldr	r2, [pc, #496]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002df4:	6413      	str	r3, [r2, #64]	; 0x40
 8002df6:	4b7a      	ldr	r3, [pc, #488]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfe:	60bb      	str	r3, [r7, #8]
 8002e00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e02:	2301      	movs	r3, #1
 8002e04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e06:	4b77      	ldr	r3, [pc, #476]	; (8002fe4 <HAL_RCC_OscConfig+0x474>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d118      	bne.n	8002e44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e12:	4b74      	ldr	r3, [pc, #464]	; (8002fe4 <HAL_RCC_OscConfig+0x474>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a73      	ldr	r2, [pc, #460]	; (8002fe4 <HAL_RCC_OscConfig+0x474>)
 8002e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e1e:	f7ff fb95 	bl	800254c <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e26:	f7ff fb91 	bl	800254c <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e10c      	b.n	8003052 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e38:	4b6a      	ldr	r3, [pc, #424]	; (8002fe4 <HAL_RCC_OscConfig+0x474>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0f0      	beq.n	8002e26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d106      	bne.n	8002e5a <HAL_RCC_OscConfig+0x2ea>
 8002e4c:	4b64      	ldr	r3, [pc, #400]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e50:	4a63      	ldr	r2, [pc, #396]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002e52:	f043 0301 	orr.w	r3, r3, #1
 8002e56:	6713      	str	r3, [r2, #112]	; 0x70
 8002e58:	e01c      	b.n	8002e94 <HAL_RCC_OscConfig+0x324>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2b05      	cmp	r3, #5
 8002e60:	d10c      	bne.n	8002e7c <HAL_RCC_OscConfig+0x30c>
 8002e62:	4b5f      	ldr	r3, [pc, #380]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e66:	4a5e      	ldr	r2, [pc, #376]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002e68:	f043 0304 	orr.w	r3, r3, #4
 8002e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e6e:	4b5c      	ldr	r3, [pc, #368]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e72:	4a5b      	ldr	r2, [pc, #364]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002e74:	f043 0301 	orr.w	r3, r3, #1
 8002e78:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7a:	e00b      	b.n	8002e94 <HAL_RCC_OscConfig+0x324>
 8002e7c:	4b58      	ldr	r3, [pc, #352]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e80:	4a57      	ldr	r2, [pc, #348]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002e82:	f023 0301 	bic.w	r3, r3, #1
 8002e86:	6713      	str	r3, [r2, #112]	; 0x70
 8002e88:	4b55      	ldr	r3, [pc, #340]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8c:	4a54      	ldr	r2, [pc, #336]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002e8e:	f023 0304 	bic.w	r3, r3, #4
 8002e92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d015      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9c:	f7ff fb56 	bl	800254c <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea2:	e00a      	b.n	8002eba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ea4:	f7ff fb52 	bl	800254c <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e0cb      	b.n	8003052 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eba:	4b49      	ldr	r3, [pc, #292]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0ee      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x334>
 8002ec6:	e014      	b.n	8002ef2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec8:	f7ff fb40 	bl	800254c <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ece:	e00a      	b.n	8002ee6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ed0:	f7ff fb3c 	bl	800254c <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e0b5      	b.n	8003052 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee6:	4b3e      	ldr	r3, [pc, #248]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1ee      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ef2:	7dfb      	ldrb	r3, [r7, #23]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d105      	bne.n	8002f04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef8:	4b39      	ldr	r3, [pc, #228]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efc:	4a38      	ldr	r2, [pc, #224]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002efe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 80a1 	beq.w	8003050 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f0e:	4b34      	ldr	r3, [pc, #208]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d05c      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d141      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f22:	4b31      	ldr	r3, [pc, #196]	; (8002fe8 <HAL_RCC_OscConfig+0x478>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f28:	f7ff fb10 	bl	800254c <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f30:	f7ff fb0c 	bl	800254c <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e087      	b.n	8003052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f42:	4b27      	ldr	r3, [pc, #156]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69da      	ldr	r2, [r3, #28]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	019b      	lsls	r3, r3, #6
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f64:	085b      	lsrs	r3, r3, #1
 8002f66:	3b01      	subs	r3, #1
 8002f68:	041b      	lsls	r3, r3, #16
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	061b      	lsls	r3, r3, #24
 8002f72:	491b      	ldr	r1, [pc, #108]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f78:	4b1b      	ldr	r3, [pc, #108]	; (8002fe8 <HAL_RCC_OscConfig+0x478>)
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7e:	f7ff fae5 	bl	800254c <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f86:	f7ff fae1 	bl	800254c <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e05c      	b.n	8003052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f98:	4b11      	ldr	r3, [pc, #68]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0f0      	beq.n	8002f86 <HAL_RCC_OscConfig+0x416>
 8002fa4:	e054      	b.n	8003050 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa6:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <HAL_RCC_OscConfig+0x478>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fac:	f7ff face 	bl	800254c <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fb4:	f7ff faca 	bl	800254c <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e045      	b.n	8003052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc6:	4b06      	ldr	r3, [pc, #24]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x444>
 8002fd2:	e03d      	b.n	8003050 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d107      	bne.n	8002fec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e038      	b.n	8003052 <HAL_RCC_OscConfig+0x4e2>
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	40007000 	.word	0x40007000
 8002fe8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fec:	4b1b      	ldr	r3, [pc, #108]	; (800305c <HAL_RCC_OscConfig+0x4ec>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d028      	beq.n	800304c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003004:	429a      	cmp	r2, r3
 8003006:	d121      	bne.n	800304c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003012:	429a      	cmp	r2, r3
 8003014:	d11a      	bne.n	800304c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800301c:	4013      	ands	r3, r2
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003022:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003024:	4293      	cmp	r3, r2
 8003026:	d111      	bne.n	800304c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003032:	085b      	lsrs	r3, r3, #1
 8003034:	3b01      	subs	r3, #1
 8003036:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003038:	429a      	cmp	r2, r3
 800303a:	d107      	bne.n	800304c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003046:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003048:	429a      	cmp	r2, r3
 800304a:	d001      	beq.n	8003050 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e000      	b.n	8003052 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40023800 	.word	0x40023800

08003060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e0cc      	b.n	800320e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003074:	4b68      	ldr	r3, [pc, #416]	; (8003218 <HAL_RCC_ClockConfig+0x1b8>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	429a      	cmp	r2, r3
 8003080:	d90c      	bls.n	800309c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003082:	4b65      	ldr	r3, [pc, #404]	; (8003218 <HAL_RCC_ClockConfig+0x1b8>)
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800308a:	4b63      	ldr	r3, [pc, #396]	; (8003218 <HAL_RCC_ClockConfig+0x1b8>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	429a      	cmp	r2, r3
 8003096:	d001      	beq.n	800309c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e0b8      	b.n	800320e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d020      	beq.n	80030ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d005      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030b4:	4b59      	ldr	r3, [pc, #356]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	4a58      	ldr	r2, [pc, #352]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 80030ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0308 	and.w	r3, r3, #8
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d005      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030cc:	4b53      	ldr	r3, [pc, #332]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	4a52      	ldr	r2, [pc, #328]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d8:	4b50      	ldr	r3, [pc, #320]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	494d      	ldr	r1, [pc, #308]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d044      	beq.n	8003180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d107      	bne.n	800310e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fe:	4b47      	ldr	r3, [pc, #284]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d119      	bne.n	800313e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e07f      	b.n	800320e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2b02      	cmp	r3, #2
 8003114:	d003      	beq.n	800311e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800311a:	2b03      	cmp	r3, #3
 800311c:	d107      	bne.n	800312e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800311e:	4b3f      	ldr	r3, [pc, #252]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d109      	bne.n	800313e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e06f      	b.n	800320e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312e:	4b3b      	ldr	r3, [pc, #236]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e067      	b.n	800320e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800313e:	4b37      	ldr	r3, [pc, #220]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f023 0203 	bic.w	r2, r3, #3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	4934      	ldr	r1, [pc, #208]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 800314c:	4313      	orrs	r3, r2
 800314e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003150:	f7ff f9fc 	bl	800254c <HAL_GetTick>
 8003154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003156:	e00a      	b.n	800316e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003158:	f7ff f9f8 	bl	800254c <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f241 3288 	movw	r2, #5000	; 0x1388
 8003166:	4293      	cmp	r3, r2
 8003168:	d901      	bls.n	800316e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e04f      	b.n	800320e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316e:	4b2b      	ldr	r3, [pc, #172]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 020c 	and.w	r2, r3, #12
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	429a      	cmp	r2, r3
 800317e:	d1eb      	bne.n	8003158 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003180:	4b25      	ldr	r3, [pc, #148]	; (8003218 <HAL_RCC_ClockConfig+0x1b8>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0307 	and.w	r3, r3, #7
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d20c      	bcs.n	80031a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800318e:	4b22      	ldr	r3, [pc, #136]	; (8003218 <HAL_RCC_ClockConfig+0x1b8>)
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003196:	4b20      	ldr	r3, [pc, #128]	; (8003218 <HAL_RCC_ClockConfig+0x1b8>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d001      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e032      	b.n	800320e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d008      	beq.n	80031c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031b4:	4b19      	ldr	r3, [pc, #100]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	4916      	ldr	r1, [pc, #88]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d009      	beq.n	80031e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031d2:	4b12      	ldr	r3, [pc, #72]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	490e      	ldr	r1, [pc, #56]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031e6:	f000 f821 	bl	800322c <HAL_RCC_GetSysClockFreq>
 80031ea:	4602      	mov	r2, r0
 80031ec:	4b0b      	ldr	r3, [pc, #44]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	091b      	lsrs	r3, r3, #4
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	490a      	ldr	r1, [pc, #40]	; (8003220 <HAL_RCC_ClockConfig+0x1c0>)
 80031f8:	5ccb      	ldrb	r3, [r1, r3]
 80031fa:	fa22 f303 	lsr.w	r3, r2, r3
 80031fe:	4a09      	ldr	r2, [pc, #36]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 8003200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003202:	4b09      	ldr	r3, [pc, #36]	; (8003228 <HAL_RCC_ClockConfig+0x1c8>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff f95c 	bl	80024c4 <HAL_InitTick>

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40023c00 	.word	0x40023c00
 800321c:	40023800 	.word	0x40023800
 8003220:	08015c28 	.word	0x08015c28
 8003224:	20000050 	.word	0x20000050
 8003228:	20000054 	.word	0x20000054

0800322c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800322c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003230:	b090      	sub	sp, #64	; 0x40
 8003232:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	637b      	str	r3, [r7, #52]	; 0x34
 8003238:	2300      	movs	r3, #0
 800323a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800323c:	2300      	movs	r3, #0
 800323e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003240:	2300      	movs	r3, #0
 8003242:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003244:	4b59      	ldr	r3, [pc, #356]	; (80033ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 030c 	and.w	r3, r3, #12
 800324c:	2b08      	cmp	r3, #8
 800324e:	d00d      	beq.n	800326c <HAL_RCC_GetSysClockFreq+0x40>
 8003250:	2b08      	cmp	r3, #8
 8003252:	f200 80a1 	bhi.w	8003398 <HAL_RCC_GetSysClockFreq+0x16c>
 8003256:	2b00      	cmp	r3, #0
 8003258:	d002      	beq.n	8003260 <HAL_RCC_GetSysClockFreq+0x34>
 800325a:	2b04      	cmp	r3, #4
 800325c:	d003      	beq.n	8003266 <HAL_RCC_GetSysClockFreq+0x3a>
 800325e:	e09b      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003260:	4b53      	ldr	r3, [pc, #332]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003262:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003264:	e09b      	b.n	800339e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003266:	4b53      	ldr	r3, [pc, #332]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003268:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800326a:	e098      	b.n	800339e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800326c:	4b4f      	ldr	r3, [pc, #316]	; (80033ac <HAL_RCC_GetSysClockFreq+0x180>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003274:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003276:	4b4d      	ldr	r3, [pc, #308]	; (80033ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d028      	beq.n	80032d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003282:	4b4a      	ldr	r3, [pc, #296]	; (80033ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	099b      	lsrs	r3, r3, #6
 8003288:	2200      	movs	r2, #0
 800328a:	623b      	str	r3, [r7, #32]
 800328c:	627a      	str	r2, [r7, #36]	; 0x24
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003294:	2100      	movs	r1, #0
 8003296:	4b47      	ldr	r3, [pc, #284]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003298:	fb03 f201 	mul.w	r2, r3, r1
 800329c:	2300      	movs	r3, #0
 800329e:	fb00 f303 	mul.w	r3, r0, r3
 80032a2:	4413      	add	r3, r2
 80032a4:	4a43      	ldr	r2, [pc, #268]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80032a6:	fba0 1202 	umull	r1, r2, r0, r2
 80032aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032ac:	460a      	mov	r2, r1
 80032ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80032b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032b2:	4413      	add	r3, r2
 80032b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b8:	2200      	movs	r2, #0
 80032ba:	61bb      	str	r3, [r7, #24]
 80032bc:	61fa      	str	r2, [r7, #28]
 80032be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80032c6:	f7fd fcf9 	bl	8000cbc <__aeabi_uldivmod>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	4613      	mov	r3, r2
 80032d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032d2:	e053      	b.n	800337c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032d4:	4b35      	ldr	r3, [pc, #212]	; (80033ac <HAL_RCC_GetSysClockFreq+0x180>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	099b      	lsrs	r3, r3, #6
 80032da:	2200      	movs	r2, #0
 80032dc:	613b      	str	r3, [r7, #16]
 80032de:	617a      	str	r2, [r7, #20]
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80032e6:	f04f 0b00 	mov.w	fp, #0
 80032ea:	4652      	mov	r2, sl
 80032ec:	465b      	mov	r3, fp
 80032ee:	f04f 0000 	mov.w	r0, #0
 80032f2:	f04f 0100 	mov.w	r1, #0
 80032f6:	0159      	lsls	r1, r3, #5
 80032f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032fc:	0150      	lsls	r0, r2, #5
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	ebb2 080a 	subs.w	r8, r2, sl
 8003306:	eb63 090b 	sbc.w	r9, r3, fp
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	f04f 0300 	mov.w	r3, #0
 8003312:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003316:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800331a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800331e:	ebb2 0408 	subs.w	r4, r2, r8
 8003322:	eb63 0509 	sbc.w	r5, r3, r9
 8003326:	f04f 0200 	mov.w	r2, #0
 800332a:	f04f 0300 	mov.w	r3, #0
 800332e:	00eb      	lsls	r3, r5, #3
 8003330:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003334:	00e2      	lsls	r2, r4, #3
 8003336:	4614      	mov	r4, r2
 8003338:	461d      	mov	r5, r3
 800333a:	eb14 030a 	adds.w	r3, r4, sl
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	eb45 030b 	adc.w	r3, r5, fp
 8003344:	607b      	str	r3, [r7, #4]
 8003346:	f04f 0200 	mov.w	r2, #0
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003352:	4629      	mov	r1, r5
 8003354:	028b      	lsls	r3, r1, #10
 8003356:	4621      	mov	r1, r4
 8003358:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800335c:	4621      	mov	r1, r4
 800335e:	028a      	lsls	r2, r1, #10
 8003360:	4610      	mov	r0, r2
 8003362:	4619      	mov	r1, r3
 8003364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003366:	2200      	movs	r2, #0
 8003368:	60bb      	str	r3, [r7, #8]
 800336a:	60fa      	str	r2, [r7, #12]
 800336c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003370:	f7fd fca4 	bl	8000cbc <__aeabi_uldivmod>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4613      	mov	r3, r2
 800337a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800337c:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <HAL_RCC_GetSysClockFreq+0x180>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	0c1b      	lsrs	r3, r3, #16
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	3301      	adds	r3, #1
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800338c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800338e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003390:	fbb2 f3f3 	udiv	r3, r2, r3
 8003394:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003396:	e002      	b.n	800339e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003398:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800339a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800339c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800339e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3740      	adds	r7, #64	; 0x40
 80033a4:	46bd      	mov	sp, r7
 80033a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033aa:	bf00      	nop
 80033ac:	40023800 	.word	0x40023800
 80033b0:	00f42400 	.word	0x00f42400
 80033b4:	017d7840 	.word	0x017d7840

080033b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033bc:	4b03      	ldr	r3, [pc, #12]	; (80033cc <HAL_RCC_GetHCLKFreq+0x14>)
 80033be:	681b      	ldr	r3, [r3, #0]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	20000050 	.word	0x20000050

080033d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033d4:	f7ff fff0 	bl	80033b8 <HAL_RCC_GetHCLKFreq>
 80033d8:	4602      	mov	r2, r0
 80033da:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	0a9b      	lsrs	r3, r3, #10
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	4903      	ldr	r1, [pc, #12]	; (80033f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033e6:	5ccb      	ldrb	r3, [r1, r3]
 80033e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40023800 	.word	0x40023800
 80033f4:	08015c38 	.word	0x08015c38

080033f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033fc:	f7ff ffdc 	bl	80033b8 <HAL_RCC_GetHCLKFreq>
 8003400:	4602      	mov	r2, r0
 8003402:	4b05      	ldr	r3, [pc, #20]	; (8003418 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	0b5b      	lsrs	r3, r3, #13
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	4903      	ldr	r1, [pc, #12]	; (800341c <HAL_RCC_GetPCLK2Freq+0x24>)
 800340e:	5ccb      	ldrb	r3, [r1, r3]
 8003410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003414:	4618      	mov	r0, r3
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40023800 	.word	0x40023800
 800341c:	08015c38 	.word	0x08015c38

08003420 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e07b      	b.n	800352a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	2b00      	cmp	r3, #0
 8003438:	d108      	bne.n	800344c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003442:	d009      	beq.n	8003458 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	61da      	str	r2, [r3, #28]
 800344a:	e005      	b.n	8003458 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d106      	bne.n	8003478 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7fe fe24 	bl	80020c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800348e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034a0:	431a      	orrs	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	431a      	orrs	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034c8:	431a      	orrs	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034dc:	ea42 0103 	orr.w	r1, r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	0c1b      	lsrs	r3, r3, #16
 80034f6:	f003 0104 	and.w	r1, r3, #4
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	f003 0210 	and.w	r2, r3, #16
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	69da      	ldr	r2, [r3, #28]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003518:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b088      	sub	sp, #32
 8003536:	af00      	add	r7, sp, #0
 8003538:	60f8      	str	r0, [r7, #12]
 800353a:	60b9      	str	r1, [r7, #8]
 800353c:	603b      	str	r3, [r7, #0]
 800353e:	4613      	mov	r3, r2
 8003540:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003542:	2300      	movs	r3, #0
 8003544:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <HAL_SPI_Transmit+0x22>
 8003550:	2302      	movs	r3, #2
 8003552:	e126      	b.n	80037a2 <HAL_SPI_Transmit+0x270>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800355c:	f7fe fff6 	bl	800254c <HAL_GetTick>
 8003560:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003562:	88fb      	ldrh	r3, [r7, #6]
 8003564:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b01      	cmp	r3, #1
 8003570:	d002      	beq.n	8003578 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003572:	2302      	movs	r3, #2
 8003574:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003576:	e10b      	b.n	8003790 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <HAL_SPI_Transmit+0x52>
 800357e:	88fb      	ldrh	r3, [r7, #6]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d102      	bne.n	800358a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003588:	e102      	b.n	8003790 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2203      	movs	r2, #3
 800358e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	88fa      	ldrh	r2, [r7, #6]
 80035a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	88fa      	ldrh	r2, [r7, #6]
 80035a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035d0:	d10f      	bne.n	80035f2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fc:	2b40      	cmp	r3, #64	; 0x40
 80035fe:	d007      	beq.n	8003610 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800360e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003618:	d14b      	bne.n	80036b2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <HAL_SPI_Transmit+0xf6>
 8003622:	8afb      	ldrh	r3, [r7, #22]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d13e      	bne.n	80036a6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362c:	881a      	ldrh	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003638:	1c9a      	adds	r2, r3, #2
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003642:	b29b      	uxth	r3, r3
 8003644:	3b01      	subs	r3, #1
 8003646:	b29a      	uxth	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800364c:	e02b      	b.n	80036a6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b02      	cmp	r3, #2
 800365a:	d112      	bne.n	8003682 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003660:	881a      	ldrh	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366c:	1c9a      	adds	r2, r3, #2
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003676:	b29b      	uxth	r3, r3
 8003678:	3b01      	subs	r3, #1
 800367a:	b29a      	uxth	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003680:	e011      	b.n	80036a6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003682:	f7fe ff63 	bl	800254c <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	429a      	cmp	r2, r3
 8003690:	d803      	bhi.n	800369a <HAL_SPI_Transmit+0x168>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003698:	d102      	bne.n	80036a0 <HAL_SPI_Transmit+0x16e>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d102      	bne.n	80036a6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036a4:	e074      	b.n	8003790 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1ce      	bne.n	800364e <HAL_SPI_Transmit+0x11c>
 80036b0:	e04c      	b.n	800374c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d002      	beq.n	80036c0 <HAL_SPI_Transmit+0x18e>
 80036ba:	8afb      	ldrh	r3, [r7, #22]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d140      	bne.n	8003742 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	330c      	adds	r3, #12
 80036ca:	7812      	ldrb	r2, [r2, #0]
 80036cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036dc:	b29b      	uxth	r3, r3
 80036de:	3b01      	subs	r3, #1
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80036e6:	e02c      	b.n	8003742 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d113      	bne.n	800371e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	330c      	adds	r3, #12
 8003700:	7812      	ldrb	r2, [r2, #0]
 8003702:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003708:	1c5a      	adds	r2, r3, #1
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003712:	b29b      	uxth	r3, r3
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	86da      	strh	r2, [r3, #54]	; 0x36
 800371c:	e011      	b.n	8003742 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800371e:	f7fe ff15 	bl	800254c <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	429a      	cmp	r2, r3
 800372c:	d803      	bhi.n	8003736 <HAL_SPI_Transmit+0x204>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003734:	d102      	bne.n	800373c <HAL_SPI_Transmit+0x20a>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d102      	bne.n	8003742 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003740:	e026      	b.n	8003790 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003746:	b29b      	uxth	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1cd      	bne.n	80036e8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	6839      	ldr	r1, [r7, #0]
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 f8c1 	bl	80038d8 <SPI_EndRxTxTransaction>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2220      	movs	r2, #32
 8003760:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10a      	bne.n	8003780 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800376a:	2300      	movs	r3, #0
 800376c:	613b      	str	r3, [r7, #16]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	613b      	str	r3, [r7, #16]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	613b      	str	r3, [r7, #16]
 800377e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003784:	2b00      	cmp	r3, #0
 8003786:	d002      	beq.n	800378e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	77fb      	strb	r3, [r7, #31]
 800378c:	e000      	b.n	8003790 <HAL_SPI_Transmit+0x25e>
  }

error:
 800378e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3720      	adds	r7, #32
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037b8:	b2db      	uxtb	r3, r3
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
	...

080037c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b088      	sub	sp, #32
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	603b      	str	r3, [r7, #0]
 80037d4:	4613      	mov	r3, r2
 80037d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037d8:	f7fe feb8 	bl	800254c <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e0:	1a9b      	subs	r3, r3, r2
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	4413      	add	r3, r2
 80037e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80037e8:	f7fe feb0 	bl	800254c <HAL_GetTick>
 80037ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80037ee:	4b39      	ldr	r3, [pc, #228]	; (80038d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	015b      	lsls	r3, r3, #5
 80037f4:	0d1b      	lsrs	r3, r3, #20
 80037f6:	69fa      	ldr	r2, [r7, #28]
 80037f8:	fb02 f303 	mul.w	r3, r2, r3
 80037fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037fe:	e054      	b.n	80038aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003806:	d050      	beq.n	80038aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003808:	f7fe fea0 	bl	800254c <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	69fa      	ldr	r2, [r7, #28]
 8003814:	429a      	cmp	r2, r3
 8003816:	d902      	bls.n	800381e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d13d      	bne.n	800389a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800382c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003836:	d111      	bne.n	800385c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003840:	d004      	beq.n	800384c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800384a:	d107      	bne.n	800385c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800385a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003864:	d10f      	bne.n	8003886 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003884:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e017      	b.n	80038ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	3b01      	subs	r3, #1
 80038a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	4013      	ands	r3, r2
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	bf0c      	ite	eq
 80038ba:	2301      	moveq	r3, #1
 80038bc:	2300      	movne	r3, #0
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	461a      	mov	r2, r3
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d19b      	bne.n	8003800 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3720      	adds	r7, #32
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	20000050 	.word	0x20000050

080038d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b088      	sub	sp, #32
 80038dc:	af02      	add	r7, sp, #8
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80038e4:	4b1b      	ldr	r3, [pc, #108]	; (8003954 <SPI_EndRxTxTransaction+0x7c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a1b      	ldr	r2, [pc, #108]	; (8003958 <SPI_EndRxTxTransaction+0x80>)
 80038ea:	fba2 2303 	umull	r2, r3, r2, r3
 80038ee:	0d5b      	lsrs	r3, r3, #21
 80038f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038f4:	fb02 f303 	mul.w	r3, r2, r3
 80038f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003902:	d112      	bne.n	800392a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2200      	movs	r2, #0
 800390c:	2180      	movs	r1, #128	; 0x80
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f7ff ff5a 	bl	80037c8 <SPI_WaitFlagStateUntilTimeout>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d016      	beq.n	8003948 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391e:	f043 0220 	orr.w	r2, r3, #32
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e00f      	b.n	800394a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00a      	beq.n	8003946 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	3b01      	subs	r3, #1
 8003934:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003940:	2b80      	cmp	r3, #128	; 0x80
 8003942:	d0f2      	beq.n	800392a <SPI_EndRxTxTransaction+0x52>
 8003944:	e000      	b.n	8003948 <SPI_EndRxTxTransaction+0x70>
        break;
 8003946:	bf00      	nop
  }

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	20000050 	.word	0x20000050
 8003958:	165e9f81 	.word	0x165e9f81

0800395c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e041      	b.n	80039f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7fe fbe4 	bl	8002150 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3304      	adds	r3, #4
 8003998:	4619      	mov	r1, r3
 800399a:	4610      	mov	r0, r2
 800399c:	f000 fb26 	bl	8003fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b082      	sub	sp, #8
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e041      	b.n	8003a90 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d106      	bne.n	8003a26 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f839 	bl	8003a98 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2202      	movs	r2, #2
 8003a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	3304      	adds	r3, #4
 8003a36:	4619      	mov	r1, r3
 8003a38:	4610      	mov	r0, r2
 8003a3a:	f000 fad7 	bl	8003fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d122      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d11b      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f06f 0202 	mvn.w	r2, #2
 8003ad8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 fa5d 	bl	8003fae <HAL_TIM_IC_CaptureCallback>
 8003af4:	e005      	b.n	8003b02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 fa4f 	bl	8003f9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 fa60 	bl	8003fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d122      	bne.n	8003b5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d11b      	bne.n	8003b5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f06f 0204 	mvn.w	r2, #4
 8003b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2202      	movs	r2, #2
 8003b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 fa33 	bl	8003fae <HAL_TIM_IC_CaptureCallback>
 8003b48:	e005      	b.n	8003b56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 fa25 	bl	8003f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 fa36 	bl	8003fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b08      	cmp	r3, #8
 8003b68:	d122      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d11b      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f06f 0208 	mvn.w	r2, #8
 8003b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2204      	movs	r2, #4
 8003b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 fa09 	bl	8003fae <HAL_TIM_IC_CaptureCallback>
 8003b9c:	e005      	b.n	8003baa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f9fb 	bl	8003f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 fa0c 	bl	8003fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f003 0310 	and.w	r3, r3, #16
 8003bba:	2b10      	cmp	r3, #16
 8003bbc:	d122      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f003 0310 	and.w	r3, r3, #16
 8003bc8:	2b10      	cmp	r3, #16
 8003bca:	d11b      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f06f 0210 	mvn.w	r2, #16
 8003bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2208      	movs	r2, #8
 8003bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f9df 	bl	8003fae <HAL_TIM_IC_CaptureCallback>
 8003bf0:	e005      	b.n	8003bfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f9d1 	bl	8003f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f9e2 	bl	8003fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d10e      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d107      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f06f 0201 	mvn.w	r2, #1
 8003c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f9ab 	bl	8003f86 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3a:	2b80      	cmp	r3, #128	; 0x80
 8003c3c:	d10e      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c48:	2b80      	cmp	r3, #128	; 0x80
 8003c4a:	d107      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 fdca 	bl	80047f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c66:	2b40      	cmp	r3, #64	; 0x40
 8003c68:	d10e      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c74:	2b40      	cmp	r3, #64	; 0x40
 8003c76:	d107      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f9a7 	bl	8003fd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f003 0320 	and.w	r3, r3, #32
 8003c92:	2b20      	cmp	r3, #32
 8003c94:	d10e      	bne.n	8003cb4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f003 0320 	and.w	r3, r3, #32
 8003ca0:	2b20      	cmp	r3, #32
 8003ca2:	d107      	bne.n	8003cb4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f06f 0220 	mvn.w	r2, #32
 8003cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 fd94 	bl	80047dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cb4:	bf00      	nop
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d101      	bne.n	8003cda <HAL_TIM_OC_ConfigChannel+0x1e>
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	e048      	b.n	8003d6c <HAL_TIM_OC_ConfigChannel+0xb0>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b0c      	cmp	r3, #12
 8003ce6:	d839      	bhi.n	8003d5c <HAL_TIM_OC_ConfigChannel+0xa0>
 8003ce8:	a201      	add	r2, pc, #4	; (adr r2, 8003cf0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cee:	bf00      	nop
 8003cf0:	08003d25 	.word	0x08003d25
 8003cf4:	08003d5d 	.word	0x08003d5d
 8003cf8:	08003d5d 	.word	0x08003d5d
 8003cfc:	08003d5d 	.word	0x08003d5d
 8003d00:	08003d33 	.word	0x08003d33
 8003d04:	08003d5d 	.word	0x08003d5d
 8003d08:	08003d5d 	.word	0x08003d5d
 8003d0c:	08003d5d 	.word	0x08003d5d
 8003d10:	08003d41 	.word	0x08003d41
 8003d14:	08003d5d 	.word	0x08003d5d
 8003d18:	08003d5d 	.word	0x08003d5d
 8003d1c:	08003d5d 	.word	0x08003d5d
 8003d20:	08003d4f 	.word	0x08003d4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68b9      	ldr	r1, [r7, #8]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 f9de 	bl	80040ec <TIM_OC1_SetConfig>
      break;
 8003d30:	e017      	b.n	8003d62 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68b9      	ldr	r1, [r7, #8]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 fa3d 	bl	80041b8 <TIM_OC2_SetConfig>
      break;
 8003d3e:	e010      	b.n	8003d62 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68b9      	ldr	r1, [r7, #8]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 faa2 	bl	8004290 <TIM_OC3_SetConfig>
      break;
 8003d4c:	e009      	b.n	8003d62 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68b9      	ldr	r1, [r7, #8]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 fb05 	bl	8004364 <TIM_OC4_SetConfig>
      break;
 8003d5a:	e002      	b.n	8003d62 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3718      	adds	r7, #24
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d101      	bne.n	8003d90 <HAL_TIM_ConfigClockSource+0x1c>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	e0b4      	b.n	8003efa <HAL_TIM_ConfigClockSource+0x186>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003dae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003db6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dc8:	d03e      	beq.n	8003e48 <HAL_TIM_ConfigClockSource+0xd4>
 8003dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dce:	f200 8087 	bhi.w	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd6:	f000 8086 	beq.w	8003ee6 <HAL_TIM_ConfigClockSource+0x172>
 8003dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dde:	d87f      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003de0:	2b70      	cmp	r3, #112	; 0x70
 8003de2:	d01a      	beq.n	8003e1a <HAL_TIM_ConfigClockSource+0xa6>
 8003de4:	2b70      	cmp	r3, #112	; 0x70
 8003de6:	d87b      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003de8:	2b60      	cmp	r3, #96	; 0x60
 8003dea:	d050      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0x11a>
 8003dec:	2b60      	cmp	r3, #96	; 0x60
 8003dee:	d877      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003df0:	2b50      	cmp	r3, #80	; 0x50
 8003df2:	d03c      	beq.n	8003e6e <HAL_TIM_ConfigClockSource+0xfa>
 8003df4:	2b50      	cmp	r3, #80	; 0x50
 8003df6:	d873      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003df8:	2b40      	cmp	r3, #64	; 0x40
 8003dfa:	d058      	beq.n	8003eae <HAL_TIM_ConfigClockSource+0x13a>
 8003dfc:	2b40      	cmp	r3, #64	; 0x40
 8003dfe:	d86f      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003e00:	2b30      	cmp	r3, #48	; 0x30
 8003e02:	d064      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x15a>
 8003e04:	2b30      	cmp	r3, #48	; 0x30
 8003e06:	d86b      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003e08:	2b20      	cmp	r3, #32
 8003e0a:	d060      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x15a>
 8003e0c:	2b20      	cmp	r3, #32
 8003e0e:	d867      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d05c      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x15a>
 8003e14:	2b10      	cmp	r3, #16
 8003e16:	d05a      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x15a>
 8003e18:	e062      	b.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6818      	ldr	r0, [r3, #0]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	6899      	ldr	r1, [r3, #8]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f000 fbf6 	bl	800461a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	609a      	str	r2, [r3, #8]
      break;
 8003e46:	e04f      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6818      	ldr	r0, [r3, #0]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	6899      	ldr	r1, [r3, #8]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f000 fbdf 	bl	800461a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e6a:	609a      	str	r2, [r3, #8]
      break;
 8003e6c:	e03c      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6818      	ldr	r0, [r3, #0]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	6859      	ldr	r1, [r3, #4]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f000 fb53 	bl	8004526 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2150      	movs	r1, #80	; 0x50
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 fbac 	bl	80045e4 <TIM_ITRx_SetConfig>
      break;
 8003e8c:	e02c      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6818      	ldr	r0, [r3, #0]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	6859      	ldr	r1, [r3, #4]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	f000 fb72 	bl	8004584 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2160      	movs	r1, #96	; 0x60
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 fb9c 	bl	80045e4 <TIM_ITRx_SetConfig>
      break;
 8003eac:	e01c      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6818      	ldr	r0, [r3, #0]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	6859      	ldr	r1, [r3, #4]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	f000 fb33 	bl	8004526 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2140      	movs	r1, #64	; 0x40
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 fb8c 	bl	80045e4 <TIM_ITRx_SetConfig>
      break;
 8003ecc:	e00c      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4610      	mov	r0, r2
 8003eda:	f000 fb83 	bl	80045e4 <TIM_ITRx_SetConfig>
      break;
 8003ede:	e003      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ee4:	e000      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ee6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b082      	sub	sp, #8
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
 8003f0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d101      	bne.n	8003f1a <HAL_TIM_SlaveConfigSynchro+0x18>
 8003f16:	2302      	movs	r3, #2
 8003f18:	e031      	b.n	8003f7e <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2202      	movs	r2, #2
 8003f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003f2a:	6839      	ldr	r1, [r7, #0]
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 fa69 	bl	8004404 <TIM_SlaveTimer_SetConfig>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d009      	beq.n	8003f4c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e018      	b.n	8003f7e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68da      	ldr	r2, [r3, #12]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f5a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f6a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
	...

08003fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a34      	ldr	r2, [pc, #208]	; (80040d0 <TIM_Base_SetConfig+0xe4>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d00f      	beq.n	8004024 <TIM_Base_SetConfig+0x38>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800400a:	d00b      	beq.n	8004024 <TIM_Base_SetConfig+0x38>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a31      	ldr	r2, [pc, #196]	; (80040d4 <TIM_Base_SetConfig+0xe8>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d007      	beq.n	8004024 <TIM_Base_SetConfig+0x38>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a30      	ldr	r2, [pc, #192]	; (80040d8 <TIM_Base_SetConfig+0xec>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d003      	beq.n	8004024 <TIM_Base_SetConfig+0x38>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a2f      	ldr	r2, [pc, #188]	; (80040dc <TIM_Base_SetConfig+0xf0>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d108      	bne.n	8004036 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800402a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	4313      	orrs	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a25      	ldr	r2, [pc, #148]	; (80040d0 <TIM_Base_SetConfig+0xe4>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d01b      	beq.n	8004076 <TIM_Base_SetConfig+0x8a>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004044:	d017      	beq.n	8004076 <TIM_Base_SetConfig+0x8a>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a22      	ldr	r2, [pc, #136]	; (80040d4 <TIM_Base_SetConfig+0xe8>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d013      	beq.n	8004076 <TIM_Base_SetConfig+0x8a>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a21      	ldr	r2, [pc, #132]	; (80040d8 <TIM_Base_SetConfig+0xec>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d00f      	beq.n	8004076 <TIM_Base_SetConfig+0x8a>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a20      	ldr	r2, [pc, #128]	; (80040dc <TIM_Base_SetConfig+0xf0>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d00b      	beq.n	8004076 <TIM_Base_SetConfig+0x8a>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a1f      	ldr	r2, [pc, #124]	; (80040e0 <TIM_Base_SetConfig+0xf4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d007      	beq.n	8004076 <TIM_Base_SetConfig+0x8a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a1e      	ldr	r2, [pc, #120]	; (80040e4 <TIM_Base_SetConfig+0xf8>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d003      	beq.n	8004076 <TIM_Base_SetConfig+0x8a>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a1d      	ldr	r2, [pc, #116]	; (80040e8 <TIM_Base_SetConfig+0xfc>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d108      	bne.n	8004088 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800407c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	4313      	orrs	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a08      	ldr	r2, [pc, #32]	; (80040d0 <TIM_Base_SetConfig+0xe4>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d103      	bne.n	80040bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	691a      	ldr	r2, [r3, #16]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	615a      	str	r2, [r3, #20]
}
 80040c2:	bf00      	nop
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	40010000 	.word	0x40010000
 80040d4:	40000400 	.word	0x40000400
 80040d8:	40000800 	.word	0x40000800
 80040dc:	40000c00 	.word	0x40000c00
 80040e0:	40014000 	.word	0x40014000
 80040e4:	40014400 	.word	0x40014400
 80040e8:	40014800 	.word	0x40014800

080040ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	f023 0201 	bic.w	r2, r3, #1
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0303 	bic.w	r3, r3, #3
 8004122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f023 0302 	bic.w	r3, r3, #2
 8004134:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	4313      	orrs	r3, r2
 800413e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a1c      	ldr	r2, [pc, #112]	; (80041b4 <TIM_OC1_SetConfig+0xc8>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d10c      	bne.n	8004162 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f023 0308 	bic.w	r3, r3, #8
 800414e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	4313      	orrs	r3, r2
 8004158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f023 0304 	bic.w	r3, r3, #4
 8004160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a13      	ldr	r2, [pc, #76]	; (80041b4 <TIM_OC1_SetConfig+0xc8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d111      	bne.n	800418e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	4313      	orrs	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	4313      	orrs	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	621a      	str	r2, [r3, #32]
}
 80041a8:	bf00      	nop
 80041aa:	371c      	adds	r7, #28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	40010000 	.word	0x40010000

080041b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	f023 0210 	bic.w	r2, r3, #16
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	021b      	lsls	r3, r3, #8
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f023 0320 	bic.w	r3, r3, #32
 8004202:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	4313      	orrs	r3, r2
 800420e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a1e      	ldr	r2, [pc, #120]	; (800428c <TIM_OC2_SetConfig+0xd4>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d10d      	bne.n	8004234 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800421e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004232:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a15      	ldr	r2, [pc, #84]	; (800428c <TIM_OC2_SetConfig+0xd4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d113      	bne.n	8004264 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004242:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800424a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	4313      	orrs	r3, r2
 8004256:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	4313      	orrs	r3, r2
 8004262:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	621a      	str	r2, [r3, #32]
}
 800427e:	bf00      	nop
 8004280:	371c      	adds	r7, #28
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	40010000 	.word	0x40010000

08004290 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004290:	b480      	push	{r7}
 8004292:	b087      	sub	sp, #28
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0303 	bic.w	r3, r3, #3
 80042c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	021b      	lsls	r3, r3, #8
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a1d      	ldr	r2, [pc, #116]	; (8004360 <TIM_OC3_SetConfig+0xd0>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d10d      	bne.n	800430a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	021b      	lsls	r3, r3, #8
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	4313      	orrs	r3, r2
 8004300:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004308:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a14      	ldr	r2, [pc, #80]	; (8004360 <TIM_OC3_SetConfig+0xd0>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d113      	bne.n	800433a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	4313      	orrs	r3, r2
 800432c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	621a      	str	r2, [r3, #32]
}
 8004354:	bf00      	nop
 8004356:	371c      	adds	r7, #28
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	40010000 	.word	0x40010000

08004364 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004364:	b480      	push	{r7}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800439a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	021b      	lsls	r3, r3, #8
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	031b      	lsls	r3, r3, #12
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a10      	ldr	r2, [pc, #64]	; (8004400 <TIM_OC4_SetConfig+0x9c>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d109      	bne.n	80043d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	019b      	lsls	r3, r3, #6
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	621a      	str	r2, [r3, #32]
}
 80043f2:	bf00      	nop
 80043f4:	371c      	adds	r7, #28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	40010000 	.word	0x40010000

08004404 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800440e:	2300      	movs	r3, #0
 8004410:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004420:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	4313      	orrs	r3, r2
 800442a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	f023 0307 	bic.w	r3, r3, #7
 8004432:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	4313      	orrs	r3, r2
 800443c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2b70      	cmp	r3, #112	; 0x70
 800444c:	d01a      	beq.n	8004484 <TIM_SlaveTimer_SetConfig+0x80>
 800444e:	2b70      	cmp	r3, #112	; 0x70
 8004450:	d860      	bhi.n	8004514 <TIM_SlaveTimer_SetConfig+0x110>
 8004452:	2b60      	cmp	r3, #96	; 0x60
 8004454:	d054      	beq.n	8004500 <TIM_SlaveTimer_SetConfig+0xfc>
 8004456:	2b60      	cmp	r3, #96	; 0x60
 8004458:	d85c      	bhi.n	8004514 <TIM_SlaveTimer_SetConfig+0x110>
 800445a:	2b50      	cmp	r3, #80	; 0x50
 800445c:	d046      	beq.n	80044ec <TIM_SlaveTimer_SetConfig+0xe8>
 800445e:	2b50      	cmp	r3, #80	; 0x50
 8004460:	d858      	bhi.n	8004514 <TIM_SlaveTimer_SetConfig+0x110>
 8004462:	2b40      	cmp	r3, #64	; 0x40
 8004464:	d019      	beq.n	800449a <TIM_SlaveTimer_SetConfig+0x96>
 8004466:	2b40      	cmp	r3, #64	; 0x40
 8004468:	d854      	bhi.n	8004514 <TIM_SlaveTimer_SetConfig+0x110>
 800446a:	2b30      	cmp	r3, #48	; 0x30
 800446c:	d055      	beq.n	800451a <TIM_SlaveTimer_SetConfig+0x116>
 800446e:	2b30      	cmp	r3, #48	; 0x30
 8004470:	d850      	bhi.n	8004514 <TIM_SlaveTimer_SetConfig+0x110>
 8004472:	2b20      	cmp	r3, #32
 8004474:	d051      	beq.n	800451a <TIM_SlaveTimer_SetConfig+0x116>
 8004476:	2b20      	cmp	r3, #32
 8004478:	d84c      	bhi.n	8004514 <TIM_SlaveTimer_SetConfig+0x110>
 800447a:	2b00      	cmp	r3, #0
 800447c:	d04d      	beq.n	800451a <TIM_SlaveTimer_SetConfig+0x116>
 800447e:	2b10      	cmp	r3, #16
 8004480:	d04b      	beq.n	800451a <TIM_SlaveTimer_SetConfig+0x116>
 8004482:	e047      	b.n	8004514 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6818      	ldr	r0, [r3, #0]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	68d9      	ldr	r1, [r3, #12]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	f000 f8c1 	bl	800461a <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8004498:	e040      	b.n	800451c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2b05      	cmp	r3, #5
 80044a0:	d101      	bne.n	80044a6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e03b      	b.n	800451e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6a1a      	ldr	r2, [r3, #32]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 0201 	bic.w	r2, r2, #1
 80044bc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044cc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	621a      	str	r2, [r3, #32]
      break;
 80044ea:	e017      	b.n	800451c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6818      	ldr	r0, [r3, #0]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	6899      	ldr	r1, [r3, #8]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	461a      	mov	r2, r3
 80044fa:	f000 f814 	bl	8004526 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80044fe:	e00d      	b.n	800451c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6818      	ldr	r0, [r3, #0]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	6899      	ldr	r1, [r3, #8]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	461a      	mov	r2, r3
 800450e:	f000 f839 	bl	8004584 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004512:	e003      	b.n	800451c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	75fb      	strb	r3, [r7, #23]
      break;
 8004518:	e000      	b.n	800451c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800451a:	bf00      	nop
  }

  return status;
 800451c:	7dfb      	ldrb	r3, [r7, #23]
}
 800451e:	4618      	mov	r0, r3
 8004520:	3718      	adds	r7, #24
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004526:	b480      	push	{r7}
 8004528:	b087      	sub	sp, #28
 800452a:	af00      	add	r7, sp, #0
 800452c:	60f8      	str	r0, [r7, #12]
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	f023 0201 	bic.w	r2, r3, #1
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004550:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	4313      	orrs	r3, r2
 800455a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f023 030a 	bic.w	r3, r3, #10
 8004562:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	4313      	orrs	r3, r2
 800456a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	621a      	str	r2, [r3, #32]
}
 8004578:	bf00      	nop
 800457a:	371c      	adds	r7, #28
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	f023 0210 	bic.w	r2, r3, #16
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	031b      	lsls	r3, r3, #12
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	621a      	str	r2, [r3, #32]
}
 80045d8:	bf00      	nop
 80045da:	371c      	adds	r7, #28
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	4313      	orrs	r3, r2
 8004602:	f043 0307 	orr.w	r3, r3, #7
 8004606:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	609a      	str	r2, [r3, #8]
}
 800460e:	bf00      	nop
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800461a:	b480      	push	{r7}
 800461c:	b087      	sub	sp, #28
 800461e:	af00      	add	r7, sp, #0
 8004620:	60f8      	str	r0, [r7, #12]
 8004622:	60b9      	str	r1, [r7, #8]
 8004624:	607a      	str	r2, [r7, #4]
 8004626:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004634:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	021a      	lsls	r2, r3, #8
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	431a      	orrs	r2, r3
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	4313      	orrs	r3, r2
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	4313      	orrs	r3, r2
 8004646:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	609a      	str	r2, [r3, #8]
}
 800464e:	bf00      	nop
 8004650:	371c      	adds	r7, #28
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
	...

0800465c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004670:	2302      	movs	r3, #2
 8004672:	e050      	b.n	8004716 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a1c      	ldr	r2, [pc, #112]	; (8004724 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d018      	beq.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c0:	d013      	beq.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a18      	ldr	r2, [pc, #96]	; (8004728 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d00e      	beq.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a16      	ldr	r2, [pc, #88]	; (800472c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d009      	beq.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a15      	ldr	r2, [pc, #84]	; (8004730 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d004      	beq.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a13      	ldr	r2, [pc, #76]	; (8004734 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d10c      	bne.n	8004704 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	40010000 	.word	0x40010000
 8004728:	40000400 	.word	0x40000400
 800472c:	40000800 	.word	0x40000800
 8004730:	40000c00 	.word	0x40000c00
 8004734:	40014000 	.word	0x40014000

08004738 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004742:	2300      	movs	r3, #0
 8004744:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004750:	2302      	movs	r3, #2
 8004752:	e03d      	b.n	80047d0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	4313      	orrs	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	4313      	orrs	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4313      	orrs	r3, r2
 8004792:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	4313      	orrs	r3, r2
 80047a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e03f      	b.n	8004896 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d106      	bne.n	8004830 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7fd fcf2 	bl	8002214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2224      	movs	r2, #36	; 0x24
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004846:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f929 	bl	8004aa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	691a      	ldr	r2, [r3, #16]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800485c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	695a      	ldr	r2, [r3, #20]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800486c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68da      	ldr	r2, [r3, #12]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800487c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2220      	movs	r2, #32
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2220      	movs	r2, #32
 8004890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b08a      	sub	sp, #40	; 0x28
 80048a2:	af02      	add	r7, sp, #8
 80048a4:	60f8      	str	r0, [r7, #12]
 80048a6:	60b9      	str	r1, [r7, #8]
 80048a8:	603b      	str	r3, [r7, #0]
 80048aa:	4613      	mov	r3, r2
 80048ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b20      	cmp	r3, #32
 80048bc:	d17c      	bne.n	80049b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d002      	beq.n	80048ca <HAL_UART_Transmit+0x2c>
 80048c4:	88fb      	ldrh	r3, [r7, #6]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e075      	b.n	80049ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <HAL_UART_Transmit+0x3e>
 80048d8:	2302      	movs	r3, #2
 80048da:	e06e      	b.n	80049ba <HAL_UART_Transmit+0x11c>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2221      	movs	r2, #33	; 0x21
 80048ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048f2:	f7fd fe2b 	bl	800254c <HAL_GetTick>
 80048f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	88fa      	ldrh	r2, [r7, #6]
 80048fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	88fa      	ldrh	r2, [r7, #6]
 8004902:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800490c:	d108      	bne.n	8004920 <HAL_UART_Transmit+0x82>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d104      	bne.n	8004920 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004916:	2300      	movs	r3, #0
 8004918:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	61bb      	str	r3, [r7, #24]
 800491e:	e003      	b.n	8004928 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004924:	2300      	movs	r3, #0
 8004926:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004930:	e02a      	b.n	8004988 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	2200      	movs	r2, #0
 800493a:	2180      	movs	r1, #128	; 0x80
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 f840 	bl	80049c2 <UART_WaitOnFlagUntilTimeout>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e036      	b.n	80049ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10b      	bne.n	800496a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	881b      	ldrh	r3, [r3, #0]
 8004956:	461a      	mov	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004960:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	3302      	adds	r3, #2
 8004966:	61bb      	str	r3, [r7, #24]
 8004968:	e007      	b.n	800497a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	781a      	ldrb	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	3301      	adds	r3, #1
 8004978:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800497e:	b29b      	uxth	r3, r3
 8004980:	3b01      	subs	r3, #1
 8004982:	b29a      	uxth	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800498c:	b29b      	uxth	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1cf      	bne.n	8004932 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2200      	movs	r2, #0
 800499a:	2140      	movs	r1, #64	; 0x40
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 f810 	bl	80049c2 <UART_WaitOnFlagUntilTimeout>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d001      	beq.n	80049ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e006      	b.n	80049ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80049b4:	2300      	movs	r3, #0
 80049b6:	e000      	b.n	80049ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80049b8:	2302      	movs	r3, #2
  }
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3720      	adds	r7, #32
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b090      	sub	sp, #64	; 0x40
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	60f8      	str	r0, [r7, #12]
 80049ca:	60b9      	str	r1, [r7, #8]
 80049cc:	603b      	str	r3, [r7, #0]
 80049ce:	4613      	mov	r3, r2
 80049d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049d2:	e050      	b.n	8004a76 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049da:	d04c      	beq.n	8004a76 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d007      	beq.n	80049f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80049e2:	f7fd fdb3 	bl	800254c <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d241      	bcs.n	8004a76 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	330c      	adds	r3, #12
 80049f8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fc:	e853 3f00 	ldrex	r3, [r3]
 8004a00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	330c      	adds	r3, #12
 8004a10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a12:	637a      	str	r2, [r7, #52]	; 0x34
 8004a14:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a1a:	e841 2300 	strex	r3, r2, [r1]
 8004a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1e5      	bne.n	80049f2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	3314      	adds	r3, #20
 8004a2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	e853 3f00 	ldrex	r3, [r3]
 8004a34:	613b      	str	r3, [r7, #16]
   return(result);
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	f023 0301 	bic.w	r3, r3, #1
 8004a3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	3314      	adds	r3, #20
 8004a44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a46:	623a      	str	r2, [r7, #32]
 8004a48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4a:	69f9      	ldr	r1, [r7, #28]
 8004a4c:	6a3a      	ldr	r2, [r7, #32]
 8004a4e:	e841 2300 	strex	r3, r2, [r1]
 8004a52:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1e5      	bne.n	8004a26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2220      	movs	r2, #32
 8004a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2220      	movs	r2, #32
 8004a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e00f      	b.n	8004a96 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	bf0c      	ite	eq
 8004a86:	2301      	moveq	r3, #1
 8004a88:	2300      	movne	r3, #0
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	79fb      	ldrb	r3, [r7, #7]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d09f      	beq.n	80049d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3740      	adds	r7, #64	; 0x40
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
	...

08004aa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aa4:	b0c0      	sub	sp, #256	; 0x100
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004abc:	68d9      	ldr	r1, [r3, #12]
 8004abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	ea40 0301 	orr.w	r3, r0, r1
 8004ac8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004af8:	f021 010c 	bic.w	r1, r1, #12
 8004afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b06:	430b      	orrs	r3, r1
 8004b08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b1a:	6999      	ldr	r1, [r3, #24]
 8004b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	ea40 0301 	orr.w	r3, r0, r1
 8004b26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	4b8f      	ldr	r3, [pc, #572]	; (8004d6c <UART_SetConfig+0x2cc>)
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d005      	beq.n	8004b40 <UART_SetConfig+0xa0>
 8004b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	4b8d      	ldr	r3, [pc, #564]	; (8004d70 <UART_SetConfig+0x2d0>)
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d104      	bne.n	8004b4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b40:	f7fe fc5a 	bl	80033f8 <HAL_RCC_GetPCLK2Freq>
 8004b44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b48:	e003      	b.n	8004b52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b4a:	f7fe fc41 	bl	80033d0 <HAL_RCC_GetPCLK1Freq>
 8004b4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b56:	69db      	ldr	r3, [r3, #28]
 8004b58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b5c:	f040 810c 	bne.w	8004d78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b64:	2200      	movs	r2, #0
 8004b66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b6a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004b72:	4622      	mov	r2, r4
 8004b74:	462b      	mov	r3, r5
 8004b76:	1891      	adds	r1, r2, r2
 8004b78:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b7a:	415b      	adcs	r3, r3
 8004b7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b82:	4621      	mov	r1, r4
 8004b84:	eb12 0801 	adds.w	r8, r2, r1
 8004b88:	4629      	mov	r1, r5
 8004b8a:	eb43 0901 	adc.w	r9, r3, r1
 8004b8e:	f04f 0200 	mov.w	r2, #0
 8004b92:	f04f 0300 	mov.w	r3, #0
 8004b96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ba2:	4690      	mov	r8, r2
 8004ba4:	4699      	mov	r9, r3
 8004ba6:	4623      	mov	r3, r4
 8004ba8:	eb18 0303 	adds.w	r3, r8, r3
 8004bac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004bb0:	462b      	mov	r3, r5
 8004bb2:	eb49 0303 	adc.w	r3, r9, r3
 8004bb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004bc6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004bca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004bce:	460b      	mov	r3, r1
 8004bd0:	18db      	adds	r3, r3, r3
 8004bd2:	653b      	str	r3, [r7, #80]	; 0x50
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	eb42 0303 	adc.w	r3, r2, r3
 8004bda:	657b      	str	r3, [r7, #84]	; 0x54
 8004bdc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004be0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004be4:	f7fc f86a 	bl	8000cbc <__aeabi_uldivmod>
 8004be8:	4602      	mov	r2, r0
 8004bea:	460b      	mov	r3, r1
 8004bec:	4b61      	ldr	r3, [pc, #388]	; (8004d74 <UART_SetConfig+0x2d4>)
 8004bee:	fba3 2302 	umull	r2, r3, r3, r2
 8004bf2:	095b      	lsrs	r3, r3, #5
 8004bf4:	011c      	lsls	r4, r3, #4
 8004bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c08:	4642      	mov	r2, r8
 8004c0a:	464b      	mov	r3, r9
 8004c0c:	1891      	adds	r1, r2, r2
 8004c0e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c10:	415b      	adcs	r3, r3
 8004c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c18:	4641      	mov	r1, r8
 8004c1a:	eb12 0a01 	adds.w	sl, r2, r1
 8004c1e:	4649      	mov	r1, r9
 8004c20:	eb43 0b01 	adc.w	fp, r3, r1
 8004c24:	f04f 0200 	mov.w	r2, #0
 8004c28:	f04f 0300 	mov.w	r3, #0
 8004c2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c38:	4692      	mov	sl, r2
 8004c3a:	469b      	mov	fp, r3
 8004c3c:	4643      	mov	r3, r8
 8004c3e:	eb1a 0303 	adds.w	r3, sl, r3
 8004c42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c46:	464b      	mov	r3, r9
 8004c48:	eb4b 0303 	adc.w	r3, fp, r3
 8004c4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c5c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c64:	460b      	mov	r3, r1
 8004c66:	18db      	adds	r3, r3, r3
 8004c68:	643b      	str	r3, [r7, #64]	; 0x40
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	eb42 0303 	adc.w	r3, r2, r3
 8004c70:	647b      	str	r3, [r7, #68]	; 0x44
 8004c72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004c7a:	f7fc f81f 	bl	8000cbc <__aeabi_uldivmod>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	460b      	mov	r3, r1
 8004c82:	4611      	mov	r1, r2
 8004c84:	4b3b      	ldr	r3, [pc, #236]	; (8004d74 <UART_SetConfig+0x2d4>)
 8004c86:	fba3 2301 	umull	r2, r3, r3, r1
 8004c8a:	095b      	lsrs	r3, r3, #5
 8004c8c:	2264      	movs	r2, #100	; 0x64
 8004c8e:	fb02 f303 	mul.w	r3, r2, r3
 8004c92:	1acb      	subs	r3, r1, r3
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c9a:	4b36      	ldr	r3, [pc, #216]	; (8004d74 <UART_SetConfig+0x2d4>)
 8004c9c:	fba3 2302 	umull	r2, r3, r3, r2
 8004ca0:	095b      	lsrs	r3, r3, #5
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ca8:	441c      	add	r4, r3
 8004caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cb4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004cb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004cbc:	4642      	mov	r2, r8
 8004cbe:	464b      	mov	r3, r9
 8004cc0:	1891      	adds	r1, r2, r2
 8004cc2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004cc4:	415b      	adcs	r3, r3
 8004cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ccc:	4641      	mov	r1, r8
 8004cce:	1851      	adds	r1, r2, r1
 8004cd0:	6339      	str	r1, [r7, #48]	; 0x30
 8004cd2:	4649      	mov	r1, r9
 8004cd4:	414b      	adcs	r3, r1
 8004cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8004cd8:	f04f 0200 	mov.w	r2, #0
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ce4:	4659      	mov	r1, fp
 8004ce6:	00cb      	lsls	r3, r1, #3
 8004ce8:	4651      	mov	r1, sl
 8004cea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cee:	4651      	mov	r1, sl
 8004cf0:	00ca      	lsls	r2, r1, #3
 8004cf2:	4610      	mov	r0, r2
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	4642      	mov	r2, r8
 8004cfa:	189b      	adds	r3, r3, r2
 8004cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d00:	464b      	mov	r3, r9
 8004d02:	460a      	mov	r2, r1
 8004d04:	eb42 0303 	adc.w	r3, r2, r3
 8004d08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d20:	460b      	mov	r3, r1
 8004d22:	18db      	adds	r3, r3, r3
 8004d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d26:	4613      	mov	r3, r2
 8004d28:	eb42 0303 	adc.w	r3, r2, r3
 8004d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d36:	f7fb ffc1 	bl	8000cbc <__aeabi_uldivmod>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	4b0d      	ldr	r3, [pc, #52]	; (8004d74 <UART_SetConfig+0x2d4>)
 8004d40:	fba3 1302 	umull	r1, r3, r3, r2
 8004d44:	095b      	lsrs	r3, r3, #5
 8004d46:	2164      	movs	r1, #100	; 0x64
 8004d48:	fb01 f303 	mul.w	r3, r1, r3
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	3332      	adds	r3, #50	; 0x32
 8004d52:	4a08      	ldr	r2, [pc, #32]	; (8004d74 <UART_SetConfig+0x2d4>)
 8004d54:	fba2 2303 	umull	r2, r3, r2, r3
 8004d58:	095b      	lsrs	r3, r3, #5
 8004d5a:	f003 0207 	and.w	r2, r3, #7
 8004d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4422      	add	r2, r4
 8004d66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d68:	e105      	b.n	8004f76 <UART_SetConfig+0x4d6>
 8004d6a:	bf00      	nop
 8004d6c:	40011000 	.word	0x40011000
 8004d70:	40011400 	.word	0x40011400
 8004d74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004d86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004d8a:	4642      	mov	r2, r8
 8004d8c:	464b      	mov	r3, r9
 8004d8e:	1891      	adds	r1, r2, r2
 8004d90:	6239      	str	r1, [r7, #32]
 8004d92:	415b      	adcs	r3, r3
 8004d94:	627b      	str	r3, [r7, #36]	; 0x24
 8004d96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d9a:	4641      	mov	r1, r8
 8004d9c:	1854      	adds	r4, r2, r1
 8004d9e:	4649      	mov	r1, r9
 8004da0:	eb43 0501 	adc.w	r5, r3, r1
 8004da4:	f04f 0200 	mov.w	r2, #0
 8004da8:	f04f 0300 	mov.w	r3, #0
 8004dac:	00eb      	lsls	r3, r5, #3
 8004dae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004db2:	00e2      	lsls	r2, r4, #3
 8004db4:	4614      	mov	r4, r2
 8004db6:	461d      	mov	r5, r3
 8004db8:	4643      	mov	r3, r8
 8004dba:	18e3      	adds	r3, r4, r3
 8004dbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004dc0:	464b      	mov	r3, r9
 8004dc2:	eb45 0303 	adc.w	r3, r5, r3
 8004dc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004dd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004dda:	f04f 0200 	mov.w	r2, #0
 8004dde:	f04f 0300 	mov.w	r3, #0
 8004de2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004de6:	4629      	mov	r1, r5
 8004de8:	008b      	lsls	r3, r1, #2
 8004dea:	4621      	mov	r1, r4
 8004dec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004df0:	4621      	mov	r1, r4
 8004df2:	008a      	lsls	r2, r1, #2
 8004df4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004df8:	f7fb ff60 	bl	8000cbc <__aeabi_uldivmod>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	460b      	mov	r3, r1
 8004e00:	4b60      	ldr	r3, [pc, #384]	; (8004f84 <UART_SetConfig+0x4e4>)
 8004e02:	fba3 2302 	umull	r2, r3, r3, r2
 8004e06:	095b      	lsrs	r3, r3, #5
 8004e08:	011c      	lsls	r4, r3, #4
 8004e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e1c:	4642      	mov	r2, r8
 8004e1e:	464b      	mov	r3, r9
 8004e20:	1891      	adds	r1, r2, r2
 8004e22:	61b9      	str	r1, [r7, #24]
 8004e24:	415b      	adcs	r3, r3
 8004e26:	61fb      	str	r3, [r7, #28]
 8004e28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e2c:	4641      	mov	r1, r8
 8004e2e:	1851      	adds	r1, r2, r1
 8004e30:	6139      	str	r1, [r7, #16]
 8004e32:	4649      	mov	r1, r9
 8004e34:	414b      	adcs	r3, r1
 8004e36:	617b      	str	r3, [r7, #20]
 8004e38:	f04f 0200 	mov.w	r2, #0
 8004e3c:	f04f 0300 	mov.w	r3, #0
 8004e40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e44:	4659      	mov	r1, fp
 8004e46:	00cb      	lsls	r3, r1, #3
 8004e48:	4651      	mov	r1, sl
 8004e4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e4e:	4651      	mov	r1, sl
 8004e50:	00ca      	lsls	r2, r1, #3
 8004e52:	4610      	mov	r0, r2
 8004e54:	4619      	mov	r1, r3
 8004e56:	4603      	mov	r3, r0
 8004e58:	4642      	mov	r2, r8
 8004e5a:	189b      	adds	r3, r3, r2
 8004e5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e60:	464b      	mov	r3, r9
 8004e62:	460a      	mov	r2, r1
 8004e64:	eb42 0303 	adc.w	r3, r2, r3
 8004e68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004e78:	f04f 0200 	mov.w	r2, #0
 8004e7c:	f04f 0300 	mov.w	r3, #0
 8004e80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004e84:	4649      	mov	r1, r9
 8004e86:	008b      	lsls	r3, r1, #2
 8004e88:	4641      	mov	r1, r8
 8004e8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e8e:	4641      	mov	r1, r8
 8004e90:	008a      	lsls	r2, r1, #2
 8004e92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e96:	f7fb ff11 	bl	8000cbc <__aeabi_uldivmod>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4b39      	ldr	r3, [pc, #228]	; (8004f84 <UART_SetConfig+0x4e4>)
 8004ea0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ea4:	095b      	lsrs	r3, r3, #5
 8004ea6:	2164      	movs	r1, #100	; 0x64
 8004ea8:	fb01 f303 	mul.w	r3, r1, r3
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	3332      	adds	r3, #50	; 0x32
 8004eb2:	4a34      	ldr	r2, [pc, #208]	; (8004f84 <UART_SetConfig+0x4e4>)
 8004eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb8:	095b      	lsrs	r3, r3, #5
 8004eba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ebe:	441c      	add	r4, r3
 8004ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	673b      	str	r3, [r7, #112]	; 0x70
 8004ec8:	677a      	str	r2, [r7, #116]	; 0x74
 8004eca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ece:	4642      	mov	r2, r8
 8004ed0:	464b      	mov	r3, r9
 8004ed2:	1891      	adds	r1, r2, r2
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	415b      	adcs	r3, r3
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ede:	4641      	mov	r1, r8
 8004ee0:	1851      	adds	r1, r2, r1
 8004ee2:	6039      	str	r1, [r7, #0]
 8004ee4:	4649      	mov	r1, r9
 8004ee6:	414b      	adcs	r3, r1
 8004ee8:	607b      	str	r3, [r7, #4]
 8004eea:	f04f 0200 	mov.w	r2, #0
 8004eee:	f04f 0300 	mov.w	r3, #0
 8004ef2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ef6:	4659      	mov	r1, fp
 8004ef8:	00cb      	lsls	r3, r1, #3
 8004efa:	4651      	mov	r1, sl
 8004efc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f00:	4651      	mov	r1, sl
 8004f02:	00ca      	lsls	r2, r1, #3
 8004f04:	4610      	mov	r0, r2
 8004f06:	4619      	mov	r1, r3
 8004f08:	4603      	mov	r3, r0
 8004f0a:	4642      	mov	r2, r8
 8004f0c:	189b      	adds	r3, r3, r2
 8004f0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f10:	464b      	mov	r3, r9
 8004f12:	460a      	mov	r2, r1
 8004f14:	eb42 0303 	adc.w	r3, r2, r3
 8004f18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	663b      	str	r3, [r7, #96]	; 0x60
 8004f24:	667a      	str	r2, [r7, #100]	; 0x64
 8004f26:	f04f 0200 	mov.w	r2, #0
 8004f2a:	f04f 0300 	mov.w	r3, #0
 8004f2e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f32:	4649      	mov	r1, r9
 8004f34:	008b      	lsls	r3, r1, #2
 8004f36:	4641      	mov	r1, r8
 8004f38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f3c:	4641      	mov	r1, r8
 8004f3e:	008a      	lsls	r2, r1, #2
 8004f40:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f44:	f7fb feba 	bl	8000cbc <__aeabi_uldivmod>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	4b0d      	ldr	r3, [pc, #52]	; (8004f84 <UART_SetConfig+0x4e4>)
 8004f4e:	fba3 1302 	umull	r1, r3, r3, r2
 8004f52:	095b      	lsrs	r3, r3, #5
 8004f54:	2164      	movs	r1, #100	; 0x64
 8004f56:	fb01 f303 	mul.w	r3, r1, r3
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	011b      	lsls	r3, r3, #4
 8004f5e:	3332      	adds	r3, #50	; 0x32
 8004f60:	4a08      	ldr	r2, [pc, #32]	; (8004f84 <UART_SetConfig+0x4e4>)
 8004f62:	fba2 2303 	umull	r2, r3, r2, r3
 8004f66:	095b      	lsrs	r3, r3, #5
 8004f68:	f003 020f 	and.w	r2, r3, #15
 8004f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4422      	add	r2, r4
 8004f74:	609a      	str	r2, [r3, #8]
}
 8004f76:	bf00      	nop
 8004f78:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f82:	bf00      	nop
 8004f84:	51eb851f 	.word	0x51eb851f

08004f88 <interface_tx_frame>:
 8004f88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f8c:	b085      	sub	sp, #20
 8004f8e:	4605      	mov	r5, r0
 8004f90:	461c      	mov	r4, r3
 8004f92:	6883      	ldr	r3, [r0, #8]
 8004f94:	695e      	ldr	r6, [r3, #20]
 8004f96:	b1e2      	cbz	r2, 8004fd2 <interface_tx_frame+0x4a>
 8004f98:	9102      	str	r1, [sp, #8]
 8004f9a:	fa1f f882 	uxth.w	r8, r2
 8004f9e:	f8ad 800c 	strh.w	r8, [sp, #12]
 8004fa2:	f04f 0900 	mov.w	r9, #0
 8004fa6:	f8ad 900e 	strh.w	r9, [sp, #14]
 8004faa:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8004fac:	ab02      	add	r3, sp, #8
 8004fae:	464a      	mov	r2, r9
 8004fb0:	2120      	movs	r1, #32
 8004fb2:	47b8      	blx	r7
 8004fb4:	f8ad 8000 	strh.w	r8, [sp]
 8004fb8:	f8ad 9002 	strh.w	r9, [sp, #2]
 8004fbc:	68e3      	ldr	r3, [r4, #12]
 8004fbe:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004fc2:	f88d 3004 	strb.w	r3, [sp, #4]
 8004fc6:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8004fc8:	466b      	mov	r3, sp
 8004fca:	464a      	mov	r2, r9
 8004fcc:	2137      	movs	r1, #55	; 0x37
 8004fce:	4628      	mov	r0, r5
 8004fd0:	47b8      	blx	r7
 8004fd2:	68e3      	ldr	r3, [r4, #12]
 8004fd4:	f013 0f1d 	tst.w	r3, #29
 8004fd8:	d005      	beq.n	8004fe6 <interface_tx_frame+0x5e>
 8004fda:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8004fdc:	4623      	mov	r3, r4
 8004fde:	2200      	movs	r2, #0
 8004fe0:	2105      	movs	r1, #5
 8004fe2:	4628      	mov	r0, r5
 8004fe4:	47b8      	blx	r7
 8004fe6:	6863      	ldr	r3, [r4, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	db0c      	blt.n	8005006 <interface_tx_frame+0x7e>
 8004fec:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8004fee:	1d23      	adds	r3, r4, #4
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	2110      	movs	r1, #16
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	47b8      	blx	r7
 8004ff8:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8004ffa:	f104 0308 	add.w	r3, r4, #8
 8004ffe:	2200      	movs	r2, #0
 8005000:	2151      	movs	r1, #81	; 0x51
 8005002:	4628      	mov	r0, r5
 8005004:	47b8      	blx	r7
 8005006:	6b76      	ldr	r6, [r6, #52]	; 0x34
 8005008:	f104 030c 	add.w	r3, r4, #12
 800500c:	2200      	movs	r2, #0
 800500e:	2104      	movs	r1, #4
 8005010:	4628      	mov	r0, r5
 8005012:	47b0      	blx	r6
 8005014:	b005      	add	sp, #20
 8005016:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800501a <interface_get_timestamp>:
 800501a:	b530      	push	{r4, r5, lr}
 800501c:	b083      	sub	sp, #12
 800501e:	ab02      	add	r3, sp, #8
 8005020:	2400      	movs	r4, #0
 8005022:	2500      	movs	r5, #0
 8005024:	e963 4502 	strd	r4, r5, [r3, #-8]!
 8005028:	6882      	ldr	r2, [r0, #8]
 800502a:	6952      	ldr	r2, [r2, #20]
 800502c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800502e:	2200      	movs	r2, #0
 8005030:	215f      	movs	r1, #95	; 0x5f
 8005032:	47a0      	blx	r4
 8005034:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005038:	b003      	add	sp, #12
 800503a:	bd30      	pop	{r4, r5, pc}

0800503c <interface_rx_disable>:
 800503c:	b510      	push	{r4, lr}
 800503e:	6883      	ldr	r3, [r0, #8]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8005044:	2300      	movs	r3, #0
 8005046:	461a      	mov	r2, r3
 8005048:	2103      	movs	r1, #3
 800504a:	47a0      	blx	r4
 800504c:	bd10      	pop	{r4, pc}
	...

08005050 <interface_rx_enable>:
 8005050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005054:	b084      	sub	sp, #16
 8005056:	4604      	mov	r4, r0
 8005058:	6883      	ldr	r3, [r0, #8]
 800505a:	695d      	ldr	r5, [r3, #20]
 800505c:	f8d1 a008 	ldr.w	sl, [r1, #8]
 8005060:	680b      	ldr	r3, [r1, #0]
 8005062:	9303      	str	r3, [sp, #12]
 8005064:	684a      	ldr	r2, [r1, #4]
 8005066:	ab04      	add	r3, sp, #16
 8005068:	f843 2d08 	str.w	r2, [r3, #-8]!
 800506c:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 800506e:	2200      	movs	r2, #0
 8005070:	214f      	movs	r1, #79	; 0x4f
 8005072:	47b8      	blx	r7
 8005074:	4607      	mov	r7, r0
 8005076:	b118      	cbz	r0, 8005080 <interface_rx_enable+0x30>
 8005078:	4638      	mov	r0, r7
 800507a:	b004      	add	sp, #16
 800507c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005080:	68a3      	ldr	r3, [r4, #8]
 8005082:	695a      	ldr	r2, [r3, #20]
 8005084:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 8005088:	2b00      	cmp	r3, #0
 800508a:	db3c      	blt.n	8005106 <interface_rx_enable+0xb6>
 800508c:	6b57      	ldr	r7, [r2, #52]	; 0x34
 800508e:	ab01      	add	r3, sp, #4
 8005090:	2200      	movs	r2, #0
 8005092:	2157      	movs	r1, #87	; 0x57
 8005094:	4620      	mov	r0, r4
 8005096:	47b8      	blx	r7
 8005098:	bba8      	cbnz	r0, 8005106 <interface_rx_enable+0xb6>
 800509a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800509e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80050a2:	041b      	lsls	r3, r3, #16
 80050a4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80050a8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80050b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80050b6:	f1ba 0f00 	cmp.w	sl, #0
 80050ba:	d131      	bne.n	8005120 <interface_rx_enable+0xd0>
 80050bc:	f503 3378 	add.w	r3, r3, #253952	; 0x3e000
 80050c0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80050c4:	9303      	str	r3, [sp, #12]
 80050c6:	f04f 0a01 	mov.w	sl, #1
 80050ca:	68a3      	ldr	r3, [r4, #8]
 80050cc:	695f      	ldr	r7, [r3, #20]
 80050ce:	f10d 0302 	add.w	r3, sp, #2
 80050d2:	2200      	movs	r2, #0
 80050d4:	217b      	movs	r1, #123	; 0x7b
 80050d6:	4620      	mov	r0, r4
 80050d8:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 80050da:	47b0      	blx	r6
 80050dc:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d04e      	beq.n	8005182 <interface_rx_enable+0x132>
 80050e4:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 80050e8:	2201      	movs	r2, #1
 80050ea:	fa02 f303 	lsl.w	r3, r2, r3
 80050ee:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80050f2:	ea22 0203 	bic.w	r2, r2, r3
 80050f6:	ab04      	add	r3, sp, #16
 80050f8:	f823 2d0e 	strh.w	r2, [r3, #-14]!
 80050fc:	6b7f      	ldr	r7, [r7, #52]	; 0x34
 80050fe:	2200      	movs	r2, #0
 8005100:	216b      	movs	r1, #107	; 0x6b
 8005102:	4620      	mov	r0, r4
 8005104:	47b8      	blx	r7
 8005106:	f1ba 0f00 	cmp.w	sl, #0
 800510a:	d14a      	bne.n	80051a2 <interface_rx_enable+0x152>
 800510c:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800510e:	2300      	movs	r3, #0
 8005110:	461a      	mov	r2, r3
 8005112:	211f      	movs	r1, #31
 8005114:	4620      	mov	r0, r4
 8005116:	47a8      	blx	r5
 8005118:	4607      	mov	r7, r0
 800511a:	2800      	cmp	r0, #0
 800511c:	d150      	bne.n	80051c0 <interface_rx_enable+0x170>
 800511e:	e7ab      	b.n	8005078 <interface_rx_enable+0x28>
 8005120:	9a03      	ldr	r2, [sp, #12]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	4698      	mov	r8, r3
 8005126:	ea4f 79e3 	mov.w	r9, r3, asr #31
 800512a:	ea4f 1249 	mov.w	r2, r9, lsl #5
 800512e:	0158      	lsls	r0, r3, #5
 8005130:	ea42 61d3 	orr.w	r1, r2, r3, lsr #27
 8005134:	1ac0      	subs	r0, r0, r3
 8005136:	eb61 0109 	sbc.w	r1, r1, r9
 800513a:	024b      	lsls	r3, r1, #9
 800513c:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8005140:	0242      	lsls	r2, r0, #9
 8005142:	eb12 0008 	adds.w	r0, r2, r8
 8005146:	eb43 0109 	adc.w	r1, r3, r9
 800514a:	018b      	lsls	r3, r1, #6
 800514c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005150:	0182      	lsls	r2, r0, #6
 8005152:	1a12      	subs	r2, r2, r0
 8005154:	eb63 0301 	sbc.w	r3, r3, r1
 8005158:	4616      	mov	r6, r2
 800515a:	461f      	mov	r7, r3
 800515c:	4a31      	ldr	r2, [pc, #196]	; (8005224 <interface_rx_enable+0x1d4>)
 800515e:	2300      	movs	r3, #0
 8005160:	eb16 0008 	adds.w	r0, r6, r8
 8005164:	eb47 0109 	adc.w	r1, r7, r9
 8005168:	f7fb fda8 	bl	8000cbc <__aeabi_uldivmod>
 800516c:	f5b0 7f7f 	cmp.w	r0, #1020	; 0x3fc
 8005170:	ddab      	ble.n	80050ca <interface_rx_enable+0x7a>
 8005172:	68a3      	ldr	r3, [r4, #8]
 8005174:	695f      	ldr	r7, [r3, #20]
 8005176:	f5b0 707f 	subs.w	r0, r0, #1020	; 0x3fc
 800517a:	d0a8      	beq.n	80050ce <interface_rx_enable+0x7e>
 800517c:	f7fc f9e9 	bl	8001552 <deca_usleep>
 8005180:	e7a5      	b.n	80050ce <interface_rx_enable+0x7e>
 8005182:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 8005186:	2201      	movs	r2, #1
 8005188:	409a      	lsls	r2, r3
 800518a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800518e:	431a      	orrs	r2, r3
 8005190:	ab04      	add	r3, sp, #16
 8005192:	f823 2d0e 	strh.w	r2, [r3, #-14]!
 8005196:	6b7f      	ldr	r7, [r7, #52]	; 0x34
 8005198:	2200      	movs	r2, #0
 800519a:	216b      	movs	r1, #107	; 0x6b
 800519c:	4620      	mov	r0, r4
 800519e:	47b8      	blx	r7
 80051a0:	e7b1      	b.n	8005106 <interface_rx_enable+0xb6>
 80051a2:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 80051a4:	ab03      	add	r3, sp, #12
 80051a6:	2200      	movs	r2, #0
 80051a8:	2105      	movs	r1, #5
 80051aa:	4620      	mov	r0, r4
 80051ac:	47b0      	blx	r6
 80051ae:	4607      	mov	r7, r0
 80051b0:	b930      	cbnz	r0, 80051c0 <interface_rx_enable+0x170>
 80051b2:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 80051b4:	2300      	movs	r3, #0
 80051b6:	2201      	movs	r2, #1
 80051b8:	211f      	movs	r1, #31
 80051ba:	4620      	mov	r0, r4
 80051bc:	47a8      	blx	r5
 80051be:	4607      	mov	r7, r0
 80051c0:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f6ff af57 	blt.w	8005078 <interface_rx_enable+0x28>
 80051ca:	68a3      	ldr	r3, [r4, #8]
 80051cc:	695d      	ldr	r5, [r3, #20]
 80051ce:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 80051d0:	ab01      	add	r3, sp, #4
 80051d2:	2200      	movs	r2, #0
 80051d4:	217b      	movs	r1, #123	; 0x7b
 80051d6:	4620      	mov	r0, r4
 80051d8:	47b0      	blx	r6
 80051da:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 80051de:	b18b      	cbz	r3, 8005204 <interface_rx_enable+0x1b4>
 80051e0:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 80051e4:	2201      	movs	r2, #1
 80051e6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ea:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80051ee:	ea22 0203 	bic.w	r2, r2, r3
 80051f2:	ab04      	add	r3, sp, #16
 80051f4:	f823 2d0c 	strh.w	r2, [r3, #-12]!
 80051f8:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 80051fa:	2200      	movs	r2, #0
 80051fc:	216b      	movs	r1, #107	; 0x6b
 80051fe:	4620      	mov	r0, r4
 8005200:	47a8      	blx	r5
 8005202:	e739      	b.n	8005078 <interface_rx_enable+0x28>
 8005204:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 8005208:	2201      	movs	r2, #1
 800520a:	409a      	lsls	r2, r3
 800520c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005210:	431a      	orrs	r2, r3
 8005212:	ab04      	add	r3, sp, #16
 8005214:	f823 2d0c 	strh.w	r2, [r3, #-12]!
 8005218:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800521a:	2200      	movs	r2, #0
 800521c:	216b      	movs	r1, #107	; 0x6b
 800521e:	4620      	mov	r0, r4
 8005220:	47a8      	blx	r5
 8005222:	e729      	b.n	8005078 <interface_rx_enable+0x28>
 8005224:	0ee09800 	.word	0x0ee09800

08005228 <interface_read_rx_frame>:
 8005228:	b510      	push	{r4, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	9100      	str	r1, [sp, #0]
 800522e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f8ad 2006 	strh.w	r2, [sp, #6]
 8005238:	6883      	ldr	r3, [r0, #8]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800523e:	466b      	mov	r3, sp
 8005240:	2121      	movs	r1, #33	; 0x21
 8005242:	47a0      	blx	r4
 8005244:	b002      	add	sp, #8
 8005246:	bd10      	pop	{r4, pc}

08005248 <dwt_probe>:
 8005248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800524a:	b083      	sub	sp, #12
 800524c:	6803      	ldr	r3, [r0, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d037      	beq.n	80052c2 <dwt_probe+0x7a>
 8005252:	4a1f      	ldr	r2, [pc, #124]	; (80052d0 <dwt_probe+0x88>)
 8005254:	6013      	str	r3, [r2, #0]
 8005256:	4b1e      	ldr	r3, [pc, #120]	; (80052d0 <dwt_probe+0x88>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6842      	ldr	r2, [r0, #4]
 800525c:	601a      	str	r2, [r3, #0]
 800525e:	6882      	ldr	r2, [r0, #8]
 8005260:	605a      	str	r2, [r3, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f88d 2003 	strb.w	r2, [sp, #3]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681c      	ldr	r4, [r3, #0]
 800526c:	ab01      	add	r3, sp, #4
 800526e:	2204      	movs	r2, #4
 8005270:	f10d 0103 	add.w	r1, sp, #3
 8005274:	2001      	movs	r0, #1
 8005276:	47a0      	blx	r4
 8005278:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800527c:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8005280:	0409      	lsls	r1, r1, #16
 8005282:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
 8005286:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800528a:	4319      	orrs	r1, r3
 800528c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005290:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8005294:	4a0f      	ldr	r2, [pc, #60]	; (80052d4 <dwt_probe+0x8c>)
 8005296:	4b10      	ldr	r3, [pc, #64]	; (80052d8 <dwt_probe+0x90>)
 8005298:	429a      	cmp	r2, r3
 800529a:	d216      	bcs.n	80052ca <dwt_probe+0x82>
 800529c:	4b0c      	ldr	r3, [pc, #48]	; (80052d0 <dwt_probe+0x88>)
 800529e:	681f      	ldr	r7, [r3, #0]
 80052a0:	4613      	mov	r3, r2
 80052a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052a6:	2600      	movs	r6, #0
 80052a8:	4d0b      	ldr	r5, [pc, #44]	; (80052d8 <dwt_probe+0x90>)
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	404a      	eors	r2, r1
 80052ae:	685c      	ldr	r4, [r3, #4]
 80052b0:	4222      	tst	r2, r4
 80052b2:	bf04      	itt	eq
 80052b4:	60bb      	streq	r3, [r7, #8]
 80052b6:	4630      	moveq	r0, r6
 80052b8:	331c      	adds	r3, #28
 80052ba:	42ab      	cmp	r3, r5
 80052bc:	d3f5      	bcc.n	80052aa <dwt_probe+0x62>
 80052be:	b003      	add	sp, #12
 80052c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052c2:	4b03      	ldr	r3, [pc, #12]	; (80052d0 <dwt_probe+0x88>)
 80052c4:	4a05      	ldr	r2, [pc, #20]	; (80052dc <dwt_probe+0x94>)
 80052c6:	601a      	str	r2, [r3, #0]
 80052c8:	e7c5      	b.n	8005256 <dwt_probe+0xe>
 80052ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052ce:	e7f6      	b.n	80052be <dwt_probe+0x76>
 80052d0:	2000040c 	.word	0x2000040c
 80052d4:	080001a0 	.word	0x080001a0
 80052d8:	080001f4 	.word	0x080001f4
 80052dc:	20000410 	.word	0x20000410

080052e0 <dwt_readdevid>:
 80052e0:	b510      	push	{r4, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	2100      	movs	r1, #0
 80052e6:	ab02      	add	r3, sp, #8
 80052e8:	f843 1d04 	str.w	r1, [r3, #-4]!
 80052ec:	4a04      	ldr	r2, [pc, #16]	; (8005300 <dwt_readdevid+0x20>)
 80052ee:	6810      	ldr	r0, [r2, #0]
 80052f0:	6882      	ldr	r2, [r0, #8]
 80052f2:	6912      	ldr	r2, [r2, #16]
 80052f4:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80052f6:	460a      	mov	r2, r1
 80052f8:	47a0      	blx	r4
 80052fa:	9801      	ldr	r0, [sp, #4]
 80052fc:	b002      	add	sp, #8
 80052fe:	bd10      	pop	{r4, pc}
 8005300:	2000040c 	.word	0x2000040c

08005304 <dwt_setlnapamode>:
 8005304:	b538      	push	{r3, r4, r5, lr}
 8005306:	4b05      	ldr	r3, [pc, #20]	; (800531c <dwt_setlnapamode+0x18>)
 8005308:	681c      	ldr	r4, [r3, #0]
 800530a:	68a3      	ldr	r3, [r4, #8]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8005310:	2300      	movs	r3, #0
 8005312:	4602      	mov	r2, r0
 8005314:	2113      	movs	r1, #19
 8005316:	4620      	mov	r0, r4
 8005318:	47a8      	blx	r5
 800531a:	bd38      	pop	{r3, r4, r5, pc}
 800531c:	2000040c 	.word	0x2000040c

08005320 <dwt_initialise>:
 8005320:	b508      	push	{r3, lr}
 8005322:	4b04      	ldr	r3, [pc, #16]	; (8005334 <dwt_initialise+0x14>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	689a      	ldr	r2, [r3, #8]
 8005328:	6912      	ldr	r2, [r2, #16]
 800532a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800532c:	4601      	mov	r1, r0
 800532e:	4618      	mov	r0, r3
 8005330:	4790      	blx	r2
 8005332:	bd08      	pop	{r3, pc}
 8005334:	2000040c 	.word	0x2000040c

08005338 <dwt_configure>:
 8005338:	b508      	push	{r3, lr}
 800533a:	4b04      	ldr	r3, [pc, #16]	; (800534c <dwt_configure+0x14>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689a      	ldr	r2, [r3, #8]
 8005340:	6912      	ldr	r2, [r2, #16]
 8005342:	6812      	ldr	r2, [r2, #0]
 8005344:	4601      	mov	r1, r0
 8005346:	4618      	mov	r0, r3
 8005348:	4790      	blx	r2
 800534a:	bd08      	pop	{r3, pc}
 800534c:	2000040c 	.word	0x2000040c

08005350 <dwt_configuretxrf>:
 8005350:	b508      	push	{r3, lr}
 8005352:	4b04      	ldr	r3, [pc, #16]	; (8005364 <dwt_configuretxrf+0x14>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	6912      	ldr	r2, [r2, #16]
 800535a:	6992      	ldr	r2, [r2, #24]
 800535c:	4601      	mov	r1, r0
 800535e:	4618      	mov	r0, r3
 8005360:	4790      	blx	r2
 8005362:	bd08      	pop	{r3, pc}
 8005364:	2000040c 	.word	0x2000040c

08005368 <dwt_setrxantennadelay>:
 8005368:	b510      	push	{r4, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	ab02      	add	r3, sp, #8
 800536e:	f823 0d02 	strh.w	r0, [r3, #-2]!
 8005372:	4a05      	ldr	r2, [pc, #20]	; (8005388 <dwt_setrxantennadelay+0x20>)
 8005374:	6810      	ldr	r0, [r2, #0]
 8005376:	6882      	ldr	r2, [r0, #8]
 8005378:	6912      	ldr	r2, [r2, #16]
 800537a:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800537c:	2200      	movs	r2, #0
 800537e:	211b      	movs	r1, #27
 8005380:	47a0      	blx	r4
 8005382:	b002      	add	sp, #8
 8005384:	bd10      	pop	{r4, pc}
 8005386:	bf00      	nop
 8005388:	2000040c 	.word	0x2000040c

0800538c <dwt_settxantennadelay>:
 800538c:	b510      	push	{r4, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	ab02      	add	r3, sp, #8
 8005392:	f823 0d02 	strh.w	r0, [r3, #-2]!
 8005396:	4a05      	ldr	r2, [pc, #20]	; (80053ac <dwt_settxantennadelay+0x20>)
 8005398:	6810      	ldr	r0, [r2, #0]
 800539a:	6882      	ldr	r2, [r0, #8]
 800539c:	6912      	ldr	r2, [r2, #16]
 800539e:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80053a0:	2200      	movs	r2, #0
 80053a2:	211d      	movs	r1, #29
 80053a4:	47a0      	blx	r4
 80053a6:	b002      	add	sp, #8
 80053a8:	bd10      	pop	{r4, pc}
 80053aa:	bf00      	nop
 80053ac:	2000040c 	.word	0x2000040c

080053b0 <dwt_writetxdata>:
 80053b0:	b538      	push	{r3, r4, r5, lr}
 80053b2:	4b05      	ldr	r3, [pc, #20]	; (80053c8 <dwt_writetxdata+0x18>)
 80053b4:	681c      	ldr	r4, [r3, #0]
 80053b6:	68a3      	ldr	r3, [r4, #8]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	685d      	ldr	r5, [r3, #4]
 80053bc:	4613      	mov	r3, r2
 80053be:	460a      	mov	r2, r1
 80053c0:	4601      	mov	r1, r0
 80053c2:	4620      	mov	r0, r4
 80053c4:	47a8      	blx	r5
 80053c6:	bd38      	pop	{r3, r4, r5, pc}
 80053c8:	2000040c 	.word	0x2000040c

080053cc <dwt_writetxfctrl>:
 80053cc:	b538      	push	{r3, r4, r5, lr}
 80053ce:	4b05      	ldr	r3, [pc, #20]	; (80053e4 <dwt_writetxfctrl+0x18>)
 80053d0:	681c      	ldr	r4, [r3, #0]
 80053d2:	68a3      	ldr	r3, [r4, #8]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	689d      	ldr	r5, [r3, #8]
 80053d8:	4613      	mov	r3, r2
 80053da:	460a      	mov	r2, r1
 80053dc:	4601      	mov	r1, r0
 80053de:	4620      	mov	r0, r4
 80053e0:	47a8      	blx	r5
 80053e2:	bd38      	pop	{r3, r4, r5, pc}
 80053e4:	2000040c 	.word	0x2000040c

080053e8 <dwt_starttx>:
 80053e8:	b510      	push	{r4, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	ab02      	add	r3, sp, #8
 80053ee:	f803 0d01 	strb.w	r0, [r3, #-1]!
 80053f2:	4a05      	ldr	r2, [pc, #20]	; (8005408 <dwt_starttx+0x20>)
 80053f4:	6810      	ldr	r0, [r2, #0]
 80053f6:	6882      	ldr	r2, [r0, #8]
 80053f8:	6912      	ldr	r2, [r2, #16]
 80053fa:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80053fc:	2200      	movs	r2, #0
 80053fe:	2104      	movs	r1, #4
 8005400:	47a0      	blx	r4
 8005402:	b002      	add	sp, #8
 8005404:	bd10      	pop	{r4, pc}
 8005406:	bf00      	nop
 8005408:	2000040c 	.word	0x2000040c

0800540c <dwt_readtxtimestamplo32>:
 800540c:	b510      	push	{r4, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	2200      	movs	r2, #0
 8005412:	ab02      	add	r3, sp, #8
 8005414:	f843 2d04 	str.w	r2, [r3, #-4]!
 8005418:	4904      	ldr	r1, [pc, #16]	; (800542c <dwt_readtxtimestamplo32+0x20>)
 800541a:	6808      	ldr	r0, [r1, #0]
 800541c:	6881      	ldr	r1, [r0, #8]
 800541e:	6909      	ldr	r1, [r1, #16]
 8005420:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8005422:	2131      	movs	r1, #49	; 0x31
 8005424:	47a0      	blx	r4
 8005426:	9801      	ldr	r0, [sp, #4]
 8005428:	b002      	add	sp, #8
 800542a:	bd10      	pop	{r4, pc}
 800542c:	2000040c 	.word	0x2000040c

08005430 <dwt_readpdoa>:
 8005430:	b510      	push	{r4, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	2200      	movs	r2, #0
 8005436:	ab02      	add	r3, sp, #8
 8005438:	f823 2d02 	strh.w	r2, [r3, #-2]!
 800543c:	4905      	ldr	r1, [pc, #20]	; (8005454 <dwt_readpdoa+0x24>)
 800543e:	6808      	ldr	r0, [r1, #0]
 8005440:	6881      	ldr	r1, [r0, #8]
 8005442:	6909      	ldr	r1, [r1, #16]
 8005444:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8005446:	2133      	movs	r1, #51	; 0x33
 8005448:	47a0      	blx	r4
 800544a:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 800544e:	b002      	add	sp, #8
 8005450:	bd10      	pop	{r4, pc}
 8005452:	bf00      	nop
 8005454:	2000040c 	.word	0x2000040c

08005458 <dwt_readrxtimestamplo32>:
 8005458:	b510      	push	{r4, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	2200      	movs	r2, #0
 800545e:	ab02      	add	r3, sp, #8
 8005460:	f843 2d04 	str.w	r2, [r3, #-4]!
 8005464:	4904      	ldr	r1, [pc, #16]	; (8005478 <dwt_readrxtimestamplo32+0x20>)
 8005466:	6808      	ldr	r0, [r1, #0]
 8005468:	6881      	ldr	r1, [r0, #8]
 800546a:	6909      	ldr	r1, [r1, #16]
 800546c:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800546e:	2163      	movs	r1, #99	; 0x63
 8005470:	47a0      	blx	r4
 8005472:	9801      	ldr	r0, [sp, #4]
 8005474:	b002      	add	sp, #8
 8005476:	bd10      	pop	{r4, pc}
 8005478:	2000040c 	.word	0x2000040c

0800547c <dwt_forcetrxoff>:
 800547c:	b510      	push	{r4, lr}
 800547e:	4b05      	ldr	r3, [pc, #20]	; (8005494 <dwt_forcetrxoff+0x18>)
 8005480:	6818      	ldr	r0, [r3, #0]
 8005482:	6883      	ldr	r3, [r0, #8]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8005488:	2300      	movs	r3, #0
 800548a:	461a      	mov	r2, r3
 800548c:	2103      	movs	r1, #3
 800548e:	47a0      	blx	r4
 8005490:	bd10      	pop	{r4, pc}
 8005492:	bf00      	nop
 8005494:	2000040c 	.word	0x2000040c

08005498 <dwt_rxenable>:
 8005498:	b508      	push	{r3, lr}
 800549a:	4b04      	ldr	r3, [pc, #16]	; (80054ac <dwt_rxenable+0x14>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	6912      	ldr	r2, [r2, #16]
 80054a2:	6a12      	ldr	r2, [r2, #32]
 80054a4:	4601      	mov	r1, r0
 80054a6:	4618      	mov	r0, r3
 80054a8:	4790      	blx	r2
 80054aa:	bd08      	pop	{r3, pc}
 80054ac:	2000040c 	.word	0x2000040c

080054b0 <dwt_setrxtimeout>:
 80054b0:	b510      	push	{r4, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	ab02      	add	r3, sp, #8
 80054b6:	f843 0d04 	str.w	r0, [r3, #-4]!
 80054ba:	4a05      	ldr	r2, [pc, #20]	; (80054d0 <dwt_setrxtimeout+0x20>)
 80054bc:	6810      	ldr	r0, [r2, #0]
 80054be:	6882      	ldr	r2, [r0, #8]
 80054c0:	6912      	ldr	r2, [r2, #16]
 80054c2:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80054c4:	2200      	movs	r2, #0
 80054c6:	2151      	movs	r1, #81	; 0x51
 80054c8:	47a0      	blx	r4
 80054ca:	b002      	add	sp, #8
 80054cc:	bd10      	pop	{r4, pc}
 80054ce:	bf00      	nop
 80054d0:	2000040c 	.word	0x2000040c

080054d4 <dwt_setcallbacks>:
 80054d4:	b410      	push	{r4}
 80054d6:	4c07      	ldr	r4, [pc, #28]	; (80054f4 <dwt_setcallbacks+0x20>)
 80054d8:	6824      	ldr	r4, [r4, #0]
 80054da:	6120      	str	r0, [r4, #16]
 80054dc:	6161      	str	r1, [r4, #20]
 80054de:	61a2      	str	r2, [r4, #24]
 80054e0:	61e3      	str	r3, [r4, #28]
 80054e2:	9b01      	ldr	r3, [sp, #4]
 80054e4:	6223      	str	r3, [r4, #32]
 80054e6:	9b02      	ldr	r3, [sp, #8]
 80054e8:	6263      	str	r3, [r4, #36]	; 0x24
 80054ea:	9b03      	ldr	r3, [sp, #12]
 80054ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80054ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054f2:	4770      	bx	lr
 80054f4:	2000040c 	.word	0x2000040c

080054f8 <dwt_checkidlerc>:
 80054f8:	b510      	push	{r4, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	2200      	movs	r2, #0
 80054fe:	ab02      	add	r3, sp, #8
 8005500:	f803 2d01 	strb.w	r2, [r3, #-1]!
 8005504:	4905      	ldr	r1, [pc, #20]	; (800551c <dwt_checkidlerc+0x24>)
 8005506:	6808      	ldr	r0, [r1, #0]
 8005508:	6881      	ldr	r1, [r0, #8]
 800550a:	6909      	ldr	r1, [r1, #16]
 800550c:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800550e:	2158      	movs	r1, #88	; 0x58
 8005510:	47a0      	blx	r4
 8005512:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8005516:	b002      	add	sp, #8
 8005518:	bd10      	pop	{r4, pc}
 800551a:	bf00      	nop
 800551c:	2000040c 	.word	0x2000040c

08005520 <dwt_isr>:
 8005520:	b508      	push	{r3, lr}
 8005522:	4b03      	ldr	r3, [pc, #12]	; (8005530 <dwt_isr+0x10>)
 8005524:	6818      	ldr	r0, [r3, #0]
 8005526:	6883      	ldr	r3, [r0, #8]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552c:	4798      	blx	r3
 800552e:	bd08      	pop	{r3, pc}
 8005530:	2000040c 	.word	0x2000040c

08005534 <dwt_setinterrupt>:
 8005534:	b538      	push	{r3, r4, r5, lr}
 8005536:	4b05      	ldr	r3, [pc, #20]	; (800554c <dwt_setinterrupt+0x18>)
 8005538:	681c      	ldr	r4, [r3, #0]
 800553a:	68a3      	ldr	r3, [r4, #8]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	69dd      	ldr	r5, [r3, #28]
 8005540:	4613      	mov	r3, r2
 8005542:	460a      	mov	r2, r1
 8005544:	4601      	mov	r1, r0
 8005546:	4620      	mov	r0, r4
 8005548:	47a8      	blx	r5
 800554a:	bd38      	pop	{r3, r4, r5, pc}
 800554c:	2000040c 	.word	0x2000040c

08005550 <dwt_generatecrc8>:
 8005550:	2900      	cmp	r1, #0
 8005552:	dd0d      	ble.n	8005570 <dwt_generatecrc8+0x20>
 8005554:	b410      	push	{r4}
 8005556:	1e43      	subs	r3, r0, #1
 8005558:	4419      	add	r1, r3
 800555a:	4610      	mov	r0, r2
 800555c:	4c05      	ldr	r4, [pc, #20]	; (8005574 <dwt_generatecrc8+0x24>)
 800555e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8005562:	4050      	eors	r0, r2
 8005564:	5c20      	ldrb	r0, [r4, r0]
 8005566:	428b      	cmp	r3, r1
 8005568:	d1f9      	bne.n	800555e <dwt_generatecrc8+0xe>
 800556a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	4610      	mov	r0, r2
 8005572:	4770      	bx	lr
 8005574:	08015c40 	.word	0x08015c40

08005578 <dwt_setrxaftertxdelay>:
 8005578:	b510      	push	{r4, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	ab02      	add	r3, sp, #8
 800557e:	f843 0d04 	str.w	r0, [r3, #-4]!
 8005582:	4a05      	ldr	r2, [pc, #20]	; (8005598 <dwt_setrxaftertxdelay+0x20>)
 8005584:	6810      	ldr	r0, [r2, #0]
 8005586:	6882      	ldr	r2, [r0, #8]
 8005588:	6912      	ldr	r2, [r2, #16]
 800558a:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800558c:	2200      	movs	r2, #0
 800558e:	2110      	movs	r1, #16
 8005590:	47a0      	blx	r4
 8005592:	b002      	add	sp, #8
 8005594:	bd10      	pop	{r4, pc}
 8005596:	bf00      	nop
 8005598:	2000040c 	.word	0x2000040c

0800559c <dwt_readrxdata>:
 800559c:	b538      	push	{r3, r4, r5, lr}
 800559e:	4b05      	ldr	r3, [pc, #20]	; (80055b4 <dwt_readrxdata+0x18>)
 80055a0:	681c      	ldr	r4, [r3, #0]
 80055a2:	68a3      	ldr	r3, [r4, #8]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	68dd      	ldr	r5, [r3, #12]
 80055a8:	4613      	mov	r3, r2
 80055aa:	460a      	mov	r2, r1
 80055ac:	4601      	mov	r1, r0
 80055ae:	4620      	mov	r0, r4
 80055b0:	47a8      	blx	r5
 80055b2:	bd38      	pop	{r3, r4, r5, pc}
 80055b4:	2000040c 	.word	0x2000040c

080055b8 <dwt_readclockoffset>:
 80055b8:	b510      	push	{r4, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	2200      	movs	r2, #0
 80055be:	ab02      	add	r3, sp, #8
 80055c0:	f823 2d02 	strh.w	r2, [r3, #-2]!
 80055c4:	4905      	ldr	r1, [pc, #20]	; (80055dc <dwt_readclockoffset+0x24>)
 80055c6:	6808      	ldr	r0, [r1, #0]
 80055c8:	6881      	ldr	r1, [r0, #8]
 80055ca:	6909      	ldr	r1, [r1, #16]
 80055cc:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80055ce:	212c      	movs	r1, #44	; 0x2c
 80055d0:	47a0      	blx	r4
 80055d2:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 80055d6:	b002      	add	sp, #8
 80055d8:	bd10      	pop	{r4, pc}
 80055da:	bf00      	nop
 80055dc:	2000040c 	.word	0x2000040c

080055e0 <dwt_readstsquality>:
 80055e0:	b538      	push	{r3, r4, r5, lr}
 80055e2:	4b05      	ldr	r3, [pc, #20]	; (80055f8 <dwt_readstsquality+0x18>)
 80055e4:	681c      	ldr	r4, [r3, #0]
 80055e6:	68a3      	ldr	r3, [r4, #8]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80055ec:	4603      	mov	r3, r0
 80055ee:	2200      	movs	r2, #0
 80055f0:	214b      	movs	r1, #75	; 0x4b
 80055f2:	4620      	mov	r0, r4
 80055f4:	47a8      	blx	r5
 80055f6:	bd38      	pop	{r3, r4, r5, pc}
 80055f8:	2000040c 	.word	0x2000040c

080055fc <dwt_setleds>:
 80055fc:	b510      	push	{r4, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	ab02      	add	r3, sp, #8
 8005602:	f803 0d01 	strb.w	r0, [r3, #-1]!
 8005606:	4a05      	ldr	r2, [pc, #20]	; (800561c <dwt_setleds+0x20>)
 8005608:	6810      	ldr	r0, [r2, #0]
 800560a:	6882      	ldr	r2, [r0, #8]
 800560c:	6912      	ldr	r2, [r2, #16]
 800560e:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8005610:	2200      	movs	r2, #0
 8005612:	2155      	movs	r1, #85	; 0x55
 8005614:	47a0      	blx	r4
 8005616:	b002      	add	sp, #8
 8005618:	bd10      	pop	{r4, pc}
 800561a:	bf00      	nop
 800561c:	2000040c 	.word	0x2000040c

08005620 <dwt_writesysstatuslo>:
 8005620:	b510      	push	{r4, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	ab02      	add	r3, sp, #8
 8005626:	f843 0d04 	str.w	r0, [r3, #-4]!
 800562a:	4a05      	ldr	r2, [pc, #20]	; (8005640 <dwt_writesysstatuslo+0x20>)
 800562c:	6810      	ldr	r0, [r2, #0]
 800562e:	6882      	ldr	r2, [r0, #8]
 8005630:	6912      	ldr	r2, [r2, #16]
 8005632:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8005634:	2200      	movs	r2, #0
 8005636:	2174      	movs	r1, #116	; 0x74
 8005638:	47a0      	blx	r4
 800563a:	b002      	add	sp, #8
 800563c:	bd10      	pop	{r4, pc}
 800563e:	bf00      	nop
 8005640:	2000040c 	.word	0x2000040c

08005644 <dwt_readsysstatuslo>:
 8005644:	b510      	push	{r4, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	2200      	movs	r2, #0
 800564a:	ab02      	add	r3, sp, #8
 800564c:	f843 2d04 	str.w	r2, [r3, #-4]!
 8005650:	4904      	ldr	r1, [pc, #16]	; (8005664 <dwt_readsysstatuslo+0x20>)
 8005652:	6808      	ldr	r0, [r1, #0]
 8005654:	6881      	ldr	r1, [r0, #8]
 8005656:	6909      	ldr	r1, [r1, #16]
 8005658:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800565a:	2176      	movs	r1, #118	; 0x76
 800565c:	47a0      	blx	r4
 800565e:	9801      	ldr	r0, [sp, #4]
 8005660:	b002      	add	sp, #8
 8005662:	bd10      	pop	{r4, pc}
 8005664:	2000040c 	.word	0x2000040c

08005668 <dwt_readsysstatushi>:
 8005668:	b510      	push	{r4, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	2200      	movs	r2, #0
 800566e:	ab02      	add	r3, sp, #8
 8005670:	f843 2d04 	str.w	r2, [r3, #-4]!
 8005674:	4904      	ldr	r1, [pc, #16]	; (8005688 <dwt_readsysstatushi+0x20>)
 8005676:	6808      	ldr	r0, [r1, #0]
 8005678:	6881      	ldr	r1, [r0, #8]
 800567a:	6909      	ldr	r1, [r1, #16]
 800567c:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800567e:	2177      	movs	r1, #119	; 0x77
 8005680:	47a0      	blx	r4
 8005682:	9801      	ldr	r0, [sp, #4]
 8005684:	b002      	add	sp, #8
 8005686:	bd10      	pop	{r4, pc}
 8005688:	2000040c 	.word	0x2000040c

0800568c <dwt_getframelength>:
 800568c:	b510      	push	{r4, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	2200      	movs	r2, #0
 8005692:	ab02      	add	r3, sp, #8
 8005694:	f823 2d02 	strh.w	r2, [r3, #-2]!
 8005698:	4905      	ldr	r1, [pc, #20]	; (80056b0 <dwt_getframelength+0x24>)
 800569a:	6808      	ldr	r0, [r1, #0]
 800569c:	6881      	ldr	r1, [r0, #8]
 800569e:	6909      	ldr	r1, [r1, #16]
 80056a0:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80056a2:	217a      	movs	r1, #122	; 0x7a
 80056a4:	47a0      	blx	r4
 80056a6:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80056aa:	b002      	add	sp, #8
 80056ac:	bd10      	pop	{r4, pc}
 80056ae:	bf00      	nop
 80056b0:	2000040c 	.word	0x2000040c

080056b4 <dwt_dbg_fn>:
 80056b4:	2998      	cmp	r1, #152	; 0x98
 80056b6:	4802      	ldr	r0, [pc, #8]	; (80056c0 <dwt_dbg_fn+0xc>)
 80056b8:	bf18      	it	ne
 80056ba:	2000      	movne	r0, #0
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	08015e38 	.word	0x08015e38

080056c4 <_deinit>:
 80056c4:	4770      	bx	lr

080056c6 <dwt_xfer3xxx>:
 80056c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	4605      	mov	r5, r0
 80056ce:	460e      	mov	r6, r1
 80056d0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80056d4:	1990      	adds	r0, r2, r6
 80056d6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80056da:	4432      	add	r2, r6
 80056dc:	f3c2 4204 	ubfx	r2, r2, #16, #5
 80056e0:	0084      	lsls	r4, r0, #2
 80056e2:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
 80056e6:	ea41 0204 	orr.w	r2, r1, r4
 80056ea:	0a12      	lsrs	r2, r2, #8
 80056ec:	f88d 200c 	strb.w	r2, [sp, #12]
 80056f0:	f001 0703 	and.w	r7, r1, #3
 80056f4:	433c      	orrs	r4, r7
 80056f6:	f88d 400d 	strb.w	r4, [sp, #13]
 80056fa:	461f      	mov	r7, r3
 80056fc:	b973      	cbnz	r3, 800571c <dwt_xfer3xxx+0x56>
 80056fe:	2900      	cmp	r1, #0
 8005700:	d05c      	beq.n	80057bc <dwt_xfer3xxx+0xf6>
 8005702:	0073      	lsls	r3, r6, #1
 8005704:	f063 037e 	orn	r3, r3, #126	; 0x7e
 8005708:	f88d 300c 	strb.w	r3, [sp, #12]
 800570c:	2401      	movs	r4, #1
 800570e:	2900      	cmp	r1, #0
 8005710:	d02f      	beq.n	8005772 <dwt_xfer3xxx+0xac>
 8005712:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 8005716:	2903      	cmp	r1, #3
 8005718:	d90a      	bls.n	8005730 <dwt_xfer3xxx+0x6a>
 800571a:	e7fe      	b.n	800571a <dwt_xfer3xxx+0x54>
 800571c:	2800      	cmp	r0, #0
 800571e:	d14f      	bne.n	80057c0 <dwt_xfer3xxx+0xfa>
 8005720:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005724:	d003      	beq.n	800572e <dwt_xfer3xxx+0x68>
 8005726:	2900      	cmp	r1, #0
 8005728:	d14a      	bne.n	80057c0 <dwt_xfer3xxx+0xfa>
 800572a:	2401      	movs	r4, #1
 800572c:	e021      	b.n	8005772 <dwt_xfer3xxx+0xac>
 800572e:	2401      	movs	r4, #1
 8005730:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005732:	7d9b      	ldrb	r3, [r3, #22]
 8005734:	b94b      	cbnz	r3, 800574a <dwt_xfer3xxx+0x84>
 8005736:	682b      	ldr	r3, [r5, #0]
 8005738:	685d      	ldr	r5, [r3, #4]
 800573a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800573c:	463a      	mov	r2, r7
 800573e:	a903      	add	r1, sp, #12
 8005740:	4620      	mov	r0, r4
 8005742:	47a8      	blx	r5
 8005744:	b004      	add	sp, #16
 8005746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800574a:	2200      	movs	r2, #0
 800574c:	4621      	mov	r1, r4
 800574e:	a803      	add	r0, sp, #12
 8005750:	f7ff fefe 	bl	8005550 <dwt_generatecrc8>
 8005754:	4602      	mov	r2, r0
 8005756:	4639      	mov	r1, r7
 8005758:	980a      	ldr	r0, [sp, #40]	; 0x28
 800575a:	f7ff fef9 	bl	8005550 <dwt_generatecrc8>
 800575e:	682b      	ldr	r3, [r5, #0]
 8005760:	9000      	str	r0, [sp, #0]
 8005762:	689d      	ldr	r5, [r3, #8]
 8005764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005766:	463a      	mov	r2, r7
 8005768:	a903      	add	r1, sp, #12
 800576a:	4620      	mov	r0, r4
 800576c:	47a8      	blx	r5
 800576e:	e7e9      	b.n	8005744 <dwt_xfer3xxx+0x7e>
 8005770:	2401      	movs	r4, #1
 8005772:	682b      	ldr	r3, [r5, #0]
 8005774:	f8d3 8000 	ldr.w	r8, [r3]
 8005778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800577a:	463a      	mov	r2, r7
 800577c:	a903      	add	r1, sp, #12
 800577e:	4620      	mov	r0, r4
 8005780:	47c0      	blx	r8
 8005782:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005784:	7d9b      	ldrb	r3, [r3, #22]
 8005786:	2b02      	cmp	r3, #2
 8005788:	d1dc      	bne.n	8005744 <dwt_xfer3xxx+0x7e>
 800578a:	2e18      	cmp	r6, #24
 800578c:	d0da      	beq.n	8005744 <dwt_xfer3xxx+0x7e>
 800578e:	2200      	movs	r2, #0
 8005790:	4621      	mov	r1, r4
 8005792:	a803      	add	r0, sp, #12
 8005794:	f7ff fedc 	bl	8005550 <dwt_generatecrc8>
 8005798:	4602      	mov	r2, r0
 800579a:	4639      	mov	r1, r7
 800579c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800579e:	f7ff fed7 	bl	8005550 <dwt_generatecrc8>
 80057a2:	4604      	mov	r4, r0
 80057a4:	2200      	movs	r2, #0
 80057a6:	2118      	movs	r1, #24
 80057a8:	4628      	mov	r0, r5
 80057aa:	f000 f841 	bl	8005830 <dwt_read8bitoffsetreg>
 80057ae:	4284      	cmp	r4, r0
 80057b0:	d0c8      	beq.n	8005744 <dwt_xfer3xxx+0x7e>
 80057b2:	68eb      	ldr	r3, [r5, #12]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d0c5      	beq.n	8005744 <dwt_xfer3xxx+0x7e>
 80057b8:	4798      	blx	r3
 80057ba:	e7c3      	b.n	8005744 <dwt_xfer3xxx+0x7e>
 80057bc:	2800      	cmp	r0, #0
 80057be:	d0d7      	beq.n	8005770 <dwt_xfer3xxx+0xaa>
 80057c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057c4:	f88d 200c 	strb.w	r2, [sp, #12]
 80057c8:	2402      	movs	r4, #2
 80057ca:	e7a0      	b.n	800570e <dwt_xfer3xxx+0x48>

080057cc <dwt_readfromdevice>:
 80057cc:	b510      	push	{r4, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	2400      	movs	r4, #0
 80057d2:	9401      	str	r4, [sp, #4]
 80057d4:	9c04      	ldr	r4, [sp, #16]
 80057d6:	9400      	str	r4, [sp, #0]
 80057d8:	f7ff ff75 	bl	80056c6 <dwt_xfer3xxx>
 80057dc:	b002      	add	sp, #8
 80057de:	bd10      	pop	{r4, pc}

080057e0 <dwt_read32bitoffsetreg>:
 80057e0:	b500      	push	{lr}
 80057e2:	b085      	sub	sp, #20
 80057e4:	ab03      	add	r3, sp, #12
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	2304      	movs	r3, #4
 80057ea:	b292      	uxth	r2, r2
 80057ec:	f7ff ffee 	bl	80057cc <dwt_readfromdevice>
 80057f0:	f10d 030f 	add.w	r3, sp, #15
 80057f4:	f10d 010b 	add.w	r1, sp, #11
 80057f8:	2000      	movs	r0, #0
 80057fa:	f813 2901 	ldrb.w	r2, [r3], #-1
 80057fe:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 8005802:	428b      	cmp	r3, r1
 8005804:	d1f9      	bne.n	80057fa <dwt_read32bitoffsetreg+0x1a>
 8005806:	b005      	add	sp, #20
 8005808:	f85d fb04 	ldr.w	pc, [sp], #4

0800580c <dwt_read16bitoffsetreg>:
 800580c:	b500      	push	{lr}
 800580e:	b085      	sub	sp, #20
 8005810:	ab03      	add	r3, sp, #12
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	2302      	movs	r3, #2
 8005816:	b292      	uxth	r2, r2
 8005818:	f7ff ffd8 	bl	80057cc <dwt_readfromdevice>
 800581c:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8005820:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8005824:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8005828:	b280      	uxth	r0, r0
 800582a:	b005      	add	sp, #20
 800582c:	f85d fb04 	ldr.w	pc, [sp], #4

08005830 <dwt_read8bitoffsetreg>:
 8005830:	b500      	push	{lr}
 8005832:	b085      	sub	sp, #20
 8005834:	f10d 030f 	add.w	r3, sp, #15
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	2301      	movs	r3, #1
 800583c:	b292      	uxth	r2, r2
 800583e:	f7ff ffc5 	bl	80057cc <dwt_readfromdevice>
 8005842:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8005846:	b005      	add	sp, #20
 8005848:	f85d fb04 	ldr.w	pc, [sp], #4

0800584c <ull_readdiagnostics>:
 800584c:	b530      	push	{r4, r5, lr}
 800584e:	b0bd      	sub	sp, #244	; 0xf4
 8005850:	4605      	mov	r5, r0
 8005852:	460c      	mov	r4, r1
 8005854:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005856:	7bda      	ldrb	r2, [r3, #15]
 8005858:	2a01      	cmp	r2, #1
 800585a:	d01c      	beq.n	8005896 <ull_readdiagnostics+0x4a>
 800585c:	2a03      	cmp	r2, #3
 800585e:	f040 81d4 	bne.w	8005c0a <ull_readdiagnostics+0x3be>
 8005862:	7e1b      	ldrb	r3, [r3, #24]
 8005864:	f013 0f08 	tst.w	r3, #8
 8005868:	d10c      	bne.n	8005884 <ull_readdiagnostics+0x38>
 800586a:	f013 0f04 	tst.w	r3, #4
 800586e:	ab02      	add	r3, sp, #8
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	bf14      	ite	ne
 8005874:	2338      	movne	r3, #56	; 0x38
 8005876:	2320      	moveq	r3, #32
 8005878:	2200      	movs	r2, #0
 800587a:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800587e:	f7ff ffa5 	bl	80057cc <dwt_readfromdevice>
 8005882:	e019      	b.n	80058b8 <ull_readdiagnostics+0x6c>
 8005884:	ab02      	add	r3, sp, #8
 8005886:	9300      	str	r3, [sp, #0]
 8005888:	23e8      	movs	r3, #232	; 0xe8
 800588a:	2200      	movs	r2, #0
 800588c:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8005890:	f7ff ff9c 	bl	80057cc <dwt_readfromdevice>
 8005894:	e010      	b.n	80058b8 <ull_readdiagnostics+0x6c>
 8005896:	7e1b      	ldrb	r3, [r3, #24]
 8005898:	f013 0f08 	tst.w	r3, #8
 800589c:	f040 81ac 	bne.w	8005bf8 <ull_readdiagnostics+0x3ac>
 80058a0:	f013 0f04 	tst.w	r3, #4
 80058a4:	ab02      	add	r3, sp, #8
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	bf14      	ite	ne
 80058aa:	2338      	movne	r3, #56	; 0x38
 80058ac:	2320      	moveq	r3, #32
 80058ae:	2200      	movs	r2, #0
 80058b0:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 80058b4:	f7ff ff8a 	bl	80057cc <dwt_readfromdevice>
 80058b8:	f10d 0217 	add.w	r2, sp, #23
 80058bc:	f104 031a 	add.w	r3, r4, #26
 80058c0:	f104 0020 	add.w	r0, r4, #32
 80058c4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80058c8:	f803 1b01 	strb.w	r1, [r3], #1
 80058cc:	4283      	cmp	r3, r0
 80058ce:	d1f9      	bne.n	80058c4 <ull_readdiagnostics+0x78>
 80058d0:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80058d4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80058d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80058dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058e0:	8463      	strh	r3, [r4, #34]	; 0x22
 80058e2:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80058e6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80058ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80058ee:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80058f2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80058f6:	bf1c      	itt	ne
 80058f8:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 80058fc:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 8005900:	8423      	strh	r3, [r4, #32]
 8005902:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 8005906:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800590a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800590e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005912:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005914:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005916:	7e1b      	ldrb	r3, [r3, #24]
 8005918:	f013 0f02 	tst.w	r3, #2
 800591c:	f040 816a 	bne.w	8005bf4 <ull_readdiagnostics+0x3a8>
 8005920:	aa0a      	add	r2, sp, #40	; 0x28
 8005922:	1e63      	subs	r3, r4, #1
 8005924:	1d20      	adds	r0, r4, #4
 8005926:	f812 1b01 	ldrb.w	r1, [r2], #1
 800592a:	f803 1f01 	strb.w	r1, [r3, #1]!
 800592e:	79d1      	ldrb	r1, [r2, #7]
 8005930:	7219      	strb	r1, [r3, #8]
 8005932:	7bd1      	ldrb	r1, [r2, #15]
 8005934:	7459      	strb	r1, [r3, #17]
 8005936:	4283      	cmp	r3, r0
 8005938:	d1f5      	bne.n	8005926 <ull_readdiagnostics+0xda>
 800593a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800593e:	7163      	strb	r3, [r4, #5]
 8005940:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8005944:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8005948:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800594c:	80e3      	strh	r3, [r4, #6]
 800594e:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8005952:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8005956:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800595a:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800595e:	f8a4 300d 	strh.w	r3, [r4, #13]
 8005962:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8005966:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800596a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800596e:	f8a4 300f 	strh.w	r3, [r4, #15]
 8005972:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8005976:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800597a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800597e:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8005982:	82e3      	strh	r3, [r4, #22]
 8005984:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 8005988:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 800598c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005990:	8323      	strh	r3, [r4, #24]
 8005992:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005994:	7e1b      	ldrb	r3, [r3, #24]
 8005996:	f013 0f04 	tst.w	r3, #4
 800599a:	f040 812b 	bne.w	8005bf4 <ull_readdiagnostics+0x3a8>
 800599e:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 80059a2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 80059a6:	041b      	lsls	r3, r3, #16
 80059a8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80059ac:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80059b0:	4313      	orrs	r3, r2
 80059b2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80059b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80059ba:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80059be:	6263      	str	r3, [r4, #36]	; 0x24
 80059c0:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 80059c4:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 80059c8:	041b      	lsls	r3, r3, #16
 80059ca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80059ce:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80059d2:	4313      	orrs	r3, r2
 80059d4:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 80059d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80059dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80059e2:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 80059e6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 80059ea:	041b      	lsls	r3, r3, #16
 80059ec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80059f0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80059f4:	4313      	orrs	r3, r2
 80059f6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 80059fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80059fe:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8005a02:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a04:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 8005a08:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 8005a0c:	041b      	lsls	r3, r3, #16
 8005a0e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005a12:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8005a16:	4313      	orrs	r3, r2
 8005a18:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 8005a1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005a20:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005a24:	6323      	str	r3, [r4, #48]	; 0x30
 8005a26:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 8005a2a:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 8005a2e:	041b      	lsls	r3, r3, #16
 8005a30:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005a34:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 8005a3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005a42:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005a46:	6363      	str	r3, [r4, #52]	; 0x34
 8005a48:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 8005a4c:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 8005a50:	041b      	lsls	r3, r3, #16
 8005a52:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005a56:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 8005a60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005a64:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005a68:	63a3      	str	r3, [r4, #56]	; 0x38
 8005a6a:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 8005a6e:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8005a72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005a76:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8005a78:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 8005a7c:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8005a80:	041b      	lsls	r3, r3, #16
 8005a82:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005a86:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 8005a90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005a94:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005a98:	6423      	str	r3, [r4, #64]	; 0x40
 8005a9a:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
 8005a9e:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 8005aa2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005aa6:	6463      	str	r3, [r4, #68]	; 0x44
 8005aa8:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 8005aac:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8005ab0:	041b      	lsls	r3, r3, #16
 8005ab2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005ab6:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 8005aba:	4313      	orrs	r3, r2
 8005abc:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 8005ac0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005ac4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005ac8:	64a3      	str	r3, [r4, #72]	; 0x48
 8005aca:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8005ace:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8005ad2:	041b      	lsls	r3, r3, #16
 8005ad4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005ad8:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 8005adc:	4313      	orrs	r3, r2
 8005ade:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
 8005ae2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005ae6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005aea:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005aec:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 8005af0:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
 8005af4:	041b      	lsls	r3, r3, #16
 8005af6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005afa:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 8005afe:	4313      	orrs	r3, r2
 8005b00:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 8005b04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005b08:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005b0c:	6523      	str	r3, [r4, #80]	; 0x50
 8005b0e:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 8005b12:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8005b16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005b1a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005b1e:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8005b22:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 8005b26:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8005b2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005b2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b32:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8005b36:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 8005b3a:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 8005b3e:	041b      	lsls	r3, r3, #16
 8005b40:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005b44:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 8005b4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005b52:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005b56:	65a3      	str	r3, [r4, #88]	; 0x58
 8005b58:	f89d 20c1 	ldrb.w	r2, [sp, #193]	; 0xc1
 8005b5c:	f89d 30c0 	ldrb.w	r3, [sp, #192]	; 0xc0
 8005b60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005b64:	65e3      	str	r3, [r4, #92]	; 0x5c
 8005b66:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
 8005b6a:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
 8005b6e:	041b      	lsls	r3, r3, #16
 8005b70:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005b74:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
 8005b7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005b82:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005b86:	6623      	str	r3, [r4, #96]	; 0x60
 8005b88:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
 8005b8c:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 8005b90:	041b      	lsls	r3, r3, #16
 8005b92:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005b96:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 8005ba0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005ba4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005ba8:	6663      	str	r3, [r4, #100]	; 0x64
 8005baa:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
 8005bae:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
 8005bb2:	041b      	lsls	r3, r3, #16
 8005bb4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005bb8:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 8005bc2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005bc6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005bca:	66a3      	str	r3, [r4, #104]	; 0x68
 8005bcc:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 8005bd0:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8005bd4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005bd8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005bdc:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 8005be0:	f89d 20ed 	ldrb.w	r2, [sp, #237]	; 0xed
 8005be4:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 8005be8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bf0:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 8005bf4:	b03d      	add	sp, #244	; 0xf4
 8005bf6:	bd30      	pop	{r4, r5, pc}
 8005bf8:	ab02      	add	r3, sp, #8
 8005bfa:	9300      	str	r3, [sp, #0]
 8005bfc:	23e8      	movs	r3, #232	; 0xe8
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8005c04:	f7ff fde2 	bl	80057cc <dwt_readfromdevice>
 8005c08:	e656      	b.n	80058b8 <ull_readdiagnostics+0x6c>
 8005c0a:	7e1b      	ldrb	r3, [r3, #24]
 8005c0c:	f013 0f01 	tst.w	r3, #1
 8005c10:	f000 819f 	beq.w	8005f52 <ull_readdiagnostics+0x706>
 8005c14:	ab02      	add	r3, sp, #8
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	236c      	movs	r3, #108	; 0x6c
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8005c20:	f7ff fdd4 	bl	80057cc <dwt_readfromdevice>
 8005c24:	ab1d      	add	r3, sp, #116	; 0x74
 8005c26:	9300      	str	r3, [sp, #0]
 8005c28:	236c      	movs	r3, #108	; 0x6c
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 8005c30:	4628      	mov	r0, r5
 8005c32:	f7ff fdcb 	bl	80057cc <dwt_readfromdevice>
 8005c36:	aa02      	add	r2, sp, #8
 8005c38:	1e63      	subs	r3, r4, #1
 8005c3a:	1d20      	adds	r0, r4, #4
 8005c3c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005c40:	f803 1f01 	strb.w	r1, [r3, #1]!
 8005c44:	79d1      	ldrb	r1, [r2, #7]
 8005c46:	7219      	strb	r1, [r3, #8]
 8005c48:	7bd1      	ldrb	r1, [r2, #15]
 8005c4a:	7459      	strb	r1, [r3, #17]
 8005c4c:	7dd1      	ldrb	r1, [r2, #23]
 8005c4e:	7699      	strb	r1, [r3, #26]
 8005c50:	4283      	cmp	r3, r0
 8005c52:	d1f3      	bne.n	8005c3c <ull_readdiagnostics+0x3f0>
 8005c54:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8005c58:	77e3      	strb	r3, [r4, #31]
 8005c5a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005c5e:	7163      	strb	r3, [r4, #5]
 8005c60:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8005c64:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8005c68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005c6c:	80e3      	strh	r3, [r4, #6]
 8005c6e:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8005c72:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8005c76:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8005c7a:	f3c2 12cf 	ubfx	r2, r2, #7, #16
 8005c7e:	f8a4 200d 	strh.w	r2, [r4, #13]
 8005c82:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8005c86:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8005c8a:	f8a4 200f 	strh.w	r2, [r4, #15]
 8005c8e:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8005c92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005c96:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8005c9a:	82e3      	strh	r3, [r4, #22]
 8005c9c:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8005ca0:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8005ca4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005ca8:	8323      	strh	r3, [r4, #24]
 8005caa:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8005cae:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8005cb2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005cb6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005cba:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005cbe:	bf1c      	itt	ne
 8005cc0:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 8005cc4:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 8005cc8:	8423      	strh	r3, [r4, #32]
 8005cca:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 8005cce:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8005cd2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005cd6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005cda:	8463      	strh	r3, [r4, #34]	; 0x22
 8005cdc:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8005ce0:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8005ce4:	041b      	lsls	r3, r3, #16
 8005ce6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005cea:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 8005cf4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005cf8:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8005cfc:	6263      	str	r3, [r4, #36]	; 0x24
 8005cfe:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005d00:	7e1b      	ldrb	r3, [r3, #24]
 8005d02:	f013 0f01 	tst.w	r3, #1
 8005d06:	f43f af75 	beq.w	8005bf4 <ull_readdiagnostics+0x3a8>
 8005d0a:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 8005d0e:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8005d12:	041b      	lsls	r3, r3, #16
 8005d14:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005d18:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8005d22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005d26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d2a:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d2c:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8005d30:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8005d34:	041b      	lsls	r3, r3, #16
 8005d36:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005d3a:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 8005d44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005d48:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8005d4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d4e:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 8005d52:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8005d56:	041b      	lsls	r3, r3, #16
 8005d58:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005d5c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8005d60:	4313      	orrs	r3, r2
 8005d62:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8005d66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005d6a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005d6e:	6323      	str	r3, [r4, #48]	; 0x30
 8005d70:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8005d74:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8005d78:	041b      	lsls	r3, r3, #16
 8005d7a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005d7e:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8005d82:	4313      	orrs	r3, r2
 8005d84:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 8005d88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005d8c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005d90:	6363      	str	r3, [r4, #52]	; 0x34
 8005d92:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 8005d96:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8005d9a:	041b      	lsls	r3, r3, #16
 8005d9c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005da0:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8005da4:	4313      	orrs	r3, r2
 8005da6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8005daa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005dae:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005db2:	63a3      	str	r3, [r4, #56]	; 0x38
 8005db4:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 8005db8:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8005dbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005dc0:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8005dc2:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 8005dc6:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8005dca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005dce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dd2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005dd4:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 8005dd8:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 8005ddc:	041b      	lsls	r3, r3, #16
 8005dde:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005de2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8005de6:	4313      	orrs	r3, r2
 8005de8:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 8005dec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005df0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005df4:	6423      	str	r3, [r4, #64]	; 0x40
 8005df6:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 8005dfa:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 8005dfe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e02:	6463      	str	r3, [r4, #68]	; 0x44
 8005e04:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
 8005e08:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 8005e0c:	041b      	lsls	r3, r3, #16
 8005e0e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005e12:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8005e16:	4313      	orrs	r3, r2
 8005e18:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 8005e1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e20:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005e24:	64a3      	str	r3, [r4, #72]	; 0x48
 8005e26:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 8005e2a:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 8005e2e:	041b      	lsls	r3, r3, #16
 8005e30:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005e34:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
 8005e3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e42:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005e46:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005e48:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 8005e4c:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8005e50:	041b      	lsls	r3, r3, #16
 8005e52:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005e56:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 8005e60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e64:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005e68:	6523      	str	r3, [r4, #80]	; 0x50
 8005e6a:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 8005e6e:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8005e72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e76:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005e7a:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8005e7e:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 8005e82:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8005e86:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e8e:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8005e92:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 8005e96:	f89d 30ae 	ldrb.w	r3, [sp, #174]	; 0xae
 8005e9a:	041b      	lsls	r3, r3, #16
 8005e9c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005ea0:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	f89d 20ad 	ldrb.w	r2, [sp, #173]	; 0xad
 8005eaa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005eae:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005eb2:	65a3      	str	r3, [r4, #88]	; 0x58
 8005eb4:	f89d 20b1 	ldrb.w	r2, [sp, #177]	; 0xb1
 8005eb8:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 8005ebc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005ec0:	65e3      	str	r3, [r4, #92]	; 0x5c
 8005ec2:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 8005ec6:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
 8005eca:	041b      	lsls	r3, r3, #16
 8005ecc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005ed0:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	f89d 20b5 	ldrb.w	r2, [sp, #181]	; 0xb5
 8005eda:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005ede:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005ee2:	6623      	str	r3, [r4, #96]	; 0x60
 8005ee4:	f89d 20bb 	ldrb.w	r2, [sp, #187]	; 0xbb
 8005ee8:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
 8005eec:	041b      	lsls	r3, r3, #16
 8005eee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005ef2:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	f89d 20b9 	ldrb.w	r2, [sp, #185]	; 0xb9
 8005efc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005f00:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005f04:	6663      	str	r3, [r4, #100]	; 0x64
 8005f06:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 8005f0a:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 8005f0e:	041b      	lsls	r3, r3, #16
 8005f10:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005f14:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 8005f1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005f22:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005f26:	66a3      	str	r3, [r4, #104]	; 0x68
 8005f28:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 8005f2c:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8005f30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005f34:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005f38:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 8005f3c:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 8005f40:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8005f44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f4c:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 8005f50:	e650      	b.n	8005bf4 <ull_readdiagnostics+0x3a8>
 8005f52:	ab02      	add	r3, sp, #8
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	2328      	movs	r3, #40	; 0x28
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8005f5e:	f7ff fc35 	bl	80057cc <dwt_readfromdevice>
 8005f62:	e668      	b.n	8005c36 <ull_readdiagnostics+0x3ea>

08005f64 <ull_readrxtimestamp>:
 8005f64:	b500      	push	{lr}
 8005f66:	b083      	sub	sp, #12
 8005f68:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005f6a:	7bdb      	ldrb	r3, [r3, #15]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d00b      	beq.n	8005f88 <ull_readrxtimestamp+0x24>
 8005f70:	2b03      	cmp	r3, #3
 8005f72:	d110      	bne.n	8005f96 <ull_readrxtimestamp+0x32>
 8005f74:	9100      	str	r1, [sp, #0]
 8005f76:	2305      	movs	r3, #5
 8005f78:	2204      	movs	r2, #4
 8005f7a:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8005f7e:	f7ff fc25 	bl	80057cc <dwt_readfromdevice>
 8005f82:	b003      	add	sp, #12
 8005f84:	f85d fb04 	ldr.w	pc, [sp], #4
 8005f88:	9100      	str	r1, [sp, #0]
 8005f8a:	2305      	movs	r3, #5
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	4905      	ldr	r1, [pc, #20]	; (8005fa4 <ull_readrxtimestamp+0x40>)
 8005f90:	f7ff fc1c 	bl	80057cc <dwt_readfromdevice>
 8005f94:	e7f5      	b.n	8005f82 <ull_readrxtimestamp+0x1e>
 8005f96:	9100      	str	r1, [sp, #0]
 8005f98:	2305      	movs	r3, #5
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	2164      	movs	r1, #100	; 0x64
 8005f9e:	f7ff fc15 	bl	80057cc <dwt_readfromdevice>
 8005fa2:	e7ee      	b.n	8005f82 <ull_readrxtimestamp+0x1e>
 8005fa4:	00180004 	.word	0x00180004

08005fa8 <dwt_writetodevice>:
 8005fa8:	b510      	push	{r4, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 8005fb0:	9401      	str	r4, [sp, #4]
 8005fb2:	9c04      	ldr	r4, [sp, #16]
 8005fb4:	9400      	str	r4, [sp, #0]
 8005fb6:	f7ff fb86 	bl	80056c6 <dwt_xfer3xxx>
 8005fba:	b002      	add	sp, #8
 8005fbc:	bd10      	pop	{r4, pc}

08005fbe <dwt_write8bitoffsetreg>:
 8005fbe:	b510      	push	{r4, lr}
 8005fc0:	b084      	sub	sp, #16
 8005fc2:	ac04      	add	r4, sp, #16
 8005fc4:	f804 3d01 	strb.w	r3, [r4, #-1]!
 8005fc8:	9400      	str	r4, [sp, #0]
 8005fca:	2301      	movs	r3, #1
 8005fcc:	b292      	uxth	r2, r2
 8005fce:	f7ff ffeb 	bl	8005fa8 <dwt_writetodevice>
 8005fd2:	b004      	add	sp, #16
 8005fd4:	bd10      	pop	{r4, pc}
	...

08005fd8 <ull_getframelength>:
 8005fd8:	b510      	push	{r4, lr}
 8005fda:	4604      	mov	r4, r0
 8005fdc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005fde:	7bdb      	ldrb	r3, [r3, #15]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d013      	beq.n	800600c <ull_getframelength+0x34>
 8005fe4:	2b03      	cmp	r3, #3
 8005fe6:	d11d      	bne.n	8006024 <ull_getframelength+0x4c>
 8005fe8:	23f0      	movs	r3, #240	; 0xf0
 8005fea:	2200      	movs	r2, #0
 8005fec:	4912      	ldr	r1, [pc, #72]	; (8006038 <ull_getframelength+0x60>)
 8005fee:	f7ff ffe6 	bl	8005fbe <dwt_write8bitoffsetreg>
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	f7ff fc07 	bl	800580c <dwt_read16bitoffsetreg>
 8005ffe:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006000:	7b1a      	ldrb	r2, [r3, #12]
 8006002:	b1a2      	cbz	r2, 800602e <ull_getframelength+0x56>
 8006004:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8006008:	8458      	strh	r0, [r3, #34]	; 0x22
 800600a:	bd10      	pop	{r4, pc}
 800600c:	230f      	movs	r3, #15
 800600e:	2200      	movs	r2, #0
 8006010:	4909      	ldr	r1, [pc, #36]	; (8006038 <ull_getframelength+0x60>)
 8006012:	f7ff ffd4 	bl	8005fbe <dwt_write8bitoffsetreg>
 8006016:	2200      	movs	r2, #0
 8006018:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800601c:	4620      	mov	r0, r4
 800601e:	f7ff fbf5 	bl	800580c <dwt_read16bitoffsetreg>
 8006022:	e7ec      	b.n	8005ffe <ull_getframelength+0x26>
 8006024:	2200      	movs	r2, #0
 8006026:	214c      	movs	r1, #76	; 0x4c
 8006028:	f7ff fbf0 	bl	800580c <dwt_read16bitoffsetreg>
 800602c:	e7e7      	b.n	8005ffe <ull_getframelength+0x26>
 800602e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8006032:	8458      	strh	r0, [r3, #34]	; 0x22
 8006034:	e7e9      	b.n	800600a <ull_getframelength+0x32>
 8006036:	bf00      	nop
 8006038:	00010024 	.word	0x00010024

0800603c <ull_configeventcounters>:
 800603c:	b538      	push	{r3, r4, r5, lr}
 800603e:	4605      	mov	r5, r0
 8006040:	460c      	mov	r4, r1
 8006042:	2302      	movs	r3, #2
 8006044:	2200      	movs	r2, #0
 8006046:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800604a:	f7ff ffb8 	bl	8005fbe <dwt_write8bitoffsetreg>
 800604e:	b904      	cbnz	r4, 8006052 <ull_configeventcounters+0x16>
 8006050:	bd38      	pop	{r3, r4, r5, pc}
 8006052:	2301      	movs	r3, #1
 8006054:	2200      	movs	r2, #0
 8006056:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800605a:	4628      	mov	r0, r5
 800605c:	f7ff ffaf 	bl	8005fbe <dwt_write8bitoffsetreg>
 8006060:	e7f6      	b.n	8006050 <ull_configeventcounters+0x14>

08006062 <dwt_write16bitoffsetreg>:
 8006062:	b500      	push	{lr}
 8006064:	b085      	sub	sp, #20
 8006066:	f88d 300c 	strb.w	r3, [sp, #12]
 800606a:	0a1b      	lsrs	r3, r3, #8
 800606c:	f88d 300d 	strb.w	r3, [sp, #13]
 8006070:	ab03      	add	r3, sp, #12
 8006072:	9300      	str	r3, [sp, #0]
 8006074:	2302      	movs	r3, #2
 8006076:	b292      	uxth	r2, r2
 8006078:	f7ff ff96 	bl	8005fa8 <dwt_writetodevice>
 800607c:	b005      	add	sp, #20
 800607e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006084 <ull_clearaonconfig>:
 8006084:	b538      	push	{r3, r4, r5, lr}
 8006086:	4604      	mov	r4, r0
 8006088:	2300      	movs	r3, #0
 800608a:	461a      	mov	r2, r3
 800608c:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 8006090:	f7ff ffe7 	bl	8006062 <dwt_write16bitoffsetreg>
 8006094:	2300      	movs	r3, #0
 8006096:	461a      	mov	r2, r3
 8006098:	4908      	ldr	r1, [pc, #32]	; (80060bc <ull_clearaonconfig+0x38>)
 800609a:	4620      	mov	r0, r4
 800609c:	f7ff ff8f 	bl	8005fbe <dwt_write8bitoffsetreg>
 80060a0:	4d07      	ldr	r5, [pc, #28]	; (80060c0 <ull_clearaonconfig+0x3c>)
 80060a2:	2300      	movs	r3, #0
 80060a4:	461a      	mov	r2, r3
 80060a6:	4629      	mov	r1, r5
 80060a8:	4620      	mov	r0, r4
 80060aa:	f7ff ff88 	bl	8005fbe <dwt_write8bitoffsetreg>
 80060ae:	2302      	movs	r3, #2
 80060b0:	2200      	movs	r2, #0
 80060b2:	4629      	mov	r1, r5
 80060b4:	4620      	mov	r0, r4
 80060b6:	f7ff ff82 	bl	8005fbe <dwt_write8bitoffsetreg>
 80060ba:	bd38      	pop	{r3, r4, r5, pc}
 80060bc:	000a0014 	.word	0x000a0014
 80060c0:	000a0004 	.word	0x000a0004

080060c4 <ull_force_clocks>:
 80060c4:	b508      	push	{r3, lr}
 80060c6:	2901      	cmp	r1, #1
 80060c8:	d002      	beq.n	80060d0 <ull_force_clocks+0xc>
 80060ca:	2905      	cmp	r1, #5
 80060cc:	d007      	beq.n	80060de <ull_force_clocks+0x1a>
 80060ce:	bd08      	pop	{r3, pc}
 80060d0:	f641 0322 	movw	r3, #6178	; 0x1822
 80060d4:	2200      	movs	r2, #0
 80060d6:	4905      	ldr	r1, [pc, #20]	; (80060ec <ull_force_clocks+0x28>)
 80060d8:	f7ff ffc3 	bl	8006062 <dwt_write16bitoffsetreg>
 80060dc:	e7f7      	b.n	80060ce <ull_force_clocks+0xa>
 80060de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060e2:	2200      	movs	r2, #0
 80060e4:	4901      	ldr	r1, [pc, #4]	; (80060ec <ull_force_clocks+0x28>)
 80060e6:	f7ff ffbc 	bl	8006062 <dwt_write16bitoffsetreg>
 80060ea:	e7f0      	b.n	80060ce <ull_force_clocks+0xa>
 80060ec:	00110004 	.word	0x00110004

080060f0 <__dwt_otp_write_wdata_id_reg>:
 80060f0:	b538      	push	{r3, r4, r5, lr}
 80060f2:	4605      	mov	r5, r0
 80060f4:	460c      	mov	r4, r1
 80060f6:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	2200      	movs	r2, #0
 80060fe:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8006102:	f7ff ffae 	bl	8006062 <dwt_write16bitoffsetreg>
 8006106:	b2a3      	uxth	r3, r4
 8006108:	2200      	movs	r2, #0
 800610a:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800610e:	4628      	mov	r0, r5
 8006110:	f7ff ffa7 	bl	8006062 <dwt_write16bitoffsetreg>
 8006114:	bd38      	pop	{r3, r4, r5, pc}
	...

08006118 <_dwt_otpread>:
 8006118:	b570      	push	{r4, r5, r6, lr}
 800611a:	4604      	mov	r4, r0
 800611c:	460e      	mov	r6, r1
 800611e:	4d0c      	ldr	r5, [pc, #48]	; (8006150 <_dwt_otpread+0x38>)
 8006120:	2301      	movs	r3, #1
 8006122:	2200      	movs	r2, #0
 8006124:	4629      	mov	r1, r5
 8006126:	f7ff ff9c 	bl	8006062 <dwt_write16bitoffsetreg>
 800612a:	4633      	mov	r3, r6
 800612c:	2200      	movs	r2, #0
 800612e:	4909      	ldr	r1, [pc, #36]	; (8006154 <_dwt_otpread+0x3c>)
 8006130:	4620      	mov	r0, r4
 8006132:	f7ff ff96 	bl	8006062 <dwt_write16bitoffsetreg>
 8006136:	2302      	movs	r3, #2
 8006138:	2200      	movs	r2, #0
 800613a:	4629      	mov	r1, r5
 800613c:	4620      	mov	r0, r4
 800613e:	f7ff ff90 	bl	8006062 <dwt_write16bitoffsetreg>
 8006142:	2200      	movs	r2, #0
 8006144:	4904      	ldr	r1, [pc, #16]	; (8006158 <_dwt_otpread+0x40>)
 8006146:	4620      	mov	r0, r4
 8006148:	f7ff fb4a 	bl	80057e0 <dwt_read32bitoffsetreg>
 800614c:	bd70      	pop	{r4, r5, r6, pc}
 800614e:	bf00      	nop
 8006150:	000b0008 	.word	0x000b0008
 8006154:	000b0004 	.word	0x000b0004
 8006158:	000b0010 	.word	0x000b0010

0800615c <ull_aon_read>:
 800615c:	b538      	push	{r3, r4, r5, lr}
 800615e:	4604      	mov	r4, r0
 8006160:	460b      	mov	r3, r1
 8006162:	2200      	movs	r2, #0
 8006164:	490a      	ldr	r1, [pc, #40]	; (8006190 <ull_aon_read+0x34>)
 8006166:	f7ff ff7c 	bl	8006062 <dwt_write16bitoffsetreg>
 800616a:	4d0a      	ldr	r5, [pc, #40]	; (8006194 <ull_aon_read+0x38>)
 800616c:	2388      	movs	r3, #136	; 0x88
 800616e:	2200      	movs	r2, #0
 8006170:	4629      	mov	r1, r5
 8006172:	4620      	mov	r0, r4
 8006174:	f7ff ff23 	bl	8005fbe <dwt_write8bitoffsetreg>
 8006178:	2300      	movs	r3, #0
 800617a:	461a      	mov	r2, r3
 800617c:	4629      	mov	r1, r5
 800617e:	4620      	mov	r0, r4
 8006180:	f7ff ff1d 	bl	8005fbe <dwt_write8bitoffsetreg>
 8006184:	2200      	movs	r2, #0
 8006186:	4904      	ldr	r1, [pc, #16]	; (8006198 <ull_aon_read+0x3c>)
 8006188:	4620      	mov	r0, r4
 800618a:	f7ff fb51 	bl	8005830 <dwt_read8bitoffsetreg>
 800618e:	bd38      	pop	{r3, r4, r5, pc}
 8006190:	000a000c 	.word	0x000a000c
 8006194:	000a0004 	.word	0x000a0004
 8006198:	000a0008 	.word	0x000a0008

0800619c <ull_aon_write>:
 800619c:	b570      	push	{r4, r5, r6, lr}
 800619e:	4604      	mov	r4, r0
 80061a0:	460b      	mov	r3, r1
 80061a2:	4615      	mov	r5, r2
 80061a4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80061a8:	bf34      	ite	cc
 80061aa:	2600      	movcc	r6, #0
 80061ac:	2620      	movcs	r6, #32
 80061ae:	2200      	movs	r2, #0
 80061b0:	490b      	ldr	r1, [pc, #44]	; (80061e0 <ull_aon_write+0x44>)
 80061b2:	f7ff ff56 	bl	8006062 <dwt_write16bitoffsetreg>
 80061b6:	462b      	mov	r3, r5
 80061b8:	2200      	movs	r2, #0
 80061ba:	490a      	ldr	r1, [pc, #40]	; (80061e4 <ull_aon_write+0x48>)
 80061bc:	4620      	mov	r0, r4
 80061be:	f7ff fefe 	bl	8005fbe <dwt_write8bitoffsetreg>
 80061c2:	4d09      	ldr	r5, [pc, #36]	; (80061e8 <ull_aon_write+0x4c>)
 80061c4:	f046 0390 	orr.w	r3, r6, #144	; 0x90
 80061c8:	2200      	movs	r2, #0
 80061ca:	4629      	mov	r1, r5
 80061cc:	4620      	mov	r0, r4
 80061ce:	f7ff fef6 	bl	8005fbe <dwt_write8bitoffsetreg>
 80061d2:	2300      	movs	r3, #0
 80061d4:	461a      	mov	r2, r3
 80061d6:	4629      	mov	r1, r5
 80061d8:	4620      	mov	r0, r4
 80061da:	f7ff fef0 	bl	8005fbe <dwt_write8bitoffsetreg>
 80061de:	bd70      	pop	{r4, r5, r6, pc}
 80061e0:	000a000c 	.word	0x000a000c
 80061e4:	000a0010 	.word	0x000a0010
 80061e8:	000a0004 	.word	0x000a0004

080061ec <ull_configuresleep>:
 80061ec:	b570      	push	{r4, r5, r6, lr}
 80061ee:	4604      	mov	r4, r0
 80061f0:	460d      	mov	r5, r1
 80061f2:	4616      	mov	r6, r2
 80061f4:	2200      	movs	r2, #0
 80061f6:	f240 110b 	movw	r1, #267	; 0x10b
 80061fa:	f7ff ffcf 	bl	800619c <ull_aon_write>
 80061fe:	f44f 7182 	mov.w	r1, #260	; 0x104
 8006202:	4620      	mov	r0, r4
 8006204:	f7ff ffaa 	bl	800615c <ull_aon_read>
 8006208:	f000 021f 	and.w	r2, r0, #31
 800620c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8006210:	4620      	mov	r0, r4
 8006212:	f7ff ffc3 	bl	800619c <ull_aon_write>
 8006216:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006218:	8a5a      	ldrh	r2, [r3, #18]
 800621a:	4315      	orrs	r5, r2
 800621c:	825d      	strh	r5, [r3, #18]
 800621e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006220:	8a5b      	ldrh	r3, [r3, #18]
 8006222:	2200      	movs	r2, #0
 8006224:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 8006228:	4620      	mov	r0, r4
 800622a:	f7ff ff1a 	bl	8006062 <dwt_write16bitoffsetreg>
 800622e:	4633      	mov	r3, r6
 8006230:	2200      	movs	r2, #0
 8006232:	4902      	ldr	r1, [pc, #8]	; (800623c <ull_configuresleep+0x50>)
 8006234:	4620      	mov	r0, r4
 8006236:	f7ff fec2 	bl	8005fbe <dwt_write8bitoffsetreg>
 800623a:	bd70      	pop	{r4, r5, r6, pc}
 800623c:	000a0014 	.word	0x000a0014

08006240 <ull_signal_rx_buff_free>:
 8006240:	b510      	push	{r4, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	4604      	mov	r4, r0
 8006246:	2200      	movs	r2, #0
 8006248:	9200      	str	r2, [sp, #0]
 800624a:	4613      	mov	r3, r2
 800624c:	2113      	movs	r1, #19
 800624e:	f7ff feab 	bl	8005fa8 <dwt_writetodevice>
 8006252:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006254:	7bda      	ldrb	r2, [r3, #15]
 8006256:	2a03      	cmp	r2, #3
 8006258:	bf0c      	ite	eq
 800625a:	2201      	moveq	r2, #1
 800625c:	2203      	movne	r2, #3
 800625e:	73da      	strb	r2, [r3, #15]
 8006260:	b002      	add	sp, #8
 8006262:	bd10      	pop	{r4, pc}

08006264 <dwt_write32bitoffsetreg>:
 8006264:	b510      	push	{r4, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	f88d 300c 	strb.w	r3, [sp, #12]
 800626c:	0a1c      	lsrs	r4, r3, #8
 800626e:	f88d 400d 	strb.w	r4, [sp, #13]
 8006272:	0c1c      	lsrs	r4, r3, #16
 8006274:	f88d 400e 	strb.w	r4, [sp, #14]
 8006278:	0e1b      	lsrs	r3, r3, #24
 800627a:	f88d 300f 	strb.w	r3, [sp, #15]
 800627e:	ab03      	add	r3, sp, #12
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	2304      	movs	r3, #4
 8006284:	b292      	uxth	r2, r2
 8006286:	f7ff fe8f 	bl	8005fa8 <dwt_writetodevice>
 800628a:	b004      	add	sp, #16
 800628c:	bd10      	pop	{r4, pc}
	...

08006290 <ull_isr>:
 8006290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006292:	4604      	mov	r4, r0
 8006294:	2200      	movs	r2, #0
 8006296:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 800629a:	f7ff fac9 	bl	8005830 <dwt_read8bitoffsetreg>
 800629e:	4605      	mov	r5, r0
 80062a0:	2200      	movs	r2, #0
 80062a2:	2144      	movs	r1, #68	; 0x44
 80062a4:	4620      	mov	r0, r4
 80062a6:	f7ff fa9b 	bl	80057e0 <dwt_read32bitoffsetreg>
 80062aa:	4606      	mov	r6, r0
 80062ac:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80062ae:	2200      	movs	r2, #0
 80062b0:	845a      	strh	r2, [r3, #34]	; 0x22
 80062b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80062b6:	61da      	str	r2, [r3, #28]
 80062b8:	841a      	strh	r2, [r3, #32]
 80062ba:	629a      	str	r2, [r3, #40]	; 0x28
 80062bc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80062be:	629c      	str	r4, [r3, #40]	; 0x28
 80062c0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80062c2:	61d8      	str	r0, [r3, #28]
 80062c4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80062c6:	7dd3      	ldrb	r3, [r2, #23]
 80062c8:	f003 0303 	and.w	r3, r3, #3
 80062cc:	2b03      	cmp	r3, #3
 80062ce:	d079      	beq.n	80063c4 <ull_isr+0x134>
 80062d0:	f416 6f80 	tst.w	r6, #1024	; 0x400
 80062d4:	d005      	beq.n	80062e2 <ull_isr+0x52>
 80062d6:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80062da:	f043 0304 	orr.w	r3, r3, #4
 80062de:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80062e2:	f015 0f80 	tst.w	r5, #128	; 0x80
 80062e6:	d174      	bne.n	80063d2 <ull_isr+0x142>
 80062e8:	f015 0f01 	tst.w	r5, #1
 80062ec:	f040 80a3 	bne.w	8006436 <ull_isr+0x1a6>
 80062f0:	f015 0f40 	tst.w	r5, #64	; 0x40
 80062f4:	d00b      	beq.n	800630e <ull_isr+0x7e>
 80062f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062f8:	b113      	cbz	r3, 8006300 <ull_isr+0x70>
 80062fa:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80062fc:	301c      	adds	r0, #28
 80062fe:	4798      	blx	r3
 8006300:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006304:	2202      	movs	r2, #2
 8006306:	2144      	movs	r1, #68	; 0x44
 8006308:	4620      	mov	r0, r4
 800630a:	f7ff feaa 	bl	8006062 <dwt_write16bitoffsetreg>
 800630e:	f015 0f08 	tst.w	r5, #8
 8006312:	f000 80ea 	beq.w	80064ea <ull_isr+0x25a>
 8006316:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800631e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006320:	7bdb      	ldrb	r3, [r3, #15]
 8006322:	2b00      	cmp	r3, #0
 8006324:	f040 8095 	bne.w	8006452 <ull_isr+0x1c2>
 8006328:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800632a:	61de      	str	r6, [r3, #28]
 800632c:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 8006330:	f000 80a9 	beq.w	8006486 <ull_isr+0x1f6>
 8006334:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006336:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800633a:	f043 0308 	orr.w	r3, r3, #8
 800633e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8006342:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8006346:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 800634a:	d008      	beq.n	800635e <ull_isr+0xce>
 800634c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800634e:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8006352:	f043 0310 	orr.w	r3, r3, #16
 8006356:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800635a:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 800635e:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8006362:	d006      	beq.n	8006372 <ull_isr+0xe2>
 8006364:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006366:	7dd3      	ldrb	r3, [r2, #23]
 8006368:	f003 0303 	and.w	r3, r3, #3
 800636c:	2b03      	cmp	r3, #3
 800636e:	f000 8096 	beq.w	800649e <ull_isr+0x20e>
 8006372:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8006376:	f040 809e 	bne.w	80064b6 <ull_isr+0x226>
 800637a:	f447 43de 	orr.w	r3, r7, #28416	; 0x6f00
 800637e:	2200      	movs	r2, #0
 8006380:	2144      	movs	r1, #68	; 0x44
 8006382:	4620      	mov	r0, r4
 8006384:	f7ff ff6e 	bl	8006264 <dwt_write32bitoffsetreg>
 8006388:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800638a:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800638c:	2b00      	cmp	r3, #0
 800638e:	f040 80a1 	bne.w	80064d4 <ull_isr+0x244>
 8006392:	7dc3      	ldrb	r3, [r0, #23]
 8006394:	f003 0303 	and.w	r3, r3, #3
 8006398:	2b03      	cmp	r3, #3
 800639a:	f000 809b 	beq.w	80064d4 <ull_isr+0x244>
 800639e:	69c3      	ldr	r3, [r0, #28]
 80063a0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80063a4:	61c3      	str	r3, [r0, #28]
 80063a6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80063a8:	69d3      	ldr	r3, [r2, #28]
 80063aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80063ae:	61d3      	str	r3, [r2, #28]
 80063b0:	69e3      	ldr	r3, [r4, #28]
 80063b2:	b113      	cbz	r3, 80063ba <ull_isr+0x12a>
 80063b4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80063b6:	301c      	adds	r0, #28
 80063b8:	4798      	blx	r3
 80063ba:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80063c2:	e08b      	b.n	80064dc <ull_isr+0x24c>
 80063c4:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80063c8:	bf1c      	itt	ne
 80063ca:	f045 0508 	orrne.w	r5, r5, #8
 80063ce:	b2ed      	uxtbne	r5, r5
 80063d0:	e77e      	b.n	80062d0 <ull_isr+0x40>
 80063d2:	6d27      	ldr	r7, [r4, #80]	; 0x50
 80063d4:	2200      	movs	r2, #0
 80063d6:	2148      	movs	r1, #72	; 0x48
 80063d8:	4620      	mov	r0, r4
 80063da:	f7ff fa17 	bl	800580c <dwt_read16bitoffsetreg>
 80063de:	8438      	strh	r0, [r7, #32]
 80063e0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80063e2:	7d9a      	ldrb	r2, [r3, #22]
 80063e4:	b11a      	cbz	r2, 80063ee <ull_isr+0x15e>
 80063e6:	69da      	ldr	r2, [r3, #28]
 80063e8:	f012 0f04 	tst.w	r2, #4
 80063ec:	d103      	bne.n	80063f6 <ull_isr+0x166>
 80063ee:	8c1b      	ldrh	r3, [r3, #32]
 80063f0:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80063f4:	b18b      	cbz	r3, 800641a <ull_isr+0x18a>
 80063f6:	2304      	movs	r3, #4
 80063f8:	2200      	movs	r2, #0
 80063fa:	2144      	movs	r1, #68	; 0x44
 80063fc:	4620      	mov	r0, r4
 80063fe:	f7ff fdde 	bl	8005fbe <dwt_write8bitoffsetreg>
 8006402:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8006406:	2200      	movs	r2, #0
 8006408:	2148      	movs	r1, #72	; 0x48
 800640a:	4620      	mov	r0, r4
 800640c:	f7ff fe29 	bl	8006062 <dwt_write16bitoffsetreg>
 8006410:	6a23      	ldr	r3, [r4, #32]
 8006412:	b113      	cbz	r3, 800641a <ull_isr+0x18a>
 8006414:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006416:	301c      	adds	r0, #28
 8006418:	4798      	blx	r3
 800641a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800641c:	8c1b      	ldrh	r3, [r3, #32]
 800641e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006422:	f43f af61 	beq.w	80062e8 <ull_isr+0x58>
 8006426:	f44f 7380 	mov.w	r3, #256	; 0x100
 800642a:	2200      	movs	r2, #0
 800642c:	2148      	movs	r1, #72	; 0x48
 800642e:	4620      	mov	r0, r4
 8006430:	f7ff fe17 	bl	8006062 <dwt_write16bitoffsetreg>
 8006434:	e758      	b.n	80062e8 <ull_isr+0x58>
 8006436:	23f8      	movs	r3, #248	; 0xf8
 8006438:	2200      	movs	r2, #0
 800643a:	2144      	movs	r1, #68	; 0x44
 800643c:	4620      	mov	r0, r4
 800643e:	f7ff fdbe 	bl	8005fbe <dwt_write8bitoffsetreg>
 8006442:	6923      	ldr	r3, [r4, #16]
 8006444:	2b00      	cmp	r3, #0
 8006446:	f43f af53 	beq.w	80062f0 <ull_isr+0x60>
 800644a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800644c:	301c      	adds	r0, #28
 800644e:	4798      	blx	r3
 8006450:	e74e      	b.n	80062f0 <ull_isr+0x60>
 8006452:	493b      	ldr	r1, [pc, #236]	; (8006540 <ull_isr+0x2b0>)
 8006454:	4620      	mov	r0, r4
 8006456:	f7ff f9eb 	bl	8005830 <dwt_read8bitoffsetreg>
 800645a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800645c:	7bdb      	ldrb	r3, [r3, #15]
 800645e:	2b03      	cmp	r3, #3
 8006460:	bf08      	it	eq
 8006462:	f3c0 1007 	ubfxeq	r0, r0, #4, #8
 8006466:	f010 0f01 	tst.w	r0, #1
 800646a:	bf18      	it	ne
 800646c:	f446 4680 	orrne.w	r6, r6, #16384	; 0x4000
 8006470:	f010 0f02 	tst.w	r0, #2
 8006474:	bf18      	it	ne
 8006476:	f446 5600 	orrne.w	r6, r6, #8192	; 0x2000
 800647a:	f010 0f04 	tst.w	r0, #4
 800647e:	bf18      	it	ne
 8006480:	f446 6680 	orrne.w	r6, r6, #1024	; 0x400
 8006484:	e750      	b.n	8006328 <ull_isr+0x98>
 8006486:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800648a:	bf1f      	itttt	ne
 800648c:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 800648e:	f892 3024 	ldrbne.w	r3, [r2, #36]	; 0x24
 8006492:	f043 0304 	orrne.w	r3, r3, #4
 8006496:	f882 3024 	strbne.w	r3, [r2, #36]	; 0x24
 800649a:	2700      	movs	r7, #0
 800649c:	e753      	b.n	8006346 <ull_isr+0xb6>
 800649e:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80064a2:	f043 0302 	orr.w	r3, r3, #2
 80064a6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80064aa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80064ac:	2200      	movs	r2, #0
 80064ae:	845a      	strh	r2, [r3, #34]	; 0x22
 80064b0:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 80064b4:	e761      	b.n	800637a <ull_isr+0xea>
 80064b6:	4620      	mov	r0, r4
 80064b8:	f7ff fd8e 	bl	8005fd8 <ull_getframelength>
 80064bc:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80064c0:	f43f af5b 	beq.w	800637a <ull_isr+0xea>
 80064c4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80064c6:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80064ca:	f043 0301 	orr.w	r3, r3, #1
 80064ce:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80064d2:	e752      	b.n	800637a <ull_isr+0xea>
 80064d4:	6963      	ldr	r3, [r4, #20]
 80064d6:	b10b      	cbz	r3, 80064dc <ull_isr+0x24c>
 80064d8:	301c      	adds	r0, #28
 80064da:	4798      	blx	r3
 80064dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80064de:	7bdb      	ldrb	r3, [r3, #15]
 80064e0:	b953      	cbnz	r3, 80064f8 <ull_isr+0x268>
 80064e2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80064ea:	f015 0f10 	tst.w	r5, #16
 80064ee:	d107      	bne.n	8006500 <ull_isr+0x270>
 80064f0:	f015 0f20 	tst.w	r5, #32
 80064f4:	d114      	bne.n	8006520 <ull_isr+0x290>
 80064f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064f8:	4620      	mov	r0, r4
 80064fa:	f7ff fea1 	bl	8006240 <ull_signal_rx_buff_free>
 80064fe:	e7f0      	b.n	80064e2 <ull_isr+0x252>
 8006500:	4b10      	ldr	r3, [pc, #64]	; (8006544 <ull_isr+0x2b4>)
 8006502:	2200      	movs	r2, #0
 8006504:	2144      	movs	r1, #68	; 0x44
 8006506:	4620      	mov	r0, r4
 8006508:	f7ff feac 	bl	8006264 <dwt_write32bitoffsetreg>
 800650c:	69e3      	ldr	r3, [r4, #28]
 800650e:	b113      	cbz	r3, 8006516 <ull_isr+0x286>
 8006510:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006512:	301c      	adds	r0, #28
 8006514:	4798      	blx	r3
 8006516:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800651e:	e7e7      	b.n	80064f0 <ull_isr+0x260>
 8006520:	4b09      	ldr	r3, [pc, #36]	; (8006548 <ull_isr+0x2b8>)
 8006522:	2200      	movs	r2, #0
 8006524:	2144      	movs	r1, #68	; 0x44
 8006526:	4620      	mov	r0, r4
 8006528:	f7ff fe9c 	bl	8006264 <dwt_write32bitoffsetreg>
 800652c:	69a3      	ldr	r3, [r4, #24]
 800652e:	b113      	cbz	r3, 8006536 <ull_isr+0x2a6>
 8006530:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006532:	301c      	adds	r0, #28
 8006534:	4798      	blx	r3
 8006536:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006538:	2200      	movs	r2, #0
 800653a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800653e:	e7da      	b.n	80064f6 <ull_isr+0x266>
 8006540:	00010024 	.word	0x00010024
 8006544:	34059400 	.word	0x34059400
 8006548:	10220400 	.word	0x10220400

0800654c <_dwt_adjust_delaytime>:
 800654c:	b538      	push	{r3, r4, r5, lr}
 800654e:	4604      	mov	r4, r0
 8006550:	b989      	cbnz	r1, 8006576 <_dwt_adjust_delaytime+0x2a>
 8006552:	2200      	movs	r2, #0
 8006554:	212c      	movs	r1, #44	; 0x2c
 8006556:	f7ff f943 	bl	80057e0 <dwt_read32bitoffsetreg>
 800655a:	4605      	mov	r5, r0
 800655c:	2201      	movs	r2, #1
 800655e:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8006562:	4620      	mov	r0, r4
 8006564:	f7ff f964 	bl	8005830 <dwt_read8bitoffsetreg>
 8006568:	1a2b      	subs	r3, r5, r0
 800656a:	2200      	movs	r2, #0
 800656c:	212c      	movs	r1, #44	; 0x2c
 800656e:	4620      	mov	r0, r4
 8006570:	f7ff fe78 	bl	8006264 <dwt_write32bitoffsetreg>
 8006574:	bd38      	pop	{r3, r4, r5, pc}
 8006576:	2200      	movs	r2, #0
 8006578:	212c      	movs	r1, #44	; 0x2c
 800657a:	f7ff f931 	bl	80057e0 <dwt_read32bitoffsetreg>
 800657e:	4605      	mov	r5, r0
 8006580:	2201      	movs	r2, #1
 8006582:	4905      	ldr	r1, [pc, #20]	; (8006598 <_dwt_adjust_delaytime+0x4c>)
 8006584:	4620      	mov	r0, r4
 8006586:	f7ff f953 	bl	8005830 <dwt_read8bitoffsetreg>
 800658a:	1a2b      	subs	r3, r5, r0
 800658c:	2200      	movs	r2, #0
 800658e:	212c      	movs	r1, #44	; 0x2c
 8006590:	4620      	mov	r0, r4
 8006592:	f7ff fe67 	bl	8006264 <dwt_write32bitoffsetreg>
 8006596:	e7ed      	b.n	8006574 <_dwt_adjust_delaytime+0x28>
 8006598:	00010004 	.word	0x00010004

0800659c <ull_setrxaftertxdelay>:
 800659c:	b570      	push	{r4, r5, r6, lr}
 800659e:	4606      	mov	r6, r0
 80065a0:	460c      	mov	r4, r1
 80065a2:	4d08      	ldr	r5, [pc, #32]	; (80065c4 <ull_setrxaftertxdelay+0x28>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	4629      	mov	r1, r5
 80065a8:	f7ff f91a 	bl	80057e0 <dwt_read32bitoffsetreg>
 80065ac:	0d00      	lsrs	r0, r0, #20
 80065ae:	0500      	lsls	r0, r0, #20
 80065b0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80065b4:	4303      	orrs	r3, r0
 80065b6:	2200      	movs	r2, #0
 80065b8:	4629      	mov	r1, r5
 80065ba:	4630      	mov	r0, r6
 80065bc:	f7ff fe52 	bl	8006264 <dwt_write32bitoffsetreg>
 80065c0:	bd70      	pop	{r4, r5, r6, pc}
 80065c2:	bf00      	nop
 80065c4:	00010008 	.word	0x00010008

080065c8 <ull_setlnapamode>:
 80065c8:	b538      	push	{r3, r4, r5, lr}
 80065ca:	4605      	mov	r5, r0
 80065cc:	460c      	mov	r4, r1
 80065ce:	2200      	movs	r2, #0
 80065d0:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80065d4:	f7ff f904 	bl	80057e0 <dwt_read32bitoffsetreg>
 80065d8:	4b0b      	ldr	r3, [pc, #44]	; (8006608 <ull_setlnapamode+0x40>)
 80065da:	4003      	ands	r3, r0
 80065dc:	f014 0f01 	tst.w	r4, #1
 80065e0:	bf18      	it	ne
 80065e2:	f443 2380 	orrne.w	r3, r3, #262144	; 0x40000
 80065e6:	f014 0f02 	tst.w	r4, #2
 80065ea:	bf18      	it	ne
 80065ec:	f443 4310 	orrne.w	r3, r3, #36864	; 0x9000
 80065f0:	f014 0f04 	tst.w	r4, #4
 80065f4:	bf18      	it	ne
 80065f6:	f043 0312 	orrne.w	r3, r3, #18
 80065fa:	2200      	movs	r2, #0
 80065fc:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8006600:	4628      	mov	r0, r5
 8006602:	f7ff fe2f 	bl	8006264 <dwt_write32bitoffsetreg>
 8006606:	bd38      	pop	{r3, r4, r5, pc}
 8006608:	ffe00fc0 	.word	0xffe00fc0

0800660c <ull_configurestskey>:
 800660c:	b538      	push	{r3, r4, r5, lr}
 800660e:	4605      	mov	r5, r0
 8006610:	460c      	mov	r4, r1
 8006612:	680b      	ldr	r3, [r1, #0]
 8006614:	2200      	movs	r2, #0
 8006616:	490b      	ldr	r1, [pc, #44]	; (8006644 <ull_configurestskey+0x38>)
 8006618:	f7ff fe24 	bl	8006264 <dwt_write32bitoffsetreg>
 800661c:	6863      	ldr	r3, [r4, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	4909      	ldr	r1, [pc, #36]	; (8006648 <ull_configurestskey+0x3c>)
 8006622:	4628      	mov	r0, r5
 8006624:	f7ff fe1e 	bl	8006264 <dwt_write32bitoffsetreg>
 8006628:	68a3      	ldr	r3, [r4, #8]
 800662a:	2200      	movs	r2, #0
 800662c:	4907      	ldr	r1, [pc, #28]	; (800664c <ull_configurestskey+0x40>)
 800662e:	4628      	mov	r0, r5
 8006630:	f7ff fe18 	bl	8006264 <dwt_write32bitoffsetreg>
 8006634:	68e3      	ldr	r3, [r4, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	4905      	ldr	r1, [pc, #20]	; (8006650 <ull_configurestskey+0x44>)
 800663a:	4628      	mov	r0, r5
 800663c:	f7ff fe12 	bl	8006264 <dwt_write32bitoffsetreg>
 8006640:	bd38      	pop	{r3, r4, r5, pc}
 8006642:	bf00      	nop
 8006644:	0002000c 	.word	0x0002000c
 8006648:	00020010 	.word	0x00020010
 800664c:	00020014 	.word	0x00020014
 8006650:	00020018 	.word	0x00020018

08006654 <ull_configurestsiv>:
 8006654:	b538      	push	{r3, r4, r5, lr}
 8006656:	4605      	mov	r5, r0
 8006658:	460c      	mov	r4, r1
 800665a:	680b      	ldr	r3, [r1, #0]
 800665c:	2200      	movs	r2, #0
 800665e:	490b      	ldr	r1, [pc, #44]	; (800668c <ull_configurestsiv+0x38>)
 8006660:	f7ff fe00 	bl	8006264 <dwt_write32bitoffsetreg>
 8006664:	6863      	ldr	r3, [r4, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	4909      	ldr	r1, [pc, #36]	; (8006690 <ull_configurestsiv+0x3c>)
 800666a:	4628      	mov	r0, r5
 800666c:	f7ff fdfa 	bl	8006264 <dwt_write32bitoffsetreg>
 8006670:	68a3      	ldr	r3, [r4, #8]
 8006672:	2200      	movs	r2, #0
 8006674:	4907      	ldr	r1, [pc, #28]	; (8006694 <ull_configurestsiv+0x40>)
 8006676:	4628      	mov	r0, r5
 8006678:	f7ff fdf4 	bl	8006264 <dwt_write32bitoffsetreg>
 800667c:	68e3      	ldr	r3, [r4, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	4905      	ldr	r1, [pc, #20]	; (8006698 <ull_configurestsiv+0x44>)
 8006682:	4628      	mov	r0, r5
 8006684:	f7ff fdee 	bl	8006264 <dwt_write32bitoffsetreg>
 8006688:	bd38      	pop	{r3, r4, r5, pc}
 800668a:	bf00      	nop
 800668c:	0002001c 	.word	0x0002001c
 8006690:	00020020 	.word	0x00020020
 8006694:	00020024 	.word	0x00020024
 8006698:	00020028 	.word	0x00020028

0800669c <ull_configmrxlut>:
 800669c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066a0:	4604      	mov	r4, r0
 80066a2:	2905      	cmp	r1, #5
 80066a4:	d040      	beq.n	8006728 <ull_configmrxlut+0x8c>
 80066a6:	4d26      	ldr	r5, [pc, #152]	; (8006740 <ull_configmrxlut+0xa4>)
 80066a8:	462e      	mov	r6, r5
 80066aa:	4f26      	ldr	r7, [pc, #152]	; (8006744 <ull_configmrxlut+0xa8>)
 80066ac:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8006788 <ull_configmrxlut+0xec>
 80066b0:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 800678c <ull_configmrxlut+0xf0>
 80066b4:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006790 <ull_configmrxlut+0xf4>
 80066b8:	4b23      	ldr	r3, [pc, #140]	; (8006748 <ull_configmrxlut+0xac>)
 80066ba:	2200      	movs	r2, #0
 80066bc:	4923      	ldr	r1, [pc, #140]	; (800674c <ull_configmrxlut+0xb0>)
 80066be:	4620      	mov	r0, r4
 80066c0:	f7ff fdd0 	bl	8006264 <dwt_write32bitoffsetreg>
 80066c4:	4653      	mov	r3, sl
 80066c6:	2200      	movs	r2, #0
 80066c8:	4921      	ldr	r1, [pc, #132]	; (8006750 <ull_configmrxlut+0xb4>)
 80066ca:	4620      	mov	r0, r4
 80066cc:	f7ff fdca 	bl	8006264 <dwt_write32bitoffsetreg>
 80066d0:	464b      	mov	r3, r9
 80066d2:	2200      	movs	r2, #0
 80066d4:	491f      	ldr	r1, [pc, #124]	; (8006754 <ull_configmrxlut+0xb8>)
 80066d6:	4620      	mov	r0, r4
 80066d8:	f7ff fdc4 	bl	8006264 <dwt_write32bitoffsetreg>
 80066dc:	4643      	mov	r3, r8
 80066de:	2200      	movs	r2, #0
 80066e0:	491d      	ldr	r1, [pc, #116]	; (8006758 <ull_configmrxlut+0xbc>)
 80066e2:	4620      	mov	r0, r4
 80066e4:	f7ff fdbe 	bl	8006264 <dwt_write32bitoffsetreg>
 80066e8:	463b      	mov	r3, r7
 80066ea:	2200      	movs	r2, #0
 80066ec:	491b      	ldr	r1, [pc, #108]	; (800675c <ull_configmrxlut+0xc0>)
 80066ee:	4620      	mov	r0, r4
 80066f0:	f7ff fdb8 	bl	8006264 <dwt_write32bitoffsetreg>
 80066f4:	4633      	mov	r3, r6
 80066f6:	2200      	movs	r2, #0
 80066f8:	4919      	ldr	r1, [pc, #100]	; (8006760 <ull_configmrxlut+0xc4>)
 80066fa:	4620      	mov	r0, r4
 80066fc:	f7ff fdb2 	bl	8006264 <dwt_write32bitoffsetreg>
 8006700:	462b      	mov	r3, r5
 8006702:	2200      	movs	r2, #0
 8006704:	4917      	ldr	r1, [pc, #92]	; (8006764 <ull_configmrxlut+0xc8>)
 8006706:	4620      	mov	r0, r4
 8006708:	f7ff fdac 	bl	8006264 <dwt_write32bitoffsetreg>
 800670c:	4b16      	ldr	r3, [pc, #88]	; (8006768 <ull_configmrxlut+0xcc>)
 800670e:	2200      	movs	r2, #0
 8006710:	4916      	ldr	r1, [pc, #88]	; (800676c <ull_configmrxlut+0xd0>)
 8006712:	4620      	mov	r0, r4
 8006714:	f7ff fda6 	bl	8006264 <dwt_write32bitoffsetreg>
 8006718:	4b15      	ldr	r3, [pc, #84]	; (8006770 <ull_configmrxlut+0xd4>)
 800671a:	2200      	movs	r2, #0
 800671c:	4915      	ldr	r1, [pc, #84]	; (8006774 <ull_configmrxlut+0xd8>)
 800671e:	4620      	mov	r0, r4
 8006720:	f7ff fda0 	bl	8006264 <dwt_write32bitoffsetreg>
 8006724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006728:	4d13      	ldr	r5, [pc, #76]	; (8006778 <ull_configmrxlut+0xdc>)
 800672a:	4e14      	ldr	r6, [pc, #80]	; (800677c <ull_configmrxlut+0xe0>)
 800672c:	4f14      	ldr	r7, [pc, #80]	; (8006780 <ull_configmrxlut+0xe4>)
 800672e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8006794 <ull_configmrxlut+0xf8>
 8006732:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8006798 <ull_configmrxlut+0xfc>
 8006736:	f8df a064 	ldr.w	sl, [pc, #100]	; 800679c <ull_configmrxlut+0x100>
 800673a:	4b12      	ldr	r3, [pc, #72]	; (8006784 <ull_configmrxlut+0xe8>)
 800673c:	e7bd      	b.n	80066ba <ull_configmrxlut+0x1e>
 800673e:	bf00      	nop
 8006740:	0002afb5 	.word	0x0002afb5
 8006744:	0002af7d 	.word	0x0002af7d
 8006748:	0002a8fe 	.word	0x0002a8fe
 800674c:	00030038 	.word	0x00030038
 8006750:	0003003c 	.word	0x0003003c
 8006754:	00030040 	.word	0x00030040
 8006758:	00030044 	.word	0x00030044
 800675c:	00030048 	.word	0x00030048
 8006760:	0003004c 	.word	0x0003004c
 8006764:	00030050 	.word	0x00030050
 8006768:	10000240 	.word	0x10000240
 800676c:	0003001c 	.word	0x0003001c
 8006770:	1b6da489 	.word	0x1b6da489
 8006774:	00030020 	.word	0x00030020
 8006778:	0001cff5 	.word	0x0001cff5
 800677c:	0001cfb5 	.word	0x0001cfb5
 8006780:	0001cf36 	.word	0x0001cf36
 8006784:	0001c0fd 	.word	0x0001c0fd
 8006788:	0002af3e 	.word	0x0002af3e
 800678c:	0002a5fe 	.word	0x0002a5fe
 8006790:	0002ac36 	.word	0x0002ac36
 8006794:	0001c77e 	.word	0x0001c77e
 8006798:	0001c6be 	.word	0x0001c6be
 800679c:	0001c43e 	.word	0x0001c43e

080067a0 <ull_disable_rftx_blocks>:
 80067a0:	b508      	push	{r3, lr}
 80067a2:	2300      	movs	r3, #0
 80067a4:	461a      	mov	r2, r3
 80067a6:	4902      	ldr	r1, [pc, #8]	; (80067b0 <ull_disable_rftx_blocks+0x10>)
 80067a8:	f7ff fd5c 	bl	8006264 <dwt_write32bitoffsetreg>
 80067ac:	bd08      	pop	{r3, pc}
 80067ae:	bf00      	nop
 80067b0:	00070004 	.word	0x00070004

080067b4 <ull_disable_rf_tx>:
 80067b4:	b538      	push	{r3, r4, r5, lr}
 80067b6:	4604      	mov	r4, r0
 80067b8:	460d      	mov	r5, r1
 80067ba:	2300      	movs	r3, #0
 80067bc:	461a      	mov	r2, r3
 80067be:	490a      	ldr	r1, [pc, #40]	; (80067e8 <ull_disable_rf_tx+0x34>)
 80067c0:	f7ff fd50 	bl	8006264 <dwt_write32bitoffsetreg>
 80067c4:	2300      	movs	r3, #0
 80067c6:	461a      	mov	r2, r3
 80067c8:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 80067cc:	4620      	mov	r0, r4
 80067ce:	f7ff fd49 	bl	8006264 <dwt_write32bitoffsetreg>
 80067d2:	b905      	cbnz	r5, 80067d6 <ull_disable_rf_tx+0x22>
 80067d4:	bd38      	pop	{r3, r4, r5, pc}
 80067d6:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 80067da:	2200      	movs	r2, #0
 80067dc:	4903      	ldr	r1, [pc, #12]	; (80067ec <ull_disable_rf_tx+0x38>)
 80067de:	4620      	mov	r0, r4
 80067e0:	f7ff fd40 	bl	8006264 <dwt_write32bitoffsetreg>
 80067e4:	e7f6      	b.n	80067d4 <ull_disable_rf_tx+0x20>
 80067e6:	bf00      	nop
 80067e8:	00070048 	.word	0x00070048
 80067ec:	00070014 	.word	0x00070014

080067f0 <ull_readrxdata>:
 80067f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067f2:	b083      	sub	sp, #12
 80067f4:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80067f6:	7be4      	ldrb	r4, [r4, #15]
 80067f8:	2c03      	cmp	r4, #3
 80067fa:	bf0c      	ite	eq
 80067fc:	f44f 1c98 	moveq.w	ip, #1245184	; 0x130000
 8006800:	f44f 1c90 	movne.w	ip, #1179648	; 0x120000
 8006804:	189c      	adds	r4, r3, r2
 8006806:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800680a:	da19      	bge.n	8006840 <ull_readrxdata+0x50>
 800680c:	461d      	mov	r5, r3
 800680e:	4616      	mov	r6, r2
 8006810:	460f      	mov	r7, r1
 8006812:	4604      	mov	r4, r0
 8006814:	2b7f      	cmp	r3, #127	; 0x7f
 8006816:	d915      	bls.n	8006844 <ull_readrxdata+0x54>
 8006818:	ea4f 431c 	mov.w	r3, ip, lsr #16
 800681c:	2200      	movs	r2, #0
 800681e:	490d      	ldr	r1, [pc, #52]	; (8006854 <ull_readrxdata+0x64>)
 8006820:	f7ff fd20 	bl	8006264 <dwt_write32bitoffsetreg>
 8006824:	462b      	mov	r3, r5
 8006826:	2200      	movs	r2, #0
 8006828:	490b      	ldr	r1, [pc, #44]	; (8006858 <ull_readrxdata+0x68>)
 800682a:	4620      	mov	r0, r4
 800682c:	f7ff fd1a 	bl	8006264 <dwt_write32bitoffsetreg>
 8006830:	9700      	str	r7, [sp, #0]
 8006832:	4633      	mov	r3, r6
 8006834:	2200      	movs	r2, #0
 8006836:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800683a:	4620      	mov	r0, r4
 800683c:	f7fe ffc6 	bl	80057cc <dwt_readfromdevice>
 8006840:	b003      	add	sp, #12
 8006842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006844:	9100      	str	r1, [sp, #0]
 8006846:	4613      	mov	r3, r2
 8006848:	462a      	mov	r2, r5
 800684a:	4661      	mov	r1, ip
 800684c:	f7fe ffbe 	bl	80057cc <dwt_readfromdevice>
 8006850:	e7f6      	b.n	8006840 <ull_readrxdata+0x50>
 8006852:	bf00      	nop
 8006854:	001f0004 	.word	0x001f0004
 8006858:	001f0008 	.word	0x001f0008

0800685c <ull_rxenable>:
 800685c:	b530      	push	{r4, r5, lr}
 800685e:	b083      	sub	sp, #12
 8006860:	4605      	mov	r5, r0
 8006862:	460c      	mov	r4, r1
 8006864:	b171      	cbz	r1, 8006884 <ull_rxenable+0x28>
 8006866:	f021 0302 	bic.w	r3, r1, #2
 800686a:	3b01      	subs	r3, #1
 800686c:	2b0f      	cmp	r3, #15
 800686e:	d856      	bhi.n	800691e <ull_rxenable+0xc2>
 8006870:	e8df f003 	tbb	[pc, r3]
 8006874:	21555510 	.word	0x21555510
 8006878:	28555555 	.word	0x28555555
 800687c:	55555555 	.word	0x55555555
 8006880:	33555555 	.word	0x33555555
 8006884:	2200      	movs	r2, #0
 8006886:	9200      	str	r2, [sp, #0]
 8006888:	4613      	mov	r3, r2
 800688a:	2102      	movs	r1, #2
 800688c:	f7ff fb8c 	bl	8005fa8 <dwt_writetodevice>
 8006890:	4620      	mov	r0, r4
 8006892:	e00e      	b.n	80068b2 <ull_rxenable+0x56>
 8006894:	2200      	movs	r2, #0
 8006896:	9200      	str	r2, [sp, #0]
 8006898:	4613      	mov	r3, r2
 800689a:	2104      	movs	r1, #4
 800689c:	f7ff fb84 	bl	8005fa8 <dwt_writetodevice>
 80068a0:	2203      	movs	r2, #3
 80068a2:	2144      	movs	r1, #68	; 0x44
 80068a4:	4628      	mov	r0, r5
 80068a6:	f7fe ffc3 	bl	8005830 <dwt_read8bitoffsetreg>
 80068aa:	f010 0f08 	tst.w	r0, #8
 80068ae:	d11f      	bne.n	80068f0 <ull_rxenable+0x94>
 80068b0:	2000      	movs	r0, #0
 80068b2:	b003      	add	sp, #12
 80068b4:	bd30      	pop	{r4, r5, pc}
 80068b6:	2200      	movs	r2, #0
 80068b8:	9200      	str	r2, [sp, #0]
 80068ba:	4613      	mov	r3, r2
 80068bc:	210a      	movs	r1, #10
 80068be:	f7ff fb73 	bl	8005fa8 <dwt_writetodevice>
 80068c2:	e7ed      	b.n	80068a0 <ull_rxenable+0x44>
 80068c4:	2100      	movs	r1, #0
 80068c6:	f7ff fe41 	bl	800654c <_dwt_adjust_delaytime>
 80068ca:	2200      	movs	r2, #0
 80068cc:	9200      	str	r2, [sp, #0]
 80068ce:	4613      	mov	r3, r2
 80068d0:	2108      	movs	r1, #8
 80068d2:	4628      	mov	r0, r5
 80068d4:	f7ff fb68 	bl	8005fa8 <dwt_writetodevice>
 80068d8:	e7e2      	b.n	80068a0 <ull_rxenable+0x44>
 80068da:	2101      	movs	r1, #1
 80068dc:	f7ff fe36 	bl	800654c <_dwt_adjust_delaytime>
 80068e0:	2200      	movs	r2, #0
 80068e2:	9200      	str	r2, [sp, #0]
 80068e4:	4613      	mov	r3, r2
 80068e6:	2106      	movs	r1, #6
 80068e8:	4628      	mov	r0, r5
 80068ea:	f7ff fb5d 	bl	8005fa8 <dwt_writetodevice>
 80068ee:	e7d7      	b.n	80068a0 <ull_rxenable+0x44>
 80068f0:	2100      	movs	r1, #0
 80068f2:	9100      	str	r1, [sp, #0]
 80068f4:	460b      	mov	r3, r1
 80068f6:	460a      	mov	r2, r1
 80068f8:	4628      	mov	r0, r5
 80068fa:	f7ff fb55 	bl	8005fa8 <dwt_writetodevice>
 80068fe:	f014 0f02 	tst.w	r4, #2
 8006902:	d002      	beq.n	800690a <ull_rxenable+0xae>
 8006904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006908:	e7d3      	b.n	80068b2 <ull_rxenable+0x56>
 800690a:	2200      	movs	r2, #0
 800690c:	9200      	str	r2, [sp, #0]
 800690e:	4613      	mov	r3, r2
 8006910:	2102      	movs	r1, #2
 8006912:	4628      	mov	r0, r5
 8006914:	f7ff fb48 	bl	8005fa8 <dwt_writetodevice>
 8006918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800691c:	e7c9      	b.n	80068b2 <ull_rxenable+0x56>
 800691e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006922:	e7c6      	b.n	80068b2 <ull_rxenable+0x56>

08006924 <ull_writetxdata>:
 8006924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006926:	b083      	sub	sp, #12
 8006928:	185c      	adds	r4, r3, r1
 800692a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800692e:	da24      	bge.n	800697a <ull_writetxdata+0x56>
 8006930:	461c      	mov	r4, r3
 8006932:	4617      	mov	r7, r2
 8006934:	460e      	mov	r6, r1
 8006936:	4605      	mov	r5, r0
 8006938:	2b7f      	cmp	r3, #127	; 0x7f
 800693a:	d915      	bls.n	8006968 <ull_writetxdata+0x44>
 800693c:	2314      	movs	r3, #20
 800693e:	2200      	movs	r2, #0
 8006940:	490f      	ldr	r1, [pc, #60]	; (8006980 <ull_writetxdata+0x5c>)
 8006942:	f7ff fc8f 	bl	8006264 <dwt_write32bitoffsetreg>
 8006946:	4623      	mov	r3, r4
 8006948:	2200      	movs	r2, #0
 800694a:	490e      	ldr	r1, [pc, #56]	; (8006984 <ull_writetxdata+0x60>)
 800694c:	4628      	mov	r0, r5
 800694e:	f7ff fc89 	bl	8006264 <dwt_write32bitoffsetreg>
 8006952:	9700      	str	r7, [sp, #0]
 8006954:	4633      	mov	r3, r6
 8006956:	2200      	movs	r2, #0
 8006958:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800695c:	4628      	mov	r0, r5
 800695e:	f7ff fb23 	bl	8005fa8 <dwt_writetodevice>
 8006962:	2000      	movs	r0, #0
 8006964:	b003      	add	sp, #12
 8006966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006968:	9200      	str	r2, [sp, #0]
 800696a:	460b      	mov	r3, r1
 800696c:	4622      	mov	r2, r4
 800696e:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 8006972:	f7ff fb19 	bl	8005fa8 <dwt_writetodevice>
 8006976:	2000      	movs	r0, #0
 8006978:	e7f4      	b.n	8006964 <ull_writetxdata+0x40>
 800697a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800697e:	e7f1      	b.n	8006964 <ull_writetxdata+0x40>
 8006980:	001f0004 	.word	0x001f0004
 8006984:	001f0008 	.word	0x001f0008

08006988 <dwt_modify32bitoffsetreg>:
 8006988:	b530      	push	{r4, r5, lr}
 800698a:	b085      	sub	sp, #20
 800698c:	9c08      	ldr	r4, [sp, #32]
 800698e:	f88d 3008 	strb.w	r3, [sp, #8]
 8006992:	0a1d      	lsrs	r5, r3, #8
 8006994:	f88d 5009 	strb.w	r5, [sp, #9]
 8006998:	0c1d      	lsrs	r5, r3, #16
 800699a:	f88d 500a 	strb.w	r5, [sp, #10]
 800699e:	0e1b      	lsrs	r3, r3, #24
 80069a0:	f88d 300b 	strb.w	r3, [sp, #11]
 80069a4:	f88d 400c 	strb.w	r4, [sp, #12]
 80069a8:	0a23      	lsrs	r3, r4, #8
 80069aa:	f88d 300d 	strb.w	r3, [sp, #13]
 80069ae:	0c23      	lsrs	r3, r4, #16
 80069b0:	f88d 300e 	strb.w	r3, [sp, #14]
 80069b4:	0e24      	lsrs	r4, r4, #24
 80069b6:	f88d 400f 	strb.w	r4, [sp, #15]
 80069ba:	f248 0303 	movw	r3, #32771	; 0x8003
 80069be:	9301      	str	r3, [sp, #4]
 80069c0:	ab02      	add	r3, sp, #8
 80069c2:	9300      	str	r3, [sp, #0]
 80069c4:	2308      	movs	r3, #8
 80069c6:	b292      	uxth	r2, r2
 80069c8:	f7fe fe7d 	bl	80056c6 <dwt_xfer3xxx>
 80069cc:	b005      	add	sp, #20
 80069ce:	bd30      	pop	{r4, r5, pc}

080069d0 <_dwt_kick_dgc_on_wakeup>:
 80069d0:	b500      	push	{lr}
 80069d2:	b083      	sub	sp, #12
 80069d4:	2905      	cmp	r1, #5
 80069d6:	d004      	beq.n	80069e2 <_dwt_kick_dgc_on_wakeup+0x12>
 80069d8:	2909      	cmp	r1, #9
 80069da:	d00b      	beq.n	80069f4 <_dwt_kick_dgc_on_wakeup+0x24>
 80069dc:	b003      	add	sp, #12
 80069de:	f85d fb04 	ldr.w	pc, [sp], #4
 80069e2:	2340      	movs	r3, #64	; 0x40
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	f46f 5300 	mvn.w	r3, #8192	; 0x2000
 80069ea:	2200      	movs	r2, #0
 80069ec:	4906      	ldr	r1, [pc, #24]	; (8006a08 <_dwt_kick_dgc_on_wakeup+0x38>)
 80069ee:	f7ff ffcb 	bl	8006988 <dwt_modify32bitoffsetreg>
 80069f2:	e7f3      	b.n	80069dc <_dwt_kick_dgc_on_wakeup+0xc>
 80069f4:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 80069f8:	9300      	str	r3, [sp, #0]
 80069fa:	f46f 5300 	mvn.w	r3, #8192	; 0x2000
 80069fe:	2200      	movs	r2, #0
 8006a00:	4901      	ldr	r1, [pc, #4]	; (8006a08 <_dwt_kick_dgc_on_wakeup+0x38>)
 8006a02:	f7ff ffc1 	bl	8006988 <dwt_modify32bitoffsetreg>
 8006a06:	e7e9      	b.n	80069dc <_dwt_kick_dgc_on_wakeup+0xc>
 8006a08:	000b0008 	.word	0x000b0008

08006a0c <ull_enable_rf_tx>:
 8006a0c:	b570      	push	{r4, r5, r6, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	4604      	mov	r4, r0
 8006a12:	460e      	mov	r6, r1
 8006a14:	4d13      	ldr	r5, [pc, #76]	; (8006a64 <ull_enable_rf_tx+0x58>)
 8006a16:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 8006a1a:	9300      	str	r3, [sp, #0]
 8006a1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a20:	2200      	movs	r2, #0
 8006a22:	4629      	mov	r1, r5
 8006a24:	f7ff ffb0 	bl	8006988 <dwt_modify32bitoffsetreg>
 8006a28:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a32:	2200      	movs	r2, #0
 8006a34:	4629      	mov	r1, r5
 8006a36:	4620      	mov	r0, r4
 8006a38:	f7ff ffa6 	bl	8006988 <dwt_modify32bitoffsetreg>
 8006a3c:	4b0a      	ldr	r3, [pc, #40]	; (8006a68 <ull_enable_rf_tx+0x5c>)
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a44:	2200      	movs	r2, #0
 8006a46:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	f7ff ff9c 	bl	8006988 <dwt_modify32bitoffsetreg>
 8006a50:	b90e      	cbnz	r6, 8006a56 <ull_enable_rf_tx+0x4a>
 8006a52:	b002      	add	sp, #8
 8006a54:	bd70      	pop	{r4, r5, r6, pc}
 8006a56:	4b05      	ldr	r3, [pc, #20]	; (8006a6c <ull_enable_rf_tx+0x60>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	4905      	ldr	r1, [pc, #20]	; (8006a70 <ull_enable_rf_tx+0x64>)
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	f7ff fc01 	bl	8006264 <dwt_write32bitoffsetreg>
 8006a62:	e7f6      	b.n	8006a52 <ull_enable_rf_tx+0x46>
 8006a64:	00070048 	.word	0x00070048
 8006a68:	02003c00 	.word	0x02003c00
 8006a6c:	01011100 	.word	0x01011100
 8006a70:	00070014 	.word	0x00070014

08006a74 <ull_enable_rftx_blocks>:
 8006a74:	b500      	push	{lr}
 8006a76:	b083      	sub	sp, #12
 8006a78:	4b05      	ldr	r3, [pc, #20]	; (8006a90 <ull_enable_rftx_blocks+0x1c>)
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a80:	2200      	movs	r2, #0
 8006a82:	4904      	ldr	r1, [pc, #16]	; (8006a94 <ull_enable_rftx_blocks+0x20>)
 8006a84:	f7ff ff80 	bl	8006988 <dwt_modify32bitoffsetreg>
 8006a88:	b003      	add	sp, #12
 8006a8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a8e:	bf00      	nop
 8006a90:	02003c00 	.word	0x02003c00
 8006a94:	00070004 	.word	0x00070004

08006a98 <_dwt_otpprogword32>:
 8006a98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a9c:	b083      	sub	sp, #12
 8006a9e:	4604      	mov	r4, r0
 8006aa0:	460d      	mov	r5, r1
 8006aa2:	4617      	mov	r7, r2
 8006aa4:	4e56      	ldr	r6, [pc, #344]	; (8006c00 <_dwt_otpprogword32+0x168>)
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	4631      	mov	r1, r6
 8006aaa:	f7fe fe99 	bl	80057e0 <dwt_read32bitoffsetreg>
 8006aae:	4681      	mov	r9, r0
 8006ab0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006aba:	2200      	movs	r2, #0
 8006abc:	4631      	mov	r1, r6
 8006abe:	4620      	mov	r0, r4
 8006ac0:	f7ff ff62 	bl	8006988 <dwt_modify32bitoffsetreg>
 8006ac4:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8006c04 <_dwt_otpprogword32+0x16c>
 8006ac8:	2318      	movs	r3, #24
 8006aca:	2200      	movs	r2, #0
 8006acc:	4641      	mov	r1, r8
 8006ace:	4620      	mov	r0, r4
 8006ad0:	f7ff fac7 	bl	8006062 <dwt_write16bitoffsetreg>
 8006ad4:	2125      	movs	r1, #37	; 0x25
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	f7ff fb0a 	bl	80060f0 <__dwt_otp_write_wdata_id_reg>
 8006adc:	2102      	movs	r1, #2
 8006ade:	4620      	mov	r0, r4
 8006ae0:	f7ff fb06 	bl	80060f0 <__dwt_otp_write_wdata_id_reg>
 8006ae4:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 8006ae8:	4620      	mov	r0, r4
 8006aea:	f7ff fb01 	bl	80060f0 <__dwt_otp_write_wdata_id_reg>
 8006aee:	b2f9      	uxtb	r1, r7
 8006af0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006af4:	4620      	mov	r0, r4
 8006af6:	f7ff fafb 	bl	80060f0 <__dwt_otp_write_wdata_id_reg>
 8006afa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006afe:	4620      	mov	r0, r4
 8006b00:	f7ff faf6 	bl	80060f0 <__dwt_otp_write_wdata_id_reg>
 8006b04:	2100      	movs	r1, #0
 8006b06:	4620      	mov	r0, r4
 8006b08:	f7ff faf2 	bl	80060f0 <__dwt_otp_write_wdata_id_reg>
 8006b0c:	2102      	movs	r1, #2
 8006b0e:	4620      	mov	r0, r4
 8006b10:	f7ff faee 	bl	80060f0 <__dwt_otp_write_wdata_id_reg>
 8006b14:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8006b18:	4620      	mov	r0, r4
 8006b1a:	f7ff fae9 	bl	80060f0 <__dwt_otp_write_wdata_id_reg>
 8006b1e:	b2e9      	uxtb	r1, r5
 8006b20:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006b24:	4620      	mov	r0, r4
 8006b26:	f7ff fae3 	bl	80060f0 <__dwt_otp_write_wdata_id_reg>
 8006b2a:	f3c5 2107 	ubfx	r1, r5, #8, #8
 8006b2e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006b32:	4620      	mov	r0, r4
 8006b34:	f7ff fadc 	bl	80060f0 <__dwt_otp_write_wdata_id_reg>
 8006b38:	f3c5 4107 	ubfx	r1, r5, #16, #8
 8006b3c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006b40:	4620      	mov	r0, r4
 8006b42:	f7ff fad5 	bl	80060f0 <__dwt_otp_write_wdata_id_reg>
 8006b46:	0e29      	lsrs	r1, r5, #24
 8006b48:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	f7ff facf 	bl	80060f0 <__dwt_otp_write_wdata_id_reg>
 8006b52:	2100      	movs	r1, #0
 8006b54:	4620      	mov	r0, r4
 8006b56:	f7ff facb 	bl	80060f0 <__dwt_otp_write_wdata_id_reg>
 8006b5a:	213a      	movs	r1, #58	; 0x3a
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	f7ff fac7 	bl	80060f0 <__dwt_otp_write_wdata_id_reg>
 8006b62:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006b66:	4620      	mov	r0, r4
 8006b68:	f7ff fac2 	bl	80060f0 <__dwt_otp_write_wdata_id_reg>
 8006b6c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8006b70:	4620      	mov	r0, r4
 8006b72:	f7ff fabd 	bl	80060f0 <__dwt_otp_write_wdata_id_reg>
 8006b76:	2100      	movs	r1, #0
 8006b78:	4620      	mov	r0, r4
 8006b7a:	f7ff fab9 	bl	80060f0 <__dwt_otp_write_wdata_id_reg>
 8006b7e:	213a      	movs	r1, #58	; 0x3a
 8006b80:	4620      	mov	r0, r4
 8006b82:	f7ff fab5 	bl	80060f0 <__dwt_otp_write_wdata_id_reg>
 8006b86:	f240 1101 	movw	r1, #257	; 0x101
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	f7ff fab0 	bl	80060f0 <__dwt_otp_write_wdata_id_reg>
 8006b90:	2302      	movs	r3, #2
 8006b92:	2200      	movs	r2, #0
 8006b94:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8006b98:	4620      	mov	r0, r4
 8006b9a:	f7ff fa62 	bl	8006062 <dwt_write16bitoffsetreg>
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	f7ff fa5b 	bl	8006062 <dwt_write16bitoffsetreg>
 8006bac:	2002      	movs	r0, #2
 8006bae:	f7fa fcc5 	bl	800153c <deca_sleep>
 8006bb2:	213a      	movs	r1, #58	; 0x3a
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	f7ff fa9b 	bl	80060f0 <__dwt_otp_write_wdata_id_reg>
 8006bba:	f44f 7181 	mov.w	r1, #258	; 0x102
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	f7ff fa96 	bl	80060f0 <__dwt_otp_write_wdata_id_reg>
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8006bcc:	4620      	mov	r0, r4
 8006bce:	f7ff fa48 	bl	8006062 <dwt_write16bitoffsetreg>
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8006bda:	4620      	mov	r0, r4
 8006bdc:	f7ff fa41 	bl	8006062 <dwt_write16bitoffsetreg>
 8006be0:	2300      	movs	r3, #0
 8006be2:	461a      	mov	r2, r3
 8006be4:	4641      	mov	r1, r8
 8006be6:	4620      	mov	r0, r4
 8006be8:	f7ff fa3b 	bl	8006062 <dwt_write16bitoffsetreg>
 8006bec:	464b      	mov	r3, r9
 8006bee:	2200      	movs	r2, #0
 8006bf0:	4631      	mov	r1, r6
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	f7ff fb36 	bl	8006264 <dwt_write32bitoffsetreg>
 8006bf8:	b003      	add	sp, #12
 8006bfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006bfe:	bf00      	nop
 8006c00:	00070044 	.word	0x00070044
 8006c04:	000b0008 	.word	0x000b0008

08006c08 <ull_setgpiomode>:
 8006c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	2400      	movs	r4, #0
 8006c0e:	4623      	mov	r3, r4
 8006c10:	2601      	movs	r6, #1
 8006c12:	2707      	movs	r7, #7
 8006c14:	e002      	b.n	8006c1c <ull_setgpiomode+0x14>
 8006c16:	3401      	adds	r4, #1
 8006c18:	2c09      	cmp	r4, #9
 8006c1a:	d009      	beq.n	8006c30 <ull_setgpiomode+0x28>
 8006c1c:	fa06 f504 	lsl.w	r5, r6, r4
 8006c20:	420d      	tst	r5, r1
 8006c22:	d0f8      	beq.n	8006c16 <ull_setgpiomode+0xe>
 8006c24:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8006c28:	fa07 f505 	lsl.w	r5, r7, r5
 8006c2c:	432b      	orrs	r3, r5
 8006c2e:	e7f2      	b.n	8006c16 <ull_setgpiomode+0xe>
 8006c30:	401a      	ands	r2, r3
 8006c32:	9200      	str	r2, [sp, #0]
 8006c34:	43db      	mvns	r3, r3
 8006c36:	2200      	movs	r2, #0
 8006c38:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8006c3c:	f7ff fea4 	bl	8006988 <dwt_modify32bitoffsetreg>
 8006c40:	b003      	add	sp, #12
 8006c42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006c44 <ull_setinterrupt>:
 8006c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c48:	b082      	sub	sp, #8
 8006c4a:	4604      	mov	r4, r0
 8006c4c:	4688      	mov	r8, r1
 8006c4e:	4617      	mov	r7, r2
 8006c50:	461d      	mov	r5, r3
 8006c52:	f7fa fc55 	bl	8001500 <decamutexon>
 8006c56:	4606      	mov	r6, r0
 8006c58:	2d02      	cmp	r5, #2
 8006c5a:	d02d      	beq.n	8006cb8 <ull_setinterrupt+0x74>
 8006c5c:	2d01      	cmp	r5, #1
 8006c5e:	d038      	beq.n	8006cd2 <ull_setinterrupt+0x8e>
 8006c60:	2500      	movs	r5, #0
 8006c62:	9500      	str	r5, [sp, #0]
 8006c64:	ea6f 0308 	mvn.w	r3, r8
 8006c68:	462a      	mov	r2, r5
 8006c6a:	213c      	movs	r1, #60	; 0x3c
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	f7ff fe8b 	bl	8006988 <dwt_modify32bitoffsetreg>
 8006c72:	9500      	str	r5, [sp, #0]
 8006c74:	43fb      	mvns	r3, r7
 8006c76:	462a      	mov	r2, r5
 8006c78:	2140      	movs	r1, #64	; 0x40
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	f7ff fe84 	bl	8006988 <dwt_modify32bitoffsetreg>
 8006c80:	2200      	movs	r2, #0
 8006c82:	213c      	movs	r1, #60	; 0x3c
 8006c84:	4620      	mov	r0, r4
 8006c86:	f7fe fdab 	bl	80057e0 <dwt_read32bitoffsetreg>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	2144      	movs	r1, #68	; 0x44
 8006c90:	4620      	mov	r0, r4
 8006c92:	f7ff fae7 	bl	8006264 <dwt_write32bitoffsetreg>
 8006c96:	2200      	movs	r2, #0
 8006c98:	2140      	movs	r1, #64	; 0x40
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	f7fe fda0 	bl	80057e0 <dwt_read32bitoffsetreg>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	2148      	movs	r1, #72	; 0x48
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	f7ff fadc 	bl	8006264 <dwt_write32bitoffsetreg>
 8006cac:	4630      	mov	r0, r6
 8006cae:	f7fa fc38 	bl	8001522 <decamutexoff>
 8006cb2:	b002      	add	sp, #8
 8006cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cb8:	4643      	mov	r3, r8
 8006cba:	2200      	movs	r2, #0
 8006cbc:	213c      	movs	r1, #60	; 0x3c
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	f7ff fad0 	bl	8006264 <dwt_write32bitoffsetreg>
 8006cc4:	463b      	mov	r3, r7
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	2140      	movs	r1, #64	; 0x40
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f7ff faca 	bl	8006264 <dwt_write32bitoffsetreg>
 8006cd0:	e7d6      	b.n	8006c80 <ull_setinterrupt+0x3c>
 8006cd2:	f8cd 8000 	str.w	r8, [sp]
 8006cd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cda:	2200      	movs	r2, #0
 8006cdc:	213c      	movs	r1, #60	; 0x3c
 8006cde:	4620      	mov	r0, r4
 8006ce0:	f7ff fe52 	bl	8006988 <dwt_modify32bitoffsetreg>
 8006ce4:	9700      	str	r7, [sp, #0]
 8006ce6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cea:	2200      	movs	r2, #0
 8006cec:	2140      	movs	r1, #64	; 0x40
 8006cee:	4620      	mov	r0, r4
 8006cf0:	f7ff fe4a 	bl	8006988 <dwt_modify32bitoffsetreg>
 8006cf4:	e7c4      	b.n	8006c80 <ull_setinterrupt+0x3c>
	...

08006cf8 <ull_writetxfctrl>:
 8006cf8:	b510      	push	{r4, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	4604      	mov	r4, r0
 8006cfe:	2a7f      	cmp	r2, #127	; 0x7f
 8006d00:	d912      	bls.n	8006d28 <ull_writetxfctrl+0x30>
 8006d02:	3280      	adds	r2, #128	; 0x80
 8006d04:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 8006d08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006d0c:	9100      	str	r1, [sp, #0]
 8006d0e:	4b0c      	ldr	r3, [pc, #48]	; (8006d40 <ull_writetxfctrl+0x48>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	2124      	movs	r1, #36	; 0x24
 8006d14:	f7ff fe38 	bl	8006988 <dwt_modify32bitoffsetreg>
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f7fe fd86 	bl	8005830 <dwt_read8bitoffsetreg>
 8006d24:	b002      	add	sp, #8
 8006d26:	bd10      	pop	{r4, pc}
 8006d28:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 8006d2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006d30:	9100      	str	r1, [sp, #0]
 8006d32:	4b03      	ldr	r3, [pc, #12]	; (8006d40 <ull_writetxfctrl+0x48>)
 8006d34:	2200      	movs	r2, #0
 8006d36:	2124      	movs	r1, #36	; 0x24
 8006d38:	f7ff fe26 	bl	8006988 <dwt_modify32bitoffsetreg>
 8006d3c:	e7f2      	b.n	8006d24 <ull_writetxfctrl+0x2c>
 8006d3e:	bf00      	nop
 8006d40:	fc00f400 	.word	0xfc00f400

08006d44 <prs_sys_status_and_or>:
 8006d44:	b500      	push	{lr}
 8006d46:	b083      	sub	sp, #12
 8006d48:	9200      	str	r2, [sp, #0]
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	2144      	movs	r1, #68	; 0x44
 8006d50:	f7ff fe1a 	bl	8006988 <dwt_modify32bitoffsetreg>
 8006d54:	2000      	movs	r0, #0
 8006d56:	b003      	add	sp, #12
 8006d58:	f85d fb04 	ldr.w	pc, [sp], #4

08006d5c <dwt_modify8bitoffsetreg>:
 8006d5c:	b500      	push	{lr}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	f88d 300c 	strb.w	r3, [sp, #12]
 8006d64:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8006d68:	f88d 300d 	strb.w	r3, [sp, #13]
 8006d6c:	f248 0301 	movw	r3, #32769	; 0x8001
 8006d70:	9301      	str	r3, [sp, #4]
 8006d72:	ab03      	add	r3, sp, #12
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	2302      	movs	r3, #2
 8006d78:	b292      	uxth	r2, r2
 8006d7a:	f7fe fca4 	bl	80056c6 <dwt_xfer3xxx>
 8006d7e:	b005      	add	sp, #20
 8006d80:	f85d fb04 	ldr.w	pc, [sp], #4

08006d84 <ull_configciadiag>:
 8006d84:	b530      	push	{r4, r5, lr}
 8006d86:	b083      	sub	sp, #12
 8006d88:	4604      	mov	r4, r0
 8006d8a:	460d      	mov	r5, r1
 8006d8c:	f011 0f01 	tst.w	r1, #1
 8006d90:	d015      	beq.n	8006dbe <ull_configciadiag+0x3a>
 8006d92:	2300      	movs	r3, #0
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	23ef      	movs	r3, #239	; 0xef
 8006d98:	2202      	movs	r2, #2
 8006d9a:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8006d9e:	f7ff ffdd 	bl	8006d5c <dwt_modify8bitoffsetreg>
 8006da2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006da4:	761d      	strb	r5, [r3, #24]
 8006da6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006da8:	7e1b      	ldrb	r3, [r3, #24]
 8006daa:	085b      	lsrs	r3, r3, #1
 8006dac:	d010      	beq.n	8006dd0 <ull_configciadiag+0x4c>
 8006dae:	086b      	lsrs	r3, r5, #1
 8006db0:	2200      	movs	r2, #0
 8006db2:	490e      	ldr	r1, [pc, #56]	; (8006dec <ull_configciadiag+0x68>)
 8006db4:	4620      	mov	r0, r4
 8006db6:	f7ff f902 	bl	8005fbe <dwt_write8bitoffsetreg>
 8006dba:	b003      	add	sp, #12
 8006dbc:	bd30      	pop	{r4, r5, pc}
 8006dbe:	2310      	movs	r3, #16
 8006dc0:	9300      	str	r3, [sp, #0]
 8006dc2:	23ff      	movs	r3, #255	; 0xff
 8006dc4:	2202      	movs	r2, #2
 8006dc6:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8006dca:	f7ff ffc7 	bl	8006d5c <dwt_modify8bitoffsetreg>
 8006dce:	e7e8      	b.n	8006da2 <ull_configciadiag+0x1e>
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	9300      	str	r3, [sp, #0]
 8006dd4:	23ff      	movs	r3, #255	; 0xff
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	4904      	ldr	r1, [pc, #16]	; (8006dec <ull_configciadiag+0x68>)
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f7ff ffbe 	bl	8006d5c <dwt_modify8bitoffsetreg>
 8006de0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006de2:	7e13      	ldrb	r3, [r2, #24]
 8006de4:	f043 0302 	orr.w	r3, r3, #2
 8006de8:	7613      	strb	r3, [r2, #24]
 8006dea:	e7e6      	b.n	8006dba <ull_configciadiag+0x36>
 8006dec:	00010028 	.word	0x00010028

08006df0 <ull_calcbandwidthadj>:
 8006df0:	b570      	push	{r4, r5, r6, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	4604      	mov	r4, r0
 8006df6:	460d      	mov	r5, r1
 8006df8:	2101      	movs	r1, #1
 8006dfa:	f7ff f963 	bl	80060c4 <ull_force_clocks>
 8006dfe:	2100      	movs	r1, #0
 8006e00:	4620      	mov	r0, r4
 8006e02:	f7ff fe03 	bl	8006a0c <ull_enable_rf_tx>
 8006e06:	4620      	mov	r0, r4
 8006e08:	f7ff fe34 	bl	8006a74 <ull_enable_rftx_blocks>
 8006e0c:	f3c5 030b 	ubfx	r3, r5, #0, #12
 8006e10:	2200      	movs	r2, #0
 8006e12:	4915      	ldr	r1, [pc, #84]	; (8006e68 <ull_calcbandwidthadj+0x78>)
 8006e14:	4620      	mov	r0, r4
 8006e16:	f7ff f924 	bl	8006062 <dwt_write16bitoffsetreg>
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	23ff      	movs	r3, #255	; 0xff
 8006e20:	2200      	movs	r2, #0
 8006e22:	4912      	ldr	r1, [pc, #72]	; (8006e6c <ull_calcbandwidthadj+0x7c>)
 8006e24:	4620      	mov	r0, r4
 8006e26:	f7ff ff99 	bl	8006d5c <dwt_modify8bitoffsetreg>
 8006e2a:	4e10      	ldr	r6, [pc, #64]	; (8006e6c <ull_calcbandwidthadj+0x7c>)
 8006e2c:	2500      	movs	r5, #0
 8006e2e:	462a      	mov	r2, r5
 8006e30:	4631      	mov	r1, r6
 8006e32:	4620      	mov	r0, r4
 8006e34:	f7fe fcfc 	bl	8005830 <dwt_read8bitoffsetreg>
 8006e38:	f010 0f01 	tst.w	r0, #1
 8006e3c:	d1f7      	bne.n	8006e2e <ull_calcbandwidthadj+0x3e>
 8006e3e:	4620      	mov	r0, r4
 8006e40:	f7ff fcae 	bl	80067a0 <ull_disable_rftx_blocks>
 8006e44:	2100      	movs	r1, #0
 8006e46:	4620      	mov	r0, r4
 8006e48:	f7ff fcb4 	bl	80067b4 <ull_disable_rf_tx>
 8006e4c:	2105      	movs	r1, #5
 8006e4e:	4620      	mov	r0, r4
 8006e50:	f7ff f938 	bl	80060c4 <ull_force_clocks>
 8006e54:	2200      	movs	r2, #0
 8006e56:	4906      	ldr	r1, [pc, #24]	; (8006e70 <ull_calcbandwidthadj+0x80>)
 8006e58:	4620      	mov	r0, r4
 8006e5a:	f7fe fce9 	bl	8005830 <dwt_read8bitoffsetreg>
 8006e5e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8006e62:	b002      	add	sp, #8
 8006e64:	bd70      	pop	{r4, r5, r6, pc}
 8006e66:	bf00      	nop
 8006e68:	0008001c 	.word	0x0008001c
 8006e6c:	00080010 	.word	0x00080010
 8006e70:	0007001c 	.word	0x0007001c

08006e74 <ull_configuretxrf>:
 8006e74:	b538      	push	{r3, r4, r5, lr}
 8006e76:	4605      	mov	r5, r0
 8006e78:	460c      	mov	r4, r1
 8006e7a:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 8006e7e:	b149      	cbz	r1, 8006e94 <ull_configuretxrf+0x20>
 8006e80:	f7ff ffb6 	bl	8006df0 <ull_calcbandwidthadj>
 8006e84:	f8d4 3001 	ldr.w	r3, [r4, #1]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	4905      	ldr	r1, [pc, #20]	; (8006ea0 <ull_configuretxrf+0x2c>)
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	f7ff f9e9 	bl	8006264 <dwt_write32bitoffsetreg>
 8006e92:	bd38      	pop	{r3, r4, r5, pc}
 8006e94:	7823      	ldrb	r3, [r4, #0]
 8006e96:	2200      	movs	r2, #0
 8006e98:	4902      	ldr	r1, [pc, #8]	; (8006ea4 <ull_configuretxrf+0x30>)
 8006e9a:	f7ff f890 	bl	8005fbe <dwt_write8bitoffsetreg>
 8006e9e:	e7f1      	b.n	8006e84 <ull_configuretxrf+0x10>
 8006ea0:	0001000c 	.word	0x0001000c
 8006ea4:	0007001c 	.word	0x0007001c

08006ea8 <ull_repeated_frames>:
 8006ea8:	b530      	push	{r4, r5, lr}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	4604      	mov	r4, r0
 8006eae:	460d      	mov	r5, r1
 8006eb0:	2310      	movs	r3, #16
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	23ff      	movs	r3, #255	; 0xff
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	4906      	ldr	r1, [pc, #24]	; (8006ed4 <ull_repeated_frames+0x2c>)
 8006eba:	f7ff ff4f 	bl	8006d5c <dwt_modify8bitoffsetreg>
 8006ebe:	462b      	mov	r3, r5
 8006ec0:	2d02      	cmp	r5, #2
 8006ec2:	bf38      	it	cc
 8006ec4:	2302      	movcc	r3, #2
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	212c      	movs	r1, #44	; 0x2c
 8006eca:	4620      	mov	r0, r4
 8006ecc:	f7ff f9ca 	bl	8006264 <dwt_write32bitoffsetreg>
 8006ed0:	b003      	add	sp, #12
 8006ed2:	bd30      	pop	{r4, r5, pc}
 8006ed4:	000f0024 	.word	0x000f0024

08006ed8 <ull_setdwstate>:
 8006ed8:	b530      	push	{r4, r5, lr}
 8006eda:	b083      	sub	sp, #12
 8006edc:	4604      	mov	r4, r0
 8006ede:	2901      	cmp	r1, #1
 8006ee0:	d01d      	beq.n	8006f1e <ull_setdwstate+0x46>
 8006ee2:	2902      	cmp	r1, #2
 8006ee4:	d030      	beq.n	8006f48 <ull_setdwstate+0x70>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	23ff      	movs	r3, #255	; 0xff
 8006eec:	2200      	movs	r2, #0
 8006eee:	4926      	ldr	r1, [pc, #152]	; (8006f88 <ull_setdwstate+0xb0>)
 8006ef0:	f7ff ff34 	bl	8006d5c <dwt_modify8bitoffsetreg>
 8006ef4:	4d25      	ldr	r5, [pc, #148]	; (8006f8c <ull_setdwstate+0xb4>)
 8006ef6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006efa:	9300      	str	r3, [sp, #0]
 8006efc:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8006f00:	2200      	movs	r2, #0
 8006f02:	4629      	mov	r1, r5
 8006f04:	4620      	mov	r0, r4
 8006f06:	f7ff fd3f 	bl	8006988 <dwt_modify32bitoffsetreg>
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	237f      	movs	r3, #127	; 0x7f
 8006f10:	2202      	movs	r2, #2
 8006f12:	4629      	mov	r1, r5
 8006f14:	4620      	mov	r0, r4
 8006f16:	f7ff ff21 	bl	8006d5c <dwt_modify8bitoffsetreg>
 8006f1a:	b003      	add	sp, #12
 8006f1c:	bd30      	pop	{r4, r5, pc}
 8006f1e:	2105      	movs	r1, #5
 8006f20:	f7ff f8d0 	bl	80060c4 <ull_force_clocks>
 8006f24:	f44f 7381 	mov.w	r3, #258	; 0x102
 8006f28:	9300      	str	r3, [sp, #0]
 8006f2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f2e:	2200      	movs	r2, #0
 8006f30:	4917      	ldr	r1, [pc, #92]	; (8006f90 <ull_setdwstate+0xb8>)
 8006f32:	4620      	mov	r0, r4
 8006f34:	f7ff fd28 	bl	8006988 <dwt_modify32bitoffsetreg>
 8006f38:	2201      	movs	r2, #1
 8006f3a:	9200      	str	r2, [sp, #0]
 8006f3c:	23ff      	movs	r3, #255	; 0xff
 8006f3e:	4913      	ldr	r1, [pc, #76]	; (8006f8c <ull_setdwstate+0xb4>)
 8006f40:	4620      	mov	r0, r4
 8006f42:	f7ff ff0b 	bl	8006d5c <dwt_modify8bitoffsetreg>
 8006f46:	e7e8      	b.n	8006f1a <ull_setdwstate+0x42>
 8006f48:	2303      	movs	r3, #3
 8006f4a:	9300      	str	r3, [sp, #0]
 8006f4c:	23ff      	movs	r3, #255	; 0xff
 8006f4e:	2200      	movs	r2, #0
 8006f50:	490d      	ldr	r1, [pc, #52]	; (8006f88 <ull_setdwstate+0xb0>)
 8006f52:	f7ff ff03 	bl	8006d5c <dwt_modify8bitoffsetreg>
 8006f56:	4d0d      	ldr	r5, [pc, #52]	; (8006f8c <ull_setdwstate+0xb4>)
 8006f58:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8006f62:	2200      	movs	r2, #0
 8006f64:	4629      	mov	r1, r5
 8006f66:	4620      	mov	r0, r4
 8006f68:	f7ff fd0e 	bl	8006988 <dwt_modify32bitoffsetreg>
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	9300      	str	r3, [sp, #0]
 8006f70:	237f      	movs	r3, #127	; 0x7f
 8006f72:	2202      	movs	r2, #2
 8006f74:	4629      	mov	r1, r5
 8006f76:	4620      	mov	r0, r4
 8006f78:	f7ff fef0 	bl	8006d5c <dwt_modify8bitoffsetreg>
 8006f7c:	2105      	movs	r1, #5
 8006f7e:	4620      	mov	r0, r4
 8006f80:	f7ff f8a0 	bl	80060c4 <ull_force_clocks>
 8006f84:	e7c9      	b.n	8006f1a <ull_setdwstate+0x42>
 8006f86:	bf00      	nop
 8006f88:	00110004 	.word	0x00110004
 8006f8c:	00110008 	.word	0x00110008
 8006f90:	00090008 	.word	0x00090008

08006f94 <ull_configureframefilter>:
 8006f94:	b530      	push	{r4, r5, lr}
 8006f96:	b083      	sub	sp, #12
 8006f98:	4605      	mov	r5, r0
 8006f9a:	2902      	cmp	r1, #2
 8006f9c:	d00e      	beq.n	8006fbc <ull_configureframefilter+0x28>
 8006f9e:	2400      	movs	r4, #0
 8006fa0:	9400      	str	r4, [sp, #0]
 8006fa2:	23fe      	movs	r3, #254	; 0xfe
 8006fa4:	4622      	mov	r2, r4
 8006fa6:	2110      	movs	r1, #16
 8006fa8:	f7ff fed8 	bl	8006d5c <dwt_modify8bitoffsetreg>
 8006fac:	4623      	mov	r3, r4
 8006fae:	4622      	mov	r2, r4
 8006fb0:	2114      	movs	r1, #20
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	f7ff f855 	bl	8006062 <dwt_write16bitoffsetreg>
 8006fb8:	b003      	add	sp, #12
 8006fba:	bd30      	pop	{r4, r5, pc}
 8006fbc:	4614      	mov	r4, r2
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	9300      	str	r3, [sp, #0]
 8006fc2:	23ff      	movs	r3, #255	; 0xff
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	2110      	movs	r1, #16
 8006fc8:	f7ff fec8 	bl	8006d5c <dwt_modify8bitoffsetreg>
 8006fcc:	4623      	mov	r3, r4
 8006fce:	2200      	movs	r2, #0
 8006fd0:	2114      	movs	r1, #20
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	f7ff f845 	bl	8006062 <dwt_write16bitoffsetreg>
 8006fd8:	e7ee      	b.n	8006fb8 <ull_configureframefilter+0x24>
	...

08006fdc <ull_run_pgfcal>:
 8006fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fe0:	b082      	sub	sp, #8
 8006fe2:	4605      	mov	r5, r0
 8006fe4:	4c29      	ldr	r4, [pc, #164]	; (800708c <ull_run_pgfcal+0xb0>)
 8006fe6:	4b2a      	ldr	r3, [pc, #168]	; (8007090 <ull_run_pgfcal+0xb4>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	4621      	mov	r1, r4
 8006fec:	f7ff f93a 	bl	8006264 <dwt_write32bitoffsetreg>
 8006ff0:	2310      	movs	r3, #16
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	23ff      	movs	r3, #255	; 0xff
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	4621      	mov	r1, r4
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	f7ff feae 	bl	8006d5c <dwt_modify8bitoffsetreg>
 8007000:	2403      	movs	r4, #3
 8007002:	f04f 0814 	mov.w	r8, #20
 8007006:	4f23      	ldr	r7, [pc, #140]	; (8007094 <ull_run_pgfcal+0xb8>)
 8007008:	2600      	movs	r6, #0
 800700a:	4640      	mov	r0, r8
 800700c:	f7fa faa1 	bl	8001552 <deca_usleep>
 8007010:	4632      	mov	r2, r6
 8007012:	4639      	mov	r1, r7
 8007014:	4628      	mov	r0, r5
 8007016:	f7fe fc0b 	bl	8005830 <dwt_read8bitoffsetreg>
 800701a:	2801      	cmp	r0, #1
 800701c:	d034      	beq.n	8007088 <ull_run_pgfcal+0xac>
 800701e:	1e63      	subs	r3, r4, #1
 8007020:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8007024:	d1f1      	bne.n	800700a <ull_run_pgfcal+0x2e>
 8007026:	f06f 0402 	mvn.w	r4, #2
 800702a:	4e18      	ldr	r6, [pc, #96]	; (800708c <ull_run_pgfcal+0xb0>)
 800702c:	2300      	movs	r3, #0
 800702e:	461a      	mov	r2, r3
 8007030:	4631      	mov	r1, r6
 8007032:	4628      	mov	r0, r5
 8007034:	f7fe ffc3 	bl	8005fbe <dwt_write8bitoffsetreg>
 8007038:	2301      	movs	r3, #1
 800703a:	2200      	movs	r2, #0
 800703c:	4915      	ldr	r1, [pc, #84]	; (8007094 <ull_run_pgfcal+0xb8>)
 800703e:	4628      	mov	r0, r5
 8007040:	f7fe ffbd 	bl	8005fbe <dwt_write8bitoffsetreg>
 8007044:	2301      	movs	r3, #1
 8007046:	9300      	str	r3, [sp, #0]
 8007048:	23ff      	movs	r3, #255	; 0xff
 800704a:	2202      	movs	r2, #2
 800704c:	4631      	mov	r1, r6
 800704e:	4628      	mov	r0, r5
 8007050:	f7ff fe84 	bl	8006d5c <dwt_modify8bitoffsetreg>
 8007054:	2200      	movs	r2, #0
 8007056:	4910      	ldr	r1, [pc, #64]	; (8007098 <ull_run_pgfcal+0xbc>)
 8007058:	4628      	mov	r0, r5
 800705a:	f7fe fbc1 	bl	80057e0 <dwt_read32bitoffsetreg>
 800705e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8007062:	4298      	cmp	r0, r3
 8007064:	bf08      	it	eq
 8007066:	f06f 0403 	mvneq.w	r4, #3
 800706a:	2200      	movs	r2, #0
 800706c:	490b      	ldr	r1, [pc, #44]	; (800709c <ull_run_pgfcal+0xc0>)
 800706e:	4628      	mov	r0, r5
 8007070:	f7fe fbb6 	bl	80057e0 <dwt_read32bitoffsetreg>
 8007074:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8007078:	4298      	cmp	r0, r3
 800707a:	bf14      	ite	ne
 800707c:	4620      	movne	r0, r4
 800707e:	f06f 0004 	mvneq.w	r0, #4
 8007082:	b002      	add	sp, #8
 8007084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007088:	2400      	movs	r4, #0
 800708a:	e7ce      	b.n	800702a <ull_run_pgfcal+0x4e>
 800708c:	0004000c 	.word	0x0004000c
 8007090:	00020001 	.word	0x00020001
 8007094:	00040020 	.word	0x00040020
 8007098:	00040014 	.word	0x00040014
 800709c:	0004001c 	.word	0x0004001c

080070a0 <prs_ack_enable>:
 80070a0:	b500      	push	{lr}
 80070a2:	b083      	sub	sp, #12
 80070a4:	2900      	cmp	r1, #0
 80070a6:	bf0b      	itete	eq
 80070a8:	23ff      	moveq	r3, #255	; 0xff
 80070aa:	23f7      	movne	r3, #247	; 0xf7
 80070ac:	2200      	moveq	r2, #0
 80070ae:	2208      	movne	r2, #8
 80070b0:	9200      	str	r2, [sp, #0]
 80070b2:	2201      	movs	r2, #1
 80070b4:	2110      	movs	r1, #16
 80070b6:	f7ff fe51 	bl	8006d5c <dwt_modify8bitoffsetreg>
 80070ba:	b003      	add	sp, #12
 80070bc:	f85d fb04 	ldr.w	pc, [sp], #4

080070c0 <dwt_modify16bitoffsetreg>:
 80070c0:	b510      	push	{r4, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 80070c8:	f88d 300c 	strb.w	r3, [sp, #12]
 80070cc:	0a1b      	lsrs	r3, r3, #8
 80070ce:	f88d 300d 	strb.w	r3, [sp, #13]
 80070d2:	f88d 400e 	strb.w	r4, [sp, #14]
 80070d6:	0a24      	lsrs	r4, r4, #8
 80070d8:	f88d 400f 	strb.w	r4, [sp, #15]
 80070dc:	f248 0302 	movw	r3, #32770	; 0x8002
 80070e0:	9301      	str	r3, [sp, #4]
 80070e2:	ab03      	add	r3, sp, #12
 80070e4:	9300      	str	r3, [sp, #0]
 80070e6:	2304      	movs	r3, #4
 80070e8:	b292      	uxth	r2, r2
 80070ea:	f7fe faec 	bl	80056c6 <dwt_xfer3xxx>
 80070ee:	b004      	add	sp, #16
 80070f0:	bd10      	pop	{r4, pc}
	...

080070f4 <_dwt_prog_ldo_and_bias_tune>:
 80070f4:	b510      	push	{r4, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	4604      	mov	r4, r0
 80070fa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007104:	2200      	movs	r2, #0
 8007106:	4907      	ldr	r1, [pc, #28]	; (8007124 <_dwt_prog_ldo_and_bias_tune+0x30>)
 8007108:	f7ff ffda 	bl	80070c0 <dwt_modify16bitoffsetreg>
 800710c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800710e:	7a1b      	ldrb	r3, [r3, #8]
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8007116:	2200      	movs	r2, #0
 8007118:	4903      	ldr	r1, [pc, #12]	; (8007128 <_dwt_prog_ldo_and_bias_tune+0x34>)
 800711a:	4620      	mov	r0, r4
 800711c:	f7ff ffd0 	bl	80070c0 <dwt_modify16bitoffsetreg>
 8007120:	b002      	add	sp, #8
 8007122:	bd10      	pop	{r4, pc}
 8007124:	000b0008 	.word	0x000b0008
 8007128:	0011001f 	.word	0x0011001f

0800712c <ull_setleds>:
 800712c:	b530      	push	{r4, r5, lr}
 800712e:	b083      	sub	sp, #12
 8007130:	4604      	mov	r4, r0
 8007132:	f011 0f01 	tst.w	r1, #1
 8007136:	d01f      	beq.n	8007178 <ull_setleds+0x4c>
 8007138:	460d      	mov	r5, r1
 800713a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800713e:	9300      	str	r3, [sp, #0]
 8007140:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 8007144:	2200      	movs	r2, #0
 8007146:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800714a:	f7ff fc1d 	bl	8006988 <dwt_modify32bitoffsetreg>
 800714e:	f44f 0304 	mov.w	r3, #8650752	; 0x840000
 8007152:	9300      	str	r3, [sp, #0]
 8007154:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007158:	2200      	movs	r2, #0
 800715a:	4918      	ldr	r1, [pc, #96]	; (80071bc <ull_setleds+0x90>)
 800715c:	4620      	mov	r0, r4
 800715e:	f7ff fc13 	bl	8006988 <dwt_modify32bitoffsetreg>
 8007162:	f015 0f02 	tst.w	r5, #2
 8007166:	d11a      	bne.n	800719e <ull_setleds+0x72>
 8007168:	f44f 7388 	mov.w	r3, #272	; 0x110
 800716c:	2200      	movs	r2, #0
 800716e:	4914      	ldr	r1, [pc, #80]	; (80071c0 <ull_setleds+0x94>)
 8007170:	4620      	mov	r0, r4
 8007172:	f7ff f877 	bl	8006264 <dwt_write32bitoffsetreg>
 8007176:	e010      	b.n	800719a <ull_setleds+0x6e>
 8007178:	2500      	movs	r5, #0
 800717a:	9500      	str	r5, [sp, #0]
 800717c:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 8007180:	462a      	mov	r2, r5
 8007182:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8007186:	f7ff fbff 	bl	8006988 <dwt_modify32bitoffsetreg>
 800718a:	9500      	str	r5, [sp, #0]
 800718c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8007190:	462a      	mov	r2, r5
 8007192:	490b      	ldr	r1, [pc, #44]	; (80071c0 <ull_setleds+0x94>)
 8007194:	4620      	mov	r0, r4
 8007196:	f7ff ff93 	bl	80070c0 <dwt_modify16bitoffsetreg>
 800719a:	b003      	add	sp, #12
 800719c:	bd30      	pop	{r4, r5, pc}
 800719e:	4d08      	ldr	r5, [pc, #32]	; (80071c0 <ull_setleds+0x94>)
 80071a0:	4b08      	ldr	r3, [pc, #32]	; (80071c4 <ull_setleds+0x98>)
 80071a2:	2200      	movs	r2, #0
 80071a4:	4629      	mov	r1, r5
 80071a6:	4620      	mov	r0, r4
 80071a8:	f7ff f85c 	bl	8006264 <dwt_write32bitoffsetreg>
 80071ac:	f44f 7388 	mov.w	r3, #272	; 0x110
 80071b0:	2200      	movs	r2, #0
 80071b2:	4629      	mov	r1, r5
 80071b4:	4620      	mov	r0, r4
 80071b6:	f7ff f855 	bl	8006264 <dwt_write32bitoffsetreg>
 80071ba:	e7ee      	b.n	800719a <ull_setleds+0x6e>
 80071bc:	00110004 	.word	0x00110004
 80071c0:	00110016 	.word	0x00110016
 80071c4:	000f0110 	.word	0x000f0110

080071c8 <ull_pgf_cal>:
 80071c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071ca:	b083      	sub	sp, #12
 80071cc:	4604      	mov	r4, r0
 80071ce:	2901      	cmp	r1, #1
 80071d0:	d009      	beq.n	80071e6 <ull_pgf_cal+0x1e>
 80071d2:	2014      	movs	r0, #20
 80071d4:	f7fa f9bd 	bl	8001552 <deca_usleep>
 80071d8:	4620      	mov	r0, r4
 80071da:	f7ff feff 	bl	8006fdc <ull_run_pgfcal>
 80071de:	4605      	mov	r5, r0
 80071e0:	4628      	mov	r0, r5
 80071e2:	b003      	add	sp, #12
 80071e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071e6:	4e0f      	ldr	r6, [pc, #60]	; (8007224 <ull_pgf_cal+0x5c>)
 80071e8:	2200      	movs	r2, #0
 80071ea:	4631      	mov	r1, r6
 80071ec:	f7fe fb0e 	bl	800580c <dwt_read16bitoffsetreg>
 80071f0:	4607      	mov	r7, r0
 80071f2:	f240 1305 	movw	r3, #261	; 0x105
 80071f6:	9300      	str	r3, [sp, #0]
 80071f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80071fc:	2200      	movs	r2, #0
 80071fe:	4631      	mov	r1, r6
 8007200:	4620      	mov	r0, r4
 8007202:	f7ff ff5d 	bl	80070c0 <dwt_modify16bitoffsetreg>
 8007206:	2014      	movs	r0, #20
 8007208:	f7fa f9a3 	bl	8001552 <deca_usleep>
 800720c:	4620      	mov	r0, r4
 800720e:	f7ff fee5 	bl	8006fdc <ull_run_pgfcal>
 8007212:	4605      	mov	r5, r0
 8007214:	2200      	movs	r2, #0
 8007216:	9200      	str	r2, [sp, #0]
 8007218:	463b      	mov	r3, r7
 800721a:	4631      	mov	r1, r6
 800721c:	4620      	mov	r0, r4
 800721e:	f7ff ff4f 	bl	80070c0 <dwt_modify16bitoffsetreg>
 8007222:	e7dd      	b.n	80071e0 <ull_pgf_cal+0x18>
 8007224:	00070048 	.word	0x00070048

08007228 <ull_setgpiovalue>:
 8007228:	b500      	push	{lr}
 800722a:	b083      	sub	sp, #12
 800722c:	2a01      	cmp	r2, #1
 800722e:	d009      	beq.n	8007244 <ull_setgpiovalue+0x1c>
 8007230:	43cb      	mvns	r3, r1
 8007232:	2200      	movs	r2, #0
 8007234:	9200      	str	r2, [sp, #0]
 8007236:	b29b      	uxth	r3, r3
 8007238:	4906      	ldr	r1, [pc, #24]	; (8007254 <ull_setgpiovalue+0x2c>)
 800723a:	f7ff ff41 	bl	80070c0 <dwt_modify16bitoffsetreg>
 800723e:	b003      	add	sp, #12
 8007240:	f85d fb04 	ldr.w	pc, [sp], #4
 8007244:	9100      	str	r1, [sp, #0]
 8007246:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800724a:	2200      	movs	r2, #0
 800724c:	4901      	ldr	r1, [pc, #4]	; (8007254 <ull_setgpiovalue+0x2c>)
 800724e:	f7ff ff37 	bl	80070c0 <dwt_modify16bitoffsetreg>
 8007252:	e7f4      	b.n	800723e <ull_setgpiovalue+0x16>
 8007254:	0005000c 	.word	0x0005000c

08007258 <ull_readaccdata>:
 8007258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800725a:	b083      	sub	sp, #12
 800725c:	4604      	mov	r4, r0
 800725e:	460f      	mov	r7, r1
 8007260:	4616      	mov	r6, r2
 8007262:	461d      	mov	r5, r3
 8007264:	f248 0340 	movw	r3, #32832	; 0x8040
 8007268:	9300      	str	r3, [sp, #0]
 800726a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800726e:	2200      	movs	r2, #0
 8007270:	4918      	ldr	r1, [pc, #96]	; (80072d4 <ull_readaccdata+0x7c>)
 8007272:	f7ff ff25 	bl	80070c0 <dwt_modify16bitoffsetreg>
 8007276:	19aa      	adds	r2, r5, r6
 8007278:	f243 0301 	movw	r3, #12289	; 0x3001
 800727c:	429a      	cmp	r2, r3
 800727e:	dc15      	bgt.n	80072ac <ull_readaccdata+0x54>
 8007280:	2d7f      	cmp	r5, #127	; 0x7f
 8007282:	d91d      	bls.n	80072c0 <ull_readaccdata+0x68>
 8007284:	2315      	movs	r3, #21
 8007286:	2200      	movs	r2, #0
 8007288:	4913      	ldr	r1, [pc, #76]	; (80072d8 <ull_readaccdata+0x80>)
 800728a:	4620      	mov	r0, r4
 800728c:	f7fe ffea 	bl	8006264 <dwt_write32bitoffsetreg>
 8007290:	462b      	mov	r3, r5
 8007292:	2200      	movs	r2, #0
 8007294:	4911      	ldr	r1, [pc, #68]	; (80072dc <ull_readaccdata+0x84>)
 8007296:	4620      	mov	r0, r4
 8007298:	f7fe ffe4 	bl	8006264 <dwt_write32bitoffsetreg>
 800729c:	9700      	str	r7, [sp, #0]
 800729e:	4633      	mov	r3, r6
 80072a0:	2200      	movs	r2, #0
 80072a2:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 80072a6:	4620      	mov	r0, r4
 80072a8:	f7fe fa90 	bl	80057cc <dwt_readfromdevice>
 80072ac:	2200      	movs	r2, #0
 80072ae:	9200      	str	r2, [sp, #0]
 80072b0:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 80072b4:	4907      	ldr	r1, [pc, #28]	; (80072d4 <ull_readaccdata+0x7c>)
 80072b6:	4620      	mov	r0, r4
 80072b8:	f7ff ff02 	bl	80070c0 <dwt_modify16bitoffsetreg>
 80072bc:	b003      	add	sp, #12
 80072be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072c0:	9700      	str	r7, [sp, #0]
 80072c2:	4633      	mov	r3, r6
 80072c4:	462a      	mov	r2, r5
 80072c6:	f44f 11a8 	mov.w	r1, #1376256	; 0x150000
 80072ca:	4620      	mov	r0, r4
 80072cc:	f7fe fa7e 	bl	80057cc <dwt_readfromdevice>
 80072d0:	e7ec      	b.n	80072ac <ull_readaccdata+0x54>
 80072d2:	bf00      	nop
 80072d4:	00110004 	.word	0x00110004
 80072d8:	001f0004 	.word	0x001f0004
 80072dc:	001f0008 	.word	0x001f0008

080072e0 <ull_repeated_cw>:
 80072e0:	b570      	push	{r4, r5, r6, lr}
 80072e2:	4606      	mov	r6, r0
 80072e4:	460c      	mov	r4, r1
 80072e6:	4615      	mov	r5, r2
 80072e8:	4b0e      	ldr	r3, [pc, #56]	; (8007324 <ull_repeated_cw+0x44>)
 80072ea:	2202      	movs	r2, #2
 80072ec:	490e      	ldr	r1, [pc, #56]	; (8007328 <ull_repeated_cw+0x48>)
 80072ee:	f7fe ffb9 	bl	8006264 <dwt_write32bitoffsetreg>
 80072f2:	2d0f      	cmp	r5, #15
 80072f4:	bfa8      	it	ge
 80072f6:	250f      	movge	r5, #15
 80072f8:	1e63      	subs	r3, r4, #1
 80072fa:	2b03      	cmp	r3, #3
 80072fc:	bf28      	it	cs
 80072fe:	2404      	movcs	r4, #4
 8007300:	2310      	movs	r3, #16
 8007302:	4123      	asrs	r3, r4
 8007304:	2200      	movs	r2, #0
 8007306:	4909      	ldr	r1, [pc, #36]	; (800732c <ull_repeated_cw+0x4c>)
 8007308:	4630      	mov	r0, r6
 800730a:	f7fe ffab 	bl	8006264 <dwt_write32bitoffsetreg>
 800730e:	1e63      	subs	r3, r4, #1
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	fa05 f303 	lsl.w	r3, r5, r3
 8007316:	2200      	movs	r2, #0
 8007318:	4905      	ldr	r1, [pc, #20]	; (8007330 <ull_repeated_cw+0x50>)
 800731a:	4630      	mov	r0, r6
 800731c:	f7fe ffa2 	bl	8006264 <dwt_write32bitoffsetreg>
 8007320:	bd70      	pop	{r4, r5, r6, pc}
 8007322:	bf00      	nop
 8007324:	00d20874 	.word	0x00d20874
 8007328:	00110010 	.word	0x00110010
 800732c:	00070028 	.word	0x00070028
 8007330:	00080018 	.word	0x00080018

08007334 <ull_configure>:
 8007334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007338:	b083      	sub	sp, #12
 800733a:	4604      	mov	r4, r0
 800733c:	460d      	mov	r5, r1
 800733e:	f891 9000 	ldrb.w	r9, [r1]
 8007342:	790b      	ldrb	r3, [r1, #4]
 8007344:	2b18      	cmp	r3, #24
 8007346:	d814      	bhi.n	8007372 <ull_configure+0x3e>
 8007348:	78cf      	ldrb	r7, [r1, #3]
 800734a:	2f18      	cmp	r7, #24
 800734c:	bf94      	ite	ls
 800734e:	2700      	movls	r7, #0
 8007350:	2701      	movhi	r7, #1
 8007352:	b2ff      	uxtb	r7, r7
 8007354:	79eb      	ldrb	r3, [r5, #7]
 8007356:	2b01      	cmp	r3, #1
 8007358:	bf0c      	ite	eq
 800735a:	2110      	moveq	r1, #16
 800735c:	2100      	movne	r1, #0
 800735e:	786b      	ldrb	r3, [r5, #1]
 8007360:	3b01      	subs	r3, #1
 8007362:	2b06      	cmp	r3, #6
 8007364:	d810      	bhi.n	8007388 <ull_configure+0x54>
 8007366:	e8df f003 	tbb	[pc, r3]
 800736a:	0f06      	.short	0x0f06
 800736c:	0f0c120f 	.word	0x0f0c120f
 8007370:	09          	.byte	0x09
 8007371:	00          	.byte	0x00
 8007372:	2701      	movs	r7, #1
 8007374:	e7ed      	b.n	8007352 <ull_configure+0x1e>
 8007376:	f04f 0a40 	mov.w	sl, #64	; 0x40
 800737a:	e00a      	b.n	8007392 <ull_configure+0x5e>
 800737c:	f04f 0a48 	mov.w	sl, #72	; 0x48
 8007380:	e007      	b.n	8007392 <ull_configure+0x5e>
 8007382:	f04f 0a80 	mov.w	sl, #128	; 0x80
 8007386:	e004      	b.n	8007392 <ull_configure+0x5e>
 8007388:	f44f 7a80 	mov.w	sl, #256	; 0x100
 800738c:	e001      	b.n	8007392 <ull_configure+0x5e>
 800738e:	f04f 0a20 	mov.w	sl, #32
 8007392:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8007394:	8a53      	ldrh	r3, [r2, #18]
 8007396:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800739a:	8253      	strh	r3, [r2, #18]
 800739c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800739e:	79ea      	ldrb	r2, [r5, #7]
 80073a0:	731a      	strb	r2, [r3, #12]
 80073a2:	7b2e      	ldrb	r6, [r5, #12]
 80073a4:	1cb3      	adds	r3, r6, #2
 80073a6:	2601      	movs	r6, #1
 80073a8:	409e      	lsls	r6, r3
 80073aa:	fa1f f886 	uxth.w	r8, r6
 80073ae:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80073b0:	4bc7      	ldr	r3, [pc, #796]	; (80076d0 <ull_configure+0x39c>)
 80073b2:	fb03 f308 	mul.w	r3, r3, r8
 80073b6:	0bdb      	lsrs	r3, r3, #15
 80073b8:	8293      	strh	r3, [r2, #20]
 80073ba:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80073bc:	7aea      	ldrb	r2, [r5, #11]
 80073be:	75da      	strb	r2, [r3, #23]
 80073c0:	7a2b      	ldrb	r3, [r5, #8]
 80073c2:	015b      	lsls	r3, r3, #5
 80073c4:	f003 0320 	and.w	r3, r3, #32
 80073c8:	7b6a      	ldrb	r2, [r5, #13]
 80073ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073ce:	7aea      	ldrb	r2, [r5, #11]
 80073d0:	0312      	lsls	r2, r2, #12
 80073d2:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 80073d6:	4313      	orrs	r3, r2
 80073d8:	430b      	orrs	r3, r1
 80073da:	9300      	str	r3, [sp, #0]
 80073dc:	4bbd      	ldr	r3, [pc, #756]	; (80076d4 <ull_configure+0x3a0>)
 80073de:	2200      	movs	r2, #0
 80073e0:	2110      	movs	r1, #16
 80073e2:	4620      	mov	r0, r4
 80073e4:	f7ff fad0 	bl	8006988 <dwt_modify32bitoffsetreg>
 80073e8:	2f00      	cmp	r7, #0
 80073ea:	f040 80f6 	bne.w	80075da <ull_configure+0x2a6>
 80073ee:	7aeb      	ldrb	r3, [r5, #11]
 80073f0:	b1f3      	cbz	r3, 8007430 <ull_configure+0xfc>
 80073f2:	7b6b      	ldrb	r3, [r5, #13]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	f240 811c 	bls.w	8007632 <ull_configure+0x2fe>
 80073fa:	7b2a      	ldrb	r2, [r5, #12]
 80073fc:	4bb6      	ldr	r3, [pc, #728]	; (80076d8 <ull_configure+0x3a4>)
 80073fe:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8007402:	0112      	lsls	r2, r2, #4
 8007404:	0ad3      	lsrs	r3, r2, #11
 8007406:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800740a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800740e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8007412:	bf28      	it	cs
 8007414:	3301      	addcs	r3, #1
 8007416:	b29b      	uxth	r3, r3
 8007418:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
 800741c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	f64f 7380 	movw	r3, #65408	; 0xff80
 8007426:	2202      	movs	r2, #2
 8007428:	49ac      	ldr	r1, [pc, #688]	; (80076dc <ull_configure+0x3a8>)
 800742a:	4620      	mov	r0, r4
 800742c:	f7ff fe48 	bl	80070c0 <dwt_modify16bitoffsetreg>
 8007430:	2394      	movs	r3, #148	; 0x94
 8007432:	9300      	str	r3, [sp, #0]
 8007434:	4baa      	ldr	r3, [pc, #680]	; (80076e0 <ull_configure+0x3ac>)
 8007436:	2200      	movs	r2, #0
 8007438:	49aa      	ldr	r1, [pc, #680]	; (80076e4 <ull_configure+0x3b0>)
 800743a:	4620      	mov	r0, r4
 800743c:	f7ff faa4 	bl	8006988 <dwt_modify32bitoffsetreg>
 8007440:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8007444:	f340 8108 	ble.w	8007658 <ull_configure+0x324>
 8007448:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800744a:	8a53      	ldrh	r3, [r2, #18]
 800744c:	f043 0320 	orr.w	r3, r3, #32
 8007450:	8253      	strh	r3, [r2, #18]
 8007452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	f24e 73ff 	movw	r3, #59391	; 0xe7ff
 800745c:	2200      	movs	r2, #0
 800745e:	49a2      	ldr	r1, [pc, #648]	; (80076e8 <ull_configure+0x3b4>)
 8007460:	4620      	mov	r0, r4
 8007462:	f7ff fe2d 	bl	80070c0 <dwt_modify16bitoffsetreg>
 8007466:	7b6b      	ldrb	r3, [r5, #13]
 8007468:	2b01      	cmp	r3, #1
 800746a:	f000 8100 	beq.w	800766e <ull_configure+0x33a>
 800746e:	78ab      	ldrb	r3, [r5, #2]
 8007470:	f043 0310 	orr.w	r3, r3, #16
 8007474:	9300      	str	r3, [sp, #0]
 8007476:	23fc      	movs	r3, #252	; 0xfc
 8007478:	2200      	movs	r2, #0
 800747a:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800747e:	4620      	mov	r0, r4
 8007480:	f7ff fc6c 	bl	8006d5c <dwt_modify8bitoffsetreg>
 8007484:	1e73      	subs	r3, r6, #1
 8007486:	b2db      	uxtb	r3, r3
 8007488:	2200      	movs	r2, #0
 800748a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800748e:	4620      	mov	r0, r4
 8007490:	f7fe fd95 	bl	8005fbe <dwt_write8bitoffsetreg>
 8007494:	786b      	ldrb	r3, [r5, #1]
 8007496:	2b07      	cmp	r3, #7
 8007498:	bf0c      	ite	eq
 800749a:	2308      	moveq	r3, #8
 800749c:	2300      	movne	r3, #0
 800749e:	2201      	movs	r2, #1
 80074a0:	2128      	movs	r1, #40	; 0x28
 80074a2:	4620      	mov	r0, r4
 80074a4:	f7fe fd8b 	bl	8005fbe <dwt_write8bitoffsetreg>
 80074a8:	4b90      	ldr	r3, [pc, #576]	; (80076ec <ull_configure+0x3b8>)
 80074aa:	2200      	movs	r2, #0
 80074ac:	4990      	ldr	r1, [pc, #576]	; (80076f0 <ull_configure+0x3bc>)
 80074ae:	4620      	mov	r0, r4
 80074b0:	f7fe fed8 	bl	8006264 <dwt_write32bitoffsetreg>
 80074b4:	2200      	movs	r2, #0
 80074b6:	498f      	ldr	r1, [pc, #572]	; (80076f4 <ull_configure+0x3c0>)
 80074b8:	4620      	mov	r0, r4
 80074ba:	f7fe f991 	bl	80057e0 <dwt_read32bitoffsetreg>
 80074be:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 80074c2:	f020 001f 	bic.w	r0, r0, #31
 80074c6:	f1b9 0f09 	cmp.w	r9, #9
 80074ca:	bf08      	it	eq
 80074cc:	f040 0001 	orreq.w	r0, r0, #1
 80074d0:	792a      	ldrb	r2, [r5, #4]
 80074d2:	0212      	lsls	r2, r2, #8
 80074d4:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 80074d8:	78eb      	ldrb	r3, [r5, #3]
 80074da:	00db      	lsls	r3, r3, #3
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	431a      	orrs	r2, r3
 80074e0:	796b      	ldrb	r3, [r5, #5]
 80074e2:	005b      	lsls	r3, r3, #1
 80074e4:	f003 0306 	and.w	r3, r3, #6
 80074e8:	4313      	orrs	r3, r2
 80074ea:	4303      	orrs	r3, r0
 80074ec:	2200      	movs	r2, #0
 80074ee:	4981      	ldr	r1, [pc, #516]	; (80076f4 <ull_configure+0x3c0>)
 80074f0:	4620      	mov	r0, r4
 80074f2:	f7fe feb7 	bl	8006264 <dwt_write32bitoffsetreg>
 80074f6:	79aa      	ldrb	r2, [r5, #6]
 80074f8:	786b      	ldrb	r3, [r5, #1]
 80074fa:	031b      	lsls	r3, r3, #12
 80074fc:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	f46f 4374 	mvn.w	r3, #62464	; 0xf400
 8007506:	2200      	movs	r2, #0
 8007508:	2124      	movs	r1, #36	; 0x24
 800750a:	4620      	mov	r0, r4
 800750c:	f7ff fa3c 	bl	8006988 <dwt_modify32bitoffsetreg>
 8007510:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 8007514:	b923      	cbnz	r3, 8007520 <ull_configure+0x1ec>
 8007516:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800751a:	726b      	strb	r3, [r5, #9]
 800751c:	2300      	movs	r3, #0
 800751e:	72ab      	strb	r3, [r5, #10]
 8007520:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 8007524:	2202      	movs	r2, #2
 8007526:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800752a:	4620      	mov	r0, r4
 800752c:	f7fe fd99 	bl	8006062 <dwt_write16bitoffsetreg>
 8007530:	2202      	movs	r2, #2
 8007532:	4971      	ldr	r1, [pc, #452]	; (80076f8 <ull_configure+0x3c4>)
 8007534:	4620      	mov	r0, r4
 8007536:	f7fe f97b 	bl	8005830 <dwt_read8bitoffsetreg>
 800753a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800753c:	7c1b      	ldrb	r3, [r3, #16]
 800753e:	454b      	cmp	r3, r9
 8007540:	f000 809f 	beq.w	8007682 <ull_configure+0x34e>
 8007544:	2803      	cmp	r0, #3
 8007546:	f000 80a0 	beq.w	800768a <ull_configure+0x356>
 800754a:	f1b9 0f09 	cmp.w	r9, #9
 800754e:	f000 80a1 	beq.w	8007694 <ull_configure+0x360>
 8007552:	4b6a      	ldr	r3, [pc, #424]	; (80076fc <ull_configure+0x3c8>)
 8007554:	2200      	movs	r2, #0
 8007556:	496a      	ldr	r1, [pc, #424]	; (8007700 <ull_configure+0x3cc>)
 8007558:	4620      	mov	r0, r4
 800755a:	f7fe fe83 	bl	8006264 <dwt_write32bitoffsetreg>
 800755e:	f641 733c 	movw	r3, #7996	; 0x1f3c
 8007562:	2200      	movs	r2, #0
 8007564:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 8007568:	4620      	mov	r0, r4
 800756a:	f7fe fd7a 	bl	8006062 <dwt_write16bitoffsetreg>
 800756e:	2314      	movs	r3, #20
 8007570:	2201      	movs	r2, #1
 8007572:	4964      	ldr	r1, [pc, #400]	; (8007704 <ull_configure+0x3d0>)
 8007574:	4620      	mov	r0, r4
 8007576:	f7fe fd22 	bl	8005fbe <dwt_write8bitoffsetreg>
 800757a:	230e      	movs	r3, #14
 800757c:	2202      	movs	r2, #2
 800757e:	4962      	ldr	r1, [pc, #392]	; (8007708 <ull_configure+0x3d4>)
 8007580:	4620      	mov	r0, r4
 8007582:	f7fe fd1c 	bl	8005fbe <dwt_write8bitoffsetreg>
 8007586:	2381      	movs	r3, #129	; 0x81
 8007588:	2200      	movs	r2, #0
 800758a:	4960      	ldr	r1, [pc, #384]	; (800770c <ull_configure+0x3d8>)
 800758c:	4620      	mov	r0, r4
 800758e:	f7fe fd16 	bl	8005fbe <dwt_write8bitoffsetreg>
 8007592:	2302      	movs	r3, #2
 8007594:	2200      	movs	r2, #0
 8007596:	2144      	movs	r1, #68	; 0x44
 8007598:	4620      	mov	r0, r4
 800759a:	f7fe fd10 	bl	8005fbe <dwt_write8bitoffsetreg>
 800759e:	2101      	movs	r1, #1
 80075a0:	4620      	mov	r0, r4
 80075a2:	f7ff fc99 	bl	8006ed8 <ull_setdwstate>
 80075a6:	f04f 0b32 	mov.w	fp, #50	; 0x32
 80075aa:	f04f 0814 	mov.w	r8, #20
 80075ae:	2700      	movs	r7, #0
 80075b0:	2644      	movs	r6, #68	; 0x44
 80075b2:	4640      	mov	r0, r8
 80075b4:	f7f9 ffcd 	bl	8001552 <deca_usleep>
 80075b8:	463a      	mov	r2, r7
 80075ba:	4631      	mov	r1, r6
 80075bc:	4620      	mov	r0, r4
 80075be:	f7fe f937 	bl	8005830 <dwt_read8bitoffsetreg>
 80075c2:	f010 0f02 	tst.w	r0, #2
 80075c6:	f040 80ab 	bne.w	8007720 <ull_configure+0x3ec>
 80075ca:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80075ce:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 80075d2:	d1ee      	bne.n	80075b2 <ull_configure+0x27e>
 80075d4:	f06f 0001 	mvn.w	r0, #1
 80075d8:	e0cf      	b.n	800777a <ull_configure+0x446>
 80075da:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80075dc:	8a53      	ldrh	r3, [r2, #18]
 80075de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80075e2:	8253      	strh	r3, [r2, #18]
 80075e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80075e8:	9300      	str	r3, [sp, #0]
 80075ea:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 80075ee:	2200      	movs	r2, #0
 80075f0:	493d      	ldr	r1, [pc, #244]	; (80076e8 <ull_configure+0x3b4>)
 80075f2:	4620      	mov	r0, r4
 80075f4:	f7ff f9c8 	bl	8006988 <dwt_modify32bitoffsetreg>
 80075f8:	f240 3306 	movw	r3, #774	; 0x306
 80075fc:	2200      	movs	r2, #0
 80075fe:	4944      	ldr	r1, [pc, #272]	; (8007710 <ull_configure+0x3dc>)
 8007600:	4620      	mov	r0, r4
 8007602:	f7fe fe2f 	bl	8006264 <dwt_write32bitoffsetreg>
 8007606:	2300      	movs	r3, #0
 8007608:	461a      	mov	r2, r3
 800760a:	f04f 110e 	mov.w	r1, #917518	; 0xe000e
 800760e:	4620      	mov	r0, r4
 8007610:	f7fe fe28 	bl	8006264 <dwt_write32bitoffsetreg>
 8007614:	4b3f      	ldr	r3, [pc, #252]	; (8007714 <ull_configure+0x3e0>)
 8007616:	2200      	movs	r2, #0
 8007618:	4930      	ldr	r1, [pc, #192]	; (80076dc <ull_configure+0x3a8>)
 800761a:	4620      	mov	r0, r4
 800761c:	f7fe fe22 	bl	8006264 <dwt_write32bitoffsetreg>
 8007620:	239d      	movs	r3, #157	; 0x9d
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	4b2e      	ldr	r3, [pc, #184]	; (80076e0 <ull_configure+0x3ac>)
 8007626:	2200      	movs	r2, #0
 8007628:	492e      	ldr	r1, [pc, #184]	; (80076e4 <ull_configure+0x3b0>)
 800762a:	4620      	mov	r0, r4
 800762c:	f7ff f9ac 	bl	8006988 <dwt_modify32bitoffsetreg>
 8007630:	e719      	b.n	8007466 <ull_configure+0x132>
 8007632:	7b2a      	ldrb	r2, [r5, #12]
 8007634:	4b28      	ldr	r3, [pc, #160]	; (80076d8 <ull_configure+0x3a4>)
 8007636:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800763a:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 800763e:	fb02 f203 	mul.w	r2, r2, r3
 8007642:	0c93      	lsrs	r3, r2, #18
 8007644:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 8007648:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800764c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8007650:	bf28      	it	cs
 8007652:	3301      	addcs	r3, #1
 8007654:	b29b      	uxth	r3, r3
 8007656:	e6df      	b.n	8007418 <ull_configure+0xe4>
 8007658:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800765c:	9300      	str	r3, [sp, #0]
 800765e:	f24e 73ff 	movw	r3, #59391	; 0xe7ff
 8007662:	2200      	movs	r2, #0
 8007664:	4920      	ldr	r1, [pc, #128]	; (80076e8 <ull_configure+0x3b4>)
 8007666:	4620      	mov	r0, r4
 8007668:	f7ff fd2a 	bl	80070c0 <dwt_modify16bitoffsetreg>
 800766c:	e6fb      	b.n	8007466 <ull_configure+0x132>
 800766e:	78ab      	ldrb	r3, [r5, #2]
 8007670:	9300      	str	r3, [sp, #0]
 8007672:	23ec      	movs	r3, #236	; 0xec
 8007674:	2200      	movs	r2, #0
 8007676:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800767a:	4620      	mov	r0, r4
 800767c:	f7ff fb6e 	bl	8006d5c <dwt_modify8bitoffsetreg>
 8007680:	e700      	b.n	8007484 <ull_configure+0x150>
 8007682:	2803      	cmp	r0, #3
 8007684:	f47f af61 	bne.w	800754a <ull_configure+0x216>
 8007688:	e04d      	b.n	8007726 <ull_configure+0x3f2>
 800768a:	2102      	movs	r1, #2
 800768c:	4620      	mov	r0, r4
 800768e:	f7ff fc23 	bl	8006ed8 <ull_setdwstate>
 8007692:	e75a      	b.n	800754a <ull_configure+0x216>
 8007694:	4b20      	ldr	r3, [pc, #128]	; (8007718 <ull_configure+0x3e4>)
 8007696:	2200      	movs	r2, #0
 8007698:	4919      	ldr	r1, [pc, #100]	; (8007700 <ull_configure+0x3cc>)
 800769a:	4620      	mov	r0, r4
 800769c:	f7fe fde2 	bl	8006264 <dwt_write32bitoffsetreg>
 80076a0:	f640 733c 	movw	r3, #3900	; 0xf3c
 80076a4:	2200      	movs	r2, #0
 80076a6:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 80076aa:	4620      	mov	r0, r4
 80076ac:	f7fe fcd9 	bl	8006062 <dwt_write16bitoffsetreg>
 80076b0:	e75d      	b.n	800756e <ull_configure+0x23a>
 80076b2:	fa4f f189 	sxtb.w	r1, r9
 80076b6:	4620      	mov	r0, r4
 80076b8:	f7ff f98a 	bl	80069d0 <_dwt_kick_dgc_on_wakeup>
 80076bc:	e040      	b.n	8007740 <ull_configure+0x40c>
 80076be:	2200      	movs	r2, #0
 80076c0:	9200      	str	r2, [sp, #0]
 80076c2:	23fe      	movs	r3, #254	; 0xfe
 80076c4:	4915      	ldr	r1, [pc, #84]	; (800771c <ull_configure+0x3e8>)
 80076c6:	4620      	mov	r0, r4
 80076c8:	f7ff fb48 	bl	8006d5c <dwt_modify8bitoffsetreg>
 80076cc:	e042      	b.n	8007754 <ull_configure+0x420>
 80076ce:	bf00      	nop
 80076d0:	00026668 	.word	0x00026668
 80076d4:	fffc4fcf 	.word	0xfffc4fcf
 80076d8:	08015e70 	.word	0x08015e70
 80076dc:	000e0012 	.word	0x000e0012
 80076e0:	bfffff00 	.word	0xbfffff00
 80076e4:	000e0016 	.word	0x000e0016
 80076e8:	000b0008 	.word	0x000b0008
 80076ec:	af5f35cc 	.word	0xaf5f35cc
 80076f0:	0006000c 	.word	0x0006000c
 80076f4:	00010014 	.word	0x00010014
 80076f8:	000f0030 	.word	0x000f0030
 80076fc:	1c071134 	.word	0x1c071134
 8007700:	0007001c 	.word	0x0007001c
 8007704:	00070050 	.word	0x00070050
 8007708:	00070018 	.word	0x00070018
 800770c:	00090008 	.word	0x00090008
 8007710:	000e000c 	.word	0x000e000c
 8007714:	000c5a0a 	.word	0x000c5a0a
 8007718:	1c010034 	.word	0x1c010034
 800771c:	00030018 	.word	0x00030018
 8007720:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007722:	f883 9010 	strb.w	r9, [r3, #16]
 8007726:	792b      	ldrb	r3, [r5, #4]
 8007728:	3b09      	subs	r3, #9
 800772a:	b2db      	uxtb	r3, r3
 800772c:	2b0f      	cmp	r3, #15
 800772e:	d8c6      	bhi.n	80076be <ull_configure+0x38a>
 8007730:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007732:	7a5b      	ldrb	r3, [r3, #9]
 8007734:	2b01      	cmp	r3, #1
 8007736:	d0bc      	beq.n	80076b2 <ull_configure+0x37e>
 8007738:	4649      	mov	r1, r9
 800773a:	4620      	mov	r0, r4
 800773c:	f7fe ffae 	bl	800669c <ull_configmrxlut>
 8007740:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	f248 13ff 	movw	r3, #33279	; 0x81ff
 800774a:	2200      	movs	r2, #0
 800774c:	490c      	ldr	r1, [pc, #48]	; (8007780 <ull_configure+0x44c>)
 800774e:	4620      	mov	r0, r4
 8007750:	f7ff fcb6 	bl	80070c0 <dwt_modify16bitoffsetreg>
 8007754:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8007758:	bfcc      	ite	gt
 800775a:	f04f 5300 	movgt.w	r3, #536870912	; 0x20000000
 800775e:	f04f 53a0 	movle.w	r3, #335544320	; 0x14000000
 8007762:	9300      	str	r3, [sp, #0]
 8007764:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8007768:	2200      	movs	r2, #0
 800776a:	4906      	ldr	r1, [pc, #24]	; (8007784 <ull_configure+0x450>)
 800776c:	4620      	mov	r0, r4
 800776e:	f7ff f90b 	bl	8006988 <dwt_modify32bitoffsetreg>
 8007772:	2101      	movs	r1, #1
 8007774:	4620      	mov	r0, r4
 8007776:	f7ff fd27 	bl	80071c8 <ull_pgf_cal>
 800777a:	b003      	add	sp, #12
 800777c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007780:	00030018 	.word	0x00030018
 8007784:	00060010 	.word	0x00060010

08007788 <dwt_ioctl>:
 8007788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800778c:	b091      	sub	sp, #68	; 0x44
 800778e:	4606      	mov	r6, r0
 8007790:	4615      	mov	r5, r2
 8007792:	461c      	mov	r4, r3
 8007794:	299c      	cmp	r1, #156	; 0x9c
 8007796:	f200 809f 	bhi.w	80078d8 <dwt_ioctl+0x150>
 800779a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800779e:	0a6d      	.short	0x0a6d
 80077a0:	00a30a78 	.word	0x00a30a78
 80077a4:	00be00a7 	.word	0x00be00a7
 80077a8:	018e0148 	.word	0x018e0148
 80077ac:	0152016b 	.word	0x0152016b
 80077b0:	01a9019e 	.word	0x01a9019e
 80077b4:	01b901b1 	.word	0x01b901b1
 80077b8:	01c901c1 	.word	0x01c901c1
 80077bc:	01d501d1 	.word	0x01d501d1
 80077c0:	026e01dd 	.word	0x026e01dd
 80077c4:	0281027c 	.word	0x0281027c
 80077c8:	0290028b 	.word	0x0290028b
 80077cc:	029e0295 	.word	0x029e0295
 80077d0:	030902a3 	.word	0x030902a3
 80077d4:	0326031b 	.word	0x0326031b
 80077d8:	033b0331 	.word	0x033b0331
 80077dc:	03690373 	.word	0x03690373
 80077e0:	0345035f 	.word	0x0345035f
 80077e4:	03c10352 	.word	0x03c10352
 80077e8:	022b01f8 	.word	0x022b01f8
 80077ec:	02410239 	.word	0x02410239
 80077f0:	09960255 	.word	0x09960255
 80077f4:	0382099b 	.word	0x0382099b
 80077f8:	03e303df 	.word	0x03e303df
 80077fc:	03f103ec 	.word	0x03f103ec
 8007800:	040503fb 	.word	0x040503fb
 8007804:	0437040d 	.word	0x0437040d
 8007808:	044e0443 	.word	0x044e0443
 800780c:	04590378 	.word	0x04590378
 8007810:	04740462 	.word	0x04740462
 8007814:	049e048d 	.word	0x049e048d
 8007818:	04ea04e0 	.word	0x04ea04e0
 800781c:	051a050b 	.word	0x051a050b
 8007820:	05230535 	.word	0x05230535
 8007824:	05970551 	.word	0x05970551
 8007828:	05cf05af 	.word	0x05cf05af
 800782c:	05f805e4 	.word	0x05f805e4
 8007830:	061d0601 	.word	0x061d0601
 8007834:	0773060a 	.word	0x0773060a
 8007838:	07ed079f 	.word	0x07ed079f
 800783c:	07fe07f3 	.word	0x07fe07f3
 8007840:	08370817 	.word	0x08370817
 8007844:	084b0841 	.word	0x084b0841
 8007848:	08820879 	.word	0x08820879
 800784c:	08910888 	.word	0x08910888
 8007850:	08ab089e 	.word	0x08ab089e
 8007854:	08be08b5 	.word	0x08be08b5
 8007858:	08d208c7 	.word	0x08d208c7
 800785c:	08e308dd 	.word	0x08e308dd
 8007860:	09110906 	.word	0x09110906
 8007864:	0945091c 	.word	0x0945091c
 8007868:	09720967 	.word	0x09720967
 800786c:	09a1098b 	.word	0x09a1098b
 8007870:	0a200a16 	.word	0x0a200a16
 8007874:	0a800a2b 	.word	0x0a800a2b
 8007878:	0a620a35 	.word	0x0a620a35
 800787c:	09df0791 	.word	0x09df0791
 8007880:	0aee0a00 	.word	0x0aee0a00
 8007884:	0a8d0ae3 	.word	0x0a8d0ae3
 8007888:	0aa30a98 	.word	0x0aa30a98
 800788c:	0ab90aae 	.word	0x0ab90aae
 8007890:	0acf0ac4 	.word	0x0acf0ac4
 8007894:	0bd80ad8 	.word	0x0bd80ad8
 8007898:	0c4d0c12 	.word	0x0c4d0c12
 800789c:	0d290c70 	.word	0x0d290c70
 80078a0:	0b190d3e 	.word	0x0b190d3e
 80078a4:	009d009d 	.word	0x009d009d
 80078a8:	009d009d 	.word	0x009d009d
 80078ac:	009d009d 	.word	0x009d009d
 80078b0:	009d009d 	.word	0x009d009d
 80078b4:	009d009d 	.word	0x009d009d
 80078b8:	009d009d 	.word	0x009d009d
 80078bc:	009d009d 	.word	0x009d009d
 80078c0:	009d009d 	.word	0x009d009d
 80078c4:	009d009d 	.word	0x009d009d
 80078c8:	0c87009d 	.word	0x0c87009d
 80078cc:	0dce0ca5 	.word	0x0dce0ca5
 80078d0:	0ce40cef 	.word	0x0ce40cef
 80078d4:	0cfa0d03 	.word	0x0cfa0d03
 80078d8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80078dc:	4628      	mov	r0, r5
 80078de:	b011      	add	sp, #68	; 0x44
 80078e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078e4:	6843      	ldr	r3, [r0, #4]
 80078e6:	4798      	blx	r3
 80078e8:	2500      	movs	r5, #0
 80078ea:	e7f7      	b.n	80078dc <dwt_ioctl+0x154>
 80078ec:	2202      	movs	r2, #2
 80078ee:	49b7      	ldr	r1, [pc, #732]	; (8007bcc <dwt_ioctl+0x444>)
 80078f0:	f7fd ff9e 	bl	8005830 <dwt_read8bitoffsetreg>
 80078f4:	2803      	cmp	r0, #3
 80078f6:	d801      	bhi.n	80078fc <dwt_ioctl+0x174>
 80078f8:	2500      	movs	r5, #0
 80078fa:	e7ef      	b.n	80078dc <dwt_ioctl+0x154>
 80078fc:	f7f9 fe00 	bl	8001500 <decamutexon>
 8007900:	4604      	mov	r4, r0
 8007902:	2500      	movs	r5, #0
 8007904:	9500      	str	r5, [sp, #0]
 8007906:	462b      	mov	r3, r5
 8007908:	462a      	mov	r2, r5
 800790a:	4629      	mov	r1, r5
 800790c:	4630      	mov	r0, r6
 800790e:	f7fe fb4b 	bl	8005fa8 <dwt_writetodevice>
 8007912:	4620      	mov	r0, r4
 8007914:	f7f9 fe05 	bl	8001522 <decamutexoff>
 8007918:	e7e0      	b.n	80078dc <dwt_ioctl+0x154>
 800791a:	2c00      	cmp	r4, #0
 800791c:	f001 8510 	beq.w	8009340 <dwt_ioctl+0x1bb8>
 8007920:	7824      	ldrb	r4, [r4, #0]
 8007922:	f014 0f1d 	tst.w	r4, #29
 8007926:	d065      	beq.n	80079f4 <dwt_ioctl+0x26c>
 8007928:	f014 0f01 	tst.w	r4, #1
 800792c:	d026      	beq.n	800797c <dwt_ioctl+0x1f4>
 800792e:	f014 0f02 	tst.w	r4, #2
 8007932:	f04f 0200 	mov.w	r2, #0
 8007936:	9200      	str	r2, [sp, #0]
 8007938:	4613      	mov	r3, r2
 800793a:	bf14      	ite	ne
 800793c:	210d      	movne	r1, #13
 800793e:	2103      	moveq	r1, #3
 8007940:	f7fe fb32 	bl	8005fa8 <dwt_writetodevice>
 8007944:	2203      	movs	r2, #3
 8007946:	2144      	movs	r1, #68	; 0x44
 8007948:	4630      	mov	r0, r6
 800794a:	f7fd ff71 	bl	8005830 <dwt_read8bitoffsetreg>
 800794e:	f010 0f08 	tst.w	r0, #8
 8007952:	d145      	bne.n	80079e0 <dwt_ioctl+0x258>
 8007954:	2200      	movs	r2, #0
 8007956:	499d      	ldr	r1, [pc, #628]	; (8007bcc <dwt_ioctl+0x444>)
 8007958:	4630      	mov	r0, r6
 800795a:	f7fd ff41 	bl	80057e0 <dwt_read32bitoffsetreg>
 800795e:	f5b0 2f50 	cmp.w	r0, #851968	; 0xd0000
 8007962:	bf18      	it	ne
 8007964:	2500      	movne	r5, #0
 8007966:	d1b9      	bne.n	80078dc <dwt_ioctl+0x154>
 8007968:	2100      	movs	r1, #0
 800796a:	9100      	str	r1, [sp, #0]
 800796c:	460b      	mov	r3, r1
 800796e:	460a      	mov	r2, r1
 8007970:	4630      	mov	r0, r6
 8007972:	f7fe fb19 	bl	8005fa8 <dwt_writetodevice>
 8007976:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800797a:	e7af      	b.n	80078dc <dwt_ioctl+0x154>
 800797c:	f014 0f08 	tst.w	r4, #8
 8007980:	d10e      	bne.n	80079a0 <dwt_ioctl+0x218>
 8007982:	f014 0f10 	tst.w	r4, #16
 8007986:	d11b      	bne.n	80079c0 <dwt_ioctl+0x238>
 8007988:	f014 0f02 	tst.w	r4, #2
 800798c:	f04f 0200 	mov.w	r2, #0
 8007990:	9200      	str	r2, [sp, #0]
 8007992:	4613      	mov	r3, r2
 8007994:	bf14      	ite	ne
 8007996:	2110      	movne	r1, #16
 8007998:	2109      	moveq	r1, #9
 800799a:	f7fe fb05 	bl	8005fa8 <dwt_writetodevice>
 800799e:	e7d1      	b.n	8007944 <dwt_ioctl+0x1bc>
 80079a0:	2100      	movs	r1, #0
 80079a2:	f7fe fdd3 	bl	800654c <_dwt_adjust_delaytime>
 80079a6:	f014 0f02 	tst.w	r4, #2
 80079aa:	f04f 0200 	mov.w	r2, #0
 80079ae:	9200      	str	r2, [sp, #0]
 80079b0:	4613      	mov	r3, r2
 80079b2:	bf14      	ite	ne
 80079b4:	210f      	movne	r1, #15
 80079b6:	2107      	moveq	r1, #7
 80079b8:	4630      	mov	r0, r6
 80079ba:	f7fe faf5 	bl	8005fa8 <dwt_writetodevice>
 80079be:	e7c1      	b.n	8007944 <dwt_ioctl+0x1bc>
 80079c0:	2101      	movs	r1, #1
 80079c2:	f7fe fdc3 	bl	800654c <_dwt_adjust_delaytime>
 80079c6:	f014 0f02 	tst.w	r4, #2
 80079ca:	f04f 0200 	mov.w	r2, #0
 80079ce:	9200      	str	r2, [sp, #0]
 80079d0:	4613      	mov	r3, r2
 80079d2:	bf14      	ite	ne
 80079d4:	210e      	movne	r1, #14
 80079d6:	2105      	moveq	r1, #5
 80079d8:	4630      	mov	r0, r6
 80079da:	f7fe fae5 	bl	8005fa8 <dwt_writetodevice>
 80079de:	e7b1      	b.n	8007944 <dwt_ioctl+0x1bc>
 80079e0:	2100      	movs	r1, #0
 80079e2:	9100      	str	r1, [sp, #0]
 80079e4:	460b      	mov	r3, r1
 80079e6:	460a      	mov	r2, r1
 80079e8:	4630      	mov	r0, r6
 80079ea:	f7fe fadd 	bl	8005fa8 <dwt_writetodevice>
 80079ee:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80079f2:	e773      	b.n	80078dc <dwt_ioctl+0x154>
 80079f4:	f014 0f20 	tst.w	r4, #32
 80079f8:	d00c      	beq.n	8007a14 <dwt_ioctl+0x28c>
 80079fa:	f014 0f02 	tst.w	r4, #2
 80079fe:	f04f 0500 	mov.w	r5, #0
 8007a02:	9500      	str	r5, [sp, #0]
 8007a04:	462b      	mov	r3, r5
 8007a06:	462a      	mov	r2, r5
 8007a08:	bf14      	ite	ne
 8007a0a:	2111      	movne	r1, #17
 8007a0c:	210b      	moveq	r1, #11
 8007a0e:	f7fe facb 	bl	8005fa8 <dwt_writetodevice>
 8007a12:	e763      	b.n	80078dc <dwt_ioctl+0x154>
 8007a14:	f014 0f02 	tst.w	r4, #2
 8007a18:	f04f 0500 	mov.w	r5, #0
 8007a1c:	9500      	str	r5, [sp, #0]
 8007a1e:	462b      	mov	r3, r5
 8007a20:	462a      	mov	r2, r5
 8007a22:	bf14      	ite	ne
 8007a24:	210c      	movne	r1, #12
 8007a26:	2101      	moveq	r1, #1
 8007a28:	f7fe fabe 	bl	8005fa8 <dwt_writetodevice>
 8007a2c:	e756      	b.n	80078dc <dwt_ioctl+0x154>
 8007a2e:	2c00      	cmp	r4, #0
 8007a30:	f001 8489 	beq.w	8009346 <dwt_ioctl+0x1bbe>
 8007a34:	6823      	ldr	r3, [r4, #0]
 8007a36:	2200      	movs	r2, #0
 8007a38:	212c      	movs	r1, #44	; 0x2c
 8007a3a:	f7fe fc13 	bl	8006264 <dwt_write32bitoffsetreg>
 8007a3e:	2500      	movs	r5, #0
 8007a40:	e74c      	b.n	80078dc <dwt_ioctl+0x154>
 8007a42:	6823      	ldr	r3, [r4, #0]
 8007a44:	2200      	movs	r2, #0
 8007a46:	4962      	ldr	r1, [pc, #392]	; (8007bd0 <dwt_ioctl+0x448>)
 8007a48:	f7fe fc0c 	bl	8006264 <dwt_write32bitoffsetreg>
 8007a4c:	6863      	ldr	r3, [r4, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	4960      	ldr	r1, [pc, #384]	; (8007bd4 <dwt_ioctl+0x44c>)
 8007a52:	4630      	mov	r0, r6
 8007a54:	f7fe fc06 	bl	8006264 <dwt_write32bitoffsetreg>
 8007a58:	68a3      	ldr	r3, [r4, #8]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	495e      	ldr	r1, [pc, #376]	; (8007bd8 <dwt_ioctl+0x450>)
 8007a5e:	4630      	mov	r0, r6
 8007a60:	f7fe fc00 	bl	8006264 <dwt_write32bitoffsetreg>
 8007a64:	68e3      	ldr	r3, [r4, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	495c      	ldr	r1, [pc, #368]	; (8007bdc <dwt_ioctl+0x454>)
 8007a6a:	4630      	mov	r0, r6
 8007a6c:	f7fe fbfa 	bl	8006264 <dwt_write32bitoffsetreg>
 8007a70:	2500      	movs	r5, #0
 8007a72:	e733      	b.n	80078dc <dwt_ioctl+0x154>
 8007a74:	2c00      	cmp	r4, #0
 8007a76:	f001 8469 	beq.w	800934c <dwt_ioctl+0x1bc4>
 8007a7a:	8823      	ldrh	r3, [r4, #0]
 8007a7c:	6865      	ldr	r5, [r4, #4]
 8007a7e:	2d03      	cmp	r5, #3
 8007a80:	f201 8467 	bhi.w	8009352 <dwt_ioctl+0x1bca>
 8007a84:	e8df f005 	tbb	[pc, r5]
 8007a88:	130d0702 	.word	0x130d0702
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	4954      	ldr	r1, [pc, #336]	; (8007be0 <dwt_ioctl+0x458>)
 8007a90:	f7fe fae7 	bl	8006062 <dwt_write16bitoffsetreg>
 8007a94:	e722      	b.n	80078dc <dwt_ioctl+0x154>
 8007a96:	2202      	movs	r2, #2
 8007a98:	4951      	ldr	r1, [pc, #324]	; (8007be0 <dwt_ioctl+0x458>)
 8007a9a:	f7fe fae2 	bl	8006062 <dwt_write16bitoffsetreg>
 8007a9e:	2500      	movs	r5, #0
 8007aa0:	e71c      	b.n	80078dc <dwt_ioctl+0x154>
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	494f      	ldr	r1, [pc, #316]	; (8007be4 <dwt_ioctl+0x45c>)
 8007aa6:	f7fe fadc 	bl	8006062 <dwt_write16bitoffsetreg>
 8007aaa:	2500      	movs	r5, #0
 8007aac:	e716      	b.n	80078dc <dwt_ioctl+0x154>
 8007aae:	2202      	movs	r2, #2
 8007ab0:	494c      	ldr	r1, [pc, #304]	; (8007be4 <dwt_ioctl+0x45c>)
 8007ab2:	f7fe fad6 	bl	8006062 <dwt_write16bitoffsetreg>
 8007ab6:	2500      	movs	r5, #0
 8007ab8:	e710      	b.n	80078dc <dwt_ioctl+0x154>
 8007aba:	2c00      	cmp	r4, #0
 8007abc:	f001 844c 	beq.w	8009358 <dwt_ioctl+0x1bd0>
 8007ac0:	7823      	ldrb	r3, [r4, #0]
 8007ac2:	005b      	lsls	r3, r3, #1
 8007ac4:	f003 0306 	and.w	r3, r3, #6
 8007ac8:	9300      	str	r3, [sp, #0]
 8007aca:	f06f 0306 	mvn.w	r3, #6
 8007ace:	2200      	movs	r2, #0
 8007ad0:	4945      	ldr	r1, [pc, #276]	; (8007be8 <dwt_ioctl+0x460>)
 8007ad2:	f7fe ff59 	bl	8006988 <dwt_modify32bitoffsetreg>
 8007ad6:	2500      	movs	r5, #0
 8007ad8:	e700      	b.n	80078dc <dwt_ioctl+0x154>
 8007ada:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007ade:	9300      	str	r3, [sp, #0]
 8007ae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	4941      	ldr	r1, [pc, #260]	; (8007bec <dwt_ioctl+0x464>)
 8007ae8:	f7fe ff4e 	bl	8006988 <dwt_modify32bitoffsetreg>
 8007aec:	2500      	movs	r5, #0
 8007aee:	e6f5      	b.n	80078dc <dwt_ioctl+0x154>
 8007af0:	2c00      	cmp	r4, #0
 8007af2:	f001 8434 	beq.w	800935e <dwt_ioctl+0x1bd6>
 8007af6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007af8:	7b5b      	ldrb	r3, [r3, #13]
 8007afa:	7023      	strb	r3, [r4, #0]
 8007afc:	2500      	movs	r5, #0
 8007afe:	e6ed      	b.n	80078dc <dwt_ioctl+0x154>
 8007b00:	2c00      	cmp	r4, #0
 8007b02:	f001 842f 	beq.w	8009364 <dwt_ioctl+0x1bdc>
 8007b06:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007b08:	7a9b      	ldrb	r3, [r3, #10]
 8007b0a:	7023      	strb	r3, [r4, #0]
 8007b0c:	2500      	movs	r5, #0
 8007b0e:	e6e5      	b.n	80078dc <dwt_ioctl+0x154>
 8007b10:	2c00      	cmp	r4, #0
 8007b12:	f001 842a 	beq.w	800936a <dwt_ioctl+0x1be2>
 8007b16:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007b18:	7adb      	ldrb	r3, [r3, #11]
 8007b1a:	7023      	strb	r3, [r4, #0]
 8007b1c:	2500      	movs	r5, #0
 8007b1e:	e6dd      	b.n	80078dc <dwt_ioctl+0x154>
 8007b20:	2c00      	cmp	r4, #0
 8007b22:	f001 8425 	beq.w	8009370 <dwt_ioctl+0x1be8>
 8007b26:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	6023      	str	r3, [r4, #0]
 8007b2c:	2500      	movs	r5, #0
 8007b2e:	e6d5      	b.n	80078dc <dwt_ioctl+0x154>
 8007b30:	2c00      	cmp	r4, #0
 8007b32:	f001 8420 	beq.w	8009376 <dwt_ioctl+0x1bee>
 8007b36:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	6023      	str	r3, [r4, #0]
 8007b3c:	2500      	movs	r5, #0
 8007b3e:	e6cd      	b.n	80078dc <dwt_ioctl+0x154>
 8007b40:	f7fe fb7e 	bl	8006240 <ull_signal_rx_buff_free>
 8007b44:	2500      	movs	r5, #0
 8007b46:	e6c9      	b.n	80078dc <dwt_ioctl+0x154>
 8007b48:	2c00      	cmp	r4, #0
 8007b4a:	f001 8417 	beq.w	800937c <dwt_ioctl+0x1bf4>
 8007b4e:	6821      	ldr	r1, [r4, #0]
 8007b50:	f7fe fd24 	bl	800659c <ull_setrxaftertxdelay>
 8007b54:	2500      	movs	r5, #0
 8007b56:	e6c1      	b.n	80078dc <dwt_ioctl+0x154>
 8007b58:	2c00      	cmp	r4, #0
 8007b5a:	f001 8412 	beq.w	8009382 <dwt_ioctl+0x1bfa>
 8007b5e:	7825      	ldrb	r5, [r4, #0]
 8007b60:	b15d      	cbz	r5, 8007b7a <dwt_ioctl+0x3f2>
 8007b62:	6864      	ldr	r4, [r4, #4]
 8007b64:	2340      	movs	r3, #64	; 0x40
 8007b66:	9300      	str	r3, [sp, #0]
 8007b68:	23ff      	movs	r3, #255	; 0xff
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	2110      	movs	r1, #16
 8007b6e:	f7ff f8f5 	bl	8006d5c <dwt_modify8bitoffsetreg>
 8007b72:	2d02      	cmp	r5, #2
 8007b74:	d107      	bne.n	8007b86 <dwt_ioctl+0x3fe>
 8007b76:	60f4      	str	r4, [r6, #12]
 8007b78:	e005      	b.n	8007b86 <dwt_ioctl+0x3fe>
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	9200      	str	r2, [sp, #0]
 8007b7e:	23bf      	movs	r3, #191	; 0xbf
 8007b80:	2110      	movs	r1, #16
 8007b82:	f7ff f8eb 	bl	8006d5c <dwt_modify8bitoffsetreg>
 8007b86:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8007b88:	759d      	strb	r5, [r3, #22]
 8007b8a:	2500      	movs	r5, #0
 8007b8c:	e6a6      	b.n	80078dc <dwt_ioctl+0x154>
 8007b8e:	2c00      	cmp	r4, #0
 8007b90:	f001 83fa 	beq.w	8009388 <dwt_ioctl+0x1c00>
 8007b94:	6865      	ldr	r5, [r4, #4]
 8007b96:	7823      	ldrb	r3, [r4, #0]
 8007b98:	2203      	movs	r2, #3
 8007b9a:	4915      	ldr	r1, [pc, #84]	; (8007bf0 <dwt_ioctl+0x468>)
 8007b9c:	f7fe fa0f 	bl	8005fbe <dwt_write8bitoffsetreg>
 8007ba0:	b945      	cbnz	r5, 8007bb4 <dwt_ioctl+0x42c>
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	9200      	str	r2, [sp, #0]
 8007ba6:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8007baa:	2110      	movs	r1, #16
 8007bac:	4630      	mov	r0, r6
 8007bae:	f7ff fa87 	bl	80070c0 <dwt_modify16bitoffsetreg>
 8007bb2:	e693      	b.n	80078dc <dwt_ioctl+0x154>
 8007bb4:	f44f 2381 	mov.w	r3, #264192	; 0x40800
 8007bb8:	9300      	str	r3, [sp, #0]
 8007bba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	2110      	movs	r1, #16
 8007bc2:	4630      	mov	r0, r6
 8007bc4:	f7fe fee0 	bl	8006988 <dwt_modify32bitoffsetreg>
 8007bc8:	2500      	movs	r5, #0
 8007bca:	e687      	b.n	80078dc <dwt_ioctl+0x154>
 8007bcc:	000f0030 	.word	0x000f0030
 8007bd0:	00010054 	.word	0x00010054
 8007bd4:	00010058 	.word	0x00010058
 8007bd8:	0001005c 	.word	0x0001005c
 8007bdc:	00010060 	.word	0x00010060
 8007be0:	00010018 	.word	0x00010018
 8007be4:	0001001c 	.word	0x0001001c
 8007be8:	00010014 	.word	0x00010014
 8007bec:	00110004 	.word	0x00110004
 8007bf0:	00010008 	.word	0x00010008
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	4611      	mov	r1, r2
 8007bf8:	f7fd fdf2 	bl	80057e0 <dwt_read32bitoffsetreg>
 8007bfc:	68b2      	ldr	r2, [r6, #8]
 8007bfe:	6813      	ldr	r3, [r2, #0]
 8007c00:	4043      	eors	r3, r0
 8007c02:	6852      	ldr	r2, [r2, #4]
 8007c04:	4213      	tst	r3, r2
 8007c06:	bf14      	ite	ne
 8007c08:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8007c0c:	2500      	moveq	r5, #0
 8007c0e:	e665      	b.n	80078dc <dwt_ioctl+0x154>
 8007c10:	2c00      	cmp	r4, #0
 8007c12:	f001 83bc 	beq.w	800938e <dwt_ioctl+0x1c06>
 8007c16:	7821      	ldrb	r1, [r4, #0]
 8007c18:	f7ff f8b4 	bl	8006d84 <ull_configciadiag>
 8007c1c:	2500      	movs	r5, #0
 8007c1e:	e65d      	b.n	80078dc <dwt_ioctl+0x154>
 8007c20:	b93a      	cbnz	r2, 8007c32 <dwt_ioctl+0x4aa>
 8007c22:	2200      	movs	r2, #0
 8007c24:	9200      	str	r2, [sp, #0]
 8007c26:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8007c2a:	49ae      	ldr	r1, [pc, #696]	; (8007ee4 <dwt_ioctl+0x75c>)
 8007c2c:	f7ff fa48 	bl	80070c0 <dwt_modify16bitoffsetreg>
 8007c30:	e654      	b.n	80078dc <dwt_ioctl+0x154>
 8007c32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c36:	9300      	str	r3, [sp, #0]
 8007c38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	49a9      	ldr	r1, [pc, #676]	; (8007ee4 <dwt_ioctl+0x75c>)
 8007c40:	f7ff fa3e 	bl	80070c0 <dwt_modify16bitoffsetreg>
 8007c44:	2500      	movs	r5, #0
 8007c46:	e649      	b.n	80078dc <dwt_ioctl+0x154>
 8007c48:	f002 0201 	and.w	r2, r2, #1
 8007c4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007c50:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8007c54:	2a00      	cmp	r2, #0
 8007c56:	bf08      	it	eq
 8007c58:	460b      	moveq	r3, r1
 8007c5a:	02d2      	lsls	r2, r2, #11
 8007c5c:	f015 0f02 	tst.w	r5, #2
 8007c60:	bf12      	itee	ne
 8007c62:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8007c66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c6a:	b29b      	uxtheq	r3, r3
 8007c6c:	9200      	str	r2, [sp, #0]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	499c      	ldr	r1, [pc, #624]	; (8007ee4 <dwt_ioctl+0x75c>)
 8007c72:	f7ff fa25 	bl	80070c0 <dwt_modify16bitoffsetreg>
 8007c76:	2500      	movs	r5, #0
 8007c78:	e630      	b.n	80078dc <dwt_ioctl+0x154>
 8007c7a:	b92a      	cbnz	r2, 8007c88 <dwt_ioctl+0x500>
 8007c7c:	4b9a      	ldr	r3, [pc, #616]	; (8007ee8 <dwt_ioctl+0x760>)
 8007c7e:	2202      	movs	r2, #2
 8007c80:	499a      	ldr	r1, [pc, #616]	; (8007eec <dwt_ioctl+0x764>)
 8007c82:	f7fe faef 	bl	8006264 <dwt_write32bitoffsetreg>
 8007c86:	e629      	b.n	80078dc <dwt_ioctl+0x154>
 8007c88:	4b99      	ldr	r3, [pc, #612]	; (8007ef0 <dwt_ioctl+0x768>)
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	4997      	ldr	r1, [pc, #604]	; (8007eec <dwt_ioctl+0x764>)
 8007c8e:	f7fe fae9 	bl	8006264 <dwt_write32bitoffsetreg>
 8007c92:	2500      	movs	r5, #0
 8007c94:	e622      	b.n	80078dc <dwt_ioctl+0x154>
 8007c96:	4611      	mov	r1, r2
 8007c98:	f7fe fc96 	bl	80065c8 <ull_setlnapamode>
 8007c9c:	2500      	movs	r5, #0
 8007c9e:	e61d      	b.n	80078dc <dwt_ioctl+0x154>
 8007ca0:	2c00      	cmp	r4, #0
 8007ca2:	f001 8377 	beq.w	8009394 <dwt_ioctl+0x1c0c>
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	4992      	ldr	r1, [pc, #584]	; (8007ef4 <dwt_ioctl+0x76c>)
 8007caa:	f7fd fdc1 	bl	8005830 <dwt_read8bitoffsetreg>
 8007cae:	7020      	strb	r0, [r4, #0]
 8007cb0:	2500      	movs	r5, #0
 8007cb2:	e613      	b.n	80078dc <dwt_ioctl+0x154>
 8007cb4:	4621      	mov	r1, r4
 8007cb6:	f7fe fca9 	bl	800660c <ull_configurestskey>
 8007cba:	2500      	movs	r5, #0
 8007cbc:	e60e      	b.n	80078dc <dwt_ioctl+0x154>
 8007cbe:	4621      	mov	r1, r4
 8007cc0:	f7fe fcc8 	bl	8006654 <ull_configurestsiv>
 8007cc4:	2500      	movs	r5, #0
 8007cc6:	e609      	b.n	80078dc <dwt_ioctl+0x154>
 8007cc8:	2301      	movs	r3, #1
 8007cca:	9300      	str	r3, [sp, #0]
 8007ccc:	23ff      	movs	r3, #255	; 0xff
 8007cce:	2200      	movs	r2, #0
 8007cd0:	4989      	ldr	r1, [pc, #548]	; (8007ef8 <dwt_ioctl+0x770>)
 8007cd2:	f7ff f843 	bl	8006d5c <dwt_modify8bitoffsetreg>
 8007cd6:	2500      	movs	r5, #0
 8007cd8:	e600      	b.n	80078dc <dwt_ioctl+0x154>
 8007cda:	4611      	mov	r1, r2
 8007cdc:	f7fe fcde 	bl	800669c <ull_configmrxlut>
 8007ce0:	2500      	movs	r5, #0
 8007ce2:	e5fb      	b.n	80078dc <dwt_ioctl+0x154>
 8007ce4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007ce6:	7a1b      	ldrb	r3, [r3, #8]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d137      	bne.n	8007d5c <dwt_ioctl+0x5d4>
 8007cec:	2314      	movs	r3, #20
 8007cee:	2201      	movs	r2, #1
 8007cf0:	4982      	ldr	r1, [pc, #520]	; (8007efc <dwt_ioctl+0x774>)
 8007cf2:	4630      	mov	r0, r6
 8007cf4:	f7fe f963 	bl	8005fbe <dwt_write8bitoffsetreg>
 8007cf8:	2318      	movs	r3, #24
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	4980      	ldr	r1, [pc, #512]	; (8007f00 <dwt_ioctl+0x778>)
 8007cfe:	4630      	mov	r0, r6
 8007d00:	f7fe fab0 	bl	8006264 <dwt_write32bitoffsetreg>
 8007d04:	23e8      	movs	r3, #232	; 0xe8
 8007d06:	2200      	movs	r2, #0
 8007d08:	497e      	ldr	r1, [pc, #504]	; (8007f04 <dwt_ioctl+0x77c>)
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	f7fe faaa 	bl	8006264 <dwt_write32bitoffsetreg>
 8007d10:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8007d12:	8a5b      	ldrh	r3, [r3, #18]
 8007d14:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007d18:	2b20      	cmp	r3, #32
 8007d1a:	d022      	beq.n	8007d62 <dwt_ioctl+0x5da>
 8007d1c:	2b60      	cmp	r3, #96	; 0x60
 8007d1e:	d02b      	beq.n	8007d78 <dwt_ioctl+0x5f0>
 8007d20:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8007d22:	7e1b      	ldrb	r3, [r3, #24]
 8007d24:	085b      	lsrs	r3, r3, #1
 8007d26:	d032      	beq.n	8007d8e <dwt_ioctl+0x606>
 8007d28:	2200      	movs	r2, #0
 8007d2a:	4977      	ldr	r1, [pc, #476]	; (8007f08 <dwt_ioctl+0x780>)
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	f7fd fd6d 	bl	800580c <dwt_read16bitoffsetreg>
 8007d32:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 8007d36:	3b09      	subs	r3, #9
 8007d38:	2b0f      	cmp	r3, #15
 8007d3a:	f201 832e 	bhi.w	800939a <dwt_ioctl+0x1c12>
 8007d3e:	f000 0001 	and.w	r0, r0, #1
 8007d42:	2800      	cmp	r0, #0
 8007d44:	bf0c      	ite	eq
 8007d46:	2105      	moveq	r1, #5
 8007d48:	2109      	movne	r1, #9
 8007d4a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8007d4c:	7a5b      	ldrb	r3, [r3, #9]
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d029      	beq.n	8007da6 <dwt_ioctl+0x61e>
 8007d52:	4630      	mov	r0, r6
 8007d54:	f7fe fca2 	bl	800669c <ull_configmrxlut>
 8007d58:	2500      	movs	r5, #0
 8007d5a:	e5bf      	b.n	80078dc <dwt_ioctl+0x154>
 8007d5c:	f7ff f9ca 	bl	80070f4 <_dwt_prog_ldo_and_bias_tune>
 8007d60:	e7c4      	b.n	8007cec <dwt_ioctl+0x564>
 8007d62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d66:	9300      	str	r3, [sp, #0]
 8007d68:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	4967      	ldr	r1, [pc, #412]	; (8007f0c <dwt_ioctl+0x784>)
 8007d70:	4630      	mov	r0, r6
 8007d72:	f7fe fe09 	bl	8006988 <dwt_modify32bitoffsetreg>
 8007d76:	e7d3      	b.n	8007d20 <dwt_ioctl+0x598>
 8007d78:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007d7c:	9300      	str	r3, [sp, #0]
 8007d7e:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 8007d82:	2200      	movs	r2, #0
 8007d84:	4961      	ldr	r1, [pc, #388]	; (8007f0c <dwt_ioctl+0x784>)
 8007d86:	4630      	mov	r0, r6
 8007d88:	f7fe fdfe 	bl	8006988 <dwt_modify32bitoffsetreg>
 8007d8c:	e7c8      	b.n	8007d20 <dwt_ioctl+0x598>
 8007d8e:	2301      	movs	r3, #1
 8007d90:	2200      	movs	r2, #0
 8007d92:	495f      	ldr	r1, [pc, #380]	; (8007f10 <dwt_ioctl+0x788>)
 8007d94:	4630      	mov	r0, r6
 8007d96:	f7fe f912 	bl	8005fbe <dwt_write8bitoffsetreg>
 8007d9a:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8007d9c:	7e13      	ldrb	r3, [r2, #24]
 8007d9e:	f043 0302 	orr.w	r3, r3, #2
 8007da2:	7613      	strb	r3, [r2, #24]
 8007da4:	e7c0      	b.n	8007d28 <dwt_ioctl+0x5a0>
 8007da6:	4630      	mov	r0, r6
 8007da8:	f7fe fe12 	bl	80069d0 <_dwt_kick_dgc_on_wakeup>
 8007dac:	2500      	movs	r5, #0
 8007dae:	e595      	b.n	80078dc <dwt_ioctl+0x154>
 8007db0:	2c00      	cmp	r4, #0
 8007db2:	f001 82f5 	beq.w	80093a0 <dwt_ioctl+0x1c18>
 8007db6:	7823      	ldrb	r3, [r4, #0]
 8007db8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8007dba:	75d3      	strb	r3, [r2, #23]
 8007dbc:	031b      	lsls	r3, r3, #12
 8007dbe:	f403 4330 	and.w	r3, r3, #45056	; 0xb000
 8007dc2:	9300      	str	r3, [sp, #0]
 8007dc4:	f644 73ff 	movw	r3, #20479	; 0x4fff
 8007dc8:	2200      	movs	r2, #0
 8007dca:	2110      	movs	r1, #16
 8007dcc:	f7ff f978 	bl	80070c0 <dwt_modify16bitoffsetreg>
 8007dd0:	2500      	movs	r5, #0
 8007dd2:	e583      	b.n	80078dc <dwt_ioctl+0x154>
 8007dd4:	2c00      	cmp	r4, #0
 8007dd6:	f001 82e6 	beq.w	80093a6 <dwt_ioctl+0x1c1e>
 8007dda:	8823      	ldrh	r3, [r4, #0]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8007de2:	f7fe f93e 	bl	8006062 <dwt_write16bitoffsetreg>
 8007de6:	2500      	movs	r5, #0
 8007de8:	e578      	b.n	80078dc <dwt_ioctl+0x154>
 8007dea:	2c00      	cmp	r4, #0
 8007dec:	f001 82de 	beq.w	80093ac <dwt_ioctl+0x1c24>
 8007df0:	2200      	movs	r2, #0
 8007df2:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8007df6:	f7fd fd09 	bl	800580c <dwt_read16bitoffsetreg>
 8007dfa:	8020      	strh	r0, [r4, #0]
 8007dfc:	2500      	movs	r5, #0
 8007dfe:	e56d      	b.n	80078dc <dwt_ioctl+0x154>
 8007e00:	2c00      	cmp	r4, #0
 8007e02:	f001 82d6 	beq.w	80093b2 <dwt_ioctl+0x1c2a>
 8007e06:	8823      	ldrh	r3, [r4, #0]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	4942      	ldr	r1, [pc, #264]	; (8007f14 <dwt_ioctl+0x78c>)
 8007e0c:	f7fe f929 	bl	8006062 <dwt_write16bitoffsetreg>
 8007e10:	2500      	movs	r5, #0
 8007e12:	e563      	b.n	80078dc <dwt_ioctl+0x154>
 8007e14:	2c00      	cmp	r4, #0
 8007e16:	f001 82cf 	beq.w	80093b8 <dwt_ioctl+0x1c30>
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	493d      	ldr	r1, [pc, #244]	; (8007f14 <dwt_ioctl+0x78c>)
 8007e1e:	f7fd fcf5 	bl	800580c <dwt_read16bitoffsetreg>
 8007e22:	8020      	strh	r0, [r4, #0]
 8007e24:	2500      	movs	r5, #0
 8007e26:	e559      	b.n	80078dc <dwt_ioctl+0x154>
 8007e28:	2c00      	cmp	r4, #0
 8007e2a:	f001 82c8 	beq.w	80093be <dwt_ioctl+0x1c36>
 8007e2e:	88a3      	ldrh	r3, [r4, #4]
 8007e30:	88e2      	ldrh	r2, [r4, #6]
 8007e32:	6821      	ldr	r1, [r4, #0]
 8007e34:	9100      	str	r1, [sp, #0]
 8007e36:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 8007e3a:	f7fe f8b5 	bl	8005fa8 <dwt_writetodevice>
 8007e3e:	2500      	movs	r5, #0
 8007e40:	e54c      	b.n	80078dc <dwt_ioctl+0x154>
 8007e42:	2c00      	cmp	r4, #0
 8007e44:	f001 82be 	beq.w	80093c4 <dwt_ioctl+0x1c3c>
 8007e48:	88a3      	ldrh	r3, [r4, #4]
 8007e4a:	88e2      	ldrh	r2, [r4, #6]
 8007e4c:	6821      	ldr	r1, [r4, #0]
 8007e4e:	9100      	str	r1, [sp, #0]
 8007e50:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 8007e54:	f7fd fcba 	bl	80057cc <dwt_readfromdevice>
 8007e58:	2500      	movs	r5, #0
 8007e5a:	e53f      	b.n	80078dc <dwt_ioctl+0x154>
 8007e5c:	2c00      	cmp	r4, #0
 8007e5e:	f001 82b4 	beq.w	80093ca <dwt_ioctl+0x1c42>
 8007e62:	88e3      	ldrh	r3, [r4, #6]
 8007e64:	88a2      	ldrh	r2, [r4, #4]
 8007e66:	6821      	ldr	r1, [r4, #0]
 8007e68:	f7fe fcc2 	bl	80067f0 <ull_readrxdata>
 8007e6c:	2500      	movs	r5, #0
 8007e6e:	e535      	b.n	80078dc <dwt_ioctl+0x154>
 8007e70:	2c00      	cmp	r4, #0
 8007e72:	f001 82ad 	beq.w	80093d0 <dwt_ioctl+0x1c48>
 8007e76:	88e3      	ldrh	r3, [r4, #6]
 8007e78:	6822      	ldr	r2, [r4, #0]
 8007e7a:	88a1      	ldrh	r1, [r4, #4]
 8007e7c:	f7fe fd52 	bl	8006924 <ull_writetxdata>
 8007e80:	2500      	movs	r5, #0
 8007e82:	e52b      	b.n	80078dc <dwt_ioctl+0x154>
 8007e84:	4611      	mov	r1, r2
 8007e86:	f7fe fce9 	bl	800685c <ull_rxenable>
 8007e8a:	2500      	movs	r5, #0
 8007e8c:	e526      	b.n	80078dc <dwt_ioctl+0x154>
 8007e8e:	2c00      	cmp	r4, #0
 8007e90:	f001 82a1 	beq.w	80093d6 <dwt_ioctl+0x1c4e>
 8007e94:	7923      	ldrb	r3, [r4, #4]
 8007e96:	8862      	ldrh	r2, [r4, #2]
 8007e98:	8821      	ldrh	r1, [r4, #0]
 8007e9a:	f7fe ff2d 	bl	8006cf8 <ull_writetxfctrl>
 8007e9e:	2500      	movs	r5, #0
 8007ea0:	e51c      	b.n	80078dc <dwt_ioctl+0x154>
 8007ea2:	2c00      	cmp	r4, #0
 8007ea4:	f001 829a 	beq.w	80093dc <dwt_ioctl+0x1c54>
 8007ea8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007eaa:	7bdb      	ldrb	r3, [r3, #15]
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d00c      	beq.n	8007eca <dwt_ioctl+0x742>
 8007eb0:	2b03      	cmp	r3, #3
 8007eb2:	d110      	bne.n	8007ed6 <dwt_ioctl+0x74e>
 8007eb4:	220c      	movs	r2, #12
 8007eb6:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8007eba:	f7fd fca7 	bl	800580c <dwt_read16bitoffsetreg>
 8007ebe:	b200      	sxth	r0, r0
 8007ec0:	f340 030c 	sbfx	r3, r0, #0, #13
 8007ec4:	8023      	strh	r3, [r4, #0]
 8007ec6:	2500      	movs	r5, #0
 8007ec8:	e508      	b.n	80078dc <dwt_ioctl+0x154>
 8007eca:	2200      	movs	r2, #0
 8007ecc:	4912      	ldr	r1, [pc, #72]	; (8007f18 <dwt_ioctl+0x790>)
 8007ece:	f7fd fc9d 	bl	800580c <dwt_read16bitoffsetreg>
 8007ed2:	b200      	sxth	r0, r0
 8007ed4:	e7f4      	b.n	8007ec0 <dwt_ioctl+0x738>
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	4910      	ldr	r1, [pc, #64]	; (8007f1c <dwt_ioctl+0x794>)
 8007eda:	f7fd fc97 	bl	800580c <dwt_read16bitoffsetreg>
 8007ede:	b200      	sxth	r0, r0
 8007ee0:	e7ee      	b.n	8007ec0 <dwt_ioctl+0x738>
 8007ee2:	bf00      	nop
 8007ee4:	00110008 	.word	0x00110008
 8007ee8:	00d20874 	.word	0x00d20874
 8007eec:	00110010 	.word	0x00110010
 8007ef0:	04d28874 	.word	0x04d28874
 8007ef4:	0007001c 	.word	0x0007001c
 8007ef8:	00020004 	.word	0x00020004
 8007efc:	00070050 	.word	0x00070050
 8007f00:	001f000c 	.word	0x001f000c
 8007f04:	001f0010 	.word	0x001f0010
 8007f08:	00010014 	.word	0x00010014
 8007f0c:	000b0008 	.word	0x000b0008
 8007f10:	00010028 	.word	0x00010028
 8007f14:	00010004 	.word	0x00010004
 8007f18:	0018000c 	.word	0x0018000c
 8007f1c:	000c0020 	.word	0x000c0020
 8007f20:	2c00      	cmp	r4, #0
 8007f22:	f001 825e 	beq.w	80093e2 <dwt_ioctl+0x1c5a>
 8007f26:	ab0c      	add	r3, sp, #48	; 0x30
 8007f28:	9300      	str	r3, [sp, #0]
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	49bb      	ldr	r1, [pc, #748]	; (800821c <dwt_ioctl+0xa94>)
 8007f30:	f7fd fc4c 	bl	80057cc <dwt_readfromdevice>
 8007f34:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8007f38:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8007f3c:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8007f40:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8007f44:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007f48:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8007f4c:	bf1c      	itt	ne
 8007f4e:	ea6f 3303 	mvnne.w	r3, r3, lsl #12
 8007f52:	ea6f 3313 	mvnne.w	r3, r3, lsr #12
 8007f56:	6023      	str	r3, [r4, #0]
 8007f58:	2500      	movs	r5, #0
 8007f5a:	e4bf      	b.n	80078dc <dwt_ioctl+0x154>
 8007f5c:	f7fe f892 	bl	8006084 <ull_clearaonconfig>
 8007f60:	2500      	movs	r5, #0
 8007f62:	e4bb      	b.n	80078dc <dwt_ioctl+0x154>
 8007f64:	2c00      	cmp	r4, #0
 8007f66:	f001 823f 	beq.w	80093e8 <dwt_ioctl+0x1c60>
 8007f6a:	8861      	ldrh	r1, [r4, #2]
 8007f6c:	f7fe ff40 	bl	8006df0 <ull_calcbandwidthadj>
 8007f70:	7020      	strb	r0, [r4, #0]
 8007f72:	2500      	movs	r5, #0
 8007f74:	e4b2      	b.n	80078dc <dwt_ioctl+0x154>
 8007f76:	4621      	mov	r1, r4
 8007f78:	f7fd fc68 	bl	800584c <ull_readdiagnostics>
 8007f7c:	2500      	movs	r5, #0
 8007f7e:	e4ad      	b.n	80078dc <dwt_ioctl+0x154>
 8007f80:	2c00      	cmp	r4, #0
 8007f82:	f001 8234 	beq.w	80093ee <dwt_ioctl+0x1c66>
 8007f86:	2201      	movs	r2, #1
 8007f88:	2174      	movs	r1, #116	; 0x74
 8007f8a:	f7fd fc29 	bl	80057e0 <dwt_read32bitoffsetreg>
 8007f8e:	6020      	str	r0, [r4, #0]
 8007f90:	2500      	movs	r5, #0
 8007f92:	e4a3      	b.n	80078dc <dwt_ioctl+0x154>
 8007f94:	2c00      	cmp	r4, #0
 8007f96:	f001 822d 	beq.w	80093f4 <dwt_ioctl+0x1c6c>
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	2174      	movs	r1, #116	; 0x74
 8007f9e:	f7fd fc1f 	bl	80057e0 <dwt_read32bitoffsetreg>
 8007fa2:	6020      	str	r0, [r4, #0]
 8007fa4:	2500      	movs	r5, #0
 8007fa6:	e499      	b.n	80078dc <dwt_ioctl+0x154>
 8007fa8:	9400      	str	r4, [sp, #0]
 8007faa:	2305      	movs	r3, #5
 8007fac:	2200      	movs	r2, #0
 8007fae:	2174      	movs	r1, #116	; 0x74
 8007fb0:	f7fd fc0c 	bl	80057cc <dwt_readfromdevice>
 8007fb4:	2500      	movs	r5, #0
 8007fb6:	e491      	b.n	80078dc <dwt_ioctl+0x154>
 8007fb8:	2c00      	cmp	r4, #0
 8007fba:	f001 821e 	beq.w	80093fa <dwt_ioctl+0x1c72>
 8007fbe:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007fc0:	7bdb      	ldrb	r3, [r3, #15]
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d014      	beq.n	8007ff0 <dwt_ioctl+0x868>
 8007fc6:	2b03      	cmp	r3, #3
 8007fc8:	d119      	bne.n	8007ffe <dwt_ioctl+0x876>
 8007fca:	2216      	movs	r2, #22
 8007fcc:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8007fd0:	f7fd fc1c 	bl	800580c <dwt_read16bitoffsetreg>
 8007fd4:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8007fd8:	b283      	uxth	r3, r0
 8007fda:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8007fde:	d004      	beq.n	8007fea <dwt_ioctl+0x862>
 8007fe0:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8007fe4:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8007fe8:	b218      	sxth	r0, r3
 8007fea:	8020      	strh	r0, [r4, #0]
 8007fec:	2500      	movs	r5, #0
 8007fee:	e475      	b.n	80078dc <dwt_ioctl+0x154>
 8007ff0:	2202      	movs	r2, #2
 8007ff2:	498b      	ldr	r1, [pc, #556]	; (8008220 <dwt_ioctl+0xa98>)
 8007ff4:	f7fd fc0a 	bl	800580c <dwt_read16bitoffsetreg>
 8007ff8:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8007ffc:	e7ec      	b.n	8007fd8 <dwt_ioctl+0x850>
 8007ffe:	2202      	movs	r2, #2
 8008000:	4988      	ldr	r1, [pc, #544]	; (8008224 <dwt_ioctl+0xa9c>)
 8008002:	f7fd fc03 	bl	800580c <dwt_read16bitoffsetreg>
 8008006:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800800a:	e7e5      	b.n	8007fd8 <dwt_ioctl+0x850>
 800800c:	9400      	str	r4, [sp, #0]
 800800e:	2306      	movs	r3, #6
 8008010:	2200      	movs	r2, #0
 8008012:	4985      	ldr	r1, [pc, #532]	; (8008228 <dwt_ioctl+0xaa0>)
 8008014:	f7fd fbda 	bl	80057cc <dwt_readfromdevice>
 8008018:	7963      	ldrb	r3, [r4, #5]
 800801a:	f003 0301 	and.w	r3, r3, #1
 800801e:	7163      	strb	r3, [r4, #5]
 8008020:	2500      	movs	r5, #0
 8008022:	e45b      	b.n	80078dc <dwt_ioctl+0x154>
 8008024:	2c00      	cmp	r4, #0
 8008026:	f001 81eb 	beq.w	8009400 <dwt_ioctl+0x1c78>
 800802a:	2201      	movs	r2, #1
 800802c:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8008030:	f7fd fbfe 	bl	8005830 <dwt_read8bitoffsetreg>
 8008034:	7020      	strb	r0, [r4, #0]
 8008036:	2500      	movs	r5, #0
 8008038:	e450      	b.n	80078dc <dwt_ioctl+0x154>
 800803a:	2c00      	cmp	r4, #0
 800803c:	f001 81e3 	beq.w	8009406 <dwt_ioctl+0x1c7e>
 8008040:	2200      	movs	r2, #0
 8008042:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8008046:	f7fd fbf3 	bl	8005830 <dwt_read8bitoffsetreg>
 800804a:	7020      	strb	r0, [r4, #0]
 800804c:	2500      	movs	r5, #0
 800804e:	e445      	b.n	80078dc <dwt_ioctl+0x154>
 8008050:	2c00      	cmp	r4, #0
 8008052:	f001 81db 	beq.w	800940c <dwt_ioctl+0x1c84>
 8008056:	88a2      	ldrh	r2, [r4, #4]
 8008058:	6821      	ldr	r1, [r4, #0]
 800805a:	f7fe fd1d 	bl	8006a98 <_dwt_otpprogword32>
 800805e:	2500      	movs	r5, #0
 8008060:	e43c      	b.n	80078dc <dwt_ioctl+0x154>
 8008062:	2c00      	cmp	r4, #0
 8008064:	f001 81d5 	beq.w	8009412 <dwt_ioctl+0x1c8a>
 8008068:	6825      	ldr	r5, [r4, #0]
 800806a:	88a4      	ldrh	r4, [r4, #4]
 800806c:	4622      	mov	r2, r4
 800806e:	4629      	mov	r1, r5
 8008070:	f7fe fd12 	bl	8006a98 <_dwt_otpprogword32>
 8008074:	4621      	mov	r1, r4
 8008076:	4630      	mov	r0, r6
 8008078:	f7fe f84e 	bl	8006118 <_dwt_otpread>
 800807c:	1a2d      	subs	r5, r5, r0
 800807e:	bf18      	it	ne
 8008080:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8008084:	e42a      	b.n	80078dc <dwt_ioctl+0x154>
 8008086:	2a02      	cmp	r2, #2
 8008088:	d00e      	beq.n	80080a8 <dwt_ioctl+0x920>
 800808a:	4c68      	ldr	r4, [pc, #416]	; (800822c <dwt_ioctl+0xaa4>)
 800808c:	2300      	movs	r3, #0
 800808e:	461a      	mov	r2, r3
 8008090:	4621      	mov	r1, r4
 8008092:	4630      	mov	r0, r6
 8008094:	f7fd ff93 	bl	8005fbe <dwt_write8bitoffsetreg>
 8008098:	2302      	movs	r3, #2
 800809a:	2200      	movs	r2, #0
 800809c:	4621      	mov	r1, r4
 800809e:	4630      	mov	r0, r6
 80080a0:	f7fd ff8d 	bl	8005fbe <dwt_write8bitoffsetreg>
 80080a4:	2500      	movs	r5, #0
 80080a6:	e419      	b.n	80078dc <dwt_ioctl+0x154>
 80080a8:	2300      	movs	r3, #0
 80080aa:	9300      	str	r3, [sp, #0]
 80080ac:	23fe      	movs	r3, #254	; 0xfe
 80080ae:	2201      	movs	r2, #1
 80080b0:	495f      	ldr	r1, [pc, #380]	; (8008230 <dwt_ioctl+0xaa8>)
 80080b2:	f7fe fe53 	bl	8006d5c <dwt_modify8bitoffsetreg>
 80080b6:	e7e8      	b.n	800808a <dwt_ioctl+0x902>
 80080b8:	2c00      	cmp	r4, #0
 80080ba:	f001 81ad 	beq.w	8009418 <dwt_ioctl+0x1c90>
 80080be:	8824      	ldrh	r4, [r4, #0]
 80080c0:	b2e2      	uxtb	r2, r4
 80080c2:	f44f 7181 	mov.w	r1, #258	; 0x102
 80080c6:	f7fe f869 	bl	800619c <ull_aon_write>
 80080ca:	0a22      	lsrs	r2, r4, #8
 80080cc:	f240 1103 	movw	r1, #259	; 0x103
 80080d0:	4630      	mov	r0, r6
 80080d2:	f7fe f863 	bl	800619c <ull_aon_write>
 80080d6:	2500      	movs	r5, #0
 80080d8:	e400      	b.n	80078dc <dwt_ioctl+0x154>
 80080da:	2c00      	cmp	r4, #0
 80080dc:	f001 819f 	beq.w	800941e <dwt_ioctl+0x1c96>
 80080e0:	f8df 8158 	ldr.w	r8, [pc, #344]	; 800823c <dwt_ioctl+0xab4>
 80080e4:	2310      	movs	r3, #16
 80080e6:	9300      	str	r3, [sp, #0]
 80080e8:	23ff      	movs	r3, #255	; 0xff
 80080ea:	2200      	movs	r2, #0
 80080ec:	4641      	mov	r1, r8
 80080ee:	f7fe fe35 	bl	8006d5c <dwt_modify8bitoffsetreg>
 80080f2:	f44f 7182 	mov.w	r1, #260	; 0x104
 80080f6:	4630      	mov	r0, r6
 80080f8:	f7fe f830 	bl	800615c <ull_aon_read>
 80080fc:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 8008100:	462a      	mov	r2, r5
 8008102:	f44f 7182 	mov.w	r1, #260	; 0x104
 8008106:	4630      	mov	r0, r6
 8008108:	f7fe f848 	bl	800619c <ull_aon_write>
 800810c:	f045 0204 	orr.w	r2, r5, #4
 8008110:	f44f 7182 	mov.w	r1, #260	; 0x104
 8008114:	4630      	mov	r0, r6
 8008116:	f7fe f841 	bl	800619c <ull_aon_write>
 800811a:	2002      	movs	r0, #2
 800811c:	f7f9 fa0e 	bl	800153c <deca_sleep>
 8008120:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8008124:	4630      	mov	r0, r6
 8008126:	f7fe f819 	bl	800615c <ull_aon_read>
 800812a:	4607      	mov	r7, r0
 800812c:	f240 110f 	movw	r1, #271	; 0x10f
 8008130:	4630      	mov	r0, r6
 8008132:	f7fe f813 	bl	800615c <ull_aon_read>
 8008136:	4681      	mov	r9, r0
 8008138:	462a      	mov	r2, r5
 800813a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800813e:	4630      	mov	r0, r6
 8008140:	f7fe f82c 	bl	800619c <ull_aon_write>
 8008144:	2500      	movs	r5, #0
 8008146:	9500      	str	r5, [sp, #0]
 8008148:	23ef      	movs	r3, #239	; 0xef
 800814a:	462a      	mov	r2, r5
 800814c:	4641      	mov	r1, r8
 800814e:	4630      	mov	r0, r6
 8008150:	f7fe fe04 	bl	8006d5c <dwt_modify8bitoffsetreg>
 8008154:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 8008158:	8027      	strh	r7, [r4, #0]
 800815a:	f7ff bbbf 	b.w	80078dc <dwt_ioctl+0x154>
 800815e:	2c00      	cmp	r4, #0
 8008160:	f001 8160 	beq.w	8009424 <dwt_ioctl+0x1c9c>
 8008164:	78a2      	ldrb	r2, [r4, #2]
 8008166:	8821      	ldrh	r1, [r4, #0]
 8008168:	f7fe f840 	bl	80061ec <ull_configuresleep>
 800816c:	2500      	movs	r5, #0
 800816e:	f7ff bbb5 	b.w	80078dc <dwt_ioctl+0x154>
 8008172:	f7fd ff87 	bl	8006084 <ull_clearaonconfig>
 8008176:	2001      	movs	r0, #1
 8008178:	f7f9 f9e0 	bl	800153c <deca_sleep>
 800817c:	2303      	movs	r3, #3
 800817e:	9300      	str	r3, [sp, #0]
 8008180:	23ff      	movs	r3, #255	; 0xff
 8008182:	2200      	movs	r2, #0
 8008184:	492b      	ldr	r1, [pc, #172]	; (8008234 <dwt_ioctl+0xaac>)
 8008186:	4630      	mov	r0, r6
 8008188:	f7fe fde8 	bl	8006d5c <dwt_modify8bitoffsetreg>
 800818c:	2300      	movs	r3, #0
 800818e:	461a      	mov	r2, r3
 8008190:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
 8008194:	4630      	mov	r0, r6
 8008196:	f7fd ff12 	bl	8005fbe <dwt_write8bitoffsetreg>
 800819a:	2001      	movs	r0, #1
 800819c:	f7f9 f9ce 	bl	800153c <deca_sleep>
 80081a0:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80081a2:	2500      	movs	r5, #0
 80081a4:	73dd      	strb	r5, [r3, #15]
 80081a6:	2202      	movs	r2, #2
 80081a8:	825a      	strh	r2, [r3, #18]
 80081aa:	759d      	strb	r5, [r3, #22]
 80081ac:	75dd      	strb	r5, [r3, #23]
 80081ae:	741d      	strb	r5, [r3, #16]
 80081b0:	f7ff bb94 	b.w	80078dc <dwt_ioctl+0x154>
 80081b4:	2c00      	cmp	r4, #0
 80081b6:	f001 8138 	beq.w	800942a <dwt_ioctl+0x1ca2>
 80081ba:	7823      	ldrb	r3, [r4, #0]
 80081bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081c0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80081c2:	7393      	strb	r3, [r2, #14]
 80081c4:	2200      	movs	r2, #0
 80081c6:	491c      	ldr	r1, [pc, #112]	; (8008238 <dwt_ioctl+0xab0>)
 80081c8:	f7fd fef9 	bl	8005fbe <dwt_write8bitoffsetreg>
 80081cc:	2500      	movs	r5, #0
 80081ce:	f7ff bb85 	b.w	80078dc <dwt_ioctl+0x154>
 80081d2:	2c00      	cmp	r4, #0
 80081d4:	f001 812c 	beq.w	8009430 <dwt_ioctl+0x1ca8>
 80081d8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80081da:	7b9b      	ldrb	r3, [r3, #14]
 80081dc:	7023      	strb	r3, [r4, #0]
 80081de:	2500      	movs	r5, #0
 80081e0:	f7ff bb7c 	b.w	80078dc <dwt_ioctl+0x154>
 80081e4:	2101      	movs	r1, #1
 80081e6:	f7fe fc11 	bl	8006a0c <ull_enable_rf_tx>
 80081ea:	4630      	mov	r0, r6
 80081ec:	f7fe fc42 	bl	8006a74 <ull_enable_rftx_blocks>
 80081f0:	2101      	movs	r1, #1
 80081f2:	4630      	mov	r0, r6
 80081f4:	f7fd ff66 	bl	80060c4 <ull_force_clocks>
 80081f8:	220f      	movs	r2, #15
 80081fa:	2101      	movs	r1, #1
 80081fc:	4630      	mov	r0, r6
 80081fe:	f7ff f86f 	bl	80072e0 <ull_repeated_cw>
 8008202:	2500      	movs	r5, #0
 8008204:	f7ff bb6a 	b.w	80078dc <dwt_ioctl+0x154>
 8008208:	2c00      	cmp	r4, #0
 800820a:	f001 8114 	beq.w	8009436 <dwt_ioctl+0x1cae>
 800820e:	6862      	ldr	r2, [r4, #4]
 8008210:	6821      	ldr	r1, [r4, #0]
 8008212:	f7ff f865 	bl	80072e0 <ull_repeated_cw>
 8008216:	2500      	movs	r5, #0
 8008218:	f7ff bb60 	b.w	80078dc <dwt_ioctl+0x154>
 800821c:	00060029 	.word	0x00060029
 8008220:	00180014 	.word	0x00180014
 8008224:	000c001c 	.word	0x000c001c
 8008228:	000c0018 	.word	0x000c0018
 800822c:	000a0004 	.word	0x000a0004
 8008230:	00110008 	.word	0x00110008
 8008234:	00110004 	.word	0x00110004
 8008238:	00090014 	.word	0x00090014
 800823c:	00070048 	.word	0x00070048
 8008240:	2c00      	cmp	r4, #0
 8008242:	f001 80fb 	beq.w	800943c <dwt_ioctl+0x1cb4>
 8008246:	4dd6      	ldr	r5, [pc, #856]	; (80085a0 <dwt_ioctl+0xe18>)
 8008248:	2200      	movs	r2, #0
 800824a:	4629      	mov	r1, r5
 800824c:	f7fd faf0 	bl	8005830 <dwt_read8bitoffsetreg>
 8008250:	4680      	mov	r8, r0
 8008252:	2302      	movs	r3, #2
 8008254:	9300      	str	r3, [sp, #0]
 8008256:	23ff      	movs	r3, #255	; 0xff
 8008258:	2200      	movs	r2, #0
 800825a:	4629      	mov	r1, r5
 800825c:	4630      	mov	r0, r6
 800825e:	f7fe fd7d 	bl	8006d5c <dwt_modify8bitoffsetreg>
 8008262:	2304      	movs	r3, #4
 8008264:	2200      	movs	r2, #0
 8008266:	49cf      	ldr	r1, [pc, #828]	; (80085a4 <dwt_ioctl+0xe1c>)
 8008268:	4630      	mov	r0, r6
 800826a:	f7fd fea8 	bl	8005fbe <dwt_write8bitoffsetreg>
 800826e:	2301      	movs	r3, #1
 8008270:	2200      	movs	r2, #0
 8008272:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008276:	4630      	mov	r0, r6
 8008278:	f7fd fea1 	bl	8005fbe <dwt_write8bitoffsetreg>
 800827c:	4fca      	ldr	r7, [pc, #808]	; (80085a8 <dwt_ioctl+0xe20>)
 800827e:	2500      	movs	r5, #0
 8008280:	462a      	mov	r2, r5
 8008282:	4639      	mov	r1, r7
 8008284:	4630      	mov	r0, r6
 8008286:	f7fd fad3 	bl	8005830 <dwt_read8bitoffsetreg>
 800828a:	f010 0f01 	tst.w	r0, #1
 800828e:	d0f7      	beq.n	8008280 <dwt_ioctl+0xaf8>
 8008290:	2200      	movs	r2, #0
 8008292:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8008296:	4630      	mov	r0, r6
 8008298:	f7fd fab8 	bl	800580c <dwt_read16bitoffsetreg>
 800829c:	4605      	mov	r5, r0
 800829e:	2300      	movs	r3, #0
 80082a0:	461a      	mov	r2, r3
 80082a2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80082a6:	4630      	mov	r0, r6
 80082a8:	f7fd fe89 	bl	8005fbe <dwt_write8bitoffsetreg>
 80082ac:	2300      	movs	r3, #0
 80082ae:	461a      	mov	r2, r3
 80082b0:	49bc      	ldr	r1, [pc, #752]	; (80085a4 <dwt_ioctl+0xe1c>)
 80082b2:	4630      	mov	r0, r6
 80082b4:	f7fd fe83 	bl	8005fbe <dwt_write8bitoffsetreg>
 80082b8:	4643      	mov	r3, r8
 80082ba:	2200      	movs	r2, #0
 80082bc:	49b8      	ldr	r1, [pc, #736]	; (80085a0 <dwt_ioctl+0xe18>)
 80082be:	4630      	mov	r0, r6
 80082c0:	f7fd fe7d 	bl	8005fbe <dwt_write8bitoffsetreg>
 80082c4:	8025      	strh	r5, [r4, #0]
 80082c6:	2500      	movs	r5, #0
 80082c8:	f7ff bb08 	b.w	80078dc <dwt_ioctl+0x154>
 80082cc:	2c00      	cmp	r4, #0
 80082ce:	f001 80b8 	beq.w	8009442 <dwt_ioctl+0x1cba>
 80082d2:	7923      	ldrb	r3, [r4, #4]
 80082d4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80082d6:	7ad2      	ldrb	r2, [r2, #11]
 80082d8:	1a9b      	subs	r3, r3, r2
 80082da:	ee07 3a90 	vmov	s15, r3
 80082de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082e2:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 80085ac <dwt_ioctl+0xe24>
 80082e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80082ea:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 80082ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80082f2:	edc4 7a00 	vstr	s15, [r4]
 80082f6:	2500      	movs	r5, #0
 80082f8:	f7ff baf0 	b.w	80078dc <dwt_ioctl+0x154>
 80082fc:	2c00      	cmp	r4, #0
 80082fe:	f001 80a3 	beq.w	8009448 <dwt_ioctl+0x1cc0>
 8008302:	7923      	ldrb	r3, [r4, #4]
 8008304:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8008306:	7a92      	ldrb	r2, [r2, #10]
 8008308:	1a9b      	subs	r3, r3, r2
 800830a:	ee07 3a90 	vmov	s15, r3
 800830e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008312:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 80085b0 <dwt_ioctl+0xe28>
 8008316:	ee67 7a87 	vmul.f32	s15, s15, s14
 800831a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800831e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008322:	eddf 6aa4 	vldr	s13, [pc, #656]	; 80085b4 <dwt_ioctl+0xe2c>
 8008326:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800832a:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800832e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008332:	edc4 7a00 	vstr	s15, [r4]
 8008336:	2500      	movs	r5, #0
 8008338:	f7ff bad0 	b.w	80078dc <dwt_ioctl+0x154>
 800833c:	2c00      	cmp	r4, #0
 800833e:	f001 8086 	beq.w	800944e <dwt_ioctl+0x1cc6>
 8008342:	6824      	ldr	r4, [r4, #0]
 8008344:	2101      	movs	r1, #1
 8008346:	f7fe fb61 	bl	8006a0c <ull_enable_rf_tx>
 800834a:	4630      	mov	r0, r6
 800834c:	f7fe fb92 	bl	8006a74 <ull_enable_rftx_blocks>
 8008350:	2101      	movs	r1, #1
 8008352:	4630      	mov	r0, r6
 8008354:	f7fd feb6 	bl	80060c4 <ull_force_clocks>
 8008358:	4621      	mov	r1, r4
 800835a:	4630      	mov	r0, r6
 800835c:	f7fe fda4 	bl	8006ea8 <ull_repeated_frames>
 8008360:	2500      	movs	r5, #0
 8008362:	f7ff babb 	b.w	80078dc <dwt_ioctl+0x154>
 8008366:	2500      	movs	r5, #0
 8008368:	9500      	str	r5, [sp, #0]
 800836a:	23ef      	movs	r3, #239	; 0xef
 800836c:	462a      	mov	r2, r5
 800836e:	4992      	ldr	r1, [pc, #584]	; (80085b8 <dwt_ioctl+0xe30>)
 8008370:	f7fe fcf4 	bl	8006d5c <dwt_modify8bitoffsetreg>
 8008374:	2105      	movs	r1, #5
 8008376:	4630      	mov	r0, r6
 8008378:	f7fd fea4 	bl	80060c4 <ull_force_clocks>
 800837c:	2101      	movs	r1, #1
 800837e:	4630      	mov	r0, r6
 8008380:	f7fe fa18 	bl	80067b4 <ull_disable_rf_tx>
 8008384:	4630      	mov	r0, r6
 8008386:	f7fe fa0b 	bl	80067a0 <ull_disable_rftx_blocks>
 800838a:	f7ff baa7 	b.w	80078dc <dwt_ioctl+0x154>
 800838e:	2500      	movs	r5, #0
 8008390:	9500      	str	r5, [sp, #0]
 8008392:	23ef      	movs	r3, #239	; 0xef
 8008394:	462a      	mov	r2, r5
 8008396:	4988      	ldr	r1, [pc, #544]	; (80085b8 <dwt_ioctl+0xe30>)
 8008398:	f7fe fce0 	bl	8006d5c <dwt_modify8bitoffsetreg>
 800839c:	f7ff ba9e 	b.w	80078dc <dwt_ioctl+0x154>
 80083a0:	2c00      	cmp	r4, #0
 80083a2:	f001 8057 	beq.w	8009454 <dwt_ioctl+0x1ccc>
 80083a6:	6821      	ldr	r1, [r4, #0]
 80083a8:	f7fe fd7e 	bl	8006ea8 <ull_repeated_frames>
 80083ac:	2500      	movs	r5, #0
 80083ae:	f7ff ba95 	b.w	80078dc <dwt_ioctl+0x154>
 80083b2:	2200      	movs	r2, #0
 80083b4:	4981      	ldr	r1, [pc, #516]	; (80085bc <dwt_ioctl+0xe34>)
 80083b6:	f7fd fa29 	bl	800580c <dwt_read16bitoffsetreg>
 80083ba:	f3c0 050b 	ubfx	r5, r0, #0, #12
 80083be:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80083c2:	bf18      	it	ne
 80083c4:	f445 4570 	orrne.w	r5, r5, #61440	; 0xf000
 80083c8:	b22d      	sxth	r5, r5
 80083ca:	8025      	strh	r5, [r4, #0]
 80083cc:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80083ce:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80083d2:	1aed      	subs	r5, r5, r3
 80083d4:	f7ff ba82 	b.w	80078dc <dwt_ioctl+0x154>
 80083d8:	2c00      	cmp	r4, #0
 80083da:	f001 806d 	beq.w	80094b8 <dwt_ioctl+0x1d30>
 80083de:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80083e2:	7a23      	ldrb	r3, [r4, #8]
 80083e4:	f899 2013 	ldrb.w	r2, [r9, #19]
 80083e8:	2aff      	cmp	r2, #255	; 0xff
 80083ea:	f000 813f 	beq.w	800866c <dwt_ioctl+0xee4>
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d136      	bne.n	8008460 <dwt_ioctl+0xcd8>
 80083f2:	f8d9 3000 	ldr.w	r3, [r9]
 80083f6:	9300      	str	r3, [sp, #0]
 80083f8:	230c      	movs	r3, #12
 80083fa:	2200      	movs	r2, #0
 80083fc:	4970      	ldr	r1, [pc, #448]	; (80085c0 <dwt_ioctl+0xe38>)
 80083fe:	f7fd fdd3 	bl	8005fa8 <dwt_writetodevice>
 8008402:	f899 300c 	ldrb.w	r3, [r9, #12]
 8008406:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 800840a:	18d1      	adds	r1, r2, r3
 800840c:	f899 2012 	ldrb.w	r2, [r9, #18]
 8008410:	2a00      	cmp	r2, #0
 8008412:	d15f      	bne.n	80084d4 <dwt_ioctl+0xd4c>
 8008414:	f899 0010 	ldrb.w	r0, [r9, #16]
 8008418:	2800      	cmp	r0, #0
 800841a:	bf0b      	itete	eq
 800841c:	227f      	moveq	r2, #127	; 0x7f
 800841e:	f44f 6280 	movne.w	r2, #1024	; 0x400
 8008422:	f44f 15b0 	moveq.w	r5, #1441792	; 0x160000
 8008426:	f44f 15a0 	movne.w	r5, #1310720	; 0x140000
 800842a:	f899 0013 	ldrb.w	r0, [r9, #19]
 800842e:	1a12      	subs	r2, r2, r0
 8008430:	3a02      	subs	r2, #2
 8008432:	4291      	cmp	r1, r2
 8008434:	f200 8120 	bhi.w	8008678 <dwt_ioctl+0xef0>
 8008438:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800843c:	9200      	str	r2, [sp, #0]
 800843e:	2200      	movs	r2, #0
 8008440:	4629      	mov	r1, r5
 8008442:	4630      	mov	r0, r6
 8008444:	f7fd fdb0 	bl	8005fa8 <dwt_writetodevice>
 8008448:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800844c:	f899 200c 	ldrb.w	r2, [r9, #12]
 8008450:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8008454:	9100      	str	r1, [sp, #0]
 8008456:	4629      	mov	r1, r5
 8008458:	4630      	mov	r0, r6
 800845a:	f7fd fda5 	bl	8005fa8 <dwt_writetodevice>
 800845e:	e04a      	b.n	80084f6 <dwt_ioctl+0xd6e>
 8008460:	f8d9 3000 	ldr.w	r3, [r9]
 8008464:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 8008468:	7a9a      	ldrb	r2, [r3, #10]
 800846a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 800846e:	7a5a      	ldrb	r2, [r3, #9]
 8008470:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 8008474:	7a1a      	ldrb	r2, [r3, #8]
 8008476:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
 800847a:	79da      	ldrb	r2, [r3, #7]
 800847c:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 8008480:	799a      	ldrb	r2, [r3, #6]
 8008482:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 8008486:	795a      	ldrb	r2, [r3, #5]
 8008488:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
 800848c:	791a      	ldrb	r2, [r3, #4]
 800848e:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 8008492:	78da      	ldrb	r2, [r3, #3]
 8008494:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
 8008498:	789a      	ldrb	r2, [r3, #2]
 800849a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 800849e:	785a      	ldrb	r2, [r3, #1]
 80084a0:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 80084a4:	781a      	ldrb	r2, [r3, #0]
 80084a6:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 80084aa:	2200      	movs	r2, #0
 80084ac:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 80084b0:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 80084b4:	0a09      	lsrs	r1, r1, #8
 80084b6:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
 80084ba:	7b19      	ldrb	r1, [r3, #12]
 80084bc:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
 80084c0:	7adb      	ldrb	r3, [r3, #11]
 80084c2:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 80084c6:	ab0c      	add	r3, sp, #48	; 0x30
 80084c8:	9300      	str	r3, [sp, #0]
 80084ca:	2310      	movs	r3, #16
 80084cc:	493c      	ldr	r1, [pc, #240]	; (80085c0 <dwt_ioctl+0xe38>)
 80084ce:	f7fd fd6b 	bl	8005fa8 <dwt_writetodevice>
 80084d2:	e796      	b.n	8008402 <dwt_ioctl+0xc7a>
 80084d4:	2a01      	cmp	r2, #1
 80084d6:	f040 80cc 	bne.w	8008672 <dwt_ioctl+0xeea>
 80084da:	f899 3011 	ldrb.w	r3, [r9, #17]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80084e4:	bf08      	it	eq
 80084e6:	237f      	moveq	r3, #127	; 0x7f
 80084e8:	f899 2013 	ldrb.w	r2, [r9, #19]
 80084ec:	1a9b      	subs	r3, r3, r2
 80084ee:	3b02      	subs	r3, #2
 80084f0:	4299      	cmp	r1, r3
 80084f2:	f200 80c4 	bhi.w	800867e <dwt_ioctl+0xef6>
 80084f6:	f899 2010 	ldrb.w	r2, [r9, #16]
 80084fa:	1e53      	subs	r3, r2, #1
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d940      	bls.n	8008584 <dwt_ioctl+0xdfc>
 8008502:	f899 3011 	ldrb.w	r3, [r9, #17]
 8008506:	1e59      	subs	r1, r3, #1
 8008508:	b2c9      	uxtb	r1, r1
 800850a:	2901      	cmp	r1, #1
 800850c:	d964      	bls.n	80085d8 <dwt_ioctl+0xe50>
 800850e:	2b04      	cmp	r3, #4
 8008510:	d069      	beq.n	80085e6 <dwt_ioctl+0xe5e>
 8008512:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 8008516:	2200      	movs	r2, #0
 8008518:	492a      	ldr	r1, [pc, #168]	; (80085c4 <dwt_ioctl+0xe3c>)
 800851a:	4630      	mov	r0, r6
 800851c:	f7fd fea2 	bl	8006264 <dwt_write32bitoffsetreg>
 8008520:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8008524:	4a28      	ldr	r2, [pc, #160]	; (80085c8 <dwt_ioctl+0xe40>)
 8008526:	ea02 12c3 	and.w	r2, r2, r3, lsl #7
 800852a:	f899 300c 	ldrb.w	r3, [r9, #12]
 800852e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008532:	4313      	orrs	r3, r2
 8008534:	2200      	movs	r2, #0
 8008536:	4925      	ldr	r1, [pc, #148]	; (80085cc <dwt_ioctl+0xe44>)
 8008538:	4630      	mov	r0, r6
 800853a:	f7fd fe93 	bl	8006264 <dwt_write32bitoffsetreg>
 800853e:	2301      	movs	r3, #1
 8008540:	2200      	movs	r2, #0
 8008542:	4923      	ldr	r1, [pc, #140]	; (80085d0 <dwt_ioctl+0xe48>)
 8008544:	4630      	mov	r0, r6
 8008546:	f7fd fd3a 	bl	8005fbe <dwt_write8bitoffsetreg>
 800854a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80085d4 <dwt_ioctl+0xe4c>
 800854e:	2700      	movs	r7, #0
 8008550:	463a      	mov	r2, r7
 8008552:	4641      	mov	r1, r8
 8008554:	4630      	mov	r0, r6
 8008556:	f7fd f96b 	bl	8005830 <dwt_read8bitoffsetreg>
 800855a:	f010 0f05 	tst.w	r0, #5
 800855e:	d0f7      	beq.n	8008550 <dwt_ioctl+0xdc8>
 8008560:	4605      	mov	r5, r0
 8008562:	4603      	mov	r3, r0
 8008564:	2200      	movs	r2, #0
 8008566:	491b      	ldr	r1, [pc, #108]	; (80085d4 <dwt_ioctl+0xe4c>)
 8008568:	4630      	mov	r0, r6
 800856a:	f7fd fd28 	bl	8005fbe <dwt_write8bitoffsetreg>
 800856e:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8008572:	f025 0330 	bic.w	r3, r5, #48	; 0x30
 8008576:	2b01      	cmp	r3, #1
 8008578:	d042      	beq.n	8008600 <dwt_ioctl+0xe78>
 800857a:	b26b      	sxtb	r3, r5
 800857c:	7023      	strb	r3, [r4, #0]
 800857e:	2500      	movs	r5, #0
 8008580:	f7ff b9ac 	b.w	80078dc <dwt_ioctl+0x154>
 8008584:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8008586:	7bdb      	ldrb	r3, [r3, #15]
 8008588:	2b03      	cmp	r3, #3
 800858a:	f001 802e 	beq.w	80095ea <dwt_ioctl+0x1e62>
 800858e:	f899 3011 	ldrb.w	r3, [r9, #17]
 8008592:	1e5a      	subs	r2, r3, #1
 8008594:	b2d2      	uxtb	r2, r2
 8008596:	2a01      	cmp	r2, #1
 8008598:	d92c      	bls.n	80085f4 <dwt_ioctl+0xe6c>
 800859a:	2201      	movs	r2, #1
 800859c:	e7b7      	b.n	800850e <dwt_ioctl+0xd86>
 800859e:	bf00      	nop
 80085a0:	00070048 	.word	0x00070048
 80085a4:	00070034 	.word	0x00070034
 80085a8:	00080004 	.word	0x00080004
 80085ac:	3f866666 	.word	0x3f866666
 80085b0:	3ecccccd 	.word	0x3ecccccd
 80085b4:	437f0000 	.word	0x437f0000
 80085b8:	000f0024 	.word	0x000f0024
 80085bc:	00020008 	.word	0x00020008
 80085c0:	00010034 	.word	0x00010034
 80085c4:	00010044 	.word	0x00010044
 80085c8:	0001ff80 	.word	0x0001ff80
 80085cc:	00010048 	.word	0x00010048
 80085d0:	0001004c 	.word	0x0001004c
 80085d4:	00010050 	.word	0x00010050
 80085d8:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80085da:	7bdb      	ldrb	r3, [r3, #15]
 80085dc:	2b03      	cmp	r3, #3
 80085de:	bf0c      	ite	eq
 80085e0:	2302      	moveq	r3, #2
 80085e2:	2301      	movne	r3, #1
 80085e4:	e795      	b.n	8008512 <dwt_ioctl+0xd8a>
 80085e6:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 80085ea:	2910      	cmp	r1, #16
 80085ec:	d991      	bls.n	8008512 <dwt_ioctl+0xd8a>
 80085ee:	f06f 0303 	mvn.w	r3, #3
 80085f2:	e7c3      	b.n	800857c <dwt_ioctl+0xdf4>
 80085f4:	2201      	movs	r2, #1
 80085f6:	4613      	mov	r3, r2
 80085f8:	e78b      	b.n	8008512 <dwt_ioctl+0xd8a>
 80085fa:	2202      	movs	r2, #2
 80085fc:	4613      	mov	r3, r2
 80085fe:	e788      	b.n	8008512 <dwt_ioctl+0xd8a>
 8008600:	f899 3012 	ldrb.w	r3, [r9, #18]
 8008604:	2b01      	cmp	r3, #1
 8008606:	d1b8      	bne.n	800857a <dwt_ioctl+0xdf2>
 8008608:	f899 2011 	ldrb.w	r2, [r9, #17]
 800860c:	1e53      	subs	r3, r2, #1
 800860e:	b2db      	uxtb	r3, r3
 8008610:	2b01      	cmp	r3, #1
 8008612:	d91b      	bls.n	800864c <dwt_ioctl+0xec4>
 8008614:	2a03      	cmp	r2, #3
 8008616:	bf0c      	ite	eq
 8008618:	f44f 17a0 	moveq.w	r7, #1310720	; 0x140000
 800861c:	f44f 17b0 	movne.w	r7, #1441792	; 0x160000
 8008620:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8008624:	b112      	cbz	r2, 800862c <dwt_ioctl+0xea4>
 8008626:	f899 300c 	ldrb.w	r3, [r9, #12]
 800862a:	b9c3      	cbnz	r3, 800865e <dwt_ioctl+0xed6>
 800862c:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8008630:	2900      	cmp	r1, #0
 8008632:	d0a2      	beq.n	800857a <dwt_ioctl+0xdf2>
 8008634:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d09e      	beq.n	800857a <dwt_ioctl+0xdf2>
 800863c:	f899 200c 	ldrb.w	r2, [r9, #12]
 8008640:	9100      	str	r1, [sp, #0]
 8008642:	4639      	mov	r1, r7
 8008644:	4630      	mov	r0, r6
 8008646:	f7fd f8c1 	bl	80057cc <dwt_readfromdevice>
 800864a:	e796      	b.n	800857a <dwt_ioctl+0xdf2>
 800864c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800864e:	7bdb      	ldrb	r3, [r3, #15]
 8008650:	2b03      	cmp	r3, #3
 8008652:	bf0c      	ite	eq
 8008654:	f44f 1798 	moveq.w	r7, #1245184	; 0x130000
 8008658:	f44f 1790 	movne.w	r7, #1179648	; 0x120000
 800865c:	e7e0      	b.n	8008620 <dwt_ioctl+0xe98>
 800865e:	9200      	str	r2, [sp, #0]
 8008660:	2200      	movs	r2, #0
 8008662:	4639      	mov	r1, r7
 8008664:	4630      	mov	r0, r6
 8008666:	f7fd f8b1 	bl	80057cc <dwt_readfromdevice>
 800866a:	e7df      	b.n	800862c <dwt_ioctl+0xea4>
 800866c:	f06f 0302 	mvn.w	r3, #2
 8008670:	e784      	b.n	800857c <dwt_ioctl+0xdf4>
 8008672:	f06f 0301 	mvn.w	r3, #1
 8008676:	e781      	b.n	800857c <dwt_ioctl+0xdf4>
 8008678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800867c:	e77e      	b.n	800857c <dwt_ioctl+0xdf4>
 800867e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008682:	e77b      	b.n	800857c <dwt_ioctl+0xdf4>
 8008684:	7a23      	ldrb	r3, [r4, #8]
 8008686:	79e1      	ldrb	r1, [r4, #7]
 8008688:	79a2      	ldrb	r2, [r4, #6]
 800868a:	00d2      	lsls	r2, r2, #3
 800868c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8008690:	4313      	orrs	r3, r2
 8008692:	7962      	ldrb	r2, [r4, #5]
 8008694:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8008698:	7922      	ldrb	r2, [r4, #4]
 800869a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800869e:	78e2      	ldrb	r2, [r4, #3]
 80086a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80086a4:	78a2      	ldrb	r2, [r4, #2]
 80086a6:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 80086aa:	7862      	ldrb	r2, [r4, #1]
 80086ac:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	2200      	movs	r2, #0
 80086b4:	49cd      	ldr	r1, [pc, #820]	; (80089ec <dwt_ioctl+0x1264>)
 80086b6:	f7fd fcd4 	bl	8006062 <dwt_write16bitoffsetreg>
 80086ba:	2500      	movs	r5, #0
 80086bc:	f7ff b90e 	b.w	80078dc <dwt_ioctl+0x154>
 80086c0:	2c00      	cmp	r4, #0
 80086c2:	f000 86fc 	beq.w	80094be <dwt_ioctl+0x1d36>
 80086c6:	7863      	ldrb	r3, [r4, #1]
 80086c8:	b133      	cbz	r3, 80086d8 <dwt_ioctl+0xf50>
 80086ca:	085b      	lsrs	r3, r3, #1
 80086cc:	3b01      	subs	r3, #1
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	7023      	strb	r3, [r4, #0]
 80086d2:	2500      	movs	r5, #0
 80086d4:	f7ff b902 	b.w	80078dc <dwt_ioctl+0x154>
 80086d8:	2300      	movs	r3, #0
 80086da:	e7f9      	b.n	80086d0 <dwt_ioctl+0xf48>
 80086dc:	2200      	movs	r2, #0
 80086de:	49c4      	ldr	r1, [pc, #784]	; (80089f0 <dwt_ioctl+0x1268>)
 80086e0:	f7fd f87e 	bl	80057e0 <dwt_read32bitoffsetreg>
 80086e4:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80086e8:	8023      	strh	r3, [r4, #0]
 80086ea:	f3c0 400b 	ubfx	r0, r0, #16, #12
 80086ee:	8060      	strh	r0, [r4, #2]
 80086f0:	2200      	movs	r2, #0
 80086f2:	49c0      	ldr	r1, [pc, #768]	; (80089f4 <dwt_ioctl+0x126c>)
 80086f4:	4630      	mov	r0, r6
 80086f6:	f7fd f873 	bl	80057e0 <dwt_read32bitoffsetreg>
 80086fa:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80086fe:	80a3      	strh	r3, [r4, #4]
 8008700:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8008704:	80e0      	strh	r0, [r4, #6]
 8008706:	2200      	movs	r2, #0
 8008708:	49bb      	ldr	r1, [pc, #748]	; (80089f8 <dwt_ioctl+0x1270>)
 800870a:	4630      	mov	r0, r6
 800870c:	f7fd f868 	bl	80057e0 <dwt_read32bitoffsetreg>
 8008710:	7220      	strb	r0, [r4, #8]
 8008712:	0c00      	lsrs	r0, r0, #16
 8008714:	7260      	strb	r0, [r4, #9]
 8008716:	2200      	movs	r2, #0
 8008718:	49b8      	ldr	r1, [pc, #736]	; (80089fc <dwt_ioctl+0x1274>)
 800871a:	4630      	mov	r0, r6
 800871c:	f7fd f860 	bl	80057e0 <dwt_read32bitoffsetreg>
 8008720:	f3c0 430b 	ubfx	r3, r0, #16, #12
 8008724:	81a3      	strh	r3, [r4, #12]
 8008726:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800872a:	8160      	strh	r0, [r4, #10]
 800872c:	2200      	movs	r2, #0
 800872e:	49b4      	ldr	r1, [pc, #720]	; (8008a00 <dwt_ioctl+0x1278>)
 8008730:	4630      	mov	r0, r6
 8008732:	f7fd f855 	bl	80057e0 <dwt_read32bitoffsetreg>
 8008736:	f3c0 430b 	ubfx	r3, r0, #16, #12
 800873a:	f8a4 300f 	strh.w	r3, [r4, #15]
 800873e:	73a0      	strb	r0, [r4, #14]
 8008740:	2200      	movs	r2, #0
 8008742:	49b0      	ldr	r1, [pc, #704]	; (8008a04 <dwt_ioctl+0x127c>)
 8008744:	4630      	mov	r0, r6
 8008746:	f7fd f84b 	bl	80057e0 <dwt_read32bitoffsetreg>
 800874a:	7460      	strb	r0, [r4, #17]
 800874c:	0c00      	lsrs	r0, r0, #16
 800874e:	74a0      	strb	r0, [r4, #18]
 8008750:	2200      	movs	r2, #0
 8008752:	49ad      	ldr	r1, [pc, #692]	; (8008a08 <dwt_ioctl+0x1280>)
 8008754:	4630      	mov	r0, r6
 8008756:	f7fd f843 	bl	80057e0 <dwt_read32bitoffsetreg>
 800875a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800875e:	f8a4 0013 	strh.w	r0, [r4, #19]
 8008762:	2500      	movs	r5, #0
 8008764:	7565      	strb	r5, [r4, #21]
 8008766:	75a5      	strb	r5, [r4, #22]
 8008768:	462a      	mov	r2, r5
 800876a:	49a8      	ldr	r1, [pc, #672]	; (8008a0c <dwt_ioctl+0x1284>)
 800876c:	4630      	mov	r0, r6
 800876e:	f7fd f85f 	bl	8005830 <dwt_read8bitoffsetreg>
 8008772:	75e0      	strb	r0, [r4, #23]
 8008774:	f7ff b8b2 	b.w	80078dc <dwt_ioctl+0x154>
 8008778:	4611      	mov	r1, r2
 800877a:	f7fd fc5f 	bl	800603c <ull_configeventcounters>
 800877e:	2500      	movs	r5, #0
 8008780:	f7ff b8ac 	b.w	80078dc <dwt_ioctl+0x154>
 8008784:	2c00      	cmp	r4, #0
 8008786:	f000 869d 	beq.w	80094c4 <dwt_ioctl+0x1d3c>
 800878a:	8823      	ldrh	r3, [r4, #0]
 800878c:	2200      	movs	r2, #0
 800878e:	49a0      	ldr	r1, [pc, #640]	; (8008a10 <dwt_ioctl+0x1288>)
 8008790:	f7fd fc67 	bl	8006062 <dwt_write16bitoffsetreg>
 8008794:	2500      	movs	r5, #0
 8008796:	f7ff b8a1 	b.w	80078dc <dwt_ioctl+0x154>
 800879a:	2c00      	cmp	r4, #0
 800879c:	f000 8695 	beq.w	80094ca <dwt_ioctl+0x1d42>
 80087a0:	6825      	ldr	r5, [r4, #0]
 80087a2:	b935      	cbnz	r5, 80087b2 <dwt_ioctl+0x102a>
 80087a4:	2300      	movs	r3, #0
 80087a6:	461a      	mov	r2, r3
 80087a8:	499a      	ldr	r1, [pc, #616]	; (8008a14 <dwt_ioctl+0x128c>)
 80087aa:	f7fd fc5a 	bl	8006062 <dwt_write16bitoffsetreg>
 80087ae:	f7ff b895 	b.w	80078dc <dwt_ioctl+0x154>
 80087b2:	7962      	ldrb	r2, [r4, #5]
 80087b4:	7923      	ldrb	r3, [r4, #4]
 80087b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80087ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80087be:	2200      	movs	r2, #0
 80087c0:	4994      	ldr	r1, [pc, #592]	; (8008a14 <dwt_ioctl+0x128c>)
 80087c2:	f7fd fc4e 	bl	8006062 <dwt_write16bitoffsetreg>
 80087c6:	2500      	movs	r5, #0
 80087c8:	f7ff b888 	b.w	80078dc <dwt_ioctl+0x154>
 80087cc:	2c00      	cmp	r4, #0
 80087ce:	f000 867f 	beq.w	80094d0 <dwt_ioctl+0x1d48>
 80087d2:	6823      	ldr	r3, [r4, #0]
 80087d4:	b94b      	cbnz	r3, 80087ea <dwt_ioctl+0x1062>
 80087d6:	2500      	movs	r5, #0
 80087d8:	9500      	str	r5, [sp, #0]
 80087da:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 80087de:	462a      	mov	r2, r5
 80087e0:	2110      	movs	r1, #16
 80087e2:	f7fe fc6d 	bl	80070c0 <dwt_modify16bitoffsetreg>
 80087e6:	f7ff b879 	b.w	80078dc <dwt_ioctl+0x154>
 80087ea:	2200      	movs	r2, #0
 80087ec:	2134      	movs	r1, #52	; 0x34
 80087ee:	f7fd fd39 	bl	8006264 <dwt_write32bitoffsetreg>
 80087f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087f6:	9300      	str	r3, [sp, #0]
 80087f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80087fc:	2200      	movs	r2, #0
 80087fe:	2110      	movs	r1, #16
 8008800:	4630      	mov	r0, r6
 8008802:	f7fe fc5d 	bl	80070c0 <dwt_modify16bitoffsetreg>
 8008806:	2500      	movs	r5, #0
 8008808:	f7ff b868 	b.w	80078dc <dwt_ioctl+0x154>
 800880c:	2c00      	cmp	r4, #0
 800880e:	f000 8662 	beq.w	80094d6 <dwt_ioctl+0x1d4e>
 8008812:	8861      	ldrh	r1, [r4, #2]
 8008814:	f7fd fca2 	bl	800615c <ull_aon_read>
 8008818:	7020      	strb	r0, [r4, #0]
 800881a:	2500      	movs	r5, #0
 800881c:	f7ff b85e 	b.w	80078dc <dwt_ioctl+0x154>
 8008820:	2c00      	cmp	r4, #0
 8008822:	f000 865b 	beq.w	80094dc <dwt_ioctl+0x1d54>
 8008826:	78a2      	ldrb	r2, [r4, #2]
 8008828:	8821      	ldrh	r1, [r4, #0]
 800882a:	f7fd fcb7 	bl	800619c <ull_aon_write>
 800882e:	2500      	movs	r5, #0
 8008830:	f7ff b854 	b.w	80078dc <dwt_ioctl+0x154>
 8008834:	4b78      	ldr	r3, [pc, #480]	; (8008a18 <dwt_ioctl+0x1290>)
 8008836:	4a79      	ldr	r2, [pc, #484]	; (8008a1c <dwt_ioctl+0x1294>)
 8008838:	2d01      	cmp	r5, #1
 800883a:	bf18      	it	ne
 800883c:	4613      	movne	r3, r2
 800883e:	2d01      	cmp	r5, #1
 8008840:	4977      	ldr	r1, [pc, #476]	; (8008a20 <dwt_ioctl+0x1298>)
 8008842:	bf18      	it	ne
 8008844:	f04f 110c 	movne.w	r1, #786444	; 0xc000c
 8008848:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800884a:	7bd2      	ldrb	r2, [r2, #15]
 800884c:	2a01      	cmp	r2, #1
 800884e:	d012      	beq.n	8008876 <dwt_ioctl+0x10ee>
 8008850:	2a03      	cmp	r2, #3
 8008852:	d117      	bne.n	8008884 <dwt_ioctl+0x10fc>
 8008854:	f5a2 12c0 	sub.w	r2, r2, #1572864	; 0x180000
 8008858:	3a01      	subs	r2, #1
 800885a:	441a      	add	r2, r3
 800885c:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8008860:	f7fc ffd4 	bl	800580c <dwt_read16bitoffsetreg>
 8008864:	09c0      	lsrs	r0, r0, #7
 8008866:	8020      	strh	r0, [r4, #0]
 8008868:	8825      	ldrh	r5, [r4, #0]
 800886a:	3500      	adds	r5, #0
 800886c:	bf18      	it	ne
 800886e:	2501      	movne	r5, #1
 8008870:	426d      	negs	r5, r5
 8008872:	f7ff b833 	b.w	80078dc <dwt_ioctl+0x154>
 8008876:	2202      	movs	r2, #2
 8008878:	4619      	mov	r1, r3
 800887a:	f7fc ffc7 	bl	800580c <dwt_read16bitoffsetreg>
 800887e:	09c0      	lsrs	r0, r0, #7
 8008880:	8020      	strh	r0, [r4, #0]
 8008882:	e7f1      	b.n	8008868 <dwt_ioctl+0x10e0>
 8008884:	2202      	movs	r2, #2
 8008886:	f7fc ffc1 	bl	800580c <dwt_read16bitoffsetreg>
 800888a:	09c0      	lsrs	r0, r0, #7
 800888c:	8020      	strh	r0, [r4, #0]
 800888e:	e7eb      	b.n	8008868 <dwt_ioctl+0x10e0>
 8008890:	2c00      	cmp	r4, #0
 8008892:	f000 8626 	beq.w	80094e2 <dwt_ioctl+0x1d5a>
 8008896:	7821      	ldrb	r1, [r4, #0]
 8008898:	f7fe fc48 	bl	800712c <ull_setleds>
 800889c:	2500      	movs	r5, #0
 800889e:	f7ff b81d 	b.w	80078dc <dwt_ioctl+0x154>
 80088a2:	4611      	mov	r1, r2
 80088a4:	f7fe fb18 	bl	8006ed8 <ull_setdwstate>
 80088a8:	2500      	movs	r5, #0
 80088aa:	f7ff b817 	b.w	80078dc <dwt_ioctl+0x154>
 80088ae:	9400      	str	r4, [sp, #0]
 80088b0:	2304      	movs	r3, #4
 80088b2:	2200      	movs	r2, #0
 80088b4:	211c      	movs	r1, #28
 80088b6:	f7fc ff89 	bl	80057cc <dwt_readfromdevice>
 80088ba:	2500      	movs	r5, #0
 80088bc:	f7ff b80e 	b.w	80078dc <dwt_ioctl+0x154>
 80088c0:	2c00      	cmp	r4, #0
 80088c2:	f000 8611 	beq.w	80094e8 <dwt_ioctl+0x1d60>
 80088c6:	2202      	movs	r2, #2
 80088c8:	2144      	movs	r1, #68	; 0x44
 80088ca:	f7fc ff9f 	bl	800580c <dwt_read16bitoffsetreg>
 80088ce:	f3c0 2000 	ubfx	r0, r0, #8, #1
 80088d2:	7020      	strb	r0, [r4, #0]
 80088d4:	2500      	movs	r5, #0
 80088d6:	f7ff b801 	b.w	80078dc <dwt_ioctl+0x154>
 80088da:	2c00      	cmp	r4, #0
 80088dc:	f000 8607 	beq.w	80094ee <dwt_ioctl+0x1d66>
 80088e0:	2200      	movs	r2, #0
 80088e2:	2144      	movs	r1, #68	; 0x44
 80088e4:	f7fc ffa4 	bl	8005830 <dwt_read8bitoffsetreg>
 80088e8:	f000 0001 	and.w	r0, r0, #1
 80088ec:	7020      	strb	r0, [r4, #0]
 80088ee:	2500      	movs	r5, #0
 80088f0:	f7fe bff4 	b.w	80078dc <dwt_ioctl+0x154>
 80088f4:	2c00      	cmp	r4, #0
 80088f6:	f000 85fd 	beq.w	80094f4 <dwt_ioctl+0x1d6c>
 80088fa:	8862      	ldrh	r2, [r4, #2]
 80088fc:	8821      	ldrh	r1, [r4, #0]
 80088fe:	f7fe fb49 	bl	8006f94 <ull_configureframefilter>
 8008902:	2500      	movs	r5, #0
 8008904:	f7fe bfea 	b.w	80078dc <dwt_ioctl+0x154>
 8008908:	9400      	str	r4, [sp, #0]
 800890a:	2308      	movs	r3, #8
 800890c:	2200      	movs	r2, #0
 800890e:	2104      	movs	r1, #4
 8008910:	f7fd fb4a 	bl	8005fa8 <dwt_writetodevice>
 8008914:	2500      	movs	r5, #0
 8008916:	f7fe bfe1 	b.w	80078dc <dwt_ioctl+0x154>
 800891a:	9400      	str	r4, [sp, #0]
 800891c:	2308      	movs	r3, #8
 800891e:	2200      	movs	r2, #0
 8008920:	2104      	movs	r1, #4
 8008922:	f7fc ff53 	bl	80057cc <dwt_readfromdevice>
 8008926:	2500      	movs	r5, #0
 8008928:	f7fe bfd8 	b.w	80078dc <dwt_ioctl+0x154>
 800892c:	2c00      	cmp	r4, #0
 800892e:	f000 85e4 	beq.w	80094fa <dwt_ioctl+0x1d72>
 8008932:	8823      	ldrh	r3, [r4, #0]
 8008934:	2202      	movs	r2, #2
 8008936:	210c      	movs	r1, #12
 8008938:	f7fd fb93 	bl	8006062 <dwt_write16bitoffsetreg>
 800893c:	2500      	movs	r5, #0
 800893e:	f7fe bfcd 	b.w	80078dc <dwt_ioctl+0x154>
 8008942:	2c00      	cmp	r4, #0
 8008944:	f000 85dc 	beq.w	8009500 <dwt_ioctl+0x1d78>
 8008948:	8823      	ldrh	r3, [r4, #0]
 800894a:	2200      	movs	r2, #0
 800894c:	210c      	movs	r1, #12
 800894e:	f7fd fb88 	bl	8006062 <dwt_write16bitoffsetreg>
 8008952:	2500      	movs	r5, #0
 8008954:	f7fe bfc2 	b.w	80078dc <dwt_ioctl+0x154>
 8008958:	4621      	mov	r1, r4
 800895a:	f7fd fb03 	bl	8005f64 <ull_readrxtimestamp>
 800895e:	2500      	movs	r5, #0
 8008960:	f7fe bfbc 	b.w	80078dc <dwt_ioctl+0x154>
 8008964:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008966:	7bdb      	ldrb	r3, [r3, #15]
 8008968:	2b01      	cmp	r3, #1
 800896a:	d00b      	beq.n	8008984 <dwt_ioctl+0x11fc>
 800896c:	2b03      	cmp	r3, #3
 800896e:	d112      	bne.n	8008996 <dwt_ioctl+0x120e>
 8008970:	9400      	str	r4, [sp, #0]
 8008972:	2305      	movs	r3, #5
 8008974:	2220      	movs	r2, #32
 8008976:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800897a:	f7fc ff27 	bl	80057cc <dwt_readfromdevice>
 800897e:	2500      	movs	r5, #0
 8008980:	f7fe bfac 	b.w	80078dc <dwt_ioctl+0x154>
 8008984:	9400      	str	r4, [sp, #0]
 8008986:	2305      	movs	r3, #5
 8008988:	2200      	movs	r2, #0
 800898a:	4926      	ldr	r1, [pc, #152]	; (8008a24 <dwt_ioctl+0x129c>)
 800898c:	f7fc ff1e 	bl	80057cc <dwt_readfromdevice>
 8008990:	2500      	movs	r5, #0
 8008992:	f7fe bfa3 	b.w	80078dc <dwt_ioctl+0x154>
 8008996:	9400      	str	r4, [sp, #0]
 8008998:	2305      	movs	r3, #5
 800899a:	2200      	movs	r2, #0
 800899c:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 80089a0:	f7fc ff14 	bl	80057cc <dwt_readfromdevice>
 80089a4:	2500      	movs	r5, #0
 80089a6:	f7fe bf99 	b.w	80078dc <dwt_ioctl+0x154>
 80089aa:	2500      	movs	r5, #0
 80089ac:	f804 5b01 	strb.w	r5, [r4], #1
 80089b0:	9400      	str	r4, [sp, #0]
 80089b2:	2304      	movs	r3, #4
 80089b4:	462a      	mov	r2, r5
 80089b6:	2170      	movs	r1, #112	; 0x70
 80089b8:	f7fc ff08 	bl	80057cc <dwt_readfromdevice>
 80089bc:	f7fe bf8e 	b.w	80078dc <dwt_ioctl+0x154>
 80089c0:	2c00      	cmp	r4, #0
 80089c2:	f000 85a0 	beq.w	8009506 <dwt_ioctl+0x1d7e>
 80089c6:	2201      	movs	r2, #1
 80089c8:	2164      	movs	r1, #100	; 0x64
 80089ca:	f7fc ff09 	bl	80057e0 <dwt_read32bitoffsetreg>
 80089ce:	6020      	str	r0, [r4, #0]
 80089d0:	2500      	movs	r5, #0
 80089d2:	f7fe bf83 	b.w	80078dc <dwt_ioctl+0x154>
 80089d6:	2c00      	cmp	r4, #0
 80089d8:	f000 8598 	beq.w	800950c <dwt_ioctl+0x1d84>
 80089dc:	2200      	movs	r2, #0
 80089de:	2164      	movs	r1, #100	; 0x64
 80089e0:	f7fc fefe 	bl	80057e0 <dwt_read32bitoffsetreg>
 80089e4:	6020      	str	r0, [r4, #0]
 80089e6:	2500      	movs	r5, #0
 80089e8:	f7fe bf78 	b.w	80078dc <dwt_ioctl+0x154>
 80089ec:	00010030 	.word	0x00010030
 80089f0:	000f0004 	.word	0x000f0004
 80089f4:	000f0008 	.word	0x000f0008
 80089f8:	000f000c 	.word	0x000f000c
 80089fc:	000f0010 	.word	0x000f0010
 8008a00:	000f0014 	.word	0x000f0014
 8008a04:	000f0018 	.word	0x000f0018
 8008a08:	000f001c 	.word	0x000f001c
 8008a0c:	000f0028 	.word	0x000f0028
 8008a10:	00060004 	.word	0x00060004
 8008a14:	0011001a 	.word	0x0011001a
 8008a18:	00180034 	.word	0x00180034
 8008a1c:	0018002c 	.word	0x0018002c
 8008a20:	000c0014 	.word	0x000c0014
 8008a24:	00180020 	.word	0x00180020
 8008a28:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008a2a:	7bdb      	ldrb	r3, [r3, #15]
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d00b      	beq.n	8008a48 <dwt_ioctl+0x12c0>
 8008a30:	2b03      	cmp	r3, #3
 8008a32:	d112      	bne.n	8008a5a <dwt_ioctl+0x12d2>
 8008a34:	9400      	str	r4, [sp, #0]
 8008a36:	2305      	movs	r3, #5
 8008a38:	2228      	movs	r2, #40	; 0x28
 8008a3a:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8008a3e:	f7fc fec5 	bl	80057cc <dwt_readfromdevice>
 8008a42:	2500      	movs	r5, #0
 8008a44:	f7fe bf4a 	b.w	80078dc <dwt_ioctl+0x154>
 8008a48:	9400      	str	r4, [sp, #0]
 8008a4a:	2305      	movs	r3, #5
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	49d3      	ldr	r1, [pc, #844]	; (8008d9c <dwt_ioctl+0x1614>)
 8008a50:	f7fc febc 	bl	80057cc <dwt_readfromdevice>
 8008a54:	2500      	movs	r5, #0
 8008a56:	f7fe bf41 	b.w	80078dc <dwt_ioctl+0x154>
 8008a5a:	9400      	str	r4, [sp, #0]
 8008a5c:	2305      	movs	r3, #5
 8008a5e:	2200      	movs	r2, #0
 8008a60:	49cf      	ldr	r1, [pc, #828]	; (8008da0 <dwt_ioctl+0x1618>)
 8008a62:	f7fc feb3 	bl	80057cc <dwt_readfromdevice>
 8008a66:	2500      	movs	r5, #0
 8008a68:	f7fe bf38 	b.w	80078dc <dwt_ioctl+0x154>
 8008a6c:	2c00      	cmp	r4, #0
 8008a6e:	f000 8550 	beq.w	8009512 <dwt_ioctl+0x1d8a>
 8008a72:	2200      	movs	r2, #0
 8008a74:	211c      	movs	r1, #28
 8008a76:	f7fc feb3 	bl	80057e0 <dwt_read32bitoffsetreg>
 8008a7a:	6020      	str	r0, [r4, #0]
 8008a7c:	2500      	movs	r5, #0
 8008a7e:	f7fe bf2d 	b.w	80078dc <dwt_ioctl+0x154>
 8008a82:	2c00      	cmp	r4, #0
 8008a84:	f000 8548 	beq.w	8009518 <dwt_ioctl+0x1d90>
 8008a88:	8825      	ldrh	r5, [r4, #0]
 8008a8a:	6867      	ldr	r7, [r4, #4]
 8008a8c:	7a23      	ldrb	r3, [r4, #8]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	f000 8545 	beq.w	800951e <dwt_ioctl+0x1d96>
 8008a94:	463c      	mov	r4, r7
 8008a96:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8008a9a:	4629      	mov	r1, r5
 8008a9c:	4630      	mov	r0, r6
 8008a9e:	f7fd fb3b 	bl	8006118 <_dwt_otpread>
 8008aa2:	f844 0b04 	str.w	r0, [r4], #4
 8008aa6:	3501      	adds	r5, #1
 8008aa8:	b2ad      	uxth	r5, r5
 8008aaa:	42bc      	cmp	r4, r7
 8008aac:	d1f5      	bne.n	8008a9a <dwt_ioctl+0x1312>
 8008aae:	2500      	movs	r5, #0
 8008ab0:	f7fe bf14 	b.w	80078dc <dwt_ioctl+0x154>
 8008ab4:	2c00      	cmp	r4, #0
 8008ab6:	f000 8535 	beq.w	8009524 <dwt_ioctl+0x1d9c>
 8008aba:	7823      	ldrb	r3, [r4, #0]
 8008abc:	2201      	movs	r2, #1
 8008abe:	2128      	movs	r1, #40	; 0x28
 8008ac0:	f7fd fa7d 	bl	8005fbe <dwt_write8bitoffsetreg>
 8008ac4:	2500      	movs	r5, #0
 8008ac6:	f7fe bf09 	b.w	80078dc <dwt_ioctl+0x154>
 8008aca:	f7fe fa87 	bl	8006fdc <ull_run_pgfcal>
 8008ace:	4605      	mov	r5, r0
 8008ad0:	f7fe bf04 	b.w	80078dc <dwt_ioctl+0x154>
 8008ad4:	4611      	mov	r1, r2
 8008ad6:	f7fe fb77 	bl	80071c8 <ull_pgf_cal>
 8008ada:	4605      	mov	r5, r0
 8008adc:	f7fe befe 	b.w	80078dc <dwt_ioctl+0x154>
 8008ae0:	2c00      	cmp	r4, #0
 8008ae2:	f000 8522 	beq.w	800952a <dwt_ioctl+0x1da2>
 8008ae6:	78a5      	ldrb	r5, [r4, #2]
 8008ae8:	2101      	movs	r1, #1
 8008aea:	f7fd faeb 	bl	80060c4 <ull_force_clocks>
 8008aee:	2100      	movs	r1, #0
 8008af0:	4630      	mov	r0, r6
 8008af2:	f7fd ff8b 	bl	8006a0c <ull_enable_rf_tx>
 8008af6:	4630      	mov	r0, r6
 8008af8:	f7fd ffbc 	bl	8006a74 <ull_enable_rftx_blocks>
 8008afc:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 8008b00:	2200      	movs	r2, #0
 8008b02:	49a8      	ldr	r1, [pc, #672]	; (8008da4 <dwt_ioctl+0x161c>)
 8008b04:	4630      	mov	r0, r6
 8008b06:	f7fd fa5a 	bl	8005fbe <dwt_write8bitoffsetreg>
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	9300      	str	r3, [sp, #0]
 8008b0e:	23ff      	movs	r3, #255	; 0xff
 8008b10:	2200      	movs	r2, #0
 8008b12:	49a5      	ldr	r1, [pc, #660]	; (8008da8 <dwt_ioctl+0x1620>)
 8008b14:	4630      	mov	r0, r6
 8008b16:	f7fe f921 	bl	8006d5c <dwt_modify8bitoffsetreg>
 8008b1a:	4fa3      	ldr	r7, [pc, #652]	; (8008da8 <dwt_ioctl+0x1620>)
 8008b1c:	2500      	movs	r5, #0
 8008b1e:	462a      	mov	r2, r5
 8008b20:	4639      	mov	r1, r7
 8008b22:	4630      	mov	r0, r6
 8008b24:	f7fc fe84 	bl	8005830 <dwt_read8bitoffsetreg>
 8008b28:	f010 0f01 	tst.w	r0, #1
 8008b2c:	d1f7      	bne.n	8008b1e <dwt_ioctl+0x1396>
 8008b2e:	2200      	movs	r2, #0
 8008b30:	499e      	ldr	r1, [pc, #632]	; (8008dac <dwt_ioctl+0x1624>)
 8008b32:	4630      	mov	r0, r6
 8008b34:	f7fc fe6a 	bl	800580c <dwt_read16bitoffsetreg>
 8008b38:	4605      	mov	r5, r0
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	f7fd fe30 	bl	80067a0 <ull_disable_rftx_blocks>
 8008b40:	2100      	movs	r1, #0
 8008b42:	4630      	mov	r0, r6
 8008b44:	f7fd fe36 	bl	80067b4 <ull_disable_rf_tx>
 8008b48:	2105      	movs	r1, #5
 8008b4a:	4630      	mov	r0, r6
 8008b4c:	f7fd faba 	bl	80060c4 <ull_force_clocks>
 8008b50:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8008b54:	8025      	strh	r5, [r4, #0]
 8008b56:	2500      	movs	r5, #0
 8008b58:	f7fe bec0 	b.w	80078dc <dwt_ioctl+0x154>
 8008b5c:	2102      	movs	r1, #2
 8008b5e:	f7fe f9bb 	bl	8006ed8 <ull_setdwstate>
 8008b62:	2101      	movs	r1, #1
 8008b64:	4630      	mov	r0, r6
 8008b66:	f7fe f9b7 	bl	8006ed8 <ull_setdwstate>
 8008b6a:	2432      	movs	r4, #50	; 0x32
 8008b6c:	f04f 0814 	mov.w	r8, #20
 8008b70:	2700      	movs	r7, #0
 8008b72:	2544      	movs	r5, #68	; 0x44
 8008b74:	4640      	mov	r0, r8
 8008b76:	f7f8 fcec 	bl	8001552 <deca_usleep>
 8008b7a:	463a      	mov	r2, r7
 8008b7c:	4629      	mov	r1, r5
 8008b7e:	4630      	mov	r0, r6
 8008b80:	f7fc fe56 	bl	8005830 <dwt_read8bitoffsetreg>
 8008b84:	f010 0f02 	tst.w	r0, #2
 8008b88:	d105      	bne.n	8008b96 <dwt_ioctl+0x140e>
 8008b8a:	1e63      	subs	r3, r4, #1
 8008b8c:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8008b90:	d1f0      	bne.n	8008b74 <dwt_ioctl+0x13ec>
 8008b92:	2501      	movs	r5, #1
 8008b94:	e000      	b.n	8008b98 <dwt_ioctl+0x1410>
 8008b96:	2500      	movs	r5, #0
 8008b98:	426d      	negs	r5, r5
 8008b9a:	f7fe be9f 	b.w	80078dc <dwt_ioctl+0x154>
 8008b9e:	2c00      	cmp	r4, #0
 8008ba0:	f000 84c6 	beq.w	8009530 <dwt_ioctl+0x1da8>
 8008ba4:	7823      	ldrb	r3, [r4, #0]
 8008ba6:	031b      	lsls	r3, r3, #12
 8008ba8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008bac:	7862      	ldrb	r2, [r4, #1]
 8008bae:	2a01      	cmp	r2, #1
 8008bb0:	bf08      	it	eq
 8008bb2:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 8008bb6:	9300      	str	r3, [sp, #0]
 8008bb8:	f46f 43e2 	mvn.w	r3, #28928	; 0x7100
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	497c      	ldr	r1, [pc, #496]	; (8008db0 <dwt_ioctl+0x1628>)
 8008bc0:	f7fd fee2 	bl	8006988 <dwt_modify32bitoffsetreg>
 8008bc4:	2500      	movs	r5, #0
 8008bc6:	f7fe be89 	b.w	80078dc <dwt_ioctl+0x154>
 8008bca:	2c00      	cmp	r4, #0
 8008bcc:	f000 84b3 	beq.w	8009536 <dwt_ioctl+0x1dae>
 8008bd0:	6862      	ldr	r2, [r4, #4]
 8008bd2:	6821      	ldr	r1, [r4, #0]
 8008bd4:	f7fe f818 	bl	8006c08 <ull_setgpiomode>
 8008bd8:	2500      	movs	r5, #0
 8008bda:	f7fe be7f 	b.w	80078dc <dwt_ioctl+0x154>
 8008bde:	2c00      	cmp	r4, #0
 8008be0:	f000 84ac 	beq.w	800953c <dwt_ioctl+0x1db4>
 8008be4:	8823      	ldrh	r3, [r4, #0]
 8008be6:	2200      	movs	r2, #0
 8008be8:	4972      	ldr	r1, [pc, #456]	; (8008db4 <dwt_ioctl+0x162c>)
 8008bea:	f7fd fa3a 	bl	8006062 <dwt_write16bitoffsetreg>
 8008bee:	2500      	movs	r5, #0
 8008bf0:	f7fe be74 	b.w	80078dc <dwt_ioctl+0x154>
 8008bf4:	2c00      	cmp	r4, #0
 8008bf6:	f000 84a4 	beq.w	8009542 <dwt_ioctl+0x1dba>
 8008bfa:	6862      	ldr	r2, [r4, #4]
 8008bfc:	8821      	ldrh	r1, [r4, #0]
 8008bfe:	f7fe fb13 	bl	8007228 <ull_setgpiovalue>
 8008c02:	2500      	movs	r5, #0
 8008c04:	f7fe be6a 	b.w	80078dc <dwt_ioctl+0x154>
 8008c08:	2c00      	cmp	r4, #0
 8008c0a:	f000 849d 	beq.w	8009548 <dwt_ioctl+0x1dc0>
 8008c0e:	7865      	ldrb	r5, [r4, #1]
 8008c10:	7823      	ldrb	r3, [r4, #0]
 8008c12:	b18b      	cbz	r3, 8008c38 <dwt_ioctl+0x14b0>
 8008c14:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008c16:	2200      	movs	r2, #0
 8008c18:	73da      	strb	r2, [r3, #15]
 8008c1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c1e:	2208      	movs	r2, #8
 8008c20:	b1e5      	cbz	r5, 8008c5c <dwt_ioctl+0x14d4>
 8008c22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c26:	9200      	str	r2, [sp, #0]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	2110      	movs	r1, #16
 8008c2c:	4630      	mov	r0, r6
 8008c2e:	f7fd feab 	bl	8006988 <dwt_modify32bitoffsetreg>
 8008c32:	2500      	movs	r5, #0
 8008c34:	f7fe be52 	b.w	80078dc <dwt_ioctl+0x154>
 8008c38:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	73da      	strb	r2, [r3, #15]
 8008c3e:	2318      	movs	r3, #24
 8008c40:	2200      	movs	r2, #0
 8008c42:	495d      	ldr	r1, [pc, #372]	; (8008db8 <dwt_ioctl+0x1630>)
 8008c44:	f7fd fb0e 	bl	8006264 <dwt_write32bitoffsetreg>
 8008c48:	23e8      	movs	r3, #232	; 0xe8
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	495b      	ldr	r1, [pc, #364]	; (8008dbc <dwt_ioctl+0x1634>)
 8008c4e:	4630      	mov	r0, r6
 8008c50:	f7fd fb08 	bl	8006264 <dwt_write32bitoffsetreg>
 8008c54:	f06f 0308 	mvn.w	r3, #8
 8008c58:	2200      	movs	r2, #0
 8008c5a:	e7e1      	b.n	8008c20 <dwt_ioctl+0x1498>
 8008c5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008c60:	e7e1      	b.n	8008c26 <dwt_ioctl+0x149e>
 8008c62:	2c00      	cmp	r4, #0
 8008c64:	f000 8473 	beq.w	800954e <dwt_ioctl+0x1dc6>
 8008c68:	6823      	ldr	r3, [r4, #0]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	2130      	movs	r1, #48	; 0x30
 8008c6e:	f7fd faf9 	bl	8006264 <dwt_write32bitoffsetreg>
 8008c72:	2500      	movs	r5, #0
 8008c74:	f7fe be32 	b.w	80078dc <dwt_ioctl+0x154>
 8008c78:	2c00      	cmp	r4, #0
 8008c7a:	f000 846b 	beq.w	8009554 <dwt_ioctl+0x1dcc>
 8008c7e:	2200      	movs	r2, #0
 8008c80:	4629      	mov	r1, r5
 8008c82:	f7fc fdad 	bl	80057e0 <dwt_read32bitoffsetreg>
 8008c86:	6020      	str	r0, [r4, #0]
 8008c88:	2500      	movs	r5, #0
 8008c8a:	f7fe be27 	b.w	80078dc <dwt_ioctl+0x154>
 8008c8e:	4623      	mov	r3, r4
 8008c90:	2200      	movs	r2, #0
 8008c92:	4629      	mov	r1, r5
 8008c94:	f7fd fae6 	bl	8006264 <dwt_write32bitoffsetreg>
 8008c98:	2500      	movs	r5, #0
 8008c9a:	f7fe be1f 	b.w	80078dc <dwt_ioctl+0x154>
 8008c9e:	2c00      	cmp	r4, #0
 8008ca0:	f000 845b 	beq.w	800955a <dwt_ioctl+0x1dd2>
 8008ca4:	2203      	movs	r2, #3
 8008ca6:	4946      	ldr	r1, [pc, #280]	; (8008dc0 <dwt_ioctl+0x1638>)
 8008ca8:	f7fc fdc2 	bl	8005830 <dwt_read8bitoffsetreg>
 8008cac:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8008cb0:	7020      	strb	r0, [r4, #0]
 8008cb2:	2500      	movs	r5, #0
 8008cb4:	f7fe be12 	b.w	80078dc <dwt_ioctl+0x154>
 8008cb8:	2c00      	cmp	r4, #0
 8008cba:	f000 8451 	beq.w	8009560 <dwt_ioctl+0x1dd8>
 8008cbe:	6823      	ldr	r3, [r4, #0]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	2144      	movs	r1, #68	; 0x44
 8008cc4:	f7fd face 	bl	8006264 <dwt_write32bitoffsetreg>
 8008cc8:	2500      	movs	r5, #0
 8008cca:	f7fe be07 	b.w	80078dc <dwt_ioctl+0x154>
 8008cce:	2c00      	cmp	r4, #0
 8008cd0:	f000 8449 	beq.w	8009566 <dwt_ioctl+0x1dde>
 8008cd4:	8823      	ldrh	r3, [r4, #0]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	2148      	movs	r1, #72	; 0x48
 8008cda:	f7fd f9c2 	bl	8006062 <dwt_write16bitoffsetreg>
 8008cde:	2500      	movs	r5, #0
 8008ce0:	f7fe bdfc 	b.w	80078dc <dwt_ioctl+0x154>
 8008ce4:	2c00      	cmp	r4, #0
 8008ce6:	f000 8441 	beq.w	800956c <dwt_ioctl+0x1de4>
 8008cea:	2200      	movs	r2, #0
 8008cec:	2144      	movs	r1, #68	; 0x44
 8008cee:	f7fc fd77 	bl	80057e0 <dwt_read32bitoffsetreg>
 8008cf2:	6020      	str	r0, [r4, #0]
 8008cf4:	2500      	movs	r5, #0
 8008cf6:	f7fe bdf1 	b.w	80078dc <dwt_ioctl+0x154>
 8008cfa:	2c00      	cmp	r4, #0
 8008cfc:	f000 8439 	beq.w	8009572 <dwt_ioctl+0x1dea>
 8008d00:	2200      	movs	r2, #0
 8008d02:	2148      	movs	r1, #72	; 0x48
 8008d04:	f7fc fd82 	bl	800580c <dwt_read16bitoffsetreg>
 8008d08:	6020      	str	r0, [r4, #0]
 8008d0a:	2500      	movs	r5, #0
 8008d0c:	f7fe bde6 	b.w	80078dc <dwt_ioctl+0x154>
 8008d10:	2c00      	cmp	r4, #0
 8008d12:	f000 8431 	beq.w	8009578 <dwt_ioctl+0x1df0>
 8008d16:	7823      	ldrb	r3, [r4, #0]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	492a      	ldr	r1, [pc, #168]	; (8008dc4 <dwt_ioctl+0x163c>)
 8008d1c:	f7fd f94f 	bl	8005fbe <dwt_write8bitoffsetreg>
 8008d20:	2500      	movs	r5, #0
 8008d22:	f7fe bddb 	b.w	80078dc <dwt_ioctl+0x154>
 8008d26:	2c00      	cmp	r4, #0
 8008d28:	f000 8429 	beq.w	800957e <dwt_ioctl+0x1df6>
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	2144      	movs	r1, #68	; 0x44
 8008d30:	f7fc fd7e 	bl	8005830 <dwt_read8bitoffsetreg>
 8008d34:	7020      	strb	r0, [r4, #0]
 8008d36:	2500      	movs	r5, #0
 8008d38:	f7fe bdd0 	b.w	80078dc <dwt_ioctl+0x154>
 8008d3c:	2c00      	cmp	r4, #0
 8008d3e:	f000 8421 	beq.w	8009584 <dwt_ioctl+0x1dfc>
 8008d42:	f7fd f949 	bl	8005fd8 <ull_getframelength>
 8008d46:	6020      	str	r0, [r4, #0]
 8008d48:	2500      	movs	r5, #0
 8008d4a:	f7fe bdc7 	b.w	80078dc <dwt_ioctl+0x154>
 8008d4e:	2c00      	cmp	r4, #0
 8008d50:	f000 841b 	beq.w	800958a <dwt_ioctl+0x1e02>
 8008d54:	2200      	movs	r2, #0
 8008d56:	491c      	ldr	r1, [pc, #112]	; (8008dc8 <dwt_ioctl+0x1640>)
 8008d58:	f7fc fd58 	bl	800580c <dwt_read16bitoffsetreg>
 8008d5c:	8020      	strh	r0, [r4, #0]
 8008d5e:	2500      	movs	r5, #0
 8008d60:	f7fe bdbc 	b.w	80078dc <dwt_ioctl+0x154>
 8008d64:	2c00      	cmp	r4, #0
 8008d66:	f000 8413 	beq.w	8009590 <dwt_ioctl+0x1e08>
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	4917      	ldr	r1, [pc, #92]	; (8008dcc <dwt_ioctl+0x1644>)
 8008d6e:	f7fc fd37 	bl	80057e0 <dwt_read32bitoffsetreg>
 8008d72:	6020      	str	r0, [r4, #0]
 8008d74:	2500      	movs	r5, #0
 8008d76:	f7fe bdb1 	b.w	80078dc <dwt_ioctl+0x154>
 8008d7a:	2c00      	cmp	r4, #0
 8008d7c:	f000 840b 	beq.w	8009596 <dwt_ioctl+0x1e0e>
 8008d80:	8823      	ldrh	r3, [r4, #0]
 8008d82:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008d86:	9300      	str	r3, [sp, #0]
 8008d88:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	490f      	ldr	r1, [pc, #60]	; (8008dcc <dwt_ioctl+0x1644>)
 8008d90:	f7fe f996 	bl	80070c0 <dwt_modify16bitoffsetreg>
 8008d94:	2500      	movs	r5, #0
 8008d96:	f7fe bda1 	b.w	80078dc <dwt_ioctl+0x154>
 8008d9a:	bf00      	nop
 8008d9c:	00180028 	.word	0x00180028
 8008da0:	000c0008 	.word	0x000c0008
 8008da4:	0007001c 	.word	0x0007001c
 8008da8:	00080010 	.word	0x00080010
 8008dac:	00080014 	.word	0x00080014
 8008db0:	00070014 	.word	0x00070014
 8008db4:	00050008 	.word	0x00050008
 8008db8:	001f000c 	.word	0x001f000c
 8008dbc:	001f0010 	.word	0x001f0010
 8008dc0:	00030060 	.word	0x00030060
 8008dc4:	00010024 	.word	0x00010024
 8008dc8:	0005002c 	.word	0x0005002c
 8008dcc:	000e001a 	.word	0x000e001a
 8008dd0:	2c00      	cmp	r4, #0
 8008dd2:	f000 83e3 	beq.w	800959c <dwt_ioctl+0x1e14>
 8008dd6:	88a7      	ldrh	r7, [r4, #4]
 8008dd8:	68a3      	ldr	r3, [r4, #8]
 8008dda:	9309      	str	r3, [sp, #36]	; 0x24
 8008ddc:	7b21      	ldrb	r1, [r4, #12]
 8008dde:	9106      	str	r1, [sp, #24]
 8008de0:	6922      	ldr	r2, [r4, #16]
 8008de2:	9204      	str	r2, [sp, #16]
 8008de4:	6962      	ldr	r2, [r4, #20]
 8008de6:	9205      	str	r2, [sp, #20]
 8008de8:	f003 0203 	and.w	r2, r3, #3
 8008dec:	f3c3 0085 	ubfx	r0, r3, #2, #6
 8008df0:	2905      	cmp	r1, #5
 8008df2:	d142      	bne.n	8008e7a <dwt_ioctl+0x16f2>
 8008df4:	f5b7 7fb1 	cmp.w	r7, #354	; 0x162
 8008df8:	bf28      	it	cs
 8008dfa:	f44f 77b1 	movcs.w	r7, #354	; 0x162
 8008dfe:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 80090e0 <dwt_ioctl+0x1958>
 8008e02:	2f04      	cmp	r7, #4
 8008e04:	d805      	bhi.n	8008e12 <dwt_ioctl+0x168a>
 8008e06:	eb09 0300 	add.w	r3, r9, r0
 8008e0a:	785b      	ldrb	r3, [r3, #1]
 8008e0c:	3b05      	subs	r3, #5
 8008e0e:	429f      	cmp	r7, r3
 8008e10:	db3b      	blt.n	8008e8a <dwt_ioctl+0x1702>
 8008e12:	2a01      	cmp	r2, #1
 8008e14:	d877      	bhi.n	8008f06 <dwt_ioctl+0x177e>
 8008e16:	4bae      	ldr	r3, [pc, #696]	; (80090d0 <dwt_ioctl+0x1948>)
 8008e18:	5c99      	ldrb	r1, [r3, r2]
 8008e1a:	463e      	mov	r6, r7
 8008e1c:	42b9      	cmp	r1, r7
 8008e1e:	da74      	bge.n	8008f0a <dwt_ioctl+0x1782>
 8008e20:	1c55      	adds	r5, r2, #1
 8008e22:	fa53 f585 	uxtab	r5, r3, r5
 8008e26:	2300      	movs	r3, #0
 8008e28:	440b      	add	r3, r1
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	3201      	adds	r2, #1
 8008e2e:	b2d2      	uxtb	r2, r2
 8008e30:	2a02      	cmp	r2, #2
 8008e32:	d005      	beq.n	8008e40 <dwt_ioctl+0x16b8>
 8008e34:	f815 1b01 	ldrb.w	r1, [r5], #1
 8008e38:	eba6 0c03 	sub.w	ip, r6, r3
 8008e3c:	4561      	cmp	r1, ip
 8008e3e:	dbf3      	blt.n	8008e28 <dwt_ioctl+0x16a0>
 8008e40:	429f      	cmp	r7, r3
 8008e42:	bf08      	it	eq
 8008e44:	9003      	streq	r0, [sp, #12]
 8008e46:	d064      	beq.n	8008f12 <dwt_ioctl+0x178a>
 8008e48:	f107 0805 	add.w	r8, r7, #5
 8008e4c:	fa1f f888 	uxth.w	r8, r8
 8008e50:	2580      	movs	r5, #128	; 0x80
 8008e52:	2100      	movs	r1, #0
 8008e54:	9107      	str	r1, [sp, #28]
 8008e56:	9103      	str	r1, [sp, #12]
 8008e58:	9108      	str	r1, [sp, #32]
 8008e5a:	460e      	mov	r6, r1
 8008e5c:	f04f 0b05 	mov.w	fp, #5
 8008e60:	46be      	mov	lr, r7
 8008e62:	455f      	cmp	r7, fp
 8008e64:	bf38      	it	cc
 8008e66:	46de      	movcc	lr, fp
 8008e68:	f1ae 0e05 	sub.w	lr, lr, #5
 8008e6c:	fa1f fe8e 	uxth.w	lr, lr
 8008e70:	f8df a25c 	ldr.w	sl, [pc, #604]	; 80090d0 <dwt_ioctl+0x1948>
 8008e74:	46bc      	mov	ip, r7
 8008e76:	460f      	mov	r7, r1
 8008e78:	e3dd      	b.n	8009636 <dwt_ioctl+0x1eae>
 8008e7a:	f240 1331 	movw	r3, #305	; 0x131
 8008e7e:	429f      	cmp	r7, r3
 8008e80:	bf28      	it	cs
 8008e82:	461f      	movcs	r7, r3
 8008e84:	f8df 925c 	ldr.w	r9, [pc, #604]	; 80090e4 <dwt_ioctl+0x195c>
 8008e88:	e7bb      	b.n	8008e02 <dwt_ioctl+0x167a>
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	9a05      	ldr	r2, [sp, #20]
 8008e8e:	8013      	strh	r3, [r2, #0]
 8008e90:	9a04      	ldr	r2, [sp, #16]
 8008e92:	4611      	mov	r1, r2
 8008e94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e96:	600a      	str	r2, [r1, #0]
 8008e98:	e04a      	b.n	8008f30 <dwt_ioctl+0x17a8>
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	9a05      	ldr	r2, [sp, #20]
 8008e9e:	8013      	strh	r3, [r2, #0]
 8008ea0:	9b04      	ldr	r3, [sp, #16]
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ea6:	6013      	str	r3, [r2, #0]
 8008ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008eac:	e040      	b.n	8008f30 <dwt_ioctl+0x17a8>
 8008eae:	fa1f fb81 	uxth.w	fp, r1
 8008eb2:	9207      	str	r2, [sp, #28]
 8008eb4:	9003      	str	r0, [sp, #12]
 8008eb6:	9308      	str	r3, [sp, #32]
 8008eb8:	2701      	movs	r7, #1
 8008eba:	e3cd      	b.n	8009658 <dwt_ioctl+0x1ed0>
 8008ebc:	2f00      	cmp	r7, #0
 8008ebe:	f040 83a1 	bne.w	8009604 <dwt_ioctl+0x1e7c>
 8008ec2:	4598      	cmp	r8, r3
 8008ec4:	f200 83a3 	bhi.w	800960e <dwt_ioctl+0x1e86>
 8008ec8:	2e00      	cmp	r6, #0
 8008eca:	d038      	beq.n	8008f3e <dwt_ioctl+0x17b6>
 8008ecc:	283f      	cmp	r0, #63	; 0x3f
 8008ece:	f000 83c8 	beq.w	8009662 <dwt_ioctl+0x1eda>
 8008ed2:	2700      	movs	r7, #0
 8008ed4:	f819 1000 	ldrb.w	r1, [r9, r0]
 8008ed8:	1a5b      	subs	r3, r3, r1
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	1e46      	subs	r6, r0, #1
 8008ede:	f006 003f 	and.w	r0, r6, #63	; 0x3f
 8008ee2:	f016 063f 	ands.w	r6, r6, #63	; 0x3f
 8008ee6:	bf18      	it	ne
 8008ee8:	2601      	movne	r6, #1
 8008eea:	e39c      	b.n	8009626 <dwt_ioctl+0x1e9e>
 8008eec:	9906      	ldr	r1, [sp, #24]
 8008eee:	2909      	cmp	r1, #9
 8008ef0:	f040 83bd 	bne.w	800966e <dwt_ioctl+0x1ee6>
 8008ef4:	213f      	movs	r1, #63	; 0x3f
 8008ef6:	9103      	str	r1, [sp, #12]
 8008ef8:	e00b      	b.n	8008f12 <dwt_ioctl+0x178a>
 8008efa:	b2b3      	uxth	r3, r6
 8008efc:	3201      	adds	r2, #1
 8008efe:	b2d2      	uxtb	r2, r2
 8008f00:	213f      	movs	r1, #63	; 0x3f
 8008f02:	9103      	str	r1, [sp, #12]
 8008f04:	e005      	b.n	8008f12 <dwt_ioctl+0x178a>
 8008f06:	2300      	movs	r3, #0
 8008f08:	e79a      	b.n	8008e40 <dwt_ioctl+0x16b8>
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	e798      	b.n	8008e40 <dwt_ioctl+0x16b8>
 8008f0e:	9003      	str	r0, [sp, #12]
 8008f10:	4663      	mov	r3, ip
 8008f12:	9905      	ldr	r1, [sp, #20]
 8008f14:	800b      	strh	r3, [r1, #0]
 8008f16:	9b03      	ldr	r3, [sp, #12]
 8008f18:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
 8008f1c:	b2d2      	uxtb	r2, r2
 8008f1e:	0413      	lsls	r3, r2, #16
 8008f20:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008f24:	4313      	orrs	r3, r2
 8008f26:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008f2a:	9a04      	ldr	r2, [sp, #16]
 8008f2c:	6013      	str	r3, [r2, #0]
 8008f2e:	2300      	movs	r3, #0
 8008f30:	6023      	str	r3, [r4, #0]
 8008f32:	2500      	movs	r5, #0
 8008f34:	f7fe bcd2 	b.w	80078dc <dwt_ioctl+0x154>
 8008f38:	9a07      	ldr	r2, [sp, #28]
 8008f3a:	9b08      	ldr	r3, [sp, #32]
 8008f3c:	e7e9      	b.n	8008f12 <dwt_ioctl+0x178a>
 8008f3e:	9003      	str	r0, [sp, #12]
 8008f40:	e7e7      	b.n	8008f12 <dwt_ioctl+0x178a>
 8008f42:	9a07      	ldr	r2, [sp, #28]
 8008f44:	9b08      	ldr	r3, [sp, #32]
 8008f46:	e7e4      	b.n	8008f12 <dwt_ioctl+0x178a>
 8008f48:	213f      	movs	r1, #63	; 0x3f
 8008f4a:	9103      	str	r1, [sp, #12]
 8008f4c:	e7e1      	b.n	8008f12 <dwt_ioctl+0x178a>
 8008f4e:	2c00      	cmp	r4, #0
 8008f50:	f000 8327 	beq.w	80095a2 <dwt_ioctl+0x1e1a>
 8008f54:	7825      	ldrb	r5, [r4, #0]
 8008f56:	6862      	ldr	r2, [r4, #4]
 8008f58:	2a01      	cmp	r2, #1
 8008f5a:	bf15      	itete	ne
 8008f5c:	f46f 3360 	mvnne.w	r3, #229376	; 0x38000
 8008f60:	f46f 43e0 	mvneq.w	r3, #28672	; 0x7000
 8008f64:	27df      	movne	r7, #223	; 0xdf
 8008f66:	27ef      	moveq	r7, #239	; 0xef
 8008f68:	bf14      	ite	ne
 8008f6a:	f04f 0820 	movne.w	r8, #32
 8008f6e:	f04f 0810 	moveq.w	r8, #16
 8008f72:	2400      	movs	r4, #0
 8008f74:	9400      	str	r4, [sp, #0]
 8008f76:	4622      	mov	r2, r4
 8008f78:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8008f7c:	f7fd fd04 	bl	8006988 <dwt_modify32bitoffsetreg>
 8008f80:	9400      	str	r4, [sp, #0]
 8008f82:	463b      	mov	r3, r7
 8008f84:	4622      	mov	r2, r4
 8008f86:	4953      	ldr	r1, [pc, #332]	; (80090d4 <dwt_ioctl+0x194c>)
 8008f88:	4630      	mov	r0, r6
 8008f8a:	f7fd fee7 	bl	8006d5c <dwt_modify8bitoffsetreg>
 8008f8e:	2d01      	cmp	r5, #1
 8008f90:	d003      	beq.n	8008f9a <dwt_ioctl+0x1812>
 8008f92:	b165      	cbz	r5, 8008fae <dwt_ioctl+0x1826>
 8008f94:	2500      	movs	r5, #0
 8008f96:	f7fe bca1 	b.w	80078dc <dwt_ioctl+0x154>
 8008f9a:	4625      	mov	r5, r4
 8008f9c:	9400      	str	r4, [sp, #0]
 8008f9e:	463b      	mov	r3, r7
 8008fa0:	4622      	mov	r2, r4
 8008fa2:	494d      	ldr	r1, [pc, #308]	; (80090d8 <dwt_ioctl+0x1950>)
 8008fa4:	4630      	mov	r0, r6
 8008fa6:	f7fd fed9 	bl	8006d5c <dwt_modify8bitoffsetreg>
 8008faa:	f7fe bc97 	b.w	80078dc <dwt_ioctl+0x154>
 8008fae:	f8cd 8000 	str.w	r8, [sp]
 8008fb2:	23ff      	movs	r3, #255	; 0xff
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	4948      	ldr	r1, [pc, #288]	; (80090d8 <dwt_ioctl+0x1950>)
 8008fb8:	4630      	mov	r0, r6
 8008fba:	f7fd fecf 	bl	8006d5c <dwt_modify8bitoffsetreg>
 8008fbe:	f7fe bc8d 	b.w	80078dc <dwt_ioctl+0x154>
 8008fc2:	2c00      	cmp	r4, #0
 8008fc4:	f000 82f0 	beq.w	80095a8 <dwt_ioctl+0x1e20>
 8008fc8:	7822      	ldrb	r2, [r4, #0]
 8008fca:	f012 0f01 	tst.w	r2, #1
 8008fce:	d02d      	beq.n	800902c <dwt_ioctl+0x18a4>
 8008fd0:	0157      	lsls	r7, r2, #5
 8008fd2:	f007 0740 	and.w	r7, r7, #64	; 0x40
 8008fd6:	2440      	movs	r4, #64	; 0x40
 8008fd8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8008fdc:	f012 0f04 	tst.w	r2, #4
 8008fe0:	d028      	beq.n	8009034 <dwt_ioctl+0x18ac>
 8008fe2:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 8008fe6:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8008fea:	0112      	lsls	r2, r2, #4
 8008fec:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8008ff0:	4317      	orrs	r7, r2
 8008ff2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008ff6:	9200      	str	r2, [sp, #0]
 8008ff8:	43db      	mvns	r3, r3
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8009000:	4630      	mov	r0, r6
 8009002:	f7fd fcc1 	bl	8006988 <dwt_modify32bitoffsetreg>
 8009006:	43e4      	mvns	r4, r4
 8009008:	b2a4      	uxth	r4, r4
 800900a:	2500      	movs	r5, #0
 800900c:	9500      	str	r5, [sp, #0]
 800900e:	4623      	mov	r3, r4
 8009010:	462a      	mov	r2, r5
 8009012:	4930      	ldr	r1, [pc, #192]	; (80090d4 <dwt_ioctl+0x194c>)
 8009014:	4630      	mov	r0, r6
 8009016:	f7fe f853 	bl	80070c0 <dwt_modify16bitoffsetreg>
 800901a:	9700      	str	r7, [sp, #0]
 800901c:	4623      	mov	r3, r4
 800901e:	462a      	mov	r2, r5
 8009020:	492d      	ldr	r1, [pc, #180]	; (80090d8 <dwt_ioctl+0x1950>)
 8009022:	4630      	mov	r0, r6
 8009024:	f7fe f84c 	bl	80070c0 <dwt_modify16bitoffsetreg>
 8009028:	f7fe bc58 	b.w	80078dc <dwt_ioctl+0x154>
 800902c:	2700      	movs	r7, #0
 800902e:	463c      	mov	r4, r7
 8009030:	463b      	mov	r3, r7
 8009032:	e7d3      	b.n	8008fdc <dwt_ioctl+0x1854>
 8009034:	2200      	movs	r2, #0
 8009036:	e7de      	b.n	8008ff6 <dwt_ioctl+0x186e>
 8009038:	2308      	movs	r3, #8
 800903a:	9300      	str	r3, [sp, #0]
 800903c:	23ff      	movs	r3, #255	; 0xff
 800903e:	2201      	movs	r2, #1
 8009040:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8009044:	f7fd fe8a 	bl	8006d5c <dwt_modify8bitoffsetreg>
 8009048:	4c24      	ldr	r4, [pc, #144]	; (80090dc <dwt_ioctl+0x1954>)
 800904a:	2302      	movs	r3, #2
 800904c:	9300      	str	r3, [sp, #0]
 800904e:	23ff      	movs	r3, #255	; 0xff
 8009050:	2203      	movs	r2, #3
 8009052:	4621      	mov	r1, r4
 8009054:	4630      	mov	r0, r6
 8009056:	f7fd fe81 	bl	8006d5c <dwt_modify8bitoffsetreg>
 800905a:	2500      	movs	r5, #0
 800905c:	9500      	str	r5, [sp, #0]
 800905e:	23f7      	movs	r3, #247	; 0xf7
 8009060:	2201      	movs	r2, #1
 8009062:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8009066:	4630      	mov	r0, r6
 8009068:	f7fd fe78 	bl	8006d5c <dwt_modify8bitoffsetreg>
 800906c:	9500      	str	r5, [sp, #0]
 800906e:	23fd      	movs	r3, #253	; 0xfd
 8009070:	2203      	movs	r2, #3
 8009072:	4621      	mov	r1, r4
 8009074:	4630      	mov	r0, r6
 8009076:	f7fd fe71 	bl	8006d5c <dwt_modify8bitoffsetreg>
 800907a:	f7fe bc2f 	b.w	80078dc <dwt_ioctl+0x154>
 800907e:	2c00      	cmp	r4, #0
 8009080:	f000 8295 	beq.w	80095ae <dwt_ioctl+0x1e26>
 8009084:	8863      	ldrh	r3, [r4, #2]
 8009086:	00db      	lsls	r3, r3, #3
 8009088:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800908c:	7822      	ldrb	r2, [r4, #0]
 800908e:	b10a      	cbz	r2, 8009094 <dwt_ioctl+0x190c>
 8009090:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009094:	9300      	str	r3, [sp, #0]
 8009096:	f24f 0307 	movw	r3, #61447	; 0xf007
 800909a:	2200      	movs	r2, #0
 800909c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80090a0:	4630      	mov	r0, r6
 80090a2:	f7fe f80d 	bl	80070c0 <dwt_modify16bitoffsetreg>
 80090a6:	2500      	movs	r5, #0
 80090a8:	f7fe bc18 	b.w	80078dc <dwt_ioctl+0x154>
 80090ac:	2c00      	cmp	r4, #0
 80090ae:	f000 8281 	beq.w	80095b4 <dwt_ioctl+0x1e2c>
 80090b2:	b2e3      	uxtb	r3, r4
 80090b4:	1c9a      	adds	r2, r3, #2
 80090b6:	2301      	movs	r3, #1
 80090b8:	4093      	lsls	r3, r2
 80090ba:	3b01      	subs	r3, #1
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	2200      	movs	r2, #0
 80090c0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80090c4:	f7fc ff7b 	bl	8005fbe <dwt_write8bitoffsetreg>
 80090c8:	2500      	movs	r5, #0
 80090ca:	f7fe bc07 	b.w	80078dc <dwt_ioctl+0x154>
 80090ce:	bf00      	nop
 80090d0:	08015e34 	.word	0x08015e34
 80090d4:	00050008 	.word	0x00050008
 80090d8:	0005000c 	.word	0x0005000c
 80090dc:	00110008 	.word	0x00110008
 80090e0:	08015db4 	.word	0x08015db4
 80090e4:	08015df4 	.word	0x08015df4
 80090e8:	2c00      	cmp	r4, #0
 80090ea:	f000 8266 	beq.w	80095ba <dwt_ioctl+0x1e32>
 80090ee:	7ae3      	ldrb	r3, [r4, #11]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f000 8265 	beq.w	80095c0 <dwt_ioctl+0x1e38>
 80090f6:	7b63      	ldrb	r3, [r4, #13]
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d921      	bls.n	8009140 <dwt_ioctl+0x19b8>
 80090fc:	7b22      	ldrb	r2, [r4, #12]
 80090fe:	4bd7      	ldr	r3, [pc, #860]	; (800945c <dwt_ioctl+0x1cd4>)
 8009100:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8009104:	0112      	lsls	r2, r2, #4
 8009106:	0ad3      	lsrs	r3, r2, #11
 8009108:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800910c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009110:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8009114:	bf28      	it	cs
 8009116:	3301      	addcs	r3, #1
 8009118:	b29b      	uxth	r3, r3
 800911a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800911e:	9300      	str	r3, [sp, #0]
 8009120:	f64f 7380 	movw	r3, #65408	; 0xff80
 8009124:	2202      	movs	r2, #2
 8009126:	49ce      	ldr	r1, [pc, #824]	; (8009460 <dwt_ioctl+0x1cd8>)
 8009128:	4630      	mov	r0, r6
 800912a:	f7fd ffc9 	bl	80070c0 <dwt_modify16bitoffsetreg>
 800912e:	2394      	movs	r3, #148	; 0x94
 8009130:	2200      	movs	r2, #0
 8009132:	49cc      	ldr	r1, [pc, #816]	; (8009464 <dwt_ioctl+0x1cdc>)
 8009134:	4630      	mov	r0, r6
 8009136:	f7fc ff42 	bl	8005fbe <dwt_write8bitoffsetreg>
 800913a:	2500      	movs	r5, #0
 800913c:	f7fe bbce 	b.w	80078dc <dwt_ioctl+0x154>
 8009140:	7b22      	ldrb	r2, [r4, #12]
 8009142:	4bc6      	ldr	r3, [pc, #792]	; (800945c <dwt_ioctl+0x1cd4>)
 8009144:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009148:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 800914c:	fb02 f203 	mul.w	r2, r2, r3
 8009150:	0c93      	lsrs	r3, r2, #18
 8009152:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 8009156:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800915a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800915e:	bf28      	it	cs
 8009160:	3301      	addcs	r3, #1
 8009162:	b29b      	uxth	r3, r3
 8009164:	e7d9      	b.n	800911a <dwt_ioctl+0x1992>
 8009166:	2c00      	cmp	r4, #0
 8009168:	f000 822d 	beq.w	80095c6 <dwt_ioctl+0x1e3e>
 800916c:	2200      	movs	r2, #0
 800916e:	49be      	ldr	r1, [pc, #760]	; (8009468 <dwt_ioctl+0x1ce0>)
 8009170:	f7fc fb36 	bl	80057e0 <dwt_read32bitoffsetreg>
 8009174:	6020      	str	r0, [r4, #0]
 8009176:	2500      	movs	r5, #0
 8009178:	f7fe bbb0 	b.w	80078dc <dwt_ioctl+0x154>
 800917c:	2c00      	cmp	r4, #0
 800917e:	f000 8225 	beq.w	80095cc <dwt_ioctl+0x1e44>
 8009182:	2200      	movs	r2, #0
 8009184:	49b9      	ldr	r1, [pc, #740]	; (800946c <dwt_ioctl+0x1ce4>)
 8009186:	f7fc fb2b 	bl	80057e0 <dwt_read32bitoffsetreg>
 800918a:	6020      	str	r0, [r4, #0]
 800918c:	2500      	movs	r5, #0
 800918e:	f7fe bba5 	b.w	80078dc <dwt_ioctl+0x154>
 8009192:	2c00      	cmp	r4, #0
 8009194:	f000 821d 	beq.w	80095d2 <dwt_ioctl+0x1e4a>
 8009198:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 800919c:	6023      	str	r3, [r4, #0]
 800919e:	2500      	movs	r5, #0
 80091a0:	f7fe bb9c 	b.w	80078dc <dwt_ioctl+0x154>
 80091a4:	2c00      	cmp	r4, #0
 80091a6:	f000 8217 	beq.w	80095d8 <dwt_ioctl+0x1e50>
 80091aa:	2500      	movs	r5, #0
 80091ac:	950b      	str	r5, [sp, #44]	; 0x2c
 80091ae:	af10      	add	r7, sp, #64	; 0x40
 80091b0:	2319      	movs	r3, #25
 80091b2:	f847 3d10 	str.w	r3, [r7, #-16]!
 80091b6:	9700      	str	r7, [sp, #0]
 80091b8:	2304      	movs	r3, #4
 80091ba:	462a      	mov	r2, r5
 80091bc:	49ac      	ldr	r1, [pc, #688]	; (8009470 <dwt_ioctl+0x1ce8>)
 80091be:	f7fc fef3 	bl	8005fa8 <dwt_writetodevice>
 80091c2:	f641 7348 	movw	r3, #8008	; 0x1f48
 80091c6:	930c      	str	r3, [sp, #48]	; 0x30
 80091c8:	9700      	str	r7, [sp, #0]
 80091ca:	2304      	movs	r3, #4
 80091cc:	462a      	mov	r2, r5
 80091ce:	49a9      	ldr	r1, [pc, #676]	; (8009474 <dwt_ioctl+0x1cec>)
 80091d0:	4630      	mov	r0, r6
 80091d2:	f7fc fee9 	bl	8005fa8 <dwt_writetodevice>
 80091d6:	ab0b      	add	r3, sp, #44	; 0x2c
 80091d8:	9300      	str	r3, [sp, #0]
 80091da:	2304      	movs	r3, #4
 80091dc:	462a      	mov	r2, r5
 80091de:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 80091e2:	4630      	mov	r0, r6
 80091e4:	f7fc faf2 	bl	80057cc <dwt_readfromdevice>
 80091e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091ea:	6023      	str	r3, [r4, #0]
 80091ec:	f7fe bb76 	b.w	80078dc <dwt_ioctl+0x154>
 80091f0:	2c00      	cmp	r4, #0
 80091f2:	f000 81f4 	beq.w	80095de <dwt_ioctl+0x1e56>
 80091f6:	2200      	movs	r2, #0
 80091f8:	499f      	ldr	r1, [pc, #636]	; (8009478 <dwt_ioctl+0x1cf0>)
 80091fa:	f7fc faf1 	bl	80057e0 <dwt_read32bitoffsetreg>
 80091fe:	b280      	uxth	r0, r0
 8009200:	6020      	str	r0, [r4, #0]
 8009202:	2200      	movs	r2, #0
 8009204:	499d      	ldr	r1, [pc, #628]	; (800947c <dwt_ioctl+0x1cf4>)
 8009206:	4630      	mov	r0, r6
 8009208:	f7fc faea 	bl	80057e0 <dwt_read32bitoffsetreg>
 800920c:	0d43      	lsrs	r3, r0, #21
 800920e:	019b      	lsls	r3, r3, #6
 8009210:	b29b      	uxth	r3, r3
 8009212:	6063      	str	r3, [r4, #4]
 8009214:	2500      	movs	r5, #0
 8009216:	f7fe bb61 	b.w	80078dc <dwt_ioctl+0x154>
 800921a:	2c00      	cmp	r4, #0
 800921c:	f000 81e2 	beq.w	80095e4 <dwt_ioctl+0x1e5c>
 8009220:	7d63      	ldrb	r3, [r4, #21]
 8009222:	b12b      	cbz	r3, 8009230 <dwt_ioctl+0x1aa8>
 8009224:	2b01      	cmp	r3, #1
 8009226:	d037      	beq.n	8009298 <dwt_ioctl+0x1b10>
 8009228:	2b02      	cmp	r3, #2
 800922a:	d05e      	beq.n	80092ea <dwt_ioctl+0x1b62>
 800922c:	23ff      	movs	r3, #255	; 0xff
 800922e:	e02f      	b.n	8009290 <dwt_ioctl+0x1b08>
 8009230:	2200      	movs	r2, #0
 8009232:	4993      	ldr	r1, [pc, #588]	; (8009480 <dwt_ioctl+0x1cf8>)
 8009234:	f7fc fad4 	bl	80057e0 <dwt_read32bitoffsetreg>
 8009238:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800923c:	6020      	str	r0, [r4, #0]
 800923e:	2200      	movs	r2, #0
 8009240:	4990      	ldr	r1, [pc, #576]	; (8009484 <dwt_ioctl+0x1cfc>)
 8009242:	4630      	mov	r0, r6
 8009244:	f7fc facc 	bl	80057e0 <dwt_read32bitoffsetreg>
 8009248:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800924c:	6060      	str	r0, [r4, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	498d      	ldr	r1, [pc, #564]	; (8009488 <dwt_ioctl+0x1d00>)
 8009252:	4630      	mov	r0, r6
 8009254:	f7fc fac4 	bl	80057e0 <dwt_read32bitoffsetreg>
 8009258:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800925c:	60a0      	str	r0, [r4, #8]
 800925e:	2200      	movs	r2, #0
 8009260:	498a      	ldr	r1, [pc, #552]	; (800948c <dwt_ioctl+0x1d04>)
 8009262:	4630      	mov	r0, r6
 8009264:	f7fc fabc 	bl	80057e0 <dwt_read32bitoffsetreg>
 8009268:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800926c:	60e0      	str	r0, [r4, #12]
 800926e:	2200      	movs	r2, #0
 8009270:	4987      	ldr	r1, [pc, #540]	; (8009490 <dwt_ioctl+0x1d08>)
 8009272:	4630      	mov	r0, r6
 8009274:	f7fc fab4 	bl	80057e0 <dwt_read32bitoffsetreg>
 8009278:	f3c0 0010 	ubfx	r0, r0, #0, #17
 800927c:	6120      	str	r0, [r4, #16]
 800927e:	2203      	movs	r2, #3
 8009280:	4979      	ldr	r1, [pc, #484]	; (8009468 <dwt_ioctl+0x1ce0>)
 8009282:	4630      	mov	r0, r6
 8009284:	f7fc fad4 	bl	8005830 <dwt_read8bitoffsetreg>
 8009288:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800928c:	7520      	strb	r0, [r4, #20]
 800928e:	2300      	movs	r3, #0
 8009290:	75a3      	strb	r3, [r4, #22]
 8009292:	2500      	movs	r5, #0
 8009294:	f7fe bb22 	b.w	80078dc <dwt_ioctl+0x154>
 8009298:	2200      	movs	r2, #0
 800929a:	497e      	ldr	r1, [pc, #504]	; (8009494 <dwt_ioctl+0x1d0c>)
 800929c:	f7fc faa0 	bl	80057e0 <dwt_read32bitoffsetreg>
 80092a0:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80092a4:	6020      	str	r0, [r4, #0]
 80092a6:	2200      	movs	r2, #0
 80092a8:	497b      	ldr	r1, [pc, #492]	; (8009498 <dwt_ioctl+0x1d10>)
 80092aa:	4630      	mov	r0, r6
 80092ac:	f7fc fa98 	bl	80057e0 <dwt_read32bitoffsetreg>
 80092b0:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80092b4:	6060      	str	r0, [r4, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	4978      	ldr	r1, [pc, #480]	; (800949c <dwt_ioctl+0x1d14>)
 80092ba:	4630      	mov	r0, r6
 80092bc:	f7fc fa90 	bl	80057e0 <dwt_read32bitoffsetreg>
 80092c0:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80092c4:	60a0      	str	r0, [r4, #8]
 80092c6:	2200      	movs	r2, #0
 80092c8:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 80092cc:	4630      	mov	r0, r6
 80092ce:	f7fc fa87 	bl	80057e0 <dwt_read32bitoffsetreg>
 80092d2:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80092d6:	60e0      	str	r0, [r4, #12]
 80092d8:	2200      	movs	r2, #0
 80092da:	4971      	ldr	r1, [pc, #452]	; (80094a0 <dwt_ioctl+0x1d18>)
 80092dc:	4630      	mov	r0, r6
 80092de:	f7fc fa7f 	bl	80057e0 <dwt_read32bitoffsetreg>
 80092e2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 80092e6:	6120      	str	r0, [r4, #16]
 80092e8:	e7c9      	b.n	800927e <dwt_ioctl+0x1af6>
 80092ea:	2200      	movs	r2, #0
 80092ec:	496d      	ldr	r1, [pc, #436]	; (80094a4 <dwt_ioctl+0x1d1c>)
 80092ee:	f7fc fa77 	bl	80057e0 <dwt_read32bitoffsetreg>
 80092f2:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80092f6:	6020      	str	r0, [r4, #0]
 80092f8:	2200      	movs	r2, #0
 80092fa:	496b      	ldr	r1, [pc, #428]	; (80094a8 <dwt_ioctl+0x1d20>)
 80092fc:	4630      	mov	r0, r6
 80092fe:	f7fc fa6f 	bl	80057e0 <dwt_read32bitoffsetreg>
 8009302:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8009306:	6060      	str	r0, [r4, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	4968      	ldr	r1, [pc, #416]	; (80094ac <dwt_ioctl+0x1d24>)
 800930c:	4630      	mov	r0, r6
 800930e:	f7fc fa67 	bl	80057e0 <dwt_read32bitoffsetreg>
 8009312:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8009316:	60a0      	str	r0, [r4, #8]
 8009318:	2200      	movs	r2, #0
 800931a:	4965      	ldr	r1, [pc, #404]	; (80094b0 <dwt_ioctl+0x1d28>)
 800931c:	4630      	mov	r0, r6
 800931e:	f7fc fa5f 	bl	80057e0 <dwt_read32bitoffsetreg>
 8009322:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8009326:	60e0      	str	r0, [r4, #12]
 8009328:	2200      	movs	r2, #0
 800932a:	4962      	ldr	r1, [pc, #392]	; (80094b4 <dwt_ioctl+0x1d2c>)
 800932c:	4630      	mov	r0, r6
 800932e:	f7fc fa57 	bl	80057e0 <dwt_read32bitoffsetreg>
 8009332:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8009336:	6120      	str	r0, [r4, #16]
 8009338:	e7a1      	b.n	800927e <dwt_ioctl+0x1af6>
 800933a:	2500      	movs	r5, #0
 800933c:	f7fe bace 	b.w	80078dc <dwt_ioctl+0x154>
 8009340:	2500      	movs	r5, #0
 8009342:	f7fe bacb 	b.w	80078dc <dwt_ioctl+0x154>
 8009346:	2500      	movs	r5, #0
 8009348:	f7fe bac8 	b.w	80078dc <dwt_ioctl+0x154>
 800934c:	2500      	movs	r5, #0
 800934e:	f7fe bac5 	b.w	80078dc <dwt_ioctl+0x154>
 8009352:	2500      	movs	r5, #0
 8009354:	f7fe bac2 	b.w	80078dc <dwt_ioctl+0x154>
 8009358:	2500      	movs	r5, #0
 800935a:	f7fe babf 	b.w	80078dc <dwt_ioctl+0x154>
 800935e:	2500      	movs	r5, #0
 8009360:	f7fe babc 	b.w	80078dc <dwt_ioctl+0x154>
 8009364:	2500      	movs	r5, #0
 8009366:	f7fe bab9 	b.w	80078dc <dwt_ioctl+0x154>
 800936a:	2500      	movs	r5, #0
 800936c:	f7fe bab6 	b.w	80078dc <dwt_ioctl+0x154>
 8009370:	2500      	movs	r5, #0
 8009372:	f7fe bab3 	b.w	80078dc <dwt_ioctl+0x154>
 8009376:	2500      	movs	r5, #0
 8009378:	f7fe bab0 	b.w	80078dc <dwt_ioctl+0x154>
 800937c:	2500      	movs	r5, #0
 800937e:	f7fe baad 	b.w	80078dc <dwt_ioctl+0x154>
 8009382:	2500      	movs	r5, #0
 8009384:	f7fe baaa 	b.w	80078dc <dwt_ioctl+0x154>
 8009388:	2500      	movs	r5, #0
 800938a:	f7fe baa7 	b.w	80078dc <dwt_ioctl+0x154>
 800938e:	2500      	movs	r5, #0
 8009390:	f7fe baa4 	b.w	80078dc <dwt_ioctl+0x154>
 8009394:	2500      	movs	r5, #0
 8009396:	f7fe baa1 	b.w	80078dc <dwt_ioctl+0x154>
 800939a:	2500      	movs	r5, #0
 800939c:	f7fe ba9e 	b.w	80078dc <dwt_ioctl+0x154>
 80093a0:	2500      	movs	r5, #0
 80093a2:	f7fe ba9b 	b.w	80078dc <dwt_ioctl+0x154>
 80093a6:	2500      	movs	r5, #0
 80093a8:	f7fe ba98 	b.w	80078dc <dwt_ioctl+0x154>
 80093ac:	2500      	movs	r5, #0
 80093ae:	f7fe ba95 	b.w	80078dc <dwt_ioctl+0x154>
 80093b2:	2500      	movs	r5, #0
 80093b4:	f7fe ba92 	b.w	80078dc <dwt_ioctl+0x154>
 80093b8:	2500      	movs	r5, #0
 80093ba:	f7fe ba8f 	b.w	80078dc <dwt_ioctl+0x154>
 80093be:	2500      	movs	r5, #0
 80093c0:	f7fe ba8c 	b.w	80078dc <dwt_ioctl+0x154>
 80093c4:	2500      	movs	r5, #0
 80093c6:	f7fe ba89 	b.w	80078dc <dwt_ioctl+0x154>
 80093ca:	2500      	movs	r5, #0
 80093cc:	f7fe ba86 	b.w	80078dc <dwt_ioctl+0x154>
 80093d0:	2500      	movs	r5, #0
 80093d2:	f7fe ba83 	b.w	80078dc <dwt_ioctl+0x154>
 80093d6:	2500      	movs	r5, #0
 80093d8:	f7fe ba80 	b.w	80078dc <dwt_ioctl+0x154>
 80093dc:	2500      	movs	r5, #0
 80093de:	f7fe ba7d 	b.w	80078dc <dwt_ioctl+0x154>
 80093e2:	2500      	movs	r5, #0
 80093e4:	f7fe ba7a 	b.w	80078dc <dwt_ioctl+0x154>
 80093e8:	2500      	movs	r5, #0
 80093ea:	f7fe ba77 	b.w	80078dc <dwt_ioctl+0x154>
 80093ee:	2500      	movs	r5, #0
 80093f0:	f7fe ba74 	b.w	80078dc <dwt_ioctl+0x154>
 80093f4:	2500      	movs	r5, #0
 80093f6:	f7fe ba71 	b.w	80078dc <dwt_ioctl+0x154>
 80093fa:	2500      	movs	r5, #0
 80093fc:	f7fe ba6e 	b.w	80078dc <dwt_ioctl+0x154>
 8009400:	2500      	movs	r5, #0
 8009402:	f7fe ba6b 	b.w	80078dc <dwt_ioctl+0x154>
 8009406:	2500      	movs	r5, #0
 8009408:	f7fe ba68 	b.w	80078dc <dwt_ioctl+0x154>
 800940c:	2500      	movs	r5, #0
 800940e:	f7fe ba65 	b.w	80078dc <dwt_ioctl+0x154>
 8009412:	2500      	movs	r5, #0
 8009414:	f7fe ba62 	b.w	80078dc <dwt_ioctl+0x154>
 8009418:	2500      	movs	r5, #0
 800941a:	f7fe ba5f 	b.w	80078dc <dwt_ioctl+0x154>
 800941e:	2500      	movs	r5, #0
 8009420:	f7fe ba5c 	b.w	80078dc <dwt_ioctl+0x154>
 8009424:	2500      	movs	r5, #0
 8009426:	f7fe ba59 	b.w	80078dc <dwt_ioctl+0x154>
 800942a:	2500      	movs	r5, #0
 800942c:	f7fe ba56 	b.w	80078dc <dwt_ioctl+0x154>
 8009430:	2500      	movs	r5, #0
 8009432:	f7fe ba53 	b.w	80078dc <dwt_ioctl+0x154>
 8009436:	2500      	movs	r5, #0
 8009438:	f7fe ba50 	b.w	80078dc <dwt_ioctl+0x154>
 800943c:	2500      	movs	r5, #0
 800943e:	f7fe ba4d 	b.w	80078dc <dwt_ioctl+0x154>
 8009442:	2500      	movs	r5, #0
 8009444:	f7fe ba4a 	b.w	80078dc <dwt_ioctl+0x154>
 8009448:	2500      	movs	r5, #0
 800944a:	f7fe ba47 	b.w	80078dc <dwt_ioctl+0x154>
 800944e:	2500      	movs	r5, #0
 8009450:	f7fe ba44 	b.w	80078dc <dwt_ioctl+0x154>
 8009454:	2500      	movs	r5, #0
 8009456:	f7fe ba41 	b.w	80078dc <dwt_ioctl+0x154>
 800945a:	bf00      	nop
 800945c:	08015e70 	.word	0x08015e70
 8009460:	000e0012 	.word	0x000e0012
 8009464:	000e0016 	.word	0x000e0016
 8009468:	00030060 	.word	0x00030060
 800946c:	000f0048 	.word	0x000f0048
 8009470:	001f0004 	.word	0x001f0004
 8009474:	001f0008 	.word	0x001f0008
 8009478:	000c0048 	.word	0x000c0048
 800947c:	000c0028 	.word	0x000c0028
 8009480:	000c0058 	.word	0x000c0058
 8009484:	000c0030 	.word	0x000c0030
 8009488:	000c0034 	.word	0x000c0034
 800948c:	000c0038 	.word	0x000c0038
 8009490:	000c002c 	.word	0x000c002c
 8009494:	000d0020 	.word	0x000d0020
 8009498:	000c0064 	.word	0x000c0064
 800949c:	000c0068 	.word	0x000c0068
 80094a0:	000c0060 	.word	0x000c0060
 80094a4:	000d0068 	.word	0x000d0068
 80094a8:	000d0040 	.word	0x000d0040
 80094ac:	000d0044 	.word	0x000d0044
 80094b0:	000d0048 	.word	0x000d0048
 80094b4:	000d003c 	.word	0x000d003c
 80094b8:	2500      	movs	r5, #0
 80094ba:	f7fe ba0f 	b.w	80078dc <dwt_ioctl+0x154>
 80094be:	2500      	movs	r5, #0
 80094c0:	f7fe ba0c 	b.w	80078dc <dwt_ioctl+0x154>
 80094c4:	2500      	movs	r5, #0
 80094c6:	f7fe ba09 	b.w	80078dc <dwt_ioctl+0x154>
 80094ca:	2500      	movs	r5, #0
 80094cc:	f7fe ba06 	b.w	80078dc <dwt_ioctl+0x154>
 80094d0:	2500      	movs	r5, #0
 80094d2:	f7fe ba03 	b.w	80078dc <dwt_ioctl+0x154>
 80094d6:	2500      	movs	r5, #0
 80094d8:	f7fe ba00 	b.w	80078dc <dwt_ioctl+0x154>
 80094dc:	2500      	movs	r5, #0
 80094de:	f7fe b9fd 	b.w	80078dc <dwt_ioctl+0x154>
 80094e2:	2500      	movs	r5, #0
 80094e4:	f7fe b9fa 	b.w	80078dc <dwt_ioctl+0x154>
 80094e8:	2500      	movs	r5, #0
 80094ea:	f7fe b9f7 	b.w	80078dc <dwt_ioctl+0x154>
 80094ee:	2500      	movs	r5, #0
 80094f0:	f7fe b9f4 	b.w	80078dc <dwt_ioctl+0x154>
 80094f4:	2500      	movs	r5, #0
 80094f6:	f7fe b9f1 	b.w	80078dc <dwt_ioctl+0x154>
 80094fa:	2500      	movs	r5, #0
 80094fc:	f7fe b9ee 	b.w	80078dc <dwt_ioctl+0x154>
 8009500:	2500      	movs	r5, #0
 8009502:	f7fe b9eb 	b.w	80078dc <dwt_ioctl+0x154>
 8009506:	2500      	movs	r5, #0
 8009508:	f7fe b9e8 	b.w	80078dc <dwt_ioctl+0x154>
 800950c:	2500      	movs	r5, #0
 800950e:	f7fe b9e5 	b.w	80078dc <dwt_ioctl+0x154>
 8009512:	2500      	movs	r5, #0
 8009514:	f7fe b9e2 	b.w	80078dc <dwt_ioctl+0x154>
 8009518:	2500      	movs	r5, #0
 800951a:	f7fe b9df 	b.w	80078dc <dwt_ioctl+0x154>
 800951e:	2500      	movs	r5, #0
 8009520:	f7fe b9dc 	b.w	80078dc <dwt_ioctl+0x154>
 8009524:	2500      	movs	r5, #0
 8009526:	f7fe b9d9 	b.w	80078dc <dwt_ioctl+0x154>
 800952a:	2500      	movs	r5, #0
 800952c:	f7fe b9d6 	b.w	80078dc <dwt_ioctl+0x154>
 8009530:	2500      	movs	r5, #0
 8009532:	f7fe b9d3 	b.w	80078dc <dwt_ioctl+0x154>
 8009536:	2500      	movs	r5, #0
 8009538:	f7fe b9d0 	b.w	80078dc <dwt_ioctl+0x154>
 800953c:	2500      	movs	r5, #0
 800953e:	f7fe b9cd 	b.w	80078dc <dwt_ioctl+0x154>
 8009542:	2500      	movs	r5, #0
 8009544:	f7fe b9ca 	b.w	80078dc <dwt_ioctl+0x154>
 8009548:	2500      	movs	r5, #0
 800954a:	f7fe b9c7 	b.w	80078dc <dwt_ioctl+0x154>
 800954e:	2500      	movs	r5, #0
 8009550:	f7fe b9c4 	b.w	80078dc <dwt_ioctl+0x154>
 8009554:	2500      	movs	r5, #0
 8009556:	f7fe b9c1 	b.w	80078dc <dwt_ioctl+0x154>
 800955a:	2500      	movs	r5, #0
 800955c:	f7fe b9be 	b.w	80078dc <dwt_ioctl+0x154>
 8009560:	2500      	movs	r5, #0
 8009562:	f7fe b9bb 	b.w	80078dc <dwt_ioctl+0x154>
 8009566:	2500      	movs	r5, #0
 8009568:	f7fe b9b8 	b.w	80078dc <dwt_ioctl+0x154>
 800956c:	2500      	movs	r5, #0
 800956e:	f7fe b9b5 	b.w	80078dc <dwt_ioctl+0x154>
 8009572:	2500      	movs	r5, #0
 8009574:	f7fe b9b2 	b.w	80078dc <dwt_ioctl+0x154>
 8009578:	2500      	movs	r5, #0
 800957a:	f7fe b9af 	b.w	80078dc <dwt_ioctl+0x154>
 800957e:	2500      	movs	r5, #0
 8009580:	f7fe b9ac 	b.w	80078dc <dwt_ioctl+0x154>
 8009584:	2500      	movs	r5, #0
 8009586:	f7fe b9a9 	b.w	80078dc <dwt_ioctl+0x154>
 800958a:	2500      	movs	r5, #0
 800958c:	f7fe b9a6 	b.w	80078dc <dwt_ioctl+0x154>
 8009590:	2500      	movs	r5, #0
 8009592:	f7fe b9a3 	b.w	80078dc <dwt_ioctl+0x154>
 8009596:	2500      	movs	r5, #0
 8009598:	f7fe b9a0 	b.w	80078dc <dwt_ioctl+0x154>
 800959c:	2500      	movs	r5, #0
 800959e:	f7fe b99d 	b.w	80078dc <dwt_ioctl+0x154>
 80095a2:	2500      	movs	r5, #0
 80095a4:	f7fe b99a 	b.w	80078dc <dwt_ioctl+0x154>
 80095a8:	2500      	movs	r5, #0
 80095aa:	f7fe b997 	b.w	80078dc <dwt_ioctl+0x154>
 80095ae:	2500      	movs	r5, #0
 80095b0:	f7fe b994 	b.w	80078dc <dwt_ioctl+0x154>
 80095b4:	2500      	movs	r5, #0
 80095b6:	f7fe b991 	b.w	80078dc <dwt_ioctl+0x154>
 80095ba:	2500      	movs	r5, #0
 80095bc:	f7fe b98e 	b.w	80078dc <dwt_ioctl+0x154>
 80095c0:	2500      	movs	r5, #0
 80095c2:	f7fe b98b 	b.w	80078dc <dwt_ioctl+0x154>
 80095c6:	2500      	movs	r5, #0
 80095c8:	f7fe b988 	b.w	80078dc <dwt_ioctl+0x154>
 80095cc:	2500      	movs	r5, #0
 80095ce:	f7fe b985 	b.w	80078dc <dwt_ioctl+0x154>
 80095d2:	2500      	movs	r5, #0
 80095d4:	f7fe b982 	b.w	80078dc <dwt_ioctl+0x154>
 80095d8:	2500      	movs	r5, #0
 80095da:	f7fe b97f 	b.w	80078dc <dwt_ioctl+0x154>
 80095de:	2500      	movs	r5, #0
 80095e0:	f7fe b97c 	b.w	80078dc <dwt_ioctl+0x154>
 80095e4:	2500      	movs	r5, #0
 80095e6:	f7fe b979 	b.w	80078dc <dwt_ioctl+0x154>
 80095ea:	f899 3011 	ldrb.w	r3, [r9, #17]
 80095ee:	1e5a      	subs	r2, r3, #1
 80095f0:	b2d2      	uxtb	r2, r2
 80095f2:	2a01      	cmp	r2, #1
 80095f4:	f67f a801 	bls.w	80085fa <dwt_ioctl+0xe72>
 80095f8:	2202      	movs	r2, #2
 80095fa:	f7fe bf88 	b.w	800850e <dwt_ioctl+0xd86>
 80095fe:	2f00      	cmp	r7, #0
 8009600:	f43f ac62 	beq.w	8008ec8 <dwt_ioctl+0x1740>
 8009604:	f819 1000 	ldrb.w	r1, [r9, r0]
 8009608:	1a5b      	subs	r3, r3, r1
 800960a:	b29b      	uxth	r3, r3
 800960c:	e481      	b.n	8008f12 <dwt_ioctl+0x178a>
 800960e:	283f      	cmp	r0, #63	; 0x3f
 8009610:	d027      	beq.n	8009662 <dwt_ioctl+0x1eda>
 8009612:	2e00      	cmp	r6, #0
 8009614:	f47f ac5e 	bne.w	8008ed4 <dwt_ioctl+0x174c>
 8009618:	3001      	adds	r0, #1
 800961a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800961e:	f819 1000 	ldrb.w	r1, [r9, r0]
 8009622:	440b      	add	r3, r1
 8009624:	b29b      	uxth	r3, r3
 8009626:	459c      	cmp	ip, r3
 8009628:	f43f ac71 	beq.w	8008f0e <dwt_ioctl+0x1786>
 800962c:	3d01      	subs	r5, #1
 800962e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8009632:	f43f ac32 	beq.w	8008e9a <dwt_ioctl+0x1712>
 8009636:	459e      	cmp	lr, r3
 8009638:	f4bf ac40 	bcs.w	8008ebc <dwt_ioctl+0x1734>
 800963c:	4598      	cmp	r8, r3
 800963e:	d9de      	bls.n	80095fe <dwt_ioctl+0x1e76>
 8009640:	ebac 0103 	sub.w	r1, ip, r3
 8009644:	b209      	sxth	r1, r1
 8009646:	2900      	cmp	r1, #0
 8009648:	bfb8      	it	lt
 800964a:	4249      	neglt	r1, r1
 800964c:	4559      	cmp	r1, fp
 800964e:	f77f ac2e 	ble.w	8008eae <dwt_ioctl+0x1726>
 8009652:	2f00      	cmp	r7, #0
 8009654:	f47f ac70 	bne.w	8008f38 <dwt_ioctl+0x17b0>
 8009658:	283f      	cmp	r0, #63	; 0x3f
 800965a:	d1da      	bne.n	8009612 <dwt_ioctl+0x1e8a>
 800965c:	2f00      	cmp	r7, #0
 800965e:	f47f ac70 	bne.w	8008f42 <dwt_ioctl+0x17ba>
 8009662:	2a03      	cmp	r2, #3
 8009664:	f43f ac70 	beq.w	8008f48 <dwt_ioctl+0x17c0>
 8009668:	2a02      	cmp	r2, #2
 800966a:	f43f ac3f 	beq.w	8008eec <dwt_ioctl+0x1764>
 800966e:	f81a 1002 	ldrb.w	r1, [sl, r2]
 8009672:	185e      	adds	r6, r3, r1
 8009674:	4566      	cmp	r6, ip
 8009676:	f77f ac40 	ble.w	8008efa <dwt_ioctl+0x1772>
 800967a:	440b      	add	r3, r1
 800967c:	b29b      	uxth	r3, r3
 800967e:	3201      	adds	r2, #1
 8009680:	b2d2      	uxtb	r2, r2
 8009682:	2700      	movs	r7, #0
 8009684:	e426      	b.n	8008ed4 <dwt_ioctl+0x174c>
 8009686:	bf00      	nop

08009688 <ull_initialise>:
 8009688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800968c:	4605      	mov	r5, r0
 800968e:	460e      	mov	r6, r1
 8009690:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009692:	2b00      	cmp	r3, #0
 8009694:	d05c      	beq.n	8009750 <ull_initialise+0xc8>
 8009696:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 8009698:	2300      	movs	r3, #0
 800969a:	73e3      	strb	r3, [r4, #15]
 800969c:	2202      	movs	r2, #2
 800969e:	8262      	strh	r2, [r4, #18]
 80096a0:	75a3      	strb	r3, [r4, #22]
 80096a2:	75e3      	strb	r3, [r4, #23]
 80096a4:	7423      	strb	r3, [r4, #16]
 80096a6:	72a3      	strb	r3, [r4, #10]
 80096a8:	72e3      	strb	r3, [r4, #11]
 80096aa:	2104      	movs	r1, #4
 80096ac:	4628      	mov	r0, r5
 80096ae:	f7fc fd33 	bl	8006118 <_dwt_otpread>
 80096b2:	4607      	mov	r7, r0
 80096b4:	2105      	movs	r1, #5
 80096b6:	4628      	mov	r0, r5
 80096b8:	f7fc fd2e 	bl	8006118 <_dwt_otpread>
 80096bc:	4680      	mov	r8, r0
 80096be:	210a      	movs	r1, #10
 80096c0:	4628      	mov	r0, r5
 80096c2:	f7fc fd29 	bl	8006118 <_dwt_otpread>
 80096c6:	f3c0 4004 	ubfx	r0, r0, #16, #5
 80096ca:	7220      	strb	r0, [r4, #8]
 80096cc:	b127      	cbz	r7, 80096d8 <ull_initialise+0x50>
 80096ce:	f1b8 0f00 	cmp.w	r8, #0
 80096d2:	d001      	beq.n	80096d8 <ull_initialise+0x50>
 80096d4:	2800      	cmp	r0, #0
 80096d6:	d140      	bne.n	800975a <ull_initialise+0xd2>
 80096d8:	2120      	movs	r1, #32
 80096da:	4628      	mov	r0, r5
 80096dc:	f7fc fd1c 	bl	8006118 <_dwt_otpread>
 80096e0:	4b2f      	ldr	r3, [pc, #188]	; (80097a0 <ull_initialise+0x118>)
 80096e2:	4298      	cmp	r0, r3
 80096e4:	bf0c      	ite	eq
 80096e6:	2301      	moveq	r3, #1
 80096e8:	2300      	movne	r3, #0
 80096ea:	7263      	strb	r3, [r4, #9]
 80096ec:	f016 0f10 	tst.w	r6, #16
 80096f0:	d137      	bne.n	8009762 <ull_initialise+0xda>
 80096f2:	f016 0f20 	tst.w	r6, #32
 80096f6:	d13a      	bne.n	800976e <ull_initialise+0xe6>
 80096f8:	f016 0f40 	tst.w	r6, #64	; 0x40
 80096fc:	d13d      	bne.n	800977a <ull_initialise+0xf2>
 80096fe:	f016 0f80 	tst.w	r6, #128	; 0x80
 8009702:	d141      	bne.n	8009788 <ull_initialise+0x100>
 8009704:	7ae3      	ldrb	r3, [r4, #11]
 8009706:	b90b      	cbnz	r3, 800970c <ull_initialise+0x84>
 8009708:	2385      	movs	r3, #133	; 0x85
 800970a:	72e3      	strb	r3, [r4, #11]
 800970c:	7aa3      	ldrb	r3, [r4, #10]
 800970e:	b90b      	cbnz	r3, 8009714 <ull_initialise+0x8c>
 8009710:	2374      	movs	r3, #116	; 0x74
 8009712:	72a3      	strb	r3, [r4, #10]
 8009714:	211f      	movs	r1, #31
 8009716:	4628      	mov	r0, r5
 8009718:	f7fc fcfe 	bl	8006118 <_dwt_otpread>
 800971c:	7360      	strb	r0, [r4, #13]
 800971e:	211e      	movs	r1, #30
 8009720:	4628      	mov	r0, r5
 8009722:	f7fc fcf9 	bl	8006118 <_dwt_otpread>
 8009726:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
 800972a:	bf12      	itee	ne
 800972c:	73a0      	strbne	r0, [r4, #14]
 800972e:	232e      	moveq	r3, #46	; 0x2e
 8009730:	73a3      	strbeq	r3, [r4, #14]
 8009732:	7ba3      	ldrb	r3, [r4, #14]
 8009734:	2200      	movs	r2, #0
 8009736:	491b      	ldr	r1, [pc, #108]	; (80097a4 <ull_initialise+0x11c>)
 8009738:	4628      	mov	r0, r5
 800973a:	f7fc fc40 	bl	8005fbe <dwt_write8bitoffsetreg>
 800973e:	2135      	movs	r1, #53	; 0x35
 8009740:	4628      	mov	r0, r5
 8009742:	f7fc fce9 	bl	8006118 <_dwt_otpread>
 8009746:	4603      	mov	r3, r0
 8009748:	bb20      	cbnz	r0, 8009794 <ull_initialise+0x10c>
 800974a:	2000      	movs	r0, #0
 800974c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009750:	202c      	movs	r0, #44	; 0x2c
 8009752:	f00a fa9d 	bl	8013c90 <malloc>
 8009756:	6528      	str	r0, [r5, #80]	; 0x50
 8009758:	e79d      	b.n	8009696 <ull_initialise+0xe>
 800975a:	4628      	mov	r0, r5
 800975c:	f7fd fcca 	bl	80070f4 <_dwt_prog_ldo_and_bias_tune>
 8009760:	e7ba      	b.n	80096d8 <ull_initialise+0x50>
 8009762:	2106      	movs	r1, #6
 8009764:	4628      	mov	r0, r5
 8009766:	f7fc fcd7 	bl	8006118 <_dwt_otpread>
 800976a:	6020      	str	r0, [r4, #0]
 800976c:	e7c1      	b.n	80096f2 <ull_initialise+0x6a>
 800976e:	2107      	movs	r1, #7
 8009770:	4628      	mov	r0, r5
 8009772:	f7fc fcd1 	bl	8006118 <_dwt_otpread>
 8009776:	6060      	str	r0, [r4, #4]
 8009778:	e7be      	b.n	80096f8 <ull_initialise+0x70>
 800977a:	2108      	movs	r1, #8
 800977c:	4628      	mov	r0, r5
 800977e:	f7fc fccb 	bl	8006118 <_dwt_otpread>
 8009782:	0c00      	lsrs	r0, r0, #16
 8009784:	72a0      	strb	r0, [r4, #10]
 8009786:	e7ba      	b.n	80096fe <ull_initialise+0x76>
 8009788:	2109      	movs	r1, #9
 800978a:	4628      	mov	r0, r5
 800978c:	f7fc fcc4 	bl	8006118 <_dwt_otpread>
 8009790:	72e0      	strb	r0, [r4, #11]
 8009792:	e7b7      	b.n	8009704 <ull_initialise+0x7c>
 8009794:	2200      	movs	r2, #0
 8009796:	4904      	ldr	r1, [pc, #16]	; (80097a8 <ull_initialise+0x120>)
 8009798:	4628      	mov	r0, r5
 800979a:	f7fc fd63 	bl	8006264 <dwt_write32bitoffsetreg>
 800979e:	e7d4      	b.n	800974a <ull_initialise+0xc2>
 80097a0:	10000240 	.word	0x10000240
 80097a4:	00090014 	.word	0x00090014
 80097a8:	00090004 	.word	0x00090004

080097ac <_init>:
 80097ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097ae:	b085      	sub	sp, #20
 80097b0:	4604      	mov	r4, r0
 80097b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80097b4:	6819      	ldr	r1, [r3, #0]
 80097b6:	f7ff ff67 	bl	8009688 <ull_initialise>
 80097ba:	4606      	mov	r6, r0
 80097bc:	6823      	ldr	r3, [r4, #0]
 80097be:	691b      	ldr	r3, [r3, #16]
 80097c0:	4798      	blx	r3
 80097c2:	ab03      	add	r3, sp, #12
 80097c4:	2200      	movs	r2, #0
 80097c6:	4611      	mov	r1, r2
 80097c8:	4620      	mov	r0, r4
 80097ca:	f7fd ffdd 	bl	8007788 <dwt_ioctl>
 80097ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d2:	6819      	ldr	r1, [r3, #0]
 80097d4:	4620      	mov	r0, r4
 80097d6:	f7fd fdad 	bl	8007334 <ull_configure>
 80097da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097de:	6859      	ldr	r1, [r3, #4]
 80097e0:	4620      	mov	r0, r4
 80097e2:	f7fd fb47 	bl	8006e74 <ull_configuretxrf>
 80097e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ea:	89db      	ldrh	r3, [r3, #14]
 80097ec:	2200      	movs	r2, #0
 80097ee:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 80097f2:	4620      	mov	r0, r4
 80097f4:	f7fc fc35 	bl	8006062 <dwt_write16bitoffsetreg>
 80097f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097fc:	899b      	ldrh	r3, [r3, #12]
 80097fe:	2200      	movs	r2, #0
 8009800:	4952      	ldr	r1, [pc, #328]	; (800994c <_init+0x1a0>)
 8009802:	4620      	mov	r0, r4
 8009804:	f7fc fc2d 	bl	8006062 <dwt_write16bitoffsetreg>
 8009808:	2100      	movs	r1, #0
 800980a:	4620      	mov	r0, r4
 800980c:	f7fc fec6 	bl	800659c <ull_setrxaftertxdelay>
 8009810:	2500      	movs	r5, #0
 8009812:	9500      	str	r5, [sp, #0]
 8009814:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 8009818:	462a      	mov	r2, r5
 800981a:	2110      	movs	r1, #16
 800981c:	4620      	mov	r0, r4
 800981e:	f7fd fc4f 	bl	80070c0 <dwt_modify16bitoffsetreg>
 8009822:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009826:	895a      	ldrh	r2, [r3, #10]
 8009828:	8919      	ldrh	r1, [r3, #8]
 800982a:	4620      	mov	r0, r4
 800982c:	f7fd fbb2 	bl	8006f94 <ull_configureframefilter>
 8009830:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009834:	8a1b      	ldrh	r3, [r3, #16]
 8009836:	2202      	movs	r2, #2
 8009838:	210c      	movs	r1, #12
 800983a:	4620      	mov	r0, r4
 800983c:	f7fc fc11 	bl	8006062 <dwt_write16bitoffsetreg>
 8009840:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009844:	8a5b      	ldrh	r3, [r3, #18]
 8009846:	462a      	mov	r2, r5
 8009848:	210c      	movs	r1, #12
 800984a:	4620      	mov	r0, r4
 800984c:	f7fc fc09 	bl	8006062 <dwt_write16bitoffsetreg>
 8009850:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009852:	7a19      	ldrb	r1, [r3, #8]
 8009854:	4620      	mov	r0, r4
 8009856:	f7fd fc69 	bl	800712c <ull_setleds>
 800985a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800985c:	68d9      	ldr	r1, [r3, #12]
 800985e:	4620      	mov	r0, r4
 8009860:	f7fc feb2 	bl	80065c8 <ull_setlnapamode>
 8009864:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009866:	7e0b      	ldrb	r3, [r1, #24]
 8009868:	694a      	ldr	r2, [r1, #20]
 800986a:	6909      	ldr	r1, [r1, #16]
 800986c:	4620      	mov	r0, r4
 800986e:	f7fd f9e9 	bl	8006c44 <ull_setinterrupt>
 8009872:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009874:	7f9a      	ldrb	r2, [r3, #30]
 8009876:	8b99      	ldrh	r1, [r3, #28]
 8009878:	4620      	mov	r0, r4
 800987a:	f7fc fcb7 	bl	80061ec <ull_configuresleep>
 800987e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009880:	7b93      	ldrb	r3, [r2, #14]
 8009882:	2b2e      	cmp	r3, #46	; 0x2e
 8009884:	d005      	beq.n	8009892 <_init+0xe6>
 8009886:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009888:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800988c:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 8009890:	d00a      	beq.n	80098a8 <_init+0xfc>
 8009892:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009894:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009898:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800989c:	7393      	strb	r3, [r2, #14]
 800989e:	2200      	movs	r2, #0
 80098a0:	492b      	ldr	r1, [pc, #172]	; (8009950 <_init+0x1a4>)
 80098a2:	4620      	mov	r0, r4
 80098a4:	f7fc fb8b 	bl	8005fbe <dwt_write8bitoffsetreg>
 80098a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098aa:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 80098ae:	4620      	mov	r0, r4
 80098b0:	f7fd fa68 	bl	8006d84 <ull_configciadiag>
 80098b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098b6:	6a19      	ldr	r1, [r3, #32]
 80098b8:	4620      	mov	r0, r4
 80098ba:	f7fc fea7 	bl	800660c <ull_configurestskey>
 80098be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80098c2:	4620      	mov	r0, r4
 80098c4:	f7fc fec6 	bl	8006654 <ull_configurestsiv>
 80098c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098ca:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80098ce:	bba3      	cbnz	r3, 800993a <_init+0x18e>
 80098d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098d2:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 80098d6:	4620      	mov	r0, r4
 80098d8:	f7fc fbb0 	bl	800603c <ull_configeventcounters>
 80098dc:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
 80098e0:	2d00      	cmp	r5, #0
 80098e2:	db27      	blt.n	8009934 <_init+0x188>
 80098e4:	2301      	movs	r3, #1
 80098e6:	fa03 f505 	lsl.w	r5, r3, r5
 80098ea:	b2af      	uxth	r7, r5
 80098ec:	f04f 7290 	mov.w	r2, #18874368	; 0x1200000
 80098f0:	4639      	mov	r1, r7
 80098f2:	4620      	mov	r0, r4
 80098f4:	f7fd f988 	bl	8006c08 <ull_setgpiomode>
 80098f8:	f10d 030a 	add.w	r3, sp, #10
 80098fc:	9300      	str	r3, [sp, #0]
 80098fe:	2302      	movs	r3, #2
 8009900:	2200      	movs	r2, #0
 8009902:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8009906:	4620      	mov	r0, r4
 8009908:	f7fb ff60 	bl	80057cc <dwt_readfromdevice>
 800990c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8009910:	ea23 0305 	bic.w	r3, r3, r5
 8009914:	f8ad 300a 	strh.w	r3, [sp, #10]
 8009918:	2200      	movs	r2, #0
 800991a:	490e      	ldr	r1, [pc, #56]	; (8009954 <_init+0x1a8>)
 800991c:	4620      	mov	r0, r4
 800991e:	f7fc fba0 	bl	8006062 <dwt_write16bitoffsetreg>
 8009922:	f994 204d 	ldrsb.w	r2, [r4, #77]	; 0x4d
 8009926:	fab2 f282 	clz	r2, r2
 800992a:	0952      	lsrs	r2, r2, #5
 800992c:	4639      	mov	r1, r7
 800992e:	4620      	mov	r0, r4
 8009930:	f7fd fc7a 	bl	8007228 <ull_setgpiovalue>
 8009934:	4630      	mov	r0, r6
 8009936:	b005      	add	sp, #20
 8009938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800993a:	2301      	movs	r3, #1
 800993c:	9300      	str	r3, [sp, #0]
 800993e:	23ff      	movs	r3, #255	; 0xff
 8009940:	2200      	movs	r2, #0
 8009942:	4905      	ldr	r1, [pc, #20]	; (8009958 <_init+0x1ac>)
 8009944:	4620      	mov	r0, r4
 8009946:	f7fd fa09 	bl	8006d5c <dwt_modify8bitoffsetreg>
 800994a:	e7c1      	b.n	80098d0 <_init+0x124>
 800994c:	00010004 	.word	0x00010004
 8009950:	00090014 	.word	0x00090014
 8009954:	00050008 	.word	0x00050008
 8009958:	00020004 	.word	0x00020004

0800995c <dwt_dbg_fn>:
 800995c:	2998      	cmp	r1, #152	; 0x98
 800995e:	4802      	ldr	r0, [pc, #8]	; (8009968 <dwt_dbg_fn+0xc>)
 8009960:	bf18      	it	ne
 8009962:	2000      	movne	r0, #0
 8009964:	4770      	bx	lr
 8009966:	bf00      	nop
 8009968:	08015f78 	.word	0x08015f78

0800996c <_deinit>:
 800996c:	4770      	bx	lr

0800996e <dwt_xfer3xxx>:
 800996e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	4605      	mov	r5, r0
 8009976:	460f      	mov	r7, r1
 8009978:	461e      	mov	r6, r3
 800997a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800997e:	1e59      	subs	r1, r3, #1
 8009980:	b289      	uxth	r1, r1
 8009982:	2901      	cmp	r1, #1
 8009984:	d91c      	bls.n	80099c0 <dwt_xfer3xxx+0x52>
 8009986:	19d0      	adds	r0, r2, r7
 8009988:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800998c:	443a      	add	r2, r7
 800998e:	f3c2 4104 	ubfx	r1, r2, #16, #5
 8009992:	0082      	lsls	r2, r0, #2
 8009994:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8009998:	ea43 0102 	orr.w	r1, r3, r2
 800999c:	0a09      	lsrs	r1, r1, #8
 800999e:	f88d 100c 	strb.w	r1, [sp, #12]
 80099a2:	b920      	cbnz	r0, 80099ae <dwt_xfer3xxx+0x40>
 80099a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099a8:	d018      	beq.n	80099dc <dwt_xfer3xxx+0x6e>
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d037      	beq.n	8009a1e <dwt_xfer3xxx+0xb0>
 80099ae:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80099b2:	f88d 100c 	strb.w	r1, [sp, #12]
 80099b6:	431a      	orrs	r2, r3
 80099b8:	f88d 200d 	strb.w	r2, [sp, #13]
 80099bc:	2402      	movs	r4, #2
 80099be:	e005      	b.n	80099cc <dwt_xfer3xxx+0x5e>
 80099c0:	007a      	lsls	r2, r7, #1
 80099c2:	f062 027e 	orn	r2, r2, #126	; 0x7e
 80099c6:	f88d 200c 	strb.w	r2, [sp, #12]
 80099ca:	2401      	movs	r4, #1
 80099cc:	2b02      	cmp	r3, #2
 80099ce:	d006      	beq.n	80099de <dwt_xfer3xxx+0x70>
 80099d0:	d326      	bcc.n	8009a20 <dwt_xfer3xxx+0xb2>
 80099d2:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80099d6:	2b03      	cmp	r3, #3
 80099d8:	d901      	bls.n	80099de <dwt_xfer3xxx+0x70>
 80099da:	e7fe      	b.n	80099da <dwt_xfer3xxx+0x6c>
 80099dc:	2401      	movs	r4, #1
 80099de:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80099e0:	7d1b      	ldrb	r3, [r3, #20]
 80099e2:	b94b      	cbnz	r3, 80099f8 <dwt_xfer3xxx+0x8a>
 80099e4:	682b      	ldr	r3, [r5, #0]
 80099e6:	685d      	ldr	r5, [r3, #4]
 80099e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099ea:	4632      	mov	r2, r6
 80099ec:	a903      	add	r1, sp, #12
 80099ee:	4620      	mov	r0, r4
 80099f0:	47a8      	blx	r5
 80099f2:	b004      	add	sp, #16
 80099f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099f8:	2200      	movs	r2, #0
 80099fa:	4621      	mov	r1, r4
 80099fc:	a803      	add	r0, sp, #12
 80099fe:	f7fb fda7 	bl	8005550 <dwt_generatecrc8>
 8009a02:	4602      	mov	r2, r0
 8009a04:	4631      	mov	r1, r6
 8009a06:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009a08:	f7fb fda2 	bl	8005550 <dwt_generatecrc8>
 8009a0c:	682b      	ldr	r3, [r5, #0]
 8009a0e:	9000      	str	r0, [sp, #0]
 8009a10:	689d      	ldr	r5, [r3, #8]
 8009a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a14:	4632      	mov	r2, r6
 8009a16:	a903      	add	r1, sp, #12
 8009a18:	4620      	mov	r0, r4
 8009a1a:	47a8      	blx	r5
 8009a1c:	e7e9      	b.n	80099f2 <dwt_xfer3xxx+0x84>
 8009a1e:	2401      	movs	r4, #1
 8009a20:	682b      	ldr	r3, [r5, #0]
 8009a22:	f8d3 8000 	ldr.w	r8, [r3]
 8009a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a28:	4632      	mov	r2, r6
 8009a2a:	a903      	add	r1, sp, #12
 8009a2c:	4620      	mov	r0, r4
 8009a2e:	47c0      	blx	r8
 8009a30:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009a32:	7d1b      	ldrb	r3, [r3, #20]
 8009a34:	2b02      	cmp	r3, #2
 8009a36:	d1dc      	bne.n	80099f2 <dwt_xfer3xxx+0x84>
 8009a38:	2f18      	cmp	r7, #24
 8009a3a:	d0da      	beq.n	80099f2 <dwt_xfer3xxx+0x84>
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	4621      	mov	r1, r4
 8009a40:	a803      	add	r0, sp, #12
 8009a42:	f7fb fd85 	bl	8005550 <dwt_generatecrc8>
 8009a46:	4602      	mov	r2, r0
 8009a48:	4631      	mov	r1, r6
 8009a4a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009a4c:	f7fb fd80 	bl	8005550 <dwt_generatecrc8>
 8009a50:	4604      	mov	r4, r0
 8009a52:	2200      	movs	r2, #0
 8009a54:	2118      	movs	r1, #24
 8009a56:	4628      	mov	r0, r5
 8009a58:	f000 f839 	bl	8009ace <dwt_read8bitoffsetreg>
 8009a5c:	4284      	cmp	r4, r0
 8009a5e:	d0c8      	beq.n	80099f2 <dwt_xfer3xxx+0x84>
 8009a60:	68eb      	ldr	r3, [r5, #12]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d0c5      	beq.n	80099f2 <dwt_xfer3xxx+0x84>
 8009a66:	4798      	blx	r3
 8009a68:	e7c3      	b.n	80099f2 <dwt_xfer3xxx+0x84>

08009a6a <dwt_readfromdevice>:
 8009a6a:	b510      	push	{r4, lr}
 8009a6c:	b082      	sub	sp, #8
 8009a6e:	2400      	movs	r4, #0
 8009a70:	9401      	str	r4, [sp, #4]
 8009a72:	9c04      	ldr	r4, [sp, #16]
 8009a74:	9400      	str	r4, [sp, #0]
 8009a76:	f7ff ff7a 	bl	800996e <dwt_xfer3xxx>
 8009a7a:	b002      	add	sp, #8
 8009a7c:	bd10      	pop	{r4, pc}

08009a7e <dwt_read32bitoffsetreg>:
 8009a7e:	b500      	push	{lr}
 8009a80:	b085      	sub	sp, #20
 8009a82:	ab03      	add	r3, sp, #12
 8009a84:	9300      	str	r3, [sp, #0]
 8009a86:	2304      	movs	r3, #4
 8009a88:	b292      	uxth	r2, r2
 8009a8a:	f7ff ffee 	bl	8009a6a <dwt_readfromdevice>
 8009a8e:	f10d 030f 	add.w	r3, sp, #15
 8009a92:	f10d 010b 	add.w	r1, sp, #11
 8009a96:	2000      	movs	r0, #0
 8009a98:	f813 2901 	ldrb.w	r2, [r3], #-1
 8009a9c:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 8009aa0:	428b      	cmp	r3, r1
 8009aa2:	d1f9      	bne.n	8009a98 <dwt_read32bitoffsetreg+0x1a>
 8009aa4:	b005      	add	sp, #20
 8009aa6:	f85d fb04 	ldr.w	pc, [sp], #4

08009aaa <dwt_read16bitoffsetreg>:
 8009aaa:	b500      	push	{lr}
 8009aac:	b085      	sub	sp, #20
 8009aae:	ab03      	add	r3, sp, #12
 8009ab0:	9300      	str	r3, [sp, #0]
 8009ab2:	2302      	movs	r3, #2
 8009ab4:	b292      	uxth	r2, r2
 8009ab6:	f7ff ffd8 	bl	8009a6a <dwt_readfromdevice>
 8009aba:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8009abe:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8009ac2:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8009ac6:	b280      	uxth	r0, r0
 8009ac8:	b005      	add	sp, #20
 8009aca:	f85d fb04 	ldr.w	pc, [sp], #4

08009ace <dwt_read8bitoffsetreg>:
 8009ace:	b500      	push	{lr}
 8009ad0:	b085      	sub	sp, #20
 8009ad2:	f10d 030f 	add.w	r3, sp, #15
 8009ad6:	9300      	str	r3, [sp, #0]
 8009ad8:	2301      	movs	r3, #1
 8009ada:	b292      	uxth	r2, r2
 8009adc:	f7ff ffc5 	bl	8009a6a <dwt_readfromdevice>
 8009ae0:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8009ae4:	b005      	add	sp, #20
 8009ae6:	f85d fb04 	ldr.w	pc, [sp], #4

08009aea <ull_readdiagnostics>:
 8009aea:	b530      	push	{r4, r5, lr}
 8009aec:	b0bd      	sub	sp, #244	; 0xf4
 8009aee:	4605      	mov	r5, r0
 8009af0:	460c      	mov	r4, r1
 8009af2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009af4:	7b9a      	ldrb	r2, [r3, #14]
 8009af6:	2a01      	cmp	r2, #1
 8009af8:	d01c      	beq.n	8009b34 <ull_readdiagnostics+0x4a>
 8009afa:	2a03      	cmp	r2, #3
 8009afc:	f040 81e8 	bne.w	8009ed0 <ull_readdiagnostics+0x3e6>
 8009b00:	7d9b      	ldrb	r3, [r3, #22]
 8009b02:	f013 0f08 	tst.w	r3, #8
 8009b06:	d10c      	bne.n	8009b22 <ull_readdiagnostics+0x38>
 8009b08:	f013 0f04 	tst.w	r3, #4
 8009b0c:	ab02      	add	r3, sp, #8
 8009b0e:	9300      	str	r3, [sp, #0]
 8009b10:	bf14      	ite	ne
 8009b12:	2338      	movne	r3, #56	; 0x38
 8009b14:	2320      	moveq	r3, #32
 8009b16:	2200      	movs	r2, #0
 8009b18:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8009b1c:	f7ff ffa5 	bl	8009a6a <dwt_readfromdevice>
 8009b20:	e019      	b.n	8009b56 <ull_readdiagnostics+0x6c>
 8009b22:	ab02      	add	r3, sp, #8
 8009b24:	9300      	str	r3, [sp, #0]
 8009b26:	23e8      	movs	r3, #232	; 0xe8
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8009b2e:	f7ff ff9c 	bl	8009a6a <dwt_readfromdevice>
 8009b32:	e010      	b.n	8009b56 <ull_readdiagnostics+0x6c>
 8009b34:	7d9b      	ldrb	r3, [r3, #22]
 8009b36:	f013 0f08 	tst.w	r3, #8
 8009b3a:	f040 81c0 	bne.w	8009ebe <ull_readdiagnostics+0x3d4>
 8009b3e:	f013 0f04 	tst.w	r3, #4
 8009b42:	ab02      	add	r3, sp, #8
 8009b44:	9300      	str	r3, [sp, #0]
 8009b46:	bf14      	ite	ne
 8009b48:	2338      	movne	r3, #56	; 0x38
 8009b4a:	2320      	moveq	r3, #32
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8009b52:	f7ff ff8a 	bl	8009a6a <dwt_readfromdevice>
 8009b56:	f10d 0217 	add.w	r2, sp, #23
 8009b5a:	f104 031a 	add.w	r3, r4, #26
 8009b5e:	f104 0020 	add.w	r0, r4, #32
 8009b62:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8009b66:	f803 1b01 	strb.w	r1, [r3], #1
 8009b6a:	4283      	cmp	r3, r0
 8009b6c:	d1f9      	bne.n	8009b62 <ull_readdiagnostics+0x78>
 8009b6e:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8009b72:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8009b76:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009b7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b7e:	8463      	strh	r3, [r4, #34]	; 0x22
 8009b80:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8009b84:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8009b88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009b8c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009b90:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8009b94:	bf1c      	itt	ne
 8009b96:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 8009b9a:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 8009b9e:	8423      	strh	r3, [r4, #32]
 8009ba0:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 8009ba4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009ba8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009bb0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009bb2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009bb4:	7d9b      	ldrb	r3, [r3, #22]
 8009bb6:	f013 0f02 	tst.w	r3, #2
 8009bba:	f040 817e 	bne.w	8009eba <ull_readdiagnostics+0x3d0>
 8009bbe:	aa0a      	add	r2, sp, #40	; 0x28
 8009bc0:	1e63      	subs	r3, r4, #1
 8009bc2:	1d20      	adds	r0, r4, #4
 8009bc4:	f812 1b01 	ldrb.w	r1, [r2], #1
 8009bc8:	f803 1f01 	strb.w	r1, [r3, #1]!
 8009bcc:	79d1      	ldrb	r1, [r2, #7]
 8009bce:	7219      	strb	r1, [r3, #8]
 8009bd0:	7bd1      	ldrb	r1, [r2, #15]
 8009bd2:	7459      	strb	r1, [r3, #17]
 8009bd4:	4283      	cmp	r3, r0
 8009bd6:	d1f5      	bne.n	8009bc4 <ull_readdiagnostics+0xda>
 8009bd8:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8009bdc:	7163      	strb	r3, [r4, #5]
 8009bde:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8009be2:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8009be6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009bea:	80e3      	strh	r3, [r4, #6]
 8009bec:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8009bf0:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8009bf4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009bf8:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8009bfc:	f8a4 300d 	strh.w	r3, [r4, #13]
 8009c00:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8009c04:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8009c08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009c0c:	f8a4 300f 	strh.w	r3, [r4, #15]
 8009c10:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8009c14:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8009c18:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009c1c:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8009c20:	82e3      	strh	r3, [r4, #22]
 8009c22:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 8009c26:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8009c2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009c2e:	8323      	strh	r3, [r4, #24]
 8009c30:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009c32:	7d9b      	ldrb	r3, [r3, #22]
 8009c34:	f013 0f04 	tst.w	r3, #4
 8009c38:	f040 813f 	bne.w	8009eba <ull_readdiagnostics+0x3d0>
 8009c3c:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 8009c40:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8009c44:	041b      	lsls	r3, r3, #16
 8009c46:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009c4a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8009c54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009c58:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8009c5c:	6263      	str	r3, [r4, #36]	; 0x24
 8009c5e:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 8009c62:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 8009c66:	041b      	lsls	r3, r3, #16
 8009c68:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009c6c:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8009c70:	4313      	orrs	r3, r2
 8009c72:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 8009c76:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009c7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c7e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c80:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 8009c84:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8009c88:	041b      	lsls	r3, r3, #16
 8009c8a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009c8e:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8009c92:	4313      	orrs	r3, r2
 8009c94:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8009c98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009c9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ca0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ca2:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 8009ca6:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 8009caa:	041b      	lsls	r3, r3, #16
 8009cac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009cb0:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 8009cba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009cbe:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009cc2:	6323      	str	r3, [r4, #48]	; 0x30
 8009cc4:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 8009cc8:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 8009ccc:	041b      	lsls	r3, r3, #16
 8009cce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009cd2:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 8009cdc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009ce0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009ce4:	6363      	str	r3, [r4, #52]	; 0x34
 8009ce6:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 8009cea:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 8009cee:	041b      	lsls	r3, r3, #16
 8009cf0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009cf4:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 8009cfe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009d02:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009d06:	63a3      	str	r3, [r4, #56]	; 0x38
 8009d08:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 8009d0c:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8009d10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009d14:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8009d16:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 8009d1a:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8009d1e:	041b      	lsls	r3, r3, #16
 8009d20:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009d24:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 8009d2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009d32:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009d36:	6423      	str	r3, [r4, #64]	; 0x40
 8009d38:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 8009d3c:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 8009d40:	041b      	lsls	r3, r3, #16
 8009d42:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009d46:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
 8009d50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009d54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d58:	6463      	str	r3, [r4, #68]	; 0x44
 8009d5a:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 8009d5e:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8009d62:	041b      	lsls	r3, r3, #16
 8009d64:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009d68:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 8009d72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009d76:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009d7a:	64a3      	str	r3, [r4, #72]	; 0x48
 8009d7c:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8009d80:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8009d84:	041b      	lsls	r3, r3, #16
 8009d86:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009d8a:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
 8009d94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009d98:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009d9c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009d9e:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 8009da2:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
 8009da6:	041b      	lsls	r3, r3, #16
 8009da8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009dac:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 8009db0:	4313      	orrs	r3, r2
 8009db2:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 8009db6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009dba:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009dbe:	6523      	str	r3, [r4, #80]	; 0x50
 8009dc0:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 8009dc4:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8009dc8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009dcc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009dd0:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8009dd4:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 8009dd8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8009ddc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009de4:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8009de8:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 8009dec:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 8009df0:	041b      	lsls	r3, r3, #16
 8009df2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009df6:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 8009e00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009e04:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009e08:	65a3      	str	r3, [r4, #88]	; 0x58
 8009e0a:	f89d 20c3 	ldrb.w	r2, [sp, #195]	; 0xc3
 8009e0e:	f89d 30c2 	ldrb.w	r3, [sp, #194]	; 0xc2
 8009e12:	041b      	lsls	r3, r3, #16
 8009e14:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009e18:	f89d 20c0 	ldrb.w	r2, [sp, #192]	; 0xc0
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	f89d 20c1 	ldrb.w	r2, [sp, #193]	; 0xc1
 8009e22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009e26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e2a:	65e3      	str	r3, [r4, #92]	; 0x5c
 8009e2c:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
 8009e30:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
 8009e34:	041b      	lsls	r3, r3, #16
 8009e36:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009e3a:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
 8009e44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009e48:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009e4c:	6623      	str	r3, [r4, #96]	; 0x60
 8009e4e:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
 8009e52:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 8009e56:	041b      	lsls	r3, r3, #16
 8009e58:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009e5c:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 8009e60:	4313      	orrs	r3, r2
 8009e62:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 8009e66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009e6a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009e6e:	6663      	str	r3, [r4, #100]	; 0x64
 8009e70:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
 8009e74:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
 8009e78:	041b      	lsls	r3, r3, #16
 8009e7a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009e7e:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 8009e82:	4313      	orrs	r3, r2
 8009e84:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 8009e88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009e8c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009e90:	66a3      	str	r3, [r4, #104]	; 0x68
 8009e92:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 8009e96:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8009e9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009e9e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009ea2:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 8009ea6:	f89d 20ed 	ldrb.w	r2, [sp, #237]	; 0xed
 8009eaa:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 8009eae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009eb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009eb6:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 8009eba:	b03d      	add	sp, #244	; 0xf4
 8009ebc:	bd30      	pop	{r4, r5, pc}
 8009ebe:	ab02      	add	r3, sp, #8
 8009ec0:	9300      	str	r3, [sp, #0]
 8009ec2:	23e8      	movs	r3, #232	; 0xe8
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8009eca:	f7ff fdce 	bl	8009a6a <dwt_readfromdevice>
 8009ece:	e642      	b.n	8009b56 <ull_readdiagnostics+0x6c>
 8009ed0:	7d9b      	ldrb	r3, [r3, #22]
 8009ed2:	f013 0f01 	tst.w	r3, #1
 8009ed6:	f000 81b3 	beq.w	800a240 <ull_readdiagnostics+0x756>
 8009eda:	ab02      	add	r3, sp, #8
 8009edc:	9300      	str	r3, [sp, #0]
 8009ede:	236c      	movs	r3, #108	; 0x6c
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8009ee6:	f7ff fdc0 	bl	8009a6a <dwt_readfromdevice>
 8009eea:	ab1d      	add	r3, sp, #116	; 0x74
 8009eec:	9300      	str	r3, [sp, #0]
 8009eee:	236c      	movs	r3, #108	; 0x6c
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 8009ef6:	4628      	mov	r0, r5
 8009ef8:	f7ff fdb7 	bl	8009a6a <dwt_readfromdevice>
 8009efc:	aa02      	add	r2, sp, #8
 8009efe:	1e63      	subs	r3, r4, #1
 8009f00:	1d20      	adds	r0, r4, #4
 8009f02:	f812 1b01 	ldrb.w	r1, [r2], #1
 8009f06:	f803 1f01 	strb.w	r1, [r3, #1]!
 8009f0a:	79d1      	ldrb	r1, [r2, #7]
 8009f0c:	7219      	strb	r1, [r3, #8]
 8009f0e:	7bd1      	ldrb	r1, [r2, #15]
 8009f10:	7459      	strb	r1, [r3, #17]
 8009f12:	7dd1      	ldrb	r1, [r2, #23]
 8009f14:	7699      	strb	r1, [r3, #26]
 8009f16:	4283      	cmp	r3, r0
 8009f18:	d1f3      	bne.n	8009f02 <ull_readdiagnostics+0x418>
 8009f1a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8009f1e:	77e3      	strb	r3, [r4, #31]
 8009f20:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8009f24:	7163      	strb	r3, [r4, #5]
 8009f26:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8009f2a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8009f2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009f32:	80e3      	strh	r3, [r4, #6]
 8009f34:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8009f38:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8009f3c:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8009f40:	f3c2 12cf 	ubfx	r2, r2, #7, #16
 8009f44:	f8a4 200d 	strh.w	r2, [r4, #13]
 8009f48:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8009f4c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8009f50:	f8a4 200f 	strh.w	r2, [r4, #15]
 8009f54:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8009f58:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009f5c:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8009f60:	82e3      	strh	r3, [r4, #22]
 8009f62:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8009f66:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8009f6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009f6e:	8323      	strh	r3, [r4, #24]
 8009f70:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8009f74:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8009f78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009f7c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009f80:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8009f84:	bf1c      	itt	ne
 8009f86:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 8009f8a:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 8009f8e:	8423      	strh	r3, [r4, #32]
 8009f90:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 8009f94:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8009f98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009f9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009fa0:	8463      	strh	r3, [r4, #34]	; 0x22
 8009fa2:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8009fa6:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8009faa:	041b      	lsls	r3, r3, #16
 8009fac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009fb0:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 8009fba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009fbe:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8009fc2:	6263      	str	r3, [r4, #36]	; 0x24
 8009fc4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009fc6:	7d9b      	ldrb	r3, [r3, #22]
 8009fc8:	f013 0f01 	tst.w	r3, #1
 8009fcc:	f43f af75 	beq.w	8009eba <ull_readdiagnostics+0x3d0>
 8009fd0:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 8009fd4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8009fd8:	041b      	lsls	r3, r3, #16
 8009fda:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009fde:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8009fe8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009fec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ff0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ff2:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8009ff6:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8009ffa:	041b      	lsls	r3, r3, #16
 8009ffc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a000:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800a004:	4313      	orrs	r3, r2
 800a006:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800a00a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a00e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a012:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a014:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 800a018:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 800a01c:	041b      	lsls	r3, r3, #16
 800a01e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a022:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 800a026:	4313      	orrs	r3, r2
 800a028:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 800a02c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a030:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a034:	6323      	str	r3, [r4, #48]	; 0x30
 800a036:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 800a03a:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800a03e:	041b      	lsls	r3, r3, #16
 800a040:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a044:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800a048:	4313      	orrs	r3, r2
 800a04a:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 800a04e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a052:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a056:	6363      	str	r3, [r4, #52]	; 0x34
 800a058:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 800a05c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800a060:	041b      	lsls	r3, r3, #16
 800a062:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a066:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800a06a:	4313      	orrs	r3, r2
 800a06c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800a070:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a074:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a078:	63a3      	str	r3, [r4, #56]	; 0x38
 800a07a:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 800a07e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800a082:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a086:	87a3      	strh	r3, [r4, #60]	; 0x3c
 800a088:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 800a08c:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800a090:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a098:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800a09a:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 800a09e:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 800a0a2:	041b      	lsls	r3, r3, #16
 800a0a4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a0a8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 800a0b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a0b6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800a0ba:	6423      	str	r3, [r4, #64]	; 0x40
 800a0bc:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 800a0c0:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
 800a0c4:	041b      	lsls	r3, r3, #16
 800a0c6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a0ca:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 800a0d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a0d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0dc:	6463      	str	r3, [r4, #68]	; 0x44
 800a0de:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
 800a0e2:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 800a0e6:	041b      	lsls	r3, r3, #16
 800a0e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a0ec:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 800a0f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a0fa:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a0fe:	64a3      	str	r3, [r4, #72]	; 0x48
 800a100:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 800a104:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 800a108:	041b      	lsls	r3, r3, #16
 800a10a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a10e:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 800a112:	4313      	orrs	r3, r2
 800a114:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
 800a118:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a11c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a120:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a122:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 800a126:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 800a12a:	041b      	lsls	r3, r3, #16
 800a12c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a130:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 800a134:	4313      	orrs	r3, r2
 800a136:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 800a13a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a13e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a142:	6523      	str	r3, [r4, #80]	; 0x50
 800a144:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 800a148:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 800a14c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a150:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800a154:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 800a158:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 800a15c:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 800a160:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a168:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 800a16c:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 800a170:	f89d 30ae 	ldrb.w	r3, [sp, #174]	; 0xae
 800a174:	041b      	lsls	r3, r3, #16
 800a176:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a17a:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 800a17e:	4313      	orrs	r3, r2
 800a180:	f89d 20ad 	ldrb.w	r2, [sp, #173]	; 0xad
 800a184:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a188:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800a18c:	65a3      	str	r3, [r4, #88]	; 0x58
 800a18e:	f89d 20b3 	ldrb.w	r2, [sp, #179]	; 0xb3
 800a192:	f89d 30b2 	ldrb.w	r3, [sp, #178]	; 0xb2
 800a196:	041b      	lsls	r3, r3, #16
 800a198:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a19c:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	f89d 20b1 	ldrb.w	r2, [sp, #177]	; 0xb1
 800a1a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a1aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1ae:	65e3      	str	r3, [r4, #92]	; 0x5c
 800a1b0:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 800a1b4:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
 800a1b8:	041b      	lsls	r3, r3, #16
 800a1ba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a1be:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	f89d 20b5 	ldrb.w	r2, [sp, #181]	; 0xb5
 800a1c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a1cc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a1d0:	6623      	str	r3, [r4, #96]	; 0x60
 800a1d2:	f89d 20bb 	ldrb.w	r2, [sp, #187]	; 0xbb
 800a1d6:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
 800a1da:	041b      	lsls	r3, r3, #16
 800a1dc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a1e0:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	f89d 20b9 	ldrb.w	r2, [sp, #185]	; 0xb9
 800a1ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a1ee:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a1f2:	6663      	str	r3, [r4, #100]	; 0x64
 800a1f4:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 800a1f8:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 800a1fc:	041b      	lsls	r3, r3, #16
 800a1fe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a202:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 800a206:	4313      	orrs	r3, r2
 800a208:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 800a20c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a210:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a214:	66a3      	str	r3, [r4, #104]	; 0x68
 800a216:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 800a21a:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 800a21e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a222:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800a226:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800a22a:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 800a22e:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 800a232:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a23a:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 800a23e:	e63c      	b.n	8009eba <ull_readdiagnostics+0x3d0>
 800a240:	ab02      	add	r3, sp, #8
 800a242:	9300      	str	r3, [sp, #0]
 800a244:	2328      	movs	r3, #40	; 0x28
 800a246:	2200      	movs	r2, #0
 800a248:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800a24c:	f7ff fc0d 	bl	8009a6a <dwt_readfromdevice>
 800a250:	e654      	b.n	8009efc <ull_readdiagnostics+0x412>
	...

0800a254 <ull_readrxtimestamp>:
 800a254:	b500      	push	{lr}
 800a256:	b083      	sub	sp, #12
 800a258:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a25a:	7b9b      	ldrb	r3, [r3, #14]
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d00b      	beq.n	800a278 <ull_readrxtimestamp+0x24>
 800a260:	2b03      	cmp	r3, #3
 800a262:	d110      	bne.n	800a286 <ull_readrxtimestamp+0x32>
 800a264:	9100      	str	r1, [sp, #0]
 800a266:	2305      	movs	r3, #5
 800a268:	2204      	movs	r2, #4
 800a26a:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800a26e:	f7ff fbfc 	bl	8009a6a <dwt_readfromdevice>
 800a272:	b003      	add	sp, #12
 800a274:	f85d fb04 	ldr.w	pc, [sp], #4
 800a278:	9100      	str	r1, [sp, #0]
 800a27a:	2305      	movs	r3, #5
 800a27c:	2200      	movs	r2, #0
 800a27e:	4905      	ldr	r1, [pc, #20]	; (800a294 <ull_readrxtimestamp+0x40>)
 800a280:	f7ff fbf3 	bl	8009a6a <dwt_readfromdevice>
 800a284:	e7f5      	b.n	800a272 <ull_readrxtimestamp+0x1e>
 800a286:	9100      	str	r1, [sp, #0]
 800a288:	2305      	movs	r3, #5
 800a28a:	2200      	movs	r2, #0
 800a28c:	2160      	movs	r1, #96	; 0x60
 800a28e:	f7ff fbec 	bl	8009a6a <dwt_readfromdevice>
 800a292:	e7ee      	b.n	800a272 <ull_readrxtimestamp+0x1e>
 800a294:	00180004 	.word	0x00180004

0800a298 <dwt_writetodevice>:
 800a298:	b510      	push	{r4, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 800a2a0:	9401      	str	r4, [sp, #4]
 800a2a2:	9c04      	ldr	r4, [sp, #16]
 800a2a4:	9400      	str	r4, [sp, #0]
 800a2a6:	f7ff fb62 	bl	800996e <dwt_xfer3xxx>
 800a2aa:	b002      	add	sp, #8
 800a2ac:	bd10      	pop	{r4, pc}

0800a2ae <dwt_write16bitoffsetreg>:
 800a2ae:	b500      	push	{lr}
 800a2b0:	b085      	sub	sp, #20
 800a2b2:	f88d 300c 	strb.w	r3, [sp, #12]
 800a2b6:	0a1b      	lsrs	r3, r3, #8
 800a2b8:	f88d 300d 	strb.w	r3, [sp, #13]
 800a2bc:	ab03      	add	r3, sp, #12
 800a2be:	9300      	str	r3, [sp, #0]
 800a2c0:	2302      	movs	r3, #2
 800a2c2:	b292      	uxth	r2, r2
 800a2c4:	f7ff ffe8 	bl	800a298 <dwt_writetodevice>
 800a2c8:	b005      	add	sp, #20
 800a2ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a2d0 <ull_force_clocks>:
 800a2d0:	b508      	push	{r3, lr}
 800a2d2:	2901      	cmp	r1, #1
 800a2d4:	d002      	beq.n	800a2dc <ull_force_clocks+0xc>
 800a2d6:	2905      	cmp	r1, #5
 800a2d8:	d007      	beq.n	800a2ea <ull_force_clocks+0x1a>
 800a2da:	bd08      	pop	{r3, pc}
 800a2dc:	f641 0322 	movw	r3, #6178	; 0x1822
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	4905      	ldr	r1, [pc, #20]	; (800a2f8 <ull_force_clocks+0x28>)
 800a2e4:	f7ff ffe3 	bl	800a2ae <dwt_write16bitoffsetreg>
 800a2e8:	e7f7      	b.n	800a2da <ull_force_clocks+0xa>
 800a2ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	4901      	ldr	r1, [pc, #4]	; (800a2f8 <ull_force_clocks+0x28>)
 800a2f2:	f7ff ffdc 	bl	800a2ae <dwt_write16bitoffsetreg>
 800a2f6:	e7f0      	b.n	800a2da <ull_force_clocks+0xa>
 800a2f8:	00110004 	.word	0x00110004

0800a2fc <__dwt_otp_write_wdata_id_reg>:
 800a2fc:	b538      	push	{r3, r4, r5, lr}
 800a2fe:	4605      	mov	r5, r0
 800a300:	460c      	mov	r4, r1
 800a302:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 800a306:	b29b      	uxth	r3, r3
 800a308:	2200      	movs	r2, #0
 800a30a:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800a30e:	f7ff ffce 	bl	800a2ae <dwt_write16bitoffsetreg>
 800a312:	b2a3      	uxth	r3, r4
 800a314:	2200      	movs	r2, #0
 800a316:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800a31a:	4628      	mov	r0, r5
 800a31c:	f7ff ffc7 	bl	800a2ae <dwt_write16bitoffsetreg>
 800a320:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a324 <_dwt_otpread>:
 800a324:	b570      	push	{r4, r5, r6, lr}
 800a326:	4604      	mov	r4, r0
 800a328:	460e      	mov	r6, r1
 800a32a:	4d0c      	ldr	r5, [pc, #48]	; (800a35c <_dwt_otpread+0x38>)
 800a32c:	2301      	movs	r3, #1
 800a32e:	2200      	movs	r2, #0
 800a330:	4629      	mov	r1, r5
 800a332:	f7ff ffbc 	bl	800a2ae <dwt_write16bitoffsetreg>
 800a336:	4633      	mov	r3, r6
 800a338:	2200      	movs	r2, #0
 800a33a:	4909      	ldr	r1, [pc, #36]	; (800a360 <_dwt_otpread+0x3c>)
 800a33c:	4620      	mov	r0, r4
 800a33e:	f7ff ffb6 	bl	800a2ae <dwt_write16bitoffsetreg>
 800a342:	2302      	movs	r3, #2
 800a344:	2200      	movs	r2, #0
 800a346:	4629      	mov	r1, r5
 800a348:	4620      	mov	r0, r4
 800a34a:	f7ff ffb0 	bl	800a2ae <dwt_write16bitoffsetreg>
 800a34e:	2200      	movs	r2, #0
 800a350:	4904      	ldr	r1, [pc, #16]	; (800a364 <_dwt_otpread+0x40>)
 800a352:	4620      	mov	r0, r4
 800a354:	f7ff fb93 	bl	8009a7e <dwt_read32bitoffsetreg>
 800a358:	bd70      	pop	{r4, r5, r6, pc}
 800a35a:	bf00      	nop
 800a35c:	000b0008 	.word	0x000b0008
 800a360:	000b0004 	.word	0x000b0004
 800a364:	000b0010 	.word	0x000b0010

0800a368 <dwt_write32bitoffsetreg>:
 800a368:	b510      	push	{r4, lr}
 800a36a:	b084      	sub	sp, #16
 800a36c:	f88d 300c 	strb.w	r3, [sp, #12]
 800a370:	0a1c      	lsrs	r4, r3, #8
 800a372:	f88d 400d 	strb.w	r4, [sp, #13]
 800a376:	0c1c      	lsrs	r4, r3, #16
 800a378:	f88d 400e 	strb.w	r4, [sp, #14]
 800a37c:	0e1b      	lsrs	r3, r3, #24
 800a37e:	f88d 300f 	strb.w	r3, [sp, #15]
 800a382:	ab03      	add	r3, sp, #12
 800a384:	9300      	str	r3, [sp, #0]
 800a386:	2304      	movs	r3, #4
 800a388:	b292      	uxth	r2, r2
 800a38a:	f7ff ff85 	bl	800a298 <dwt_writetodevice>
 800a38e:	b004      	add	sp, #16
 800a390:	bd10      	pop	{r4, pc}

0800a392 <_dwt_adjust_delaytime>:
 800a392:	b538      	push	{r3, r4, r5, lr}
 800a394:	4604      	mov	r4, r0
 800a396:	b989      	cbnz	r1, 800a3bc <_dwt_adjust_delaytime+0x2a>
 800a398:	2200      	movs	r2, #0
 800a39a:	2128      	movs	r1, #40	; 0x28
 800a39c:	f7ff fb6f 	bl	8009a7e <dwt_read32bitoffsetreg>
 800a3a0:	4605      	mov	r5, r0
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	f7ff fb90 	bl	8009ace <dwt_read8bitoffsetreg>
 800a3ae:	1a2b      	subs	r3, r5, r0
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	2128      	movs	r1, #40	; 0x28
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	f7ff ffd7 	bl	800a368 <dwt_write32bitoffsetreg>
 800a3ba:	bd38      	pop	{r3, r4, r5, pc}
 800a3bc:	2200      	movs	r2, #0
 800a3be:	2128      	movs	r1, #40	; 0x28
 800a3c0:	f7ff fb5d 	bl	8009a7e <dwt_read32bitoffsetreg>
 800a3c4:	4605      	mov	r5, r0
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	217c      	movs	r1, #124	; 0x7c
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	f7ff fb7f 	bl	8009ace <dwt_read8bitoffsetreg>
 800a3d0:	1a2b      	subs	r3, r5, r0
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	2128      	movs	r1, #40	; 0x28
 800a3d6:	4620      	mov	r0, r4
 800a3d8:	f7ff ffc6 	bl	800a368 <dwt_write32bitoffsetreg>
 800a3dc:	e7ed      	b.n	800a3ba <_dwt_adjust_delaytime+0x28>

0800a3de <ull_setrxaftertxdelay>:
 800a3de:	b538      	push	{r3, r4, r5, lr}
 800a3e0:	4605      	mov	r5, r0
 800a3e2:	460c      	mov	r4, r1
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a3ea:	f7ff fb48 	bl	8009a7e <dwt_read32bitoffsetreg>
 800a3ee:	0d00      	lsrs	r0, r0, #20
 800a3f0:	0500      	lsls	r0, r0, #20
 800a3f2:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a3f6:	4303      	orrs	r3, r0
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a3fe:	4628      	mov	r0, r5
 800a400:	f7ff ffb2 	bl	800a368 <dwt_write32bitoffsetreg>
 800a404:	bd38      	pop	{r3, r4, r5, pc}

0800a406 <ull_setlnapamode>:
 800a406:	b538      	push	{r3, r4, r5, lr}
 800a408:	4605      	mov	r5, r0
 800a40a:	460c      	mov	r4, r1
 800a40c:	2200      	movs	r2, #0
 800a40e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800a412:	f7ff fb34 	bl	8009a7e <dwt_read32bitoffsetreg>
 800a416:	f420 337c 	bic.w	r3, r0, #258048	; 0x3f000
 800a41a:	f014 0f01 	tst.w	r4, #1
 800a41e:	bf18      	it	ne
 800a420:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
 800a424:	f014 0f02 	tst.w	r4, #2
 800a428:	bf18      	it	ne
 800a42a:	f443 5300 	orrne.w	r3, r3, #8192	; 0x2000
 800a42e:	f014 0f04 	tst.w	r4, #4
 800a432:	bf18      	it	ne
 800a434:	f443 3390 	orrne.w	r3, r3, #73728	; 0x12000
 800a438:	2200      	movs	r2, #0
 800a43a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800a43e:	4628      	mov	r0, r5
 800a440:	f7ff ff92 	bl	800a368 <dwt_write32bitoffsetreg>
 800a444:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a448 <ull_configurestskey>:
 800a448:	b538      	push	{r3, r4, r5, lr}
 800a44a:	4605      	mov	r5, r0
 800a44c:	460c      	mov	r4, r1
 800a44e:	680b      	ldr	r3, [r1, #0]
 800a450:	2200      	movs	r2, #0
 800a452:	490b      	ldr	r1, [pc, #44]	; (800a480 <ull_configurestskey+0x38>)
 800a454:	f7ff ff88 	bl	800a368 <dwt_write32bitoffsetreg>
 800a458:	6863      	ldr	r3, [r4, #4]
 800a45a:	2200      	movs	r2, #0
 800a45c:	4909      	ldr	r1, [pc, #36]	; (800a484 <ull_configurestskey+0x3c>)
 800a45e:	4628      	mov	r0, r5
 800a460:	f7ff ff82 	bl	800a368 <dwt_write32bitoffsetreg>
 800a464:	68a3      	ldr	r3, [r4, #8]
 800a466:	2200      	movs	r2, #0
 800a468:	4907      	ldr	r1, [pc, #28]	; (800a488 <ull_configurestskey+0x40>)
 800a46a:	4628      	mov	r0, r5
 800a46c:	f7ff ff7c 	bl	800a368 <dwt_write32bitoffsetreg>
 800a470:	68e3      	ldr	r3, [r4, #12]
 800a472:	2200      	movs	r2, #0
 800a474:	4905      	ldr	r1, [pc, #20]	; (800a48c <ull_configurestskey+0x44>)
 800a476:	4628      	mov	r0, r5
 800a478:	f7ff ff76 	bl	800a368 <dwt_write32bitoffsetreg>
 800a47c:	bd38      	pop	{r3, r4, r5, pc}
 800a47e:	bf00      	nop
 800a480:	0002000c 	.word	0x0002000c
 800a484:	00020010 	.word	0x00020010
 800a488:	00020014 	.word	0x00020014
 800a48c:	00020018 	.word	0x00020018

0800a490 <ull_configurestsiv>:
 800a490:	b538      	push	{r3, r4, r5, lr}
 800a492:	4605      	mov	r5, r0
 800a494:	460c      	mov	r4, r1
 800a496:	680b      	ldr	r3, [r1, #0]
 800a498:	2200      	movs	r2, #0
 800a49a:	490b      	ldr	r1, [pc, #44]	; (800a4c8 <ull_configurestsiv+0x38>)
 800a49c:	f7ff ff64 	bl	800a368 <dwt_write32bitoffsetreg>
 800a4a0:	6863      	ldr	r3, [r4, #4]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	4909      	ldr	r1, [pc, #36]	; (800a4cc <ull_configurestsiv+0x3c>)
 800a4a6:	4628      	mov	r0, r5
 800a4a8:	f7ff ff5e 	bl	800a368 <dwt_write32bitoffsetreg>
 800a4ac:	68a3      	ldr	r3, [r4, #8]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	4907      	ldr	r1, [pc, #28]	; (800a4d0 <ull_configurestsiv+0x40>)
 800a4b2:	4628      	mov	r0, r5
 800a4b4:	f7ff ff58 	bl	800a368 <dwt_write32bitoffsetreg>
 800a4b8:	68e3      	ldr	r3, [r4, #12]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	4905      	ldr	r1, [pc, #20]	; (800a4d4 <ull_configurestsiv+0x44>)
 800a4be:	4628      	mov	r0, r5
 800a4c0:	f7ff ff52 	bl	800a368 <dwt_write32bitoffsetreg>
 800a4c4:	bd38      	pop	{r3, r4, r5, pc}
 800a4c6:	bf00      	nop
 800a4c8:	0002001c 	.word	0x0002001c
 800a4cc:	00020020 	.word	0x00020020
 800a4d0:	00020024 	.word	0x00020024
 800a4d4:	00020028 	.word	0x00020028

0800a4d8 <ull_configmrxlut>:
 800a4d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4dc:	4604      	mov	r4, r0
 800a4de:	2905      	cmp	r1, #5
 800a4e0:	d03a      	beq.n	800a558 <ull_configmrxlut+0x80>
 800a4e2:	4d23      	ldr	r5, [pc, #140]	; (800a570 <ull_configmrxlut+0x98>)
 800a4e4:	462e      	mov	r6, r5
 800a4e6:	4f23      	ldr	r7, [pc, #140]	; (800a574 <ull_configmrxlut+0x9c>)
 800a4e8:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 800a5b0 <ull_configmrxlut+0xd8>
 800a4ec:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800a5b4 <ull_configmrxlut+0xdc>
 800a4f0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a5b8 <ull_configmrxlut+0xe0>
 800a4f4:	4b20      	ldr	r3, [pc, #128]	; (800a578 <ull_configmrxlut+0xa0>)
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	4920      	ldr	r1, [pc, #128]	; (800a57c <ull_configmrxlut+0xa4>)
 800a4fa:	4620      	mov	r0, r4
 800a4fc:	f7ff ff34 	bl	800a368 <dwt_write32bitoffsetreg>
 800a500:	4653      	mov	r3, sl
 800a502:	2200      	movs	r2, #0
 800a504:	491e      	ldr	r1, [pc, #120]	; (800a580 <ull_configmrxlut+0xa8>)
 800a506:	4620      	mov	r0, r4
 800a508:	f7ff ff2e 	bl	800a368 <dwt_write32bitoffsetreg>
 800a50c:	464b      	mov	r3, r9
 800a50e:	2200      	movs	r2, #0
 800a510:	491c      	ldr	r1, [pc, #112]	; (800a584 <ull_configmrxlut+0xac>)
 800a512:	4620      	mov	r0, r4
 800a514:	f7ff ff28 	bl	800a368 <dwt_write32bitoffsetreg>
 800a518:	4643      	mov	r3, r8
 800a51a:	2200      	movs	r2, #0
 800a51c:	491a      	ldr	r1, [pc, #104]	; (800a588 <ull_configmrxlut+0xb0>)
 800a51e:	4620      	mov	r0, r4
 800a520:	f7ff ff22 	bl	800a368 <dwt_write32bitoffsetreg>
 800a524:	463b      	mov	r3, r7
 800a526:	2200      	movs	r2, #0
 800a528:	4918      	ldr	r1, [pc, #96]	; (800a58c <ull_configmrxlut+0xb4>)
 800a52a:	4620      	mov	r0, r4
 800a52c:	f7ff ff1c 	bl	800a368 <dwt_write32bitoffsetreg>
 800a530:	4633      	mov	r3, r6
 800a532:	2200      	movs	r2, #0
 800a534:	4916      	ldr	r1, [pc, #88]	; (800a590 <ull_configmrxlut+0xb8>)
 800a536:	4620      	mov	r0, r4
 800a538:	f7ff ff16 	bl	800a368 <dwt_write32bitoffsetreg>
 800a53c:	462b      	mov	r3, r5
 800a53e:	2200      	movs	r2, #0
 800a540:	4914      	ldr	r1, [pc, #80]	; (800a594 <ull_configmrxlut+0xbc>)
 800a542:	4620      	mov	r0, r4
 800a544:	f7ff ff10 	bl	800a368 <dwt_write32bitoffsetreg>
 800a548:	4b13      	ldr	r3, [pc, #76]	; (800a598 <ull_configmrxlut+0xc0>)
 800a54a:	2200      	movs	r2, #0
 800a54c:	4913      	ldr	r1, [pc, #76]	; (800a59c <ull_configmrxlut+0xc4>)
 800a54e:	4620      	mov	r0, r4
 800a550:	f7ff ff0a 	bl	800a368 <dwt_write32bitoffsetreg>
 800a554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a558:	4d11      	ldr	r5, [pc, #68]	; (800a5a0 <ull_configmrxlut+0xc8>)
 800a55a:	4e12      	ldr	r6, [pc, #72]	; (800a5a4 <ull_configmrxlut+0xcc>)
 800a55c:	4f12      	ldr	r7, [pc, #72]	; (800a5a8 <ull_configmrxlut+0xd0>)
 800a55e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800a5bc <ull_configmrxlut+0xe4>
 800a562:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800a5c0 <ull_configmrxlut+0xe8>
 800a566:	f8df a05c 	ldr.w	sl, [pc, #92]	; 800a5c4 <ull_configmrxlut+0xec>
 800a56a:	4b10      	ldr	r3, [pc, #64]	; (800a5ac <ull_configmrxlut+0xd4>)
 800a56c:	e7c3      	b.n	800a4f6 <ull_configmrxlut+0x1e>
 800a56e:	bf00      	nop
 800a570:	0002afb5 	.word	0x0002afb5
 800a574:	0002af7d 	.word	0x0002af7d
 800a578:	0002a8fe 	.word	0x0002a8fe
 800a57c:	00030038 	.word	0x00030038
 800a580:	0003003c 	.word	0x0003003c
 800a584:	00030040 	.word	0x00030040
 800a588:	00030044 	.word	0x00030044
 800a58c:	00030048 	.word	0x00030048
 800a590:	0003004c 	.word	0x0003004c
 800a594:	00030050 	.word	0x00030050
 800a598:	10000240 	.word	0x10000240
 800a59c:	0003001c 	.word	0x0003001c
 800a5a0:	0001cff5 	.word	0x0001cff5
 800a5a4:	0001cfb5 	.word	0x0001cfb5
 800a5a8:	0001cf36 	.word	0x0001cf36
 800a5ac:	0001c0fd 	.word	0x0001c0fd
 800a5b0:	0002af3e 	.word	0x0002af3e
 800a5b4:	0002a5fe 	.word	0x0002a5fe
 800a5b8:	0002ac36 	.word	0x0002ac36
 800a5bc:	0001c77e 	.word	0x0001c77e
 800a5c0:	0001c6be 	.word	0x0001c6be
 800a5c4:	0001c43e 	.word	0x0001c43e

0800a5c8 <ull_disable_rftx_blocks>:
 800a5c8:	b508      	push	{r3, lr}
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	4902      	ldr	r1, [pc, #8]	; (800a5d8 <ull_disable_rftx_blocks+0x10>)
 800a5d0:	f7ff feca 	bl	800a368 <dwt_write32bitoffsetreg>
 800a5d4:	bd08      	pop	{r3, pc}
 800a5d6:	bf00      	nop
 800a5d8:	00070004 	.word	0x00070004

0800a5dc <ull_disable_rf_tx>:
 800a5dc:	b538      	push	{r3, r4, r5, lr}
 800a5de:	4604      	mov	r4, r0
 800a5e0:	460d      	mov	r5, r1
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	461a      	mov	r2, r3
 800a5e6:	490a      	ldr	r1, [pc, #40]	; (800a610 <ull_disable_rf_tx+0x34>)
 800a5e8:	f7ff febe 	bl	800a368 <dwt_write32bitoffsetreg>
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800a5f4:	4620      	mov	r0, r4
 800a5f6:	f7ff feb7 	bl	800a368 <dwt_write32bitoffsetreg>
 800a5fa:	b905      	cbnz	r5, 800a5fe <ull_disable_rf_tx+0x22>
 800a5fc:	bd38      	pop	{r3, r4, r5, pc}
 800a5fe:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 800a602:	2200      	movs	r2, #0
 800a604:	4903      	ldr	r1, [pc, #12]	; (800a614 <ull_disable_rf_tx+0x38>)
 800a606:	4620      	mov	r0, r4
 800a608:	f7ff feae 	bl	800a368 <dwt_write32bitoffsetreg>
 800a60c:	e7f6      	b.n	800a5fc <ull_disable_rf_tx+0x20>
 800a60e:	bf00      	nop
 800a610:	00070048 	.word	0x00070048
 800a614:	00070014 	.word	0x00070014

0800a618 <ull_readrxdata>:
 800a618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a61a:	b083      	sub	sp, #12
 800a61c:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800a61e:	7ba4      	ldrb	r4, [r4, #14]
 800a620:	2c03      	cmp	r4, #3
 800a622:	bf0c      	ite	eq
 800a624:	f44f 1c98 	moveq.w	ip, #1245184	; 0x130000
 800a628:	f44f 1c90 	movne.w	ip, #1179648	; 0x120000
 800a62c:	189c      	adds	r4, r3, r2
 800a62e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800a632:	da19      	bge.n	800a668 <ull_readrxdata+0x50>
 800a634:	461d      	mov	r5, r3
 800a636:	4616      	mov	r6, r2
 800a638:	460f      	mov	r7, r1
 800a63a:	4604      	mov	r4, r0
 800a63c:	2b7f      	cmp	r3, #127	; 0x7f
 800a63e:	d915      	bls.n	800a66c <ull_readrxdata+0x54>
 800a640:	ea4f 431c 	mov.w	r3, ip, lsr #16
 800a644:	2200      	movs	r2, #0
 800a646:	490d      	ldr	r1, [pc, #52]	; (800a67c <ull_readrxdata+0x64>)
 800a648:	f7ff fe8e 	bl	800a368 <dwt_write32bitoffsetreg>
 800a64c:	462b      	mov	r3, r5
 800a64e:	2200      	movs	r2, #0
 800a650:	490b      	ldr	r1, [pc, #44]	; (800a680 <ull_readrxdata+0x68>)
 800a652:	4620      	mov	r0, r4
 800a654:	f7ff fe88 	bl	800a368 <dwt_write32bitoffsetreg>
 800a658:	9700      	str	r7, [sp, #0]
 800a65a:	4633      	mov	r3, r6
 800a65c:	2200      	movs	r2, #0
 800a65e:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800a662:	4620      	mov	r0, r4
 800a664:	f7ff fa01 	bl	8009a6a <dwt_readfromdevice>
 800a668:	b003      	add	sp, #12
 800a66a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a66c:	9100      	str	r1, [sp, #0]
 800a66e:	4613      	mov	r3, r2
 800a670:	462a      	mov	r2, r5
 800a672:	4661      	mov	r1, ip
 800a674:	f7ff f9f9 	bl	8009a6a <dwt_readfromdevice>
 800a678:	e7f6      	b.n	800a668 <ull_readrxdata+0x50>
 800a67a:	bf00      	nop
 800a67c:	001f0004 	.word	0x001f0004
 800a680:	001f0008 	.word	0x001f0008

0800a684 <dwt_write8bitoffsetreg>:
 800a684:	b510      	push	{r4, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	ac04      	add	r4, sp, #16
 800a68a:	f804 3d01 	strb.w	r3, [r4, #-1]!
 800a68e:	9400      	str	r4, [sp, #0]
 800a690:	2301      	movs	r3, #1
 800a692:	b292      	uxth	r2, r2
 800a694:	f7ff fe00 	bl	800a298 <dwt_writetodevice>
 800a698:	b004      	add	sp, #16
 800a69a:	bd10      	pop	{r4, pc}

0800a69c <ull_getframelength>:
 800a69c:	b510      	push	{r4, lr}
 800a69e:	4604      	mov	r4, r0
 800a6a0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a6a2:	7b9b      	ldrb	r3, [r3, #14]
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d013      	beq.n	800a6d0 <ull_getframelength+0x34>
 800a6a8:	2b03      	cmp	r3, #3
 800a6aa:	d11d      	bne.n	800a6e8 <ull_getframelength+0x4c>
 800a6ac:	23f0      	movs	r3, #240	; 0xf0
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	4912      	ldr	r1, [pc, #72]	; (800a6fc <ull_getframelength+0x60>)
 800a6b2:	f7ff ffe7 	bl	800a684 <dwt_write8bitoffsetreg>
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800a6bc:	4620      	mov	r0, r4
 800a6be:	f7ff f9f4 	bl	8009aaa <dwt_read16bitoffsetreg>
 800a6c2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a6c4:	7ada      	ldrb	r2, [r3, #11]
 800a6c6:	b1a2      	cbz	r2, 800a6f2 <ull_getframelength+0x56>
 800a6c8:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a6cc:	83d8      	strh	r0, [r3, #30]
 800a6ce:	bd10      	pop	{r4, pc}
 800a6d0:	230f      	movs	r3, #15
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	4909      	ldr	r1, [pc, #36]	; (800a6fc <ull_getframelength+0x60>)
 800a6d6:	f7ff ffd5 	bl	800a684 <dwt_write8bitoffsetreg>
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800a6e0:	4620      	mov	r0, r4
 800a6e2:	f7ff f9e2 	bl	8009aaa <dwt_read16bitoffsetreg>
 800a6e6:	e7ec      	b.n	800a6c2 <ull_getframelength+0x26>
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	214c      	movs	r1, #76	; 0x4c
 800a6ec:	f7ff f9dd 	bl	8009aaa <dwt_read16bitoffsetreg>
 800a6f0:	e7e7      	b.n	800a6c2 <ull_getframelength+0x26>
 800a6f2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800a6f6:	83d8      	strh	r0, [r3, #30]
 800a6f8:	e7e9      	b.n	800a6ce <ull_getframelength+0x32>
 800a6fa:	bf00      	nop
 800a6fc:	00010018 	.word	0x00010018

0800a700 <_dwt_clear_db_events>:
 800a700:	b510      	push	{r4, lr}
 800a702:	4604      	mov	r4, r0
 800a704:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a706:	7b9b      	ldrb	r3, [r3, #14]
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d004      	beq.n	800a716 <_dwt_clear_db_events+0x16>
 800a70c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a70e:	7b9b      	ldrb	r3, [r3, #14]
 800a710:	2b03      	cmp	r3, #3
 800a712:	d006      	beq.n	800a722 <_dwt_clear_db_events+0x22>
 800a714:	bd10      	pop	{r4, pc}
 800a716:	230f      	movs	r3, #15
 800a718:	2200      	movs	r2, #0
 800a71a:	4905      	ldr	r1, [pc, #20]	; (800a730 <_dwt_clear_db_events+0x30>)
 800a71c:	f7ff ffb2 	bl	800a684 <dwt_write8bitoffsetreg>
 800a720:	e7f4      	b.n	800a70c <_dwt_clear_db_events+0xc>
 800a722:	23f0      	movs	r3, #240	; 0xf0
 800a724:	2200      	movs	r2, #0
 800a726:	4902      	ldr	r1, [pc, #8]	; (800a730 <_dwt_clear_db_events+0x30>)
 800a728:	4620      	mov	r0, r4
 800a72a:	f7ff ffab 	bl	800a684 <dwt_write8bitoffsetreg>
 800a72e:	e7f1      	b.n	800a714 <_dwt_clear_db_events+0x14>
 800a730:	00010018 	.word	0x00010018

0800a734 <ull_clearaonconfig>:
 800a734:	b538      	push	{r3, r4, r5, lr}
 800a736:	4604      	mov	r4, r0
 800a738:	2300      	movs	r3, #0
 800a73a:	461a      	mov	r2, r3
 800a73c:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800a740:	f7ff fdb5 	bl	800a2ae <dwt_write16bitoffsetreg>
 800a744:	2300      	movs	r3, #0
 800a746:	461a      	mov	r2, r3
 800a748:	4908      	ldr	r1, [pc, #32]	; (800a76c <ull_clearaonconfig+0x38>)
 800a74a:	4620      	mov	r0, r4
 800a74c:	f7ff ff9a 	bl	800a684 <dwt_write8bitoffsetreg>
 800a750:	4d07      	ldr	r5, [pc, #28]	; (800a770 <ull_clearaonconfig+0x3c>)
 800a752:	2300      	movs	r3, #0
 800a754:	461a      	mov	r2, r3
 800a756:	4629      	mov	r1, r5
 800a758:	4620      	mov	r0, r4
 800a75a:	f7ff ff93 	bl	800a684 <dwt_write8bitoffsetreg>
 800a75e:	2302      	movs	r3, #2
 800a760:	2200      	movs	r2, #0
 800a762:	4629      	mov	r1, r5
 800a764:	4620      	mov	r0, r4
 800a766:	f7ff ff8d 	bl	800a684 <dwt_write8bitoffsetreg>
 800a76a:	bd38      	pop	{r3, r4, r5, pc}
 800a76c:	000a0014 	.word	0x000a0014
 800a770:	000a0004 	.word	0x000a0004

0800a774 <ull_configeventcounters>:
 800a774:	b538      	push	{r3, r4, r5, lr}
 800a776:	4605      	mov	r5, r0
 800a778:	460c      	mov	r4, r1
 800a77a:	2302      	movs	r3, #2
 800a77c:	2200      	movs	r2, #0
 800a77e:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800a782:	f7ff ff7f 	bl	800a684 <dwt_write8bitoffsetreg>
 800a786:	b904      	cbnz	r4, 800a78a <ull_configeventcounters+0x16>
 800a788:	bd38      	pop	{r3, r4, r5, pc}
 800a78a:	2301      	movs	r3, #1
 800a78c:	2200      	movs	r2, #0
 800a78e:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800a792:	4628      	mov	r0, r5
 800a794:	f7ff ff76 	bl	800a684 <dwt_write8bitoffsetreg>
 800a798:	e7f6      	b.n	800a788 <ull_configeventcounters+0x14>
	...

0800a79c <ull_aon_read>:
 800a79c:	b538      	push	{r3, r4, r5, lr}
 800a79e:	4604      	mov	r4, r0
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	490a      	ldr	r1, [pc, #40]	; (800a7d0 <ull_aon_read+0x34>)
 800a7a6:	f7ff fd82 	bl	800a2ae <dwt_write16bitoffsetreg>
 800a7aa:	4d0a      	ldr	r5, [pc, #40]	; (800a7d4 <ull_aon_read+0x38>)
 800a7ac:	2388      	movs	r3, #136	; 0x88
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	4629      	mov	r1, r5
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	f7ff ff66 	bl	800a684 <dwt_write8bitoffsetreg>
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	4629      	mov	r1, r5
 800a7be:	4620      	mov	r0, r4
 800a7c0:	f7ff ff60 	bl	800a684 <dwt_write8bitoffsetreg>
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	4904      	ldr	r1, [pc, #16]	; (800a7d8 <ull_aon_read+0x3c>)
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	f7ff f980 	bl	8009ace <dwt_read8bitoffsetreg>
 800a7ce:	bd38      	pop	{r3, r4, r5, pc}
 800a7d0:	000a000c 	.word	0x000a000c
 800a7d4:	000a0004 	.word	0x000a0004
 800a7d8:	000a0008 	.word	0x000a0008

0800a7dc <ull_aon_write>:
 800a7dc:	b570      	push	{r4, r5, r6, lr}
 800a7de:	4604      	mov	r4, r0
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	4615      	mov	r5, r2
 800a7e4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800a7e8:	bf34      	ite	cc
 800a7ea:	2600      	movcc	r6, #0
 800a7ec:	2620      	movcs	r6, #32
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	490b      	ldr	r1, [pc, #44]	; (800a820 <ull_aon_write+0x44>)
 800a7f2:	f7ff fd5c 	bl	800a2ae <dwt_write16bitoffsetreg>
 800a7f6:	462b      	mov	r3, r5
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	490a      	ldr	r1, [pc, #40]	; (800a824 <ull_aon_write+0x48>)
 800a7fc:	4620      	mov	r0, r4
 800a7fe:	f7ff ff41 	bl	800a684 <dwt_write8bitoffsetreg>
 800a802:	4d09      	ldr	r5, [pc, #36]	; (800a828 <ull_aon_write+0x4c>)
 800a804:	f046 0390 	orr.w	r3, r6, #144	; 0x90
 800a808:	2200      	movs	r2, #0
 800a80a:	4629      	mov	r1, r5
 800a80c:	4620      	mov	r0, r4
 800a80e:	f7ff ff39 	bl	800a684 <dwt_write8bitoffsetreg>
 800a812:	2300      	movs	r3, #0
 800a814:	461a      	mov	r2, r3
 800a816:	4629      	mov	r1, r5
 800a818:	4620      	mov	r0, r4
 800a81a:	f7ff ff33 	bl	800a684 <dwt_write8bitoffsetreg>
 800a81e:	bd70      	pop	{r4, r5, r6, pc}
 800a820:	000a000c 	.word	0x000a000c
 800a824:	000a0010 	.word	0x000a0010
 800a828:	000a0004 	.word	0x000a0004

0800a82c <ull_configuresleep>:
 800a82c:	b570      	push	{r4, r5, r6, lr}
 800a82e:	4604      	mov	r4, r0
 800a830:	460d      	mov	r5, r1
 800a832:	4616      	mov	r6, r2
 800a834:	2200      	movs	r2, #0
 800a836:	f240 110b 	movw	r1, #267	; 0x10b
 800a83a:	f7ff ffcf 	bl	800a7dc <ull_aon_write>
 800a83e:	f44f 7182 	mov.w	r1, #260	; 0x104
 800a842:	4620      	mov	r0, r4
 800a844:	f7ff ffaa 	bl	800a79c <ull_aon_read>
 800a848:	f000 021f 	and.w	r2, r0, #31
 800a84c:	f44f 7182 	mov.w	r1, #260	; 0x104
 800a850:	4620      	mov	r0, r4
 800a852:	f7ff ffc3 	bl	800a7dc <ull_aon_write>
 800a856:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a858:	8a1a      	ldrh	r2, [r3, #16]
 800a85a:	4315      	orrs	r5, r2
 800a85c:	821d      	strh	r5, [r3, #16]
 800a85e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a860:	8a1b      	ldrh	r3, [r3, #16]
 800a862:	2200      	movs	r2, #0
 800a864:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800a868:	4620      	mov	r0, r4
 800a86a:	f7ff fd20 	bl	800a2ae <dwt_write16bitoffsetreg>
 800a86e:	4633      	mov	r3, r6
 800a870:	2200      	movs	r2, #0
 800a872:	4902      	ldr	r1, [pc, #8]	; (800a87c <ull_configuresleep+0x50>)
 800a874:	4620      	mov	r0, r4
 800a876:	f7ff ff05 	bl	800a684 <dwt_write8bitoffsetreg>
 800a87a:	bd70      	pop	{r4, r5, r6, pc}
 800a87c:	000a0014 	.word	0x000a0014

0800a880 <ull_writetxdata>:
 800a880:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a882:	b083      	sub	sp, #12
 800a884:	185c      	adds	r4, r3, r1
 800a886:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800a88a:	da24      	bge.n	800a8d6 <ull_writetxdata+0x56>
 800a88c:	461c      	mov	r4, r3
 800a88e:	4617      	mov	r7, r2
 800a890:	460e      	mov	r6, r1
 800a892:	4605      	mov	r5, r0
 800a894:	2b7f      	cmp	r3, #127	; 0x7f
 800a896:	d915      	bls.n	800a8c4 <ull_writetxdata+0x44>
 800a898:	2314      	movs	r3, #20
 800a89a:	2200      	movs	r2, #0
 800a89c:	490f      	ldr	r1, [pc, #60]	; (800a8dc <ull_writetxdata+0x5c>)
 800a89e:	f7ff fd63 	bl	800a368 <dwt_write32bitoffsetreg>
 800a8a2:	4623      	mov	r3, r4
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	490e      	ldr	r1, [pc, #56]	; (800a8e0 <ull_writetxdata+0x60>)
 800a8a8:	4628      	mov	r0, r5
 800a8aa:	f7ff fd5d 	bl	800a368 <dwt_write32bitoffsetreg>
 800a8ae:	9700      	str	r7, [sp, #0]
 800a8b0:	4633      	mov	r3, r6
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800a8b8:	4628      	mov	r0, r5
 800a8ba:	f7ff fced 	bl	800a298 <dwt_writetodevice>
 800a8be:	2000      	movs	r0, #0
 800a8c0:	b003      	add	sp, #12
 800a8c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8c4:	9200      	str	r2, [sp, #0]
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	4622      	mov	r2, r4
 800a8ca:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 800a8ce:	f7ff fce3 	bl	800a298 <dwt_writetodevice>
 800a8d2:	2000      	movs	r0, #0
 800a8d4:	e7f4      	b.n	800a8c0 <ull_writetxdata+0x40>
 800a8d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8da:	e7f1      	b.n	800a8c0 <ull_writetxdata+0x40>
 800a8dc:	001f0004 	.word	0x001f0004
 800a8e0:	001f0008 	.word	0x001f0008

0800a8e4 <ull_signal_rx_buff_free>:
 800a8e4:	b510      	push	{r4, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	4604      	mov	r4, r0
 800a8ea:	2302      	movs	r3, #2
 800a8ec:	9301      	str	r3, [sp, #4]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	9200      	str	r2, [sp, #0]
 800a8f2:	4613      	mov	r3, r2
 800a8f4:	2113      	movs	r1, #19
 800a8f6:	f7ff f83a 	bl	800996e <dwt_xfer3xxx>
 800a8fa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a8fc:	7b9a      	ldrb	r2, [r3, #14]
 800a8fe:	2a03      	cmp	r2, #3
 800a900:	bf0c      	ite	eq
 800a902:	2201      	moveq	r2, #1
 800a904:	2203      	movne	r2, #3
 800a906:	739a      	strb	r2, [r3, #14]
 800a908:	b002      	add	sp, #8
 800a90a:	bd10      	pop	{r4, pc}

0800a90c <ull_isr>:
 800a90c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a910:	4604      	mov	r4, r0
 800a912:	2200      	movs	r2, #0
 800a914:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 800a918:	f7ff f8d9 	bl	8009ace <dwt_read8bitoffsetreg>
 800a91c:	4605      	mov	r5, r0
 800a91e:	2200      	movs	r2, #0
 800a920:	2144      	movs	r1, #68	; 0x44
 800a922:	4620      	mov	r0, r4
 800a924:	f7ff f8ab 	bl	8009a7e <dwt_read32bitoffsetreg>
 800a928:	4606      	mov	r6, r0
 800a92a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a92c:	2200      	movs	r2, #0
 800a92e:	83da      	strh	r2, [r3, #30]
 800a930:	f883 2020 	strb.w	r2, [r3, #32]
 800a934:	619a      	str	r2, [r3, #24]
 800a936:	839a      	strh	r2, [r3, #28]
 800a938:	625a      	str	r2, [r3, #36]	; 0x24
 800a93a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a93c:	625c      	str	r4, [r3, #36]	; 0x24
 800a93e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a940:	7b9f      	ldrb	r7, [r3, #14]
 800a942:	2f00      	cmp	r7, #0
 800a944:	d17f      	bne.n	800aa46 <ull_isr+0x13a>
 800a946:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a948:	619e      	str	r6, [r3, #24]
 800a94a:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
 800a94e:	f898 3015 	ldrb.w	r3, [r8, #21]
 800a952:	f003 0303 	and.w	r3, r3, #3
 800a956:	2b03      	cmp	r3, #3
 800a958:	f000 8090 	beq.w	800aa7c <ull_isr+0x170>
 800a95c:	f015 0f80 	tst.w	r5, #128	; 0x80
 800a960:	f040 8093 	bne.w	800aa8a <ull_isr+0x17e>
 800a964:	f015 0f01 	tst.w	r5, #1
 800a968:	f040 80c1 	bne.w	800aaee <ull_isr+0x1e2>
 800a96c:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a970:	d00b      	beq.n	800a98a <ull_isr+0x7e>
 800a972:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a974:	b113      	cbz	r3, 800a97c <ull_isr+0x70>
 800a976:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800a978:	3018      	adds	r0, #24
 800a97a:	4798      	blx	r3
 800a97c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800a980:	2202      	movs	r2, #2
 800a982:	2144      	movs	r1, #68	; 0x44
 800a984:	4620      	mov	r0, r4
 800a986:	f7ff fc92 	bl	800a2ae <dwt_write16bitoffsetreg>
 800a98a:	f015 0f08 	tst.w	r5, #8
 800a98e:	d107      	bne.n	800a9a0 <ull_isr+0x94>
 800a990:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a992:	7b9b      	ldrb	r3, [r3, #14]
 800a994:	2b00      	cmp	r3, #0
 800a996:	f000 80ea 	beq.w	800ab6e <ull_isr+0x262>
 800a99a:	2f00      	cmp	r7, #0
 800a99c:	f000 80e7 	beq.w	800ab6e <ull_isr+0x262>
 800a9a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	f883 2020 	strb.w	r2, [r3, #32]
 800a9a8:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 800a9ac:	f000 80ad 	beq.w	800ab0a <ull_isr+0x1fe>
 800a9b0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a9b2:	f892 3020 	ldrb.w	r3, [r2, #32]
 800a9b6:	f043 0308 	orr.w	r3, r3, #8
 800a9ba:	f882 3020 	strb.w	r3, [r2, #32]
 800a9be:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 800a9c2:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 800a9c6:	d008      	beq.n	800a9da <ull_isr+0xce>
 800a9c8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a9ca:	f892 3020 	ldrb.w	r3, [r2, #32]
 800a9ce:	f043 0310 	orr.w	r3, r3, #16
 800a9d2:	f882 3020 	strb.w	r3, [r2, #32]
 800a9d6:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 800a9da:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800a9de:	d006      	beq.n	800a9ee <ull_isr+0xe2>
 800a9e0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a9e2:	7d53      	ldrb	r3, [r2, #21]
 800a9e4:	f003 0303 	and.w	r3, r3, #3
 800a9e8:	2b03      	cmp	r3, #3
 800a9ea:	f000 809a 	beq.w	800ab22 <ull_isr+0x216>
 800a9ee:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800a9f2:	f040 80a2 	bne.w	800ab3a <ull_isr+0x22e>
 800a9f6:	f447 43de 	orr.w	r3, r7, #28416	; 0x6f00
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	2144      	movs	r1, #68	; 0x44
 800a9fe:	4620      	mov	r0, r4
 800aa00:	f7ff fcb2 	bl	800a368 <dwt_write32bitoffsetreg>
 800aa04:	4620      	mov	r0, r4
 800aa06:	f7ff fe7b 	bl	800a700 <_dwt_clear_db_events>
 800aa0a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800aa0c:	8bc3      	ldrh	r3, [r0, #30]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	f040 80a2 	bne.w	800ab58 <ull_isr+0x24c>
 800aa14:	7d43      	ldrb	r3, [r0, #21]
 800aa16:	f003 0303 	and.w	r3, r3, #3
 800aa1a:	2b03      	cmp	r3, #3
 800aa1c:	f000 809c 	beq.w	800ab58 <ull_isr+0x24c>
 800aa20:	6983      	ldr	r3, [r0, #24]
 800aa22:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800aa26:	6183      	str	r3, [r0, #24]
 800aa28:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800aa2a:	6993      	ldr	r3, [r2, #24]
 800aa2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aa30:	6193      	str	r3, [r2, #24]
 800aa32:	69e3      	ldr	r3, [r4, #28]
 800aa34:	b113      	cbz	r3, 800aa3c <ull_isr+0x130>
 800aa36:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800aa38:	3018      	adds	r0, #24
 800aa3a:	4798      	blx	r3
 800aa3c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800aa3e:	2200      	movs	r2, #0
 800aa40:	f883 2020 	strb.w	r2, [r3, #32]
 800aa44:	e08c      	b.n	800ab60 <ull_isr+0x254>
 800aa46:	496d      	ldr	r1, [pc, #436]	; (800abfc <ull_isr+0x2f0>)
 800aa48:	4620      	mov	r0, r4
 800aa4a:	f7ff f840 	bl	8009ace <dwt_read8bitoffsetreg>
 800aa4e:	4607      	mov	r7, r0
 800aa50:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800aa52:	7b9b      	ldrb	r3, [r3, #14]
 800aa54:	2b03      	cmp	r3, #3
 800aa56:	bf08      	it	eq
 800aa58:	f3c0 1707 	ubfxeq	r7, r0, #4, #8
 800aa5c:	f017 0f01 	tst.w	r7, #1
 800aa60:	bf18      	it	ne
 800aa62:	f446 4680 	orrne.w	r6, r6, #16384	; 0x4000
 800aa66:	f017 0f02 	tst.w	r7, #2
 800aa6a:	bf18      	it	ne
 800aa6c:	f446 5600 	orrne.w	r6, r6, #8192	; 0x2000
 800aa70:	f017 0f04 	tst.w	r7, #4
 800aa74:	bf18      	it	ne
 800aa76:	f446 6680 	orrne.w	r6, r6, #1024	; 0x400
 800aa7a:	e764      	b.n	800a946 <ull_isr+0x3a>
 800aa7c:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800aa80:	bf1c      	itt	ne
 800aa82:	f045 0508 	orrne.w	r5, r5, #8
 800aa86:	b2ed      	uxtbne	r5, r5
 800aa88:	e768      	b.n	800a95c <ull_isr+0x50>
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	2148      	movs	r1, #72	; 0x48
 800aa8e:	4620      	mov	r0, r4
 800aa90:	f7ff f80b 	bl	8009aaa <dwt_read16bitoffsetreg>
 800aa94:	f8a8 001c 	strh.w	r0, [r8, #28]
 800aa98:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800aa9a:	7d1a      	ldrb	r2, [r3, #20]
 800aa9c:	b11a      	cbz	r2, 800aaa6 <ull_isr+0x19a>
 800aa9e:	699a      	ldr	r2, [r3, #24]
 800aaa0:	f012 0f04 	tst.w	r2, #4
 800aaa4:	d103      	bne.n	800aaae <ull_isr+0x1a2>
 800aaa6:	8b9b      	ldrh	r3, [r3, #28]
 800aaa8:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800aaac:	b18b      	cbz	r3, 800aad2 <ull_isr+0x1c6>
 800aaae:	2304      	movs	r3, #4
 800aab0:	2200      	movs	r2, #0
 800aab2:	2144      	movs	r1, #68	; 0x44
 800aab4:	4620      	mov	r0, r4
 800aab6:	f7ff fde5 	bl	800a684 <dwt_write8bitoffsetreg>
 800aaba:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800aabe:	2200      	movs	r2, #0
 800aac0:	2148      	movs	r1, #72	; 0x48
 800aac2:	4620      	mov	r0, r4
 800aac4:	f7ff fbf3 	bl	800a2ae <dwt_write16bitoffsetreg>
 800aac8:	6a23      	ldr	r3, [r4, #32]
 800aaca:	b113      	cbz	r3, 800aad2 <ull_isr+0x1c6>
 800aacc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800aace:	3018      	adds	r0, #24
 800aad0:	4798      	blx	r3
 800aad2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800aad4:	8b9b      	ldrh	r3, [r3, #28]
 800aad6:	f413 7f80 	tst.w	r3, #256	; 0x100
 800aada:	f43f af43 	beq.w	800a964 <ull_isr+0x58>
 800aade:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aae2:	2200      	movs	r2, #0
 800aae4:	2148      	movs	r1, #72	; 0x48
 800aae6:	4620      	mov	r0, r4
 800aae8:	f7ff fbe1 	bl	800a2ae <dwt_write16bitoffsetreg>
 800aaec:	e73a      	b.n	800a964 <ull_isr+0x58>
 800aaee:	23f8      	movs	r3, #248	; 0xf8
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	2144      	movs	r1, #68	; 0x44
 800aaf4:	4620      	mov	r0, r4
 800aaf6:	f7ff fdc5 	bl	800a684 <dwt_write8bitoffsetreg>
 800aafa:	6923      	ldr	r3, [r4, #16]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	f43f af35 	beq.w	800a96c <ull_isr+0x60>
 800ab02:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800ab04:	3018      	adds	r0, #24
 800ab06:	4798      	blx	r3
 800ab08:	e730      	b.n	800a96c <ull_isr+0x60>
 800ab0a:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800ab0e:	bf1f      	itttt	ne
 800ab10:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 800ab12:	f892 3020 	ldrbne.w	r3, [r2, #32]
 800ab16:	f043 0304 	orrne.w	r3, r3, #4
 800ab1a:	f882 3020 	strbne.w	r3, [r2, #32]
 800ab1e:	2700      	movs	r7, #0
 800ab20:	e74f      	b.n	800a9c2 <ull_isr+0xb6>
 800ab22:	f892 3020 	ldrb.w	r3, [r2, #32]
 800ab26:	f043 0302 	orr.w	r3, r3, #2
 800ab2a:	f882 3020 	strb.w	r3, [r2, #32]
 800ab2e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ab30:	2200      	movs	r2, #0
 800ab32:	83da      	strh	r2, [r3, #30]
 800ab34:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 800ab38:	e75d      	b.n	800a9f6 <ull_isr+0xea>
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	f7ff fdae 	bl	800a69c <ull_getframelength>
 800ab40:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800ab44:	f43f af57 	beq.w	800a9f6 <ull_isr+0xea>
 800ab48:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ab4a:	f892 3020 	ldrb.w	r3, [r2, #32]
 800ab4e:	f043 0301 	orr.w	r3, r3, #1
 800ab52:	f882 3020 	strb.w	r3, [r2, #32]
 800ab56:	e74e      	b.n	800a9f6 <ull_isr+0xea>
 800ab58:	6963      	ldr	r3, [r4, #20]
 800ab5a:	b10b      	cbz	r3, 800ab60 <ull_isr+0x254>
 800ab5c:	3018      	adds	r0, #24
 800ab5e:	4798      	blx	r3
 800ab60:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ab62:	7b9b      	ldrb	r3, [r3, #14]
 800ab64:	bb03      	cbnz	r3, 800aba8 <ull_isr+0x29c>
 800ab66:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ab68:	2200      	movs	r2, #0
 800ab6a:	f883 2020 	strb.w	r2, [r3, #32]
 800ab6e:	f015 0f10 	tst.w	r5, #16
 800ab72:	d11d      	bne.n	800abb0 <ull_isr+0x2a4>
 800ab74:	f015 0f20 	tst.w	r5, #32
 800ab78:	d12d      	bne.n	800abd6 <ull_isr+0x2ca>
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	4920      	ldr	r1, [pc, #128]	; (800ac00 <ull_isr+0x2f4>)
 800ab7e:	4620      	mov	r0, r4
 800ab80:	f7fe ffa5 	bl	8009ace <dwt_read8bitoffsetreg>
 800ab84:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ab86:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
 800ab8a:	f010 0303 	ands.w	r3, r0, #3
 800ab8e:	d009      	beq.n	800aba4 <ull_isr+0x298>
 800ab90:	2200      	movs	r2, #0
 800ab92:	491b      	ldr	r1, [pc, #108]	; (800ac00 <ull_isr+0x2f4>)
 800ab94:	4620      	mov	r0, r4
 800ab96:	f7ff fd75 	bl	800a684 <dwt_write8bitoffsetreg>
 800ab9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ab9c:	b113      	cbz	r3, 800aba4 <ull_isr+0x298>
 800ab9e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800aba0:	3018      	adds	r0, #24
 800aba2:	4798      	blx	r3
 800aba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aba8:	4620      	mov	r0, r4
 800abaa:	f7ff fe9b 	bl	800a8e4 <ull_signal_rx_buff_free>
 800abae:	e7da      	b.n	800ab66 <ull_isr+0x25a>
 800abb0:	4b14      	ldr	r3, [pc, #80]	; (800ac04 <ull_isr+0x2f8>)
 800abb2:	2200      	movs	r2, #0
 800abb4:	2144      	movs	r1, #68	; 0x44
 800abb6:	4620      	mov	r0, r4
 800abb8:	f7ff fbd6 	bl	800a368 <dwt_write32bitoffsetreg>
 800abbc:	4620      	mov	r0, r4
 800abbe:	f7ff fd9f 	bl	800a700 <_dwt_clear_db_events>
 800abc2:	69e3      	ldr	r3, [r4, #28]
 800abc4:	b113      	cbz	r3, 800abcc <ull_isr+0x2c0>
 800abc6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800abc8:	3018      	adds	r0, #24
 800abca:	4798      	blx	r3
 800abcc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800abce:	2200      	movs	r2, #0
 800abd0:	f883 2020 	strb.w	r2, [r3, #32]
 800abd4:	e7ce      	b.n	800ab74 <ull_isr+0x268>
 800abd6:	4b0c      	ldr	r3, [pc, #48]	; (800ac08 <ull_isr+0x2fc>)
 800abd8:	2200      	movs	r2, #0
 800abda:	2144      	movs	r1, #68	; 0x44
 800abdc:	4620      	mov	r0, r4
 800abde:	f7ff fbc3 	bl	800a368 <dwt_write32bitoffsetreg>
 800abe2:	4620      	mov	r0, r4
 800abe4:	f7ff fd8c 	bl	800a700 <_dwt_clear_db_events>
 800abe8:	69a3      	ldr	r3, [r4, #24]
 800abea:	b113      	cbz	r3, 800abf2 <ull_isr+0x2e6>
 800abec:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800abee:	3018      	adds	r0, #24
 800abf0:	4798      	blx	r3
 800abf2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800abf4:	2200      	movs	r2, #0
 800abf6:	f883 2020 	strb.w	r2, [r3, #32]
 800abfa:	e7be      	b.n	800ab7a <ull_isr+0x26e>
 800abfc:	00010018 	.word	0x00010018
 800ac00:	00110038 	.word	0x00110038
 800ac04:	34059400 	.word	0x34059400
 800ac08:	10220400 	.word	0x10220400

0800ac0c <dwt_modify32bitoffsetreg>:
 800ac0c:	b530      	push	{r4, r5, lr}
 800ac0e:	b085      	sub	sp, #20
 800ac10:	9c08      	ldr	r4, [sp, #32]
 800ac12:	f88d 3008 	strb.w	r3, [sp, #8]
 800ac16:	0a1d      	lsrs	r5, r3, #8
 800ac18:	f88d 5009 	strb.w	r5, [sp, #9]
 800ac1c:	0c1d      	lsrs	r5, r3, #16
 800ac1e:	f88d 500a 	strb.w	r5, [sp, #10]
 800ac22:	0e1b      	lsrs	r3, r3, #24
 800ac24:	f88d 300b 	strb.w	r3, [sp, #11]
 800ac28:	f88d 400c 	strb.w	r4, [sp, #12]
 800ac2c:	0a23      	lsrs	r3, r4, #8
 800ac2e:	f88d 300d 	strb.w	r3, [sp, #13]
 800ac32:	0c23      	lsrs	r3, r4, #16
 800ac34:	f88d 300e 	strb.w	r3, [sp, #14]
 800ac38:	0e24      	lsrs	r4, r4, #24
 800ac3a:	f88d 400f 	strb.w	r4, [sp, #15]
 800ac3e:	f248 0303 	movw	r3, #32771	; 0x8003
 800ac42:	9301      	str	r3, [sp, #4]
 800ac44:	ab02      	add	r3, sp, #8
 800ac46:	9300      	str	r3, [sp, #0]
 800ac48:	2308      	movs	r3, #8
 800ac4a:	b292      	uxth	r2, r2
 800ac4c:	f7fe fe8f 	bl	800996e <dwt_xfer3xxx>
 800ac50:	b005      	add	sp, #20
 800ac52:	bd30      	pop	{r4, r5, pc}

0800ac54 <ull_enable_rf_tx>:
 800ac54:	b570      	push	{r4, r5, r6, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	4604      	mov	r4, r0
 800ac5a:	460e      	mov	r6, r1
 800ac5c:	4d13      	ldr	r5, [pc, #76]	; (800acac <ull_enable_rf_tx+0x58>)
 800ac5e:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 800ac62:	9300      	str	r3, [sp, #0]
 800ac64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac68:	2200      	movs	r2, #0
 800ac6a:	4629      	mov	r1, r5
 800ac6c:	f7ff ffce 	bl	800ac0c <dwt_modify32bitoffsetreg>
 800ac70:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 800ac74:	9300      	str	r3, [sp, #0]
 800ac76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	4629      	mov	r1, r5
 800ac7e:	4620      	mov	r0, r4
 800ac80:	f7ff ffc4 	bl	800ac0c <dwt_modify32bitoffsetreg>
 800ac84:	4b0a      	ldr	r3, [pc, #40]	; (800acb0 <ull_enable_rf_tx+0x5c>)
 800ac86:	9300      	str	r3, [sp, #0]
 800ac88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800ac92:	4620      	mov	r0, r4
 800ac94:	f7ff ffba 	bl	800ac0c <dwt_modify32bitoffsetreg>
 800ac98:	b90e      	cbnz	r6, 800ac9e <ull_enable_rf_tx+0x4a>
 800ac9a:	b002      	add	sp, #8
 800ac9c:	bd70      	pop	{r4, r5, r6, pc}
 800ac9e:	4b05      	ldr	r3, [pc, #20]	; (800acb4 <ull_enable_rf_tx+0x60>)
 800aca0:	2200      	movs	r2, #0
 800aca2:	4905      	ldr	r1, [pc, #20]	; (800acb8 <ull_enable_rf_tx+0x64>)
 800aca4:	4620      	mov	r0, r4
 800aca6:	f7ff fb5f 	bl	800a368 <dwt_write32bitoffsetreg>
 800acaa:	e7f6      	b.n	800ac9a <ull_enable_rf_tx+0x46>
 800acac:	00070048 	.word	0x00070048
 800acb0:	02003c00 	.word	0x02003c00
 800acb4:	01011100 	.word	0x01011100
 800acb8:	00070014 	.word	0x00070014

0800acbc <ull_enable_rftx_blocks>:
 800acbc:	b500      	push	{lr}
 800acbe:	b083      	sub	sp, #12
 800acc0:	4b05      	ldr	r3, [pc, #20]	; (800acd8 <ull_enable_rftx_blocks+0x1c>)
 800acc2:	9300      	str	r3, [sp, #0]
 800acc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800acc8:	2200      	movs	r2, #0
 800acca:	4904      	ldr	r1, [pc, #16]	; (800acdc <ull_enable_rftx_blocks+0x20>)
 800accc:	f7ff ff9e 	bl	800ac0c <dwt_modify32bitoffsetreg>
 800acd0:	b003      	add	sp, #12
 800acd2:	f85d fb04 	ldr.w	pc, [sp], #4
 800acd6:	bf00      	nop
 800acd8:	02003c00 	.word	0x02003c00
 800acdc:	00070004 	.word	0x00070004

0800ace0 <_dwt_otpprogword32>:
 800ace0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ace4:	b083      	sub	sp, #12
 800ace6:	4604      	mov	r4, r0
 800ace8:	460d      	mov	r5, r1
 800acea:	4617      	mov	r7, r2
 800acec:	4e56      	ldr	r6, [pc, #344]	; (800ae48 <_dwt_otpprogword32+0x168>)
 800acee:	2200      	movs	r2, #0
 800acf0:	4631      	mov	r1, r6
 800acf2:	f7fe fec4 	bl	8009a7e <dwt_read32bitoffsetreg>
 800acf6:	4681      	mov	r9, r0
 800acf8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800acfc:	9300      	str	r3, [sp, #0]
 800acfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad02:	2200      	movs	r2, #0
 800ad04:	4631      	mov	r1, r6
 800ad06:	4620      	mov	r0, r4
 800ad08:	f7ff ff80 	bl	800ac0c <dwt_modify32bitoffsetreg>
 800ad0c:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800ae4c <_dwt_otpprogword32+0x16c>
 800ad10:	2318      	movs	r3, #24
 800ad12:	2200      	movs	r2, #0
 800ad14:	4641      	mov	r1, r8
 800ad16:	4620      	mov	r0, r4
 800ad18:	f7ff fac9 	bl	800a2ae <dwt_write16bitoffsetreg>
 800ad1c:	2125      	movs	r1, #37	; 0x25
 800ad1e:	4620      	mov	r0, r4
 800ad20:	f7ff faec 	bl	800a2fc <__dwt_otp_write_wdata_id_reg>
 800ad24:	2102      	movs	r1, #2
 800ad26:	4620      	mov	r0, r4
 800ad28:	f7ff fae8 	bl	800a2fc <__dwt_otp_write_wdata_id_reg>
 800ad2c:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 800ad30:	4620      	mov	r0, r4
 800ad32:	f7ff fae3 	bl	800a2fc <__dwt_otp_write_wdata_id_reg>
 800ad36:	b2f9      	uxtb	r1, r7
 800ad38:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800ad3c:	4620      	mov	r0, r4
 800ad3e:	f7ff fadd 	bl	800a2fc <__dwt_otp_write_wdata_id_reg>
 800ad42:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ad46:	4620      	mov	r0, r4
 800ad48:	f7ff fad8 	bl	800a2fc <__dwt_otp_write_wdata_id_reg>
 800ad4c:	2100      	movs	r1, #0
 800ad4e:	4620      	mov	r0, r4
 800ad50:	f7ff fad4 	bl	800a2fc <__dwt_otp_write_wdata_id_reg>
 800ad54:	2102      	movs	r1, #2
 800ad56:	4620      	mov	r0, r4
 800ad58:	f7ff fad0 	bl	800a2fc <__dwt_otp_write_wdata_id_reg>
 800ad5c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800ad60:	4620      	mov	r0, r4
 800ad62:	f7ff facb 	bl	800a2fc <__dwt_otp_write_wdata_id_reg>
 800ad66:	b2e9      	uxtb	r1, r5
 800ad68:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	f7ff fac5 	bl	800a2fc <__dwt_otp_write_wdata_id_reg>
 800ad72:	f3c5 2107 	ubfx	r1, r5, #8, #8
 800ad76:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800ad7a:	4620      	mov	r0, r4
 800ad7c:	f7ff fabe 	bl	800a2fc <__dwt_otp_write_wdata_id_reg>
 800ad80:	f3c5 4107 	ubfx	r1, r5, #16, #8
 800ad84:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800ad88:	4620      	mov	r0, r4
 800ad8a:	f7ff fab7 	bl	800a2fc <__dwt_otp_write_wdata_id_reg>
 800ad8e:	0e29      	lsrs	r1, r5, #24
 800ad90:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800ad94:	4620      	mov	r0, r4
 800ad96:	f7ff fab1 	bl	800a2fc <__dwt_otp_write_wdata_id_reg>
 800ad9a:	2100      	movs	r1, #0
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	f7ff faad 	bl	800a2fc <__dwt_otp_write_wdata_id_reg>
 800ada2:	213a      	movs	r1, #58	; 0x3a
 800ada4:	4620      	mov	r0, r4
 800ada6:	f7ff faa9 	bl	800a2fc <__dwt_otp_write_wdata_id_reg>
 800adaa:	f240 11ff 	movw	r1, #511	; 0x1ff
 800adae:	4620      	mov	r0, r4
 800adb0:	f7ff faa4 	bl	800a2fc <__dwt_otp_write_wdata_id_reg>
 800adb4:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800adb8:	4620      	mov	r0, r4
 800adba:	f7ff fa9f 	bl	800a2fc <__dwt_otp_write_wdata_id_reg>
 800adbe:	2100      	movs	r1, #0
 800adc0:	4620      	mov	r0, r4
 800adc2:	f7ff fa9b 	bl	800a2fc <__dwt_otp_write_wdata_id_reg>
 800adc6:	213a      	movs	r1, #58	; 0x3a
 800adc8:	4620      	mov	r0, r4
 800adca:	f7ff fa97 	bl	800a2fc <__dwt_otp_write_wdata_id_reg>
 800adce:	f240 1101 	movw	r1, #257	; 0x101
 800add2:	4620      	mov	r0, r4
 800add4:	f7ff fa92 	bl	800a2fc <__dwt_otp_write_wdata_id_reg>
 800add8:	2302      	movs	r3, #2
 800adda:	2200      	movs	r2, #0
 800addc:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800ade0:	4620      	mov	r0, r4
 800ade2:	f7ff fa64 	bl	800a2ae <dwt_write16bitoffsetreg>
 800ade6:	2300      	movs	r3, #0
 800ade8:	461a      	mov	r2, r3
 800adea:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800adee:	4620      	mov	r0, r4
 800adf0:	f7ff fa5d 	bl	800a2ae <dwt_write16bitoffsetreg>
 800adf4:	2002      	movs	r0, #2
 800adf6:	f7f6 fba1 	bl	800153c <deca_sleep>
 800adfa:	213a      	movs	r1, #58	; 0x3a
 800adfc:	4620      	mov	r0, r4
 800adfe:	f7ff fa7d 	bl	800a2fc <__dwt_otp_write_wdata_id_reg>
 800ae02:	f44f 7181 	mov.w	r1, #258	; 0x102
 800ae06:	4620      	mov	r0, r4
 800ae08:	f7ff fa78 	bl	800a2fc <__dwt_otp_write_wdata_id_reg>
 800ae0c:	2302      	movs	r3, #2
 800ae0e:	2200      	movs	r2, #0
 800ae10:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800ae14:	4620      	mov	r0, r4
 800ae16:	f7ff fa4a 	bl	800a2ae <dwt_write16bitoffsetreg>
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800ae22:	4620      	mov	r0, r4
 800ae24:	f7ff fa43 	bl	800a2ae <dwt_write16bitoffsetreg>
 800ae28:	2300      	movs	r3, #0
 800ae2a:	461a      	mov	r2, r3
 800ae2c:	4641      	mov	r1, r8
 800ae2e:	4620      	mov	r0, r4
 800ae30:	f7ff fa3d 	bl	800a2ae <dwt_write16bitoffsetreg>
 800ae34:	464b      	mov	r3, r9
 800ae36:	2200      	movs	r2, #0
 800ae38:	4631      	mov	r1, r6
 800ae3a:	4620      	mov	r0, r4
 800ae3c:	f7ff fa94 	bl	800a368 <dwt_write32bitoffsetreg>
 800ae40:	b003      	add	sp, #12
 800ae42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae46:	bf00      	nop
 800ae48:	00070044 	.word	0x00070044
 800ae4c:	000b0008 	.word	0x000b0008

0800ae50 <ull_setgpiomode>:
 800ae50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae52:	b083      	sub	sp, #12
 800ae54:	2400      	movs	r4, #0
 800ae56:	4623      	mov	r3, r4
 800ae58:	2601      	movs	r6, #1
 800ae5a:	2707      	movs	r7, #7
 800ae5c:	e002      	b.n	800ae64 <ull_setgpiomode+0x14>
 800ae5e:	3401      	adds	r4, #1
 800ae60:	2c09      	cmp	r4, #9
 800ae62:	d009      	beq.n	800ae78 <ull_setgpiomode+0x28>
 800ae64:	fa06 f504 	lsl.w	r5, r6, r4
 800ae68:	420d      	tst	r5, r1
 800ae6a:	d0f8      	beq.n	800ae5e <ull_setgpiomode+0xe>
 800ae6c:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800ae70:	fa07 f505 	lsl.w	r5, r7, r5
 800ae74:	432b      	orrs	r3, r5
 800ae76:	e7f2      	b.n	800ae5e <ull_setgpiomode+0xe>
 800ae78:	401a      	ands	r2, r3
 800ae7a:	9200      	str	r2, [sp, #0]
 800ae7c:	43db      	mvns	r3, r3
 800ae7e:	2200      	movs	r2, #0
 800ae80:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800ae84:	f7ff fec2 	bl	800ac0c <dwt_modify32bitoffsetreg>
 800ae88:	b003      	add	sp, #12
 800ae8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ae8c <ull_writetxfctrl>:
 800ae8c:	b510      	push	{r4, lr}
 800ae8e:	b082      	sub	sp, #8
 800ae90:	4604      	mov	r4, r0
 800ae92:	2a7f      	cmp	r2, #127	; 0x7f
 800ae94:	d912      	bls.n	800aebc <ull_writetxfctrl+0x30>
 800ae96:	3280      	adds	r2, #128	; 0x80
 800ae98:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 800ae9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aea0:	9100      	str	r1, [sp, #0]
 800aea2:	4b0c      	ldr	r3, [pc, #48]	; (800aed4 <ull_writetxfctrl+0x48>)
 800aea4:	2200      	movs	r2, #0
 800aea6:	2120      	movs	r1, #32
 800aea8:	f7ff feb0 	bl	800ac0c <dwt_modify32bitoffsetreg>
 800aeac:	2200      	movs	r2, #0
 800aeae:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	f7fe fe0b 	bl	8009ace <dwt_read8bitoffsetreg>
 800aeb8:	b002      	add	sp, #8
 800aeba:	bd10      	pop	{r4, pc}
 800aebc:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 800aec0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aec4:	9100      	str	r1, [sp, #0]
 800aec6:	4b03      	ldr	r3, [pc, #12]	; (800aed4 <ull_writetxfctrl+0x48>)
 800aec8:	2200      	movs	r2, #0
 800aeca:	2120      	movs	r1, #32
 800aecc:	f7ff fe9e 	bl	800ac0c <dwt_modify32bitoffsetreg>
 800aed0:	e7f2      	b.n	800aeb8 <ull_writetxfctrl+0x2c>
 800aed2:	bf00      	nop
 800aed4:	fc00f400 	.word	0xfc00f400

0800aed8 <prs_sys_status_and_or>:
 800aed8:	b500      	push	{lr}
 800aeda:	b083      	sub	sp, #12
 800aedc:	9200      	str	r2, [sp, #0]
 800aede:	460b      	mov	r3, r1
 800aee0:	2200      	movs	r2, #0
 800aee2:	2144      	movs	r1, #68	; 0x44
 800aee4:	f7ff fe92 	bl	800ac0c <dwt_modify32bitoffsetreg>
 800aee8:	2000      	movs	r0, #0
 800aeea:	b003      	add	sp, #12
 800aeec:	f85d fb04 	ldr.w	pc, [sp], #4

0800aef0 <dwt_modify8bitoffsetreg>:
 800aef0:	b500      	push	{lr}
 800aef2:	b085      	sub	sp, #20
 800aef4:	f88d 300c 	strb.w	r3, [sp, #12]
 800aef8:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800aefc:	f88d 300d 	strb.w	r3, [sp, #13]
 800af00:	f248 0301 	movw	r3, #32769	; 0x8001
 800af04:	9301      	str	r3, [sp, #4]
 800af06:	ab03      	add	r3, sp, #12
 800af08:	9300      	str	r3, [sp, #0]
 800af0a:	2302      	movs	r3, #2
 800af0c:	b292      	uxth	r2, r2
 800af0e:	f7fe fd2e 	bl	800996e <dwt_xfer3xxx>
 800af12:	b005      	add	sp, #20
 800af14:	f85d fb04 	ldr.w	pc, [sp], #4

0800af18 <ull_configciadiag>:
 800af18:	b530      	push	{r4, r5, lr}
 800af1a:	b083      	sub	sp, #12
 800af1c:	4604      	mov	r4, r0
 800af1e:	460d      	mov	r5, r1
 800af20:	f011 0f01 	tst.w	r1, #1
 800af24:	d015      	beq.n	800af52 <ull_configciadiag+0x3a>
 800af26:	2300      	movs	r3, #0
 800af28:	9300      	str	r3, [sp, #0]
 800af2a:	23ef      	movs	r3, #239	; 0xef
 800af2c:	2202      	movs	r2, #2
 800af2e:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800af32:	f7ff ffdd 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800af36:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800af38:	759d      	strb	r5, [r3, #22]
 800af3a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800af3c:	7d9b      	ldrb	r3, [r3, #22]
 800af3e:	085b      	lsrs	r3, r3, #1
 800af40:	d010      	beq.n	800af64 <ull_configciadiag+0x4c>
 800af42:	086b      	lsrs	r3, r5, #1
 800af44:	2200      	movs	r2, #0
 800af46:	490e      	ldr	r1, [pc, #56]	; (800af80 <ull_configciadiag+0x68>)
 800af48:	4620      	mov	r0, r4
 800af4a:	f7ff fb9b 	bl	800a684 <dwt_write8bitoffsetreg>
 800af4e:	b003      	add	sp, #12
 800af50:	bd30      	pop	{r4, r5, pc}
 800af52:	2310      	movs	r3, #16
 800af54:	9300      	str	r3, [sp, #0]
 800af56:	23ff      	movs	r3, #255	; 0xff
 800af58:	2202      	movs	r2, #2
 800af5a:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800af5e:	f7ff ffc7 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800af62:	e7e8      	b.n	800af36 <ull_configciadiag+0x1e>
 800af64:	2301      	movs	r3, #1
 800af66:	9300      	str	r3, [sp, #0]
 800af68:	23ff      	movs	r3, #255	; 0xff
 800af6a:	2200      	movs	r2, #0
 800af6c:	4904      	ldr	r1, [pc, #16]	; (800af80 <ull_configciadiag+0x68>)
 800af6e:	4620      	mov	r0, r4
 800af70:	f7ff ffbe 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800af74:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800af76:	7d93      	ldrb	r3, [r2, #22]
 800af78:	f043 0302 	orr.w	r3, r3, #2
 800af7c:	7593      	strb	r3, [r2, #22]
 800af7e:	e7e6      	b.n	800af4e <ull_configciadiag+0x36>
 800af80:	00010020 	.word	0x00010020

0800af84 <ull_calcbandwidthadj>:
 800af84:	b570      	push	{r4, r5, r6, lr}
 800af86:	b082      	sub	sp, #8
 800af88:	4604      	mov	r4, r0
 800af8a:	460d      	mov	r5, r1
 800af8c:	2101      	movs	r1, #1
 800af8e:	f7ff f99f 	bl	800a2d0 <ull_force_clocks>
 800af92:	2100      	movs	r1, #0
 800af94:	4620      	mov	r0, r4
 800af96:	f7ff fe5d 	bl	800ac54 <ull_enable_rf_tx>
 800af9a:	4620      	mov	r0, r4
 800af9c:	f7ff fe8e 	bl	800acbc <ull_enable_rftx_blocks>
 800afa0:	f3c5 030b 	ubfx	r3, r5, #0, #12
 800afa4:	2200      	movs	r2, #0
 800afa6:	4915      	ldr	r1, [pc, #84]	; (800affc <ull_calcbandwidthadj+0x78>)
 800afa8:	4620      	mov	r0, r4
 800afaa:	f7ff f980 	bl	800a2ae <dwt_write16bitoffsetreg>
 800afae:	2303      	movs	r3, #3
 800afb0:	9300      	str	r3, [sp, #0]
 800afb2:	23ff      	movs	r3, #255	; 0xff
 800afb4:	2200      	movs	r2, #0
 800afb6:	4912      	ldr	r1, [pc, #72]	; (800b000 <ull_calcbandwidthadj+0x7c>)
 800afb8:	4620      	mov	r0, r4
 800afba:	f7ff ff99 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800afbe:	4e10      	ldr	r6, [pc, #64]	; (800b000 <ull_calcbandwidthadj+0x7c>)
 800afc0:	2500      	movs	r5, #0
 800afc2:	462a      	mov	r2, r5
 800afc4:	4631      	mov	r1, r6
 800afc6:	4620      	mov	r0, r4
 800afc8:	f7fe fd81 	bl	8009ace <dwt_read8bitoffsetreg>
 800afcc:	f010 0f01 	tst.w	r0, #1
 800afd0:	d1f7      	bne.n	800afc2 <ull_calcbandwidthadj+0x3e>
 800afd2:	4620      	mov	r0, r4
 800afd4:	f7ff faf8 	bl	800a5c8 <ull_disable_rftx_blocks>
 800afd8:	2100      	movs	r1, #0
 800afda:	4620      	mov	r0, r4
 800afdc:	f7ff fafe 	bl	800a5dc <ull_disable_rf_tx>
 800afe0:	2105      	movs	r1, #5
 800afe2:	4620      	mov	r0, r4
 800afe4:	f7ff f974 	bl	800a2d0 <ull_force_clocks>
 800afe8:	2200      	movs	r2, #0
 800afea:	4906      	ldr	r1, [pc, #24]	; (800b004 <ull_calcbandwidthadj+0x80>)
 800afec:	4620      	mov	r0, r4
 800afee:	f7fe fd6e 	bl	8009ace <dwt_read8bitoffsetreg>
 800aff2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800aff6:	b002      	add	sp, #8
 800aff8:	bd70      	pop	{r4, r5, r6, pc}
 800affa:	bf00      	nop
 800affc:	0008001c 	.word	0x0008001c
 800b000:	00080010 	.word	0x00080010
 800b004:	0007001c 	.word	0x0007001c

0800b008 <ull_configuretxrf>:
 800b008:	b538      	push	{r3, r4, r5, lr}
 800b00a:	4605      	mov	r5, r0
 800b00c:	460c      	mov	r4, r1
 800b00e:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 800b012:	b149      	cbz	r1, 800b028 <ull_configuretxrf+0x20>
 800b014:	f7ff ffb6 	bl	800af84 <ull_calcbandwidthadj>
 800b018:	f8d4 3001 	ldr.w	r3, [r4, #1]
 800b01c:	2200      	movs	r2, #0
 800b01e:	4905      	ldr	r1, [pc, #20]	; (800b034 <ull_configuretxrf+0x2c>)
 800b020:	4628      	mov	r0, r5
 800b022:	f7ff f9a1 	bl	800a368 <dwt_write32bitoffsetreg>
 800b026:	bd38      	pop	{r3, r4, r5, pc}
 800b028:	7823      	ldrb	r3, [r4, #0]
 800b02a:	2200      	movs	r2, #0
 800b02c:	4902      	ldr	r1, [pc, #8]	; (800b038 <ull_configuretxrf+0x30>)
 800b02e:	f7ff fb29 	bl	800a684 <dwt_write8bitoffsetreg>
 800b032:	e7f1      	b.n	800b018 <ull_configuretxrf+0x10>
 800b034:	00010004 	.word	0x00010004
 800b038:	0007001c 	.word	0x0007001c

0800b03c <ull_repeated_frames>:
 800b03c:	b530      	push	{r4, r5, lr}
 800b03e:	b083      	sub	sp, #12
 800b040:	4604      	mov	r4, r0
 800b042:	460d      	mov	r5, r1
 800b044:	2310      	movs	r3, #16
 800b046:	9300      	str	r3, [sp, #0]
 800b048:	23ff      	movs	r3, #255	; 0xff
 800b04a:	2200      	movs	r2, #0
 800b04c:	4906      	ldr	r1, [pc, #24]	; (800b068 <ull_repeated_frames+0x2c>)
 800b04e:	f7ff ff4f 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800b052:	462b      	mov	r3, r5
 800b054:	2d02      	cmp	r5, #2
 800b056:	bf38      	it	cc
 800b058:	2302      	movcc	r3, #2
 800b05a:	2200      	movs	r2, #0
 800b05c:	2128      	movs	r1, #40	; 0x28
 800b05e:	4620      	mov	r0, r4
 800b060:	f7ff f982 	bl	800a368 <dwt_write32bitoffsetreg>
 800b064:	b003      	add	sp, #12
 800b066:	bd30      	pop	{r4, r5, pc}
 800b068:	000f0028 	.word	0x000f0028

0800b06c <ull_setdwstate>:
 800b06c:	b530      	push	{r4, r5, lr}
 800b06e:	b083      	sub	sp, #12
 800b070:	4604      	mov	r4, r0
 800b072:	2901      	cmp	r1, #1
 800b074:	d01d      	beq.n	800b0b2 <ull_setdwstate+0x46>
 800b076:	2902      	cmp	r1, #2
 800b078:	d02f      	beq.n	800b0da <ull_setdwstate+0x6e>
 800b07a:	2301      	movs	r3, #1
 800b07c:	9300      	str	r3, [sp, #0]
 800b07e:	23ff      	movs	r3, #255	; 0xff
 800b080:	2200      	movs	r2, #0
 800b082:	4925      	ldr	r1, [pc, #148]	; (800b118 <ull_setdwstate+0xac>)
 800b084:	f7ff ff34 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800b088:	4d24      	ldr	r5, [pc, #144]	; (800b11c <ull_setdwstate+0xb0>)
 800b08a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b08e:	9300      	str	r3, [sp, #0]
 800b090:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800b094:	2200      	movs	r2, #0
 800b096:	4629      	mov	r1, r5
 800b098:	4620      	mov	r0, r4
 800b09a:	f7ff fdb7 	bl	800ac0c <dwt_modify32bitoffsetreg>
 800b09e:	2300      	movs	r3, #0
 800b0a0:	9300      	str	r3, [sp, #0]
 800b0a2:	237f      	movs	r3, #127	; 0x7f
 800b0a4:	2202      	movs	r2, #2
 800b0a6:	4629      	mov	r1, r5
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	f7ff ff21 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800b0ae:	b003      	add	sp, #12
 800b0b0:	bd30      	pop	{r4, r5, pc}
 800b0b2:	2105      	movs	r1, #5
 800b0b4:	f7ff f90c 	bl	800a2d0 <ull_force_clocks>
 800b0b8:	2302      	movs	r3, #2
 800b0ba:	9300      	str	r3, [sp, #0]
 800b0bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	4917      	ldr	r1, [pc, #92]	; (800b120 <ull_setdwstate+0xb4>)
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	f7ff fda1 	bl	800ac0c <dwt_modify32bitoffsetreg>
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	9200      	str	r2, [sp, #0]
 800b0ce:	23ff      	movs	r3, #255	; 0xff
 800b0d0:	4912      	ldr	r1, [pc, #72]	; (800b11c <ull_setdwstate+0xb0>)
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	f7ff ff0c 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800b0d8:	e7e9      	b.n	800b0ae <ull_setdwstate+0x42>
 800b0da:	2303      	movs	r3, #3
 800b0dc:	9300      	str	r3, [sp, #0]
 800b0de:	23ff      	movs	r3, #255	; 0xff
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	490d      	ldr	r1, [pc, #52]	; (800b118 <ull_setdwstate+0xac>)
 800b0e4:	f7ff ff04 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800b0e8:	4d0c      	ldr	r5, [pc, #48]	; (800b11c <ull_setdwstate+0xb0>)
 800b0ea:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b0ee:	9300      	str	r3, [sp, #0]
 800b0f0:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	4629      	mov	r1, r5
 800b0f8:	4620      	mov	r0, r4
 800b0fa:	f7ff fd87 	bl	800ac0c <dwt_modify32bitoffsetreg>
 800b0fe:	2300      	movs	r3, #0
 800b100:	9300      	str	r3, [sp, #0]
 800b102:	237f      	movs	r3, #127	; 0x7f
 800b104:	2202      	movs	r2, #2
 800b106:	4629      	mov	r1, r5
 800b108:	4620      	mov	r0, r4
 800b10a:	f7ff fef1 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800b10e:	2105      	movs	r1, #5
 800b110:	4620      	mov	r0, r4
 800b112:	f7ff f8dd 	bl	800a2d0 <ull_force_clocks>
 800b116:	e7ca      	b.n	800b0ae <ull_setdwstate+0x42>
 800b118:	00110004 	.word	0x00110004
 800b11c:	00110008 	.word	0x00110008
 800b120:	00090008 	.word	0x00090008

0800b124 <ull_configureframefilter>:
 800b124:	b530      	push	{r4, r5, lr}
 800b126:	b083      	sub	sp, #12
 800b128:	4605      	mov	r5, r0
 800b12a:	2902      	cmp	r1, #2
 800b12c:	d00e      	beq.n	800b14c <ull_configureframefilter+0x28>
 800b12e:	2400      	movs	r4, #0
 800b130:	9400      	str	r4, [sp, #0]
 800b132:	23fe      	movs	r3, #254	; 0xfe
 800b134:	4622      	mov	r2, r4
 800b136:	2110      	movs	r1, #16
 800b138:	f7ff feda 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800b13c:	4623      	mov	r3, r4
 800b13e:	4622      	mov	r2, r4
 800b140:	2114      	movs	r1, #20
 800b142:	4628      	mov	r0, r5
 800b144:	f7ff f8b3 	bl	800a2ae <dwt_write16bitoffsetreg>
 800b148:	b003      	add	sp, #12
 800b14a:	bd30      	pop	{r4, r5, pc}
 800b14c:	4614      	mov	r4, r2
 800b14e:	2301      	movs	r3, #1
 800b150:	9300      	str	r3, [sp, #0]
 800b152:	23ff      	movs	r3, #255	; 0xff
 800b154:	2200      	movs	r2, #0
 800b156:	2110      	movs	r1, #16
 800b158:	f7ff feca 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800b15c:	4623      	mov	r3, r4
 800b15e:	2200      	movs	r2, #0
 800b160:	2114      	movs	r1, #20
 800b162:	4628      	mov	r0, r5
 800b164:	f7ff f8a3 	bl	800a2ae <dwt_write16bitoffsetreg>
 800b168:	e7ee      	b.n	800b148 <ull_configureframefilter+0x24>
	...

0800b16c <ull_run_pgfcal>:
 800b16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b170:	b082      	sub	sp, #8
 800b172:	4605      	mov	r5, r0
 800b174:	4c29      	ldr	r4, [pc, #164]	; (800b21c <ull_run_pgfcal+0xb0>)
 800b176:	4b2a      	ldr	r3, [pc, #168]	; (800b220 <ull_run_pgfcal+0xb4>)
 800b178:	2200      	movs	r2, #0
 800b17a:	4621      	mov	r1, r4
 800b17c:	f7ff f8f4 	bl	800a368 <dwt_write32bitoffsetreg>
 800b180:	2310      	movs	r3, #16
 800b182:	9300      	str	r3, [sp, #0]
 800b184:	23ff      	movs	r3, #255	; 0xff
 800b186:	2200      	movs	r2, #0
 800b188:	4621      	mov	r1, r4
 800b18a:	4628      	mov	r0, r5
 800b18c:	f7ff feb0 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800b190:	2403      	movs	r4, #3
 800b192:	f04f 0814 	mov.w	r8, #20
 800b196:	4f23      	ldr	r7, [pc, #140]	; (800b224 <ull_run_pgfcal+0xb8>)
 800b198:	2600      	movs	r6, #0
 800b19a:	4640      	mov	r0, r8
 800b19c:	f7f6 f9d9 	bl	8001552 <deca_usleep>
 800b1a0:	4632      	mov	r2, r6
 800b1a2:	4639      	mov	r1, r7
 800b1a4:	4628      	mov	r0, r5
 800b1a6:	f7fe fc92 	bl	8009ace <dwt_read8bitoffsetreg>
 800b1aa:	2801      	cmp	r0, #1
 800b1ac:	d034      	beq.n	800b218 <ull_run_pgfcal+0xac>
 800b1ae:	1e63      	subs	r3, r4, #1
 800b1b0:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800b1b4:	d1f1      	bne.n	800b19a <ull_run_pgfcal+0x2e>
 800b1b6:	f06f 0402 	mvn.w	r4, #2
 800b1ba:	4e18      	ldr	r6, [pc, #96]	; (800b21c <ull_run_pgfcal+0xb0>)
 800b1bc:	2300      	movs	r3, #0
 800b1be:	461a      	mov	r2, r3
 800b1c0:	4631      	mov	r1, r6
 800b1c2:	4628      	mov	r0, r5
 800b1c4:	f7ff fa5e 	bl	800a684 <dwt_write8bitoffsetreg>
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	4915      	ldr	r1, [pc, #84]	; (800b224 <ull_run_pgfcal+0xb8>)
 800b1ce:	4628      	mov	r0, r5
 800b1d0:	f7ff fa58 	bl	800a684 <dwt_write8bitoffsetreg>
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	9300      	str	r3, [sp, #0]
 800b1d8:	23ff      	movs	r3, #255	; 0xff
 800b1da:	2202      	movs	r2, #2
 800b1dc:	4631      	mov	r1, r6
 800b1de:	4628      	mov	r0, r5
 800b1e0:	f7ff fe86 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	4910      	ldr	r1, [pc, #64]	; (800b228 <ull_run_pgfcal+0xbc>)
 800b1e8:	4628      	mov	r0, r5
 800b1ea:	f7fe fc48 	bl	8009a7e <dwt_read32bitoffsetreg>
 800b1ee:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800b1f2:	4298      	cmp	r0, r3
 800b1f4:	bf08      	it	eq
 800b1f6:	f06f 0403 	mvneq.w	r4, #3
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	490b      	ldr	r1, [pc, #44]	; (800b22c <ull_run_pgfcal+0xc0>)
 800b1fe:	4628      	mov	r0, r5
 800b200:	f7fe fc3d 	bl	8009a7e <dwt_read32bitoffsetreg>
 800b204:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800b208:	4298      	cmp	r0, r3
 800b20a:	bf14      	ite	ne
 800b20c:	4620      	movne	r0, r4
 800b20e:	f06f 0004 	mvneq.w	r0, #4
 800b212:	b002      	add	sp, #8
 800b214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b218:	2400      	movs	r4, #0
 800b21a:	e7ce      	b.n	800b1ba <ull_run_pgfcal+0x4e>
 800b21c:	0004000c 	.word	0x0004000c
 800b220:	00020001 	.word	0x00020001
 800b224:	00040020 	.word	0x00040020
 800b228:	00040014 	.word	0x00040014
 800b22c:	0004001c 	.word	0x0004001c

0800b230 <ull_setinterrupt>:
 800b230:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b234:	b083      	sub	sp, #12
 800b236:	4605      	mov	r5, r0
 800b238:	4688      	mov	r8, r1
 800b23a:	4617      	mov	r7, r2
 800b23c:	461c      	mov	r4, r3
 800b23e:	f7f6 f95f 	bl	8001500 <decamutexon>
 800b242:	4606      	mov	r6, r0
 800b244:	2c02      	cmp	r4, #2
 800b246:	d019      	beq.n	800b27c <ull_setinterrupt+0x4c>
 800b248:	2c04      	cmp	r4, #4
 800b24a:	d017      	beq.n	800b27c <ull_setinterrupt+0x4c>
 800b24c:	f004 03fd 	and.w	r3, r4, #253	; 0xfd
 800b250:	2b01      	cmp	r3, #1
 800b252:	d03f      	beq.n	800b2d4 <ull_setinterrupt+0xa4>
 800b254:	f04f 0900 	mov.w	r9, #0
 800b258:	f8cd 9000 	str.w	r9, [sp]
 800b25c:	ea6f 0308 	mvn.w	r3, r8
 800b260:	464a      	mov	r2, r9
 800b262:	213c      	movs	r1, #60	; 0x3c
 800b264:	4628      	mov	r0, r5
 800b266:	f7ff fcd1 	bl	800ac0c <dwt_modify32bitoffsetreg>
 800b26a:	f8cd 9000 	str.w	r9, [sp]
 800b26e:	43fb      	mvns	r3, r7
 800b270:	464a      	mov	r2, r9
 800b272:	2140      	movs	r1, #64	; 0x40
 800b274:	4628      	mov	r0, r5
 800b276:	f7ff fcc9 	bl	800ac0c <dwt_modify32bitoffsetreg>
 800b27a:	e00b      	b.n	800b294 <ull_setinterrupt+0x64>
 800b27c:	4643      	mov	r3, r8
 800b27e:	2200      	movs	r2, #0
 800b280:	213c      	movs	r1, #60	; 0x3c
 800b282:	4628      	mov	r0, r5
 800b284:	f7ff f870 	bl	800a368 <dwt_write32bitoffsetreg>
 800b288:	463b      	mov	r3, r7
 800b28a:	2200      	movs	r2, #0
 800b28c:	2140      	movs	r1, #64	; 0x40
 800b28e:	4628      	mov	r0, r5
 800b290:	f7ff f86a 	bl	800a368 <dwt_write32bitoffsetreg>
 800b294:	3c03      	subs	r4, #3
 800b296:	b2e4      	uxtb	r4, r4
 800b298:	2c01      	cmp	r4, #1
 800b29a:	d92d      	bls.n	800b2f8 <ull_setinterrupt+0xc8>
 800b29c:	2200      	movs	r2, #0
 800b29e:	213c      	movs	r1, #60	; 0x3c
 800b2a0:	4628      	mov	r0, r5
 800b2a2:	f7fe fbec 	bl	8009a7e <dwt_read32bitoffsetreg>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	2144      	movs	r1, #68	; 0x44
 800b2ac:	4628      	mov	r0, r5
 800b2ae:	f7ff f85b 	bl	800a368 <dwt_write32bitoffsetreg>
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	2140      	movs	r1, #64	; 0x40
 800b2b6:	4628      	mov	r0, r5
 800b2b8:	f7fe fbe1 	bl	8009a7e <dwt_read32bitoffsetreg>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	2200      	movs	r2, #0
 800b2c0:	2148      	movs	r1, #72	; 0x48
 800b2c2:	4628      	mov	r0, r5
 800b2c4:	f7ff f850 	bl	800a368 <dwt_write32bitoffsetreg>
 800b2c8:	4630      	mov	r0, r6
 800b2ca:	f7f6 f92a 	bl	8001522 <decamutexoff>
 800b2ce:	b003      	add	sp, #12
 800b2d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2d4:	f8cd 8000 	str.w	r8, [sp]
 800b2d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2dc:	2200      	movs	r2, #0
 800b2de:	213c      	movs	r1, #60	; 0x3c
 800b2e0:	4628      	mov	r0, r5
 800b2e2:	f7ff fc93 	bl	800ac0c <dwt_modify32bitoffsetreg>
 800b2e6:	9700      	str	r7, [sp, #0]
 800b2e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	2140      	movs	r1, #64	; 0x40
 800b2f0:	4628      	mov	r0, r5
 800b2f2:	f7ff fc8b 	bl	800ac0c <dwt_modify32bitoffsetreg>
 800b2f6:	e7cd      	b.n	800b294 <ull_setinterrupt+0x64>
 800b2f8:	2110      	movs	r1, #16
 800b2fa:	9100      	str	r1, [sp, #0]
 800b2fc:	23ff      	movs	r3, #255	; 0xff
 800b2fe:	2202      	movs	r2, #2
 800b300:	4628      	mov	r0, r5
 800b302:	f7ff fdf5 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800b306:	e7c9      	b.n	800b29c <ull_setinterrupt+0x6c>

0800b308 <prs_ack_enable>:
 800b308:	b500      	push	{lr}
 800b30a:	b083      	sub	sp, #12
 800b30c:	2900      	cmp	r1, #0
 800b30e:	bf0b      	itete	eq
 800b310:	23ff      	moveq	r3, #255	; 0xff
 800b312:	23f7      	movne	r3, #247	; 0xf7
 800b314:	2200      	moveq	r2, #0
 800b316:	2208      	movne	r2, #8
 800b318:	9200      	str	r2, [sp, #0]
 800b31a:	2201      	movs	r2, #1
 800b31c:	2110      	movs	r1, #16
 800b31e:	f7ff fde7 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800b322:	b003      	add	sp, #12
 800b324:	f85d fb04 	ldr.w	pc, [sp], #4

0800b328 <dwt_modify16bitoffsetreg>:
 800b328:	b510      	push	{r4, lr}
 800b32a:	b084      	sub	sp, #16
 800b32c:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 800b330:	f88d 300c 	strb.w	r3, [sp, #12]
 800b334:	0a1b      	lsrs	r3, r3, #8
 800b336:	f88d 300d 	strb.w	r3, [sp, #13]
 800b33a:	f88d 400e 	strb.w	r4, [sp, #14]
 800b33e:	0a24      	lsrs	r4, r4, #8
 800b340:	f88d 400f 	strb.w	r4, [sp, #15]
 800b344:	f248 0302 	movw	r3, #32770	; 0x8002
 800b348:	9301      	str	r3, [sp, #4]
 800b34a:	ab03      	add	r3, sp, #12
 800b34c:	9300      	str	r3, [sp, #0]
 800b34e:	2304      	movs	r3, #4
 800b350:	b292      	uxth	r2, r2
 800b352:	f7fe fb0c 	bl	800996e <dwt_xfer3xxx>
 800b356:	b004      	add	sp, #16
 800b358:	bd10      	pop	{r4, pc}
	...

0800b35c <ull_setleds>:
 800b35c:	b530      	push	{r4, r5, lr}
 800b35e:	b083      	sub	sp, #12
 800b360:	4604      	mov	r4, r0
 800b362:	f011 0f01 	tst.w	r1, #1
 800b366:	d01f      	beq.n	800b3a8 <ull_setleds+0x4c>
 800b368:	460d      	mov	r5, r1
 800b36a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800b36e:	9300      	str	r3, [sp, #0]
 800b370:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 800b374:	2200      	movs	r2, #0
 800b376:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800b37a:	f7ff fc47 	bl	800ac0c <dwt_modify32bitoffsetreg>
 800b37e:	f44f 0304 	mov.w	r3, #8650752	; 0x840000
 800b382:	9300      	str	r3, [sp, #0]
 800b384:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b388:	2200      	movs	r2, #0
 800b38a:	4918      	ldr	r1, [pc, #96]	; (800b3ec <ull_setleds+0x90>)
 800b38c:	4620      	mov	r0, r4
 800b38e:	f7ff fc3d 	bl	800ac0c <dwt_modify32bitoffsetreg>
 800b392:	f015 0f02 	tst.w	r5, #2
 800b396:	d11a      	bne.n	800b3ce <ull_setleds+0x72>
 800b398:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b39c:	2200      	movs	r2, #0
 800b39e:	4914      	ldr	r1, [pc, #80]	; (800b3f0 <ull_setleds+0x94>)
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	f7fe ffe1 	bl	800a368 <dwt_write32bitoffsetreg>
 800b3a6:	e010      	b.n	800b3ca <ull_setleds+0x6e>
 800b3a8:	2500      	movs	r5, #0
 800b3aa:	9500      	str	r5, [sp, #0]
 800b3ac:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 800b3b0:	462a      	mov	r2, r5
 800b3b2:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800b3b6:	f7ff fc29 	bl	800ac0c <dwt_modify32bitoffsetreg>
 800b3ba:	9500      	str	r5, [sp, #0]
 800b3bc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800b3c0:	462a      	mov	r2, r5
 800b3c2:	490b      	ldr	r1, [pc, #44]	; (800b3f0 <ull_setleds+0x94>)
 800b3c4:	4620      	mov	r0, r4
 800b3c6:	f7ff ffaf 	bl	800b328 <dwt_modify16bitoffsetreg>
 800b3ca:	b003      	add	sp, #12
 800b3cc:	bd30      	pop	{r4, r5, pc}
 800b3ce:	4d08      	ldr	r5, [pc, #32]	; (800b3f0 <ull_setleds+0x94>)
 800b3d0:	4b08      	ldr	r3, [pc, #32]	; (800b3f4 <ull_setleds+0x98>)
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	4629      	mov	r1, r5
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	f7fe ffc6 	bl	800a368 <dwt_write32bitoffsetreg>
 800b3dc:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	4629      	mov	r1, r5
 800b3e4:	4620      	mov	r0, r4
 800b3e6:	f7fe ffbf 	bl	800a368 <dwt_write32bitoffsetreg>
 800b3ea:	e7ee      	b.n	800b3ca <ull_setleds+0x6e>
 800b3ec:	00110004 	.word	0x00110004
 800b3f0:	00110018 	.word	0x00110018
 800b3f4:	000f0110 	.word	0x000f0110

0800b3f8 <ull_pgf_cal>:
 800b3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3fa:	b083      	sub	sp, #12
 800b3fc:	4604      	mov	r4, r0
 800b3fe:	2901      	cmp	r1, #1
 800b400:	d009      	beq.n	800b416 <ull_pgf_cal+0x1e>
 800b402:	2014      	movs	r0, #20
 800b404:	f7f6 f8a5 	bl	8001552 <deca_usleep>
 800b408:	4620      	mov	r0, r4
 800b40a:	f7ff feaf 	bl	800b16c <ull_run_pgfcal>
 800b40e:	4605      	mov	r5, r0
 800b410:	4628      	mov	r0, r5
 800b412:	b003      	add	sp, #12
 800b414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b416:	4e0f      	ldr	r6, [pc, #60]	; (800b454 <ull_pgf_cal+0x5c>)
 800b418:	2200      	movs	r2, #0
 800b41a:	4631      	mov	r1, r6
 800b41c:	f7fe fb45 	bl	8009aaa <dwt_read16bitoffsetreg>
 800b420:	4607      	mov	r7, r0
 800b422:	f240 1307 	movw	r3, #263	; 0x107
 800b426:	9300      	str	r3, [sp, #0]
 800b428:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b42c:	2200      	movs	r2, #0
 800b42e:	4631      	mov	r1, r6
 800b430:	4620      	mov	r0, r4
 800b432:	f7ff ff79 	bl	800b328 <dwt_modify16bitoffsetreg>
 800b436:	2014      	movs	r0, #20
 800b438:	f7f6 f88b 	bl	8001552 <deca_usleep>
 800b43c:	4620      	mov	r0, r4
 800b43e:	f7ff fe95 	bl	800b16c <ull_run_pgfcal>
 800b442:	4605      	mov	r5, r0
 800b444:	2200      	movs	r2, #0
 800b446:	9200      	str	r2, [sp, #0]
 800b448:	463b      	mov	r3, r7
 800b44a:	4631      	mov	r1, r6
 800b44c:	4620      	mov	r0, r4
 800b44e:	f7ff ff6b 	bl	800b328 <dwt_modify16bitoffsetreg>
 800b452:	e7dd      	b.n	800b410 <ull_pgf_cal+0x18>
 800b454:	00070048 	.word	0x00070048

0800b458 <ull_setgpiovalue>:
 800b458:	b500      	push	{lr}
 800b45a:	b083      	sub	sp, #12
 800b45c:	2a01      	cmp	r2, #1
 800b45e:	d009      	beq.n	800b474 <ull_setgpiovalue+0x1c>
 800b460:	43cb      	mvns	r3, r1
 800b462:	2200      	movs	r2, #0
 800b464:	9200      	str	r2, [sp, #0]
 800b466:	b29b      	uxth	r3, r3
 800b468:	4906      	ldr	r1, [pc, #24]	; (800b484 <ull_setgpiovalue+0x2c>)
 800b46a:	f7ff ff5d 	bl	800b328 <dwt_modify16bitoffsetreg>
 800b46e:	b003      	add	sp, #12
 800b470:	f85d fb04 	ldr.w	pc, [sp], #4
 800b474:	9100      	str	r1, [sp, #0]
 800b476:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b47a:	2200      	movs	r2, #0
 800b47c:	4901      	ldr	r1, [pc, #4]	; (800b484 <ull_setgpiovalue+0x2c>)
 800b47e:	f7ff ff53 	bl	800b328 <dwt_modify16bitoffsetreg>
 800b482:	e7f4      	b.n	800b46e <ull_setgpiovalue+0x16>
 800b484:	0005000c 	.word	0x0005000c

0800b488 <ull_readaccdata>:
 800b488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b48a:	b083      	sub	sp, #12
 800b48c:	4604      	mov	r4, r0
 800b48e:	460f      	mov	r7, r1
 800b490:	4616      	mov	r6, r2
 800b492:	461d      	mov	r5, r3
 800b494:	f248 0340 	movw	r3, #32832	; 0x8040
 800b498:	9300      	str	r3, [sp, #0]
 800b49a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b49e:	2200      	movs	r2, #0
 800b4a0:	4918      	ldr	r1, [pc, #96]	; (800b504 <ull_readaccdata+0x7c>)
 800b4a2:	f7ff ff41 	bl	800b328 <dwt_modify16bitoffsetreg>
 800b4a6:	19aa      	adds	r2, r5, r6
 800b4a8:	f243 0301 	movw	r3, #12289	; 0x3001
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	dc15      	bgt.n	800b4dc <ull_readaccdata+0x54>
 800b4b0:	2d7f      	cmp	r5, #127	; 0x7f
 800b4b2:	d91d      	bls.n	800b4f0 <ull_readaccdata+0x68>
 800b4b4:	2315      	movs	r3, #21
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	4913      	ldr	r1, [pc, #76]	; (800b508 <ull_readaccdata+0x80>)
 800b4ba:	4620      	mov	r0, r4
 800b4bc:	f7fe ff54 	bl	800a368 <dwt_write32bitoffsetreg>
 800b4c0:	462b      	mov	r3, r5
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	4911      	ldr	r1, [pc, #68]	; (800b50c <ull_readaccdata+0x84>)
 800b4c6:	4620      	mov	r0, r4
 800b4c8:	f7fe ff4e 	bl	800a368 <dwt_write32bitoffsetreg>
 800b4cc:	9700      	str	r7, [sp, #0]
 800b4ce:	4633      	mov	r3, r6
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800b4d6:	4620      	mov	r0, r4
 800b4d8:	f7fe fac7 	bl	8009a6a <dwt_readfromdevice>
 800b4dc:	2200      	movs	r2, #0
 800b4de:	9200      	str	r2, [sp, #0]
 800b4e0:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 800b4e4:	4907      	ldr	r1, [pc, #28]	; (800b504 <ull_readaccdata+0x7c>)
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	f7ff ff1e 	bl	800b328 <dwt_modify16bitoffsetreg>
 800b4ec:	b003      	add	sp, #12
 800b4ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4f0:	9700      	str	r7, [sp, #0]
 800b4f2:	4633      	mov	r3, r6
 800b4f4:	462a      	mov	r2, r5
 800b4f6:	f44f 11a8 	mov.w	r1, #1376256	; 0x150000
 800b4fa:	4620      	mov	r0, r4
 800b4fc:	f7fe fab5 	bl	8009a6a <dwt_readfromdevice>
 800b500:	e7ec      	b.n	800b4dc <ull_readaccdata+0x54>
 800b502:	bf00      	nop
 800b504:	00110004 	.word	0x00110004
 800b508:	001f0004 	.word	0x001f0004
 800b50c:	001f0008 	.word	0x001f0008

0800b510 <ull_repeated_cw>:
 800b510:	b570      	push	{r4, r5, r6, lr}
 800b512:	4606      	mov	r6, r0
 800b514:	460c      	mov	r4, r1
 800b516:	4615      	mov	r5, r2
 800b518:	4b0e      	ldr	r3, [pc, #56]	; (800b554 <ull_repeated_cw+0x44>)
 800b51a:	2202      	movs	r2, #2
 800b51c:	490e      	ldr	r1, [pc, #56]	; (800b558 <ull_repeated_cw+0x48>)
 800b51e:	f7fe ff23 	bl	800a368 <dwt_write32bitoffsetreg>
 800b522:	2d0f      	cmp	r5, #15
 800b524:	bfa8      	it	ge
 800b526:	250f      	movge	r5, #15
 800b528:	1e63      	subs	r3, r4, #1
 800b52a:	2b03      	cmp	r3, #3
 800b52c:	bf28      	it	cs
 800b52e:	2404      	movcs	r4, #4
 800b530:	2310      	movs	r3, #16
 800b532:	4123      	asrs	r3, r4
 800b534:	2200      	movs	r2, #0
 800b536:	4909      	ldr	r1, [pc, #36]	; (800b55c <ull_repeated_cw+0x4c>)
 800b538:	4630      	mov	r0, r6
 800b53a:	f7fe ff15 	bl	800a368 <dwt_write32bitoffsetreg>
 800b53e:	1e63      	subs	r3, r4, #1
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	fa05 f303 	lsl.w	r3, r5, r3
 800b546:	2200      	movs	r2, #0
 800b548:	4905      	ldr	r1, [pc, #20]	; (800b560 <ull_repeated_cw+0x50>)
 800b54a:	4630      	mov	r0, r6
 800b54c:	f7fe ff0c 	bl	800a368 <dwt_write32bitoffsetreg>
 800b550:	bd70      	pop	{r4, r5, r6, pc}
 800b552:	bf00      	nop
 800b554:	00d20874 	.word	0x00d20874
 800b558:	00110010 	.word	0x00110010
 800b55c:	00070028 	.word	0x00070028
 800b560:	00080018 	.word	0x00080018

0800b564 <ull_configure>:
 800b564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b568:	b083      	sub	sp, #12
 800b56a:	4604      	mov	r4, r0
 800b56c:	460d      	mov	r5, r1
 800b56e:	f891 9000 	ldrb.w	r9, [r1]
 800b572:	790b      	ldrb	r3, [r1, #4]
 800b574:	2b18      	cmp	r3, #24
 800b576:	d814      	bhi.n	800b5a2 <ull_configure+0x3e>
 800b578:	78cf      	ldrb	r7, [r1, #3]
 800b57a:	2f18      	cmp	r7, #24
 800b57c:	bf94      	ite	ls
 800b57e:	2700      	movls	r7, #0
 800b580:	2701      	movhi	r7, #1
 800b582:	b2ff      	uxtb	r7, r7
 800b584:	79eb      	ldrb	r3, [r5, #7]
 800b586:	2b01      	cmp	r3, #1
 800b588:	bf0c      	ite	eq
 800b58a:	2110      	moveq	r1, #16
 800b58c:	2100      	movne	r1, #0
 800b58e:	786b      	ldrb	r3, [r5, #1]
 800b590:	3b01      	subs	r3, #1
 800b592:	2b06      	cmp	r3, #6
 800b594:	d810      	bhi.n	800b5b8 <ull_configure+0x54>
 800b596:	e8df f003 	tbb	[pc, r3]
 800b59a:	0f06      	.short	0x0f06
 800b59c:	0f0c120f 	.word	0x0f0c120f
 800b5a0:	09          	.byte	0x09
 800b5a1:	00          	.byte	0x00
 800b5a2:	2701      	movs	r7, #1
 800b5a4:	e7ed      	b.n	800b582 <ull_configure+0x1e>
 800b5a6:	f04f 0a40 	mov.w	sl, #64	; 0x40
 800b5aa:	e00a      	b.n	800b5c2 <ull_configure+0x5e>
 800b5ac:	f04f 0a48 	mov.w	sl, #72	; 0x48
 800b5b0:	e007      	b.n	800b5c2 <ull_configure+0x5e>
 800b5b2:	f04f 0a80 	mov.w	sl, #128	; 0x80
 800b5b6:	e004      	b.n	800b5c2 <ull_configure+0x5e>
 800b5b8:	f44f 7a80 	mov.w	sl, #256	; 0x100
 800b5bc:	e001      	b.n	800b5c2 <ull_configure+0x5e>
 800b5be:	f04f 0a20 	mov.w	sl, #32
 800b5c2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b5c4:	8a13      	ldrh	r3, [r2, #16]
 800b5c6:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800b5ca:	8213      	strh	r3, [r2, #16]
 800b5cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b5ce:	79ea      	ldrb	r2, [r5, #7]
 800b5d0:	72da      	strb	r2, [r3, #11]
 800b5d2:	7b2e      	ldrb	r6, [r5, #12]
 800b5d4:	1cb3      	adds	r3, r6, #2
 800b5d6:	2601      	movs	r6, #1
 800b5d8:	409e      	lsls	r6, r3
 800b5da:	fa1f f886 	uxth.w	r8, r6
 800b5de:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b5e0:	4bca      	ldr	r3, [pc, #808]	; (800b90c <ull_configure+0x3a8>)
 800b5e2:	fb03 f308 	mul.w	r3, r3, r8
 800b5e6:	0bdb      	lsrs	r3, r3, #15
 800b5e8:	8253      	strh	r3, [r2, #18]
 800b5ea:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b5ec:	7aea      	ldrb	r2, [r5, #11]
 800b5ee:	755a      	strb	r2, [r3, #21]
 800b5f0:	7a2b      	ldrb	r3, [r5, #8]
 800b5f2:	015b      	lsls	r3, r3, #5
 800b5f4:	f003 0320 	and.w	r3, r3, #32
 800b5f8:	7b6a      	ldrb	r2, [r5, #13]
 800b5fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b5fe:	7aea      	ldrb	r2, [r5, #11]
 800b600:	0312      	lsls	r2, r2, #12
 800b602:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 800b606:	4313      	orrs	r3, r2
 800b608:	430b      	orrs	r3, r1
 800b60a:	9300      	str	r3, [sp, #0]
 800b60c:	4bc0      	ldr	r3, [pc, #768]	; (800b910 <ull_configure+0x3ac>)
 800b60e:	2200      	movs	r2, #0
 800b610:	2110      	movs	r1, #16
 800b612:	4620      	mov	r0, r4
 800b614:	f7ff fafa 	bl	800ac0c <dwt_modify32bitoffsetreg>
 800b618:	2f00      	cmp	r7, #0
 800b61a:	f040 80fc 	bne.w	800b816 <ull_configure+0x2b2>
 800b61e:	7aeb      	ldrb	r3, [r5, #11]
 800b620:	b1f3      	cbz	r3, 800b660 <ull_configure+0xfc>
 800b622:	7b6b      	ldrb	r3, [r5, #13]
 800b624:	2b01      	cmp	r3, #1
 800b626:	f240 8121 	bls.w	800b86c <ull_configure+0x308>
 800b62a:	7b2a      	ldrb	r2, [r5, #12]
 800b62c:	4bb9      	ldr	r3, [pc, #740]	; (800b914 <ull_configure+0x3b0>)
 800b62e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800b632:	0112      	lsls	r2, r2, #4
 800b634:	0ad3      	lsrs	r3, r2, #11
 800b636:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800b63a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b63e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800b642:	bf28      	it	cs
 800b644:	3301      	addcs	r3, #1
 800b646:	b29b      	uxth	r3, r3
 800b648:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
 800b64c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b650:	9300      	str	r3, [sp, #0]
 800b652:	f64f 7380 	movw	r3, #65408	; 0xff80
 800b656:	2202      	movs	r2, #2
 800b658:	49af      	ldr	r1, [pc, #700]	; (800b918 <ull_configure+0x3b4>)
 800b65a:	4620      	mov	r0, r4
 800b65c:	f7ff fe64 	bl	800b328 <dwt_modify16bitoffsetreg>
 800b660:	2394      	movs	r3, #148	; 0x94
 800b662:	9300      	str	r3, [sp, #0]
 800b664:	4bad      	ldr	r3, [pc, #692]	; (800b91c <ull_configure+0x3b8>)
 800b666:	2200      	movs	r2, #0
 800b668:	49ad      	ldr	r1, [pc, #692]	; (800b920 <ull_configure+0x3bc>)
 800b66a:	4620      	mov	r0, r4
 800b66c:	f7ff face 	bl	800ac0c <dwt_modify32bitoffsetreg>
 800b670:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800b674:	f340 810d 	ble.w	800b892 <ull_configure+0x32e>
 800b678:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b67a:	8a13      	ldrh	r3, [r2, #16]
 800b67c:	f043 0320 	orr.w	r3, r3, #32
 800b680:	8213      	strh	r3, [r2, #16]
 800b682:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b686:	9300      	str	r3, [sp, #0]
 800b688:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800b68c:	2200      	movs	r2, #0
 800b68e:	49a5      	ldr	r1, [pc, #660]	; (800b924 <ull_configure+0x3c0>)
 800b690:	4620      	mov	r0, r4
 800b692:	f7ff fe49 	bl	800b328 <dwt_modify16bitoffsetreg>
 800b696:	7b6b      	ldrb	r3, [r5, #13]
 800b698:	2b01      	cmp	r3, #1
 800b69a:	f000 8105 	beq.w	800b8a8 <ull_configure+0x344>
 800b69e:	78ab      	ldrb	r3, [r5, #2]
 800b6a0:	f043 0310 	orr.w	r3, r3, #16
 800b6a4:	9300      	str	r3, [sp, #0]
 800b6a6:	23fc      	movs	r3, #252	; 0xfc
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800b6ae:	4620      	mov	r0, r4
 800b6b0:	f7ff fc1e 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800b6b4:	1e73      	subs	r3, r6, #1
 800b6b6:	b2db      	uxtb	r3, r3
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800b6be:	4620      	mov	r0, r4
 800b6c0:	f7fe ffe0 	bl	800a684 <dwt_write8bitoffsetreg>
 800b6c4:	786b      	ldrb	r3, [r5, #1]
 800b6c6:	2b07      	cmp	r3, #7
 800b6c8:	bf0c      	ite	eq
 800b6ca:	2308      	moveq	r3, #8
 800b6cc:	2300      	movne	r3, #0
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	2124      	movs	r1, #36	; 0x24
 800b6d2:	4620      	mov	r0, r4
 800b6d4:	f7fe ffd6 	bl	800a684 <dwt_write8bitoffsetreg>
 800b6d8:	7aeb      	ldrb	r3, [r5, #11]
 800b6da:	f003 0303 	and.w	r3, r3, #3
 800b6de:	2b03      	cmp	r3, #3
 800b6e0:	bf0c      	ite	eq
 800b6e2:	4b91      	ldreq	r3, [pc, #580]	; (800b928 <ull_configure+0x3c4>)
 800b6e4:	4b91      	ldrne	r3, [pc, #580]	; (800b92c <ull_configure+0x3c8>)
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	4991      	ldr	r1, [pc, #580]	; (800b930 <ull_configure+0x3cc>)
 800b6ea:	4620      	mov	r0, r4
 800b6ec:	f7fe fe3c 	bl	800a368 <dwt_write32bitoffsetreg>
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	4990      	ldr	r1, [pc, #576]	; (800b934 <ull_configure+0x3d0>)
 800b6f4:	4620      	mov	r0, r4
 800b6f6:	f7fe f9c2 	bl	8009a7e <dwt_read32bitoffsetreg>
 800b6fa:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 800b6fe:	f020 001f 	bic.w	r0, r0, #31
 800b702:	f1b9 0f09 	cmp.w	r9, #9
 800b706:	bf08      	it	eq
 800b708:	f040 0001 	orreq.w	r0, r0, #1
 800b70c:	792a      	ldrb	r2, [r5, #4]
 800b70e:	0212      	lsls	r2, r2, #8
 800b710:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 800b714:	78eb      	ldrb	r3, [r5, #3]
 800b716:	00db      	lsls	r3, r3, #3
 800b718:	b2db      	uxtb	r3, r3
 800b71a:	431a      	orrs	r2, r3
 800b71c:	796b      	ldrb	r3, [r5, #5]
 800b71e:	005b      	lsls	r3, r3, #1
 800b720:	f003 0306 	and.w	r3, r3, #6
 800b724:	4313      	orrs	r3, r2
 800b726:	4303      	orrs	r3, r0
 800b728:	2200      	movs	r2, #0
 800b72a:	4982      	ldr	r1, [pc, #520]	; (800b934 <ull_configure+0x3d0>)
 800b72c:	4620      	mov	r0, r4
 800b72e:	f7fe fe1b 	bl	800a368 <dwt_write32bitoffsetreg>
 800b732:	79aa      	ldrb	r2, [r5, #6]
 800b734:	786b      	ldrb	r3, [r5, #1]
 800b736:	031b      	lsls	r3, r3, #12
 800b738:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800b73c:	9300      	str	r3, [sp, #0]
 800b73e:	f46f 4374 	mvn.w	r3, #62464	; 0xf400
 800b742:	2200      	movs	r2, #0
 800b744:	2120      	movs	r1, #32
 800b746:	4620      	mov	r0, r4
 800b748:	f7ff fa60 	bl	800ac0c <dwt_modify32bitoffsetreg>
 800b74c:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 800b750:	b923      	cbnz	r3, 800b75c <ull_configure+0x1f8>
 800b752:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800b756:	726b      	strb	r3, [r5, #9]
 800b758:	2300      	movs	r3, #0
 800b75a:	72ab      	strb	r3, [r5, #10]
 800b75c:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 800b760:	2202      	movs	r2, #2
 800b762:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800b766:	4620      	mov	r0, r4
 800b768:	f7fe fda1 	bl	800a2ae <dwt_write16bitoffsetreg>
 800b76c:	2202      	movs	r2, #2
 800b76e:	4972      	ldr	r1, [pc, #456]	; (800b938 <ull_configure+0x3d4>)
 800b770:	4620      	mov	r0, r4
 800b772:	f7fe f9ac 	bl	8009ace <dwt_read8bitoffsetreg>
 800b776:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b778:	7bdb      	ldrb	r3, [r3, #15]
 800b77a:	454b      	cmp	r3, r9
 800b77c:	f000 809e 	beq.w	800b8bc <ull_configure+0x358>
 800b780:	2803      	cmp	r0, #3
 800b782:	f000 809f 	beq.w	800b8c4 <ull_configure+0x360>
 800b786:	f1b9 0f09 	cmp.w	r9, #9
 800b78a:	f000 80a0 	beq.w	800b8ce <ull_configure+0x36a>
 800b78e:	4b6b      	ldr	r3, [pc, #428]	; (800b93c <ull_configure+0x3d8>)
 800b790:	2200      	movs	r2, #0
 800b792:	496b      	ldr	r1, [pc, #428]	; (800b940 <ull_configure+0x3dc>)
 800b794:	4620      	mov	r0, r4
 800b796:	f7fe fde7 	bl	800a368 <dwt_write32bitoffsetreg>
 800b79a:	f641 733c 	movw	r3, #7996	; 0x1f3c
 800b79e:	2200      	movs	r2, #0
 800b7a0:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 800b7a4:	4620      	mov	r0, r4
 800b7a6:	f7fe fd82 	bl	800a2ae <dwt_write16bitoffsetreg>
 800b7aa:	2314      	movs	r3, #20
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	4965      	ldr	r1, [pc, #404]	; (800b944 <ull_configure+0x3e0>)
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	f7fe ff67 	bl	800a684 <dwt_write8bitoffsetreg>
 800b7b6:	230e      	movs	r3, #14
 800b7b8:	2202      	movs	r2, #2
 800b7ba:	4963      	ldr	r1, [pc, #396]	; (800b948 <ull_configure+0x3e4>)
 800b7bc:	4620      	mov	r0, r4
 800b7be:	f7fe ff61 	bl	800a684 <dwt_write8bitoffsetreg>
 800b7c2:	2381      	movs	r3, #129	; 0x81
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	4961      	ldr	r1, [pc, #388]	; (800b94c <ull_configure+0x3e8>)
 800b7c8:	4620      	mov	r0, r4
 800b7ca:	f7fe ff5b 	bl	800a684 <dwt_write8bitoffsetreg>
 800b7ce:	2302      	movs	r3, #2
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	2144      	movs	r1, #68	; 0x44
 800b7d4:	4620      	mov	r0, r4
 800b7d6:	f7fe ff55 	bl	800a684 <dwt_write8bitoffsetreg>
 800b7da:	2101      	movs	r1, #1
 800b7dc:	4620      	mov	r0, r4
 800b7de:	f7ff fc45 	bl	800b06c <ull_setdwstate>
 800b7e2:	f04f 0b32 	mov.w	fp, #50	; 0x32
 800b7e6:	f04f 0814 	mov.w	r8, #20
 800b7ea:	2700      	movs	r7, #0
 800b7ec:	2644      	movs	r6, #68	; 0x44
 800b7ee:	4640      	mov	r0, r8
 800b7f0:	f7f5 feaf 	bl	8001552 <deca_usleep>
 800b7f4:	463a      	mov	r2, r7
 800b7f6:	4631      	mov	r1, r6
 800b7f8:	4620      	mov	r0, r4
 800b7fa:	f7fe f968 	bl	8009ace <dwt_read8bitoffsetreg>
 800b7fe:	f010 0f02 	tst.w	r0, #2
 800b802:	f040 80b5 	bne.w	800b970 <ull_configure+0x40c>
 800b806:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800b80a:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 800b80e:	d1ee      	bne.n	800b7ee <ull_configure+0x28a>
 800b810:	f06f 0001 	mvn.w	r0, #1
 800b814:	e0de      	b.n	800b9d4 <ull_configure+0x470>
 800b816:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b818:	8a13      	ldrh	r3, [r2, #16]
 800b81a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b81e:	8213      	strh	r3, [r2, #16]
 800b820:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b824:	9300      	str	r3, [sp, #0]
 800b826:	f46f 5340 	mvn.w	r3, #12288	; 0x3000
 800b82a:	2200      	movs	r2, #0
 800b82c:	493d      	ldr	r1, [pc, #244]	; (800b924 <ull_configure+0x3c0>)
 800b82e:	4620      	mov	r0, r4
 800b830:	f7ff f9ec 	bl	800ac0c <dwt_modify32bitoffsetreg>
 800b834:	f240 3306 	movw	r3, #774	; 0x306
 800b838:	2200      	movs	r2, #0
 800b83a:	4945      	ldr	r1, [pc, #276]	; (800b950 <ull_configure+0x3ec>)
 800b83c:	4620      	mov	r0, r4
 800b83e:	f7fe fd93 	bl	800a368 <dwt_write32bitoffsetreg>
 800b842:	2300      	movs	r3, #0
 800b844:	461a      	mov	r2, r3
 800b846:	4943      	ldr	r1, [pc, #268]	; (800b954 <ull_configure+0x3f0>)
 800b848:	4620      	mov	r0, r4
 800b84a:	f7fe fd8d 	bl	800a368 <dwt_write32bitoffsetreg>
 800b84e:	4b42      	ldr	r3, [pc, #264]	; (800b958 <ull_configure+0x3f4>)
 800b850:	2200      	movs	r2, #0
 800b852:	4931      	ldr	r1, [pc, #196]	; (800b918 <ull_configure+0x3b4>)
 800b854:	4620      	mov	r0, r4
 800b856:	f7fe fd87 	bl	800a368 <dwt_write32bitoffsetreg>
 800b85a:	239d      	movs	r3, #157	; 0x9d
 800b85c:	9300      	str	r3, [sp, #0]
 800b85e:	4b2f      	ldr	r3, [pc, #188]	; (800b91c <ull_configure+0x3b8>)
 800b860:	2200      	movs	r2, #0
 800b862:	492f      	ldr	r1, [pc, #188]	; (800b920 <ull_configure+0x3bc>)
 800b864:	4620      	mov	r0, r4
 800b866:	f7ff f9d1 	bl	800ac0c <dwt_modify32bitoffsetreg>
 800b86a:	e714      	b.n	800b696 <ull_configure+0x132>
 800b86c:	7b2a      	ldrb	r2, [r5, #12]
 800b86e:	4b29      	ldr	r3, [pc, #164]	; (800b914 <ull_configure+0x3b0>)
 800b870:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800b874:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 800b878:	fb02 f203 	mul.w	r2, r2, r3
 800b87c:	0c93      	lsrs	r3, r2, #18
 800b87e:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 800b882:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b886:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800b88a:	bf28      	it	cs
 800b88c:	3301      	addcs	r3, #1
 800b88e:	b29b      	uxth	r3, r3
 800b890:	e6da      	b.n	800b648 <ull_configure+0xe4>
 800b892:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b896:	9300      	str	r3, [sp, #0]
 800b898:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800b89c:	2200      	movs	r2, #0
 800b89e:	4921      	ldr	r1, [pc, #132]	; (800b924 <ull_configure+0x3c0>)
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	f7ff fd41 	bl	800b328 <dwt_modify16bitoffsetreg>
 800b8a6:	e6f6      	b.n	800b696 <ull_configure+0x132>
 800b8a8:	78ab      	ldrb	r3, [r5, #2]
 800b8aa:	9300      	str	r3, [sp, #0]
 800b8ac:	23ec      	movs	r3, #236	; 0xec
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800b8b4:	4620      	mov	r0, r4
 800b8b6:	f7ff fb1b 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800b8ba:	e6fb      	b.n	800b6b4 <ull_configure+0x150>
 800b8bc:	2803      	cmp	r0, #3
 800b8be:	f47f af62 	bne.w	800b786 <ull_configure+0x222>
 800b8c2:	e058      	b.n	800b976 <ull_configure+0x412>
 800b8c4:	2102      	movs	r1, #2
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	f7ff fbd0 	bl	800b06c <ull_setdwstate>
 800b8cc:	e75b      	b.n	800b786 <ull_configure+0x222>
 800b8ce:	4b23      	ldr	r3, [pc, #140]	; (800b95c <ull_configure+0x3f8>)
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	491b      	ldr	r1, [pc, #108]	; (800b940 <ull_configure+0x3dc>)
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	f7fe fd47 	bl	800a368 <dwt_write32bitoffsetreg>
 800b8da:	f640 733c 	movw	r3, #3900	; 0xf3c
 800b8de:	2200      	movs	r2, #0
 800b8e0:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 800b8e4:	4620      	mov	r0, r4
 800b8e6:	f7fe fce2 	bl	800a2ae <dwt_write16bitoffsetreg>
 800b8ea:	e75e      	b.n	800b7aa <ull_configure+0x246>
 800b8ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8f0:	9300      	str	r3, [sp, #0]
 800b8f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	490a      	ldr	r1, [pc, #40]	; (800b924 <ull_configure+0x3c0>)
 800b8fa:	4620      	mov	r0, r4
 800b8fc:	f7ff fd14 	bl	800b328 <dwt_modify16bitoffsetreg>
 800b900:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b902:	8a13      	ldrh	r3, [r2, #16]
 800b904:	f043 0308 	orr.w	r3, r3, #8
 800b908:	8213      	strh	r3, [r2, #16]
 800b90a:	e046      	b.n	800b99a <ull_configure+0x436>
 800b90c:	00026668 	.word	0x00026668
 800b910:	fffc4fcf 	.word	0xfffc4fcf
 800b914:	08015f80 	.word	0x08015f80
 800b918:	000e0014 	.word	0x000e0014
 800b91c:	bfffff00 	.word	0xbfffff00
 800b920:	000e0018 	.word	0x000e0018
 800b924:	000b0008 	.word	0x000b0008
 800b928:	af5f35cc 	.word	0xaf5f35cc
 800b92c:	af5f584c 	.word	0xaf5f584c
 800b930:	0006000c 	.word	0x0006000c
 800b934:	00010008 	.word	0x00010008
 800b938:	000f0030 	.word	0x000f0030
 800b93c:	1c071134 	.word	0x1c071134
 800b940:	0007001c 	.word	0x0007001c
 800b944:	00070050 	.word	0x00070050
 800b948:	00070018 	.word	0x00070018
 800b94c:	00090008 	.word	0x00090008
 800b950:	000e000c 	.word	0x000e000c
 800b954:	000e0010 	.word	0x000e0010
 800b958:	000c5a0a 	.word	0x000c5a0a
 800b95c:	1c010034 	.word	0x1c010034
 800b960:	2200      	movs	r2, #0
 800b962:	9200      	str	r2, [sp, #0]
 800b964:	23fe      	movs	r3, #254	; 0xfe
 800b966:	491d      	ldr	r1, [pc, #116]	; (800b9dc <ull_configure+0x478>)
 800b968:	4620      	mov	r0, r4
 800b96a:	f7ff fac1 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800b96e:	e01e      	b.n	800b9ae <ull_configure+0x44a>
 800b970:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b972:	f883 900f 	strb.w	r9, [r3, #15]
 800b976:	792b      	ldrb	r3, [r5, #4]
 800b978:	3b09      	subs	r3, #9
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	2b0f      	cmp	r3, #15
 800b97e:	d8ef      	bhi.n	800b960 <ull_configure+0x3fc>
 800b980:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b982:	7a1b      	ldrb	r3, [r3, #8]
 800b984:	2b01      	cmp	r3, #1
 800b986:	d0b1      	beq.n	800b8ec <ull_configure+0x388>
 800b988:	4649      	mov	r1, r9
 800b98a:	4620      	mov	r0, r4
 800b98c:	f7fe fda4 	bl	800a4d8 <ull_configmrxlut>
 800b990:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b992:	8a13      	ldrh	r3, [r2, #16]
 800b994:	f023 0308 	bic.w	r3, r3, #8
 800b998:	8213      	strh	r3, [r2, #16]
 800b99a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800b99e:	9300      	str	r3, [sp, #0]
 800b9a0:	f248 13ff 	movw	r3, #33279	; 0x81ff
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	490d      	ldr	r1, [pc, #52]	; (800b9dc <ull_configure+0x478>)
 800b9a8:	4620      	mov	r0, r4
 800b9aa:	f7ff fcbd 	bl	800b328 <dwt_modify16bitoffsetreg>
 800b9ae:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 800b9b2:	bfcc      	ite	gt
 800b9b4:	f04f 5300 	movgt.w	r3, #536870912	; 0x20000000
 800b9b8:	f04f 53a0 	movle.w	r3, #335544320	; 0x14000000
 800b9bc:	9300      	str	r3, [sp, #0]
 800b9be:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	4906      	ldr	r1, [pc, #24]	; (800b9e0 <ull_configure+0x47c>)
 800b9c6:	4620      	mov	r0, r4
 800b9c8:	f7ff f920 	bl	800ac0c <dwt_modify32bitoffsetreg>
 800b9cc:	2101      	movs	r1, #1
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	f7ff fd12 	bl	800b3f8 <ull_pgf_cal>
 800b9d4:	b003      	add	sp, #12
 800b9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9da:	bf00      	nop
 800b9dc:	00030018 	.word	0x00030018
 800b9e0:	00060010 	.word	0x00060010

0800b9e4 <ull_initialise>:
 800b9e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9e6:	b083      	sub	sp, #12
 800b9e8:	4605      	mov	r5, r0
 800b9ea:	460e      	mov	r6, r1
 800b9ec:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d051      	beq.n	800ba96 <ull_initialise+0xb2>
 800b9f2:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	73a3      	strb	r3, [r4, #14]
 800b9f8:	2202      	movs	r2, #2
 800b9fa:	8222      	strh	r2, [r4, #16]
 800b9fc:	7523      	strb	r3, [r4, #20]
 800b9fe:	7563      	strb	r3, [r4, #21]
 800ba00:	73e3      	strb	r3, [r4, #15]
 800ba02:	7263      	strb	r3, [r4, #9]
 800ba04:	72a3      	strb	r3, [r4, #10]
 800ba06:	2104      	movs	r1, #4
 800ba08:	4628      	mov	r0, r5
 800ba0a:	f7fe fc8b 	bl	800a324 <_dwt_otpread>
 800ba0e:	4607      	mov	r7, r0
 800ba10:	2105      	movs	r1, #5
 800ba12:	4628      	mov	r0, r5
 800ba14:	f7fe fc86 	bl	800a324 <_dwt_otpread>
 800ba18:	b10f      	cbz	r7, 800ba1e <ull_initialise+0x3a>
 800ba1a:	2800      	cmp	r0, #0
 800ba1c:	d140      	bne.n	800baa0 <ull_initialise+0xbc>
 800ba1e:	2120      	movs	r1, #32
 800ba20:	4628      	mov	r0, r5
 800ba22:	f7fe fc7f 	bl	800a324 <_dwt_otpread>
 800ba26:	4b35      	ldr	r3, [pc, #212]	; (800bafc <ull_initialise+0x118>)
 800ba28:	4298      	cmp	r0, r3
 800ba2a:	bf0c      	ite	eq
 800ba2c:	2301      	moveq	r3, #1
 800ba2e:	2300      	movne	r3, #0
 800ba30:	7223      	strb	r3, [r4, #8]
 800ba32:	f016 0f10 	tst.w	r6, #16
 800ba36:	d142      	bne.n	800babe <ull_initialise+0xda>
 800ba38:	f016 0f20 	tst.w	r6, #32
 800ba3c:	d145      	bne.n	800baca <ull_initialise+0xe6>
 800ba3e:	f016 0f40 	tst.w	r6, #64	; 0x40
 800ba42:	d148      	bne.n	800bad6 <ull_initialise+0xf2>
 800ba44:	f016 0f80 	tst.w	r6, #128	; 0x80
 800ba48:	d14c      	bne.n	800bae4 <ull_initialise+0x100>
 800ba4a:	7aa3      	ldrb	r3, [r4, #10]
 800ba4c:	b90b      	cbnz	r3, 800ba52 <ull_initialise+0x6e>
 800ba4e:	2385      	movs	r3, #133	; 0x85
 800ba50:	72a3      	strb	r3, [r4, #10]
 800ba52:	7a63      	ldrb	r3, [r4, #9]
 800ba54:	b90b      	cbnz	r3, 800ba5a <ull_initialise+0x76>
 800ba56:	2374      	movs	r3, #116	; 0x74
 800ba58:	7263      	strb	r3, [r4, #9]
 800ba5a:	211f      	movs	r1, #31
 800ba5c:	4628      	mov	r0, r5
 800ba5e:	f7fe fc61 	bl	800a324 <_dwt_otpread>
 800ba62:	7320      	strb	r0, [r4, #12]
 800ba64:	211e      	movs	r1, #30
 800ba66:	4628      	mov	r0, r5
 800ba68:	f7fe fc5c 	bl	800a324 <_dwt_otpread>
 800ba6c:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
 800ba70:	bf12      	itee	ne
 800ba72:	7360      	strbne	r0, [r4, #13]
 800ba74:	232e      	moveq	r3, #46	; 0x2e
 800ba76:	7363      	strbeq	r3, [r4, #13]
 800ba78:	7b63      	ldrb	r3, [r4, #13]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	4920      	ldr	r1, [pc, #128]	; (800bb00 <ull_initialise+0x11c>)
 800ba7e:	4628      	mov	r0, r5
 800ba80:	f7fe fe00 	bl	800a684 <dwt_write8bitoffsetreg>
 800ba84:	2135      	movs	r1, #53	; 0x35
 800ba86:	4628      	mov	r0, r5
 800ba88:	f7fe fc4c 	bl	800a324 <_dwt_otpread>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	bb78      	cbnz	r0, 800baf0 <ull_initialise+0x10c>
 800ba90:	2000      	movs	r0, #0
 800ba92:	b003      	add	sp, #12
 800ba94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba96:	2028      	movs	r0, #40	; 0x28
 800ba98:	f008 f8fa 	bl	8013c90 <malloc>
 800ba9c:	6528      	str	r0, [r5, #80]	; 0x50
 800ba9e:	e7a8      	b.n	800b9f2 <ull_initialise+0xe>
 800baa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800baa4:	9300      	str	r3, [sp, #0]
 800baa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800baaa:	2200      	movs	r2, #0
 800baac:	4915      	ldr	r1, [pc, #84]	; (800bb04 <ull_initialise+0x120>)
 800baae:	4628      	mov	r0, r5
 800bab0:	f7ff fc3a 	bl	800b328 <dwt_modify16bitoffsetreg>
 800bab4:	8a23      	ldrh	r3, [r4, #16]
 800bab6:	f043 0310 	orr.w	r3, r3, #16
 800baba:	8223      	strh	r3, [r4, #16]
 800babc:	e7af      	b.n	800ba1e <ull_initialise+0x3a>
 800babe:	2106      	movs	r1, #6
 800bac0:	4628      	mov	r0, r5
 800bac2:	f7fe fc2f 	bl	800a324 <_dwt_otpread>
 800bac6:	6020      	str	r0, [r4, #0]
 800bac8:	e7b6      	b.n	800ba38 <ull_initialise+0x54>
 800baca:	2107      	movs	r1, #7
 800bacc:	4628      	mov	r0, r5
 800bace:	f7fe fc29 	bl	800a324 <_dwt_otpread>
 800bad2:	6060      	str	r0, [r4, #4]
 800bad4:	e7b3      	b.n	800ba3e <ull_initialise+0x5a>
 800bad6:	2108      	movs	r1, #8
 800bad8:	4628      	mov	r0, r5
 800bada:	f7fe fc23 	bl	800a324 <_dwt_otpread>
 800bade:	0c00      	lsrs	r0, r0, #16
 800bae0:	7260      	strb	r0, [r4, #9]
 800bae2:	e7af      	b.n	800ba44 <ull_initialise+0x60>
 800bae4:	2109      	movs	r1, #9
 800bae6:	4628      	mov	r0, r5
 800bae8:	f7fe fc1c 	bl	800a324 <_dwt_otpread>
 800baec:	72a0      	strb	r0, [r4, #10]
 800baee:	e7ac      	b.n	800ba4a <ull_initialise+0x66>
 800baf0:	2200      	movs	r2, #0
 800baf2:	4905      	ldr	r1, [pc, #20]	; (800bb08 <ull_initialise+0x124>)
 800baf4:	4628      	mov	r0, r5
 800baf6:	f7fe fc37 	bl	800a368 <dwt_write32bitoffsetreg>
 800bafa:	e7c9      	b.n	800ba90 <ull_initialise+0xac>
 800bafc:	10000240 	.word	0x10000240
 800bb00:	00090014 	.word	0x00090014
 800bb04:	000b0008 	.word	0x000b0008
 800bb08:	00090004 	.word	0x00090004

0800bb0c <ull_rxenable>:
 800bb0c:	b530      	push	{r4, r5, lr}
 800bb0e:	b083      	sub	sp, #12
 800bb10:	4605      	mov	r5, r0
 800bb12:	460c      	mov	r4, r1
 800bb14:	b171      	cbz	r1, 800bb34 <ull_rxenable+0x28>
 800bb16:	f021 0302 	bic.w	r3, r1, #2
 800bb1a:	3b01      	subs	r3, #1
 800bb1c:	2b0f      	cmp	r3, #15
 800bb1e:	d862      	bhi.n	800bbe6 <ull_rxenable+0xda>
 800bb20:	e8df f003 	tbb	[pc, r3]
 800bb24:	24616111 	.word	0x24616111
 800bb28:	2d616161 	.word	0x2d616161
 800bb2c:	61616161 	.word	0x61616161
 800bb30:	3a616161 	.word	0x3a616161
 800bb34:	2102      	movs	r1, #2
 800bb36:	9101      	str	r1, [sp, #4]
 800bb38:	2200      	movs	r2, #0
 800bb3a:	9200      	str	r2, [sp, #0]
 800bb3c:	4613      	mov	r3, r2
 800bb3e:	f7fd ff16 	bl	800996e <dwt_xfer3xxx>
 800bb42:	4620      	mov	r0, r4
 800bb44:	e010      	b.n	800bb68 <ull_rxenable+0x5c>
 800bb46:	2302      	movs	r3, #2
 800bb48:	9301      	str	r3, [sp, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	9200      	str	r2, [sp, #0]
 800bb4e:	4613      	mov	r3, r2
 800bb50:	2104      	movs	r1, #4
 800bb52:	f7fd ff0c 	bl	800996e <dwt_xfer3xxx>
 800bb56:	2203      	movs	r2, #3
 800bb58:	2144      	movs	r1, #68	; 0x44
 800bb5a:	4628      	mov	r0, r5
 800bb5c:	f7fd ffb7 	bl	8009ace <dwt_read8bitoffsetreg>
 800bb60:	f010 0f08 	tst.w	r0, #8
 800bb64:	d125      	bne.n	800bbb2 <ull_rxenable+0xa6>
 800bb66:	2000      	movs	r0, #0
 800bb68:	b003      	add	sp, #12
 800bb6a:	bd30      	pop	{r4, r5, pc}
 800bb6c:	2302      	movs	r3, #2
 800bb6e:	9301      	str	r3, [sp, #4]
 800bb70:	2200      	movs	r2, #0
 800bb72:	9200      	str	r2, [sp, #0]
 800bb74:	4613      	mov	r3, r2
 800bb76:	210a      	movs	r1, #10
 800bb78:	f7fd fef9 	bl	800996e <dwt_xfer3xxx>
 800bb7c:	e7eb      	b.n	800bb56 <ull_rxenable+0x4a>
 800bb7e:	2100      	movs	r1, #0
 800bb80:	f7fe fc07 	bl	800a392 <_dwt_adjust_delaytime>
 800bb84:	2302      	movs	r3, #2
 800bb86:	9301      	str	r3, [sp, #4]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	9200      	str	r2, [sp, #0]
 800bb8c:	4613      	mov	r3, r2
 800bb8e:	2108      	movs	r1, #8
 800bb90:	4628      	mov	r0, r5
 800bb92:	f7fd feec 	bl	800996e <dwt_xfer3xxx>
 800bb96:	e7de      	b.n	800bb56 <ull_rxenable+0x4a>
 800bb98:	2101      	movs	r1, #1
 800bb9a:	f7fe fbfa 	bl	800a392 <_dwt_adjust_delaytime>
 800bb9e:	2302      	movs	r3, #2
 800bba0:	9301      	str	r3, [sp, #4]
 800bba2:	2200      	movs	r2, #0
 800bba4:	9200      	str	r2, [sp, #0]
 800bba6:	4613      	mov	r3, r2
 800bba8:	2106      	movs	r1, #6
 800bbaa:	4628      	mov	r0, r5
 800bbac:	f7fd fedf 	bl	800996e <dwt_xfer3xxx>
 800bbb0:	e7d1      	b.n	800bb56 <ull_rxenable+0x4a>
 800bbb2:	2302      	movs	r3, #2
 800bbb4:	9301      	str	r3, [sp, #4]
 800bbb6:	2100      	movs	r1, #0
 800bbb8:	9100      	str	r1, [sp, #0]
 800bbba:	460b      	mov	r3, r1
 800bbbc:	460a      	mov	r2, r1
 800bbbe:	4628      	mov	r0, r5
 800bbc0:	f7fd fed5 	bl	800996e <dwt_xfer3xxx>
 800bbc4:	f014 0f02 	tst.w	r4, #2
 800bbc8:	d002      	beq.n	800bbd0 <ull_rxenable+0xc4>
 800bbca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bbce:	e7cb      	b.n	800bb68 <ull_rxenable+0x5c>
 800bbd0:	2102      	movs	r1, #2
 800bbd2:	9101      	str	r1, [sp, #4]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	9200      	str	r2, [sp, #0]
 800bbd8:	4613      	mov	r3, r2
 800bbda:	4628      	mov	r0, r5
 800bbdc:	f7fd fec7 	bl	800996e <dwt_xfer3xxx>
 800bbe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bbe4:	e7c0      	b.n	800bb68 <ull_rxenable+0x5c>
 800bbe6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bbea:	e7bd      	b.n	800bb68 <ull_rxenable+0x5c>

0800bbec <ull_softreset_no_sema_fcmd>:
 800bbec:	b570      	push	{r4, r5, r6, lr}
 800bbee:	b082      	sub	sp, #8
 800bbf0:	4606      	mov	r6, r0
 800bbf2:	2502      	movs	r5, #2
 800bbf4:	9501      	str	r5, [sp, #4]
 800bbf6:	2400      	movs	r4, #0
 800bbf8:	9400      	str	r4, [sp, #0]
 800bbfa:	4623      	mov	r3, r4
 800bbfc:	4622      	mov	r2, r4
 800bbfe:	2119      	movs	r1, #25
 800bc00:	f7fd feb5 	bl	800996e <dwt_xfer3xxx>
 800bc04:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800bc06:	739c      	strb	r4, [r3, #14]
 800bc08:	821d      	strh	r5, [r3, #16]
 800bc0a:	751c      	strb	r4, [r3, #20]
 800bc0c:	755c      	strb	r4, [r3, #21]
 800bc0e:	73dc      	strb	r4, [r3, #15]
 800bc10:	b002      	add	sp, #8
 800bc12:	bd70      	pop	{r4, r5, r6, pc}

0800bc14 <ull_softreset_fcmd>:
 800bc14:	b570      	push	{r4, r5, r6, lr}
 800bc16:	b082      	sub	sp, #8
 800bc18:	4606      	mov	r6, r0
 800bc1a:	2502      	movs	r5, #2
 800bc1c:	9501      	str	r5, [sp, #4]
 800bc1e:	2400      	movs	r4, #0
 800bc20:	9400      	str	r4, [sp, #0]
 800bc22:	4623      	mov	r3, r4
 800bc24:	4622      	mov	r2, r4
 800bc26:	2118      	movs	r1, #24
 800bc28:	f7fd fea1 	bl	800996e <dwt_xfer3xxx>
 800bc2c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800bc2e:	739c      	strb	r4, [r3, #14]
 800bc30:	821d      	strh	r5, [r3, #16]
 800bc32:	751c      	strb	r4, [r3, #20]
 800bc34:	755c      	strb	r4, [r3, #21]
 800bc36:	73dc      	strb	r4, [r3, #15]
 800bc38:	b002      	add	sp, #8
 800bc3a:	bd70      	pop	{r4, r5, r6, pc}

0800bc3c <dwt_ioctl>:
 800bc3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc40:	b091      	sub	sp, #68	; 0x44
 800bc42:	4606      	mov	r6, r0
 800bc44:	4615      	mov	r5, r2
 800bc46:	461c      	mov	r4, r3
 800bc48:	299c      	cmp	r1, #156	; 0x9c
 800bc4a:	f200 809f 	bhi.w	800bd8c <dwt_ioctl+0x150>
 800bc4e:	e8df f011 	tbh	[pc, r1, lsl #1]
 800bc52:	0a54      	.short	0x0a54
 800bc54:	00a30a5f 	.word	0x00a30a5f
 800bc58:	00c000a7 	.word	0x00c000a7
 800bc5c:	0192014c 	.word	0x0192014c
 800bc60:	0156016f 	.word	0x0156016f
 800bc64:	01ad01a2 	.word	0x01ad01a2
 800bc68:	01bd01b5 	.word	0x01bd01b5
 800bc6c:	01cd01c5 	.word	0x01cd01c5
 800bc70:	01d901d5 	.word	0x01d901d5
 800bc74:	027201e1 	.word	0x027201e1
 800bc78:	02850280 	.word	0x02850280
 800bc7c:	0294028f 	.word	0x0294028f
 800bc80:	02a20299 	.word	0x02a20299
 800bc84:	02dd02a7 	.word	0x02dd02a7
 800bc88:	030502fa 	.word	0x030502fa
 800bc8c:	031a0310 	.word	0x031a0310
 800bc90:	03480352 	.word	0x03480352
 800bc94:	0324033e 	.word	0x0324033e
 800bc98:	03810331 	.word	0x03810331
 800bc9c:	022f01fc 	.word	0x022f01fc
 800bca0:	0245023d 	.word	0x0245023d
 800bca4:	097d0259 	.word	0x097d0259
 800bca8:	03610982 	.word	0x03610982
 800bcac:	03a3039f 	.word	0x03a3039f
 800bcb0:	03b103ac 	.word	0x03b103ac
 800bcb4:	03e503db 	.word	0x03e503db
 800bcb8:	041703ed 	.word	0x041703ed
 800bcbc:	042e0423 	.word	0x042e0423
 800bcc0:	04390357 	.word	0x04390357
 800bcc4:	04540442 	.word	0x04540442
 800bcc8:	047e046d 	.word	0x047e046d
 800bccc:	04ca04c0 	.word	0x04ca04c0
 800bcd0:	04ff04f0 	.word	0x04ff04f0
 800bcd4:	0508051a 	.word	0x0508051a
 800bcd8:	056a0524 	.word	0x056a0524
 800bcdc:	05a20582 	.word	0x05a20582
 800bce0:	05e505d1 	.word	0x05e505d1
 800bce4:	060a05ee 	.word	0x060a05ee
 800bce8:	074305f7 	.word	0x074305f7
 800bcec:	07d30785 	.word	0x07d30785
 800bcf0:	07e407d9 	.word	0x07e407d9
 800bcf4:	081d07fd 	.word	0x081d07fd
 800bcf8:	08310827 	.word	0x08310827
 800bcfc:	0868085f 	.word	0x0868085f
 800bd00:	0877086e 	.word	0x0877086e
 800bd04:	08910884 	.word	0x08910884
 800bd08:	08a4089b 	.word	0x08a4089b
 800bd0c:	08b808ad 	.word	0x08b808ad
 800bd10:	08c908c3 	.word	0x08c908c3
 800bd14:	08f708ec 	.word	0x08f708ec
 800bd18:	090d0902 	.word	0x090d0902
 800bd1c:	0959094e 	.word	0x0959094e
 800bd20:	09880972 	.word	0x09880972
 800bd24:	0a0709fd 	.word	0x0a0709fd
 800bd28:	0a670a12 	.word	0x0a670a12
 800bd2c:	0a490a1c 	.word	0x0a490a1c
 800bd30:	09c60777 	.word	0x09c60777
 800bd34:	0ad509e7 	.word	0x0ad509e7
 800bd38:	0a740aca 	.word	0x0a740aca
 800bd3c:	0a8a0a7f 	.word	0x0a8a0a7f
 800bd40:	0aa00a95 	.word	0x0aa00a95
 800bd44:	0ab60aab 	.word	0x0ab60aab
 800bd48:	0cb50abf 	.word	0x0cb50abf
 800bd4c:	0d2a0cef 	.word	0x0d2a0cef
 800bd50:	0df90d4d 	.word	0x0df90d4d
 800bd54:	0afd0e0e 	.word	0x0afd0e0e
 800bd58:	0bf40bc1 	.word	0x0bf40bc1
 800bd5c:	0c040bff 	.word	0x0c040bff
 800bd60:	0c140c09 	.word	0x0c140c09
 800bd64:	0c320c27 	.word	0x0c320c27
 800bd68:	0c5c0c47 	.word	0x0c5c0c47
 800bd6c:	009d0c98 	.word	0x009d0c98
 800bd70:	009d009d 	.word	0x009d009d
 800bd74:	009d009d 	.word	0x009d009d
 800bd78:	009d009d 	.word	0x009d009d
 800bd7c:	0d64009d 	.word	0x0d64009d
 800bd80:	0ec20d75 	.word	0x0ec20d75
 800bd84:	0db40dbf 	.word	0x0db40dbf
 800bd88:	0dca0dd3 	.word	0x0dca0dd3
 800bd8c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800bd90:	4628      	mov	r0, r5
 800bd92:	b011      	add	sp, #68	; 0x44
 800bd94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd98:	6843      	ldr	r3, [r0, #4]
 800bd9a:	4798      	blx	r3
 800bd9c:	2500      	movs	r5, #0
 800bd9e:	e7f7      	b.n	800bd90 <dwt_ioctl+0x154>
 800bda0:	2202      	movs	r2, #2
 800bda2:	49b4      	ldr	r1, [pc, #720]	; (800c074 <dwt_ioctl+0x438>)
 800bda4:	f7fd fe93 	bl	8009ace <dwt_read8bitoffsetreg>
 800bda8:	2803      	cmp	r0, #3
 800bdaa:	d801      	bhi.n	800bdb0 <dwt_ioctl+0x174>
 800bdac:	2500      	movs	r5, #0
 800bdae:	e7ef      	b.n	800bd90 <dwt_ioctl+0x154>
 800bdb0:	f7f5 fba6 	bl	8001500 <decamutexon>
 800bdb4:	4604      	mov	r4, r0
 800bdb6:	2302      	movs	r3, #2
 800bdb8:	9301      	str	r3, [sp, #4]
 800bdba:	2500      	movs	r5, #0
 800bdbc:	9500      	str	r5, [sp, #0]
 800bdbe:	462b      	mov	r3, r5
 800bdc0:	462a      	mov	r2, r5
 800bdc2:	4629      	mov	r1, r5
 800bdc4:	4630      	mov	r0, r6
 800bdc6:	f7fd fdd2 	bl	800996e <dwt_xfer3xxx>
 800bdca:	4620      	mov	r0, r4
 800bdcc:	f7f5 fba9 	bl	8001522 <decamutexoff>
 800bdd0:	e7de      	b.n	800bd90 <dwt_ioctl+0x154>
 800bdd2:	2c00      	cmp	r4, #0
 800bdd4:	f001 8602 	beq.w	800d9dc <dwt_ioctl+0x1da0>
 800bdd8:	7824      	ldrb	r4, [r4, #0]
 800bdda:	f014 0f1d 	tst.w	r4, #29
 800bdde:	d061      	beq.n	800bea4 <dwt_ioctl+0x268>
 800bde0:	f014 0f01 	tst.w	r4, #1
 800bde4:	d023      	beq.n	800be2e <dwt_ioctl+0x1f2>
 800bde6:	f014 0f02 	tst.w	r4, #2
 800bdea:	f04f 0302 	mov.w	r3, #2
 800bdee:	9301      	str	r3, [sp, #4]
 800bdf0:	f04f 0200 	mov.w	r2, #0
 800bdf4:	9200      	str	r2, [sp, #0]
 800bdf6:	4613      	mov	r3, r2
 800bdf8:	bf14      	ite	ne
 800bdfa:	210d      	movne	r1, #13
 800bdfc:	2103      	moveq	r1, #3
 800bdfe:	f7fd fdb6 	bl	800996e <dwt_xfer3xxx>
 800be02:	2203      	movs	r2, #3
 800be04:	2144      	movs	r1, #68	; 0x44
 800be06:	4630      	mov	r0, r6
 800be08:	f7fd fe61 	bl	8009ace <dwt_read8bitoffsetreg>
 800be0c:	f010 0f08 	tst.w	r0, #8
 800be10:	bf08      	it	eq
 800be12:	2500      	moveq	r5, #0
 800be14:	d0bc      	beq.n	800bd90 <dwt_ioctl+0x154>
 800be16:	2302      	movs	r3, #2
 800be18:	9301      	str	r3, [sp, #4]
 800be1a:	2100      	movs	r1, #0
 800be1c:	9100      	str	r1, [sp, #0]
 800be1e:	460b      	mov	r3, r1
 800be20:	460a      	mov	r2, r1
 800be22:	4630      	mov	r0, r6
 800be24:	f7fd fda3 	bl	800996e <dwt_xfer3xxx>
 800be28:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800be2c:	e7b0      	b.n	800bd90 <dwt_ioctl+0x154>
 800be2e:	f014 0f08 	tst.w	r4, #8
 800be32:	d111      	bne.n	800be58 <dwt_ioctl+0x21c>
 800be34:	f014 0f10 	tst.w	r4, #16
 800be38:	d121      	bne.n	800be7e <dwt_ioctl+0x242>
 800be3a:	f014 0f02 	tst.w	r4, #2
 800be3e:	f04f 0302 	mov.w	r3, #2
 800be42:	9301      	str	r3, [sp, #4]
 800be44:	f04f 0200 	mov.w	r2, #0
 800be48:	9200      	str	r2, [sp, #0]
 800be4a:	4613      	mov	r3, r2
 800be4c:	bf14      	ite	ne
 800be4e:	2110      	movne	r1, #16
 800be50:	2109      	moveq	r1, #9
 800be52:	f7fd fd8c 	bl	800996e <dwt_xfer3xxx>
 800be56:	e7d4      	b.n	800be02 <dwt_ioctl+0x1c6>
 800be58:	2100      	movs	r1, #0
 800be5a:	f7fe fa9a 	bl	800a392 <_dwt_adjust_delaytime>
 800be5e:	f014 0f02 	tst.w	r4, #2
 800be62:	f04f 0302 	mov.w	r3, #2
 800be66:	9301      	str	r3, [sp, #4]
 800be68:	f04f 0200 	mov.w	r2, #0
 800be6c:	9200      	str	r2, [sp, #0]
 800be6e:	4613      	mov	r3, r2
 800be70:	bf14      	ite	ne
 800be72:	210f      	movne	r1, #15
 800be74:	2107      	moveq	r1, #7
 800be76:	4630      	mov	r0, r6
 800be78:	f7fd fd79 	bl	800996e <dwt_xfer3xxx>
 800be7c:	e7c1      	b.n	800be02 <dwt_ioctl+0x1c6>
 800be7e:	2101      	movs	r1, #1
 800be80:	f7fe fa87 	bl	800a392 <_dwt_adjust_delaytime>
 800be84:	f014 0f02 	tst.w	r4, #2
 800be88:	f04f 0302 	mov.w	r3, #2
 800be8c:	9301      	str	r3, [sp, #4]
 800be8e:	f04f 0200 	mov.w	r2, #0
 800be92:	9200      	str	r2, [sp, #0]
 800be94:	4613      	mov	r3, r2
 800be96:	bf14      	ite	ne
 800be98:	210e      	movne	r1, #14
 800be9a:	2105      	moveq	r1, #5
 800be9c:	4630      	mov	r0, r6
 800be9e:	f7fd fd66 	bl	800996e <dwt_xfer3xxx>
 800bea2:	e7ae      	b.n	800be02 <dwt_ioctl+0x1c6>
 800bea4:	f014 0f20 	tst.w	r4, #32
 800bea8:	d00f      	beq.n	800beca <dwt_ioctl+0x28e>
 800beaa:	f014 0f02 	tst.w	r4, #2
 800beae:	f04f 0302 	mov.w	r3, #2
 800beb2:	9301      	str	r3, [sp, #4]
 800beb4:	f04f 0500 	mov.w	r5, #0
 800beb8:	9500      	str	r5, [sp, #0]
 800beba:	462b      	mov	r3, r5
 800bebc:	462a      	mov	r2, r5
 800bebe:	bf14      	ite	ne
 800bec0:	2111      	movne	r1, #17
 800bec2:	210b      	moveq	r1, #11
 800bec4:	f7fd fd53 	bl	800996e <dwt_xfer3xxx>
 800bec8:	e762      	b.n	800bd90 <dwt_ioctl+0x154>
 800beca:	f014 0f02 	tst.w	r4, #2
 800bece:	f04f 0302 	mov.w	r3, #2
 800bed2:	9301      	str	r3, [sp, #4]
 800bed4:	f04f 0500 	mov.w	r5, #0
 800bed8:	9500      	str	r5, [sp, #0]
 800beda:	462b      	mov	r3, r5
 800bedc:	462a      	mov	r2, r5
 800bede:	bf14      	ite	ne
 800bee0:	210c      	movne	r1, #12
 800bee2:	2101      	moveq	r1, #1
 800bee4:	f7fd fd43 	bl	800996e <dwt_xfer3xxx>
 800bee8:	e752      	b.n	800bd90 <dwt_ioctl+0x154>
 800beea:	2c00      	cmp	r4, #0
 800beec:	f001 8579 	beq.w	800d9e2 <dwt_ioctl+0x1da6>
 800bef0:	6823      	ldr	r3, [r4, #0]
 800bef2:	2200      	movs	r2, #0
 800bef4:	2128      	movs	r1, #40	; 0x28
 800bef6:	f7fe fa37 	bl	800a368 <dwt_write32bitoffsetreg>
 800befa:	2500      	movs	r5, #0
 800befc:	e748      	b.n	800bd90 <dwt_ioctl+0x154>
 800befe:	6823      	ldr	r3, [r4, #0]
 800bf00:	2200      	movs	r2, #0
 800bf02:	495d      	ldr	r1, [pc, #372]	; (800c078 <dwt_ioctl+0x43c>)
 800bf04:	f7fe fa30 	bl	800a368 <dwt_write32bitoffsetreg>
 800bf08:	6863      	ldr	r3, [r4, #4]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	495b      	ldr	r1, [pc, #364]	; (800c07c <dwt_ioctl+0x440>)
 800bf0e:	4630      	mov	r0, r6
 800bf10:	f7fe fa2a 	bl	800a368 <dwt_write32bitoffsetreg>
 800bf14:	68a3      	ldr	r3, [r4, #8]
 800bf16:	2200      	movs	r2, #0
 800bf18:	4959      	ldr	r1, [pc, #356]	; (800c080 <dwt_ioctl+0x444>)
 800bf1a:	4630      	mov	r0, r6
 800bf1c:	f7fe fa24 	bl	800a368 <dwt_write32bitoffsetreg>
 800bf20:	68e3      	ldr	r3, [r4, #12]
 800bf22:	2200      	movs	r2, #0
 800bf24:	4957      	ldr	r1, [pc, #348]	; (800c084 <dwt_ioctl+0x448>)
 800bf26:	4630      	mov	r0, r6
 800bf28:	f7fe fa1e 	bl	800a368 <dwt_write32bitoffsetreg>
 800bf2c:	2500      	movs	r5, #0
 800bf2e:	e72f      	b.n	800bd90 <dwt_ioctl+0x154>
 800bf30:	2c00      	cmp	r4, #0
 800bf32:	f001 8559 	beq.w	800d9e8 <dwt_ioctl+0x1dac>
 800bf36:	8823      	ldrh	r3, [r4, #0]
 800bf38:	6865      	ldr	r5, [r4, #4]
 800bf3a:	2d03      	cmp	r5, #3
 800bf3c:	f201 8557 	bhi.w	800d9ee <dwt_ioctl+0x1db2>
 800bf40:	e8df f005 	tbb	[pc, r5]
 800bf44:	130d0702 	.word	0x130d0702
 800bf48:	2200      	movs	r2, #0
 800bf4a:	494f      	ldr	r1, [pc, #316]	; (800c088 <dwt_ioctl+0x44c>)
 800bf4c:	f7fe f9af 	bl	800a2ae <dwt_write16bitoffsetreg>
 800bf50:	e71e      	b.n	800bd90 <dwt_ioctl+0x154>
 800bf52:	2202      	movs	r2, #2
 800bf54:	494c      	ldr	r1, [pc, #304]	; (800c088 <dwt_ioctl+0x44c>)
 800bf56:	f7fe f9aa 	bl	800a2ae <dwt_write16bitoffsetreg>
 800bf5a:	2500      	movs	r5, #0
 800bf5c:	e718      	b.n	800bd90 <dwt_ioctl+0x154>
 800bf5e:	2200      	movs	r2, #0
 800bf60:	494a      	ldr	r1, [pc, #296]	; (800c08c <dwt_ioctl+0x450>)
 800bf62:	f7fe f9a4 	bl	800a2ae <dwt_write16bitoffsetreg>
 800bf66:	2500      	movs	r5, #0
 800bf68:	e712      	b.n	800bd90 <dwt_ioctl+0x154>
 800bf6a:	2202      	movs	r2, #2
 800bf6c:	4947      	ldr	r1, [pc, #284]	; (800c08c <dwt_ioctl+0x450>)
 800bf6e:	f7fe f99e 	bl	800a2ae <dwt_write16bitoffsetreg>
 800bf72:	2500      	movs	r5, #0
 800bf74:	e70c      	b.n	800bd90 <dwt_ioctl+0x154>
 800bf76:	2c00      	cmp	r4, #0
 800bf78:	f001 853c 	beq.w	800d9f4 <dwt_ioctl+0x1db8>
 800bf7c:	7823      	ldrb	r3, [r4, #0]
 800bf7e:	005b      	lsls	r3, r3, #1
 800bf80:	f003 0306 	and.w	r3, r3, #6
 800bf84:	9300      	str	r3, [sp, #0]
 800bf86:	f06f 0306 	mvn.w	r3, #6
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	4940      	ldr	r1, [pc, #256]	; (800c090 <dwt_ioctl+0x454>)
 800bf8e:	f7fe fe3d 	bl	800ac0c <dwt_modify32bitoffsetreg>
 800bf92:	2500      	movs	r5, #0
 800bf94:	e6fc      	b.n	800bd90 <dwt_ioctl+0x154>
 800bf96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bf9a:	9300      	str	r3, [sp, #0]
 800bf9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	493c      	ldr	r1, [pc, #240]	; (800c094 <dwt_ioctl+0x458>)
 800bfa4:	f7fe fe32 	bl	800ac0c <dwt_modify32bitoffsetreg>
 800bfa8:	2500      	movs	r5, #0
 800bfaa:	e6f1      	b.n	800bd90 <dwt_ioctl+0x154>
 800bfac:	2c00      	cmp	r4, #0
 800bfae:	f001 8524 	beq.w	800d9fa <dwt_ioctl+0x1dbe>
 800bfb2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800bfb4:	7b1b      	ldrb	r3, [r3, #12]
 800bfb6:	7023      	strb	r3, [r4, #0]
 800bfb8:	2500      	movs	r5, #0
 800bfba:	e6e9      	b.n	800bd90 <dwt_ioctl+0x154>
 800bfbc:	2c00      	cmp	r4, #0
 800bfbe:	f001 851f 	beq.w	800da00 <dwt_ioctl+0x1dc4>
 800bfc2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800bfc4:	7a5b      	ldrb	r3, [r3, #9]
 800bfc6:	7023      	strb	r3, [r4, #0]
 800bfc8:	2500      	movs	r5, #0
 800bfca:	e6e1      	b.n	800bd90 <dwt_ioctl+0x154>
 800bfcc:	2c00      	cmp	r4, #0
 800bfce:	f001 851a 	beq.w	800da06 <dwt_ioctl+0x1dca>
 800bfd2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800bfd4:	7a9b      	ldrb	r3, [r3, #10]
 800bfd6:	7023      	strb	r3, [r4, #0]
 800bfd8:	2500      	movs	r5, #0
 800bfda:	e6d9      	b.n	800bd90 <dwt_ioctl+0x154>
 800bfdc:	2c00      	cmp	r4, #0
 800bfde:	f001 8515 	beq.w	800da0c <dwt_ioctl+0x1dd0>
 800bfe2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	6023      	str	r3, [r4, #0]
 800bfe8:	2500      	movs	r5, #0
 800bfea:	e6d1      	b.n	800bd90 <dwt_ioctl+0x154>
 800bfec:	2c00      	cmp	r4, #0
 800bfee:	f001 8510 	beq.w	800da12 <dwt_ioctl+0x1dd6>
 800bff2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	6023      	str	r3, [r4, #0]
 800bff8:	2500      	movs	r5, #0
 800bffa:	e6c9      	b.n	800bd90 <dwt_ioctl+0x154>
 800bffc:	f7fe fc72 	bl	800a8e4 <ull_signal_rx_buff_free>
 800c000:	2500      	movs	r5, #0
 800c002:	e6c5      	b.n	800bd90 <dwt_ioctl+0x154>
 800c004:	2c00      	cmp	r4, #0
 800c006:	f001 8507 	beq.w	800da18 <dwt_ioctl+0x1ddc>
 800c00a:	6821      	ldr	r1, [r4, #0]
 800c00c:	f7fe f9e7 	bl	800a3de <ull_setrxaftertxdelay>
 800c010:	2500      	movs	r5, #0
 800c012:	e6bd      	b.n	800bd90 <dwt_ioctl+0x154>
 800c014:	2c00      	cmp	r4, #0
 800c016:	f001 8502 	beq.w	800da1e <dwt_ioctl+0x1de2>
 800c01a:	7825      	ldrb	r5, [r4, #0]
 800c01c:	b15d      	cbz	r5, 800c036 <dwt_ioctl+0x3fa>
 800c01e:	6864      	ldr	r4, [r4, #4]
 800c020:	2340      	movs	r3, #64	; 0x40
 800c022:	9300      	str	r3, [sp, #0]
 800c024:	23ff      	movs	r3, #255	; 0xff
 800c026:	2200      	movs	r2, #0
 800c028:	2110      	movs	r1, #16
 800c02a:	f7fe ff61 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800c02e:	2d02      	cmp	r5, #2
 800c030:	d107      	bne.n	800c042 <dwt_ioctl+0x406>
 800c032:	60f4      	str	r4, [r6, #12]
 800c034:	e005      	b.n	800c042 <dwt_ioctl+0x406>
 800c036:	2200      	movs	r2, #0
 800c038:	9200      	str	r2, [sp, #0]
 800c03a:	23bf      	movs	r3, #191	; 0xbf
 800c03c:	2110      	movs	r1, #16
 800c03e:	f7fe ff57 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800c042:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800c044:	751d      	strb	r5, [r3, #20]
 800c046:	2500      	movs	r5, #0
 800c048:	e6a2      	b.n	800bd90 <dwt_ioctl+0x154>
 800c04a:	2c00      	cmp	r4, #0
 800c04c:	f001 84ea 	beq.w	800da24 <dwt_ioctl+0x1de8>
 800c050:	6865      	ldr	r5, [r4, #4]
 800c052:	7823      	ldrb	r3, [r4, #0]
 800c054:	2203      	movs	r2, #3
 800c056:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800c05a:	f7fe fb13 	bl	800a684 <dwt_write8bitoffsetreg>
 800c05e:	b9dd      	cbnz	r5, 800c098 <dwt_ioctl+0x45c>
 800c060:	2200      	movs	r2, #0
 800c062:	9200      	str	r2, [sp, #0]
 800c064:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800c068:	2110      	movs	r1, #16
 800c06a:	4630      	mov	r0, r6
 800c06c:	f7ff f95c 	bl	800b328 <dwt_modify16bitoffsetreg>
 800c070:	e68e      	b.n	800bd90 <dwt_ioctl+0x154>
 800c072:	bf00      	nop
 800c074:	000f0030 	.word	0x000f0030
 800c078:	00010054 	.word	0x00010054
 800c07c:	00010058 	.word	0x00010058
 800c080:	0001005c 	.word	0x0001005c
 800c084:	00010060 	.word	0x00010060
 800c088:	0001000c 	.word	0x0001000c
 800c08c:	00010010 	.word	0x00010010
 800c090:	00010008 	.word	0x00010008
 800c094:	00110004 	.word	0x00110004
 800c098:	f44f 2381 	mov.w	r3, #264192	; 0x40800
 800c09c:	9300      	str	r3, [sp, #0]
 800c09e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	2110      	movs	r1, #16
 800c0a6:	4630      	mov	r0, r6
 800c0a8:	f7fe fdb0 	bl	800ac0c <dwt_modify32bitoffsetreg>
 800c0ac:	2500      	movs	r5, #0
 800c0ae:	e66f      	b.n	800bd90 <dwt_ioctl+0x154>
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	4611      	mov	r1, r2
 800c0b4:	f7fd fce3 	bl	8009a7e <dwt_read32bitoffsetreg>
 800c0b8:	68b2      	ldr	r2, [r6, #8]
 800c0ba:	6813      	ldr	r3, [r2, #0]
 800c0bc:	4043      	eors	r3, r0
 800c0be:	6852      	ldr	r2, [r2, #4]
 800c0c0:	4213      	tst	r3, r2
 800c0c2:	bf14      	ite	ne
 800c0c4:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800c0c8:	2500      	moveq	r5, #0
 800c0ca:	e661      	b.n	800bd90 <dwt_ioctl+0x154>
 800c0cc:	2c00      	cmp	r4, #0
 800c0ce:	f001 84ac 	beq.w	800da2a <dwt_ioctl+0x1dee>
 800c0d2:	7821      	ldrb	r1, [r4, #0]
 800c0d4:	f7fe ff20 	bl	800af18 <ull_configciadiag>
 800c0d8:	2500      	movs	r5, #0
 800c0da:	e659      	b.n	800bd90 <dwt_ioctl+0x154>
 800c0dc:	b93a      	cbnz	r2, 800c0ee <dwt_ioctl+0x4b2>
 800c0de:	2200      	movs	r2, #0
 800c0e0:	9200      	str	r2, [sp, #0]
 800c0e2:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800c0e6:	49b8      	ldr	r1, [pc, #736]	; (800c3c8 <dwt_ioctl+0x78c>)
 800c0e8:	f7ff f91e 	bl	800b328 <dwt_modify16bitoffsetreg>
 800c0ec:	e650      	b.n	800bd90 <dwt_ioctl+0x154>
 800c0ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c0f2:	9300      	str	r3, [sp, #0]
 800c0f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	49b3      	ldr	r1, [pc, #716]	; (800c3c8 <dwt_ioctl+0x78c>)
 800c0fc:	f7ff f914 	bl	800b328 <dwt_modify16bitoffsetreg>
 800c100:	2500      	movs	r5, #0
 800c102:	e645      	b.n	800bd90 <dwt_ioctl+0x154>
 800c104:	f002 0201 	and.w	r2, r2, #1
 800c108:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c10c:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 800c110:	2a00      	cmp	r2, #0
 800c112:	bf08      	it	eq
 800c114:	460b      	moveq	r3, r1
 800c116:	02d2      	lsls	r2, r2, #11
 800c118:	f015 0f02 	tst.w	r5, #2
 800c11c:	bf12      	itee	ne
 800c11e:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 800c122:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c126:	b29b      	uxtheq	r3, r3
 800c128:	9200      	str	r2, [sp, #0]
 800c12a:	2200      	movs	r2, #0
 800c12c:	49a6      	ldr	r1, [pc, #664]	; (800c3c8 <dwt_ioctl+0x78c>)
 800c12e:	f7ff f8fb 	bl	800b328 <dwt_modify16bitoffsetreg>
 800c132:	2500      	movs	r5, #0
 800c134:	e62c      	b.n	800bd90 <dwt_ioctl+0x154>
 800c136:	b92a      	cbnz	r2, 800c144 <dwt_ioctl+0x508>
 800c138:	4ba4      	ldr	r3, [pc, #656]	; (800c3cc <dwt_ioctl+0x790>)
 800c13a:	2202      	movs	r2, #2
 800c13c:	49a4      	ldr	r1, [pc, #656]	; (800c3d0 <dwt_ioctl+0x794>)
 800c13e:	f7fe f913 	bl	800a368 <dwt_write32bitoffsetreg>
 800c142:	e625      	b.n	800bd90 <dwt_ioctl+0x154>
 800c144:	4ba3      	ldr	r3, [pc, #652]	; (800c3d4 <dwt_ioctl+0x798>)
 800c146:	2202      	movs	r2, #2
 800c148:	49a1      	ldr	r1, [pc, #644]	; (800c3d0 <dwt_ioctl+0x794>)
 800c14a:	f7fe f90d 	bl	800a368 <dwt_write32bitoffsetreg>
 800c14e:	2500      	movs	r5, #0
 800c150:	e61e      	b.n	800bd90 <dwt_ioctl+0x154>
 800c152:	4611      	mov	r1, r2
 800c154:	f7fe f957 	bl	800a406 <ull_setlnapamode>
 800c158:	2500      	movs	r5, #0
 800c15a:	e619      	b.n	800bd90 <dwt_ioctl+0x154>
 800c15c:	2c00      	cmp	r4, #0
 800c15e:	f001 8467 	beq.w	800da30 <dwt_ioctl+0x1df4>
 800c162:	2200      	movs	r2, #0
 800c164:	499c      	ldr	r1, [pc, #624]	; (800c3d8 <dwt_ioctl+0x79c>)
 800c166:	f7fd fcb2 	bl	8009ace <dwt_read8bitoffsetreg>
 800c16a:	7020      	strb	r0, [r4, #0]
 800c16c:	2500      	movs	r5, #0
 800c16e:	e60f      	b.n	800bd90 <dwt_ioctl+0x154>
 800c170:	4621      	mov	r1, r4
 800c172:	f7fe f969 	bl	800a448 <ull_configurestskey>
 800c176:	2500      	movs	r5, #0
 800c178:	e60a      	b.n	800bd90 <dwt_ioctl+0x154>
 800c17a:	4621      	mov	r1, r4
 800c17c:	f7fe f988 	bl	800a490 <ull_configurestsiv>
 800c180:	2500      	movs	r5, #0
 800c182:	e605      	b.n	800bd90 <dwt_ioctl+0x154>
 800c184:	2301      	movs	r3, #1
 800c186:	9300      	str	r3, [sp, #0]
 800c188:	23ff      	movs	r3, #255	; 0xff
 800c18a:	2200      	movs	r2, #0
 800c18c:	4993      	ldr	r1, [pc, #588]	; (800c3dc <dwt_ioctl+0x7a0>)
 800c18e:	f7fe feaf 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800c192:	2500      	movs	r5, #0
 800c194:	e5fc      	b.n	800bd90 <dwt_ioctl+0x154>
 800c196:	4611      	mov	r1, r2
 800c198:	f7fe f99e 	bl	800a4d8 <ull_configmrxlut>
 800c19c:	2500      	movs	r5, #0
 800c19e:	e5f7      	b.n	800bd90 <dwt_ioctl+0x154>
 800c1a0:	2318      	movs	r3, #24
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	498e      	ldr	r1, [pc, #568]	; (800c3e0 <dwt_ioctl+0x7a4>)
 800c1a6:	f7fe f8df 	bl	800a368 <dwt_write32bitoffsetreg>
 800c1aa:	23e8      	movs	r3, #232	; 0xe8
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	498d      	ldr	r1, [pc, #564]	; (800c3e4 <dwt_ioctl+0x7a8>)
 800c1b0:	4630      	mov	r0, r6
 800c1b2:	f7fe f8d9 	bl	800a368 <dwt_write32bitoffsetreg>
 800c1b6:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800c1b8:	7d9b      	ldrb	r3, [r3, #22]
 800c1ba:	085b      	lsrs	r3, r3, #1
 800c1bc:	d01a      	beq.n	800c1f4 <dwt_ioctl+0x5b8>
 800c1be:	2200      	movs	r2, #0
 800c1c0:	4989      	ldr	r1, [pc, #548]	; (800c3e8 <dwt_ioctl+0x7ac>)
 800c1c2:	4630      	mov	r0, r6
 800c1c4:	f7fd fc71 	bl	8009aaa <dwt_read16bitoffsetreg>
 800c1c8:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 800c1cc:	3b09      	subs	r3, #9
 800c1ce:	2b0f      	cmp	r3, #15
 800c1d0:	f201 8431 	bhi.w	800da36 <dwt_ioctl+0x1dfa>
 800c1d4:	f000 0001 	and.w	r0, r0, #1
 800c1d8:	2800      	cmp	r0, #0
 800c1da:	bf0c      	ite	eq
 800c1dc:	2105      	moveq	r1, #5
 800c1de:	2109      	movne	r1, #9
 800c1e0:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800c1e2:	7a1b      	ldrb	r3, [r3, #8]
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	f001 8429 	beq.w	800da3c <dwt_ioctl+0x1e00>
 800c1ea:	4630      	mov	r0, r6
 800c1ec:	f7fe f974 	bl	800a4d8 <ull_configmrxlut>
 800c1f0:	2500      	movs	r5, #0
 800c1f2:	e5cd      	b.n	800bd90 <dwt_ioctl+0x154>
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	497c      	ldr	r1, [pc, #496]	; (800c3ec <dwt_ioctl+0x7b0>)
 800c1fa:	4630      	mov	r0, r6
 800c1fc:	f7fe fa42 	bl	800a684 <dwt_write8bitoffsetreg>
 800c200:	6d32      	ldr	r2, [r6, #80]	; 0x50
 800c202:	7d93      	ldrb	r3, [r2, #22]
 800c204:	f043 0302 	orr.w	r3, r3, #2
 800c208:	7593      	strb	r3, [r2, #22]
 800c20a:	e7d8      	b.n	800c1be <dwt_ioctl+0x582>
 800c20c:	2c00      	cmp	r4, #0
 800c20e:	f001 8418 	beq.w	800da42 <dwt_ioctl+0x1e06>
 800c212:	7824      	ldrb	r4, [r4, #0]
 800c214:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c216:	755c      	strb	r4, [r3, #21]
 800c218:	0323      	lsls	r3, r4, #12
 800c21a:	f403 4330 	and.w	r3, r3, #45056	; 0xb000
 800c21e:	9300      	str	r3, [sp, #0]
 800c220:	f644 73ff 	movw	r3, #20479	; 0x4fff
 800c224:	2200      	movs	r2, #0
 800c226:	2110      	movs	r1, #16
 800c228:	f7ff f87e 	bl	800b328 <dwt_modify16bitoffsetreg>
 800c22c:	f004 0403 	and.w	r4, r4, #3
 800c230:	2c03      	cmp	r4, #3
 800c232:	bf0c      	ite	eq
 800c234:	4b6e      	ldreq	r3, [pc, #440]	; (800c3f0 <dwt_ioctl+0x7b4>)
 800c236:	4b6f      	ldrne	r3, [pc, #444]	; (800c3f4 <dwt_ioctl+0x7b8>)
 800c238:	2200      	movs	r2, #0
 800c23a:	496f      	ldr	r1, [pc, #444]	; (800c3f8 <dwt_ioctl+0x7bc>)
 800c23c:	4630      	mov	r0, r6
 800c23e:	f7fe f893 	bl	800a368 <dwt_write32bitoffsetreg>
 800c242:	2500      	movs	r5, #0
 800c244:	e5a4      	b.n	800bd90 <dwt_ioctl+0x154>
 800c246:	2c00      	cmp	r4, #0
 800c248:	f001 83fe 	beq.w	800da48 <dwt_ioctl+0x1e0c>
 800c24c:	8823      	ldrh	r3, [r4, #0]
 800c24e:	2200      	movs	r2, #0
 800c250:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800c254:	f7fe f82b 	bl	800a2ae <dwt_write16bitoffsetreg>
 800c258:	2500      	movs	r5, #0
 800c25a:	e599      	b.n	800bd90 <dwt_ioctl+0x154>
 800c25c:	2c00      	cmp	r4, #0
 800c25e:	f001 83f6 	beq.w	800da4e <dwt_ioctl+0x1e12>
 800c262:	2200      	movs	r2, #0
 800c264:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800c268:	f7fd fc1f 	bl	8009aaa <dwt_read16bitoffsetreg>
 800c26c:	8020      	strh	r0, [r4, #0]
 800c26e:	2500      	movs	r5, #0
 800c270:	e58e      	b.n	800bd90 <dwt_ioctl+0x154>
 800c272:	2c00      	cmp	r4, #0
 800c274:	f001 83ee 	beq.w	800da54 <dwt_ioctl+0x1e18>
 800c278:	8823      	ldrh	r3, [r4, #0]
 800c27a:	2200      	movs	r2, #0
 800c27c:	217c      	movs	r1, #124	; 0x7c
 800c27e:	f7fe f816 	bl	800a2ae <dwt_write16bitoffsetreg>
 800c282:	2500      	movs	r5, #0
 800c284:	e584      	b.n	800bd90 <dwt_ioctl+0x154>
 800c286:	2c00      	cmp	r4, #0
 800c288:	f001 83e7 	beq.w	800da5a <dwt_ioctl+0x1e1e>
 800c28c:	2200      	movs	r2, #0
 800c28e:	217c      	movs	r1, #124	; 0x7c
 800c290:	f7fd fc0b 	bl	8009aaa <dwt_read16bitoffsetreg>
 800c294:	8020      	strh	r0, [r4, #0]
 800c296:	2500      	movs	r5, #0
 800c298:	e57a      	b.n	800bd90 <dwt_ioctl+0x154>
 800c29a:	2c00      	cmp	r4, #0
 800c29c:	f001 83e0 	beq.w	800da60 <dwt_ioctl+0x1e24>
 800c2a0:	88a3      	ldrh	r3, [r4, #4]
 800c2a2:	88e2      	ldrh	r2, [r4, #6]
 800c2a4:	6821      	ldr	r1, [r4, #0]
 800c2a6:	9100      	str	r1, [sp, #0]
 800c2a8:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800c2ac:	f7fd fff4 	bl	800a298 <dwt_writetodevice>
 800c2b0:	2500      	movs	r5, #0
 800c2b2:	e56d      	b.n	800bd90 <dwt_ioctl+0x154>
 800c2b4:	2c00      	cmp	r4, #0
 800c2b6:	f001 83d6 	beq.w	800da66 <dwt_ioctl+0x1e2a>
 800c2ba:	88a3      	ldrh	r3, [r4, #4]
 800c2bc:	88e2      	ldrh	r2, [r4, #6]
 800c2be:	6821      	ldr	r1, [r4, #0]
 800c2c0:	9100      	str	r1, [sp, #0]
 800c2c2:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800c2c6:	f7fd fbd0 	bl	8009a6a <dwt_readfromdevice>
 800c2ca:	2500      	movs	r5, #0
 800c2cc:	e560      	b.n	800bd90 <dwt_ioctl+0x154>
 800c2ce:	2c00      	cmp	r4, #0
 800c2d0:	f001 83cc 	beq.w	800da6c <dwt_ioctl+0x1e30>
 800c2d4:	88e3      	ldrh	r3, [r4, #6]
 800c2d6:	88a2      	ldrh	r2, [r4, #4]
 800c2d8:	6821      	ldr	r1, [r4, #0]
 800c2da:	f7fe f99d 	bl	800a618 <ull_readrxdata>
 800c2de:	2500      	movs	r5, #0
 800c2e0:	e556      	b.n	800bd90 <dwt_ioctl+0x154>
 800c2e2:	2c00      	cmp	r4, #0
 800c2e4:	f001 83c5 	beq.w	800da72 <dwt_ioctl+0x1e36>
 800c2e8:	88e3      	ldrh	r3, [r4, #6]
 800c2ea:	6822      	ldr	r2, [r4, #0]
 800c2ec:	88a1      	ldrh	r1, [r4, #4]
 800c2ee:	f7fe fac7 	bl	800a880 <ull_writetxdata>
 800c2f2:	2500      	movs	r5, #0
 800c2f4:	e54c      	b.n	800bd90 <dwt_ioctl+0x154>
 800c2f6:	4611      	mov	r1, r2
 800c2f8:	f7ff fc08 	bl	800bb0c <ull_rxenable>
 800c2fc:	2500      	movs	r5, #0
 800c2fe:	e547      	b.n	800bd90 <dwt_ioctl+0x154>
 800c300:	2c00      	cmp	r4, #0
 800c302:	f001 83b9 	beq.w	800da78 <dwt_ioctl+0x1e3c>
 800c306:	7923      	ldrb	r3, [r4, #4]
 800c308:	8862      	ldrh	r2, [r4, #2]
 800c30a:	8821      	ldrh	r1, [r4, #0]
 800c30c:	f7fe fdbe 	bl	800ae8c <ull_writetxfctrl>
 800c310:	2500      	movs	r5, #0
 800c312:	e53d      	b.n	800bd90 <dwt_ioctl+0x154>
 800c314:	2c00      	cmp	r4, #0
 800c316:	f001 83b2 	beq.w	800da7e <dwt_ioctl+0x1e42>
 800c31a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c31c:	7b9b      	ldrb	r3, [r3, #14]
 800c31e:	2b01      	cmp	r3, #1
 800c320:	d00c      	beq.n	800c33c <dwt_ioctl+0x700>
 800c322:	2b03      	cmp	r3, #3
 800c324:	d110      	bne.n	800c348 <dwt_ioctl+0x70c>
 800c326:	220c      	movs	r2, #12
 800c328:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800c32c:	f7fd fbbd 	bl	8009aaa <dwt_read16bitoffsetreg>
 800c330:	b200      	sxth	r0, r0
 800c332:	f340 030c 	sbfx	r3, r0, #0, #13
 800c336:	8023      	strh	r3, [r4, #0]
 800c338:	2500      	movs	r5, #0
 800c33a:	e529      	b.n	800bd90 <dwt_ioctl+0x154>
 800c33c:	2200      	movs	r2, #0
 800c33e:	492f      	ldr	r1, [pc, #188]	; (800c3fc <dwt_ioctl+0x7c0>)
 800c340:	f7fd fbb3 	bl	8009aaa <dwt_read16bitoffsetreg>
 800c344:	b200      	sxth	r0, r0
 800c346:	e7f4      	b.n	800c332 <dwt_ioctl+0x6f6>
 800c348:	2200      	movs	r2, #0
 800c34a:	492d      	ldr	r1, [pc, #180]	; (800c400 <dwt_ioctl+0x7c4>)
 800c34c:	f7fd fbad 	bl	8009aaa <dwt_read16bitoffsetreg>
 800c350:	b200      	sxth	r0, r0
 800c352:	e7ee      	b.n	800c332 <dwt_ioctl+0x6f6>
 800c354:	2c00      	cmp	r4, #0
 800c356:	f001 8395 	beq.w	800da84 <dwt_ioctl+0x1e48>
 800c35a:	ab0c      	add	r3, sp, #48	; 0x30
 800c35c:	9300      	str	r3, [sp, #0]
 800c35e:	2303      	movs	r3, #3
 800c360:	2200      	movs	r2, #0
 800c362:	4928      	ldr	r1, [pc, #160]	; (800c404 <dwt_ioctl+0x7c8>)
 800c364:	f7fd fb81 	bl	8009a6a <dwt_readfromdevice>
 800c368:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800c36c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800c370:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 800c374:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800c378:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800c37c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800c380:	bf1c      	itt	ne
 800c382:	ea6f 3303 	mvnne.w	r3, r3, lsl #12
 800c386:	ea6f 3313 	mvnne.w	r3, r3, lsr #12
 800c38a:	6023      	str	r3, [r4, #0]
 800c38c:	2500      	movs	r5, #0
 800c38e:	e4ff      	b.n	800bd90 <dwt_ioctl+0x154>
 800c390:	f7fe f9d0 	bl	800a734 <ull_clearaonconfig>
 800c394:	2500      	movs	r5, #0
 800c396:	e4fb      	b.n	800bd90 <dwt_ioctl+0x154>
 800c398:	2c00      	cmp	r4, #0
 800c39a:	f001 8376 	beq.w	800da8a <dwt_ioctl+0x1e4e>
 800c39e:	8861      	ldrh	r1, [r4, #2]
 800c3a0:	f7fe fdf0 	bl	800af84 <ull_calcbandwidthadj>
 800c3a4:	7020      	strb	r0, [r4, #0]
 800c3a6:	2500      	movs	r5, #0
 800c3a8:	e4f2      	b.n	800bd90 <dwt_ioctl+0x154>
 800c3aa:	4621      	mov	r1, r4
 800c3ac:	f7fd fb9d 	bl	8009aea <ull_readdiagnostics>
 800c3b0:	2500      	movs	r5, #0
 800c3b2:	e4ed      	b.n	800bd90 <dwt_ioctl+0x154>
 800c3b4:	2c00      	cmp	r4, #0
 800c3b6:	f001 836b 	beq.w	800da90 <dwt_ioctl+0x1e54>
 800c3ba:	2201      	movs	r2, #1
 800c3bc:	2170      	movs	r1, #112	; 0x70
 800c3be:	f7fd fb5e 	bl	8009a7e <dwt_read32bitoffsetreg>
 800c3c2:	6020      	str	r0, [r4, #0]
 800c3c4:	2500      	movs	r5, #0
 800c3c6:	e4e3      	b.n	800bd90 <dwt_ioctl+0x154>
 800c3c8:	00110008 	.word	0x00110008
 800c3cc:	00d20874 	.word	0x00d20874
 800c3d0:	00110010 	.word	0x00110010
 800c3d4:	04d28874 	.word	0x04d28874
 800c3d8:	0007001c 	.word	0x0007001c
 800c3dc:	00020004 	.word	0x00020004
 800c3e0:	001f000c 	.word	0x001f000c
 800c3e4:	001f0010 	.word	0x001f0010
 800c3e8:	00010008 	.word	0x00010008
 800c3ec:	00010020 	.word	0x00010020
 800c3f0:	af5f35cc 	.word	0xaf5f35cc
 800c3f4:	af5f584c 	.word	0xaf5f584c
 800c3f8:	0006000c 	.word	0x0006000c
 800c3fc:	0018000c 	.word	0x0018000c
 800c400:	000c0020 	.word	0x000c0020
 800c404:	00060029 	.word	0x00060029
 800c408:	2c00      	cmp	r4, #0
 800c40a:	f001 8344 	beq.w	800da96 <dwt_ioctl+0x1e5a>
 800c40e:	2200      	movs	r2, #0
 800c410:	2170      	movs	r1, #112	; 0x70
 800c412:	f7fd fb34 	bl	8009a7e <dwt_read32bitoffsetreg>
 800c416:	6020      	str	r0, [r4, #0]
 800c418:	2500      	movs	r5, #0
 800c41a:	e4b9      	b.n	800bd90 <dwt_ioctl+0x154>
 800c41c:	9400      	str	r4, [sp, #0]
 800c41e:	2305      	movs	r3, #5
 800c420:	2200      	movs	r2, #0
 800c422:	2170      	movs	r1, #112	; 0x70
 800c424:	f7fd fb21 	bl	8009a6a <dwt_readfromdevice>
 800c428:	2500      	movs	r5, #0
 800c42a:	e4b1      	b.n	800bd90 <dwt_ioctl+0x154>
 800c42c:	2c00      	cmp	r4, #0
 800c42e:	f001 8335 	beq.w	800da9c <dwt_ioctl+0x1e60>
 800c432:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c434:	7b9b      	ldrb	r3, [r3, #14]
 800c436:	2b01      	cmp	r3, #1
 800c438:	d014      	beq.n	800c464 <dwt_ioctl+0x828>
 800c43a:	2b03      	cmp	r3, #3
 800c43c:	d119      	bne.n	800c472 <dwt_ioctl+0x836>
 800c43e:	2216      	movs	r2, #22
 800c440:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800c444:	f7fd fb31 	bl	8009aaa <dwt_read16bitoffsetreg>
 800c448:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800c44c:	b283      	uxth	r3, r0
 800c44e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800c452:	d004      	beq.n	800c45e <dwt_ioctl+0x822>
 800c454:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 800c458:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 800c45c:	b218      	sxth	r0, r3
 800c45e:	8020      	strh	r0, [r4, #0]
 800c460:	2500      	movs	r5, #0
 800c462:	e495      	b.n	800bd90 <dwt_ioctl+0x154>
 800c464:	2202      	movs	r2, #2
 800c466:	49d6      	ldr	r1, [pc, #856]	; (800c7c0 <dwt_ioctl+0xb84>)
 800c468:	f7fd fb1f 	bl	8009aaa <dwt_read16bitoffsetreg>
 800c46c:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800c470:	e7ec      	b.n	800c44c <dwt_ioctl+0x810>
 800c472:	2202      	movs	r2, #2
 800c474:	49d3      	ldr	r1, [pc, #844]	; (800c7c4 <dwt_ioctl+0xb88>)
 800c476:	f7fd fb18 	bl	8009aaa <dwt_read16bitoffsetreg>
 800c47a:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800c47e:	e7e5      	b.n	800c44c <dwt_ioctl+0x810>
 800c480:	9400      	str	r4, [sp, #0]
 800c482:	2306      	movs	r3, #6
 800c484:	2200      	movs	r2, #0
 800c486:	49d0      	ldr	r1, [pc, #832]	; (800c7c8 <dwt_ioctl+0xb8c>)
 800c488:	f7fd faef 	bl	8009a6a <dwt_readfromdevice>
 800c48c:	7963      	ldrb	r3, [r4, #5]
 800c48e:	f003 0301 	and.w	r3, r3, #1
 800c492:	7163      	strb	r3, [r4, #5]
 800c494:	2500      	movs	r5, #0
 800c496:	e47b      	b.n	800bd90 <dwt_ioctl+0x154>
 800c498:	2c00      	cmp	r4, #0
 800c49a:	f001 8302 	beq.w	800daa2 <dwt_ioctl+0x1e66>
 800c49e:	2201      	movs	r2, #1
 800c4a0:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800c4a4:	f7fd fb13 	bl	8009ace <dwt_read8bitoffsetreg>
 800c4a8:	7020      	strb	r0, [r4, #0]
 800c4aa:	2500      	movs	r5, #0
 800c4ac:	e470      	b.n	800bd90 <dwt_ioctl+0x154>
 800c4ae:	2c00      	cmp	r4, #0
 800c4b0:	f001 82fa 	beq.w	800daa8 <dwt_ioctl+0x1e6c>
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800c4ba:	f7fd fb08 	bl	8009ace <dwt_read8bitoffsetreg>
 800c4be:	7020      	strb	r0, [r4, #0]
 800c4c0:	2500      	movs	r5, #0
 800c4c2:	e465      	b.n	800bd90 <dwt_ioctl+0x154>
 800c4c4:	2c00      	cmp	r4, #0
 800c4c6:	f001 82f2 	beq.w	800daae <dwt_ioctl+0x1e72>
 800c4ca:	88a2      	ldrh	r2, [r4, #4]
 800c4cc:	6821      	ldr	r1, [r4, #0]
 800c4ce:	f7fe fc07 	bl	800ace0 <_dwt_otpprogword32>
 800c4d2:	2500      	movs	r5, #0
 800c4d4:	e45c      	b.n	800bd90 <dwt_ioctl+0x154>
 800c4d6:	2c00      	cmp	r4, #0
 800c4d8:	f001 82ec 	beq.w	800dab4 <dwt_ioctl+0x1e78>
 800c4dc:	6825      	ldr	r5, [r4, #0]
 800c4de:	88a4      	ldrh	r4, [r4, #4]
 800c4e0:	4622      	mov	r2, r4
 800c4e2:	4629      	mov	r1, r5
 800c4e4:	f7fe fbfc 	bl	800ace0 <_dwt_otpprogword32>
 800c4e8:	4621      	mov	r1, r4
 800c4ea:	4630      	mov	r0, r6
 800c4ec:	f7fd ff1a 	bl	800a324 <_dwt_otpread>
 800c4f0:	1a2d      	subs	r5, r5, r0
 800c4f2:	bf18      	it	ne
 800c4f4:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800c4f8:	e44a      	b.n	800bd90 <dwt_ioctl+0x154>
 800c4fa:	2a02      	cmp	r2, #2
 800c4fc:	d00e      	beq.n	800c51c <dwt_ioctl+0x8e0>
 800c4fe:	4cb3      	ldr	r4, [pc, #716]	; (800c7cc <dwt_ioctl+0xb90>)
 800c500:	2300      	movs	r3, #0
 800c502:	461a      	mov	r2, r3
 800c504:	4621      	mov	r1, r4
 800c506:	4630      	mov	r0, r6
 800c508:	f7fe f8bc 	bl	800a684 <dwt_write8bitoffsetreg>
 800c50c:	2302      	movs	r3, #2
 800c50e:	2200      	movs	r2, #0
 800c510:	4621      	mov	r1, r4
 800c512:	4630      	mov	r0, r6
 800c514:	f7fe f8b6 	bl	800a684 <dwt_write8bitoffsetreg>
 800c518:	2500      	movs	r5, #0
 800c51a:	e439      	b.n	800bd90 <dwt_ioctl+0x154>
 800c51c:	2300      	movs	r3, #0
 800c51e:	9300      	str	r3, [sp, #0]
 800c520:	23fe      	movs	r3, #254	; 0xfe
 800c522:	2201      	movs	r2, #1
 800c524:	49aa      	ldr	r1, [pc, #680]	; (800c7d0 <dwt_ioctl+0xb94>)
 800c526:	f7fe fce3 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800c52a:	e7e8      	b.n	800c4fe <dwt_ioctl+0x8c2>
 800c52c:	2c00      	cmp	r4, #0
 800c52e:	f001 82c4 	beq.w	800daba <dwt_ioctl+0x1e7e>
 800c532:	8824      	ldrh	r4, [r4, #0]
 800c534:	b2e2      	uxtb	r2, r4
 800c536:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c53a:	f7fe f94f 	bl	800a7dc <ull_aon_write>
 800c53e:	0a22      	lsrs	r2, r4, #8
 800c540:	f240 1103 	movw	r1, #259	; 0x103
 800c544:	4630      	mov	r0, r6
 800c546:	f7fe f949 	bl	800a7dc <ull_aon_write>
 800c54a:	2500      	movs	r5, #0
 800c54c:	e420      	b.n	800bd90 <dwt_ioctl+0x154>
 800c54e:	2c00      	cmp	r4, #0
 800c550:	f001 82b6 	beq.w	800dac0 <dwt_ioctl+0x1e84>
 800c554:	f8df 8284 	ldr.w	r8, [pc, #644]	; 800c7dc <dwt_ioctl+0xba0>
 800c558:	2310      	movs	r3, #16
 800c55a:	9300      	str	r3, [sp, #0]
 800c55c:	23ff      	movs	r3, #255	; 0xff
 800c55e:	2200      	movs	r2, #0
 800c560:	4641      	mov	r1, r8
 800c562:	f7fe fcc5 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800c566:	f44f 7182 	mov.w	r1, #260	; 0x104
 800c56a:	4630      	mov	r0, r6
 800c56c:	f7fe f916 	bl	800a79c <ull_aon_read>
 800c570:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 800c574:	462a      	mov	r2, r5
 800c576:	f44f 7182 	mov.w	r1, #260	; 0x104
 800c57a:	4630      	mov	r0, r6
 800c57c:	f7fe f92e 	bl	800a7dc <ull_aon_write>
 800c580:	f045 0204 	orr.w	r2, r5, #4
 800c584:	f44f 7182 	mov.w	r1, #260	; 0x104
 800c588:	4630      	mov	r0, r6
 800c58a:	f7fe f927 	bl	800a7dc <ull_aon_write>
 800c58e:	2002      	movs	r0, #2
 800c590:	f7f4 ffd4 	bl	800153c <deca_sleep>
 800c594:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800c598:	4630      	mov	r0, r6
 800c59a:	f7fe f8ff 	bl	800a79c <ull_aon_read>
 800c59e:	4607      	mov	r7, r0
 800c5a0:	f240 110f 	movw	r1, #271	; 0x10f
 800c5a4:	4630      	mov	r0, r6
 800c5a6:	f7fe f8f9 	bl	800a79c <ull_aon_read>
 800c5aa:	4681      	mov	r9, r0
 800c5ac:	462a      	mov	r2, r5
 800c5ae:	f44f 7182 	mov.w	r1, #260	; 0x104
 800c5b2:	4630      	mov	r0, r6
 800c5b4:	f7fe f912 	bl	800a7dc <ull_aon_write>
 800c5b8:	2500      	movs	r5, #0
 800c5ba:	9500      	str	r5, [sp, #0]
 800c5bc:	23ef      	movs	r3, #239	; 0xef
 800c5be:	462a      	mov	r2, r5
 800c5c0:	4641      	mov	r1, r8
 800c5c2:	4630      	mov	r0, r6
 800c5c4:	f7fe fc94 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800c5c8:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 800c5cc:	8027      	strh	r7, [r4, #0]
 800c5ce:	f7ff bbdf 	b.w	800bd90 <dwt_ioctl+0x154>
 800c5d2:	2c00      	cmp	r4, #0
 800c5d4:	f001 8277 	beq.w	800dac6 <dwt_ioctl+0x1e8a>
 800c5d8:	78a2      	ldrb	r2, [r4, #2]
 800c5da:	8821      	ldrh	r1, [r4, #0]
 800c5dc:	f7fe f926 	bl	800a82c <ull_configuresleep>
 800c5e0:	2500      	movs	r5, #0
 800c5e2:	f7ff bbd5 	b.w	800bd90 <dwt_ioctl+0x154>
 800c5e6:	2c00      	cmp	r4, #0
 800c5e8:	f001 8270 	beq.w	800dacc <dwt_ioctl+0x1e90>
 800c5ec:	6824      	ldr	r4, [r4, #0]
 800c5ee:	f7fe f8a1 	bl	800a734 <ull_clearaonconfig>
 800c5f2:	2001      	movs	r0, #1
 800c5f4:	f7f4 ffa2 	bl	800153c <deca_sleep>
 800c5f8:	2303      	movs	r3, #3
 800c5fa:	9300      	str	r3, [sp, #0]
 800c5fc:	23ff      	movs	r3, #255	; 0xff
 800c5fe:	2200      	movs	r2, #0
 800c600:	4974      	ldr	r1, [pc, #464]	; (800c7d4 <dwt_ioctl+0xb98>)
 800c602:	4630      	mov	r0, r6
 800c604:	f7fe fc74 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800c608:	b97c      	cbnz	r4, 800c62a <dwt_ioctl+0x9ee>
 800c60a:	4630      	mov	r0, r6
 800c60c:	f7ff faee 	bl	800bbec <ull_softreset_no_sema_fcmd>
 800c610:	2001      	movs	r0, #1
 800c612:	f7f4 ff93 	bl	800153c <deca_sleep>
 800c616:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800c618:	2500      	movs	r5, #0
 800c61a:	739d      	strb	r5, [r3, #14]
 800c61c:	2202      	movs	r2, #2
 800c61e:	821a      	strh	r2, [r3, #16]
 800c620:	751d      	strb	r5, [r3, #20]
 800c622:	755d      	strb	r5, [r3, #21]
 800c624:	73dd      	strb	r5, [r3, #15]
 800c626:	f7ff bbb3 	b.w	800bd90 <dwt_ioctl+0x154>
 800c62a:	4630      	mov	r0, r6
 800c62c:	f7ff faf2 	bl	800bc14 <ull_softreset_fcmd>
 800c630:	e7ee      	b.n	800c610 <dwt_ioctl+0x9d4>
 800c632:	2c00      	cmp	r4, #0
 800c634:	f001 824d 	beq.w	800dad2 <dwt_ioctl+0x1e96>
 800c638:	7823      	ldrb	r3, [r4, #0]
 800c63a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c63e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800c640:	7353      	strb	r3, [r2, #13]
 800c642:	2200      	movs	r2, #0
 800c644:	4964      	ldr	r1, [pc, #400]	; (800c7d8 <dwt_ioctl+0xb9c>)
 800c646:	f7fe f81d 	bl	800a684 <dwt_write8bitoffsetreg>
 800c64a:	2500      	movs	r5, #0
 800c64c:	f7ff bba0 	b.w	800bd90 <dwt_ioctl+0x154>
 800c650:	2c00      	cmp	r4, #0
 800c652:	f001 8241 	beq.w	800dad8 <dwt_ioctl+0x1e9c>
 800c656:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c658:	7b5b      	ldrb	r3, [r3, #13]
 800c65a:	7023      	strb	r3, [r4, #0]
 800c65c:	2500      	movs	r5, #0
 800c65e:	f7ff bb97 	b.w	800bd90 <dwt_ioctl+0x154>
 800c662:	2101      	movs	r1, #1
 800c664:	f7fe faf6 	bl	800ac54 <ull_enable_rf_tx>
 800c668:	4630      	mov	r0, r6
 800c66a:	f7fe fb27 	bl	800acbc <ull_enable_rftx_blocks>
 800c66e:	2101      	movs	r1, #1
 800c670:	4630      	mov	r0, r6
 800c672:	f7fd fe2d 	bl	800a2d0 <ull_force_clocks>
 800c676:	220f      	movs	r2, #15
 800c678:	2101      	movs	r1, #1
 800c67a:	4630      	mov	r0, r6
 800c67c:	f7fe ff48 	bl	800b510 <ull_repeated_cw>
 800c680:	2500      	movs	r5, #0
 800c682:	f7ff bb85 	b.w	800bd90 <dwt_ioctl+0x154>
 800c686:	2c00      	cmp	r4, #0
 800c688:	f001 8229 	beq.w	800dade <dwt_ioctl+0x1ea2>
 800c68c:	6862      	ldr	r2, [r4, #4]
 800c68e:	6821      	ldr	r1, [r4, #0]
 800c690:	f7fe ff3e 	bl	800b510 <ull_repeated_cw>
 800c694:	2500      	movs	r5, #0
 800c696:	f7ff bb7b 	b.w	800bd90 <dwt_ioctl+0x154>
 800c69a:	2c00      	cmp	r4, #0
 800c69c:	f001 8222 	beq.w	800dae4 <dwt_ioctl+0x1ea8>
 800c6a0:	4d4e      	ldr	r5, [pc, #312]	; (800c7dc <dwt_ioctl+0xba0>)
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	4629      	mov	r1, r5
 800c6a6:	f7fd fa12 	bl	8009ace <dwt_read8bitoffsetreg>
 800c6aa:	4680      	mov	r8, r0
 800c6ac:	2302      	movs	r3, #2
 800c6ae:	9300      	str	r3, [sp, #0]
 800c6b0:	23ff      	movs	r3, #255	; 0xff
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	4629      	mov	r1, r5
 800c6b6:	4630      	mov	r0, r6
 800c6b8:	f7fe fc1a 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800c6bc:	2304      	movs	r3, #4
 800c6be:	2200      	movs	r2, #0
 800c6c0:	4947      	ldr	r1, [pc, #284]	; (800c7e0 <dwt_ioctl+0xba4>)
 800c6c2:	4630      	mov	r0, r6
 800c6c4:	f7fd ffde 	bl	800a684 <dwt_write8bitoffsetreg>
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c6d0:	4630      	mov	r0, r6
 800c6d2:	f7fd ffd7 	bl	800a684 <dwt_write8bitoffsetreg>
 800c6d6:	4f43      	ldr	r7, [pc, #268]	; (800c7e4 <dwt_ioctl+0xba8>)
 800c6d8:	2500      	movs	r5, #0
 800c6da:	462a      	mov	r2, r5
 800c6dc:	4639      	mov	r1, r7
 800c6de:	4630      	mov	r0, r6
 800c6e0:	f7fd f9f5 	bl	8009ace <dwt_read8bitoffsetreg>
 800c6e4:	f010 0f01 	tst.w	r0, #1
 800c6e8:	d0f7      	beq.n	800c6da <dwt_ioctl+0xa9e>
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800c6f0:	4630      	mov	r0, r6
 800c6f2:	f7fd f9da 	bl	8009aaa <dwt_read16bitoffsetreg>
 800c6f6:	4605      	mov	r5, r0
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c700:	4630      	mov	r0, r6
 800c702:	f7fd ffbf 	bl	800a684 <dwt_write8bitoffsetreg>
 800c706:	2300      	movs	r3, #0
 800c708:	461a      	mov	r2, r3
 800c70a:	4935      	ldr	r1, [pc, #212]	; (800c7e0 <dwt_ioctl+0xba4>)
 800c70c:	4630      	mov	r0, r6
 800c70e:	f7fd ffb9 	bl	800a684 <dwt_write8bitoffsetreg>
 800c712:	4643      	mov	r3, r8
 800c714:	2200      	movs	r2, #0
 800c716:	4931      	ldr	r1, [pc, #196]	; (800c7dc <dwt_ioctl+0xba0>)
 800c718:	4630      	mov	r0, r6
 800c71a:	f7fd ffb3 	bl	800a684 <dwt_write8bitoffsetreg>
 800c71e:	8025      	strh	r5, [r4, #0]
 800c720:	2500      	movs	r5, #0
 800c722:	f7ff bb35 	b.w	800bd90 <dwt_ioctl+0x154>
 800c726:	2c00      	cmp	r4, #0
 800c728:	f001 81df 	beq.w	800daea <dwt_ioctl+0x1eae>
 800c72c:	7923      	ldrb	r3, [r4, #4]
 800c72e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800c730:	7a92      	ldrb	r2, [r2, #10]
 800c732:	1a9b      	subs	r3, r3, r2
 800c734:	ee07 3a90 	vmov	s15, r3
 800c738:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c73c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800c7e8 <dwt_ioctl+0xbac>
 800c740:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c744:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 800c748:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c74c:	edc4 7a00 	vstr	s15, [r4]
 800c750:	2500      	movs	r5, #0
 800c752:	f7ff bb1d 	b.w	800bd90 <dwt_ioctl+0x154>
 800c756:	2c00      	cmp	r4, #0
 800c758:	f001 81ca 	beq.w	800daf0 <dwt_ioctl+0x1eb4>
 800c75c:	7923      	ldrb	r3, [r4, #4]
 800c75e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800c760:	7a52      	ldrb	r2, [r2, #9]
 800c762:	1a9b      	subs	r3, r3, r2
 800c764:	ee07 3a90 	vmov	s15, r3
 800c768:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c76c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800c7ec <dwt_ioctl+0xbb0>
 800c770:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c774:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800c778:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c77c:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800c7f0 <dwt_ioctl+0xbb4>
 800c780:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c784:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800c788:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c78c:	edc4 7a00 	vstr	s15, [r4]
 800c790:	2500      	movs	r5, #0
 800c792:	f7ff bafd 	b.w	800bd90 <dwt_ioctl+0x154>
 800c796:	2c00      	cmp	r4, #0
 800c798:	f001 81ad 	beq.w	800daf6 <dwt_ioctl+0x1eba>
 800c79c:	6824      	ldr	r4, [r4, #0]
 800c79e:	2101      	movs	r1, #1
 800c7a0:	f7fe fa58 	bl	800ac54 <ull_enable_rf_tx>
 800c7a4:	4630      	mov	r0, r6
 800c7a6:	f7fe fa89 	bl	800acbc <ull_enable_rftx_blocks>
 800c7aa:	2101      	movs	r1, #1
 800c7ac:	4630      	mov	r0, r6
 800c7ae:	f7fd fd8f 	bl	800a2d0 <ull_force_clocks>
 800c7b2:	4621      	mov	r1, r4
 800c7b4:	4630      	mov	r0, r6
 800c7b6:	f7fe fc41 	bl	800b03c <ull_repeated_frames>
 800c7ba:	2500      	movs	r5, #0
 800c7bc:	f7ff bae8 	b.w	800bd90 <dwt_ioctl+0x154>
 800c7c0:	00180014 	.word	0x00180014
 800c7c4:	000c001c 	.word	0x000c001c
 800c7c8:	000c0018 	.word	0x000c0018
 800c7cc:	000a0004 	.word	0x000a0004
 800c7d0:	00110008 	.word	0x00110008
 800c7d4:	00110004 	.word	0x00110004
 800c7d8:	00090014 	.word	0x00090014
 800c7dc:	00070048 	.word	0x00070048
 800c7e0:	00070034 	.word	0x00070034
 800c7e4:	00080004 	.word	0x00080004
 800c7e8:	3f866666 	.word	0x3f866666
 800c7ec:	3ecccccd 	.word	0x3ecccccd
 800c7f0:	437f0000 	.word	0x437f0000
 800c7f4:	2500      	movs	r5, #0
 800c7f6:	9500      	str	r5, [sp, #0]
 800c7f8:	23ef      	movs	r3, #239	; 0xef
 800c7fa:	462a      	mov	r2, r5
 800c7fc:	49c7      	ldr	r1, [pc, #796]	; (800cb1c <dwt_ioctl+0xee0>)
 800c7fe:	f7fe fb77 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800c802:	2105      	movs	r1, #5
 800c804:	4630      	mov	r0, r6
 800c806:	f7fd fd63 	bl	800a2d0 <ull_force_clocks>
 800c80a:	2101      	movs	r1, #1
 800c80c:	4630      	mov	r0, r6
 800c80e:	f7fd fee5 	bl	800a5dc <ull_disable_rf_tx>
 800c812:	4630      	mov	r0, r6
 800c814:	f7fd fed8 	bl	800a5c8 <ull_disable_rftx_blocks>
 800c818:	f7ff baba 	b.w	800bd90 <dwt_ioctl+0x154>
 800c81c:	2500      	movs	r5, #0
 800c81e:	9500      	str	r5, [sp, #0]
 800c820:	23ef      	movs	r3, #239	; 0xef
 800c822:	462a      	mov	r2, r5
 800c824:	49bd      	ldr	r1, [pc, #756]	; (800cb1c <dwt_ioctl+0xee0>)
 800c826:	f7fe fb63 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800c82a:	f7ff bab1 	b.w	800bd90 <dwt_ioctl+0x154>
 800c82e:	2c00      	cmp	r4, #0
 800c830:	f001 8164 	beq.w	800dafc <dwt_ioctl+0x1ec0>
 800c834:	6821      	ldr	r1, [r4, #0]
 800c836:	f7fe fc01 	bl	800b03c <ull_repeated_frames>
 800c83a:	2500      	movs	r5, #0
 800c83c:	f7ff baa8 	b.w	800bd90 <dwt_ioctl+0x154>
 800c840:	2200      	movs	r2, #0
 800c842:	49b7      	ldr	r1, [pc, #732]	; (800cb20 <dwt_ioctl+0xee4>)
 800c844:	f7fd f931 	bl	8009aaa <dwt_read16bitoffsetreg>
 800c848:	f3c0 050b 	ubfx	r5, r0, #0, #12
 800c84c:	f410 6f00 	tst.w	r0, #2048	; 0x800
 800c850:	bf18      	it	ne
 800c852:	f445 4570 	orrne.w	r5, r5, #61440	; 0xf000
 800c856:	b22d      	sxth	r5, r5
 800c858:	8025      	strh	r5, [r4, #0]
 800c85a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800c85c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800c860:	1aed      	subs	r5, r5, r3
 800c862:	f7ff ba95 	b.w	800bd90 <dwt_ioctl+0x154>
 800c866:	2c00      	cmp	r4, #0
 800c868:	f001 814b 	beq.w	800db02 <dwt_ioctl+0x1ec6>
 800c86c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c870:	7a23      	ldrb	r3, [r4, #8]
 800c872:	f899 2013 	ldrb.w	r2, [r9, #19]
 800c876:	2aff      	cmp	r2, #255	; 0xff
 800c878:	f000 8122 	beq.w	800cac0 <dwt_ioctl+0xe84>
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d136      	bne.n	800c8ee <dwt_ioctl+0xcb2>
 800c880:	f8d9 3000 	ldr.w	r3, [r9]
 800c884:	9300      	str	r3, [sp, #0]
 800c886:	230c      	movs	r3, #12
 800c888:	2200      	movs	r2, #0
 800c88a:	49a6      	ldr	r1, [pc, #664]	; (800cb24 <dwt_ioctl+0xee8>)
 800c88c:	f7fd fd04 	bl	800a298 <dwt_writetodevice>
 800c890:	f899 300c 	ldrb.w	r3, [r9, #12]
 800c894:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 800c898:	18d1      	adds	r1, r2, r3
 800c89a:	f899 2012 	ldrb.w	r2, [r9, #18]
 800c89e:	2a00      	cmp	r2, #0
 800c8a0:	d15f      	bne.n	800c962 <dwt_ioctl+0xd26>
 800c8a2:	f899 0010 	ldrb.w	r0, [r9, #16]
 800c8a6:	2800      	cmp	r0, #0
 800c8a8:	bf0b      	itete	eq
 800c8aa:	227f      	moveq	r2, #127	; 0x7f
 800c8ac:	f44f 6280 	movne.w	r2, #1024	; 0x400
 800c8b0:	f44f 15b0 	moveq.w	r5, #1441792	; 0x160000
 800c8b4:	f44f 15a0 	movne.w	r5, #1310720	; 0x140000
 800c8b8:	f899 0013 	ldrb.w	r0, [r9, #19]
 800c8bc:	1a12      	subs	r2, r2, r0
 800c8be:	3a02      	subs	r2, #2
 800c8c0:	4291      	cmp	r1, r2
 800c8c2:	f200 8103 	bhi.w	800cacc <dwt_ioctl+0xe90>
 800c8c6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800c8ca:	9200      	str	r2, [sp, #0]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	4629      	mov	r1, r5
 800c8d0:	4630      	mov	r0, r6
 800c8d2:	f7fd fce1 	bl	800a298 <dwt_writetodevice>
 800c8d6:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800c8da:	f899 200c 	ldrb.w	r2, [r9, #12]
 800c8de:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800c8e2:	9100      	str	r1, [sp, #0]
 800c8e4:	4629      	mov	r1, r5
 800c8e6:	4630      	mov	r0, r6
 800c8e8:	f7fd fcd6 	bl	800a298 <dwt_writetodevice>
 800c8ec:	e04a      	b.n	800c984 <dwt_ioctl+0xd48>
 800c8ee:	f8d9 3000 	ldr.w	r3, [r9]
 800c8f2:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 800c8f6:	7a9a      	ldrb	r2, [r3, #10]
 800c8f8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 800c8fc:	7a5a      	ldrb	r2, [r3, #9]
 800c8fe:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 800c902:	7a1a      	ldrb	r2, [r3, #8]
 800c904:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
 800c908:	79da      	ldrb	r2, [r3, #7]
 800c90a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 800c90e:	799a      	ldrb	r2, [r3, #6]
 800c910:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 800c914:	795a      	ldrb	r2, [r3, #5]
 800c916:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
 800c91a:	791a      	ldrb	r2, [r3, #4]
 800c91c:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800c920:	78da      	ldrb	r2, [r3, #3]
 800c922:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
 800c926:	789a      	ldrb	r2, [r3, #2]
 800c928:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 800c92c:	785a      	ldrb	r2, [r3, #1]
 800c92e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 800c932:	781a      	ldrb	r2, [r3, #0]
 800c934:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800c938:	2200      	movs	r2, #0
 800c93a:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 800c93e:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 800c942:	0a09      	lsrs	r1, r1, #8
 800c944:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
 800c948:	7b19      	ldrb	r1, [r3, #12]
 800c94a:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
 800c94e:	7adb      	ldrb	r3, [r3, #11]
 800c950:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 800c954:	ab0c      	add	r3, sp, #48	; 0x30
 800c956:	9300      	str	r3, [sp, #0]
 800c958:	2310      	movs	r3, #16
 800c95a:	4972      	ldr	r1, [pc, #456]	; (800cb24 <dwt_ioctl+0xee8>)
 800c95c:	f7fd fc9c 	bl	800a298 <dwt_writetodevice>
 800c960:	e796      	b.n	800c890 <dwt_ioctl+0xc54>
 800c962:	2a01      	cmp	r2, #1
 800c964:	f040 80af 	bne.w	800cac6 <dwt_ioctl+0xe8a>
 800c968:	f899 3011 	ldrb.w	r3, [r9, #17]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800c972:	bf08      	it	eq
 800c974:	237f      	moveq	r3, #127	; 0x7f
 800c976:	f899 2013 	ldrb.w	r2, [r9, #19]
 800c97a:	1a9b      	subs	r3, r3, r2
 800c97c:	3b02      	subs	r3, #2
 800c97e:	4299      	cmp	r1, r3
 800c980:	f200 80a7 	bhi.w	800cad2 <dwt_ioctl+0xe96>
 800c984:	f899 2010 	ldrb.w	r2, [r9, #16]
 800c988:	1e53      	subs	r3, r2, #1
 800c98a:	b2db      	uxtb	r3, r3
 800c98c:	2b01      	cmp	r3, #1
 800c98e:	d940      	bls.n	800ca12 <dwt_ioctl+0xdd6>
 800c990:	f899 3011 	ldrb.w	r3, [r9, #17]
 800c994:	1e59      	subs	r1, r3, #1
 800c996:	b2c9      	uxtb	r1, r1
 800c998:	2901      	cmp	r1, #1
 800c99a:	d947      	bls.n	800ca2c <dwt_ioctl+0xdf0>
 800c99c:	2b04      	cmp	r3, #4
 800c99e:	d04c      	beq.n	800ca3a <dwt_ioctl+0xdfe>
 800c9a0:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	4960      	ldr	r1, [pc, #384]	; (800cb28 <dwt_ioctl+0xeec>)
 800c9a8:	4630      	mov	r0, r6
 800c9aa:	f7fd fcdd 	bl	800a368 <dwt_write32bitoffsetreg>
 800c9ae:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800c9b2:	4a5e      	ldr	r2, [pc, #376]	; (800cb2c <dwt_ioctl+0xef0>)
 800c9b4:	ea02 12c3 	and.w	r2, r2, r3, lsl #7
 800c9b8:	f899 300c 	ldrb.w	r3, [r9, #12]
 800c9bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9c0:	4313      	orrs	r3, r2
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	495a      	ldr	r1, [pc, #360]	; (800cb30 <dwt_ioctl+0xef4>)
 800c9c6:	4630      	mov	r0, r6
 800c9c8:	f7fd fcce 	bl	800a368 <dwt_write32bitoffsetreg>
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	4958      	ldr	r1, [pc, #352]	; (800cb34 <dwt_ioctl+0xef8>)
 800c9d2:	4630      	mov	r0, r6
 800c9d4:	f7fd fe56 	bl	800a684 <dwt_write8bitoffsetreg>
 800c9d8:	f8df 815c 	ldr.w	r8, [pc, #348]	; 800cb38 <dwt_ioctl+0xefc>
 800c9dc:	2700      	movs	r7, #0
 800c9de:	463a      	mov	r2, r7
 800c9e0:	4641      	mov	r1, r8
 800c9e2:	4630      	mov	r0, r6
 800c9e4:	f7fd f873 	bl	8009ace <dwt_read8bitoffsetreg>
 800c9e8:	f010 0f05 	tst.w	r0, #5
 800c9ec:	d0f7      	beq.n	800c9de <dwt_ioctl+0xda2>
 800c9ee:	4605      	mov	r5, r0
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	4950      	ldr	r1, [pc, #320]	; (800cb38 <dwt_ioctl+0xefc>)
 800c9f6:	4630      	mov	r0, r6
 800c9f8:	f7fd fe44 	bl	800a684 <dwt_write8bitoffsetreg>
 800c9fc:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 800ca00:	f025 0330 	bic.w	r3, r5, #48	; 0x30
 800ca04:	2b01      	cmp	r3, #1
 800ca06:	d025      	beq.n	800ca54 <dwt_ioctl+0xe18>
 800ca08:	b26b      	sxtb	r3, r5
 800ca0a:	7023      	strb	r3, [r4, #0]
 800ca0c:	2500      	movs	r5, #0
 800ca0e:	f7ff b9bf 	b.w	800bd90 <dwt_ioctl+0x154>
 800ca12:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800ca14:	7b9b      	ldrb	r3, [r3, #14]
 800ca16:	2b03      	cmp	r3, #3
 800ca18:	f001 8123 	beq.w	800dc62 <dwt_ioctl+0x2026>
 800ca1c:	f899 3011 	ldrb.w	r3, [r9, #17]
 800ca20:	1e5a      	subs	r2, r3, #1
 800ca22:	b2d2      	uxtb	r2, r2
 800ca24:	2a01      	cmp	r2, #1
 800ca26:	d912      	bls.n	800ca4e <dwt_ioctl+0xe12>
 800ca28:	2201      	movs	r2, #1
 800ca2a:	e7b7      	b.n	800c99c <dwt_ioctl+0xd60>
 800ca2c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800ca2e:	7b9b      	ldrb	r3, [r3, #14]
 800ca30:	2b03      	cmp	r3, #3
 800ca32:	bf0c      	ite	eq
 800ca34:	2302      	moveq	r3, #2
 800ca36:	2301      	movne	r3, #1
 800ca38:	e7b2      	b.n	800c9a0 <dwt_ioctl+0xd64>
 800ca3a:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 800ca3e:	2910      	cmp	r1, #16
 800ca40:	d9ae      	bls.n	800c9a0 <dwt_ioctl+0xd64>
 800ca42:	f06f 0303 	mvn.w	r3, #3
 800ca46:	e7e0      	b.n	800ca0a <dwt_ioctl+0xdce>
 800ca48:	2202      	movs	r2, #2
 800ca4a:	4613      	mov	r3, r2
 800ca4c:	e7a8      	b.n	800c9a0 <dwt_ioctl+0xd64>
 800ca4e:	2201      	movs	r2, #1
 800ca50:	4613      	mov	r3, r2
 800ca52:	e7a5      	b.n	800c9a0 <dwt_ioctl+0xd64>
 800ca54:	f899 3012 	ldrb.w	r3, [r9, #18]
 800ca58:	2b01      	cmp	r3, #1
 800ca5a:	d1d5      	bne.n	800ca08 <dwt_ioctl+0xdcc>
 800ca5c:	f899 2011 	ldrb.w	r2, [r9, #17]
 800ca60:	1e53      	subs	r3, r2, #1
 800ca62:	b2db      	uxtb	r3, r3
 800ca64:	2b01      	cmp	r3, #1
 800ca66:	d91b      	bls.n	800caa0 <dwt_ioctl+0xe64>
 800ca68:	2a03      	cmp	r2, #3
 800ca6a:	bf0c      	ite	eq
 800ca6c:	f44f 17a0 	moveq.w	r7, #1310720	; 0x140000
 800ca70:	f44f 17b0 	movne.w	r7, #1441792	; 0x160000
 800ca74:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800ca78:	b112      	cbz	r2, 800ca80 <dwt_ioctl+0xe44>
 800ca7a:	f899 300c 	ldrb.w	r3, [r9, #12]
 800ca7e:	b9c3      	cbnz	r3, 800cab2 <dwt_ioctl+0xe76>
 800ca80:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800ca84:	2900      	cmp	r1, #0
 800ca86:	d0bf      	beq.n	800ca08 <dwt_ioctl+0xdcc>
 800ca88:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d0bb      	beq.n	800ca08 <dwt_ioctl+0xdcc>
 800ca90:	f899 200c 	ldrb.w	r2, [r9, #12]
 800ca94:	9100      	str	r1, [sp, #0]
 800ca96:	4639      	mov	r1, r7
 800ca98:	4630      	mov	r0, r6
 800ca9a:	f7fc ffe6 	bl	8009a6a <dwt_readfromdevice>
 800ca9e:	e7b3      	b.n	800ca08 <dwt_ioctl+0xdcc>
 800caa0:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800caa2:	7b9b      	ldrb	r3, [r3, #14]
 800caa4:	2b03      	cmp	r3, #3
 800caa6:	bf0c      	ite	eq
 800caa8:	f44f 1798 	moveq.w	r7, #1245184	; 0x130000
 800caac:	f44f 1790 	movne.w	r7, #1179648	; 0x120000
 800cab0:	e7e0      	b.n	800ca74 <dwt_ioctl+0xe38>
 800cab2:	9200      	str	r2, [sp, #0]
 800cab4:	2200      	movs	r2, #0
 800cab6:	4639      	mov	r1, r7
 800cab8:	4630      	mov	r0, r6
 800caba:	f7fc ffd6 	bl	8009a6a <dwt_readfromdevice>
 800cabe:	e7df      	b.n	800ca80 <dwt_ioctl+0xe44>
 800cac0:	f06f 0302 	mvn.w	r3, #2
 800cac4:	e7a1      	b.n	800ca0a <dwt_ioctl+0xdce>
 800cac6:	f06f 0301 	mvn.w	r3, #1
 800caca:	e79e      	b.n	800ca0a <dwt_ioctl+0xdce>
 800cacc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cad0:	e79b      	b.n	800ca0a <dwt_ioctl+0xdce>
 800cad2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cad6:	e798      	b.n	800ca0a <dwt_ioctl+0xdce>
 800cad8:	7a23      	ldrb	r3, [r4, #8]
 800cada:	79e1      	ldrb	r1, [r4, #7]
 800cadc:	79a2      	ldrb	r2, [r4, #6]
 800cade:	00d2      	lsls	r2, r2, #3
 800cae0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800cae4:	4313      	orrs	r3, r2
 800cae6:	7962      	ldrb	r2, [r4, #5]
 800cae8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800caec:	7922      	ldrb	r2, [r4, #4]
 800caee:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800caf2:	78e2      	ldrb	r2, [r4, #3]
 800caf4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800caf8:	78a2      	ldrb	r2, [r4, #2]
 800cafa:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 800cafe:	7862      	ldrb	r2, [r4, #1]
 800cb00:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800cb04:	7822      	ldrb	r2, [r4, #0]
 800cb06:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800cb0a:	b29b      	uxth	r3, r3
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	490b      	ldr	r1, [pc, #44]	; (800cb3c <dwt_ioctl+0xf00>)
 800cb10:	f7fd fbcd 	bl	800a2ae <dwt_write16bitoffsetreg>
 800cb14:	2500      	movs	r5, #0
 800cb16:	f7ff b93b 	b.w	800bd90 <dwt_ioctl+0x154>
 800cb1a:	bf00      	nop
 800cb1c:	000f0028 	.word	0x000f0028
 800cb20:	00020008 	.word	0x00020008
 800cb24:	00010034 	.word	0x00010034
 800cb28:	00010044 	.word	0x00010044
 800cb2c:	0001ff80 	.word	0x0001ff80
 800cb30:	00010048 	.word	0x00010048
 800cb34:	0001004c 	.word	0x0001004c
 800cb38:	00010050 	.word	0x00010050
 800cb3c:	00010030 	.word	0x00010030
 800cb40:	2c00      	cmp	r4, #0
 800cb42:	f000 87e1 	beq.w	800db08 <dwt_ioctl+0x1ecc>
 800cb46:	7863      	ldrb	r3, [r4, #1]
 800cb48:	b133      	cbz	r3, 800cb58 <dwt_ioctl+0xf1c>
 800cb4a:	085b      	lsrs	r3, r3, #1
 800cb4c:	3b01      	subs	r3, #1
 800cb4e:	b2db      	uxtb	r3, r3
 800cb50:	7023      	strb	r3, [r4, #0]
 800cb52:	2500      	movs	r5, #0
 800cb54:	f7ff b91c 	b.w	800bd90 <dwt_ioctl+0x154>
 800cb58:	2300      	movs	r3, #0
 800cb5a:	e7f9      	b.n	800cb50 <dwt_ioctl+0xf14>
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	49d0      	ldr	r1, [pc, #832]	; (800cea0 <dwt_ioctl+0x1264>)
 800cb60:	f7fc ff8d 	bl	8009a7e <dwt_read32bitoffsetreg>
 800cb64:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800cb68:	8023      	strh	r3, [r4, #0]
 800cb6a:	f3c0 400b 	ubfx	r0, r0, #16, #12
 800cb6e:	8060      	strh	r0, [r4, #2]
 800cb70:	2200      	movs	r2, #0
 800cb72:	49cc      	ldr	r1, [pc, #816]	; (800cea4 <dwt_ioctl+0x1268>)
 800cb74:	4630      	mov	r0, r6
 800cb76:	f7fc ff82 	bl	8009a7e <dwt_read32bitoffsetreg>
 800cb7a:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800cb7e:	80a3      	strh	r3, [r4, #4]
 800cb80:	f3c0 400b 	ubfx	r0, r0, #16, #12
 800cb84:	80e0      	strh	r0, [r4, #6]
 800cb86:	2200      	movs	r2, #0
 800cb88:	49c7      	ldr	r1, [pc, #796]	; (800cea8 <dwt_ioctl+0x126c>)
 800cb8a:	4630      	mov	r0, r6
 800cb8c:	f7fc ff77 	bl	8009a7e <dwt_read32bitoffsetreg>
 800cb90:	7220      	strb	r0, [r4, #8]
 800cb92:	0c00      	lsrs	r0, r0, #16
 800cb94:	7260      	strb	r0, [r4, #9]
 800cb96:	2200      	movs	r2, #0
 800cb98:	49c4      	ldr	r1, [pc, #784]	; (800ceac <dwt_ioctl+0x1270>)
 800cb9a:	4630      	mov	r0, r6
 800cb9c:	f7fc ff6f 	bl	8009a7e <dwt_read32bitoffsetreg>
 800cba0:	f3c0 430b 	ubfx	r3, r0, #16, #12
 800cba4:	81a3      	strh	r3, [r4, #12]
 800cba6:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800cbaa:	8160      	strh	r0, [r4, #10]
 800cbac:	2200      	movs	r2, #0
 800cbae:	49c0      	ldr	r1, [pc, #768]	; (800ceb0 <dwt_ioctl+0x1274>)
 800cbb0:	4630      	mov	r0, r6
 800cbb2:	f7fc ff64 	bl	8009a7e <dwt_read32bitoffsetreg>
 800cbb6:	f3c0 430b 	ubfx	r3, r0, #16, #12
 800cbba:	f8a4 300f 	strh.w	r3, [r4, #15]
 800cbbe:	73a0      	strb	r0, [r4, #14]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	49bc      	ldr	r1, [pc, #752]	; (800ceb4 <dwt_ioctl+0x1278>)
 800cbc4:	4630      	mov	r0, r6
 800cbc6:	f7fc ff5a 	bl	8009a7e <dwt_read32bitoffsetreg>
 800cbca:	7460      	strb	r0, [r4, #17]
 800cbcc:	0c00      	lsrs	r0, r0, #16
 800cbce:	74a0      	strb	r0, [r4, #18]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	49b9      	ldr	r1, [pc, #740]	; (800ceb8 <dwt_ioctl+0x127c>)
 800cbd4:	4630      	mov	r0, r6
 800cbd6:	f7fc ff52 	bl	8009a7e <dwt_read32bitoffsetreg>
 800cbda:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800cbde:	f8a4 0013 	strh.w	r0, [r4, #19]
 800cbe2:	2500      	movs	r5, #0
 800cbe4:	7565      	strb	r5, [r4, #21]
 800cbe6:	75a5      	strb	r5, [r4, #22]
 800cbe8:	462a      	mov	r2, r5
 800cbea:	49b4      	ldr	r1, [pc, #720]	; (800cebc <dwt_ioctl+0x1280>)
 800cbec:	4630      	mov	r0, r6
 800cbee:	f7fc ff6e 	bl	8009ace <dwt_read8bitoffsetreg>
 800cbf2:	75e0      	strb	r0, [r4, #23]
 800cbf4:	f7ff b8cc 	b.w	800bd90 <dwt_ioctl+0x154>
 800cbf8:	4611      	mov	r1, r2
 800cbfa:	f7fd fdbb 	bl	800a774 <ull_configeventcounters>
 800cbfe:	2500      	movs	r5, #0
 800cc00:	f7ff b8c6 	b.w	800bd90 <dwt_ioctl+0x154>
 800cc04:	2c00      	cmp	r4, #0
 800cc06:	f000 8782 	beq.w	800db0e <dwt_ioctl+0x1ed2>
 800cc0a:	8823      	ldrh	r3, [r4, #0]
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	49ac      	ldr	r1, [pc, #688]	; (800cec0 <dwt_ioctl+0x1284>)
 800cc10:	f7fd fb4d 	bl	800a2ae <dwt_write16bitoffsetreg>
 800cc14:	2500      	movs	r5, #0
 800cc16:	f7ff b8bb 	b.w	800bd90 <dwt_ioctl+0x154>
 800cc1a:	2c00      	cmp	r4, #0
 800cc1c:	f000 877a 	beq.w	800db14 <dwt_ioctl+0x1ed8>
 800cc20:	6825      	ldr	r5, [r4, #0]
 800cc22:	b935      	cbnz	r5, 800cc32 <dwt_ioctl+0xff6>
 800cc24:	2300      	movs	r3, #0
 800cc26:	461a      	mov	r2, r3
 800cc28:	49a6      	ldr	r1, [pc, #664]	; (800cec4 <dwt_ioctl+0x1288>)
 800cc2a:	f7fd fb40 	bl	800a2ae <dwt_write16bitoffsetreg>
 800cc2e:	f7ff b8af 	b.w	800bd90 <dwt_ioctl+0x154>
 800cc32:	7962      	ldrb	r2, [r4, #5]
 800cc34:	7923      	ldrb	r3, [r4, #4]
 800cc36:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cc3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cc3e:	2200      	movs	r2, #0
 800cc40:	49a0      	ldr	r1, [pc, #640]	; (800cec4 <dwt_ioctl+0x1288>)
 800cc42:	f7fd fb34 	bl	800a2ae <dwt_write16bitoffsetreg>
 800cc46:	2500      	movs	r5, #0
 800cc48:	f7ff b8a2 	b.w	800bd90 <dwt_ioctl+0x154>
 800cc4c:	2c00      	cmp	r4, #0
 800cc4e:	f000 8764 	beq.w	800db1a <dwt_ioctl+0x1ede>
 800cc52:	6823      	ldr	r3, [r4, #0]
 800cc54:	b94b      	cbnz	r3, 800cc6a <dwt_ioctl+0x102e>
 800cc56:	2500      	movs	r5, #0
 800cc58:	9500      	str	r5, [sp, #0]
 800cc5a:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 800cc5e:	462a      	mov	r2, r5
 800cc60:	2110      	movs	r1, #16
 800cc62:	f7fe fb61 	bl	800b328 <dwt_modify16bitoffsetreg>
 800cc66:	f7ff b893 	b.w	800bd90 <dwt_ioctl+0x154>
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	2134      	movs	r1, #52	; 0x34
 800cc6e:	f7fd fb7b 	bl	800a368 <dwt_write32bitoffsetreg>
 800cc72:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc76:	9300      	str	r3, [sp, #0]
 800cc78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	2110      	movs	r1, #16
 800cc80:	4630      	mov	r0, r6
 800cc82:	f7fe fb51 	bl	800b328 <dwt_modify16bitoffsetreg>
 800cc86:	2500      	movs	r5, #0
 800cc88:	f7ff b882 	b.w	800bd90 <dwt_ioctl+0x154>
 800cc8c:	2c00      	cmp	r4, #0
 800cc8e:	f000 8747 	beq.w	800db20 <dwt_ioctl+0x1ee4>
 800cc92:	8861      	ldrh	r1, [r4, #2]
 800cc94:	f7fd fd82 	bl	800a79c <ull_aon_read>
 800cc98:	7020      	strb	r0, [r4, #0]
 800cc9a:	2500      	movs	r5, #0
 800cc9c:	f7ff b878 	b.w	800bd90 <dwt_ioctl+0x154>
 800cca0:	2c00      	cmp	r4, #0
 800cca2:	f000 8740 	beq.w	800db26 <dwt_ioctl+0x1eea>
 800cca6:	78a2      	ldrb	r2, [r4, #2]
 800cca8:	8821      	ldrh	r1, [r4, #0]
 800ccaa:	f7fd fd97 	bl	800a7dc <ull_aon_write>
 800ccae:	2500      	movs	r5, #0
 800ccb0:	f7ff b86e 	b.w	800bd90 <dwt_ioctl+0x154>
 800ccb4:	4b84      	ldr	r3, [pc, #528]	; (800cec8 <dwt_ioctl+0x128c>)
 800ccb6:	4a85      	ldr	r2, [pc, #532]	; (800cecc <dwt_ioctl+0x1290>)
 800ccb8:	2d01      	cmp	r5, #1
 800ccba:	bf18      	it	ne
 800ccbc:	4613      	movne	r3, r2
 800ccbe:	2d01      	cmp	r5, #1
 800ccc0:	4983      	ldr	r1, [pc, #524]	; (800ced0 <dwt_ioctl+0x1294>)
 800ccc2:	bf18      	it	ne
 800ccc4:	f04f 110c 	movne.w	r1, #786444	; 0xc000c
 800ccc8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800ccca:	7b92      	ldrb	r2, [r2, #14]
 800cccc:	2a01      	cmp	r2, #1
 800ccce:	d012      	beq.n	800ccf6 <dwt_ioctl+0x10ba>
 800ccd0:	2a03      	cmp	r2, #3
 800ccd2:	d117      	bne.n	800cd04 <dwt_ioctl+0x10c8>
 800ccd4:	f5a2 12c0 	sub.w	r2, r2, #1572864	; 0x180000
 800ccd8:	3a01      	subs	r2, #1
 800ccda:	441a      	add	r2, r3
 800ccdc:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800cce0:	f7fc fee3 	bl	8009aaa <dwt_read16bitoffsetreg>
 800cce4:	09c0      	lsrs	r0, r0, #7
 800cce6:	8020      	strh	r0, [r4, #0]
 800cce8:	8825      	ldrh	r5, [r4, #0]
 800ccea:	3500      	adds	r5, #0
 800ccec:	bf18      	it	ne
 800ccee:	2501      	movne	r5, #1
 800ccf0:	426d      	negs	r5, r5
 800ccf2:	f7ff b84d 	b.w	800bd90 <dwt_ioctl+0x154>
 800ccf6:	2202      	movs	r2, #2
 800ccf8:	4619      	mov	r1, r3
 800ccfa:	f7fc fed6 	bl	8009aaa <dwt_read16bitoffsetreg>
 800ccfe:	09c0      	lsrs	r0, r0, #7
 800cd00:	8020      	strh	r0, [r4, #0]
 800cd02:	e7f1      	b.n	800cce8 <dwt_ioctl+0x10ac>
 800cd04:	2202      	movs	r2, #2
 800cd06:	f7fc fed0 	bl	8009aaa <dwt_read16bitoffsetreg>
 800cd0a:	09c0      	lsrs	r0, r0, #7
 800cd0c:	8020      	strh	r0, [r4, #0]
 800cd0e:	e7eb      	b.n	800cce8 <dwt_ioctl+0x10ac>
 800cd10:	2c00      	cmp	r4, #0
 800cd12:	f000 870b 	beq.w	800db2c <dwt_ioctl+0x1ef0>
 800cd16:	7821      	ldrb	r1, [r4, #0]
 800cd18:	f7fe fb20 	bl	800b35c <ull_setleds>
 800cd1c:	2500      	movs	r5, #0
 800cd1e:	f7ff b837 	b.w	800bd90 <dwt_ioctl+0x154>
 800cd22:	4611      	mov	r1, r2
 800cd24:	f7fe f9a2 	bl	800b06c <ull_setdwstate>
 800cd28:	2500      	movs	r5, #0
 800cd2a:	f7ff b831 	b.w	800bd90 <dwt_ioctl+0x154>
 800cd2e:	9400      	str	r4, [sp, #0]
 800cd30:	2304      	movs	r3, #4
 800cd32:	2200      	movs	r2, #0
 800cd34:	211c      	movs	r1, #28
 800cd36:	f7fc fe98 	bl	8009a6a <dwt_readfromdevice>
 800cd3a:	2500      	movs	r5, #0
 800cd3c:	f7ff b828 	b.w	800bd90 <dwt_ioctl+0x154>
 800cd40:	2c00      	cmp	r4, #0
 800cd42:	f000 86f6 	beq.w	800db32 <dwt_ioctl+0x1ef6>
 800cd46:	2202      	movs	r2, #2
 800cd48:	2144      	movs	r1, #68	; 0x44
 800cd4a:	f7fc feae 	bl	8009aaa <dwt_read16bitoffsetreg>
 800cd4e:	f3c0 2000 	ubfx	r0, r0, #8, #1
 800cd52:	7020      	strb	r0, [r4, #0]
 800cd54:	2500      	movs	r5, #0
 800cd56:	f7ff b81b 	b.w	800bd90 <dwt_ioctl+0x154>
 800cd5a:	2c00      	cmp	r4, #0
 800cd5c:	f000 86ec 	beq.w	800db38 <dwt_ioctl+0x1efc>
 800cd60:	2200      	movs	r2, #0
 800cd62:	2144      	movs	r1, #68	; 0x44
 800cd64:	f7fc feb3 	bl	8009ace <dwt_read8bitoffsetreg>
 800cd68:	f000 0001 	and.w	r0, r0, #1
 800cd6c:	7020      	strb	r0, [r4, #0]
 800cd6e:	2500      	movs	r5, #0
 800cd70:	f7ff b80e 	b.w	800bd90 <dwt_ioctl+0x154>
 800cd74:	2c00      	cmp	r4, #0
 800cd76:	f000 86e2 	beq.w	800db3e <dwt_ioctl+0x1f02>
 800cd7a:	8862      	ldrh	r2, [r4, #2]
 800cd7c:	8821      	ldrh	r1, [r4, #0]
 800cd7e:	f7fe f9d1 	bl	800b124 <ull_configureframefilter>
 800cd82:	2500      	movs	r5, #0
 800cd84:	f7ff b804 	b.w	800bd90 <dwt_ioctl+0x154>
 800cd88:	9400      	str	r4, [sp, #0]
 800cd8a:	2308      	movs	r3, #8
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	2104      	movs	r1, #4
 800cd90:	f7fd fa82 	bl	800a298 <dwt_writetodevice>
 800cd94:	2500      	movs	r5, #0
 800cd96:	f7fe bffb 	b.w	800bd90 <dwt_ioctl+0x154>
 800cd9a:	9400      	str	r4, [sp, #0]
 800cd9c:	2308      	movs	r3, #8
 800cd9e:	2200      	movs	r2, #0
 800cda0:	2104      	movs	r1, #4
 800cda2:	f7fc fe62 	bl	8009a6a <dwt_readfromdevice>
 800cda6:	2500      	movs	r5, #0
 800cda8:	f7fe bff2 	b.w	800bd90 <dwt_ioctl+0x154>
 800cdac:	2c00      	cmp	r4, #0
 800cdae:	f000 86c9 	beq.w	800db44 <dwt_ioctl+0x1f08>
 800cdb2:	8823      	ldrh	r3, [r4, #0]
 800cdb4:	2202      	movs	r2, #2
 800cdb6:	210c      	movs	r1, #12
 800cdb8:	f7fd fa79 	bl	800a2ae <dwt_write16bitoffsetreg>
 800cdbc:	2500      	movs	r5, #0
 800cdbe:	f7fe bfe7 	b.w	800bd90 <dwt_ioctl+0x154>
 800cdc2:	2c00      	cmp	r4, #0
 800cdc4:	f000 86c1 	beq.w	800db4a <dwt_ioctl+0x1f0e>
 800cdc8:	8823      	ldrh	r3, [r4, #0]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	210c      	movs	r1, #12
 800cdce:	f7fd fa6e 	bl	800a2ae <dwt_write16bitoffsetreg>
 800cdd2:	2500      	movs	r5, #0
 800cdd4:	f7fe bfdc 	b.w	800bd90 <dwt_ioctl+0x154>
 800cdd8:	4621      	mov	r1, r4
 800cdda:	f7fd fa3b 	bl	800a254 <ull_readrxtimestamp>
 800cdde:	2500      	movs	r5, #0
 800cde0:	f7fe bfd6 	b.w	800bd90 <dwt_ioctl+0x154>
 800cde4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800cde6:	7b9b      	ldrb	r3, [r3, #14]
 800cde8:	2b01      	cmp	r3, #1
 800cdea:	d00b      	beq.n	800ce04 <dwt_ioctl+0x11c8>
 800cdec:	2b03      	cmp	r3, #3
 800cdee:	d112      	bne.n	800ce16 <dwt_ioctl+0x11da>
 800cdf0:	9400      	str	r4, [sp, #0]
 800cdf2:	2305      	movs	r3, #5
 800cdf4:	2220      	movs	r2, #32
 800cdf6:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800cdfa:	f7fc fe36 	bl	8009a6a <dwt_readfromdevice>
 800cdfe:	2500      	movs	r5, #0
 800ce00:	f7fe bfc6 	b.w	800bd90 <dwt_ioctl+0x154>
 800ce04:	9400      	str	r4, [sp, #0]
 800ce06:	2305      	movs	r3, #5
 800ce08:	2200      	movs	r2, #0
 800ce0a:	4932      	ldr	r1, [pc, #200]	; (800ced4 <dwt_ioctl+0x1298>)
 800ce0c:	f7fc fe2d 	bl	8009a6a <dwt_readfromdevice>
 800ce10:	2500      	movs	r5, #0
 800ce12:	f7fe bfbd 	b.w	800bd90 <dwt_ioctl+0x154>
 800ce16:	9400      	str	r4, [sp, #0]
 800ce18:	2305      	movs	r3, #5
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800ce20:	f7fc fe23 	bl	8009a6a <dwt_readfromdevice>
 800ce24:	2500      	movs	r5, #0
 800ce26:	f7fe bfb3 	b.w	800bd90 <dwt_ioctl+0x154>
 800ce2a:	2500      	movs	r5, #0
 800ce2c:	f804 5b01 	strb.w	r5, [r4], #1
 800ce30:	9400      	str	r4, [sp, #0]
 800ce32:	2304      	movs	r3, #4
 800ce34:	462a      	mov	r2, r5
 800ce36:	216c      	movs	r1, #108	; 0x6c
 800ce38:	f7fc fe17 	bl	8009a6a <dwt_readfromdevice>
 800ce3c:	f7fe bfa8 	b.w	800bd90 <dwt_ioctl+0x154>
 800ce40:	2c00      	cmp	r4, #0
 800ce42:	f000 8685 	beq.w	800db50 <dwt_ioctl+0x1f14>
 800ce46:	2201      	movs	r2, #1
 800ce48:	2160      	movs	r1, #96	; 0x60
 800ce4a:	f7fc fe18 	bl	8009a7e <dwt_read32bitoffsetreg>
 800ce4e:	6020      	str	r0, [r4, #0]
 800ce50:	2500      	movs	r5, #0
 800ce52:	f7fe bf9d 	b.w	800bd90 <dwt_ioctl+0x154>
 800ce56:	2c00      	cmp	r4, #0
 800ce58:	f000 867d 	beq.w	800db56 <dwt_ioctl+0x1f1a>
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	2160      	movs	r1, #96	; 0x60
 800ce60:	f7fc fe0d 	bl	8009a7e <dwt_read32bitoffsetreg>
 800ce64:	6020      	str	r0, [r4, #0]
 800ce66:	2500      	movs	r5, #0
 800ce68:	f7fe bf92 	b.w	800bd90 <dwt_ioctl+0x154>
 800ce6c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ce6e:	7b9b      	ldrb	r3, [r3, #14]
 800ce70:	2b01      	cmp	r3, #1
 800ce72:	d00b      	beq.n	800ce8c <dwt_ioctl+0x1250>
 800ce74:	2b03      	cmp	r3, #3
 800ce76:	d131      	bne.n	800cedc <dwt_ioctl+0x12a0>
 800ce78:	9400      	str	r4, [sp, #0]
 800ce7a:	2305      	movs	r3, #5
 800ce7c:	2228      	movs	r2, #40	; 0x28
 800ce7e:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800ce82:	f7fc fdf2 	bl	8009a6a <dwt_readfromdevice>
 800ce86:	2500      	movs	r5, #0
 800ce88:	f7fe bf82 	b.w	800bd90 <dwt_ioctl+0x154>
 800ce8c:	9400      	str	r4, [sp, #0]
 800ce8e:	2305      	movs	r3, #5
 800ce90:	2200      	movs	r2, #0
 800ce92:	4911      	ldr	r1, [pc, #68]	; (800ced8 <dwt_ioctl+0x129c>)
 800ce94:	f7fc fde9 	bl	8009a6a <dwt_readfromdevice>
 800ce98:	2500      	movs	r5, #0
 800ce9a:	f7fe bf79 	b.w	800bd90 <dwt_ioctl+0x154>
 800ce9e:	bf00      	nop
 800cea0:	000f0004 	.word	0x000f0004
 800cea4:	000f0008 	.word	0x000f0008
 800cea8:	000f000c 	.word	0x000f000c
 800ceac:	000f0010 	.word	0x000f0010
 800ceb0:	000f0014 	.word	0x000f0014
 800ceb4:	000f0018 	.word	0x000f0018
 800ceb8:	000f001c 	.word	0x000f001c
 800cebc:	000f0020 	.word	0x000f0020
 800cec0:	00060004 	.word	0x00060004
 800cec4:	0011001c 	.word	0x0011001c
 800cec8:	00180034 	.word	0x00180034
 800cecc:	0018002c 	.word	0x0018002c
 800ced0:	000c0014 	.word	0x000c0014
 800ced4:	00180020 	.word	0x00180020
 800ced8:	00180028 	.word	0x00180028
 800cedc:	9400      	str	r4, [sp, #0]
 800cede:	2305      	movs	r3, #5
 800cee0:	2200      	movs	r2, #0
 800cee2:	49ce      	ldr	r1, [pc, #824]	; (800d21c <dwt_ioctl+0x15e0>)
 800cee4:	f7fc fdc1 	bl	8009a6a <dwt_readfromdevice>
 800cee8:	2500      	movs	r5, #0
 800ceea:	f7fe bf51 	b.w	800bd90 <dwt_ioctl+0x154>
 800ceee:	2c00      	cmp	r4, #0
 800cef0:	f000 8634 	beq.w	800db5c <dwt_ioctl+0x1f20>
 800cef4:	2200      	movs	r2, #0
 800cef6:	211c      	movs	r1, #28
 800cef8:	f7fc fdc1 	bl	8009a7e <dwt_read32bitoffsetreg>
 800cefc:	6020      	str	r0, [r4, #0]
 800cefe:	2500      	movs	r5, #0
 800cf00:	f7fe bf46 	b.w	800bd90 <dwt_ioctl+0x154>
 800cf04:	2c00      	cmp	r4, #0
 800cf06:	f000 862c 	beq.w	800db62 <dwt_ioctl+0x1f26>
 800cf0a:	8825      	ldrh	r5, [r4, #0]
 800cf0c:	6867      	ldr	r7, [r4, #4]
 800cf0e:	7a23      	ldrb	r3, [r4, #8]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	f000 8629 	beq.w	800db68 <dwt_ioctl+0x1f2c>
 800cf16:	463c      	mov	r4, r7
 800cf18:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 800cf1c:	4629      	mov	r1, r5
 800cf1e:	4630      	mov	r0, r6
 800cf20:	f7fd fa00 	bl	800a324 <_dwt_otpread>
 800cf24:	f844 0b04 	str.w	r0, [r4], #4
 800cf28:	3501      	adds	r5, #1
 800cf2a:	b2ad      	uxth	r5, r5
 800cf2c:	42bc      	cmp	r4, r7
 800cf2e:	d1f5      	bne.n	800cf1c <dwt_ioctl+0x12e0>
 800cf30:	2500      	movs	r5, #0
 800cf32:	f7fe bf2d 	b.w	800bd90 <dwt_ioctl+0x154>
 800cf36:	2c00      	cmp	r4, #0
 800cf38:	f000 8619 	beq.w	800db6e <dwt_ioctl+0x1f32>
 800cf3c:	7823      	ldrb	r3, [r4, #0]
 800cf3e:	2201      	movs	r2, #1
 800cf40:	2124      	movs	r1, #36	; 0x24
 800cf42:	f7fd fb9f 	bl	800a684 <dwt_write8bitoffsetreg>
 800cf46:	2500      	movs	r5, #0
 800cf48:	f7fe bf22 	b.w	800bd90 <dwt_ioctl+0x154>
 800cf4c:	f7fe f90e 	bl	800b16c <ull_run_pgfcal>
 800cf50:	4605      	mov	r5, r0
 800cf52:	f7fe bf1d 	b.w	800bd90 <dwt_ioctl+0x154>
 800cf56:	4611      	mov	r1, r2
 800cf58:	f7fe fa4e 	bl	800b3f8 <ull_pgf_cal>
 800cf5c:	4605      	mov	r5, r0
 800cf5e:	f7fe bf17 	b.w	800bd90 <dwt_ioctl+0x154>
 800cf62:	2c00      	cmp	r4, #0
 800cf64:	f000 8606 	beq.w	800db74 <dwt_ioctl+0x1f38>
 800cf68:	78a5      	ldrb	r5, [r4, #2]
 800cf6a:	2101      	movs	r1, #1
 800cf6c:	f7fd f9b0 	bl	800a2d0 <ull_force_clocks>
 800cf70:	2100      	movs	r1, #0
 800cf72:	4630      	mov	r0, r6
 800cf74:	f7fd fe6e 	bl	800ac54 <ull_enable_rf_tx>
 800cf78:	4630      	mov	r0, r6
 800cf7a:	f7fd fe9f 	bl	800acbc <ull_enable_rftx_blocks>
 800cf7e:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 800cf82:	2200      	movs	r2, #0
 800cf84:	49a6      	ldr	r1, [pc, #664]	; (800d220 <dwt_ioctl+0x15e4>)
 800cf86:	4630      	mov	r0, r6
 800cf88:	f7fd fb7c 	bl	800a684 <dwt_write8bitoffsetreg>
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	9300      	str	r3, [sp, #0]
 800cf90:	23ff      	movs	r3, #255	; 0xff
 800cf92:	2200      	movs	r2, #0
 800cf94:	49a3      	ldr	r1, [pc, #652]	; (800d224 <dwt_ioctl+0x15e8>)
 800cf96:	4630      	mov	r0, r6
 800cf98:	f7fd ffaa 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800cf9c:	4fa1      	ldr	r7, [pc, #644]	; (800d224 <dwt_ioctl+0x15e8>)
 800cf9e:	2500      	movs	r5, #0
 800cfa0:	462a      	mov	r2, r5
 800cfa2:	4639      	mov	r1, r7
 800cfa4:	4630      	mov	r0, r6
 800cfa6:	f7fc fd92 	bl	8009ace <dwt_read8bitoffsetreg>
 800cfaa:	f010 0f01 	tst.w	r0, #1
 800cfae:	d1f7      	bne.n	800cfa0 <dwt_ioctl+0x1364>
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	499d      	ldr	r1, [pc, #628]	; (800d228 <dwt_ioctl+0x15ec>)
 800cfb4:	4630      	mov	r0, r6
 800cfb6:	f7fc fd78 	bl	8009aaa <dwt_read16bitoffsetreg>
 800cfba:	4605      	mov	r5, r0
 800cfbc:	4630      	mov	r0, r6
 800cfbe:	f7fd fb03 	bl	800a5c8 <ull_disable_rftx_blocks>
 800cfc2:	2100      	movs	r1, #0
 800cfc4:	4630      	mov	r0, r6
 800cfc6:	f7fd fb09 	bl	800a5dc <ull_disable_rf_tx>
 800cfca:	2105      	movs	r1, #5
 800cfcc:	4630      	mov	r0, r6
 800cfce:	f7fd f97f 	bl	800a2d0 <ull_force_clocks>
 800cfd2:	f3c5 050b 	ubfx	r5, r5, #0, #12
 800cfd6:	8025      	strh	r5, [r4, #0]
 800cfd8:	2500      	movs	r5, #0
 800cfda:	f7fe bed9 	b.w	800bd90 <dwt_ioctl+0x154>
 800cfde:	2102      	movs	r1, #2
 800cfe0:	f7fe f844 	bl	800b06c <ull_setdwstate>
 800cfe4:	2101      	movs	r1, #1
 800cfe6:	4630      	mov	r0, r6
 800cfe8:	f7fe f840 	bl	800b06c <ull_setdwstate>
 800cfec:	2432      	movs	r4, #50	; 0x32
 800cfee:	f04f 0814 	mov.w	r8, #20
 800cff2:	2700      	movs	r7, #0
 800cff4:	2544      	movs	r5, #68	; 0x44
 800cff6:	4640      	mov	r0, r8
 800cff8:	f7f4 faab 	bl	8001552 <deca_usleep>
 800cffc:	463a      	mov	r2, r7
 800cffe:	4629      	mov	r1, r5
 800d000:	4630      	mov	r0, r6
 800d002:	f7fc fd64 	bl	8009ace <dwt_read8bitoffsetreg>
 800d006:	f010 0f02 	tst.w	r0, #2
 800d00a:	d105      	bne.n	800d018 <dwt_ioctl+0x13dc>
 800d00c:	1e63      	subs	r3, r4, #1
 800d00e:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800d012:	d1f0      	bne.n	800cff6 <dwt_ioctl+0x13ba>
 800d014:	2501      	movs	r5, #1
 800d016:	e000      	b.n	800d01a <dwt_ioctl+0x13de>
 800d018:	2500      	movs	r5, #0
 800d01a:	426d      	negs	r5, r5
 800d01c:	f7fe beb8 	b.w	800bd90 <dwt_ioctl+0x154>
 800d020:	2c00      	cmp	r4, #0
 800d022:	f000 85aa 	beq.w	800db7a <dwt_ioctl+0x1f3e>
 800d026:	7823      	ldrb	r3, [r4, #0]
 800d028:	031b      	lsls	r3, r3, #12
 800d02a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800d02e:	7862      	ldrb	r2, [r4, #1]
 800d030:	2a01      	cmp	r2, #1
 800d032:	bf08      	it	eq
 800d034:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 800d038:	9300      	str	r3, [sp, #0]
 800d03a:	f46f 43e2 	mvn.w	r3, #28928	; 0x7100
 800d03e:	2200      	movs	r2, #0
 800d040:	497a      	ldr	r1, [pc, #488]	; (800d22c <dwt_ioctl+0x15f0>)
 800d042:	f7fd fde3 	bl	800ac0c <dwt_modify32bitoffsetreg>
 800d046:	2500      	movs	r5, #0
 800d048:	f7fe bea2 	b.w	800bd90 <dwt_ioctl+0x154>
 800d04c:	2c00      	cmp	r4, #0
 800d04e:	f000 8597 	beq.w	800db80 <dwt_ioctl+0x1f44>
 800d052:	6862      	ldr	r2, [r4, #4]
 800d054:	6821      	ldr	r1, [r4, #0]
 800d056:	f7fd fefb 	bl	800ae50 <ull_setgpiomode>
 800d05a:	2500      	movs	r5, #0
 800d05c:	f7fe be98 	b.w	800bd90 <dwt_ioctl+0x154>
 800d060:	2c00      	cmp	r4, #0
 800d062:	f000 8590 	beq.w	800db86 <dwt_ioctl+0x1f4a>
 800d066:	8823      	ldrh	r3, [r4, #0]
 800d068:	2200      	movs	r2, #0
 800d06a:	4971      	ldr	r1, [pc, #452]	; (800d230 <dwt_ioctl+0x15f4>)
 800d06c:	f7fd f91f 	bl	800a2ae <dwt_write16bitoffsetreg>
 800d070:	2500      	movs	r5, #0
 800d072:	f7fe be8d 	b.w	800bd90 <dwt_ioctl+0x154>
 800d076:	2c00      	cmp	r4, #0
 800d078:	f000 8588 	beq.w	800db8c <dwt_ioctl+0x1f50>
 800d07c:	6862      	ldr	r2, [r4, #4]
 800d07e:	8821      	ldrh	r1, [r4, #0]
 800d080:	f7fe f9ea 	bl	800b458 <ull_setgpiovalue>
 800d084:	2500      	movs	r5, #0
 800d086:	f7fe be83 	b.w	800bd90 <dwt_ioctl+0x154>
 800d08a:	2c00      	cmp	r4, #0
 800d08c:	f000 8581 	beq.w	800db92 <dwt_ioctl+0x1f56>
 800d090:	7865      	ldrb	r5, [r4, #1]
 800d092:	7823      	ldrb	r3, [r4, #0]
 800d094:	b18b      	cbz	r3, 800d0ba <dwt_ioctl+0x147e>
 800d096:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d098:	2200      	movs	r2, #0
 800d09a:	739a      	strb	r2, [r3, #14]
 800d09c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0a0:	2208      	movs	r2, #8
 800d0a2:	b1e5      	cbz	r5, 800d0de <dwt_ioctl+0x14a2>
 800d0a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d0a8:	9200      	str	r2, [sp, #0]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	2110      	movs	r1, #16
 800d0ae:	4630      	mov	r0, r6
 800d0b0:	f7fd fdac 	bl	800ac0c <dwt_modify32bitoffsetreg>
 800d0b4:	2500      	movs	r5, #0
 800d0b6:	f7fe be6b 	b.w	800bd90 <dwt_ioctl+0x154>
 800d0ba:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d0bc:	2201      	movs	r2, #1
 800d0be:	739a      	strb	r2, [r3, #14]
 800d0c0:	2318      	movs	r3, #24
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	495b      	ldr	r1, [pc, #364]	; (800d234 <dwt_ioctl+0x15f8>)
 800d0c6:	f7fd f94f 	bl	800a368 <dwt_write32bitoffsetreg>
 800d0ca:	23e8      	movs	r3, #232	; 0xe8
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	495a      	ldr	r1, [pc, #360]	; (800d238 <dwt_ioctl+0x15fc>)
 800d0d0:	4630      	mov	r0, r6
 800d0d2:	f7fd f949 	bl	800a368 <dwt_write32bitoffsetreg>
 800d0d6:	f06f 0308 	mvn.w	r3, #8
 800d0da:	2200      	movs	r2, #0
 800d0dc:	e7e1      	b.n	800d0a2 <dwt_ioctl+0x1466>
 800d0de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d0e2:	e7e1      	b.n	800d0a8 <dwt_ioctl+0x146c>
 800d0e4:	2c00      	cmp	r4, #0
 800d0e6:	f000 8557 	beq.w	800db98 <dwt_ioctl+0x1f5c>
 800d0ea:	6823      	ldr	r3, [r4, #0]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	2130      	movs	r1, #48	; 0x30
 800d0f0:	f7fd f93a 	bl	800a368 <dwt_write32bitoffsetreg>
 800d0f4:	2500      	movs	r5, #0
 800d0f6:	f7fe be4b 	b.w	800bd90 <dwt_ioctl+0x154>
 800d0fa:	2c00      	cmp	r4, #0
 800d0fc:	f000 854f 	beq.w	800db9e <dwt_ioctl+0x1f62>
 800d100:	2200      	movs	r2, #0
 800d102:	4629      	mov	r1, r5
 800d104:	f7fc fcbb 	bl	8009a7e <dwt_read32bitoffsetreg>
 800d108:	6020      	str	r0, [r4, #0]
 800d10a:	2500      	movs	r5, #0
 800d10c:	f7fe be40 	b.w	800bd90 <dwt_ioctl+0x154>
 800d110:	4623      	mov	r3, r4
 800d112:	2200      	movs	r2, #0
 800d114:	4629      	mov	r1, r5
 800d116:	f7fd f927 	bl	800a368 <dwt_write32bitoffsetreg>
 800d11a:	2500      	movs	r5, #0
 800d11c:	f7fe be38 	b.w	800bd90 <dwt_ioctl+0x154>
 800d120:	2c00      	cmp	r4, #0
 800d122:	f000 853f 	beq.w	800dba4 <dwt_ioctl+0x1f68>
 800d126:	2203      	movs	r2, #3
 800d128:	4944      	ldr	r1, [pc, #272]	; (800d23c <dwt_ioctl+0x1600>)
 800d12a:	f7fc fcd0 	bl	8009ace <dwt_read8bitoffsetreg>
 800d12e:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800d132:	7020      	strb	r0, [r4, #0]
 800d134:	2500      	movs	r5, #0
 800d136:	f7fe be2b 	b.w	800bd90 <dwt_ioctl+0x154>
 800d13a:	2c00      	cmp	r4, #0
 800d13c:	f000 8535 	beq.w	800dbaa <dwt_ioctl+0x1f6e>
 800d140:	6823      	ldr	r3, [r4, #0]
 800d142:	2200      	movs	r2, #0
 800d144:	2144      	movs	r1, #68	; 0x44
 800d146:	f7fd f90f 	bl	800a368 <dwt_write32bitoffsetreg>
 800d14a:	2500      	movs	r5, #0
 800d14c:	f7fe be20 	b.w	800bd90 <dwt_ioctl+0x154>
 800d150:	2c00      	cmp	r4, #0
 800d152:	f000 852d 	beq.w	800dbb0 <dwt_ioctl+0x1f74>
 800d156:	8823      	ldrh	r3, [r4, #0]
 800d158:	2200      	movs	r2, #0
 800d15a:	2148      	movs	r1, #72	; 0x48
 800d15c:	f7fd f8a7 	bl	800a2ae <dwt_write16bitoffsetreg>
 800d160:	2500      	movs	r5, #0
 800d162:	f7fe be15 	b.w	800bd90 <dwt_ioctl+0x154>
 800d166:	2c00      	cmp	r4, #0
 800d168:	f000 8525 	beq.w	800dbb6 <dwt_ioctl+0x1f7a>
 800d16c:	2200      	movs	r2, #0
 800d16e:	2144      	movs	r1, #68	; 0x44
 800d170:	f7fc fc85 	bl	8009a7e <dwt_read32bitoffsetreg>
 800d174:	6020      	str	r0, [r4, #0]
 800d176:	2500      	movs	r5, #0
 800d178:	f7fe be0a 	b.w	800bd90 <dwt_ioctl+0x154>
 800d17c:	2c00      	cmp	r4, #0
 800d17e:	f000 851d 	beq.w	800dbbc <dwt_ioctl+0x1f80>
 800d182:	2200      	movs	r2, #0
 800d184:	2148      	movs	r1, #72	; 0x48
 800d186:	f7fc fc90 	bl	8009aaa <dwt_read16bitoffsetreg>
 800d18a:	6020      	str	r0, [r4, #0]
 800d18c:	2500      	movs	r5, #0
 800d18e:	f7fe bdff 	b.w	800bd90 <dwt_ioctl+0x154>
 800d192:	2c00      	cmp	r4, #0
 800d194:	f000 8515 	beq.w	800dbc2 <dwt_ioctl+0x1f86>
 800d198:	7823      	ldrb	r3, [r4, #0]
 800d19a:	2200      	movs	r2, #0
 800d19c:	4928      	ldr	r1, [pc, #160]	; (800d240 <dwt_ioctl+0x1604>)
 800d19e:	f7fd fa71 	bl	800a684 <dwt_write8bitoffsetreg>
 800d1a2:	2500      	movs	r5, #0
 800d1a4:	f7fe bdf4 	b.w	800bd90 <dwt_ioctl+0x154>
 800d1a8:	2c00      	cmp	r4, #0
 800d1aa:	f000 850d 	beq.w	800dbc8 <dwt_ioctl+0x1f8c>
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	2144      	movs	r1, #68	; 0x44
 800d1b2:	f7fc fc8c 	bl	8009ace <dwt_read8bitoffsetreg>
 800d1b6:	7020      	strb	r0, [r4, #0]
 800d1b8:	2500      	movs	r5, #0
 800d1ba:	f7fe bde9 	b.w	800bd90 <dwt_ioctl+0x154>
 800d1be:	2c00      	cmp	r4, #0
 800d1c0:	f000 8505 	beq.w	800dbce <dwt_ioctl+0x1f92>
 800d1c4:	f7fd fa6a 	bl	800a69c <ull_getframelength>
 800d1c8:	6020      	str	r0, [r4, #0]
 800d1ca:	2500      	movs	r5, #0
 800d1cc:	f7fe bde0 	b.w	800bd90 <dwt_ioctl+0x154>
 800d1d0:	2c00      	cmp	r4, #0
 800d1d2:	f000 84ff 	beq.w	800dbd4 <dwt_ioctl+0x1f98>
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	491a      	ldr	r1, [pc, #104]	; (800d244 <dwt_ioctl+0x1608>)
 800d1da:	f7fc fc66 	bl	8009aaa <dwt_read16bitoffsetreg>
 800d1de:	8020      	strh	r0, [r4, #0]
 800d1e0:	2500      	movs	r5, #0
 800d1e2:	f7fe bdd5 	b.w	800bd90 <dwt_ioctl+0x154>
 800d1e6:	2c00      	cmp	r4, #0
 800d1e8:	f000 84f7 	beq.w	800dbda <dwt_ioctl+0x1f9e>
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	4916      	ldr	r1, [pc, #88]	; (800d248 <dwt_ioctl+0x160c>)
 800d1f0:	f7fc fc45 	bl	8009a7e <dwt_read32bitoffsetreg>
 800d1f4:	6020      	str	r0, [r4, #0]
 800d1f6:	2500      	movs	r5, #0
 800d1f8:	f7fe bdca 	b.w	800bd90 <dwt_ioctl+0x154>
 800d1fc:	2c00      	cmp	r4, #0
 800d1fe:	f000 84ef 	beq.w	800dbe0 <dwt_ioctl+0x1fa4>
 800d202:	8823      	ldrh	r3, [r4, #0]
 800d204:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d208:	9300      	str	r3, [sp, #0]
 800d20a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800d20e:	2200      	movs	r2, #0
 800d210:	490d      	ldr	r1, [pc, #52]	; (800d248 <dwt_ioctl+0x160c>)
 800d212:	f7fe f889 	bl	800b328 <dwt_modify16bitoffsetreg>
 800d216:	2500      	movs	r5, #0
 800d218:	f7fe bdba 	b.w	800bd90 <dwt_ioctl+0x154>
 800d21c:	000c0008 	.word	0x000c0008
 800d220:	0007001c 	.word	0x0007001c
 800d224:	00080010 	.word	0x00080010
 800d228:	00080014 	.word	0x00080014
 800d22c:	00070014 	.word	0x00070014
 800d230:	00050008 	.word	0x00050008
 800d234:	001f000c 	.word	0x001f000c
 800d238:	001f0010 	.word	0x001f0010
 800d23c:	00030060 	.word	0x00030060
 800d240:	00010018 	.word	0x00010018
 800d244:	0005002c 	.word	0x0005002c
 800d248:	000e001c 	.word	0x000e001c
 800d24c:	2c00      	cmp	r4, #0
 800d24e:	f000 84ca 	beq.w	800dbe6 <dwt_ioctl+0x1faa>
 800d252:	88a7      	ldrh	r7, [r4, #4]
 800d254:	f8d4 b008 	ldr.w	fp, [r4, #8]
 800d258:	7b23      	ldrb	r3, [r4, #12]
 800d25a:	9306      	str	r3, [sp, #24]
 800d25c:	6922      	ldr	r2, [r4, #16]
 800d25e:	9204      	str	r2, [sp, #16]
 800d260:	6962      	ldr	r2, [r4, #20]
 800d262:	9205      	str	r2, [sp, #20]
 800d264:	f00b 0203 	and.w	r2, fp, #3
 800d268:	f3cb 0085 	ubfx	r0, fp, #2, #6
 800d26c:	2b05      	cmp	r3, #5
 800d26e:	d145      	bne.n	800d2fc <dwt_ioctl+0x16c0>
 800d270:	f5b7 7fb1 	cmp.w	r7, #354	; 0x162
 800d274:	bf28      	it	cs
 800d276:	f44f 77b1 	movcs.w	r7, #354	; 0x162
 800d27a:	f8df 9338 	ldr.w	r9, [pc, #824]	; 800d5b4 <dwt_ioctl+0x1978>
 800d27e:	2f04      	cmp	r7, #4
 800d280:	d805      	bhi.n	800d28e <dwt_ioctl+0x1652>
 800d282:	eb09 0300 	add.w	r3, r9, r0
 800d286:	785b      	ldrb	r3, [r3, #1]
 800d288:	3b05      	subs	r3, #5
 800d28a:	429f      	cmp	r7, r3
 800d28c:	db3e      	blt.n	800d30c <dwt_ioctl+0x16d0>
 800d28e:	2a01      	cmp	r2, #1
 800d290:	d87c      	bhi.n	800d38c <dwt_ioctl+0x1750>
 800d292:	4bc4      	ldr	r3, [pc, #784]	; (800d5a4 <dwt_ioctl+0x1968>)
 800d294:	5c99      	ldrb	r1, [r3, r2]
 800d296:	463e      	mov	r6, r7
 800d298:	42b9      	cmp	r1, r7
 800d29a:	da79      	bge.n	800d390 <dwt_ioctl+0x1754>
 800d29c:	1c55      	adds	r5, r2, #1
 800d29e:	fa53 f585 	uxtab	r5, r3, r5
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	440b      	add	r3, r1
 800d2a6:	b29b      	uxth	r3, r3
 800d2a8:	3201      	adds	r2, #1
 800d2aa:	b2d2      	uxtb	r2, r2
 800d2ac:	2a02      	cmp	r2, #2
 800d2ae:	d005      	beq.n	800d2bc <dwt_ioctl+0x1680>
 800d2b0:	f815 1b01 	ldrb.w	r1, [r5], #1
 800d2b4:	eba6 0c03 	sub.w	ip, r6, r3
 800d2b8:	4561      	cmp	r1, ip
 800d2ba:	dbf3      	blt.n	800d2a4 <dwt_ioctl+0x1668>
 800d2bc:	429f      	cmp	r7, r3
 800d2be:	bf08      	it	eq
 800d2c0:	9003      	streq	r0, [sp, #12]
 800d2c2:	d069      	beq.n	800d398 <dwt_ioctl+0x175c>
 800d2c4:	f107 0805 	add.w	r8, r7, #5
 800d2c8:	fa1f f888 	uxth.w	r8, r8
 800d2cc:	2580      	movs	r5, #128	; 0x80
 800d2ce:	2100      	movs	r1, #0
 800d2d0:	9107      	str	r1, [sp, #28]
 800d2d2:	9103      	str	r1, [sp, #12]
 800d2d4:	9108      	str	r1, [sp, #32]
 800d2d6:	460e      	mov	r6, r1
 800d2d8:	2105      	movs	r1, #5
 800d2da:	46be      	mov	lr, r7
 800d2dc:	428f      	cmp	r7, r1
 800d2de:	bf38      	it	cc
 800d2e0:	468e      	movcc	lr, r1
 800d2e2:	f1ae 0e05 	sub.w	lr, lr, #5
 800d2e6:	fa1f fe8e 	uxth.w	lr, lr
 800d2ea:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 800d5a4 <dwt_ioctl+0x1968>
 800d2ee:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800d2f2:	468b      	mov	fp, r1
 800d2f4:	46bc      	mov	ip, r7
 800d2f6:	4637      	mov	r7, r6
 800d2f8:	f000 bcec 	b.w	800dcd4 <dwt_ioctl+0x2098>
 800d2fc:	f240 1331 	movw	r3, #305	; 0x131
 800d300:	429f      	cmp	r7, r3
 800d302:	bf28      	it	cs
 800d304:	461f      	movcs	r7, r3
 800d306:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 800d5b8 <dwt_ioctl+0x197c>
 800d30a:	e7b8      	b.n	800d27e <dwt_ioctl+0x1642>
 800d30c:	2300      	movs	r3, #0
 800d30e:	9a05      	ldr	r2, [sp, #20]
 800d310:	8013      	strh	r3, [r2, #0]
 800d312:	9a04      	ldr	r2, [sp, #16]
 800d314:	f8c2 b000 	str.w	fp, [r2]
 800d318:	e04d      	b.n	800d3b6 <dwt_ioctl+0x177a>
 800d31a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800d31e:	2300      	movs	r3, #0
 800d320:	9a05      	ldr	r2, [sp, #20]
 800d322:	8013      	strh	r3, [r2, #0]
 800d324:	9b04      	ldr	r3, [sp, #16]
 800d326:	f8c3 b000 	str.w	fp, [r3]
 800d32a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d32e:	e042      	b.n	800d3b6 <dwt_ioctl+0x177a>
 800d330:	fa1f fb81 	uxth.w	fp, r1
 800d334:	9207      	str	r2, [sp, #28]
 800d336:	9003      	str	r0, [sp, #12]
 800d338:	9308      	str	r3, [sp, #32]
 800d33a:	2701      	movs	r7, #1
 800d33c:	f000 bcdb 	b.w	800dcf6 <dwt_ioctl+0x20ba>
 800d340:	2f00      	cmp	r7, #0
 800d342:	f040 849b 	bne.w	800dc7c <dwt_ioctl+0x2040>
 800d346:	4598      	cmp	r8, r3
 800d348:	f200 84b0 	bhi.w	800dcac <dwt_ioctl+0x2070>
 800d34c:	2e00      	cmp	r6, #0
 800d34e:	d039      	beq.n	800d3c4 <dwt_ioctl+0x1788>
 800d350:	283f      	cmp	r0, #63	; 0x3f
 800d352:	f000 84d5 	beq.w	800dd00 <dwt_ioctl+0x20c4>
 800d356:	2700      	movs	r7, #0
 800d358:	f819 1000 	ldrb.w	r1, [r9, r0]
 800d35c:	1a5b      	subs	r3, r3, r1
 800d35e:	b29b      	uxth	r3, r3
 800d360:	1e46      	subs	r6, r0, #1
 800d362:	f006 003f 	and.w	r0, r6, #63	; 0x3f
 800d366:	f016 063f 	ands.w	r6, r6, #63	; 0x3f
 800d36a:	bf18      	it	ne
 800d36c:	2601      	movne	r6, #1
 800d36e:	f000 bca9 	b.w	800dcc4 <dwt_ioctl+0x2088>
 800d372:	9906      	ldr	r1, [sp, #24]
 800d374:	2909      	cmp	r1, #9
 800d376:	f040 84c9 	bne.w	800dd0c <dwt_ioctl+0x20d0>
 800d37a:	213f      	movs	r1, #63	; 0x3f
 800d37c:	9103      	str	r1, [sp, #12]
 800d37e:	e00b      	b.n	800d398 <dwt_ioctl+0x175c>
 800d380:	b2b3      	uxth	r3, r6
 800d382:	3201      	adds	r2, #1
 800d384:	b2d2      	uxtb	r2, r2
 800d386:	213f      	movs	r1, #63	; 0x3f
 800d388:	9103      	str	r1, [sp, #12]
 800d38a:	e005      	b.n	800d398 <dwt_ioctl+0x175c>
 800d38c:	2300      	movs	r3, #0
 800d38e:	e795      	b.n	800d2bc <dwt_ioctl+0x1680>
 800d390:	2300      	movs	r3, #0
 800d392:	e793      	b.n	800d2bc <dwt_ioctl+0x1680>
 800d394:	9003      	str	r0, [sp, #12]
 800d396:	4663      	mov	r3, ip
 800d398:	9905      	ldr	r1, [sp, #20]
 800d39a:	800b      	strh	r3, [r1, #0]
 800d39c:	9b03      	ldr	r3, [sp, #12]
 800d39e:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
 800d3a2:	b2d2      	uxtb	r2, r2
 800d3a4:	0413      	lsls	r3, r2, #16
 800d3a6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d3aa:	4313      	orrs	r3, r2
 800d3ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d3b0:	9a04      	ldr	r2, [sp, #16]
 800d3b2:	6013      	str	r3, [r2, #0]
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	6023      	str	r3, [r4, #0]
 800d3b8:	2500      	movs	r5, #0
 800d3ba:	f7fe bce9 	b.w	800bd90 <dwt_ioctl+0x154>
 800d3be:	9a07      	ldr	r2, [sp, #28]
 800d3c0:	9b08      	ldr	r3, [sp, #32]
 800d3c2:	e7e9      	b.n	800d398 <dwt_ioctl+0x175c>
 800d3c4:	9003      	str	r0, [sp, #12]
 800d3c6:	e7e7      	b.n	800d398 <dwt_ioctl+0x175c>
 800d3c8:	9a07      	ldr	r2, [sp, #28]
 800d3ca:	9b08      	ldr	r3, [sp, #32]
 800d3cc:	e7e4      	b.n	800d398 <dwt_ioctl+0x175c>
 800d3ce:	213f      	movs	r1, #63	; 0x3f
 800d3d0:	9103      	str	r1, [sp, #12]
 800d3d2:	e7e1      	b.n	800d398 <dwt_ioctl+0x175c>
 800d3d4:	2c00      	cmp	r4, #0
 800d3d6:	f000 8409 	beq.w	800dbec <dwt_ioctl+0x1fb0>
 800d3da:	7827      	ldrb	r7, [r4, #0]
 800d3dc:	7864      	ldrb	r4, [r4, #1]
 800d3de:	f7f4 f88f 	bl	8001500 <decamutexon>
 800d3e2:	4605      	mov	r5, r0
 800d3e4:	2c02      	cmp	r4, #2
 800d3e6:	d00e      	beq.n	800d406 <dwt_ioctl+0x17ca>
 800d3e8:	2c04      	cmp	r4, #4
 800d3ea:	d00c      	beq.n	800d406 <dwt_ioctl+0x17ca>
 800d3ec:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
 800d3f0:	2c01      	cmp	r4, #1
 800d3f2:	d01a      	beq.n	800d42a <dwt_ioctl+0x17ee>
 800d3f4:	43fb      	mvns	r3, r7
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	9200      	str	r2, [sp, #0]
 800d3fa:	b2db      	uxtb	r3, r3
 800d3fc:	496a      	ldr	r1, [pc, #424]	; (800d5a8 <dwt_ioctl+0x196c>)
 800d3fe:	4630      	mov	r0, r6
 800d400:	f7fd fd76 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800d404:	e005      	b.n	800d412 <dwt_ioctl+0x17d6>
 800d406:	463b      	mov	r3, r7
 800d408:	2200      	movs	r2, #0
 800d40a:	4967      	ldr	r1, [pc, #412]	; (800d5a8 <dwt_ioctl+0x196c>)
 800d40c:	4630      	mov	r0, r6
 800d40e:	f7fd f939 	bl	800a684 <dwt_write8bitoffsetreg>
 800d412:	463b      	mov	r3, r7
 800d414:	2200      	movs	r2, #0
 800d416:	4965      	ldr	r1, [pc, #404]	; (800d5ac <dwt_ioctl+0x1970>)
 800d418:	4630      	mov	r0, r6
 800d41a:	f7fc ffa5 	bl	800a368 <dwt_write32bitoffsetreg>
 800d41e:	4628      	mov	r0, r5
 800d420:	f7f4 f87f 	bl	8001522 <decamutexoff>
 800d424:	2500      	movs	r5, #0
 800d426:	f7fe bcb3 	b.w	800bd90 <dwt_ioctl+0x154>
 800d42a:	9700      	str	r7, [sp, #0]
 800d42c:	23ff      	movs	r3, #255	; 0xff
 800d42e:	2200      	movs	r2, #0
 800d430:	495d      	ldr	r1, [pc, #372]	; (800d5a8 <dwt_ioctl+0x196c>)
 800d432:	4630      	mov	r0, r6
 800d434:	f7fd fd5c 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800d438:	e7eb      	b.n	800d412 <dwt_ioctl+0x17d6>
 800d43a:	2302      	movs	r3, #2
 800d43c:	9301      	str	r3, [sp, #4]
 800d43e:	2500      	movs	r5, #0
 800d440:	9500      	str	r5, [sp, #0]
 800d442:	462b      	mov	r3, r5
 800d444:	462a      	mov	r2, r5
 800d446:	211a      	movs	r1, #26
 800d448:	f7fc fa91 	bl	800996e <dwt_xfer3xxx>
 800d44c:	f7fe bca0 	b.w	800bd90 <dwt_ioctl+0x154>
 800d450:	f7fe fbe0 	bl	800bc14 <ull_softreset_fcmd>
 800d454:	2500      	movs	r5, #0
 800d456:	f7fe bc9b 	b.w	800bd90 <dwt_ioctl+0x154>
 800d45a:	f7fe fbc7 	bl	800bbec <ull_softreset_no_sema_fcmd>
 800d45e:	2500      	movs	r5, #0
 800d460:	f7fe bc96 	b.w	800bd90 <dwt_ioctl+0x154>
 800d464:	2302      	movs	r3, #2
 800d466:	9301      	str	r3, [sp, #4]
 800d468:	2500      	movs	r5, #0
 800d46a:	9500      	str	r5, [sp, #0]
 800d46c:	462b      	mov	r3, r5
 800d46e:	462a      	mov	r2, r5
 800d470:	2114      	movs	r1, #20
 800d472:	f7fc fa7c 	bl	800996e <dwt_xfer3xxx>
 800d476:	f7fe bc8b 	b.w	800bd90 <dwt_ioctl+0x154>
 800d47a:	2402      	movs	r4, #2
 800d47c:	9401      	str	r4, [sp, #4]
 800d47e:	2500      	movs	r5, #0
 800d480:	9500      	str	r5, [sp, #0]
 800d482:	462b      	mov	r3, r5
 800d484:	462a      	mov	r2, r5
 800d486:	2115      	movs	r1, #21
 800d488:	f7fc fa71 	bl	800996e <dwt_xfer3xxx>
 800d48c:	9401      	str	r4, [sp, #4]
 800d48e:	9500      	str	r5, [sp, #0]
 800d490:	462b      	mov	r3, r5
 800d492:	462a      	mov	r2, r5
 800d494:	2115      	movs	r1, #21
 800d496:	4630      	mov	r0, r6
 800d498:	f7fc fa69 	bl	800996e <dwt_xfer3xxx>
 800d49c:	f7fe bc78 	b.w	800bd90 <dwt_ioctl+0x154>
 800d4a0:	2302      	movs	r3, #2
 800d4a2:	9301      	str	r3, [sp, #4]
 800d4a4:	2500      	movs	r5, #0
 800d4a6:	9500      	str	r5, [sp, #0]
 800d4a8:	462b      	mov	r3, r5
 800d4aa:	462a      	mov	r2, r5
 800d4ac:	2116      	movs	r1, #22
 800d4ae:	f7fc fa5e 	bl	800996e <dwt_xfer3xxx>
 800d4b2:	f7fe bc6d 	b.w	800bd90 <dwt_ioctl+0x154>
 800d4b6:	2c00      	cmp	r4, #0
 800d4b8:	f000 839b 	beq.w	800dbf2 <dwt_ioctl+0x1fb6>
 800d4bc:	b93a      	cbnz	r2, 800d4ce <dwt_ioctl+0x1892>
 800d4be:	2200      	movs	r2, #0
 800d4c0:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800d4c4:	f7fc fb03 	bl	8009ace <dwt_read8bitoffsetreg>
 800d4c8:	7020      	strb	r0, [r4, #0]
 800d4ca:	f7fe bc61 	b.w	800bd90 <dwt_ioctl+0x154>
 800d4ce:	2201      	movs	r2, #1
 800d4d0:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800d4d4:	f7fc fafb 	bl	8009ace <dwt_read8bitoffsetreg>
 800d4d8:	7020      	strb	r0, [r4, #0]
 800d4da:	2500      	movs	r5, #0
 800d4dc:	f7fe bc58 	b.w	800bd90 <dwt_ioctl+0x154>
 800d4e0:	2c00      	cmp	r4, #0
 800d4e2:	f000 8389 	beq.w	800dbf8 <dwt_ioctl+0x1fbc>
 800d4e6:	7824      	ldrb	r4, [r4, #0]
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800d4ee:	f7fc faee 	bl	8009ace <dwt_read8bitoffsetreg>
 800d4f2:	f000 039f 	and.w	r3, r0, #159	; 0x9f
 800d4f6:	4323      	orrs	r3, r4
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800d4fe:	4630      	mov	r0, r6
 800d500:	f7fd f8c0 	bl	800a684 <dwt_write8bitoffsetreg>
 800d504:	2500      	movs	r5, #0
 800d506:	f7fe bc43 	b.w	800bd90 <dwt_ioctl+0x154>
 800d50a:	2c00      	cmp	r4, #0
 800d50c:	f000 8377 	beq.w	800dbfe <dwt_ioctl+0x1fc2>
 800d510:	7824      	ldrb	r4, [r4, #0]
 800d512:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
 800d516:	d01e      	beq.n	800d556 <dwt_ioctl+0x191a>
 800d518:	2d01      	cmp	r5, #1
 800d51a:	f040 8373 	bne.w	800dc04 <dwt_ioctl+0x1fc8>
 800d51e:	2502      	movs	r5, #2
 800d520:	2201      	movs	r2, #1
 800d522:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800d526:	4630      	mov	r0, r6
 800d528:	f7fc fad1 	bl	8009ace <dwt_read8bitoffsetreg>
 800d52c:	b9ac      	cbnz	r4, 800d55a <dwt_ioctl+0x191e>
 800d52e:	ea20 0305 	bic.w	r3, r0, r5
 800d532:	b2db      	uxtb	r3, r3
 800d534:	2201      	movs	r2, #1
 800d536:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800d53a:	4630      	mov	r0, r6
 800d53c:	f7fd f8a2 	bl	800a684 <dwt_write8bitoffsetreg>
 800d540:	2200      	movs	r2, #0
 800d542:	2110      	movs	r1, #16
 800d544:	4630      	mov	r0, r6
 800d546:	f7fc fa9a 	bl	8009a7e <dwt_read32bitoffsetreg>
 800d54a:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800d54e:	d00b      	beq.n	800d568 <dwt_ioctl+0x192c>
 800d550:	2500      	movs	r5, #0
 800d552:	f7fe bc1d 	b.w	800bd90 <dwt_ioctl+0x154>
 800d556:	2504      	movs	r5, #4
 800d558:	e7e2      	b.n	800d520 <dwt_ioctl+0x18e4>
 800d55a:	2c01      	cmp	r4, #1
 800d55c:	f040 8356 	bne.w	800dc0c <dwt_ioctl+0x1fd0>
 800d560:	ea40 0305 	orr.w	r3, r0, r5
 800d564:	b2db      	uxtb	r3, r3
 800d566:	e7e5      	b.n	800d534 <dwt_ioctl+0x18f8>
 800d568:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d56c:	9300      	str	r3, [sp, #0]
 800d56e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d572:	2200      	movs	r2, #0
 800d574:	2110      	movs	r1, #16
 800d576:	4630      	mov	r0, r6
 800d578:	f7fd fb48 	bl	800ac0c <dwt_modify32bitoffsetreg>
 800d57c:	2500      	movs	r5, #0
 800d57e:	f7fe bc07 	b.w	800bd90 <dwt_ioctl+0x154>
 800d582:	2c00      	cmp	r4, #0
 800d584:	f000 8346 	beq.w	800dc14 <dwt_ioctl+0x1fd8>
 800d588:	7823      	ldrb	r3, [r4, #0]
 800d58a:	035b      	lsls	r3, r3, #13
 800d58c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d590:	9300      	str	r3, [sp, #0]
 800d592:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800d596:	2200      	movs	r2, #0
 800d598:	4905      	ldr	r1, [pc, #20]	; (800d5b0 <dwt_ioctl+0x1974>)
 800d59a:	f7fd fec5 	bl	800b328 <dwt_modify16bitoffsetreg>
 800d59e:	2500      	movs	r5, #0
 800d5a0:	f7fe bbf6 	b.w	800bd90 <dwt_ioctl+0x154>
 800d5a4:	08015f74 	.word	0x08015f74
 800d5a8:	0001001c 	.word	0x0001001c
 800d5ac:	00010018 	.word	0x00010018
 800d5b0:	000e000c 	.word	0x000e000c
 800d5b4:	08015ef4 	.word	0x08015ef4
 800d5b8:	08015f34 	.word	0x08015f34
 800d5bc:	2c00      	cmp	r4, #0
 800d5be:	f000 832c 	beq.w	800dc1a <dwt_ioctl+0x1fde>
 800d5c2:	7825      	ldrb	r5, [r4, #0]
 800d5c4:	6862      	ldr	r2, [r4, #4]
 800d5c6:	2a01      	cmp	r2, #1
 800d5c8:	bf15      	itete	ne
 800d5ca:	f46f 3360 	mvnne.w	r3, #229376	; 0x38000
 800d5ce:	f46f 43e0 	mvneq.w	r3, #28672	; 0x7000
 800d5d2:	27df      	movne	r7, #223	; 0xdf
 800d5d4:	27ef      	moveq	r7, #239	; 0xef
 800d5d6:	bf14      	ite	ne
 800d5d8:	f04f 0820 	movne.w	r8, #32
 800d5dc:	f04f 0810 	moveq.w	r8, #16
 800d5e0:	2400      	movs	r4, #0
 800d5e2:	9400      	str	r4, [sp, #0]
 800d5e4:	4622      	mov	r2, r4
 800d5e6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800d5ea:	f7fd fb0f 	bl	800ac0c <dwt_modify32bitoffsetreg>
 800d5ee:	9400      	str	r4, [sp, #0]
 800d5f0:	463b      	mov	r3, r7
 800d5f2:	4622      	mov	r2, r4
 800d5f4:	49be      	ldr	r1, [pc, #760]	; (800d8f0 <dwt_ioctl+0x1cb4>)
 800d5f6:	4630      	mov	r0, r6
 800d5f8:	f7fd fc7a 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800d5fc:	2d01      	cmp	r5, #1
 800d5fe:	d003      	beq.n	800d608 <dwt_ioctl+0x19cc>
 800d600:	b165      	cbz	r5, 800d61c <dwt_ioctl+0x19e0>
 800d602:	2500      	movs	r5, #0
 800d604:	f7fe bbc4 	b.w	800bd90 <dwt_ioctl+0x154>
 800d608:	4625      	mov	r5, r4
 800d60a:	9400      	str	r4, [sp, #0]
 800d60c:	463b      	mov	r3, r7
 800d60e:	4622      	mov	r2, r4
 800d610:	49b8      	ldr	r1, [pc, #736]	; (800d8f4 <dwt_ioctl+0x1cb8>)
 800d612:	4630      	mov	r0, r6
 800d614:	f7fd fc6c 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800d618:	f7fe bbba 	b.w	800bd90 <dwt_ioctl+0x154>
 800d61c:	f8cd 8000 	str.w	r8, [sp]
 800d620:	23ff      	movs	r3, #255	; 0xff
 800d622:	2200      	movs	r2, #0
 800d624:	49b3      	ldr	r1, [pc, #716]	; (800d8f4 <dwt_ioctl+0x1cb8>)
 800d626:	4630      	mov	r0, r6
 800d628:	f7fd fc62 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800d62c:	f7fe bbb0 	b.w	800bd90 <dwt_ioctl+0x154>
 800d630:	2c00      	cmp	r4, #0
 800d632:	f000 82f5 	beq.w	800dc20 <dwt_ioctl+0x1fe4>
 800d636:	7822      	ldrb	r2, [r4, #0]
 800d638:	f012 0f01 	tst.w	r2, #1
 800d63c:	d02d      	beq.n	800d69a <dwt_ioctl+0x1a5e>
 800d63e:	0157      	lsls	r7, r2, #5
 800d640:	f007 0740 	and.w	r7, r7, #64	; 0x40
 800d644:	2440      	movs	r4, #64	; 0x40
 800d646:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800d64a:	f012 0f04 	tst.w	r2, #4
 800d64e:	d028      	beq.n	800d6a2 <dwt_ioctl+0x1a66>
 800d650:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 800d654:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800d658:	0112      	lsls	r2, r2, #4
 800d65a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800d65e:	4317      	orrs	r7, r2
 800d660:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d664:	9200      	str	r2, [sp, #0]
 800d666:	43db      	mvns	r3, r3
 800d668:	2200      	movs	r2, #0
 800d66a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800d66e:	4630      	mov	r0, r6
 800d670:	f7fd facc 	bl	800ac0c <dwt_modify32bitoffsetreg>
 800d674:	43e4      	mvns	r4, r4
 800d676:	b2a4      	uxth	r4, r4
 800d678:	2500      	movs	r5, #0
 800d67a:	9500      	str	r5, [sp, #0]
 800d67c:	4623      	mov	r3, r4
 800d67e:	462a      	mov	r2, r5
 800d680:	499b      	ldr	r1, [pc, #620]	; (800d8f0 <dwt_ioctl+0x1cb4>)
 800d682:	4630      	mov	r0, r6
 800d684:	f7fd fe50 	bl	800b328 <dwt_modify16bitoffsetreg>
 800d688:	9700      	str	r7, [sp, #0]
 800d68a:	4623      	mov	r3, r4
 800d68c:	462a      	mov	r2, r5
 800d68e:	4999      	ldr	r1, [pc, #612]	; (800d8f4 <dwt_ioctl+0x1cb8>)
 800d690:	4630      	mov	r0, r6
 800d692:	f7fd fe49 	bl	800b328 <dwt_modify16bitoffsetreg>
 800d696:	f7fe bb7b 	b.w	800bd90 <dwt_ioctl+0x154>
 800d69a:	2700      	movs	r7, #0
 800d69c:	463c      	mov	r4, r7
 800d69e:	463b      	mov	r3, r7
 800d6a0:	e7d3      	b.n	800d64a <dwt_ioctl+0x1a0e>
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	e7de      	b.n	800d664 <dwt_ioctl+0x1a28>
 800d6a6:	2308      	movs	r3, #8
 800d6a8:	9300      	str	r3, [sp, #0]
 800d6aa:	23ff      	movs	r3, #255	; 0xff
 800d6ac:	2201      	movs	r2, #1
 800d6ae:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800d6b2:	f7fd fc1d 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800d6b6:	4c90      	ldr	r4, [pc, #576]	; (800d8f8 <dwt_ioctl+0x1cbc>)
 800d6b8:	2302      	movs	r3, #2
 800d6ba:	9300      	str	r3, [sp, #0]
 800d6bc:	23ff      	movs	r3, #255	; 0xff
 800d6be:	2203      	movs	r2, #3
 800d6c0:	4621      	mov	r1, r4
 800d6c2:	4630      	mov	r0, r6
 800d6c4:	f7fd fc14 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800d6c8:	2500      	movs	r5, #0
 800d6ca:	9500      	str	r5, [sp, #0]
 800d6cc:	23f7      	movs	r3, #247	; 0xf7
 800d6ce:	2201      	movs	r2, #1
 800d6d0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800d6d4:	4630      	mov	r0, r6
 800d6d6:	f7fd fc0b 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800d6da:	9500      	str	r5, [sp, #0]
 800d6dc:	23fd      	movs	r3, #253	; 0xfd
 800d6de:	2203      	movs	r2, #3
 800d6e0:	4621      	mov	r1, r4
 800d6e2:	4630      	mov	r0, r6
 800d6e4:	f7fd fc04 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800d6e8:	f7fe bb52 	b.w	800bd90 <dwt_ioctl+0x154>
 800d6ec:	2c00      	cmp	r4, #0
 800d6ee:	f000 829a 	beq.w	800dc26 <dwt_ioctl+0x1fea>
 800d6f2:	8863      	ldrh	r3, [r4, #2]
 800d6f4:	00db      	lsls	r3, r3, #3
 800d6f6:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800d6fa:	7822      	ldrb	r2, [r4, #0]
 800d6fc:	b10a      	cbz	r2, 800d702 <dwt_ioctl+0x1ac6>
 800d6fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d702:	9300      	str	r3, [sp, #0]
 800d704:	f24f 0307 	movw	r3, #61447	; 0xf007
 800d708:	2200      	movs	r2, #0
 800d70a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800d70e:	4630      	mov	r0, r6
 800d710:	f7fd fe0a 	bl	800b328 <dwt_modify16bitoffsetreg>
 800d714:	2500      	movs	r5, #0
 800d716:	f7fe bb3b 	b.w	800bd90 <dwt_ioctl+0x154>
 800d71a:	2c00      	cmp	r4, #0
 800d71c:	f000 8286 	beq.w	800dc2c <dwt_ioctl+0x1ff0>
 800d720:	b2e3      	uxtb	r3, r4
 800d722:	1c9a      	adds	r2, r3, #2
 800d724:	2301      	movs	r3, #1
 800d726:	4093      	lsls	r3, r2
 800d728:	3b01      	subs	r3, #1
 800d72a:	b2db      	uxtb	r3, r3
 800d72c:	2200      	movs	r2, #0
 800d72e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800d732:	f7fc ffa7 	bl	800a684 <dwt_write8bitoffsetreg>
 800d736:	2500      	movs	r5, #0
 800d738:	f7fe bb2a 	b.w	800bd90 <dwt_ioctl+0x154>
 800d73c:	2c00      	cmp	r4, #0
 800d73e:	f000 8278 	beq.w	800dc32 <dwt_ioctl+0x1ff6>
 800d742:	7ae3      	ldrb	r3, [r4, #11]
 800d744:	2b00      	cmp	r3, #0
 800d746:	f000 8277 	beq.w	800dc38 <dwt_ioctl+0x1ffc>
 800d74a:	7b63      	ldrb	r3, [r4, #13]
 800d74c:	2b01      	cmp	r3, #1
 800d74e:	d921      	bls.n	800d794 <dwt_ioctl+0x1b58>
 800d750:	7b22      	ldrb	r2, [r4, #12]
 800d752:	4b6a      	ldr	r3, [pc, #424]	; (800d8fc <dwt_ioctl+0x1cc0>)
 800d754:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800d758:	0112      	lsls	r2, r2, #4
 800d75a:	0ad3      	lsrs	r3, r2, #11
 800d75c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800d760:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d764:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800d768:	bf28      	it	cs
 800d76a:	3301      	addcs	r3, #1
 800d76c:	b29b      	uxth	r3, r3
 800d76e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d772:	9300      	str	r3, [sp, #0]
 800d774:	f64f 7380 	movw	r3, #65408	; 0xff80
 800d778:	2202      	movs	r2, #2
 800d77a:	4961      	ldr	r1, [pc, #388]	; (800d900 <dwt_ioctl+0x1cc4>)
 800d77c:	4630      	mov	r0, r6
 800d77e:	f7fd fdd3 	bl	800b328 <dwt_modify16bitoffsetreg>
 800d782:	2394      	movs	r3, #148	; 0x94
 800d784:	2200      	movs	r2, #0
 800d786:	495f      	ldr	r1, [pc, #380]	; (800d904 <dwt_ioctl+0x1cc8>)
 800d788:	4630      	mov	r0, r6
 800d78a:	f7fc ff7b 	bl	800a684 <dwt_write8bitoffsetreg>
 800d78e:	2500      	movs	r5, #0
 800d790:	f7fe bafe 	b.w	800bd90 <dwt_ioctl+0x154>
 800d794:	7b22      	ldrb	r2, [r4, #12]
 800d796:	4b59      	ldr	r3, [pc, #356]	; (800d8fc <dwt_ioctl+0x1cc0>)
 800d798:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800d79c:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 800d7a0:	fb02 f203 	mul.w	r2, r2, r3
 800d7a4:	0c93      	lsrs	r3, r2, #18
 800d7a6:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 800d7aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d7ae:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800d7b2:	bf28      	it	cs
 800d7b4:	3301      	addcs	r3, #1
 800d7b6:	b29b      	uxth	r3, r3
 800d7b8:	e7d9      	b.n	800d76e <dwt_ioctl+0x1b32>
 800d7ba:	2c00      	cmp	r4, #0
 800d7bc:	f000 823f 	beq.w	800dc3e <dwt_ioctl+0x2002>
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	4951      	ldr	r1, [pc, #324]	; (800d908 <dwt_ioctl+0x1ccc>)
 800d7c4:	f7fc f95b 	bl	8009a7e <dwt_read32bitoffsetreg>
 800d7c8:	6020      	str	r0, [r4, #0]
 800d7ca:	2500      	movs	r5, #0
 800d7cc:	f7fe bae0 	b.w	800bd90 <dwt_ioctl+0x154>
 800d7d0:	2c00      	cmp	r4, #0
 800d7d2:	f000 8237 	beq.w	800dc44 <dwt_ioctl+0x2008>
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	494c      	ldr	r1, [pc, #304]	; (800d90c <dwt_ioctl+0x1cd0>)
 800d7da:	f7fc f950 	bl	8009a7e <dwt_read32bitoffsetreg>
 800d7de:	6020      	str	r0, [r4, #0]
 800d7e0:	2500      	movs	r5, #0
 800d7e2:	f7fe bad5 	b.w	800bd90 <dwt_ioctl+0x154>
 800d7e6:	2c00      	cmp	r4, #0
 800d7e8:	f000 822f 	beq.w	800dc4a <dwt_ioctl+0x200e>
 800d7ec:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 800d7f0:	6023      	str	r3, [r4, #0]
 800d7f2:	2500      	movs	r5, #0
 800d7f4:	f7fe bacc 	b.w	800bd90 <dwt_ioctl+0x154>
 800d7f8:	2c00      	cmp	r4, #0
 800d7fa:	f000 8229 	beq.w	800dc50 <dwt_ioctl+0x2014>
 800d7fe:	2500      	movs	r5, #0
 800d800:	950b      	str	r5, [sp, #44]	; 0x2c
 800d802:	af10      	add	r7, sp, #64	; 0x40
 800d804:	2319      	movs	r3, #25
 800d806:	f847 3d10 	str.w	r3, [r7, #-16]!
 800d80a:	9700      	str	r7, [sp, #0]
 800d80c:	2304      	movs	r3, #4
 800d80e:	462a      	mov	r2, r5
 800d810:	493f      	ldr	r1, [pc, #252]	; (800d910 <dwt_ioctl+0x1cd4>)
 800d812:	f7fc fd41 	bl	800a298 <dwt_writetodevice>
 800d816:	f641 7348 	movw	r3, #8008	; 0x1f48
 800d81a:	930c      	str	r3, [sp, #48]	; 0x30
 800d81c:	9700      	str	r7, [sp, #0]
 800d81e:	2304      	movs	r3, #4
 800d820:	462a      	mov	r2, r5
 800d822:	493c      	ldr	r1, [pc, #240]	; (800d914 <dwt_ioctl+0x1cd8>)
 800d824:	4630      	mov	r0, r6
 800d826:	f7fc fd37 	bl	800a298 <dwt_writetodevice>
 800d82a:	ab0b      	add	r3, sp, #44	; 0x2c
 800d82c:	9300      	str	r3, [sp, #0]
 800d82e:	2304      	movs	r3, #4
 800d830:	462a      	mov	r2, r5
 800d832:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800d836:	4630      	mov	r0, r6
 800d838:	f7fc f917 	bl	8009a6a <dwt_readfromdevice>
 800d83c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d83e:	6023      	str	r3, [r4, #0]
 800d840:	f7fe baa6 	b.w	800bd90 <dwt_ioctl+0x154>
 800d844:	2c00      	cmp	r4, #0
 800d846:	f000 8206 	beq.w	800dc56 <dwt_ioctl+0x201a>
 800d84a:	2200      	movs	r2, #0
 800d84c:	4932      	ldr	r1, [pc, #200]	; (800d918 <dwt_ioctl+0x1cdc>)
 800d84e:	f7fc f916 	bl	8009a7e <dwt_read32bitoffsetreg>
 800d852:	b280      	uxth	r0, r0
 800d854:	6020      	str	r0, [r4, #0]
 800d856:	2200      	movs	r2, #0
 800d858:	4930      	ldr	r1, [pc, #192]	; (800d91c <dwt_ioctl+0x1ce0>)
 800d85a:	4630      	mov	r0, r6
 800d85c:	f7fc f90f 	bl	8009a7e <dwt_read32bitoffsetreg>
 800d860:	0d43      	lsrs	r3, r0, #21
 800d862:	019b      	lsls	r3, r3, #6
 800d864:	b29b      	uxth	r3, r3
 800d866:	6063      	str	r3, [r4, #4]
 800d868:	2500      	movs	r5, #0
 800d86a:	f7fe ba91 	b.w	800bd90 <dwt_ioctl+0x154>
 800d86e:	2c00      	cmp	r4, #0
 800d870:	f000 81f4 	beq.w	800dc5c <dwt_ioctl+0x2020>
 800d874:	7d63      	ldrb	r3, [r4, #21]
 800d876:	b133      	cbz	r3, 800d886 <dwt_ioctl+0x1c4a>
 800d878:	2b01      	cmp	r3, #1
 800d87a:	d05b      	beq.n	800d934 <dwt_ioctl+0x1cf8>
 800d87c:	2b02      	cmp	r3, #2
 800d87e:	f000 8082 	beq.w	800d986 <dwt_ioctl+0x1d4a>
 800d882:	23ff      	movs	r3, #255	; 0xff
 800d884:	e02f      	b.n	800d8e6 <dwt_ioctl+0x1caa>
 800d886:	2200      	movs	r2, #0
 800d888:	4925      	ldr	r1, [pc, #148]	; (800d920 <dwt_ioctl+0x1ce4>)
 800d88a:	f7fc f8f8 	bl	8009a7e <dwt_read32bitoffsetreg>
 800d88e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800d892:	6020      	str	r0, [r4, #0]
 800d894:	2200      	movs	r2, #0
 800d896:	4923      	ldr	r1, [pc, #140]	; (800d924 <dwt_ioctl+0x1ce8>)
 800d898:	4630      	mov	r0, r6
 800d89a:	f7fc f8f0 	bl	8009a7e <dwt_read32bitoffsetreg>
 800d89e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800d8a2:	6060      	str	r0, [r4, #4]
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	4920      	ldr	r1, [pc, #128]	; (800d928 <dwt_ioctl+0x1cec>)
 800d8a8:	4630      	mov	r0, r6
 800d8aa:	f7fc f8e8 	bl	8009a7e <dwt_read32bitoffsetreg>
 800d8ae:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800d8b2:	60a0      	str	r0, [r4, #8]
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	491d      	ldr	r1, [pc, #116]	; (800d92c <dwt_ioctl+0x1cf0>)
 800d8b8:	4630      	mov	r0, r6
 800d8ba:	f7fc f8e0 	bl	8009a7e <dwt_read32bitoffsetreg>
 800d8be:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800d8c2:	60e0      	str	r0, [r4, #12]
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	491a      	ldr	r1, [pc, #104]	; (800d930 <dwt_ioctl+0x1cf4>)
 800d8c8:	4630      	mov	r0, r6
 800d8ca:	f7fc f8d8 	bl	8009a7e <dwt_read32bitoffsetreg>
 800d8ce:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800d8d2:	6120      	str	r0, [r4, #16]
 800d8d4:	2203      	movs	r2, #3
 800d8d6:	490c      	ldr	r1, [pc, #48]	; (800d908 <dwt_ioctl+0x1ccc>)
 800d8d8:	4630      	mov	r0, r6
 800d8da:	f7fc f8f8 	bl	8009ace <dwt_read8bitoffsetreg>
 800d8de:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800d8e2:	7520      	strb	r0, [r4, #20]
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	75a3      	strb	r3, [r4, #22]
 800d8e8:	2500      	movs	r5, #0
 800d8ea:	f7fe ba51 	b.w	800bd90 <dwt_ioctl+0x154>
 800d8ee:	bf00      	nop
 800d8f0:	00050008 	.word	0x00050008
 800d8f4:	0005000c 	.word	0x0005000c
 800d8f8:	00110008 	.word	0x00110008
 800d8fc:	08015f80 	.word	0x08015f80
 800d900:	000e0014 	.word	0x000e0014
 800d904:	000e0018 	.word	0x000e0018
 800d908:	00030060 	.word	0x00030060
 800d90c:	000f004c 	.word	0x000f004c
 800d910:	001f0004 	.word	0x001f0004
 800d914:	001f0008 	.word	0x001f0008
 800d918:	000c0048 	.word	0x000c0048
 800d91c:	000c0028 	.word	0x000c0028
 800d920:	000c0058 	.word	0x000c0058
 800d924:	000c0030 	.word	0x000c0030
 800d928:	000c0034 	.word	0x000c0034
 800d92c:	000c0038 	.word	0x000c0038
 800d930:	000c002c 	.word	0x000c002c
 800d934:	2200      	movs	r2, #0
 800d936:	49d4      	ldr	r1, [pc, #848]	; (800dc88 <dwt_ioctl+0x204c>)
 800d938:	f7fc f8a1 	bl	8009a7e <dwt_read32bitoffsetreg>
 800d93c:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800d940:	6020      	str	r0, [r4, #0]
 800d942:	2200      	movs	r2, #0
 800d944:	49d1      	ldr	r1, [pc, #836]	; (800dc8c <dwt_ioctl+0x2050>)
 800d946:	4630      	mov	r0, r6
 800d948:	f7fc f899 	bl	8009a7e <dwt_read32bitoffsetreg>
 800d94c:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800d950:	6060      	str	r0, [r4, #4]
 800d952:	2200      	movs	r2, #0
 800d954:	49ce      	ldr	r1, [pc, #824]	; (800dc90 <dwt_ioctl+0x2054>)
 800d956:	4630      	mov	r0, r6
 800d958:	f7fc f891 	bl	8009a7e <dwt_read32bitoffsetreg>
 800d95c:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800d960:	60a0      	str	r0, [r4, #8]
 800d962:	2200      	movs	r2, #0
 800d964:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 800d968:	4630      	mov	r0, r6
 800d96a:	f7fc f888 	bl	8009a7e <dwt_read32bitoffsetreg>
 800d96e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800d972:	60e0      	str	r0, [r4, #12]
 800d974:	2200      	movs	r2, #0
 800d976:	49c7      	ldr	r1, [pc, #796]	; (800dc94 <dwt_ioctl+0x2058>)
 800d978:	4630      	mov	r0, r6
 800d97a:	f7fc f880 	bl	8009a7e <dwt_read32bitoffsetreg>
 800d97e:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800d982:	6120      	str	r0, [r4, #16]
 800d984:	e7a6      	b.n	800d8d4 <dwt_ioctl+0x1c98>
 800d986:	2200      	movs	r2, #0
 800d988:	49c3      	ldr	r1, [pc, #780]	; (800dc98 <dwt_ioctl+0x205c>)
 800d98a:	f7fc f878 	bl	8009a7e <dwt_read32bitoffsetreg>
 800d98e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800d992:	6020      	str	r0, [r4, #0]
 800d994:	2200      	movs	r2, #0
 800d996:	49c1      	ldr	r1, [pc, #772]	; (800dc9c <dwt_ioctl+0x2060>)
 800d998:	4630      	mov	r0, r6
 800d99a:	f7fc f870 	bl	8009a7e <dwt_read32bitoffsetreg>
 800d99e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800d9a2:	6060      	str	r0, [r4, #4]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	49be      	ldr	r1, [pc, #760]	; (800dca0 <dwt_ioctl+0x2064>)
 800d9a8:	4630      	mov	r0, r6
 800d9aa:	f7fc f868 	bl	8009a7e <dwt_read32bitoffsetreg>
 800d9ae:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800d9b2:	60a0      	str	r0, [r4, #8]
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	49bb      	ldr	r1, [pc, #748]	; (800dca4 <dwt_ioctl+0x2068>)
 800d9b8:	4630      	mov	r0, r6
 800d9ba:	f7fc f860 	bl	8009a7e <dwt_read32bitoffsetreg>
 800d9be:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800d9c2:	60e0      	str	r0, [r4, #12]
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	49b8      	ldr	r1, [pc, #736]	; (800dca8 <dwt_ioctl+0x206c>)
 800d9c8:	4630      	mov	r0, r6
 800d9ca:	f7fc f858 	bl	8009a7e <dwt_read32bitoffsetreg>
 800d9ce:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800d9d2:	6120      	str	r0, [r4, #16]
 800d9d4:	e77e      	b.n	800d8d4 <dwt_ioctl+0x1c98>
 800d9d6:	2500      	movs	r5, #0
 800d9d8:	f7fe b9da 	b.w	800bd90 <dwt_ioctl+0x154>
 800d9dc:	2500      	movs	r5, #0
 800d9de:	f7fe b9d7 	b.w	800bd90 <dwt_ioctl+0x154>
 800d9e2:	2500      	movs	r5, #0
 800d9e4:	f7fe b9d4 	b.w	800bd90 <dwt_ioctl+0x154>
 800d9e8:	2500      	movs	r5, #0
 800d9ea:	f7fe b9d1 	b.w	800bd90 <dwt_ioctl+0x154>
 800d9ee:	2500      	movs	r5, #0
 800d9f0:	f7fe b9ce 	b.w	800bd90 <dwt_ioctl+0x154>
 800d9f4:	2500      	movs	r5, #0
 800d9f6:	f7fe b9cb 	b.w	800bd90 <dwt_ioctl+0x154>
 800d9fa:	2500      	movs	r5, #0
 800d9fc:	f7fe b9c8 	b.w	800bd90 <dwt_ioctl+0x154>
 800da00:	2500      	movs	r5, #0
 800da02:	f7fe b9c5 	b.w	800bd90 <dwt_ioctl+0x154>
 800da06:	2500      	movs	r5, #0
 800da08:	f7fe b9c2 	b.w	800bd90 <dwt_ioctl+0x154>
 800da0c:	2500      	movs	r5, #0
 800da0e:	f7fe b9bf 	b.w	800bd90 <dwt_ioctl+0x154>
 800da12:	2500      	movs	r5, #0
 800da14:	f7fe b9bc 	b.w	800bd90 <dwt_ioctl+0x154>
 800da18:	2500      	movs	r5, #0
 800da1a:	f7fe b9b9 	b.w	800bd90 <dwt_ioctl+0x154>
 800da1e:	2500      	movs	r5, #0
 800da20:	f7fe b9b6 	b.w	800bd90 <dwt_ioctl+0x154>
 800da24:	2500      	movs	r5, #0
 800da26:	f7fe b9b3 	b.w	800bd90 <dwt_ioctl+0x154>
 800da2a:	2500      	movs	r5, #0
 800da2c:	f7fe b9b0 	b.w	800bd90 <dwt_ioctl+0x154>
 800da30:	2500      	movs	r5, #0
 800da32:	f7fe b9ad 	b.w	800bd90 <dwt_ioctl+0x154>
 800da36:	2500      	movs	r5, #0
 800da38:	f7fe b9aa 	b.w	800bd90 <dwt_ioctl+0x154>
 800da3c:	2500      	movs	r5, #0
 800da3e:	f7fe b9a7 	b.w	800bd90 <dwt_ioctl+0x154>
 800da42:	2500      	movs	r5, #0
 800da44:	f7fe b9a4 	b.w	800bd90 <dwt_ioctl+0x154>
 800da48:	2500      	movs	r5, #0
 800da4a:	f7fe b9a1 	b.w	800bd90 <dwt_ioctl+0x154>
 800da4e:	2500      	movs	r5, #0
 800da50:	f7fe b99e 	b.w	800bd90 <dwt_ioctl+0x154>
 800da54:	2500      	movs	r5, #0
 800da56:	f7fe b99b 	b.w	800bd90 <dwt_ioctl+0x154>
 800da5a:	2500      	movs	r5, #0
 800da5c:	f7fe b998 	b.w	800bd90 <dwt_ioctl+0x154>
 800da60:	2500      	movs	r5, #0
 800da62:	f7fe b995 	b.w	800bd90 <dwt_ioctl+0x154>
 800da66:	2500      	movs	r5, #0
 800da68:	f7fe b992 	b.w	800bd90 <dwt_ioctl+0x154>
 800da6c:	2500      	movs	r5, #0
 800da6e:	f7fe b98f 	b.w	800bd90 <dwt_ioctl+0x154>
 800da72:	2500      	movs	r5, #0
 800da74:	f7fe b98c 	b.w	800bd90 <dwt_ioctl+0x154>
 800da78:	2500      	movs	r5, #0
 800da7a:	f7fe b989 	b.w	800bd90 <dwt_ioctl+0x154>
 800da7e:	2500      	movs	r5, #0
 800da80:	f7fe b986 	b.w	800bd90 <dwt_ioctl+0x154>
 800da84:	2500      	movs	r5, #0
 800da86:	f7fe b983 	b.w	800bd90 <dwt_ioctl+0x154>
 800da8a:	2500      	movs	r5, #0
 800da8c:	f7fe b980 	b.w	800bd90 <dwt_ioctl+0x154>
 800da90:	2500      	movs	r5, #0
 800da92:	f7fe b97d 	b.w	800bd90 <dwt_ioctl+0x154>
 800da96:	2500      	movs	r5, #0
 800da98:	f7fe b97a 	b.w	800bd90 <dwt_ioctl+0x154>
 800da9c:	2500      	movs	r5, #0
 800da9e:	f7fe b977 	b.w	800bd90 <dwt_ioctl+0x154>
 800daa2:	2500      	movs	r5, #0
 800daa4:	f7fe b974 	b.w	800bd90 <dwt_ioctl+0x154>
 800daa8:	2500      	movs	r5, #0
 800daaa:	f7fe b971 	b.w	800bd90 <dwt_ioctl+0x154>
 800daae:	2500      	movs	r5, #0
 800dab0:	f7fe b96e 	b.w	800bd90 <dwt_ioctl+0x154>
 800dab4:	2500      	movs	r5, #0
 800dab6:	f7fe b96b 	b.w	800bd90 <dwt_ioctl+0x154>
 800daba:	2500      	movs	r5, #0
 800dabc:	f7fe b968 	b.w	800bd90 <dwt_ioctl+0x154>
 800dac0:	2500      	movs	r5, #0
 800dac2:	f7fe b965 	b.w	800bd90 <dwt_ioctl+0x154>
 800dac6:	2500      	movs	r5, #0
 800dac8:	f7fe b962 	b.w	800bd90 <dwt_ioctl+0x154>
 800dacc:	2500      	movs	r5, #0
 800dace:	f7fe b95f 	b.w	800bd90 <dwt_ioctl+0x154>
 800dad2:	2500      	movs	r5, #0
 800dad4:	f7fe b95c 	b.w	800bd90 <dwt_ioctl+0x154>
 800dad8:	2500      	movs	r5, #0
 800dada:	f7fe b959 	b.w	800bd90 <dwt_ioctl+0x154>
 800dade:	2500      	movs	r5, #0
 800dae0:	f7fe b956 	b.w	800bd90 <dwt_ioctl+0x154>
 800dae4:	2500      	movs	r5, #0
 800dae6:	f7fe b953 	b.w	800bd90 <dwt_ioctl+0x154>
 800daea:	2500      	movs	r5, #0
 800daec:	f7fe b950 	b.w	800bd90 <dwt_ioctl+0x154>
 800daf0:	2500      	movs	r5, #0
 800daf2:	f7fe b94d 	b.w	800bd90 <dwt_ioctl+0x154>
 800daf6:	2500      	movs	r5, #0
 800daf8:	f7fe b94a 	b.w	800bd90 <dwt_ioctl+0x154>
 800dafc:	2500      	movs	r5, #0
 800dafe:	f7fe b947 	b.w	800bd90 <dwt_ioctl+0x154>
 800db02:	2500      	movs	r5, #0
 800db04:	f7fe b944 	b.w	800bd90 <dwt_ioctl+0x154>
 800db08:	2500      	movs	r5, #0
 800db0a:	f7fe b941 	b.w	800bd90 <dwt_ioctl+0x154>
 800db0e:	2500      	movs	r5, #0
 800db10:	f7fe b93e 	b.w	800bd90 <dwt_ioctl+0x154>
 800db14:	2500      	movs	r5, #0
 800db16:	f7fe b93b 	b.w	800bd90 <dwt_ioctl+0x154>
 800db1a:	2500      	movs	r5, #0
 800db1c:	f7fe b938 	b.w	800bd90 <dwt_ioctl+0x154>
 800db20:	2500      	movs	r5, #0
 800db22:	f7fe b935 	b.w	800bd90 <dwt_ioctl+0x154>
 800db26:	2500      	movs	r5, #0
 800db28:	f7fe b932 	b.w	800bd90 <dwt_ioctl+0x154>
 800db2c:	2500      	movs	r5, #0
 800db2e:	f7fe b92f 	b.w	800bd90 <dwt_ioctl+0x154>
 800db32:	2500      	movs	r5, #0
 800db34:	f7fe b92c 	b.w	800bd90 <dwt_ioctl+0x154>
 800db38:	2500      	movs	r5, #0
 800db3a:	f7fe b929 	b.w	800bd90 <dwt_ioctl+0x154>
 800db3e:	2500      	movs	r5, #0
 800db40:	f7fe b926 	b.w	800bd90 <dwt_ioctl+0x154>
 800db44:	2500      	movs	r5, #0
 800db46:	f7fe b923 	b.w	800bd90 <dwt_ioctl+0x154>
 800db4a:	2500      	movs	r5, #0
 800db4c:	f7fe b920 	b.w	800bd90 <dwt_ioctl+0x154>
 800db50:	2500      	movs	r5, #0
 800db52:	f7fe b91d 	b.w	800bd90 <dwt_ioctl+0x154>
 800db56:	2500      	movs	r5, #0
 800db58:	f7fe b91a 	b.w	800bd90 <dwt_ioctl+0x154>
 800db5c:	2500      	movs	r5, #0
 800db5e:	f7fe b917 	b.w	800bd90 <dwt_ioctl+0x154>
 800db62:	2500      	movs	r5, #0
 800db64:	f7fe b914 	b.w	800bd90 <dwt_ioctl+0x154>
 800db68:	2500      	movs	r5, #0
 800db6a:	f7fe b911 	b.w	800bd90 <dwt_ioctl+0x154>
 800db6e:	2500      	movs	r5, #0
 800db70:	f7fe b90e 	b.w	800bd90 <dwt_ioctl+0x154>
 800db74:	2500      	movs	r5, #0
 800db76:	f7fe b90b 	b.w	800bd90 <dwt_ioctl+0x154>
 800db7a:	2500      	movs	r5, #0
 800db7c:	f7fe b908 	b.w	800bd90 <dwt_ioctl+0x154>
 800db80:	2500      	movs	r5, #0
 800db82:	f7fe b905 	b.w	800bd90 <dwt_ioctl+0x154>
 800db86:	2500      	movs	r5, #0
 800db88:	f7fe b902 	b.w	800bd90 <dwt_ioctl+0x154>
 800db8c:	2500      	movs	r5, #0
 800db8e:	f7fe b8ff 	b.w	800bd90 <dwt_ioctl+0x154>
 800db92:	2500      	movs	r5, #0
 800db94:	f7fe b8fc 	b.w	800bd90 <dwt_ioctl+0x154>
 800db98:	2500      	movs	r5, #0
 800db9a:	f7fe b8f9 	b.w	800bd90 <dwt_ioctl+0x154>
 800db9e:	2500      	movs	r5, #0
 800dba0:	f7fe b8f6 	b.w	800bd90 <dwt_ioctl+0x154>
 800dba4:	2500      	movs	r5, #0
 800dba6:	f7fe b8f3 	b.w	800bd90 <dwt_ioctl+0x154>
 800dbaa:	2500      	movs	r5, #0
 800dbac:	f7fe b8f0 	b.w	800bd90 <dwt_ioctl+0x154>
 800dbb0:	2500      	movs	r5, #0
 800dbb2:	f7fe b8ed 	b.w	800bd90 <dwt_ioctl+0x154>
 800dbb6:	2500      	movs	r5, #0
 800dbb8:	f7fe b8ea 	b.w	800bd90 <dwt_ioctl+0x154>
 800dbbc:	2500      	movs	r5, #0
 800dbbe:	f7fe b8e7 	b.w	800bd90 <dwt_ioctl+0x154>
 800dbc2:	2500      	movs	r5, #0
 800dbc4:	f7fe b8e4 	b.w	800bd90 <dwt_ioctl+0x154>
 800dbc8:	2500      	movs	r5, #0
 800dbca:	f7fe b8e1 	b.w	800bd90 <dwt_ioctl+0x154>
 800dbce:	2500      	movs	r5, #0
 800dbd0:	f7fe b8de 	b.w	800bd90 <dwt_ioctl+0x154>
 800dbd4:	2500      	movs	r5, #0
 800dbd6:	f7fe b8db 	b.w	800bd90 <dwt_ioctl+0x154>
 800dbda:	2500      	movs	r5, #0
 800dbdc:	f7fe b8d8 	b.w	800bd90 <dwt_ioctl+0x154>
 800dbe0:	2500      	movs	r5, #0
 800dbe2:	f7fe b8d5 	b.w	800bd90 <dwt_ioctl+0x154>
 800dbe6:	2500      	movs	r5, #0
 800dbe8:	f7fe b8d2 	b.w	800bd90 <dwt_ioctl+0x154>
 800dbec:	2500      	movs	r5, #0
 800dbee:	f7fe b8cf 	b.w	800bd90 <dwt_ioctl+0x154>
 800dbf2:	2500      	movs	r5, #0
 800dbf4:	f7fe b8cc 	b.w	800bd90 <dwt_ioctl+0x154>
 800dbf8:	2500      	movs	r5, #0
 800dbfa:	f7fe b8c9 	b.w	800bd90 <dwt_ioctl+0x154>
 800dbfe:	2500      	movs	r5, #0
 800dc00:	f7fe b8c6 	b.w	800bd90 <dwt_ioctl+0x154>
 800dc04:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800dc08:	f7fe b8c2 	b.w	800bd90 <dwt_ioctl+0x154>
 800dc0c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800dc10:	f7fe b8be 	b.w	800bd90 <dwt_ioctl+0x154>
 800dc14:	2500      	movs	r5, #0
 800dc16:	f7fe b8bb 	b.w	800bd90 <dwt_ioctl+0x154>
 800dc1a:	2500      	movs	r5, #0
 800dc1c:	f7fe b8b8 	b.w	800bd90 <dwt_ioctl+0x154>
 800dc20:	2500      	movs	r5, #0
 800dc22:	f7fe b8b5 	b.w	800bd90 <dwt_ioctl+0x154>
 800dc26:	2500      	movs	r5, #0
 800dc28:	f7fe b8b2 	b.w	800bd90 <dwt_ioctl+0x154>
 800dc2c:	2500      	movs	r5, #0
 800dc2e:	f7fe b8af 	b.w	800bd90 <dwt_ioctl+0x154>
 800dc32:	2500      	movs	r5, #0
 800dc34:	f7fe b8ac 	b.w	800bd90 <dwt_ioctl+0x154>
 800dc38:	2500      	movs	r5, #0
 800dc3a:	f7fe b8a9 	b.w	800bd90 <dwt_ioctl+0x154>
 800dc3e:	2500      	movs	r5, #0
 800dc40:	f7fe b8a6 	b.w	800bd90 <dwt_ioctl+0x154>
 800dc44:	2500      	movs	r5, #0
 800dc46:	f7fe b8a3 	b.w	800bd90 <dwt_ioctl+0x154>
 800dc4a:	2500      	movs	r5, #0
 800dc4c:	f7fe b8a0 	b.w	800bd90 <dwt_ioctl+0x154>
 800dc50:	2500      	movs	r5, #0
 800dc52:	f7fe b89d 	b.w	800bd90 <dwt_ioctl+0x154>
 800dc56:	2500      	movs	r5, #0
 800dc58:	f7fe b89a 	b.w	800bd90 <dwt_ioctl+0x154>
 800dc5c:	2500      	movs	r5, #0
 800dc5e:	f7fe b897 	b.w	800bd90 <dwt_ioctl+0x154>
 800dc62:	f899 3011 	ldrb.w	r3, [r9, #17]
 800dc66:	1e5a      	subs	r2, r3, #1
 800dc68:	b2d2      	uxtb	r2, r2
 800dc6a:	2a01      	cmp	r2, #1
 800dc6c:	f67e aeec 	bls.w	800ca48 <dwt_ioctl+0xe0c>
 800dc70:	2202      	movs	r2, #2
 800dc72:	f7fe be93 	b.w	800c99c <dwt_ioctl+0xd60>
 800dc76:	2f00      	cmp	r7, #0
 800dc78:	f43f ab68 	beq.w	800d34c <dwt_ioctl+0x1710>
 800dc7c:	f819 1000 	ldrb.w	r1, [r9, r0]
 800dc80:	1a5b      	subs	r3, r3, r1
 800dc82:	b29b      	uxth	r3, r3
 800dc84:	f7ff bb88 	b.w	800d398 <dwt_ioctl+0x175c>
 800dc88:	000d0020 	.word	0x000d0020
 800dc8c:	000c0064 	.word	0x000c0064
 800dc90:	000c0068 	.word	0x000c0068
 800dc94:	000c0060 	.word	0x000c0060
 800dc98:	000d0068 	.word	0x000d0068
 800dc9c:	000d0040 	.word	0x000d0040
 800dca0:	000d0044 	.word	0x000d0044
 800dca4:	000d0048 	.word	0x000d0048
 800dca8:	000d003c 	.word	0x000d003c
 800dcac:	283f      	cmp	r0, #63	; 0x3f
 800dcae:	d027      	beq.n	800dd00 <dwt_ioctl+0x20c4>
 800dcb0:	2e00      	cmp	r6, #0
 800dcb2:	f47f ab51 	bne.w	800d358 <dwt_ioctl+0x171c>
 800dcb6:	3001      	adds	r0, #1
 800dcb8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800dcbc:	f819 1000 	ldrb.w	r1, [r9, r0]
 800dcc0:	440b      	add	r3, r1
 800dcc2:	b29b      	uxth	r3, r3
 800dcc4:	459c      	cmp	ip, r3
 800dcc6:	f43f ab65 	beq.w	800d394 <dwt_ioctl+0x1758>
 800dcca:	3d01      	subs	r5, #1
 800dccc:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 800dcd0:	f43f ab23 	beq.w	800d31a <dwt_ioctl+0x16de>
 800dcd4:	459e      	cmp	lr, r3
 800dcd6:	f4bf ab33 	bcs.w	800d340 <dwt_ioctl+0x1704>
 800dcda:	4598      	cmp	r8, r3
 800dcdc:	d9cb      	bls.n	800dc76 <dwt_ioctl+0x203a>
 800dcde:	ebac 0103 	sub.w	r1, ip, r3
 800dce2:	b209      	sxth	r1, r1
 800dce4:	2900      	cmp	r1, #0
 800dce6:	bfb8      	it	lt
 800dce8:	4249      	neglt	r1, r1
 800dcea:	4559      	cmp	r1, fp
 800dcec:	f77f ab20 	ble.w	800d330 <dwt_ioctl+0x16f4>
 800dcf0:	2f00      	cmp	r7, #0
 800dcf2:	f47f ab64 	bne.w	800d3be <dwt_ioctl+0x1782>
 800dcf6:	283f      	cmp	r0, #63	; 0x3f
 800dcf8:	d1da      	bne.n	800dcb0 <dwt_ioctl+0x2074>
 800dcfa:	2f00      	cmp	r7, #0
 800dcfc:	f47f ab64 	bne.w	800d3c8 <dwt_ioctl+0x178c>
 800dd00:	2a03      	cmp	r2, #3
 800dd02:	f43f ab64 	beq.w	800d3ce <dwt_ioctl+0x1792>
 800dd06:	2a02      	cmp	r2, #2
 800dd08:	f43f ab33 	beq.w	800d372 <dwt_ioctl+0x1736>
 800dd0c:	f81a 1002 	ldrb.w	r1, [sl, r2]
 800dd10:	185e      	adds	r6, r3, r1
 800dd12:	4566      	cmp	r6, ip
 800dd14:	f77f ab34 	ble.w	800d380 <dwt_ioctl+0x1744>
 800dd18:	440b      	add	r3, r1
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	3201      	adds	r2, #1
 800dd1e:	b2d2      	uxtb	r2, r2
 800dd20:	2700      	movs	r7, #0
 800dd22:	f7ff bb19 	b.w	800d358 <dwt_ioctl+0x171c>
 800dd26:	bf00      	nop

0800dd28 <_init>:
 800dd28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd2a:	b085      	sub	sp, #20
 800dd2c:	4604      	mov	r4, r0
 800dd2e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800dd30:	6819      	ldr	r1, [r3, #0]
 800dd32:	f7fd fe57 	bl	800b9e4 <ull_initialise>
 800dd36:	4606      	mov	r6, r0
 800dd38:	6823      	ldr	r3, [r4, #0]
 800dd3a:	691b      	ldr	r3, [r3, #16]
 800dd3c:	4798      	blx	r3
 800dd3e:	ab03      	add	r3, sp, #12
 800dd40:	2200      	movs	r2, #0
 800dd42:	4611      	mov	r1, r2
 800dd44:	4620      	mov	r0, r4
 800dd46:	f7fd ff79 	bl	800bc3c <dwt_ioctl>
 800dd4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dd4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd4e:	6819      	ldr	r1, [r3, #0]
 800dd50:	4620      	mov	r0, r4
 800dd52:	f7fd fc07 	bl	800b564 <ull_configure>
 800dd56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dd58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd5a:	6859      	ldr	r1, [r3, #4]
 800dd5c:	4620      	mov	r0, r4
 800dd5e:	f7fd f953 	bl	800b008 <ull_configuretxrf>
 800dd62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dd64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd66:	89db      	ldrh	r3, [r3, #14]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800dd6e:	4620      	mov	r0, r4
 800dd70:	f7fc fa9d 	bl	800a2ae <dwt_write16bitoffsetreg>
 800dd74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dd76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd78:	899b      	ldrh	r3, [r3, #12]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	217c      	movs	r1, #124	; 0x7c
 800dd7e:	4620      	mov	r0, r4
 800dd80:	f7fc fa95 	bl	800a2ae <dwt_write16bitoffsetreg>
 800dd84:	2100      	movs	r1, #0
 800dd86:	4620      	mov	r0, r4
 800dd88:	f7fc fb29 	bl	800a3de <ull_setrxaftertxdelay>
 800dd8c:	2500      	movs	r5, #0
 800dd8e:	9500      	str	r5, [sp, #0]
 800dd90:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 800dd94:	462a      	mov	r2, r5
 800dd96:	2110      	movs	r1, #16
 800dd98:	4620      	mov	r0, r4
 800dd9a:	f7fd fac5 	bl	800b328 <dwt_modify16bitoffsetreg>
 800dd9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dda0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dda2:	895a      	ldrh	r2, [r3, #10]
 800dda4:	8919      	ldrh	r1, [r3, #8]
 800dda6:	4620      	mov	r0, r4
 800dda8:	f7fd f9bc 	bl	800b124 <ull_configureframefilter>
 800ddac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ddae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddb0:	8a1b      	ldrh	r3, [r3, #16]
 800ddb2:	2202      	movs	r2, #2
 800ddb4:	210c      	movs	r1, #12
 800ddb6:	4620      	mov	r0, r4
 800ddb8:	f7fc fa79 	bl	800a2ae <dwt_write16bitoffsetreg>
 800ddbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ddbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddc0:	8a5b      	ldrh	r3, [r3, #18]
 800ddc2:	462a      	mov	r2, r5
 800ddc4:	210c      	movs	r1, #12
 800ddc6:	4620      	mov	r0, r4
 800ddc8:	f7fc fa71 	bl	800a2ae <dwt_write16bitoffsetreg>
 800ddcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ddce:	7a19      	ldrb	r1, [r3, #8]
 800ddd0:	4620      	mov	r0, r4
 800ddd2:	f7fd fac3 	bl	800b35c <ull_setleds>
 800ddd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ddd8:	68d9      	ldr	r1, [r3, #12]
 800ddda:	4620      	mov	r0, r4
 800dddc:	f7fc fb13 	bl	800a406 <ull_setlnapamode>
 800dde0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dde2:	7e0b      	ldrb	r3, [r1, #24]
 800dde4:	694a      	ldr	r2, [r1, #20]
 800dde6:	6909      	ldr	r1, [r1, #16]
 800dde8:	4620      	mov	r0, r4
 800ddea:	f7fd fa21 	bl	800b230 <ull_setinterrupt>
 800ddee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ddf0:	7f9a      	ldrb	r2, [r3, #30]
 800ddf2:	8b99      	ldrh	r1, [r3, #28]
 800ddf4:	4620      	mov	r0, r4
 800ddf6:	f7fc fd19 	bl	800a82c <ull_configuresleep>
 800ddfa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ddfc:	7b53      	ldrb	r3, [r2, #13]
 800ddfe:	2b2e      	cmp	r3, #46	; 0x2e
 800de00:	d005      	beq.n	800de0e <_init+0xe6>
 800de02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de04:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800de08:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 800de0c:	d00a      	beq.n	800de24 <_init+0xfc>
 800de0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de10:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800de14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de18:	7353      	strb	r3, [r2, #13]
 800de1a:	2200      	movs	r2, #0
 800de1c:	492a      	ldr	r1, [pc, #168]	; (800dec8 <_init+0x1a0>)
 800de1e:	4620      	mov	r0, r4
 800de20:	f7fc fc30 	bl	800a684 <dwt_write8bitoffsetreg>
 800de24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de26:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 800de2a:	4620      	mov	r0, r4
 800de2c:	f7fd f874 	bl	800af18 <ull_configciadiag>
 800de30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de32:	6a19      	ldr	r1, [r3, #32]
 800de34:	4620      	mov	r0, r4
 800de36:	f7fc fb07 	bl	800a448 <ull_configurestskey>
 800de3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de3c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800de3e:	4620      	mov	r0, r4
 800de40:	f7fc fb26 	bl	800a490 <ull_configurestsiv>
 800de44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de46:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800de4a:	bb9b      	cbnz	r3, 800deb4 <_init+0x18c>
 800de4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de4e:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 800de52:	4620      	mov	r0, r4
 800de54:	f7fc fc8e 	bl	800a774 <ull_configeventcounters>
 800de58:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
 800de5c:	2d00      	cmp	r5, #0
 800de5e:	db26      	blt.n	800deae <_init+0x186>
 800de60:	2301      	movs	r3, #1
 800de62:	fa03 f505 	lsl.w	r5, r3, r5
 800de66:	b2af      	uxth	r7, r5
 800de68:	4a18      	ldr	r2, [pc, #96]	; (800decc <_init+0x1a4>)
 800de6a:	4639      	mov	r1, r7
 800de6c:	4620      	mov	r0, r4
 800de6e:	f7fc ffef 	bl	800ae50 <ull_setgpiomode>
 800de72:	f10d 030a 	add.w	r3, sp, #10
 800de76:	9300      	str	r3, [sp, #0]
 800de78:	2302      	movs	r3, #2
 800de7a:	2200      	movs	r2, #0
 800de7c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800de80:	4620      	mov	r0, r4
 800de82:	f7fb fdf2 	bl	8009a6a <dwt_readfromdevice>
 800de86:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800de8a:	ea23 0305 	bic.w	r3, r3, r5
 800de8e:	f8ad 300a 	strh.w	r3, [sp, #10]
 800de92:	2200      	movs	r2, #0
 800de94:	490e      	ldr	r1, [pc, #56]	; (800ded0 <_init+0x1a8>)
 800de96:	4620      	mov	r0, r4
 800de98:	f7fc fa09 	bl	800a2ae <dwt_write16bitoffsetreg>
 800de9c:	f994 204d 	ldrsb.w	r2, [r4, #77]	; 0x4d
 800dea0:	fab2 f282 	clz	r2, r2
 800dea4:	0952      	lsrs	r2, r2, #5
 800dea6:	4639      	mov	r1, r7
 800dea8:	4620      	mov	r0, r4
 800deaa:	f7fd fad5 	bl	800b458 <ull_setgpiovalue>
 800deae:	4630      	mov	r0, r6
 800deb0:	b005      	add	sp, #20
 800deb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800deb4:	2301      	movs	r3, #1
 800deb6:	9300      	str	r3, [sp, #0]
 800deb8:	23ff      	movs	r3, #255	; 0xff
 800deba:	2200      	movs	r2, #0
 800debc:	4905      	ldr	r1, [pc, #20]	; (800ded4 <_init+0x1ac>)
 800debe:	4620      	mov	r0, r4
 800dec0:	f7fd f816 	bl	800aef0 <dwt_modify8bitoffsetreg>
 800dec4:	e7c2      	b.n	800de4c <_init+0x124>
 800dec6:	bf00      	nop
 800dec8:	00090014 	.word	0x00090014
 800decc:	01200492 	.word	0x01200492
 800ded0:	00050008 	.word	0x00050008
 800ded4:	00020004 	.word	0x00020004

0800ded8 <ull_wakeup_ic>:
 800ded8:	b508      	push	{r3, lr}
 800deda:	6843      	ldr	r3, [r0, #4]
 800dedc:	4798      	blx	r3
 800dede:	bd08      	pop	{r3, pc}

0800dee0 <get_sts_mnth>:
 800dee0:	fb01 f100 	mul.w	r1, r1, r0
 800dee4:	2a03      	cmp	r2, #3
 800dee6:	d00a      	beq.n	800defe <get_sts_mnth+0x1e>
 800dee8:	0ac8      	lsrs	r0, r1, #11
 800deea:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800deee:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800def2:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800def6:	bf28      	it	cs
 800def8:	3001      	addcs	r0, #1
 800defa:	b280      	uxth	r0, r0
 800defc:	4770      	bx	lr
 800defe:	20b5      	movs	r0, #181	; 0xb5
 800df00:	fb00 f101 	mul.w	r1, r0, r1
 800df04:	09c9      	lsrs	r1, r1, #7
 800df06:	e7ef      	b.n	800dee8 <get_sts_mnth+0x8>

0800df08 <dwt_dbg_fn>:
 800df08:	2998      	cmp	r1, #152	; 0x98
 800df0a:	4802      	ldr	r0, [pc, #8]	; (800df14 <dwt_dbg_fn+0xc>)
 800df0c:	bf18      	it	ne
 800df0e:	2000      	movne	r0, #0
 800df10:	4770      	bx	lr
 800df12:	bf00      	nop
 800df14:	08016088 	.word	0x08016088

0800df18 <_deinit>:
 800df18:	4770      	bx	lr

0800df1a <dwt_xfer3xxx>:
 800df1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df1e:	b084      	sub	sp, #16
 800df20:	4605      	mov	r5, r0
 800df22:	460f      	mov	r7, r1
 800df24:	461e      	mov	r6, r3
 800df26:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800df2a:	1e59      	subs	r1, r3, #1
 800df2c:	b289      	uxth	r1, r1
 800df2e:	2901      	cmp	r1, #1
 800df30:	d91c      	bls.n	800df6c <dwt_xfer3xxx+0x52>
 800df32:	19d0      	adds	r0, r2, r7
 800df34:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800df38:	443a      	add	r2, r7
 800df3a:	f3c2 4104 	ubfx	r1, r2, #16, #5
 800df3e:	0082      	lsls	r2, r0, #2
 800df40:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800df44:	ea43 0102 	orr.w	r1, r3, r2
 800df48:	0a09      	lsrs	r1, r1, #8
 800df4a:	f88d 100c 	strb.w	r1, [sp, #12]
 800df4e:	b920      	cbnz	r0, 800df5a <dwt_xfer3xxx+0x40>
 800df50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800df54:	d018      	beq.n	800df88 <dwt_xfer3xxx+0x6e>
 800df56:	2b00      	cmp	r3, #0
 800df58:	d037      	beq.n	800dfca <dwt_xfer3xxx+0xb0>
 800df5a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800df5e:	f88d 100c 	strb.w	r1, [sp, #12]
 800df62:	431a      	orrs	r2, r3
 800df64:	f88d 200d 	strb.w	r2, [sp, #13]
 800df68:	2402      	movs	r4, #2
 800df6a:	e005      	b.n	800df78 <dwt_xfer3xxx+0x5e>
 800df6c:	007a      	lsls	r2, r7, #1
 800df6e:	f062 027e 	orn	r2, r2, #126	; 0x7e
 800df72:	f88d 200c 	strb.w	r2, [sp, #12]
 800df76:	2401      	movs	r4, #1
 800df78:	2b02      	cmp	r3, #2
 800df7a:	d006      	beq.n	800df8a <dwt_xfer3xxx+0x70>
 800df7c:	d326      	bcc.n	800dfcc <dwt_xfer3xxx+0xb2>
 800df7e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800df82:	2b03      	cmp	r3, #3
 800df84:	d901      	bls.n	800df8a <dwt_xfer3xxx+0x70>
 800df86:	e7fe      	b.n	800df86 <dwt_xfer3xxx+0x6c>
 800df88:	2401      	movs	r4, #1
 800df8a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800df8c:	7d1b      	ldrb	r3, [r3, #20]
 800df8e:	b94b      	cbnz	r3, 800dfa4 <dwt_xfer3xxx+0x8a>
 800df90:	682b      	ldr	r3, [r5, #0]
 800df92:	685d      	ldr	r5, [r3, #4]
 800df94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df96:	4632      	mov	r2, r6
 800df98:	a903      	add	r1, sp, #12
 800df9a:	4620      	mov	r0, r4
 800df9c:	47a8      	blx	r5
 800df9e:	b004      	add	sp, #16
 800dfa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	4621      	mov	r1, r4
 800dfa8:	a803      	add	r0, sp, #12
 800dfaa:	f7f7 fad1 	bl	8005550 <dwt_generatecrc8>
 800dfae:	4602      	mov	r2, r0
 800dfb0:	4631      	mov	r1, r6
 800dfb2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dfb4:	f7f7 facc 	bl	8005550 <dwt_generatecrc8>
 800dfb8:	682b      	ldr	r3, [r5, #0]
 800dfba:	9000      	str	r0, [sp, #0]
 800dfbc:	689d      	ldr	r5, [r3, #8]
 800dfbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfc0:	4632      	mov	r2, r6
 800dfc2:	a903      	add	r1, sp, #12
 800dfc4:	4620      	mov	r0, r4
 800dfc6:	47a8      	blx	r5
 800dfc8:	e7e9      	b.n	800df9e <dwt_xfer3xxx+0x84>
 800dfca:	2401      	movs	r4, #1
 800dfcc:	682b      	ldr	r3, [r5, #0]
 800dfce:	f8d3 8000 	ldr.w	r8, [r3]
 800dfd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfd4:	4632      	mov	r2, r6
 800dfd6:	a903      	add	r1, sp, #12
 800dfd8:	4620      	mov	r0, r4
 800dfda:	47c0      	blx	r8
 800dfdc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800dfde:	7d1b      	ldrb	r3, [r3, #20]
 800dfe0:	2b02      	cmp	r3, #2
 800dfe2:	d1dc      	bne.n	800df9e <dwt_xfer3xxx+0x84>
 800dfe4:	2f18      	cmp	r7, #24
 800dfe6:	d0da      	beq.n	800df9e <dwt_xfer3xxx+0x84>
 800dfe8:	2200      	movs	r2, #0
 800dfea:	4621      	mov	r1, r4
 800dfec:	a803      	add	r0, sp, #12
 800dfee:	f7f7 faaf 	bl	8005550 <dwt_generatecrc8>
 800dff2:	4602      	mov	r2, r0
 800dff4:	4631      	mov	r1, r6
 800dff6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dff8:	f7f7 faaa 	bl	8005550 <dwt_generatecrc8>
 800dffc:	4604      	mov	r4, r0
 800dffe:	2200      	movs	r2, #0
 800e000:	2118      	movs	r1, #24
 800e002:	4628      	mov	r0, r5
 800e004:	f000 f866 	bl	800e0d4 <dwt_read8bitoffsetreg>
 800e008:	4284      	cmp	r4, r0
 800e00a:	d0c8      	beq.n	800df9e <dwt_xfer3xxx+0x84>
 800e00c:	68eb      	ldr	r3, [r5, #12]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d0c5      	beq.n	800df9e <dwt_xfer3xxx+0x84>
 800e012:	4798      	blx	r3
 800e014:	e7c3      	b.n	800df9e <dwt_xfer3xxx+0x84>

0800e016 <dwt_readfromdevice>:
 800e016:	b510      	push	{r4, lr}
 800e018:	b082      	sub	sp, #8
 800e01a:	2400      	movs	r4, #0
 800e01c:	9401      	str	r4, [sp, #4]
 800e01e:	9c04      	ldr	r4, [sp, #16]
 800e020:	9400      	str	r4, [sp, #0]
 800e022:	f7ff ff7a 	bl	800df1a <dwt_xfer3xxx>
 800e026:	b002      	add	sp, #8
 800e028:	bd10      	pop	{r4, pc}

0800e02a <dwt_read32bitoffsetreg>:
 800e02a:	b500      	push	{lr}
 800e02c:	b085      	sub	sp, #20
 800e02e:	ab03      	add	r3, sp, #12
 800e030:	9300      	str	r3, [sp, #0]
 800e032:	2304      	movs	r3, #4
 800e034:	b292      	uxth	r2, r2
 800e036:	f7ff ffee 	bl	800e016 <dwt_readfromdevice>
 800e03a:	f10d 030f 	add.w	r3, sp, #15
 800e03e:	f10d 010b 	add.w	r1, sp, #11
 800e042:	2000      	movs	r0, #0
 800e044:	f813 2901 	ldrb.w	r2, [r3], #-1
 800e048:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 800e04c:	428b      	cmp	r3, r1
 800e04e:	d1f9      	bne.n	800e044 <dwt_read32bitoffsetreg+0x1a>
 800e050:	b005      	add	sp, #20
 800e052:	f85d fb04 	ldr.w	pc, [sp], #4

0800e056 <dwt_read16bitoffsetreg>:
 800e056:	b500      	push	{lr}
 800e058:	b085      	sub	sp, #20
 800e05a:	ab03      	add	r3, sp, #12
 800e05c:	9300      	str	r3, [sp, #0]
 800e05e:	2302      	movs	r3, #2
 800e060:	b292      	uxth	r2, r2
 800e062:	f7ff ffd8 	bl	800e016 <dwt_readfromdevice>
 800e066:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800e06a:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800e06e:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 800e072:	b280      	uxth	r0, r0
 800e074:	b005      	add	sp, #20
 800e076:	f85d fb04 	ldr.w	pc, [sp], #4

0800e07a <ull_getrxantennadelay>:
 800e07a:	b508      	push	{r3, lr}
 800e07c:	2200      	movs	r2, #0
 800e07e:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800e082:	f7ff ffe8 	bl	800e056 <dwt_read16bitoffsetreg>
 800e086:	bd08      	pop	{r3, pc}

0800e088 <ull_gettxantennadelay>:
 800e088:	b508      	push	{r3, lr}
 800e08a:	2200      	movs	r2, #0
 800e08c:	217c      	movs	r1, #124	; 0x7c
 800e08e:	f7ff ffe2 	bl	800e056 <dwt_read16bitoffsetreg>
 800e092:	bd08      	pop	{r3, pc}

0800e094 <ull_readclockoffset>:
 800e094:	b508      	push	{r3, lr}
 800e096:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e098:	7b9b      	ldrb	r3, [r3, #14]
 800e09a:	2b01      	cmp	r3, #1
 800e09c:	d00a      	beq.n	800e0b4 <ull_readclockoffset+0x20>
 800e09e:	2b03      	cmp	r3, #3
 800e0a0:	d10e      	bne.n	800e0c0 <ull_readclockoffset+0x2c>
 800e0a2:	220c      	movs	r2, #12
 800e0a4:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800e0a8:	f7ff ffd5 	bl	800e056 <dwt_read16bitoffsetreg>
 800e0ac:	b200      	sxth	r0, r0
 800e0ae:	f340 000c 	sbfx	r0, r0, #0, #13
 800e0b2:	bd08      	pop	{r3, pc}
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	4905      	ldr	r1, [pc, #20]	; (800e0cc <ull_readclockoffset+0x38>)
 800e0b8:	f7ff ffcd 	bl	800e056 <dwt_read16bitoffsetreg>
 800e0bc:	b200      	sxth	r0, r0
 800e0be:	e7f6      	b.n	800e0ae <ull_readclockoffset+0x1a>
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	4903      	ldr	r1, [pc, #12]	; (800e0d0 <ull_readclockoffset+0x3c>)
 800e0c4:	f7ff ffc7 	bl	800e056 <dwt_read16bitoffsetreg>
 800e0c8:	b200      	sxth	r0, r0
 800e0ca:	e7f0      	b.n	800e0ae <ull_readclockoffset+0x1a>
 800e0cc:	0018000c 	.word	0x0018000c
 800e0d0:	000c0020 	.word	0x000c0020

0800e0d4 <dwt_read8bitoffsetreg>:
 800e0d4:	b500      	push	{lr}
 800e0d6:	b085      	sub	sp, #20
 800e0d8:	f10d 030f 	add.w	r3, sp, #15
 800e0dc:	9300      	str	r3, [sp, #0]
 800e0de:	2301      	movs	r3, #1
 800e0e0:	b292      	uxth	r2, r2
 800e0e2:	f7ff ff98 	bl	800e016 <dwt_readfromdevice>
 800e0e6:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800e0ea:	b005      	add	sp, #20
 800e0ec:	f85d fb04 	ldr.w	pc, [sp], #4

0800e0f0 <ull_readcarrierintegrator>:
 800e0f0:	b500      	push	{lr}
 800e0f2:	b085      	sub	sp, #20
 800e0f4:	ab03      	add	r3, sp, #12
 800e0f6:	9300      	str	r3, [sp, #0]
 800e0f8:	2303      	movs	r3, #3
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	490b      	ldr	r1, [pc, #44]	; (800e12c <ull_readcarrierintegrator+0x3c>)
 800e0fe:	f7ff ff8a 	bl	800e016 <dwt_readfromdevice>
 800e102:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800e106:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800e10a:	eb00 2303 	add.w	r3, r0, r3, lsl #8
 800e10e:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800e112:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 800e116:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800e11a:	bf1c      	itt	ne
 800e11c:	ea6f 3000 	mvnne.w	r0, r0, lsl #12
 800e120:	ea6f 3010 	mvnne.w	r0, r0, lsr #12
 800e124:	b005      	add	sp, #20
 800e126:	f85d fb04 	ldr.w	pc, [sp], #4
 800e12a:	bf00      	nop
 800e12c:	00060029 	.word	0x00060029

0800e130 <ull_readdiagnostics>:
 800e130:	b530      	push	{r4, r5, lr}
 800e132:	b0bd      	sub	sp, #244	; 0xf4
 800e134:	4605      	mov	r5, r0
 800e136:	460c      	mov	r4, r1
 800e138:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e13a:	7b9a      	ldrb	r2, [r3, #14]
 800e13c:	2a01      	cmp	r2, #1
 800e13e:	d01c      	beq.n	800e17a <ull_readdiagnostics+0x4a>
 800e140:	2a03      	cmp	r2, #3
 800e142:	f040 81f1 	bne.w	800e528 <ull_readdiagnostics+0x3f8>
 800e146:	7d9b      	ldrb	r3, [r3, #22]
 800e148:	f013 0f08 	tst.w	r3, #8
 800e14c:	d10c      	bne.n	800e168 <ull_readdiagnostics+0x38>
 800e14e:	f013 0f04 	tst.w	r3, #4
 800e152:	ab02      	add	r3, sp, #8
 800e154:	9300      	str	r3, [sp, #0]
 800e156:	bf14      	ite	ne
 800e158:	2338      	movne	r3, #56	; 0x38
 800e15a:	2320      	moveq	r3, #32
 800e15c:	2200      	movs	r2, #0
 800e15e:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800e162:	f7ff ff58 	bl	800e016 <dwt_readfromdevice>
 800e166:	e019      	b.n	800e19c <ull_readdiagnostics+0x6c>
 800e168:	ab02      	add	r3, sp, #8
 800e16a:	9300      	str	r3, [sp, #0]
 800e16c:	23e8      	movs	r3, #232	; 0xe8
 800e16e:	2200      	movs	r2, #0
 800e170:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800e174:	f7ff ff4f 	bl	800e016 <dwt_readfromdevice>
 800e178:	e010      	b.n	800e19c <ull_readdiagnostics+0x6c>
 800e17a:	7d9b      	ldrb	r3, [r3, #22]
 800e17c:	f013 0f08 	tst.w	r3, #8
 800e180:	f040 81c9 	bne.w	800e516 <ull_readdiagnostics+0x3e6>
 800e184:	f013 0f04 	tst.w	r3, #4
 800e188:	ab02      	add	r3, sp, #8
 800e18a:	9300      	str	r3, [sp, #0]
 800e18c:	bf14      	ite	ne
 800e18e:	2338      	movne	r3, #56	; 0x38
 800e190:	2320      	moveq	r3, #32
 800e192:	2200      	movs	r2, #0
 800e194:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800e198:	f7ff ff3d 	bl	800e016 <dwt_readfromdevice>
 800e19c:	f10d 0217 	add.w	r2, sp, #23
 800e1a0:	f104 031a 	add.w	r3, r4, #26
 800e1a4:	f104 0020 	add.w	r0, r4, #32
 800e1a8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800e1ac:	f803 1b01 	strb.w	r1, [r3], #1
 800e1b0:	4283      	cmp	r3, r0
 800e1b2:	d1f9      	bne.n	800e1a8 <ull_readdiagnostics+0x78>
 800e1b4:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800e1b8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800e1bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e1c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e1c4:	8463      	strh	r3, [r4, #34]	; 0x22
 800e1c6:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800e1ca:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800e1ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e1d2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e1d6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800e1da:	bf1c      	itt	ne
 800e1dc:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 800e1e0:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 800e1e4:	8423      	strh	r3, [r4, #32]
 800e1e6:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 800e1ea:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800e1ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e1f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e1f6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800e1f8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800e1fa:	7d9b      	ldrb	r3, [r3, #22]
 800e1fc:	f013 0f02 	tst.w	r3, #2
 800e200:	f040 817e 	bne.w	800e500 <ull_readdiagnostics+0x3d0>
 800e204:	aa0a      	add	r2, sp, #40	; 0x28
 800e206:	1e63      	subs	r3, r4, #1
 800e208:	1d20      	adds	r0, r4, #4
 800e20a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800e20e:	f803 1f01 	strb.w	r1, [r3, #1]!
 800e212:	79d1      	ldrb	r1, [r2, #7]
 800e214:	7219      	strb	r1, [r3, #8]
 800e216:	7bd1      	ldrb	r1, [r2, #15]
 800e218:	7459      	strb	r1, [r3, #17]
 800e21a:	4283      	cmp	r3, r0
 800e21c:	d1f5      	bne.n	800e20a <ull_readdiagnostics+0xda>
 800e21e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800e222:	7163      	strb	r3, [r4, #5]
 800e224:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 800e228:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 800e22c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e230:	80e3      	strh	r3, [r4, #6]
 800e232:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800e236:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800e23a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e23e:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800e242:	f8a4 300d 	strh.w	r3, [r4, #13]
 800e246:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800e24a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800e24e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e252:	f8a4 300f 	strh.w	r3, [r4, #15]
 800e256:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 800e25a:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800e25e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e262:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800e266:	82e3      	strh	r3, [r4, #22]
 800e268:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 800e26c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 800e270:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e274:	8323      	strh	r3, [r4, #24]
 800e276:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800e278:	7d9b      	ldrb	r3, [r3, #22]
 800e27a:	f013 0f04 	tst.w	r3, #4
 800e27e:	f040 813f 	bne.w	800e500 <ull_readdiagnostics+0x3d0>
 800e282:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 800e286:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800e28a:	041b      	lsls	r3, r3, #16
 800e28c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e290:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800e294:	4313      	orrs	r3, r2
 800e296:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800e29a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e29e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800e2a2:	6263      	str	r3, [r4, #36]	; 0x24
 800e2a4:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 800e2a8:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 800e2ac:	041b      	lsls	r3, r3, #16
 800e2ae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e2b2:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800e2b6:	4313      	orrs	r3, r2
 800e2b8:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 800e2bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e2c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e2c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800e2c6:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 800e2ca:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 800e2ce:	041b      	lsls	r3, r3, #16
 800e2d0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e2d4:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 800e2d8:	4313      	orrs	r3, r2
 800e2da:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 800e2de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e2e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e2e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e2e8:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 800e2ec:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 800e2f0:	041b      	lsls	r3, r3, #16
 800e2f2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e2f6:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 800e2fa:	4313      	orrs	r3, r2
 800e2fc:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 800e300:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e304:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e308:	6323      	str	r3, [r4, #48]	; 0x30
 800e30a:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 800e30e:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 800e312:	041b      	lsls	r3, r3, #16
 800e314:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e318:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800e31c:	4313      	orrs	r3, r2
 800e31e:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 800e322:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e326:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e32a:	6363      	str	r3, [r4, #52]	; 0x34
 800e32c:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 800e330:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 800e334:	041b      	lsls	r3, r3, #16
 800e336:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e33a:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800e33e:	4313      	orrs	r3, r2
 800e340:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 800e344:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e348:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e34c:	63a3      	str	r3, [r4, #56]	; 0x38
 800e34e:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 800e352:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800e356:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e35a:	87a3      	strh	r3, [r4, #60]	; 0x3c
 800e35c:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 800e360:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 800e364:	041b      	lsls	r3, r3, #16
 800e366:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e36a:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 800e36e:	4313      	orrs	r3, r2
 800e370:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 800e374:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e378:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800e37c:	6423      	str	r3, [r4, #64]	; 0x40
 800e37e:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 800e382:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 800e386:	041b      	lsls	r3, r3, #16
 800e388:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e38c:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 800e390:	4313      	orrs	r3, r2
 800e392:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
 800e396:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e39a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e39e:	6463      	str	r3, [r4, #68]	; 0x44
 800e3a0:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 800e3a4:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 800e3a8:	041b      	lsls	r3, r3, #16
 800e3aa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e3ae:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 800e3b2:	4313      	orrs	r3, r2
 800e3b4:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 800e3b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e3bc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e3c0:	64a3      	str	r3, [r4, #72]	; 0x48
 800e3c2:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 800e3c6:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 800e3ca:	041b      	lsls	r3, r3, #16
 800e3cc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e3d0:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 800e3d4:	4313      	orrs	r3, r2
 800e3d6:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
 800e3da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e3de:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e3e2:	64e3      	str	r3, [r4, #76]	; 0x4c
 800e3e4:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 800e3e8:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
 800e3ec:	041b      	lsls	r3, r3, #16
 800e3ee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e3f2:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 800e3f6:	4313      	orrs	r3, r2
 800e3f8:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 800e3fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e400:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e404:	6523      	str	r3, [r4, #80]	; 0x50
 800e406:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 800e40a:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 800e40e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e412:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800e416:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 800e41a:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 800e41e:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 800e422:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e42a:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 800e42e:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 800e432:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 800e436:	041b      	lsls	r3, r3, #16
 800e438:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e43c:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 800e440:	4313      	orrs	r3, r2
 800e442:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 800e446:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e44a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800e44e:	65a3      	str	r3, [r4, #88]	; 0x58
 800e450:	f89d 20c3 	ldrb.w	r2, [sp, #195]	; 0xc3
 800e454:	f89d 30c2 	ldrb.w	r3, [sp, #194]	; 0xc2
 800e458:	041b      	lsls	r3, r3, #16
 800e45a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e45e:	f89d 20c0 	ldrb.w	r2, [sp, #192]	; 0xc0
 800e462:	4313      	orrs	r3, r2
 800e464:	f89d 20c1 	ldrb.w	r2, [sp, #193]	; 0xc1
 800e468:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e46c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e470:	65e3      	str	r3, [r4, #92]	; 0x5c
 800e472:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
 800e476:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
 800e47a:	041b      	lsls	r3, r3, #16
 800e47c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e480:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 800e484:	4313      	orrs	r3, r2
 800e486:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
 800e48a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e48e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e492:	6623      	str	r3, [r4, #96]	; 0x60
 800e494:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
 800e498:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 800e49c:	041b      	lsls	r3, r3, #16
 800e49e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e4a2:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 800e4a6:	4313      	orrs	r3, r2
 800e4a8:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 800e4ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e4b0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e4b4:	6663      	str	r3, [r4, #100]	; 0x64
 800e4b6:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
 800e4ba:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
 800e4be:	041b      	lsls	r3, r3, #16
 800e4c0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e4c4:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 800e4c8:	4313      	orrs	r3, r2
 800e4ca:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 800e4ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e4d2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e4d6:	66a3      	str	r3, [r4, #104]	; 0x68
 800e4d8:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 800e4dc:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 800e4e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e4e4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800e4e8:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800e4ec:	f89d 20ed 	ldrb.w	r2, [sp, #237]	; 0xed
 800e4f0:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 800e4f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e4f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e4fc:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 800e500:	f994 301b 	ldrsb.w	r3, [r4, #27]
 800e504:	2b00      	cmp	r3, #0
 800e506:	f2c0 81d0 	blt.w	800e8aa <ull_readdiagnostics+0x77a>
 800e50a:	7fe3      	ldrb	r3, [r4, #31]
 800e50c:	f003 0301 	and.w	r3, r3, #1
 800e510:	77e3      	strb	r3, [r4, #31]
 800e512:	b03d      	add	sp, #244	; 0xf4
 800e514:	bd30      	pop	{r4, r5, pc}
 800e516:	ab02      	add	r3, sp, #8
 800e518:	9300      	str	r3, [sp, #0]
 800e51a:	23e8      	movs	r3, #232	; 0xe8
 800e51c:	2200      	movs	r2, #0
 800e51e:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800e522:	f7ff fd78 	bl	800e016 <dwt_readfromdevice>
 800e526:	e639      	b.n	800e19c <ull_readdiagnostics+0x6c>
 800e528:	7d9b      	ldrb	r3, [r3, #22]
 800e52a:	f013 0f01 	tst.w	r3, #1
 800e52e:	f000 81b3 	beq.w	800e898 <ull_readdiagnostics+0x768>
 800e532:	ab02      	add	r3, sp, #8
 800e534:	9300      	str	r3, [sp, #0]
 800e536:	236c      	movs	r3, #108	; 0x6c
 800e538:	2200      	movs	r2, #0
 800e53a:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800e53e:	f7ff fd6a 	bl	800e016 <dwt_readfromdevice>
 800e542:	ab1d      	add	r3, sp, #116	; 0x74
 800e544:	9300      	str	r3, [sp, #0]
 800e546:	236c      	movs	r3, #108	; 0x6c
 800e548:	2200      	movs	r2, #0
 800e54a:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 800e54e:	4628      	mov	r0, r5
 800e550:	f7ff fd61 	bl	800e016 <dwt_readfromdevice>
 800e554:	aa02      	add	r2, sp, #8
 800e556:	1e63      	subs	r3, r4, #1
 800e558:	1d20      	adds	r0, r4, #4
 800e55a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800e55e:	f803 1f01 	strb.w	r1, [r3, #1]!
 800e562:	79d1      	ldrb	r1, [r2, #7]
 800e564:	7219      	strb	r1, [r3, #8]
 800e566:	7bd1      	ldrb	r1, [r2, #15]
 800e568:	7459      	strb	r1, [r3, #17]
 800e56a:	7dd1      	ldrb	r1, [r2, #23]
 800e56c:	7699      	strb	r1, [r3, #26]
 800e56e:	4283      	cmp	r3, r0
 800e570:	d1f3      	bne.n	800e55a <ull_readdiagnostics+0x42a>
 800e572:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800e576:	77e3      	strb	r3, [r4, #31]
 800e578:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800e57c:	7163      	strb	r3, [r4, #5]
 800e57e:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800e582:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800e586:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e58a:	80e3      	strh	r3, [r4, #6]
 800e58c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e590:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800e594:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800e598:	f3c2 12cf 	ubfx	r2, r2, #7, #16
 800e59c:	f8a4 200d 	strh.w	r2, [r4, #13]
 800e5a0:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800e5a4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800e5a8:	f8a4 200f 	strh.w	r2, [r4, #15]
 800e5ac:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800e5b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e5b4:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800e5b8:	82e3      	strh	r3, [r4, #22]
 800e5ba:	f89d 201e 	ldrb.w	r2, [sp, #30]
 800e5be:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800e5c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e5c6:	8323      	strh	r3, [r4, #24]
 800e5c8:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 800e5cc:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 800e5d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e5d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e5d8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800e5dc:	bf1c      	itt	ne
 800e5de:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 800e5e2:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 800e5e6:	8423      	strh	r3, [r4, #32]
 800e5e8:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 800e5ec:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800e5f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e5f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e5f8:	8463      	strh	r3, [r4, #34]	; 0x22
 800e5fa:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 800e5fe:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800e602:	041b      	lsls	r3, r3, #16
 800e604:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e608:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 800e60c:	4313      	orrs	r3, r2
 800e60e:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 800e612:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e616:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800e61a:	6263      	str	r3, [r4, #36]	; 0x24
 800e61c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800e61e:	7d9b      	ldrb	r3, [r3, #22]
 800e620:	f013 0f01 	tst.w	r3, #1
 800e624:	f43f af6c 	beq.w	800e500 <ull_readdiagnostics+0x3d0>
 800e628:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800e62c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 800e630:	041b      	lsls	r3, r3, #16
 800e632:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e636:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800e63a:	4313      	orrs	r3, r2
 800e63c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 800e640:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e644:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e648:	62a3      	str	r3, [r4, #40]	; 0x28
 800e64a:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800e64e:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800e652:	041b      	lsls	r3, r3, #16
 800e654:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e658:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800e65c:	4313      	orrs	r3, r2
 800e65e:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800e662:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e666:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e66a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e66c:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 800e670:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 800e674:	041b      	lsls	r3, r3, #16
 800e676:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e67a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 800e67e:	4313      	orrs	r3, r2
 800e680:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 800e684:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e688:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e68c:	6323      	str	r3, [r4, #48]	; 0x30
 800e68e:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 800e692:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800e696:	041b      	lsls	r3, r3, #16
 800e698:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e69c:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800e6a0:	4313      	orrs	r3, r2
 800e6a2:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 800e6a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e6aa:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e6ae:	6363      	str	r3, [r4, #52]	; 0x34
 800e6b0:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 800e6b4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800e6b8:	041b      	lsls	r3, r3, #16
 800e6ba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e6be:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800e6c2:	4313      	orrs	r3, r2
 800e6c4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800e6c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e6cc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e6d0:	63a3      	str	r3, [r4, #56]	; 0x38
 800e6d2:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 800e6d6:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800e6da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e6de:	87a3      	strh	r3, [r4, #60]	; 0x3c
 800e6e0:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 800e6e4:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800e6e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e6ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e6f0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800e6f2:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 800e6f6:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 800e6fa:	041b      	lsls	r3, r3, #16
 800e6fc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e700:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800e704:	4313      	orrs	r3, r2
 800e706:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 800e70a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e70e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800e712:	6423      	str	r3, [r4, #64]	; 0x40
 800e714:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 800e718:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
 800e71c:	041b      	lsls	r3, r3, #16
 800e71e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e722:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 800e726:	4313      	orrs	r3, r2
 800e728:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 800e72c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e730:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e734:	6463      	str	r3, [r4, #68]	; 0x44
 800e736:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
 800e73a:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 800e73e:	041b      	lsls	r3, r3, #16
 800e740:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e744:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 800e748:	4313      	orrs	r3, r2
 800e74a:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 800e74e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e752:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e756:	64a3      	str	r3, [r4, #72]	; 0x48
 800e758:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 800e75c:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 800e760:	041b      	lsls	r3, r3, #16
 800e762:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e766:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 800e76a:	4313      	orrs	r3, r2
 800e76c:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
 800e770:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e774:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e778:	64e3      	str	r3, [r4, #76]	; 0x4c
 800e77a:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 800e77e:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 800e782:	041b      	lsls	r3, r3, #16
 800e784:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e788:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 800e78c:	4313      	orrs	r3, r2
 800e78e:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 800e792:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e796:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e79a:	6523      	str	r3, [r4, #80]	; 0x50
 800e79c:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 800e7a0:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 800e7a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e7a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800e7ac:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 800e7b0:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 800e7b4:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 800e7b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e7bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e7c0:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 800e7c4:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 800e7c8:	f89d 30ae 	ldrb.w	r3, [sp, #174]	; 0xae
 800e7cc:	041b      	lsls	r3, r3, #16
 800e7ce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e7d2:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 800e7d6:	4313      	orrs	r3, r2
 800e7d8:	f89d 20ad 	ldrb.w	r2, [sp, #173]	; 0xad
 800e7dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e7e0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800e7e4:	65a3      	str	r3, [r4, #88]	; 0x58
 800e7e6:	f89d 20b3 	ldrb.w	r2, [sp, #179]	; 0xb3
 800e7ea:	f89d 30b2 	ldrb.w	r3, [sp, #178]	; 0xb2
 800e7ee:	041b      	lsls	r3, r3, #16
 800e7f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e7f4:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 800e7f8:	4313      	orrs	r3, r2
 800e7fa:	f89d 20b1 	ldrb.w	r2, [sp, #177]	; 0xb1
 800e7fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e802:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e806:	65e3      	str	r3, [r4, #92]	; 0x5c
 800e808:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 800e80c:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
 800e810:	041b      	lsls	r3, r3, #16
 800e812:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e816:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 800e81a:	4313      	orrs	r3, r2
 800e81c:	f89d 20b5 	ldrb.w	r2, [sp, #181]	; 0xb5
 800e820:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e824:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e828:	6623      	str	r3, [r4, #96]	; 0x60
 800e82a:	f89d 20bb 	ldrb.w	r2, [sp, #187]	; 0xbb
 800e82e:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
 800e832:	041b      	lsls	r3, r3, #16
 800e834:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e838:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 800e83c:	4313      	orrs	r3, r2
 800e83e:	f89d 20b9 	ldrb.w	r2, [sp, #185]	; 0xb9
 800e842:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e846:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e84a:	6663      	str	r3, [r4, #100]	; 0x64
 800e84c:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 800e850:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 800e854:	041b      	lsls	r3, r3, #16
 800e856:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e85a:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 800e85e:	4313      	orrs	r3, r2
 800e860:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 800e864:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e868:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e86c:	66a3      	str	r3, [r4, #104]	; 0x68
 800e86e:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 800e872:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 800e876:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e87a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800e87e:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800e882:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 800e886:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 800e88a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e88e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e892:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 800e896:	e633      	b.n	800e500 <ull_readdiagnostics+0x3d0>
 800e898:	ab02      	add	r3, sp, #8
 800e89a:	9300      	str	r3, [sp, #0]
 800e89c:	2328      	movs	r3, #40	; 0x28
 800e89e:	2200      	movs	r2, #0
 800e8a0:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800e8a4:	f7ff fbb7 	bl	800e016 <dwt_readfromdevice>
 800e8a8:	e654      	b.n	800e554 <ull_readdiagnostics+0x424>
 800e8aa:	23ff      	movs	r3, #255	; 0xff
 800e8ac:	7723      	strb	r3, [r4, #28]
 800e8ae:	7763      	strb	r3, [r4, #29]
 800e8b0:	77a3      	strb	r3, [r4, #30]
 800e8b2:	77e3      	strb	r3, [r4, #31]
 800e8b4:	e629      	b.n	800e50a <ull_readdiagnostics+0x3da>
	...

0800e8b8 <ull_readrxtimestamp>:
 800e8b8:	b500      	push	{lr}
 800e8ba:	b083      	sub	sp, #12
 800e8bc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e8be:	7b9b      	ldrb	r3, [r3, #14]
 800e8c0:	2b01      	cmp	r3, #1
 800e8c2:	d00b      	beq.n	800e8dc <ull_readrxtimestamp+0x24>
 800e8c4:	2b03      	cmp	r3, #3
 800e8c6:	d110      	bne.n	800e8ea <ull_readrxtimestamp+0x32>
 800e8c8:	9100      	str	r1, [sp, #0]
 800e8ca:	2305      	movs	r3, #5
 800e8cc:	2204      	movs	r2, #4
 800e8ce:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800e8d2:	f7ff fba0 	bl	800e016 <dwt_readfromdevice>
 800e8d6:	b003      	add	sp, #12
 800e8d8:	f85d fb04 	ldr.w	pc, [sp], #4
 800e8dc:	9100      	str	r1, [sp, #0]
 800e8de:	2305      	movs	r3, #5
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	4905      	ldr	r1, [pc, #20]	; (800e8f8 <ull_readrxtimestamp+0x40>)
 800e8e4:	f7ff fb97 	bl	800e016 <dwt_readfromdevice>
 800e8e8:	e7f5      	b.n	800e8d6 <ull_readrxtimestamp+0x1e>
 800e8ea:	9100      	str	r1, [sp, #0]
 800e8ec:	2305      	movs	r3, #5
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	2160      	movs	r1, #96	; 0x60
 800e8f2:	f7ff fb90 	bl	800e016 <dwt_readfromdevice>
 800e8f6:	e7ee      	b.n	800e8d6 <ull_readrxtimestamp+0x1e>
 800e8f8:	00180004 	.word	0x00180004

0800e8fc <dwt_writetodevice>:
 800e8fc:	b510      	push	{r4, lr}
 800e8fe:	b082      	sub	sp, #8
 800e900:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 800e904:	9401      	str	r4, [sp, #4]
 800e906:	9c04      	ldr	r4, [sp, #16]
 800e908:	9400      	str	r4, [sp, #0]
 800e90a:	f7ff fb06 	bl	800df1a <dwt_xfer3xxx>
 800e90e:	b002      	add	sp, #8
 800e910:	bd10      	pop	{r4, pc}

0800e912 <dwt_write16bitoffsetreg>:
 800e912:	b500      	push	{lr}
 800e914:	b085      	sub	sp, #20
 800e916:	f88d 300c 	strb.w	r3, [sp, #12]
 800e91a:	0a1b      	lsrs	r3, r3, #8
 800e91c:	f88d 300d 	strb.w	r3, [sp, #13]
 800e920:	ab03      	add	r3, sp, #12
 800e922:	9300      	str	r3, [sp, #0]
 800e924:	2302      	movs	r3, #2
 800e926:	b292      	uxth	r2, r2
 800e928:	f7ff ffe8 	bl	800e8fc <dwt_writetodevice>
 800e92c:	b005      	add	sp, #20
 800e92e:	f85d fb04 	ldr.w	pc, [sp], #4

0800e932 <ull_setrxantennadelay>:
 800e932:	b508      	push	{r3, lr}
 800e934:	460b      	mov	r3, r1
 800e936:	2200      	movs	r2, #0
 800e938:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800e93c:	f7ff ffe9 	bl	800e912 <dwt_write16bitoffsetreg>
 800e940:	bd08      	pop	{r3, pc}

0800e942 <ull_settxantennadelay>:
 800e942:	b508      	push	{r3, lr}
 800e944:	460b      	mov	r3, r1
 800e946:	2200      	movs	r2, #0
 800e948:	217c      	movs	r1, #124	; 0x7c
 800e94a:	f7ff ffe2 	bl	800e912 <dwt_write16bitoffsetreg>
 800e94e:	bd08      	pop	{r3, pc}

0800e950 <ull_force_clocks>:
 800e950:	b508      	push	{r3, lr}
 800e952:	2901      	cmp	r1, #1
 800e954:	d002      	beq.n	800e95c <ull_force_clocks+0xc>
 800e956:	2905      	cmp	r1, #5
 800e958:	d007      	beq.n	800e96a <ull_force_clocks+0x1a>
 800e95a:	bd08      	pop	{r3, pc}
 800e95c:	f641 0322 	movw	r3, #6178	; 0x1822
 800e960:	2200      	movs	r2, #0
 800e962:	4905      	ldr	r1, [pc, #20]	; (800e978 <ull_force_clocks+0x28>)
 800e964:	f7ff ffd5 	bl	800e912 <dwt_write16bitoffsetreg>
 800e968:	e7f7      	b.n	800e95a <ull_force_clocks+0xa>
 800e96a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e96e:	2200      	movs	r2, #0
 800e970:	4901      	ldr	r1, [pc, #4]	; (800e978 <ull_force_clocks+0x28>)
 800e972:	f7ff ffce 	bl	800e912 <dwt_write16bitoffsetreg>
 800e976:	e7f0      	b.n	800e95a <ull_force_clocks+0xa>
 800e978:	00110004 	.word	0x00110004

0800e97c <__dwt_otp_write_wdata_id_reg>:
 800e97c:	b538      	push	{r3, r4, r5, lr}
 800e97e:	4605      	mov	r5, r0
 800e980:	460c      	mov	r4, r1
 800e982:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 800e986:	b29b      	uxth	r3, r3
 800e988:	2200      	movs	r2, #0
 800e98a:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800e98e:	f7ff ffc0 	bl	800e912 <dwt_write16bitoffsetreg>
 800e992:	b2a3      	uxth	r3, r4
 800e994:	2200      	movs	r2, #0
 800e996:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800e99a:	4628      	mov	r0, r5
 800e99c:	f7ff ffb9 	bl	800e912 <dwt_write16bitoffsetreg>
 800e9a0:	bd38      	pop	{r3, r4, r5, pc}
	...

0800e9a4 <_dwt_otpread>:
 800e9a4:	b570      	push	{r4, r5, r6, lr}
 800e9a6:	4604      	mov	r4, r0
 800e9a8:	460e      	mov	r6, r1
 800e9aa:	4d0c      	ldr	r5, [pc, #48]	; (800e9dc <_dwt_otpread+0x38>)
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	4629      	mov	r1, r5
 800e9b2:	f7ff ffae 	bl	800e912 <dwt_write16bitoffsetreg>
 800e9b6:	4633      	mov	r3, r6
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	4909      	ldr	r1, [pc, #36]	; (800e9e0 <_dwt_otpread+0x3c>)
 800e9bc:	4620      	mov	r0, r4
 800e9be:	f7ff ffa8 	bl	800e912 <dwt_write16bitoffsetreg>
 800e9c2:	2302      	movs	r3, #2
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	4629      	mov	r1, r5
 800e9c8:	4620      	mov	r0, r4
 800e9ca:	f7ff ffa2 	bl	800e912 <dwt_write16bitoffsetreg>
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	4904      	ldr	r1, [pc, #16]	; (800e9e4 <_dwt_otpread+0x40>)
 800e9d2:	4620      	mov	r0, r4
 800e9d4:	f7ff fb29 	bl	800e02a <dwt_read32bitoffsetreg>
 800e9d8:	bd70      	pop	{r4, r5, r6, pc}
 800e9da:	bf00      	nop
 800e9dc:	000b0008 	.word	0x000b0008
 800e9e0:	000b0004 	.word	0x000b0004
 800e9e4:	000b0010 	.word	0x000b0010

0800e9e8 <dwt_write32bitoffsetreg>:
 800e9e8:	b510      	push	{r4, lr}
 800e9ea:	b084      	sub	sp, #16
 800e9ec:	f88d 300c 	strb.w	r3, [sp, #12]
 800e9f0:	0a1c      	lsrs	r4, r3, #8
 800e9f2:	f88d 400d 	strb.w	r4, [sp, #13]
 800e9f6:	0c1c      	lsrs	r4, r3, #16
 800e9f8:	f88d 400e 	strb.w	r4, [sp, #14]
 800e9fc:	0e1b      	lsrs	r3, r3, #24
 800e9fe:	f88d 300f 	strb.w	r3, [sp, #15]
 800ea02:	ab03      	add	r3, sp, #12
 800ea04:	9300      	str	r3, [sp, #0]
 800ea06:	2304      	movs	r3, #4
 800ea08:	b292      	uxth	r2, r2
 800ea0a:	f7ff ff77 	bl	800e8fc <dwt_writetodevice>
 800ea0e:	b004      	add	sp, #16
 800ea10:	bd10      	pop	{r4, pc}

0800ea12 <_dwt_adjust_delaytime>:
 800ea12:	b538      	push	{r3, r4, r5, lr}
 800ea14:	4604      	mov	r4, r0
 800ea16:	b989      	cbnz	r1, 800ea3c <_dwt_adjust_delaytime+0x2a>
 800ea18:	2200      	movs	r2, #0
 800ea1a:	2128      	movs	r1, #40	; 0x28
 800ea1c:	f7ff fb05 	bl	800e02a <dwt_read32bitoffsetreg>
 800ea20:	4605      	mov	r5, r0
 800ea22:	2201      	movs	r2, #1
 800ea24:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800ea28:	4620      	mov	r0, r4
 800ea2a:	f7ff fb53 	bl	800e0d4 <dwt_read8bitoffsetreg>
 800ea2e:	1a2b      	subs	r3, r5, r0
 800ea30:	2200      	movs	r2, #0
 800ea32:	2128      	movs	r1, #40	; 0x28
 800ea34:	4620      	mov	r0, r4
 800ea36:	f7ff ffd7 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800ea3a:	bd38      	pop	{r3, r4, r5, pc}
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	2128      	movs	r1, #40	; 0x28
 800ea40:	f7ff faf3 	bl	800e02a <dwt_read32bitoffsetreg>
 800ea44:	4605      	mov	r5, r0
 800ea46:	2201      	movs	r2, #1
 800ea48:	217c      	movs	r1, #124	; 0x7c
 800ea4a:	4620      	mov	r0, r4
 800ea4c:	f7ff fb42 	bl	800e0d4 <dwt_read8bitoffsetreg>
 800ea50:	1a2b      	subs	r3, r5, r0
 800ea52:	2200      	movs	r2, #0
 800ea54:	2128      	movs	r1, #40	; 0x28
 800ea56:	4620      	mov	r0, r4
 800ea58:	f7ff ffc6 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800ea5c:	e7ed      	b.n	800ea3a <_dwt_adjust_delaytime+0x28>

0800ea5e <ull_setrxaftertxdelay>:
 800ea5e:	b538      	push	{r3, r4, r5, lr}
 800ea60:	4605      	mov	r5, r0
 800ea62:	460c      	mov	r4, r1
 800ea64:	2200      	movs	r2, #0
 800ea66:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800ea6a:	f7ff fade 	bl	800e02a <dwt_read32bitoffsetreg>
 800ea6e:	0d00      	lsrs	r0, r0, #20
 800ea70:	0500      	lsls	r0, r0, #20
 800ea72:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800ea76:	4303      	orrs	r3, r0
 800ea78:	2200      	movs	r2, #0
 800ea7a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800ea7e:	4628      	mov	r0, r5
 800ea80:	f7ff ffb2 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800ea84:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ea88 <ull_setfinegraintxseq>:
 800ea88:	b508      	push	{r3, lr}
 800ea8a:	b929      	cbnz	r1, 800ea98 <ull_setfinegraintxseq+0x10>
 800ea8c:	4b05      	ldr	r3, [pc, #20]	; (800eaa4 <ull_setfinegraintxseq+0x1c>)
 800ea8e:	2202      	movs	r2, #2
 800ea90:	4905      	ldr	r1, [pc, #20]	; (800eaa8 <ull_setfinegraintxseq+0x20>)
 800ea92:	f7ff ffa9 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800ea96:	bd08      	pop	{r3, pc}
 800ea98:	4b04      	ldr	r3, [pc, #16]	; (800eaac <ull_setfinegraintxseq+0x24>)
 800ea9a:	2202      	movs	r2, #2
 800ea9c:	4902      	ldr	r1, [pc, #8]	; (800eaa8 <ull_setfinegraintxseq+0x20>)
 800ea9e:	f7ff ffa3 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800eaa2:	e7f8      	b.n	800ea96 <ull_setfinegraintxseq+0xe>
 800eaa4:	00d20874 	.word	0x00d20874
 800eaa8:	00110010 	.word	0x00110010
 800eaac:	04d28874 	.word	0x04d28874

0800eab0 <ull_setlnapamode>:
 800eab0:	b538      	push	{r3, r4, r5, lr}
 800eab2:	4605      	mov	r5, r0
 800eab4:	460c      	mov	r4, r1
 800eab6:	2200      	movs	r2, #0
 800eab8:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800eabc:	f7ff fab5 	bl	800e02a <dwt_read32bitoffsetreg>
 800eac0:	f420 337c 	bic.w	r3, r0, #258048	; 0x3f000
 800eac4:	f014 0f01 	tst.w	r4, #1
 800eac8:	bf18      	it	ne
 800eaca:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
 800eace:	f014 0f02 	tst.w	r4, #2
 800ead2:	bf18      	it	ne
 800ead4:	f443 5300 	orrne.w	r3, r3, #8192	; 0x2000
 800ead8:	f014 0f04 	tst.w	r4, #4
 800eadc:	bf18      	it	ne
 800eade:	f443 3390 	orrne.w	r3, r3, #73728	; 0x12000
 800eae2:	2200      	movs	r2, #0
 800eae4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800eae8:	4628      	mov	r0, r5
 800eaea:	f7ff ff7d 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800eaee:	bd38      	pop	{r3, r4, r5, pc}

0800eaf0 <ull_configurestskey>:
 800eaf0:	b538      	push	{r3, r4, r5, lr}
 800eaf2:	4605      	mov	r5, r0
 800eaf4:	460c      	mov	r4, r1
 800eaf6:	680b      	ldr	r3, [r1, #0]
 800eaf8:	2200      	movs	r2, #0
 800eafa:	490b      	ldr	r1, [pc, #44]	; (800eb28 <ull_configurestskey+0x38>)
 800eafc:	f7ff ff74 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800eb00:	6863      	ldr	r3, [r4, #4]
 800eb02:	2200      	movs	r2, #0
 800eb04:	4909      	ldr	r1, [pc, #36]	; (800eb2c <ull_configurestskey+0x3c>)
 800eb06:	4628      	mov	r0, r5
 800eb08:	f7ff ff6e 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800eb0c:	68a3      	ldr	r3, [r4, #8]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	4907      	ldr	r1, [pc, #28]	; (800eb30 <ull_configurestskey+0x40>)
 800eb12:	4628      	mov	r0, r5
 800eb14:	f7ff ff68 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800eb18:	68e3      	ldr	r3, [r4, #12]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	4905      	ldr	r1, [pc, #20]	; (800eb34 <ull_configurestskey+0x44>)
 800eb1e:	4628      	mov	r0, r5
 800eb20:	f7ff ff62 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800eb24:	bd38      	pop	{r3, r4, r5, pc}
 800eb26:	bf00      	nop
 800eb28:	0002000c 	.word	0x0002000c
 800eb2c:	00020010 	.word	0x00020010
 800eb30:	00020014 	.word	0x00020014
 800eb34:	00020018 	.word	0x00020018

0800eb38 <ull_configurestsiv>:
 800eb38:	b538      	push	{r3, r4, r5, lr}
 800eb3a:	4605      	mov	r5, r0
 800eb3c:	460c      	mov	r4, r1
 800eb3e:	680b      	ldr	r3, [r1, #0]
 800eb40:	2200      	movs	r2, #0
 800eb42:	490b      	ldr	r1, [pc, #44]	; (800eb70 <ull_configurestsiv+0x38>)
 800eb44:	f7ff ff50 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800eb48:	6863      	ldr	r3, [r4, #4]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	4909      	ldr	r1, [pc, #36]	; (800eb74 <ull_configurestsiv+0x3c>)
 800eb4e:	4628      	mov	r0, r5
 800eb50:	f7ff ff4a 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800eb54:	68a3      	ldr	r3, [r4, #8]
 800eb56:	2200      	movs	r2, #0
 800eb58:	4907      	ldr	r1, [pc, #28]	; (800eb78 <ull_configurestsiv+0x40>)
 800eb5a:	4628      	mov	r0, r5
 800eb5c:	f7ff ff44 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800eb60:	68e3      	ldr	r3, [r4, #12]
 800eb62:	2200      	movs	r2, #0
 800eb64:	4905      	ldr	r1, [pc, #20]	; (800eb7c <ull_configurestsiv+0x44>)
 800eb66:	4628      	mov	r0, r5
 800eb68:	f7ff ff3e 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800eb6c:	bd38      	pop	{r3, r4, r5, pc}
 800eb6e:	bf00      	nop
 800eb70:	0002001c 	.word	0x0002001c
 800eb74:	00020020 	.word	0x00020020
 800eb78:	00020024 	.word	0x00020024
 800eb7c:	00020028 	.word	0x00020028

0800eb80 <ull_configmrxlut>:
 800eb80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb84:	4604      	mov	r4, r0
 800eb86:	4d35      	ldr	r5, [pc, #212]	; (800ec5c <ull_configmrxlut+0xdc>)
 800eb88:	4b35      	ldr	r3, [pc, #212]	; (800ec60 <ull_configmrxlut+0xe0>)
 800eb8a:	2905      	cmp	r1, #5
 800eb8c:	bf18      	it	ne
 800eb8e:	461d      	movne	r5, r3
 800eb90:	4e34      	ldr	r6, [pc, #208]	; (800ec64 <ull_configmrxlut+0xe4>)
 800eb92:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800eb96:	2905      	cmp	r1, #5
 800eb98:	bf18      	it	ne
 800eb9a:	461e      	movne	r6, r3
 800eb9c:	4f32      	ldr	r7, [pc, #200]	; (800ec68 <ull_configmrxlut+0xe8>)
 800eb9e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800eba2:	2905      	cmp	r1, #5
 800eba4:	bf18      	it	ne
 800eba6:	461f      	movne	r7, r3
 800eba8:	4a30      	ldr	r2, [pc, #192]	; (800ec6c <ull_configmrxlut+0xec>)
 800ebaa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800ebae:	2905      	cmp	r1, #5
 800ebb0:	bf0c      	ite	eq
 800ebb2:	4690      	moveq	r8, r2
 800ebb4:	4698      	movne	r8, r3
 800ebb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ebba:	f5a3 5388 	sub.w	r3, r3, #4352	; 0x1100
 800ebbe:	2905      	cmp	r1, #5
 800ebc0:	bf0c      	ite	eq
 800ebc2:	4691      	moveq	r9, r2
 800ebc4:	4699      	movne	r9, r3
 800ebc6:	4a2a      	ldr	r2, [pc, #168]	; (800ec70 <ull_configmrxlut+0xf0>)
 800ebc8:	f5a3 63af 	sub.w	r3, r3, #1400	; 0x578
 800ebcc:	2905      	cmp	r1, #5
 800ebce:	bf0c      	ite	eq
 800ebd0:	4692      	moveq	sl, r2
 800ebd2:	469a      	movne	sl, r3
 800ebd4:	4b27      	ldr	r3, [pc, #156]	; (800ec74 <ull_configmrxlut+0xf4>)
 800ebd6:	4a28      	ldr	r2, [pc, #160]	; (800ec78 <ull_configmrxlut+0xf8>)
 800ebd8:	2905      	cmp	r1, #5
 800ebda:	bf0c      	ite	eq
 800ebdc:	469b      	moveq	fp, r3
 800ebde:	4693      	movne	fp, r2
 800ebe0:	f44f 7310 	mov.w	r3, #576	; 0x240
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	4925      	ldr	r1, [pc, #148]	; (800ec7c <ull_configmrxlut+0xfc>)
 800ebe8:	f7ff fefe 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800ebec:	4b24      	ldr	r3, [pc, #144]	; (800ec80 <ull_configmrxlut+0x100>)
 800ebee:	2200      	movs	r2, #0
 800ebf0:	4924      	ldr	r1, [pc, #144]	; (800ec84 <ull_configmrxlut+0x104>)
 800ebf2:	4620      	mov	r0, r4
 800ebf4:	f7ff fef8 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800ebf8:	4b23      	ldr	r3, [pc, #140]	; (800ec88 <ull_configmrxlut+0x108>)
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	4923      	ldr	r1, [pc, #140]	; (800ec8c <ull_configmrxlut+0x10c>)
 800ebfe:	4620      	mov	r0, r4
 800ec00:	f7ff fef2 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800ec04:	465b      	mov	r3, fp
 800ec06:	2200      	movs	r2, #0
 800ec08:	4921      	ldr	r1, [pc, #132]	; (800ec90 <ull_configmrxlut+0x110>)
 800ec0a:	4620      	mov	r0, r4
 800ec0c:	f7ff feec 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800ec10:	4653      	mov	r3, sl
 800ec12:	2200      	movs	r2, #0
 800ec14:	491f      	ldr	r1, [pc, #124]	; (800ec94 <ull_configmrxlut+0x114>)
 800ec16:	4620      	mov	r0, r4
 800ec18:	f7ff fee6 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800ec1c:	464b      	mov	r3, r9
 800ec1e:	2200      	movs	r2, #0
 800ec20:	491d      	ldr	r1, [pc, #116]	; (800ec98 <ull_configmrxlut+0x118>)
 800ec22:	4620      	mov	r0, r4
 800ec24:	f7ff fee0 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800ec28:	4643      	mov	r3, r8
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	491b      	ldr	r1, [pc, #108]	; (800ec9c <ull_configmrxlut+0x11c>)
 800ec2e:	4620      	mov	r0, r4
 800ec30:	f7ff feda 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800ec34:	463b      	mov	r3, r7
 800ec36:	2200      	movs	r2, #0
 800ec38:	4919      	ldr	r1, [pc, #100]	; (800eca0 <ull_configmrxlut+0x120>)
 800ec3a:	4620      	mov	r0, r4
 800ec3c:	f7ff fed4 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800ec40:	4633      	mov	r3, r6
 800ec42:	2200      	movs	r2, #0
 800ec44:	4917      	ldr	r1, [pc, #92]	; (800eca4 <ull_configmrxlut+0x124>)
 800ec46:	4620      	mov	r0, r4
 800ec48:	f7ff fece 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800ec4c:	462b      	mov	r3, r5
 800ec4e:	2200      	movs	r2, #0
 800ec50:	4915      	ldr	r1, [pc, #84]	; (800eca8 <ull_configmrxlut+0x128>)
 800ec52:	4620      	mov	r0, r4
 800ec54:	f7ff fec8 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800ec58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec5c:	00039ff6 	.word	0x00039ff6
 800ec60:	00055ffe 	.word	0x00055ffe
 800ec64:	00039dfe 	.word	0x00039dfe
 800ec68:	00039c7e 	.word	0x00039c7e
 800ec6c:	00038efe 	.word	0x00038efe
 800ec70:	0003876e 	.word	0x0003876e
 800ec74:	0003803e 	.word	0x0003803e
 800ec78:	0005407e 	.word	0x0005407e
 800ec7c:	0003001c 	.word	0x0003001c
 800ec80:	1a491248 	.word	0x1a491248
 800ec84:	00030020 	.word	0x00030020
 800ec88:	2db248db 	.word	0x2db248db
 800ec8c:	00030024 	.word	0x00030024
 800ec90:	0003002c 	.word	0x0003002c
 800ec94:	00030030 	.word	0x00030030
 800ec98:	00030034 	.word	0x00030034
 800ec9c:	00030038 	.word	0x00030038
 800eca0:	0003003c 	.word	0x0003003c
 800eca4:	00030040 	.word	0x00030040
 800eca8:	00030044 	.word	0x00030044

0800ecac <ull_disable_rftx_blocks>:
 800ecac:	b508      	push	{r3, lr}
 800ecae:	2300      	movs	r3, #0
 800ecb0:	461a      	mov	r2, r3
 800ecb2:	4902      	ldr	r1, [pc, #8]	; (800ecbc <ull_disable_rftx_blocks+0x10>)
 800ecb4:	f7ff fe98 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800ecb8:	bd08      	pop	{r3, pc}
 800ecba:	bf00      	nop
 800ecbc:	00070004 	.word	0x00070004

0800ecc0 <ull_disable_rf_tx>:
 800ecc0:	b538      	push	{r3, r4, r5, lr}
 800ecc2:	4604      	mov	r4, r0
 800ecc4:	460d      	mov	r5, r1
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	461a      	mov	r2, r3
 800ecca:	490a      	ldr	r1, [pc, #40]	; (800ecf4 <ull_disable_rf_tx+0x34>)
 800eccc:	f7ff fe8c 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	461a      	mov	r2, r3
 800ecd4:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800ecd8:	4620      	mov	r0, r4
 800ecda:	f7ff fe85 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800ecde:	b905      	cbnz	r5, 800ece2 <ull_disable_rf_tx+0x22>
 800ece0:	bd38      	pop	{r3, r4, r5, pc}
 800ece2:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 800ece6:	2200      	movs	r2, #0
 800ece8:	4903      	ldr	r1, [pc, #12]	; (800ecf8 <ull_disable_rf_tx+0x38>)
 800ecea:	4620      	mov	r0, r4
 800ecec:	f7ff fe7c 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800ecf0:	e7f6      	b.n	800ece0 <ull_disable_rf_tx+0x20>
 800ecf2:	bf00      	nop
 800ecf4:	00070048 	.word	0x00070048
 800ecf8:	00070014 	.word	0x00070014

0800ecfc <ull_repeated_cw>:
 800ecfc:	b570      	push	{r4, r5, r6, lr}
 800ecfe:	4606      	mov	r6, r0
 800ed00:	460c      	mov	r4, r1
 800ed02:	4615      	mov	r5, r2
 800ed04:	2100      	movs	r1, #0
 800ed06:	f7ff febf 	bl	800ea88 <ull_setfinegraintxseq>
 800ed0a:	2d0f      	cmp	r5, #15
 800ed0c:	bfa8      	it	ge
 800ed0e:	250f      	movge	r5, #15
 800ed10:	1e63      	subs	r3, r4, #1
 800ed12:	2b03      	cmp	r3, #3
 800ed14:	bf28      	it	cs
 800ed16:	2404      	movcs	r4, #4
 800ed18:	2310      	movs	r3, #16
 800ed1a:	4123      	asrs	r3, r4
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	4907      	ldr	r1, [pc, #28]	; (800ed3c <ull_repeated_cw+0x40>)
 800ed20:	4630      	mov	r0, r6
 800ed22:	f7ff fe61 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800ed26:	1e63      	subs	r3, r4, #1
 800ed28:	009b      	lsls	r3, r3, #2
 800ed2a:	fa05 f303 	lsl.w	r3, r5, r3
 800ed2e:	2200      	movs	r2, #0
 800ed30:	4903      	ldr	r1, [pc, #12]	; (800ed40 <ull_repeated_cw+0x44>)
 800ed32:	4630      	mov	r0, r6
 800ed34:	f7ff fe58 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800ed38:	bd70      	pop	{r4, r5, r6, pc}
 800ed3a:	bf00      	nop
 800ed3c:	00070028 	.word	0x00070028
 800ed40:	00080018 	.word	0x00080018

0800ed44 <ull_readrxdata>:
 800ed44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed46:	b083      	sub	sp, #12
 800ed48:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800ed4a:	7ba4      	ldrb	r4, [r4, #14]
 800ed4c:	2c03      	cmp	r4, #3
 800ed4e:	bf0c      	ite	eq
 800ed50:	f44f 1c98 	moveq.w	ip, #1245184	; 0x130000
 800ed54:	f44f 1c90 	movne.w	ip, #1179648	; 0x120000
 800ed58:	189c      	adds	r4, r3, r2
 800ed5a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800ed5e:	da19      	bge.n	800ed94 <ull_readrxdata+0x50>
 800ed60:	461d      	mov	r5, r3
 800ed62:	4616      	mov	r6, r2
 800ed64:	460f      	mov	r7, r1
 800ed66:	4604      	mov	r4, r0
 800ed68:	2b7f      	cmp	r3, #127	; 0x7f
 800ed6a:	d915      	bls.n	800ed98 <ull_readrxdata+0x54>
 800ed6c:	ea4f 431c 	mov.w	r3, ip, lsr #16
 800ed70:	2200      	movs	r2, #0
 800ed72:	490d      	ldr	r1, [pc, #52]	; (800eda8 <ull_readrxdata+0x64>)
 800ed74:	f7ff fe38 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800ed78:	462b      	mov	r3, r5
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	490b      	ldr	r1, [pc, #44]	; (800edac <ull_readrxdata+0x68>)
 800ed7e:	4620      	mov	r0, r4
 800ed80:	f7ff fe32 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800ed84:	9700      	str	r7, [sp, #0]
 800ed86:	4633      	mov	r3, r6
 800ed88:	2200      	movs	r2, #0
 800ed8a:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800ed8e:	4620      	mov	r0, r4
 800ed90:	f7ff f941 	bl	800e016 <dwt_readfromdevice>
 800ed94:	b003      	add	sp, #12
 800ed96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed98:	9100      	str	r1, [sp, #0]
 800ed9a:	4613      	mov	r3, r2
 800ed9c:	462a      	mov	r2, r5
 800ed9e:	4661      	mov	r1, ip
 800eda0:	f7ff f939 	bl	800e016 <dwt_readfromdevice>
 800eda4:	e7f6      	b.n	800ed94 <ull_readrxdata+0x50>
 800eda6:	bf00      	nop
 800eda8:	001f0004 	.word	0x001f0004
 800edac:	001f0008 	.word	0x001f0008

0800edb0 <dwt_write8bitoffsetreg>:
 800edb0:	b510      	push	{r4, lr}
 800edb2:	b084      	sub	sp, #16
 800edb4:	ac04      	add	r4, sp, #16
 800edb6:	f804 3d01 	strb.w	r3, [r4, #-1]!
 800edba:	9400      	str	r4, [sp, #0]
 800edbc:	2301      	movs	r3, #1
 800edbe:	b292      	uxth	r2, r2
 800edc0:	f7ff fd9c 	bl	800e8fc <dwt_writetodevice>
 800edc4:	b004      	add	sp, #16
 800edc6:	bd10      	pop	{r4, pc}

0800edc8 <ull_getframelength>:
 800edc8:	b510      	push	{r4, lr}
 800edca:	4604      	mov	r4, r0
 800edcc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800edce:	7b9b      	ldrb	r3, [r3, #14]
 800edd0:	2b01      	cmp	r3, #1
 800edd2:	d013      	beq.n	800edfc <ull_getframelength+0x34>
 800edd4:	2b03      	cmp	r3, #3
 800edd6:	d11d      	bne.n	800ee14 <ull_getframelength+0x4c>
 800edd8:	23f0      	movs	r3, #240	; 0xf0
 800edda:	2200      	movs	r2, #0
 800eddc:	4912      	ldr	r1, [pc, #72]	; (800ee28 <ull_getframelength+0x60>)
 800edde:	f7ff ffe7 	bl	800edb0 <dwt_write8bitoffsetreg>
 800ede2:	2200      	movs	r2, #0
 800ede4:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800ede8:	4620      	mov	r0, r4
 800edea:	f7ff f934 	bl	800e056 <dwt_read16bitoffsetreg>
 800edee:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800edf0:	7ada      	ldrb	r2, [r3, #11]
 800edf2:	b1a2      	cbz	r2, 800ee1e <ull_getframelength+0x56>
 800edf4:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800edf8:	83d8      	strh	r0, [r3, #30]
 800edfa:	bd10      	pop	{r4, pc}
 800edfc:	230f      	movs	r3, #15
 800edfe:	2200      	movs	r2, #0
 800ee00:	4909      	ldr	r1, [pc, #36]	; (800ee28 <ull_getframelength+0x60>)
 800ee02:	f7ff ffd5 	bl	800edb0 <dwt_write8bitoffsetreg>
 800ee06:	2200      	movs	r2, #0
 800ee08:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800ee0c:	4620      	mov	r0, r4
 800ee0e:	f7ff f922 	bl	800e056 <dwt_read16bitoffsetreg>
 800ee12:	e7ec      	b.n	800edee <ull_getframelength+0x26>
 800ee14:	2200      	movs	r2, #0
 800ee16:	214c      	movs	r1, #76	; 0x4c
 800ee18:	f7ff f91d 	bl	800e056 <dwt_read16bitoffsetreg>
 800ee1c:	e7e7      	b.n	800edee <ull_getframelength+0x26>
 800ee1e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800ee22:	83d8      	strh	r0, [r3, #30]
 800ee24:	e7e9      	b.n	800edfa <ull_getframelength+0x32>
 800ee26:	bf00      	nop
 800ee28:	00010018 	.word	0x00010018

0800ee2c <_dwt_clear_db_events>:
 800ee2c:	b510      	push	{r4, lr}
 800ee2e:	4604      	mov	r4, r0
 800ee30:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ee32:	7b9b      	ldrb	r3, [r3, #14]
 800ee34:	2b01      	cmp	r3, #1
 800ee36:	d004      	beq.n	800ee42 <_dwt_clear_db_events+0x16>
 800ee38:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ee3a:	7b9b      	ldrb	r3, [r3, #14]
 800ee3c:	2b03      	cmp	r3, #3
 800ee3e:	d006      	beq.n	800ee4e <_dwt_clear_db_events+0x22>
 800ee40:	bd10      	pop	{r4, pc}
 800ee42:	230f      	movs	r3, #15
 800ee44:	2200      	movs	r2, #0
 800ee46:	4905      	ldr	r1, [pc, #20]	; (800ee5c <_dwt_clear_db_events+0x30>)
 800ee48:	f7ff ffb2 	bl	800edb0 <dwt_write8bitoffsetreg>
 800ee4c:	e7f4      	b.n	800ee38 <_dwt_clear_db_events+0xc>
 800ee4e:	23f0      	movs	r3, #240	; 0xf0
 800ee50:	2200      	movs	r2, #0
 800ee52:	4902      	ldr	r1, [pc, #8]	; (800ee5c <_dwt_clear_db_events+0x30>)
 800ee54:	4620      	mov	r0, r4
 800ee56:	f7ff ffab 	bl	800edb0 <dwt_write8bitoffsetreg>
 800ee5a:	e7f1      	b.n	800ee40 <_dwt_clear_db_events+0x14>
 800ee5c:	00010018 	.word	0x00010018

0800ee60 <ull_clearaonconfig>:
 800ee60:	b538      	push	{r3, r4, r5, lr}
 800ee62:	4604      	mov	r4, r0
 800ee64:	2300      	movs	r3, #0
 800ee66:	461a      	mov	r2, r3
 800ee68:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800ee6c:	f7ff fd51 	bl	800e912 <dwt_write16bitoffsetreg>
 800ee70:	2300      	movs	r3, #0
 800ee72:	461a      	mov	r2, r3
 800ee74:	4908      	ldr	r1, [pc, #32]	; (800ee98 <ull_clearaonconfig+0x38>)
 800ee76:	4620      	mov	r0, r4
 800ee78:	f7ff ff9a 	bl	800edb0 <dwt_write8bitoffsetreg>
 800ee7c:	4d07      	ldr	r5, [pc, #28]	; (800ee9c <ull_clearaonconfig+0x3c>)
 800ee7e:	2300      	movs	r3, #0
 800ee80:	461a      	mov	r2, r3
 800ee82:	4629      	mov	r1, r5
 800ee84:	4620      	mov	r0, r4
 800ee86:	f7ff ff93 	bl	800edb0 <dwt_write8bitoffsetreg>
 800ee8a:	2302      	movs	r3, #2
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	4629      	mov	r1, r5
 800ee90:	4620      	mov	r0, r4
 800ee92:	f7ff ff8d 	bl	800edb0 <dwt_write8bitoffsetreg>
 800ee96:	bd38      	pop	{r3, r4, r5, pc}
 800ee98:	000a0014 	.word	0x000a0014
 800ee9c:	000a0004 	.word	0x000a0004

0800eea0 <ull_configeventcounters>:
 800eea0:	b538      	push	{r3, r4, r5, lr}
 800eea2:	4605      	mov	r5, r0
 800eea4:	460c      	mov	r4, r1
 800eea6:	2302      	movs	r3, #2
 800eea8:	2200      	movs	r2, #0
 800eeaa:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800eeae:	f7ff ff7f 	bl	800edb0 <dwt_write8bitoffsetreg>
 800eeb2:	b904      	cbnz	r4, 800eeb6 <ull_configeventcounters+0x16>
 800eeb4:	bd38      	pop	{r3, r4, r5, pc}
 800eeb6:	2301      	movs	r3, #1
 800eeb8:	2200      	movs	r2, #0
 800eeba:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800eebe:	4628      	mov	r0, r5
 800eec0:	f7ff ff76 	bl	800edb0 <dwt_write8bitoffsetreg>
 800eec4:	e7f6      	b.n	800eeb4 <ull_configeventcounters+0x14>
	...

0800eec8 <ull_aon_read>:
 800eec8:	b538      	push	{r3, r4, r5, lr}
 800eeca:	4604      	mov	r4, r0
 800eecc:	460b      	mov	r3, r1
 800eece:	2200      	movs	r2, #0
 800eed0:	490a      	ldr	r1, [pc, #40]	; (800eefc <ull_aon_read+0x34>)
 800eed2:	f7ff fd1e 	bl	800e912 <dwt_write16bitoffsetreg>
 800eed6:	4d0a      	ldr	r5, [pc, #40]	; (800ef00 <ull_aon_read+0x38>)
 800eed8:	2388      	movs	r3, #136	; 0x88
 800eeda:	2200      	movs	r2, #0
 800eedc:	4629      	mov	r1, r5
 800eede:	4620      	mov	r0, r4
 800eee0:	f7ff ff66 	bl	800edb0 <dwt_write8bitoffsetreg>
 800eee4:	2300      	movs	r3, #0
 800eee6:	461a      	mov	r2, r3
 800eee8:	4629      	mov	r1, r5
 800eeea:	4620      	mov	r0, r4
 800eeec:	f7ff ff60 	bl	800edb0 <dwt_write8bitoffsetreg>
 800eef0:	2200      	movs	r2, #0
 800eef2:	4904      	ldr	r1, [pc, #16]	; (800ef04 <ull_aon_read+0x3c>)
 800eef4:	4620      	mov	r0, r4
 800eef6:	f7ff f8ed 	bl	800e0d4 <dwt_read8bitoffsetreg>
 800eefa:	bd38      	pop	{r3, r4, r5, pc}
 800eefc:	000a000c 	.word	0x000a000c
 800ef00:	000a0004 	.word	0x000a0004
 800ef04:	000a0008 	.word	0x000a0008

0800ef08 <ull_aon_write>:
 800ef08:	b570      	push	{r4, r5, r6, lr}
 800ef0a:	4604      	mov	r4, r0
 800ef0c:	460b      	mov	r3, r1
 800ef0e:	4615      	mov	r5, r2
 800ef10:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800ef14:	bf34      	ite	cc
 800ef16:	2600      	movcc	r6, #0
 800ef18:	2620      	movcs	r6, #32
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	490b      	ldr	r1, [pc, #44]	; (800ef4c <ull_aon_write+0x44>)
 800ef1e:	f7ff fcf8 	bl	800e912 <dwt_write16bitoffsetreg>
 800ef22:	462b      	mov	r3, r5
 800ef24:	2200      	movs	r2, #0
 800ef26:	490a      	ldr	r1, [pc, #40]	; (800ef50 <ull_aon_write+0x48>)
 800ef28:	4620      	mov	r0, r4
 800ef2a:	f7ff ff41 	bl	800edb0 <dwt_write8bitoffsetreg>
 800ef2e:	4d09      	ldr	r5, [pc, #36]	; (800ef54 <ull_aon_write+0x4c>)
 800ef30:	f046 0390 	orr.w	r3, r6, #144	; 0x90
 800ef34:	2200      	movs	r2, #0
 800ef36:	4629      	mov	r1, r5
 800ef38:	4620      	mov	r0, r4
 800ef3a:	f7ff ff39 	bl	800edb0 <dwt_write8bitoffsetreg>
 800ef3e:	2300      	movs	r3, #0
 800ef40:	461a      	mov	r2, r3
 800ef42:	4629      	mov	r1, r5
 800ef44:	4620      	mov	r0, r4
 800ef46:	f7ff ff33 	bl	800edb0 <dwt_write8bitoffsetreg>
 800ef4a:	bd70      	pop	{r4, r5, r6, pc}
 800ef4c:	000a000c 	.word	0x000a000c
 800ef50:	000a0010 	.word	0x000a0010
 800ef54:	000a0004 	.word	0x000a0004

0800ef58 <ull_configuresleep>:
 800ef58:	b570      	push	{r4, r5, r6, lr}
 800ef5a:	4604      	mov	r4, r0
 800ef5c:	460d      	mov	r5, r1
 800ef5e:	4616      	mov	r6, r2
 800ef60:	2200      	movs	r2, #0
 800ef62:	f240 110b 	movw	r1, #267	; 0x10b
 800ef66:	f7ff ffcf 	bl	800ef08 <ull_aon_write>
 800ef6a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800ef6e:	4620      	mov	r0, r4
 800ef70:	f7ff ffaa 	bl	800eec8 <ull_aon_read>
 800ef74:	f000 021f 	and.w	r2, r0, #31
 800ef78:	f44f 7182 	mov.w	r1, #260	; 0x104
 800ef7c:	4620      	mov	r0, r4
 800ef7e:	f7ff ffc3 	bl	800ef08 <ull_aon_write>
 800ef82:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ef84:	8a1a      	ldrh	r2, [r3, #16]
 800ef86:	4315      	orrs	r5, r2
 800ef88:	821d      	strh	r5, [r3, #16]
 800ef8a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ef8c:	8a13      	ldrh	r3, [r2, #16]
 800ef8e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800ef92:	bf1c      	itt	ne
 800ef94:	f423 6300 	bicne.w	r3, r3, #2048	; 0x800
 800ef98:	8213      	strhne	r3, [r2, #16]
 800ef9a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ef9c:	8a1b      	ldrh	r3, [r3, #16]
 800ef9e:	2200      	movs	r2, #0
 800efa0:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800efa4:	4620      	mov	r0, r4
 800efa6:	f7ff fcb4 	bl	800e912 <dwt_write16bitoffsetreg>
 800efaa:	4633      	mov	r3, r6
 800efac:	2200      	movs	r2, #0
 800efae:	4902      	ldr	r1, [pc, #8]	; (800efb8 <ull_configuresleep+0x60>)
 800efb0:	4620      	mov	r0, r4
 800efb2:	f7ff fefd 	bl	800edb0 <dwt_write8bitoffsetreg>
 800efb6:	bd70      	pop	{r4, r5, r6, pc}
 800efb8:	000a0014 	.word	0x000a0014

0800efbc <ull_setplenfine>:
 800efbc:	b508      	push	{r3, lr}
 800efbe:	460b      	mov	r3, r1
 800efc0:	2201      	movs	r2, #1
 800efc2:	2124      	movs	r1, #36	; 0x24
 800efc4:	f7ff fef4 	bl	800edb0 <dwt_write8bitoffsetreg>
 800efc8:	bd08      	pop	{r3, pc}
	...

0800efcc <ull_update_nonce_GCM>:
 800efcc:	b500      	push	{lr}
 800efce:	b083      	sub	sp, #12
 800efd0:	9100      	str	r1, [sp, #0]
 800efd2:	230c      	movs	r3, #12
 800efd4:	2200      	movs	r2, #0
 800efd6:	4903      	ldr	r1, [pc, #12]	; (800efe4 <ull_update_nonce_GCM+0x18>)
 800efd8:	f7ff fc90 	bl	800e8fc <dwt_writetodevice>
 800efdc:	b003      	add	sp, #12
 800efde:	f85d fb04 	ldr.w	pc, [sp], #4
 800efe2:	bf00      	nop
 800efe4:	00010034 	.word	0x00010034

0800efe8 <ull_update_nonce_CCM>:
 800efe8:	b500      	push	{lr}
 800efea:	b087      	sub	sp, #28
 800efec:	4613      	mov	r3, r2
 800efee:	7a8a      	ldrb	r2, [r1, #10]
 800eff0:	f88d 2008 	strb.w	r2, [sp, #8]
 800eff4:	7a4a      	ldrb	r2, [r1, #9]
 800eff6:	f88d 2009 	strb.w	r2, [sp, #9]
 800effa:	7a0a      	ldrb	r2, [r1, #8]
 800effc:	f88d 200a 	strb.w	r2, [sp, #10]
 800f000:	79ca      	ldrb	r2, [r1, #7]
 800f002:	f88d 200b 	strb.w	r2, [sp, #11]
 800f006:	798a      	ldrb	r2, [r1, #6]
 800f008:	f88d 200c 	strb.w	r2, [sp, #12]
 800f00c:	794a      	ldrb	r2, [r1, #5]
 800f00e:	f88d 200d 	strb.w	r2, [sp, #13]
 800f012:	790a      	ldrb	r2, [r1, #4]
 800f014:	f88d 200e 	strb.w	r2, [sp, #14]
 800f018:	78ca      	ldrb	r2, [r1, #3]
 800f01a:	f88d 200f 	strb.w	r2, [sp, #15]
 800f01e:	788a      	ldrb	r2, [r1, #2]
 800f020:	f88d 2010 	strb.w	r2, [sp, #16]
 800f024:	784a      	ldrb	r2, [r1, #1]
 800f026:	f88d 2011 	strb.w	r2, [sp, #17]
 800f02a:	780a      	ldrb	r2, [r1, #0]
 800f02c:	f88d 2012 	strb.w	r2, [sp, #18]
 800f030:	2200      	movs	r2, #0
 800f032:	f88d 2013 	strb.w	r2, [sp, #19]
 800f036:	f88d 3014 	strb.w	r3, [sp, #20]
 800f03a:	0a1b      	lsrs	r3, r3, #8
 800f03c:	f88d 3015 	strb.w	r3, [sp, #21]
 800f040:	7b0b      	ldrb	r3, [r1, #12]
 800f042:	f88d 3016 	strb.w	r3, [sp, #22]
 800f046:	7acb      	ldrb	r3, [r1, #11]
 800f048:	f88d 3017 	strb.w	r3, [sp, #23]
 800f04c:	ab02      	add	r3, sp, #8
 800f04e:	9300      	str	r3, [sp, #0]
 800f050:	2310      	movs	r3, #16
 800f052:	4903      	ldr	r1, [pc, #12]	; (800f060 <ull_update_nonce_CCM+0x78>)
 800f054:	f7ff fc52 	bl	800e8fc <dwt_writetodevice>
 800f058:	b007      	add	sp, #28
 800f05a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f05e:	bf00      	nop
 800f060:	00010034 	.word	0x00010034

0800f064 <ull_writetxdata>:
 800f064:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f066:	b083      	sub	sp, #12
 800f068:	185c      	adds	r4, r3, r1
 800f06a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800f06e:	da24      	bge.n	800f0ba <ull_writetxdata+0x56>
 800f070:	461c      	mov	r4, r3
 800f072:	4617      	mov	r7, r2
 800f074:	460e      	mov	r6, r1
 800f076:	4605      	mov	r5, r0
 800f078:	2b7f      	cmp	r3, #127	; 0x7f
 800f07a:	d915      	bls.n	800f0a8 <ull_writetxdata+0x44>
 800f07c:	2314      	movs	r3, #20
 800f07e:	2200      	movs	r2, #0
 800f080:	490f      	ldr	r1, [pc, #60]	; (800f0c0 <ull_writetxdata+0x5c>)
 800f082:	f7ff fcb1 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800f086:	4623      	mov	r3, r4
 800f088:	2200      	movs	r2, #0
 800f08a:	490e      	ldr	r1, [pc, #56]	; (800f0c4 <ull_writetxdata+0x60>)
 800f08c:	4628      	mov	r0, r5
 800f08e:	f7ff fcab 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800f092:	9700      	str	r7, [sp, #0]
 800f094:	4633      	mov	r3, r6
 800f096:	2200      	movs	r2, #0
 800f098:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800f09c:	4628      	mov	r0, r5
 800f09e:	f7ff fc2d 	bl	800e8fc <dwt_writetodevice>
 800f0a2:	2000      	movs	r0, #0
 800f0a4:	b003      	add	sp, #12
 800f0a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0a8:	9200      	str	r2, [sp, #0]
 800f0aa:	460b      	mov	r3, r1
 800f0ac:	4622      	mov	r2, r4
 800f0ae:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 800f0b2:	f7ff fc23 	bl	800e8fc <dwt_writetodevice>
 800f0b6:	2000      	movs	r0, #0
 800f0b8:	e7f4      	b.n	800f0a4 <ull_writetxdata+0x40>
 800f0ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f0be:	e7f1      	b.n	800f0a4 <ull_writetxdata+0x40>
 800f0c0:	001f0004 	.word	0x001f0004
 800f0c4:	001f0008 	.word	0x001f0008

0800f0c8 <ull_signal_rx_buff_free>:
 800f0c8:	b510      	push	{r4, lr}
 800f0ca:	b082      	sub	sp, #8
 800f0cc:	4604      	mov	r4, r0
 800f0ce:	2302      	movs	r3, #2
 800f0d0:	9301      	str	r3, [sp, #4]
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	9200      	str	r2, [sp, #0]
 800f0d6:	4613      	mov	r3, r2
 800f0d8:	2113      	movs	r1, #19
 800f0da:	f7fe ff1e 	bl	800df1a <dwt_xfer3xxx>
 800f0de:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f0e0:	7b9a      	ldrb	r2, [r3, #14]
 800f0e2:	2a03      	cmp	r2, #3
 800f0e4:	bf0c      	ite	eq
 800f0e6:	2201      	moveq	r2, #1
 800f0e8:	2203      	movne	r2, #3
 800f0ea:	739a      	strb	r2, [r3, #14]
 800f0ec:	b002      	add	sp, #8
 800f0ee:	bd10      	pop	{r4, pc}

0800f0f0 <ull_isr>:
 800f0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0f4:	4604      	mov	r4, r0
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 800f0fc:	f7fe ffea 	bl	800e0d4 <dwt_read8bitoffsetreg>
 800f100:	4605      	mov	r5, r0
 800f102:	2200      	movs	r2, #0
 800f104:	2144      	movs	r1, #68	; 0x44
 800f106:	4620      	mov	r0, r4
 800f108:	f7fe ff8f 	bl	800e02a <dwt_read32bitoffsetreg>
 800f10c:	4606      	mov	r6, r0
 800f10e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f110:	2200      	movs	r2, #0
 800f112:	83da      	strh	r2, [r3, #30]
 800f114:	f883 2020 	strb.w	r2, [r3, #32]
 800f118:	619a      	str	r2, [r3, #24]
 800f11a:	839a      	strh	r2, [r3, #28]
 800f11c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800f120:	625a      	str	r2, [r3, #36]	; 0x24
 800f122:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f124:	625c      	str	r4, [r3, #36]	; 0x24
 800f126:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f128:	7b9f      	ldrb	r7, [r3, #14]
 800f12a:	2f00      	cmp	r7, #0
 800f12c:	d17f      	bne.n	800f22e <ull_isr+0x13e>
 800f12e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f130:	619e      	str	r6, [r3, #24]
 800f132:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
 800f136:	f898 3015 	ldrb.w	r3, [r8, #21]
 800f13a:	f003 0303 	and.w	r3, r3, #3
 800f13e:	2b03      	cmp	r3, #3
 800f140:	f000 8090 	beq.w	800f264 <ull_isr+0x174>
 800f144:	f015 0f80 	tst.w	r5, #128	; 0x80
 800f148:	f040 8093 	bne.w	800f272 <ull_isr+0x182>
 800f14c:	f015 0f01 	tst.w	r5, #1
 800f150:	f040 80c1 	bne.w	800f2d6 <ull_isr+0x1e6>
 800f154:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f158:	d00b      	beq.n	800f172 <ull_isr+0x82>
 800f15a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f15c:	b113      	cbz	r3, 800f164 <ull_isr+0x74>
 800f15e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f160:	3018      	adds	r0, #24
 800f162:	4798      	blx	r3
 800f164:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800f168:	2202      	movs	r2, #2
 800f16a:	2144      	movs	r1, #68	; 0x44
 800f16c:	4620      	mov	r0, r4
 800f16e:	f7ff fbd0 	bl	800e912 <dwt_write16bitoffsetreg>
 800f172:	f015 0f08 	tst.w	r5, #8
 800f176:	d107      	bne.n	800f188 <ull_isr+0x98>
 800f178:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f17a:	7b9b      	ldrb	r3, [r3, #14]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	f000 80ea 	beq.w	800f356 <ull_isr+0x266>
 800f182:	2f00      	cmp	r7, #0
 800f184:	f000 80e7 	beq.w	800f356 <ull_isr+0x266>
 800f188:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f18a:	2200      	movs	r2, #0
 800f18c:	f883 2020 	strb.w	r2, [r3, #32]
 800f190:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 800f194:	f000 80ad 	beq.w	800f2f2 <ull_isr+0x202>
 800f198:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f19a:	f892 3020 	ldrb.w	r3, [r2, #32]
 800f19e:	f043 0308 	orr.w	r3, r3, #8
 800f1a2:	f882 3020 	strb.w	r3, [r2, #32]
 800f1a6:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 800f1aa:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 800f1ae:	d008      	beq.n	800f1c2 <ull_isr+0xd2>
 800f1b0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f1b2:	f892 3020 	ldrb.w	r3, [r2, #32]
 800f1b6:	f043 0310 	orr.w	r3, r3, #16
 800f1ba:	f882 3020 	strb.w	r3, [r2, #32]
 800f1be:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 800f1c2:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800f1c6:	d006      	beq.n	800f1d6 <ull_isr+0xe6>
 800f1c8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f1ca:	7d53      	ldrb	r3, [r2, #21]
 800f1cc:	f003 0303 	and.w	r3, r3, #3
 800f1d0:	2b03      	cmp	r3, #3
 800f1d2:	f000 809a 	beq.w	800f30a <ull_isr+0x21a>
 800f1d6:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800f1da:	f040 80a2 	bne.w	800f322 <ull_isr+0x232>
 800f1de:	f447 43de 	orr.w	r3, r7, #28416	; 0x6f00
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	2144      	movs	r1, #68	; 0x44
 800f1e6:	4620      	mov	r0, r4
 800f1e8:	f7ff fbfe 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800f1ec:	4620      	mov	r0, r4
 800f1ee:	f7ff fe1d 	bl	800ee2c <_dwt_clear_db_events>
 800f1f2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f1f4:	8bc3      	ldrh	r3, [r0, #30]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	f040 80a2 	bne.w	800f340 <ull_isr+0x250>
 800f1fc:	7d43      	ldrb	r3, [r0, #21]
 800f1fe:	f003 0303 	and.w	r3, r3, #3
 800f202:	2b03      	cmp	r3, #3
 800f204:	f000 809c 	beq.w	800f340 <ull_isr+0x250>
 800f208:	6983      	ldr	r3, [r0, #24]
 800f20a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800f20e:	6183      	str	r3, [r0, #24]
 800f210:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f212:	6993      	ldr	r3, [r2, #24]
 800f214:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f218:	6193      	str	r3, [r2, #24]
 800f21a:	69e3      	ldr	r3, [r4, #28]
 800f21c:	b113      	cbz	r3, 800f224 <ull_isr+0x134>
 800f21e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f220:	3018      	adds	r0, #24
 800f222:	4798      	blx	r3
 800f224:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f226:	2200      	movs	r2, #0
 800f228:	f883 2020 	strb.w	r2, [r3, #32]
 800f22c:	e08c      	b.n	800f348 <ull_isr+0x258>
 800f22e:	496d      	ldr	r1, [pc, #436]	; (800f3e4 <ull_isr+0x2f4>)
 800f230:	4620      	mov	r0, r4
 800f232:	f7fe ff4f 	bl	800e0d4 <dwt_read8bitoffsetreg>
 800f236:	4607      	mov	r7, r0
 800f238:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f23a:	7b9b      	ldrb	r3, [r3, #14]
 800f23c:	2b03      	cmp	r3, #3
 800f23e:	bf08      	it	eq
 800f240:	f3c0 1707 	ubfxeq	r7, r0, #4, #8
 800f244:	f017 0f01 	tst.w	r7, #1
 800f248:	bf18      	it	ne
 800f24a:	f446 4680 	orrne.w	r6, r6, #16384	; 0x4000
 800f24e:	f017 0f02 	tst.w	r7, #2
 800f252:	bf18      	it	ne
 800f254:	f446 5600 	orrne.w	r6, r6, #8192	; 0x2000
 800f258:	f017 0f04 	tst.w	r7, #4
 800f25c:	bf18      	it	ne
 800f25e:	f446 6680 	orrne.w	r6, r6, #1024	; 0x400
 800f262:	e764      	b.n	800f12e <ull_isr+0x3e>
 800f264:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800f268:	bf1c      	itt	ne
 800f26a:	f045 0508 	orrne.w	r5, r5, #8
 800f26e:	b2ed      	uxtbne	r5, r5
 800f270:	e768      	b.n	800f144 <ull_isr+0x54>
 800f272:	2200      	movs	r2, #0
 800f274:	2148      	movs	r1, #72	; 0x48
 800f276:	4620      	mov	r0, r4
 800f278:	f7fe feed 	bl	800e056 <dwt_read16bitoffsetreg>
 800f27c:	f8a8 001c 	strh.w	r0, [r8, #28]
 800f280:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f282:	7d1a      	ldrb	r2, [r3, #20]
 800f284:	b11a      	cbz	r2, 800f28e <ull_isr+0x19e>
 800f286:	699a      	ldr	r2, [r3, #24]
 800f288:	f012 0f04 	tst.w	r2, #4
 800f28c:	d103      	bne.n	800f296 <ull_isr+0x1a6>
 800f28e:	8b9b      	ldrh	r3, [r3, #28]
 800f290:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800f294:	b18b      	cbz	r3, 800f2ba <ull_isr+0x1ca>
 800f296:	2304      	movs	r3, #4
 800f298:	2200      	movs	r2, #0
 800f29a:	2144      	movs	r1, #68	; 0x44
 800f29c:	4620      	mov	r0, r4
 800f29e:	f7ff fd87 	bl	800edb0 <dwt_write8bitoffsetreg>
 800f2a2:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	2148      	movs	r1, #72	; 0x48
 800f2aa:	4620      	mov	r0, r4
 800f2ac:	f7ff fb31 	bl	800e912 <dwt_write16bitoffsetreg>
 800f2b0:	6a23      	ldr	r3, [r4, #32]
 800f2b2:	b113      	cbz	r3, 800f2ba <ull_isr+0x1ca>
 800f2b4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f2b6:	3018      	adds	r0, #24
 800f2b8:	4798      	blx	r3
 800f2ba:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f2bc:	8b9b      	ldrh	r3, [r3, #28]
 800f2be:	f413 7f80 	tst.w	r3, #256	; 0x100
 800f2c2:	f43f af43 	beq.w	800f14c <ull_isr+0x5c>
 800f2c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	2148      	movs	r1, #72	; 0x48
 800f2ce:	4620      	mov	r0, r4
 800f2d0:	f7ff fb1f 	bl	800e912 <dwt_write16bitoffsetreg>
 800f2d4:	e73a      	b.n	800f14c <ull_isr+0x5c>
 800f2d6:	23f8      	movs	r3, #248	; 0xf8
 800f2d8:	2200      	movs	r2, #0
 800f2da:	2144      	movs	r1, #68	; 0x44
 800f2dc:	4620      	mov	r0, r4
 800f2de:	f7ff fd67 	bl	800edb0 <dwt_write8bitoffsetreg>
 800f2e2:	6923      	ldr	r3, [r4, #16]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	f43f af35 	beq.w	800f154 <ull_isr+0x64>
 800f2ea:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f2ec:	3018      	adds	r0, #24
 800f2ee:	4798      	blx	r3
 800f2f0:	e730      	b.n	800f154 <ull_isr+0x64>
 800f2f2:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800f2f6:	bf1f      	itttt	ne
 800f2f8:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 800f2fa:	f892 3020 	ldrbne.w	r3, [r2, #32]
 800f2fe:	f043 0304 	orrne.w	r3, r3, #4
 800f302:	f882 3020 	strbne.w	r3, [r2, #32]
 800f306:	2700      	movs	r7, #0
 800f308:	e74f      	b.n	800f1aa <ull_isr+0xba>
 800f30a:	f892 3020 	ldrb.w	r3, [r2, #32]
 800f30e:	f043 0302 	orr.w	r3, r3, #2
 800f312:	f882 3020 	strb.w	r3, [r2, #32]
 800f316:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f318:	2200      	movs	r2, #0
 800f31a:	83da      	strh	r2, [r3, #30]
 800f31c:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 800f320:	e75d      	b.n	800f1de <ull_isr+0xee>
 800f322:	4620      	mov	r0, r4
 800f324:	f7ff fd50 	bl	800edc8 <ull_getframelength>
 800f328:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800f32c:	f43f af57 	beq.w	800f1de <ull_isr+0xee>
 800f330:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f332:	f892 3020 	ldrb.w	r3, [r2, #32]
 800f336:	f043 0301 	orr.w	r3, r3, #1
 800f33a:	f882 3020 	strb.w	r3, [r2, #32]
 800f33e:	e74e      	b.n	800f1de <ull_isr+0xee>
 800f340:	6963      	ldr	r3, [r4, #20]
 800f342:	b10b      	cbz	r3, 800f348 <ull_isr+0x258>
 800f344:	3018      	adds	r0, #24
 800f346:	4798      	blx	r3
 800f348:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f34a:	7b9b      	ldrb	r3, [r3, #14]
 800f34c:	bb03      	cbnz	r3, 800f390 <ull_isr+0x2a0>
 800f34e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f350:	2200      	movs	r2, #0
 800f352:	f883 2020 	strb.w	r2, [r3, #32]
 800f356:	f015 0f10 	tst.w	r5, #16
 800f35a:	d11d      	bne.n	800f398 <ull_isr+0x2a8>
 800f35c:	f015 0f20 	tst.w	r5, #32
 800f360:	d12d      	bne.n	800f3be <ull_isr+0x2ce>
 800f362:	2200      	movs	r2, #0
 800f364:	4920      	ldr	r1, [pc, #128]	; (800f3e8 <ull_isr+0x2f8>)
 800f366:	4620      	mov	r0, r4
 800f368:	f7fe feb4 	bl	800e0d4 <dwt_read8bitoffsetreg>
 800f36c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f36e:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
 800f372:	f010 0303 	ands.w	r3, r0, #3
 800f376:	d009      	beq.n	800f38c <ull_isr+0x29c>
 800f378:	2200      	movs	r2, #0
 800f37a:	491b      	ldr	r1, [pc, #108]	; (800f3e8 <ull_isr+0x2f8>)
 800f37c:	4620      	mov	r0, r4
 800f37e:	f7ff fd17 	bl	800edb0 <dwt_write8bitoffsetreg>
 800f382:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f384:	b113      	cbz	r3, 800f38c <ull_isr+0x29c>
 800f386:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f388:	3018      	adds	r0, #24
 800f38a:	4798      	blx	r3
 800f38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f390:	4620      	mov	r0, r4
 800f392:	f7ff fe99 	bl	800f0c8 <ull_signal_rx_buff_free>
 800f396:	e7da      	b.n	800f34e <ull_isr+0x25e>
 800f398:	4b14      	ldr	r3, [pc, #80]	; (800f3ec <ull_isr+0x2fc>)
 800f39a:	2200      	movs	r2, #0
 800f39c:	2144      	movs	r1, #68	; 0x44
 800f39e:	4620      	mov	r0, r4
 800f3a0:	f7ff fb22 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800f3a4:	4620      	mov	r0, r4
 800f3a6:	f7ff fd41 	bl	800ee2c <_dwt_clear_db_events>
 800f3aa:	69e3      	ldr	r3, [r4, #28]
 800f3ac:	b113      	cbz	r3, 800f3b4 <ull_isr+0x2c4>
 800f3ae:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f3b0:	3018      	adds	r0, #24
 800f3b2:	4798      	blx	r3
 800f3b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	f883 2020 	strb.w	r2, [r3, #32]
 800f3bc:	e7ce      	b.n	800f35c <ull_isr+0x26c>
 800f3be:	4b0c      	ldr	r3, [pc, #48]	; (800f3f0 <ull_isr+0x300>)
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	2144      	movs	r1, #68	; 0x44
 800f3c4:	4620      	mov	r0, r4
 800f3c6:	f7ff fb0f 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800f3ca:	4620      	mov	r0, r4
 800f3cc:	f7ff fd2e 	bl	800ee2c <_dwt_clear_db_events>
 800f3d0:	69a3      	ldr	r3, [r4, #24]
 800f3d2:	b113      	cbz	r3, 800f3da <ull_isr+0x2ea>
 800f3d4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f3d6:	3018      	adds	r0, #24
 800f3d8:	4798      	blx	r3
 800f3da:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f3dc:	2200      	movs	r2, #0
 800f3de:	f883 2020 	strb.w	r2, [r3, #32]
 800f3e2:	e7be      	b.n	800f362 <ull_isr+0x272>
 800f3e4:	00010018 	.word	0x00010018
 800f3e8:	00110038 	.word	0x00110038
 800f3ec:	34059400 	.word	0x34059400
 800f3f0:	10220400 	.word	0x10220400

0800f3f4 <dwt_modify32bitoffsetreg>:
 800f3f4:	b530      	push	{r4, r5, lr}
 800f3f6:	b085      	sub	sp, #20
 800f3f8:	9c08      	ldr	r4, [sp, #32]
 800f3fa:	f88d 3008 	strb.w	r3, [sp, #8]
 800f3fe:	0a1d      	lsrs	r5, r3, #8
 800f400:	f88d 5009 	strb.w	r5, [sp, #9]
 800f404:	0c1d      	lsrs	r5, r3, #16
 800f406:	f88d 500a 	strb.w	r5, [sp, #10]
 800f40a:	0e1b      	lsrs	r3, r3, #24
 800f40c:	f88d 300b 	strb.w	r3, [sp, #11]
 800f410:	f88d 400c 	strb.w	r4, [sp, #12]
 800f414:	0a23      	lsrs	r3, r4, #8
 800f416:	f88d 300d 	strb.w	r3, [sp, #13]
 800f41a:	0c23      	lsrs	r3, r4, #16
 800f41c:	f88d 300e 	strb.w	r3, [sp, #14]
 800f420:	0e24      	lsrs	r4, r4, #24
 800f422:	f88d 400f 	strb.w	r4, [sp, #15]
 800f426:	f248 0303 	movw	r3, #32771	; 0x8003
 800f42a:	9301      	str	r3, [sp, #4]
 800f42c:	ab02      	add	r3, sp, #8
 800f42e:	9300      	str	r3, [sp, #0]
 800f430:	2308      	movs	r3, #8
 800f432:	b292      	uxth	r2, r2
 800f434:	f7fe fd71 	bl	800df1a <dwt_xfer3xxx>
 800f438:	b005      	add	sp, #20
 800f43a:	bd30      	pop	{r4, r5, pc}

0800f43c <ull_enablegpioclocks>:
 800f43c:	b500      	push	{lr}
 800f43e:	b083      	sub	sp, #12
 800f440:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f444:	9300      	str	r3, [sp, #0]
 800f446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f44a:	2200      	movs	r2, #0
 800f44c:	4902      	ldr	r1, [pc, #8]	; (800f458 <ull_enablegpioclocks+0x1c>)
 800f44e:	f7ff ffd1 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 800f452:	b003      	add	sp, #12
 800f454:	f85d fb04 	ldr.w	pc, [sp], #4
 800f458:	00110004 	.word	0x00110004

0800f45c <ull_enable_rf_tx>:
 800f45c:	b570      	push	{r4, r5, r6, lr}
 800f45e:	b082      	sub	sp, #8
 800f460:	4604      	mov	r4, r0
 800f462:	460e      	mov	r6, r1
 800f464:	4d13      	ldr	r5, [pc, #76]	; (800f4b4 <ull_enable_rf_tx+0x58>)
 800f466:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 800f46a:	9300      	str	r3, [sp, #0]
 800f46c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f470:	2200      	movs	r2, #0
 800f472:	4629      	mov	r1, r5
 800f474:	f7ff ffbe 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 800f478:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 800f47c:	9300      	str	r3, [sp, #0]
 800f47e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f482:	2200      	movs	r2, #0
 800f484:	4629      	mov	r1, r5
 800f486:	4620      	mov	r0, r4
 800f488:	f7ff ffb4 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 800f48c:	4b0a      	ldr	r3, [pc, #40]	; (800f4b8 <ull_enable_rf_tx+0x5c>)
 800f48e:	9300      	str	r3, [sp, #0]
 800f490:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f494:	2200      	movs	r2, #0
 800f496:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800f49a:	4620      	mov	r0, r4
 800f49c:	f7ff ffaa 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 800f4a0:	b90e      	cbnz	r6, 800f4a6 <ull_enable_rf_tx+0x4a>
 800f4a2:	b002      	add	sp, #8
 800f4a4:	bd70      	pop	{r4, r5, r6, pc}
 800f4a6:	4b05      	ldr	r3, [pc, #20]	; (800f4bc <ull_enable_rf_tx+0x60>)
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	4905      	ldr	r1, [pc, #20]	; (800f4c0 <ull_enable_rf_tx+0x64>)
 800f4ac:	4620      	mov	r0, r4
 800f4ae:	f7ff fa9b 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800f4b2:	e7f6      	b.n	800f4a2 <ull_enable_rf_tx+0x46>
 800f4b4:	00070048 	.word	0x00070048
 800f4b8:	02003c00 	.word	0x02003c00
 800f4bc:	01011100 	.word	0x01011100
 800f4c0:	00070014 	.word	0x00070014

0800f4c4 <ull_enable_rftx_blocks>:
 800f4c4:	b500      	push	{lr}
 800f4c6:	b083      	sub	sp, #12
 800f4c8:	4b05      	ldr	r3, [pc, #20]	; (800f4e0 <ull_enable_rftx_blocks+0x1c>)
 800f4ca:	9300      	str	r3, [sp, #0]
 800f4cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	4904      	ldr	r1, [pc, #16]	; (800f4e4 <ull_enable_rftx_blocks+0x20>)
 800f4d4:	f7ff ff8e 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 800f4d8:	b003      	add	sp, #12
 800f4da:	f85d fb04 	ldr.w	pc, [sp], #4
 800f4de:	bf00      	nop
 800f4e0:	02003c00 	.word	0x02003c00
 800f4e4:	00070004 	.word	0x00070004

0800f4e8 <_dwt_otpprogword32>:
 800f4e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f4ec:	b083      	sub	sp, #12
 800f4ee:	4604      	mov	r4, r0
 800f4f0:	460d      	mov	r5, r1
 800f4f2:	4617      	mov	r7, r2
 800f4f4:	4e56      	ldr	r6, [pc, #344]	; (800f650 <_dwt_otpprogword32+0x168>)
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	4631      	mov	r1, r6
 800f4fa:	f7fe fd96 	bl	800e02a <dwt_read32bitoffsetreg>
 800f4fe:	4681      	mov	r9, r0
 800f500:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800f504:	9300      	str	r3, [sp, #0]
 800f506:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f50a:	2200      	movs	r2, #0
 800f50c:	4631      	mov	r1, r6
 800f50e:	4620      	mov	r0, r4
 800f510:	f7ff ff70 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 800f514:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800f654 <_dwt_otpprogword32+0x16c>
 800f518:	2318      	movs	r3, #24
 800f51a:	2200      	movs	r2, #0
 800f51c:	4641      	mov	r1, r8
 800f51e:	4620      	mov	r0, r4
 800f520:	f7ff f9f7 	bl	800e912 <dwt_write16bitoffsetreg>
 800f524:	2125      	movs	r1, #37	; 0x25
 800f526:	4620      	mov	r0, r4
 800f528:	f7ff fa28 	bl	800e97c <__dwt_otp_write_wdata_id_reg>
 800f52c:	2102      	movs	r1, #2
 800f52e:	4620      	mov	r0, r4
 800f530:	f7ff fa24 	bl	800e97c <__dwt_otp_write_wdata_id_reg>
 800f534:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 800f538:	4620      	mov	r0, r4
 800f53a:	f7ff fa1f 	bl	800e97c <__dwt_otp_write_wdata_id_reg>
 800f53e:	b2f9      	uxtb	r1, r7
 800f540:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800f544:	4620      	mov	r0, r4
 800f546:	f7ff fa19 	bl	800e97c <__dwt_otp_write_wdata_id_reg>
 800f54a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f54e:	4620      	mov	r0, r4
 800f550:	f7ff fa14 	bl	800e97c <__dwt_otp_write_wdata_id_reg>
 800f554:	2100      	movs	r1, #0
 800f556:	4620      	mov	r0, r4
 800f558:	f7ff fa10 	bl	800e97c <__dwt_otp_write_wdata_id_reg>
 800f55c:	2102      	movs	r1, #2
 800f55e:	4620      	mov	r0, r4
 800f560:	f7ff fa0c 	bl	800e97c <__dwt_otp_write_wdata_id_reg>
 800f564:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800f568:	4620      	mov	r0, r4
 800f56a:	f7ff fa07 	bl	800e97c <__dwt_otp_write_wdata_id_reg>
 800f56e:	b2e9      	uxtb	r1, r5
 800f570:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800f574:	4620      	mov	r0, r4
 800f576:	f7ff fa01 	bl	800e97c <__dwt_otp_write_wdata_id_reg>
 800f57a:	f3c5 2107 	ubfx	r1, r5, #8, #8
 800f57e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800f582:	4620      	mov	r0, r4
 800f584:	f7ff f9fa 	bl	800e97c <__dwt_otp_write_wdata_id_reg>
 800f588:	f3c5 4107 	ubfx	r1, r5, #16, #8
 800f58c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800f590:	4620      	mov	r0, r4
 800f592:	f7ff f9f3 	bl	800e97c <__dwt_otp_write_wdata_id_reg>
 800f596:	0e29      	lsrs	r1, r5, #24
 800f598:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800f59c:	4620      	mov	r0, r4
 800f59e:	f7ff f9ed 	bl	800e97c <__dwt_otp_write_wdata_id_reg>
 800f5a2:	2100      	movs	r1, #0
 800f5a4:	4620      	mov	r0, r4
 800f5a6:	f7ff f9e9 	bl	800e97c <__dwt_otp_write_wdata_id_reg>
 800f5aa:	213a      	movs	r1, #58	; 0x3a
 800f5ac:	4620      	mov	r0, r4
 800f5ae:	f7ff f9e5 	bl	800e97c <__dwt_otp_write_wdata_id_reg>
 800f5b2:	f240 11ff 	movw	r1, #511	; 0x1ff
 800f5b6:	4620      	mov	r0, r4
 800f5b8:	f7ff f9e0 	bl	800e97c <__dwt_otp_write_wdata_id_reg>
 800f5bc:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800f5c0:	4620      	mov	r0, r4
 800f5c2:	f7ff f9db 	bl	800e97c <__dwt_otp_write_wdata_id_reg>
 800f5c6:	2100      	movs	r1, #0
 800f5c8:	4620      	mov	r0, r4
 800f5ca:	f7ff f9d7 	bl	800e97c <__dwt_otp_write_wdata_id_reg>
 800f5ce:	213a      	movs	r1, #58	; 0x3a
 800f5d0:	4620      	mov	r0, r4
 800f5d2:	f7ff f9d3 	bl	800e97c <__dwt_otp_write_wdata_id_reg>
 800f5d6:	f240 1101 	movw	r1, #257	; 0x101
 800f5da:	4620      	mov	r0, r4
 800f5dc:	f7ff f9ce 	bl	800e97c <__dwt_otp_write_wdata_id_reg>
 800f5e0:	2302      	movs	r3, #2
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800f5e8:	4620      	mov	r0, r4
 800f5ea:	f7ff f992 	bl	800e912 <dwt_write16bitoffsetreg>
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	461a      	mov	r2, r3
 800f5f2:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800f5f6:	4620      	mov	r0, r4
 800f5f8:	f7ff f98b 	bl	800e912 <dwt_write16bitoffsetreg>
 800f5fc:	2002      	movs	r0, #2
 800f5fe:	f7f1 ff9d 	bl	800153c <deca_sleep>
 800f602:	213a      	movs	r1, #58	; 0x3a
 800f604:	4620      	mov	r0, r4
 800f606:	f7ff f9b9 	bl	800e97c <__dwt_otp_write_wdata_id_reg>
 800f60a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800f60e:	4620      	mov	r0, r4
 800f610:	f7ff f9b4 	bl	800e97c <__dwt_otp_write_wdata_id_reg>
 800f614:	2302      	movs	r3, #2
 800f616:	2200      	movs	r2, #0
 800f618:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800f61c:	4620      	mov	r0, r4
 800f61e:	f7ff f978 	bl	800e912 <dwt_write16bitoffsetreg>
 800f622:	2300      	movs	r3, #0
 800f624:	461a      	mov	r2, r3
 800f626:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800f62a:	4620      	mov	r0, r4
 800f62c:	f7ff f971 	bl	800e912 <dwt_write16bitoffsetreg>
 800f630:	2300      	movs	r3, #0
 800f632:	461a      	mov	r2, r3
 800f634:	4641      	mov	r1, r8
 800f636:	4620      	mov	r0, r4
 800f638:	f7ff f96b 	bl	800e912 <dwt_write16bitoffsetreg>
 800f63c:	464b      	mov	r3, r9
 800f63e:	2200      	movs	r2, #0
 800f640:	4631      	mov	r1, r6
 800f642:	4620      	mov	r0, r4
 800f644:	f7ff f9d0 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800f648:	b003      	add	sp, #12
 800f64a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f64e:	bf00      	nop
 800f650:	00070044 	.word	0x00070044
 800f654:	000b0008 	.word	0x000b0008

0800f658 <ull_setgpiomode>:
 800f658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f65a:	b083      	sub	sp, #12
 800f65c:	2400      	movs	r4, #0
 800f65e:	4623      	mov	r3, r4
 800f660:	2601      	movs	r6, #1
 800f662:	2707      	movs	r7, #7
 800f664:	e002      	b.n	800f66c <ull_setgpiomode+0x14>
 800f666:	3401      	adds	r4, #1
 800f668:	2c09      	cmp	r4, #9
 800f66a:	d009      	beq.n	800f680 <ull_setgpiomode+0x28>
 800f66c:	fa06 f504 	lsl.w	r5, r6, r4
 800f670:	420d      	tst	r5, r1
 800f672:	d0f8      	beq.n	800f666 <ull_setgpiomode+0xe>
 800f674:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800f678:	fa07 f505 	lsl.w	r5, r7, r5
 800f67c:	432b      	orrs	r3, r5
 800f67e:	e7f2      	b.n	800f666 <ull_setgpiomode+0xe>
 800f680:	401a      	ands	r2, r3
 800f682:	9200      	str	r2, [sp, #0]
 800f684:	43db      	mvns	r3, r3
 800f686:	2200      	movs	r2, #0
 800f688:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800f68c:	f7ff feb2 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 800f690:	b003      	add	sp, #12
 800f692:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f694 <ull_writetxfctrl>:
 800f694:	b500      	push	{lr}
 800f696:	b083      	sub	sp, #12
 800f698:	2a7f      	cmp	r2, #127	; 0x7f
 800f69a:	bf88      	it	hi
 800f69c:	3280      	addhi	r2, #128	; 0x80
 800f69e:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 800f6a2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f6a6:	9100      	str	r1, [sp, #0]
 800f6a8:	4b03      	ldr	r3, [pc, #12]	; (800f6b8 <ull_writetxfctrl+0x24>)
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	2120      	movs	r1, #32
 800f6ae:	f7ff fea1 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 800f6b2:	b003      	add	sp, #12
 800f6b4:	f85d fb04 	ldr.w	pc, [sp], #4
 800f6b8:	fc00f400 	.word	0xfc00f400

0800f6bc <prs_sys_status_and_or>:
 800f6bc:	b500      	push	{lr}
 800f6be:	b083      	sub	sp, #12
 800f6c0:	9200      	str	r2, [sp, #0]
 800f6c2:	460b      	mov	r3, r1
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	2144      	movs	r1, #68	; 0x44
 800f6c8:	f7ff fe94 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 800f6cc:	2000      	movs	r0, #0
 800f6ce:	b003      	add	sp, #12
 800f6d0:	f85d fb04 	ldr.w	pc, [sp], #4

0800f6d4 <dwt_modify8bitoffsetreg>:
 800f6d4:	b500      	push	{lr}
 800f6d6:	b085      	sub	sp, #20
 800f6d8:	f88d 300c 	strb.w	r3, [sp, #12]
 800f6dc:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800f6e0:	f88d 300d 	strb.w	r3, [sp, #13]
 800f6e4:	f248 0301 	movw	r3, #32769	; 0x8001
 800f6e8:	9301      	str	r3, [sp, #4]
 800f6ea:	ab03      	add	r3, sp, #12
 800f6ec:	9300      	str	r3, [sp, #0]
 800f6ee:	2302      	movs	r3, #2
 800f6f0:	b292      	uxth	r2, r2
 800f6f2:	f7fe fc12 	bl	800df1a <dwt_xfer3xxx>
 800f6f6:	b005      	add	sp, #20
 800f6f8:	f85d fb04 	ldr.w	pc, [sp], #4

0800f6fc <ull_enablespicrccheck>:
 800f6fc:	b570      	push	{r4, r5, r6, lr}
 800f6fe:	b082      	sub	sp, #8
 800f700:	4604      	mov	r4, r0
 800f702:	460d      	mov	r5, r1
 800f704:	b159      	cbz	r1, 800f71e <ull_enablespicrccheck+0x22>
 800f706:	4616      	mov	r6, r2
 800f708:	2340      	movs	r3, #64	; 0x40
 800f70a:	9300      	str	r3, [sp, #0]
 800f70c:	23ff      	movs	r3, #255	; 0xff
 800f70e:	2200      	movs	r2, #0
 800f710:	2110      	movs	r1, #16
 800f712:	f7ff ffdf 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 800f716:	2d02      	cmp	r5, #2
 800f718:	d107      	bne.n	800f72a <ull_enablespicrccheck+0x2e>
 800f71a:	60e6      	str	r6, [r4, #12]
 800f71c:	e005      	b.n	800f72a <ull_enablespicrccheck+0x2e>
 800f71e:	2200      	movs	r2, #0
 800f720:	9200      	str	r2, [sp, #0]
 800f722:	23bf      	movs	r3, #191	; 0xbf
 800f724:	2110      	movs	r1, #16
 800f726:	f7ff ffd5 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 800f72a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f72c:	751d      	strb	r5, [r3, #20]
 800f72e:	b002      	add	sp, #8
 800f730:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f734 <ull_configciadiag>:
 800f734:	b530      	push	{r4, r5, lr}
 800f736:	b083      	sub	sp, #12
 800f738:	4604      	mov	r4, r0
 800f73a:	460d      	mov	r5, r1
 800f73c:	f011 0f01 	tst.w	r1, #1
 800f740:	d015      	beq.n	800f76e <ull_configciadiag+0x3a>
 800f742:	2300      	movs	r3, #0
 800f744:	9300      	str	r3, [sp, #0]
 800f746:	23ef      	movs	r3, #239	; 0xef
 800f748:	2202      	movs	r2, #2
 800f74a:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800f74e:	f7ff ffc1 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 800f752:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f754:	759d      	strb	r5, [r3, #22]
 800f756:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f758:	7d9b      	ldrb	r3, [r3, #22]
 800f75a:	085b      	lsrs	r3, r3, #1
 800f75c:	d010      	beq.n	800f780 <ull_configciadiag+0x4c>
 800f75e:	086b      	lsrs	r3, r5, #1
 800f760:	2200      	movs	r2, #0
 800f762:	490e      	ldr	r1, [pc, #56]	; (800f79c <ull_configciadiag+0x68>)
 800f764:	4620      	mov	r0, r4
 800f766:	f7ff fb23 	bl	800edb0 <dwt_write8bitoffsetreg>
 800f76a:	b003      	add	sp, #12
 800f76c:	bd30      	pop	{r4, r5, pc}
 800f76e:	2310      	movs	r3, #16
 800f770:	9300      	str	r3, [sp, #0]
 800f772:	23ff      	movs	r3, #255	; 0xff
 800f774:	2202      	movs	r2, #2
 800f776:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800f77a:	f7ff ffab 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 800f77e:	e7e8      	b.n	800f752 <ull_configciadiag+0x1e>
 800f780:	2301      	movs	r3, #1
 800f782:	9300      	str	r3, [sp, #0]
 800f784:	23ff      	movs	r3, #255	; 0xff
 800f786:	2200      	movs	r2, #0
 800f788:	4904      	ldr	r1, [pc, #16]	; (800f79c <ull_configciadiag+0x68>)
 800f78a:	4620      	mov	r0, r4
 800f78c:	f7ff ffa2 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 800f790:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f792:	7d93      	ldrb	r3, [r2, #22]
 800f794:	f043 0302 	orr.w	r3, r3, #2
 800f798:	7593      	strb	r3, [r2, #22]
 800f79a:	e7e6      	b.n	800f76a <ull_configciadiag+0x36>
 800f79c:	00010020 	.word	0x00010020

0800f7a0 <ull_configurestsloadiv>:
 800f7a0:	b500      	push	{lr}
 800f7a2:	b083      	sub	sp, #12
 800f7a4:	2301      	movs	r3, #1
 800f7a6:	9300      	str	r3, [sp, #0]
 800f7a8:	23ff      	movs	r3, #255	; 0xff
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	4902      	ldr	r1, [pc, #8]	; (800f7b8 <ull_configurestsloadiv+0x18>)
 800f7ae:	f7ff ff91 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 800f7b2:	b003      	add	sp, #12
 800f7b4:	f85d fb04 	ldr.w	pc, [sp], #4
 800f7b8:	00020004 	.word	0x00020004

0800f7bc <ull_adcoffsetscalibration>:
 800f7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7c0:	b08b      	sub	sp, #44	; 0x2c
 800f7c2:	4607      	mov	r7, r0
 800f7c4:	f8df 8220 	ldr.w	r8, [pc, #544]	; 800f9e8 <ull_adcoffsetscalibration+0x22c>
 800f7c8:	2200      	movs	r2, #0
 800f7ca:	4641      	mov	r1, r8
 800f7cc:	f7fe fc2d 	bl	800e02a <dwt_read32bitoffsetreg>
 800f7d0:	9004      	str	r0, [sp, #16]
 800f7d2:	4c7d      	ldr	r4, [pc, #500]	; (800f9c8 <ull_adcoffsetscalibration+0x20c>)
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	4621      	mov	r1, r4
 800f7d8:	4638      	mov	r0, r7
 800f7da:	f7fe fc26 	bl	800e02a <dwt_read32bitoffsetreg>
 800f7de:	9005      	str	r0, [sp, #20]
 800f7e0:	4d7a      	ldr	r5, [pc, #488]	; (800f9cc <ull_adcoffsetscalibration+0x210>)
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	4629      	mov	r1, r5
 800f7e6:	4638      	mov	r0, r7
 800f7e8:	f7fe fc74 	bl	800e0d4 <dwt_read8bitoffsetreg>
 800f7ec:	9006      	str	r0, [sp, #24]
 800f7ee:	4e78      	ldr	r6, [pc, #480]	; (800f9d0 <ull_adcoffsetscalibration+0x214>)
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	4631      	mov	r1, r6
 800f7f4:	4638      	mov	r0, r7
 800f7f6:	f7fe fc18 	bl	800e02a <dwt_read32bitoffsetreg>
 800f7fa:	4682      	mov	sl, r0
 800f7fc:	9007      	str	r0, [sp, #28]
 800f7fe:	2200      	movs	r2, #0
 800f800:	4974      	ldr	r1, [pc, #464]	; (800f9d4 <ull_adcoffsetscalibration+0x218>)
 800f802:	4638      	mov	r0, r7
 800f804:	f7fe fc11 	bl	800e02a <dwt_read32bitoffsetreg>
 800f808:	4681      	mov	r9, r0
 800f80a:	4b73      	ldr	r3, [pc, #460]	; (800f9d8 <ull_adcoffsetscalibration+0x21c>)
 800f80c:	9300      	str	r3, [sp, #0]
 800f80e:	f06f 537c 	mvn.w	r3, #1056964608	; 0x3f000000
 800f812:	2200      	movs	r2, #0
 800f814:	4641      	mov	r1, r8
 800f816:	4638      	mov	r0, r7
 800f818:	f7ff fdec 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 800f81c:	464b      	mov	r3, r9
 800f81e:	2200      	movs	r2, #0
 800f820:	4631      	mov	r1, r6
 800f822:	4638      	mov	r0, r7
 800f824:	f7ff f8e0 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800f828:	4653      	mov	r3, sl
 800f82a:	00db      	lsls	r3, r3, #3
 800f82c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f834:	9300      	str	r3, [sp, #0]
 800f836:	2386      	movs	r3, #134	; 0x86
 800f838:	2200      	movs	r2, #0
 800f83a:	4621      	mov	r1, r4
 800f83c:	4638      	mov	r0, r7
 800f83e:	f7ff ff49 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 800f842:	2300      	movs	r3, #0
 800f844:	2203      	movs	r2, #3
 800f846:	4621      	mov	r1, r4
 800f848:	4638      	mov	r0, r7
 800f84a:	f7ff fab1 	bl	800edb0 <dwt_write8bitoffsetreg>
 800f84e:	f04f 0900 	mov.w	r9, #0
 800f852:	f8cd 9000 	str.w	r9, [sp]
 800f856:	23fe      	movs	r3, #254	; 0xfe
 800f858:	464a      	mov	r2, r9
 800f85a:	4629      	mov	r1, r5
 800f85c:	4638      	mov	r0, r7
 800f85e:	f7ff ff39 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 800f862:	464a      	mov	r2, r9
 800f864:	213c      	movs	r1, #60	; 0x3c
 800f866:	4638      	mov	r0, r7
 800f868:	f7fe fbdf 	bl	800e02a <dwt_read32bitoffsetreg>
 800f86c:	9008      	str	r0, [sp, #32]
 800f86e:	464a      	mov	r2, r9
 800f870:	2140      	movs	r1, #64	; 0x40
 800f872:	4638      	mov	r0, r7
 800f874:	f7fe fbd9 	bl	800e02a <dwt_read32bitoffsetreg>
 800f878:	9009      	str	r0, [sp, #36]	; 0x24
 800f87a:	464b      	mov	r3, r9
 800f87c:	464a      	mov	r2, r9
 800f87e:	213c      	movs	r1, #60	; 0x3c
 800f880:	4638      	mov	r0, r7
 800f882:	f7ff f8b1 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800f886:	464b      	mov	r3, r9
 800f888:	464a      	mov	r2, r9
 800f88a:	2140      	movs	r1, #64	; 0x40
 800f88c:	4638      	mov	r0, r7
 800f88e:	f7ff f8ab 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800f892:	f7f5 fdf3 	bl	800547c <dwt_forcetrxoff>
 800f896:	f04f 0b02 	mov.w	fp, #2
 800f89a:	464c      	mov	r4, r9
 800f89c:	464d      	mov	r5, r9
 800f89e:	464e      	mov	r6, r9
 800f8a0:	46c8      	mov	r8, r9
 800f8a2:	f8cd 900c 	str.w	r9, [sp, #12]
 800f8a6:	46ca      	mov	sl, r9
 800f8a8:	e00e      	b.n	800f8c8 <ull_adcoffsetscalibration+0x10c>
 800f8aa:	f7f5 fde7 	bl	800547c <dwt_forcetrxoff>
 800f8ae:	9b03      	ldr	r3, [sp, #12]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	f000 8082 	beq.w	800f9ba <ull_adcoffsetscalibration+0x1fe>
 800f8b6:	f1bb 0f01 	cmp.w	fp, #1
 800f8ba:	f000 8081 	beq.w	800f9c0 <ull_adcoffsetscalibration+0x204>
 800f8be:	2301      	movs	r3, #1
 800f8c0:	9303      	str	r3, [sp, #12]
 800f8c2:	f1bb 0b01 	subs.w	fp, fp, #1
 800f8c6:	d043      	beq.n	800f950 <ull_adcoffsetscalibration+0x194>
 800f8c8:	4650      	mov	r0, sl
 800f8ca:	f7f5 fde5 	bl	8005498 <dwt_rxenable>
 800f8ce:	2014      	movs	r0, #20
 800f8d0:	f7f1 fe3f 	bl	8001552 <deca_usleep>
 800f8d4:	f04f 0904 	mov.w	r9, #4
 800f8d8:	f8cd a000 	str.w	sl, [sp]
 800f8dc:	23fe      	movs	r3, #254	; 0xfe
 800f8de:	4652      	mov	r2, sl
 800f8e0:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800f8e4:	4638      	mov	r0, r7
 800f8e6:	f7ff fef5 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 800f8ea:	2301      	movs	r3, #1
 800f8ec:	9300      	str	r3, [sp, #0]
 800f8ee:	23fe      	movs	r3, #254	; 0xfe
 800f8f0:	4652      	mov	r2, sl
 800f8f2:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800f8f6:	4638      	mov	r0, r7
 800f8f8:	f7ff feec 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 800f8fc:	4652      	mov	r2, sl
 800f8fe:	4937      	ldr	r1, [pc, #220]	; (800f9dc <ull_adcoffsetscalibration+0x220>)
 800f900:	4638      	mov	r0, r7
 800f902:	f7fe fb92 	bl	800e02a <dwt_read32bitoffsetreg>
 800f906:	fa58 f880 	uxtab	r8, r8, r0
 800f90a:	fa1f f888 	uxth.w	r8, r8
 800f90e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f912:	441e      	add	r6, r3
 800f914:	b2b6      	uxth	r6, r6
 800f916:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f91a:	441d      	add	r5, r3
 800f91c:	b2ad      	uxth	r5, r5
 800f91e:	eb04 6410 	add.w	r4, r4, r0, lsr #24
 800f922:	b2a4      	uxth	r4, r4
 800f924:	f1b9 0901 	subs.w	r9, r9, #1
 800f928:	d1d6      	bne.n	800f8d8 <ull_adcoffsetscalibration+0x11c>
 800f92a:	f3c8 0887 	ubfx	r8, r8, #2, #8
 800f92e:	f3c6 0687 	ubfx	r6, r6, #2, #8
 800f932:	f3c5 0587 	ubfx	r5, r5, #2, #8
 800f936:	f3c4 0487 	ubfx	r4, r4, #2, #8
 800f93a:	4652      	mov	r2, sl
 800f93c:	2144      	movs	r1, #68	; 0x44
 800f93e:	4638      	mov	r0, r7
 800f940:	f7fe fb73 	bl	800e02a <dwt_read32bitoffsetreg>
 800f944:	4b26      	ldr	r3, [pc, #152]	; (800f9e0 <ull_adcoffsetscalibration+0x224>)
 800f946:	4218      	tst	r0, r3
 800f948:	d0af      	beq.n	800f8aa <ull_adcoffsetscalibration+0xee>
 800f94a:	f7f5 fd97 	bl	800547c <dwt_forcetrxoff>
 800f94e:	e7b2      	b.n	800f8b6 <ull_adcoffsetscalibration+0xfa>
 800f950:	f04f 0900 	mov.w	r9, #0
 800f954:	9b08      	ldr	r3, [sp, #32]
 800f956:	2200      	movs	r2, #0
 800f958:	213c      	movs	r1, #60	; 0x3c
 800f95a:	4638      	mov	r0, r7
 800f95c:	f7ff f844 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800f960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f962:	2200      	movs	r2, #0
 800f964:	2140      	movs	r1, #64	; 0x40
 800f966:	4638      	mov	r0, r7
 800f968:	f7ff f83e 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800f96c:	042b      	lsls	r3, r5, #16
 800f96e:	eb03 6304 	add.w	r3, r3, r4, lsl #24
 800f972:	eb03 2306 	add.w	r3, r3, r6, lsl #8
 800f976:	4443      	add	r3, r8
 800f978:	2200      	movs	r2, #0
 800f97a:	491a      	ldr	r1, [pc, #104]	; (800f9e4 <ull_adcoffsetscalibration+0x228>)
 800f97c:	4638      	mov	r0, r7
 800f97e:	f7ff f833 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800f982:	9b04      	ldr	r3, [sp, #16]
 800f984:	2200      	movs	r2, #0
 800f986:	4918      	ldr	r1, [pc, #96]	; (800f9e8 <ull_adcoffsetscalibration+0x22c>)
 800f988:	4638      	mov	r0, r7
 800f98a:	f7ff f82d 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800f98e:	9b05      	ldr	r3, [sp, #20]
 800f990:	2200      	movs	r2, #0
 800f992:	490d      	ldr	r1, [pc, #52]	; (800f9c8 <ull_adcoffsetscalibration+0x20c>)
 800f994:	4638      	mov	r0, r7
 800f996:	f7ff f827 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800f99a:	9b06      	ldr	r3, [sp, #24]
 800f99c:	2200      	movs	r2, #0
 800f99e:	490b      	ldr	r1, [pc, #44]	; (800f9cc <ull_adcoffsetscalibration+0x210>)
 800f9a0:	4638      	mov	r0, r7
 800f9a2:	f7ff fa05 	bl	800edb0 <dwt_write8bitoffsetreg>
 800f9a6:	9b07      	ldr	r3, [sp, #28]
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	4909      	ldr	r1, [pc, #36]	; (800f9d0 <ull_adcoffsetscalibration+0x214>)
 800f9ac:	4638      	mov	r0, r7
 800f9ae:	f7ff f81b 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800f9b2:	4648      	mov	r0, r9
 800f9b4:	b00b      	add	sp, #44	; 0x2c
 800f9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9ba:	f04f 0900 	mov.w	r9, #0
 800f9be:	e7c9      	b.n	800f954 <ull_adcoffsetscalibration+0x198>
 800f9c0:	f06f 0905 	mvn.w	r9, #5
 800f9c4:	e7c6      	b.n	800f954 <ull_adcoffsetscalibration+0x198>
 800f9c6:	bf00      	nop
 800f9c8:	00030014 	.word	0x00030014
 800f9cc:	00030018 	.word	0x00030018
 800f9d0:	0003002c 	.word	0x0003002c
 800f9d4:	00030044 	.word	0x00030044
 800f9d8:	38010000 	.word	0x38010000
 800f9dc:	0003004c 	.word	0x0003004c
 800f9e0:	3427ff00 	.word	0x3427ff00
 800f9e4:	00030010 	.word	0x00030010
 800f9e8:	00070014 	.word	0x00070014

0800f9ec <ull_restoreconfig>:
 800f9ec:	b510      	push	{r4, lr}
 800f9ee:	4604      	mov	r4, r0
 800f9f0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f9f2:	7d9b      	ldrb	r3, [r3, #22]
 800f9f4:	085b      	lsrs	r3, r3, #1
 800f9f6:	d01a      	beq.n	800fa2e <ull_restoreconfig+0x42>
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	4912      	ldr	r1, [pc, #72]	; (800fa44 <ull_restoreconfig+0x58>)
 800f9fc:	4620      	mov	r0, r4
 800f9fe:	f7fe fb2a 	bl	800e056 <dwt_read16bitoffsetreg>
 800fa02:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 800fa06:	3b09      	subs	r3, #9
 800fa08:	2b0f      	cmp	r3, #15
 800fa0a:	d80c      	bhi.n	800fa26 <ull_restoreconfig+0x3a>
 800fa0c:	f000 0001 	and.w	r0, r0, #1
 800fa10:	2800      	cmp	r0, #0
 800fa12:	bf0c      	ite	eq
 800fa14:	2105      	moveq	r1, #5
 800fa16:	2109      	movne	r1, #9
 800fa18:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800fa1a:	7a1b      	ldrb	r3, [r3, #8]
 800fa1c:	2b01      	cmp	r3, #1
 800fa1e:	d002      	beq.n	800fa26 <ull_restoreconfig+0x3a>
 800fa20:	4620      	mov	r0, r4
 800fa22:	f7ff f8ad 	bl	800eb80 <ull_configmrxlut>
 800fa26:	4620      	mov	r0, r4
 800fa28:	f7ff fec8 	bl	800f7bc <ull_adcoffsetscalibration>
 800fa2c:	bd10      	pop	{r4, pc}
 800fa2e:	2301      	movs	r3, #1
 800fa30:	2200      	movs	r2, #0
 800fa32:	4905      	ldr	r1, [pc, #20]	; (800fa48 <ull_restoreconfig+0x5c>)
 800fa34:	f7ff f9bc 	bl	800edb0 <dwt_write8bitoffsetreg>
 800fa38:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800fa3a:	7d93      	ldrb	r3, [r2, #22]
 800fa3c:	f043 0302 	orr.w	r3, r3, #2
 800fa40:	7593      	strb	r3, [r2, #22]
 800fa42:	e7d9      	b.n	800f9f8 <ull_restoreconfig+0xc>
 800fa44:	00010008 	.word	0x00010008
 800fa48:	00010020 	.word	0x00010020

0800fa4c <ull_calcbandwidthadj>:
 800fa4c:	b570      	push	{r4, r5, r6, lr}
 800fa4e:	b082      	sub	sp, #8
 800fa50:	4604      	mov	r4, r0
 800fa52:	460d      	mov	r5, r1
 800fa54:	2101      	movs	r1, #1
 800fa56:	f7fe ff7b 	bl	800e950 <ull_force_clocks>
 800fa5a:	2100      	movs	r1, #0
 800fa5c:	4620      	mov	r0, r4
 800fa5e:	f7ff fcfd 	bl	800f45c <ull_enable_rf_tx>
 800fa62:	4620      	mov	r0, r4
 800fa64:	f7ff fd2e 	bl	800f4c4 <ull_enable_rftx_blocks>
 800fa68:	f3c5 030b 	ubfx	r3, r5, #0, #12
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	4915      	ldr	r1, [pc, #84]	; (800fac4 <ull_calcbandwidthadj+0x78>)
 800fa70:	4620      	mov	r0, r4
 800fa72:	f7fe ff4e 	bl	800e912 <dwt_write16bitoffsetreg>
 800fa76:	2303      	movs	r3, #3
 800fa78:	9300      	str	r3, [sp, #0]
 800fa7a:	23ff      	movs	r3, #255	; 0xff
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	4912      	ldr	r1, [pc, #72]	; (800fac8 <ull_calcbandwidthadj+0x7c>)
 800fa80:	4620      	mov	r0, r4
 800fa82:	f7ff fe27 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 800fa86:	4e10      	ldr	r6, [pc, #64]	; (800fac8 <ull_calcbandwidthadj+0x7c>)
 800fa88:	2500      	movs	r5, #0
 800fa8a:	462a      	mov	r2, r5
 800fa8c:	4631      	mov	r1, r6
 800fa8e:	4620      	mov	r0, r4
 800fa90:	f7fe fb20 	bl	800e0d4 <dwt_read8bitoffsetreg>
 800fa94:	f010 0f01 	tst.w	r0, #1
 800fa98:	d1f7      	bne.n	800fa8a <ull_calcbandwidthadj+0x3e>
 800fa9a:	4620      	mov	r0, r4
 800fa9c:	f7ff f906 	bl	800ecac <ull_disable_rftx_blocks>
 800faa0:	2100      	movs	r1, #0
 800faa2:	4620      	mov	r0, r4
 800faa4:	f7ff f90c 	bl	800ecc0 <ull_disable_rf_tx>
 800faa8:	2105      	movs	r1, #5
 800faaa:	4620      	mov	r0, r4
 800faac:	f7fe ff50 	bl	800e950 <ull_force_clocks>
 800fab0:	2200      	movs	r2, #0
 800fab2:	4906      	ldr	r1, [pc, #24]	; (800facc <ull_calcbandwidthadj+0x80>)
 800fab4:	4620      	mov	r0, r4
 800fab6:	f7fe fb0d 	bl	800e0d4 <dwt_read8bitoffsetreg>
 800faba:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800fabe:	b002      	add	sp, #8
 800fac0:	bd70      	pop	{r4, r5, r6, pc}
 800fac2:	bf00      	nop
 800fac4:	0008001c 	.word	0x0008001c
 800fac8:	00080010 	.word	0x00080010
 800facc:	0007001c 	.word	0x0007001c

0800fad0 <ull_configuretxrf>:
 800fad0:	b538      	push	{r3, r4, r5, lr}
 800fad2:	4605      	mov	r5, r0
 800fad4:	460c      	mov	r4, r1
 800fad6:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 800fada:	b149      	cbz	r1, 800faf0 <ull_configuretxrf+0x20>
 800fadc:	f7ff ffb6 	bl	800fa4c <ull_calcbandwidthadj>
 800fae0:	f8d4 3001 	ldr.w	r3, [r4, #1]
 800fae4:	2200      	movs	r2, #0
 800fae6:	4905      	ldr	r1, [pc, #20]	; (800fafc <ull_configuretxrf+0x2c>)
 800fae8:	4628      	mov	r0, r5
 800faea:	f7fe ff7d 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800faee:	bd38      	pop	{r3, r4, r5, pc}
 800faf0:	7823      	ldrb	r3, [r4, #0]
 800faf2:	2200      	movs	r2, #0
 800faf4:	4902      	ldr	r1, [pc, #8]	; (800fb00 <ull_configuretxrf+0x30>)
 800faf6:	f7ff f95b 	bl	800edb0 <dwt_write8bitoffsetreg>
 800fafa:	e7f1      	b.n	800fae0 <ull_configuretxrf+0x10>
 800fafc:	00010004 	.word	0x00010004
 800fb00:	0007001c 	.word	0x0007001c

0800fb04 <ull_repeated_frames>:
 800fb04:	b530      	push	{r4, r5, lr}
 800fb06:	b083      	sub	sp, #12
 800fb08:	4604      	mov	r4, r0
 800fb0a:	460d      	mov	r5, r1
 800fb0c:	2310      	movs	r3, #16
 800fb0e:	9300      	str	r3, [sp, #0]
 800fb10:	23ff      	movs	r3, #255	; 0xff
 800fb12:	2200      	movs	r2, #0
 800fb14:	4906      	ldr	r1, [pc, #24]	; (800fb30 <ull_repeated_frames+0x2c>)
 800fb16:	f7ff fddd 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 800fb1a:	462b      	mov	r3, r5
 800fb1c:	2d02      	cmp	r5, #2
 800fb1e:	bf38      	it	cc
 800fb20:	2302      	movcc	r3, #2
 800fb22:	2200      	movs	r2, #0
 800fb24:	2128      	movs	r1, #40	; 0x28
 800fb26:	4620      	mov	r0, r4
 800fb28:	f7fe ff5e 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800fb2c:	b003      	add	sp, #12
 800fb2e:	bd30      	pop	{r4, r5, pc}
 800fb30:	000f0028 	.word	0x000f0028

0800fb34 <ull_setdwstate>:
 800fb34:	b530      	push	{r4, r5, lr}
 800fb36:	b083      	sub	sp, #12
 800fb38:	4604      	mov	r4, r0
 800fb3a:	2901      	cmp	r1, #1
 800fb3c:	d01d      	beq.n	800fb7a <ull_setdwstate+0x46>
 800fb3e:	2902      	cmp	r1, #2
 800fb40:	d030      	beq.n	800fba4 <ull_setdwstate+0x70>
 800fb42:	2301      	movs	r3, #1
 800fb44:	9300      	str	r3, [sp, #0]
 800fb46:	23ff      	movs	r3, #255	; 0xff
 800fb48:	2200      	movs	r2, #0
 800fb4a:	4926      	ldr	r1, [pc, #152]	; (800fbe4 <ull_setdwstate+0xb0>)
 800fb4c:	f7ff fdc2 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 800fb50:	4d25      	ldr	r5, [pc, #148]	; (800fbe8 <ull_setdwstate+0xb4>)
 800fb52:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800fb56:	9300      	str	r3, [sp, #0]
 800fb58:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	4629      	mov	r1, r5
 800fb60:	4620      	mov	r0, r4
 800fb62:	f7ff fc47 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 800fb66:	2300      	movs	r3, #0
 800fb68:	9300      	str	r3, [sp, #0]
 800fb6a:	237f      	movs	r3, #127	; 0x7f
 800fb6c:	2202      	movs	r2, #2
 800fb6e:	4629      	mov	r1, r5
 800fb70:	4620      	mov	r0, r4
 800fb72:	f7ff fdaf 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 800fb76:	b003      	add	sp, #12
 800fb78:	bd30      	pop	{r4, r5, pc}
 800fb7a:	2105      	movs	r1, #5
 800fb7c:	f7fe fee8 	bl	800e950 <ull_force_clocks>
 800fb80:	f44f 7381 	mov.w	r3, #258	; 0x102
 800fb84:	9300      	str	r3, [sp, #0]
 800fb86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	4917      	ldr	r1, [pc, #92]	; (800fbec <ull_setdwstate+0xb8>)
 800fb8e:	4620      	mov	r0, r4
 800fb90:	f7ff fc30 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 800fb94:	2201      	movs	r2, #1
 800fb96:	9200      	str	r2, [sp, #0]
 800fb98:	23ff      	movs	r3, #255	; 0xff
 800fb9a:	4913      	ldr	r1, [pc, #76]	; (800fbe8 <ull_setdwstate+0xb4>)
 800fb9c:	4620      	mov	r0, r4
 800fb9e:	f7ff fd99 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 800fba2:	e7e8      	b.n	800fb76 <ull_setdwstate+0x42>
 800fba4:	2303      	movs	r3, #3
 800fba6:	9300      	str	r3, [sp, #0]
 800fba8:	23ff      	movs	r3, #255	; 0xff
 800fbaa:	2200      	movs	r2, #0
 800fbac:	490d      	ldr	r1, [pc, #52]	; (800fbe4 <ull_setdwstate+0xb0>)
 800fbae:	f7ff fd91 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 800fbb2:	4d0d      	ldr	r5, [pc, #52]	; (800fbe8 <ull_setdwstate+0xb4>)
 800fbb4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800fbb8:	9300      	str	r3, [sp, #0]
 800fbba:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	4629      	mov	r1, r5
 800fbc2:	4620      	mov	r0, r4
 800fbc4:	f7ff fc16 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 800fbc8:	2300      	movs	r3, #0
 800fbca:	9300      	str	r3, [sp, #0]
 800fbcc:	237f      	movs	r3, #127	; 0x7f
 800fbce:	2202      	movs	r2, #2
 800fbd0:	4629      	mov	r1, r5
 800fbd2:	4620      	mov	r0, r4
 800fbd4:	f7ff fd7e 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 800fbd8:	2105      	movs	r1, #5
 800fbda:	4620      	mov	r0, r4
 800fbdc:	f7fe feb8 	bl	800e950 <ull_force_clocks>
 800fbe0:	e7c9      	b.n	800fb76 <ull_setdwstate+0x42>
 800fbe2:	bf00      	nop
 800fbe4:	00110004 	.word	0x00110004
 800fbe8:	00110008 	.word	0x00110008
 800fbec:	00090008 	.word	0x00090008

0800fbf0 <ull_configureframefilter>:
 800fbf0:	b530      	push	{r4, r5, lr}
 800fbf2:	b083      	sub	sp, #12
 800fbf4:	4605      	mov	r5, r0
 800fbf6:	2902      	cmp	r1, #2
 800fbf8:	d00e      	beq.n	800fc18 <ull_configureframefilter+0x28>
 800fbfa:	2400      	movs	r4, #0
 800fbfc:	9400      	str	r4, [sp, #0]
 800fbfe:	23fe      	movs	r3, #254	; 0xfe
 800fc00:	4622      	mov	r2, r4
 800fc02:	2110      	movs	r1, #16
 800fc04:	f7ff fd66 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 800fc08:	4623      	mov	r3, r4
 800fc0a:	4622      	mov	r2, r4
 800fc0c:	2114      	movs	r1, #20
 800fc0e:	4628      	mov	r0, r5
 800fc10:	f7fe fe7f 	bl	800e912 <dwt_write16bitoffsetreg>
 800fc14:	b003      	add	sp, #12
 800fc16:	bd30      	pop	{r4, r5, pc}
 800fc18:	4614      	mov	r4, r2
 800fc1a:	2301      	movs	r3, #1
 800fc1c:	9300      	str	r3, [sp, #0]
 800fc1e:	23ff      	movs	r3, #255	; 0xff
 800fc20:	2200      	movs	r2, #0
 800fc22:	2110      	movs	r1, #16
 800fc24:	f7ff fd56 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 800fc28:	4623      	mov	r3, r4
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	2114      	movs	r1, #20
 800fc2e:	4628      	mov	r0, r5
 800fc30:	f7fe fe6f 	bl	800e912 <dwt_write16bitoffsetreg>
 800fc34:	e7ee      	b.n	800fc14 <ull_configureframefilter+0x24>
	...

0800fc38 <ull_run_pgfcal>:
 800fc38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc3c:	b082      	sub	sp, #8
 800fc3e:	4605      	mov	r5, r0
 800fc40:	4c2a      	ldr	r4, [pc, #168]	; (800fcec <ull_run_pgfcal+0xb4>)
 800fc42:	2301      	movs	r3, #1
 800fc44:	9300      	str	r3, [sp, #0]
 800fc46:	23ff      	movs	r3, #255	; 0xff
 800fc48:	2200      	movs	r2, #0
 800fc4a:	4621      	mov	r1, r4
 800fc4c:	f7ff fd42 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 800fc50:	2310      	movs	r3, #16
 800fc52:	9300      	str	r3, [sp, #0]
 800fc54:	23ff      	movs	r3, #255	; 0xff
 800fc56:	2200      	movs	r2, #0
 800fc58:	4621      	mov	r1, r4
 800fc5a:	4628      	mov	r0, r5
 800fc5c:	f7ff fd3a 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 800fc60:	2403      	movs	r4, #3
 800fc62:	f04f 0814 	mov.w	r8, #20
 800fc66:	4f22      	ldr	r7, [pc, #136]	; (800fcf0 <ull_run_pgfcal+0xb8>)
 800fc68:	2600      	movs	r6, #0
 800fc6a:	4640      	mov	r0, r8
 800fc6c:	f7f1 fc71 	bl	8001552 <deca_usleep>
 800fc70:	4632      	mov	r2, r6
 800fc72:	4639      	mov	r1, r7
 800fc74:	4628      	mov	r0, r5
 800fc76:	f7fe fa2d 	bl	800e0d4 <dwt_read8bitoffsetreg>
 800fc7a:	2801      	cmp	r0, #1
 800fc7c:	d034      	beq.n	800fce8 <ull_run_pgfcal+0xb0>
 800fc7e:	1e63      	subs	r3, r4, #1
 800fc80:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800fc84:	d1f1      	bne.n	800fc6a <ull_run_pgfcal+0x32>
 800fc86:	f06f 0402 	mvn.w	r4, #2
 800fc8a:	4e18      	ldr	r6, [pc, #96]	; (800fcec <ull_run_pgfcal+0xb4>)
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	461a      	mov	r2, r3
 800fc90:	4631      	mov	r1, r6
 800fc92:	4628      	mov	r0, r5
 800fc94:	f7ff f88c 	bl	800edb0 <dwt_write8bitoffsetreg>
 800fc98:	2301      	movs	r3, #1
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	4914      	ldr	r1, [pc, #80]	; (800fcf0 <ull_run_pgfcal+0xb8>)
 800fc9e:	4628      	mov	r0, r5
 800fca0:	f7ff f886 	bl	800edb0 <dwt_write8bitoffsetreg>
 800fca4:	2301      	movs	r3, #1
 800fca6:	9300      	str	r3, [sp, #0]
 800fca8:	23ff      	movs	r3, #255	; 0xff
 800fcaa:	2202      	movs	r2, #2
 800fcac:	4631      	mov	r1, r6
 800fcae:	4628      	mov	r0, r5
 800fcb0:	f7ff fd10 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	490f      	ldr	r1, [pc, #60]	; (800fcf4 <ull_run_pgfcal+0xbc>)
 800fcb8:	4628      	mov	r0, r5
 800fcba:	f7fe f9b6 	bl	800e02a <dwt_read32bitoffsetreg>
 800fcbe:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800fcc2:	4298      	cmp	r0, r3
 800fcc4:	bf08      	it	eq
 800fcc6:	f06f 0403 	mvneq.w	r4, #3
 800fcca:	2200      	movs	r2, #0
 800fccc:	490a      	ldr	r1, [pc, #40]	; (800fcf8 <ull_run_pgfcal+0xc0>)
 800fcce:	4628      	mov	r0, r5
 800fcd0:	f7fe f9ab 	bl	800e02a <dwt_read32bitoffsetreg>
 800fcd4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800fcd8:	4298      	cmp	r0, r3
 800fcda:	bf14      	ite	ne
 800fcdc:	4620      	movne	r0, r4
 800fcde:	f06f 0004 	mvneq.w	r0, #4
 800fce2:	b002      	add	sp, #8
 800fce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fce8:	2400      	movs	r4, #0
 800fcea:	e7ce      	b.n	800fc8a <ull_run_pgfcal+0x52>
 800fcec:	0004000c 	.word	0x0004000c
 800fcf0:	00040020 	.word	0x00040020
 800fcf4:	00040014 	.word	0x00040014
 800fcf8:	0004001c 	.word	0x0004001c

0800fcfc <ull_setinterrupt>:
 800fcfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fd00:	b083      	sub	sp, #12
 800fd02:	4605      	mov	r5, r0
 800fd04:	4688      	mov	r8, r1
 800fd06:	4617      	mov	r7, r2
 800fd08:	461c      	mov	r4, r3
 800fd0a:	f7f1 fbf9 	bl	8001500 <decamutexon>
 800fd0e:	4606      	mov	r6, r0
 800fd10:	2c02      	cmp	r4, #2
 800fd12:	d019      	beq.n	800fd48 <ull_setinterrupt+0x4c>
 800fd14:	2c04      	cmp	r4, #4
 800fd16:	d017      	beq.n	800fd48 <ull_setinterrupt+0x4c>
 800fd18:	f004 03fd 	and.w	r3, r4, #253	; 0xfd
 800fd1c:	2b01      	cmp	r3, #1
 800fd1e:	d03f      	beq.n	800fda0 <ull_setinterrupt+0xa4>
 800fd20:	f04f 0900 	mov.w	r9, #0
 800fd24:	f8cd 9000 	str.w	r9, [sp]
 800fd28:	ea6f 0308 	mvn.w	r3, r8
 800fd2c:	464a      	mov	r2, r9
 800fd2e:	213c      	movs	r1, #60	; 0x3c
 800fd30:	4628      	mov	r0, r5
 800fd32:	f7ff fb5f 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 800fd36:	f8cd 9000 	str.w	r9, [sp]
 800fd3a:	43fb      	mvns	r3, r7
 800fd3c:	464a      	mov	r2, r9
 800fd3e:	2140      	movs	r1, #64	; 0x40
 800fd40:	4628      	mov	r0, r5
 800fd42:	f7ff fb57 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 800fd46:	e00b      	b.n	800fd60 <ull_setinterrupt+0x64>
 800fd48:	4643      	mov	r3, r8
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	213c      	movs	r1, #60	; 0x3c
 800fd4e:	4628      	mov	r0, r5
 800fd50:	f7fe fe4a 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800fd54:	463b      	mov	r3, r7
 800fd56:	2200      	movs	r2, #0
 800fd58:	2140      	movs	r1, #64	; 0x40
 800fd5a:	4628      	mov	r0, r5
 800fd5c:	f7fe fe44 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800fd60:	3c03      	subs	r4, #3
 800fd62:	b2e4      	uxtb	r4, r4
 800fd64:	2c01      	cmp	r4, #1
 800fd66:	d92d      	bls.n	800fdc4 <ull_setinterrupt+0xc8>
 800fd68:	2200      	movs	r2, #0
 800fd6a:	213c      	movs	r1, #60	; 0x3c
 800fd6c:	4628      	mov	r0, r5
 800fd6e:	f7fe f95c 	bl	800e02a <dwt_read32bitoffsetreg>
 800fd72:	4603      	mov	r3, r0
 800fd74:	2200      	movs	r2, #0
 800fd76:	2144      	movs	r1, #68	; 0x44
 800fd78:	4628      	mov	r0, r5
 800fd7a:	f7fe fe35 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800fd7e:	2200      	movs	r2, #0
 800fd80:	2140      	movs	r1, #64	; 0x40
 800fd82:	4628      	mov	r0, r5
 800fd84:	f7fe f951 	bl	800e02a <dwt_read32bitoffsetreg>
 800fd88:	4603      	mov	r3, r0
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	2148      	movs	r1, #72	; 0x48
 800fd8e:	4628      	mov	r0, r5
 800fd90:	f7fe fe2a 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800fd94:	4630      	mov	r0, r6
 800fd96:	f7f1 fbc4 	bl	8001522 <decamutexoff>
 800fd9a:	b003      	add	sp, #12
 800fd9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fda0:	f8cd 8000 	str.w	r8, [sp]
 800fda4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fda8:	2200      	movs	r2, #0
 800fdaa:	213c      	movs	r1, #60	; 0x3c
 800fdac:	4628      	mov	r0, r5
 800fdae:	f7ff fb21 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 800fdb2:	9700      	str	r7, [sp, #0]
 800fdb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fdb8:	2200      	movs	r2, #0
 800fdba:	2140      	movs	r1, #64	; 0x40
 800fdbc:	4628      	mov	r0, r5
 800fdbe:	f7ff fb19 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 800fdc2:	e7cd      	b.n	800fd60 <ull_setinterrupt+0x64>
 800fdc4:	2110      	movs	r1, #16
 800fdc6:	9100      	str	r1, [sp, #0]
 800fdc8:	23ff      	movs	r3, #255	; 0xff
 800fdca:	2202      	movs	r2, #2
 800fdcc:	4628      	mov	r0, r5
 800fdce:	f7ff fc81 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 800fdd2:	e7c9      	b.n	800fd68 <ull_setinterrupt+0x6c>

0800fdd4 <prs_ack_enable>:
 800fdd4:	b500      	push	{lr}
 800fdd6:	b083      	sub	sp, #12
 800fdd8:	2900      	cmp	r1, #0
 800fdda:	bf0b      	itete	eq
 800fddc:	23ff      	moveq	r3, #255	; 0xff
 800fdde:	23f7      	movne	r3, #247	; 0xf7
 800fde0:	2200      	moveq	r2, #0
 800fde2:	2208      	movne	r2, #8
 800fde4:	9200      	str	r2, [sp, #0]
 800fde6:	2201      	movs	r2, #1
 800fde8:	2110      	movs	r1, #16
 800fdea:	f7ff fc73 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 800fdee:	b003      	add	sp, #12
 800fdf0:	f85d fb04 	ldr.w	pc, [sp], #4

0800fdf4 <dwt_modify16bitoffsetreg>:
 800fdf4:	b510      	push	{r4, lr}
 800fdf6:	b084      	sub	sp, #16
 800fdf8:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 800fdfc:	f88d 300c 	strb.w	r3, [sp, #12]
 800fe00:	0a1b      	lsrs	r3, r3, #8
 800fe02:	f88d 300d 	strb.w	r3, [sp, #13]
 800fe06:	f88d 400e 	strb.w	r4, [sp, #14]
 800fe0a:	0a24      	lsrs	r4, r4, #8
 800fe0c:	f88d 400f 	strb.w	r4, [sp, #15]
 800fe10:	f248 0302 	movw	r3, #32770	; 0x8002
 800fe14:	9301      	str	r3, [sp, #4]
 800fe16:	ab03      	add	r3, sp, #12
 800fe18:	9300      	str	r3, [sp, #0]
 800fe1a:	2304      	movs	r3, #4
 800fe1c:	b292      	uxth	r2, r2
 800fe1e:	f7fe f87c 	bl	800df1a <dwt_xfer3xxx>
 800fe22:	b004      	add	sp, #16
 800fe24:	bd10      	pop	{r4, pc}
	...

0800fe28 <ull_configurestsmode>:
 800fe28:	b530      	push	{r4, r5, lr}
 800fe2a:	b083      	sub	sp, #12
 800fe2c:	4605      	mov	r5, r0
 800fe2e:	460c      	mov	r4, r1
 800fe30:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fe32:	7559      	strb	r1, [r3, #21]
 800fe34:	030b      	lsls	r3, r1, #12
 800fe36:	f403 4330 	and.w	r3, r3, #45056	; 0xb000
 800fe3a:	9300      	str	r3, [sp, #0]
 800fe3c:	f644 73ff 	movw	r3, #20479	; 0x4fff
 800fe40:	2200      	movs	r2, #0
 800fe42:	2110      	movs	r1, #16
 800fe44:	f7ff ffd6 	bl	800fdf4 <dwt_modify16bitoffsetreg>
 800fe48:	f004 0403 	and.w	r4, r4, #3
 800fe4c:	2c03      	cmp	r4, #3
 800fe4e:	bf0c      	ite	eq
 800fe50:	4b04      	ldreq	r3, [pc, #16]	; (800fe64 <ull_configurestsmode+0x3c>)
 800fe52:	4b05      	ldrne	r3, [pc, #20]	; (800fe68 <ull_configurestsmode+0x40>)
 800fe54:	2200      	movs	r2, #0
 800fe56:	4905      	ldr	r1, [pc, #20]	; (800fe6c <ull_configurestsmode+0x44>)
 800fe58:	4628      	mov	r0, r5
 800fe5a:	f7fe fdc5 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800fe5e:	b003      	add	sp, #12
 800fe60:	bd30      	pop	{r4, r5, pc}
 800fe62:	bf00      	nop
 800fe64:	af5f35cc 	.word	0xaf5f35cc
 800fe68:	af5f584c 	.word	0xaf5f584c
 800fe6c:	0006000c 	.word	0x0006000c

0800fe70 <ull_setleds>:
 800fe70:	b530      	push	{r4, r5, lr}
 800fe72:	b083      	sub	sp, #12
 800fe74:	4604      	mov	r4, r0
 800fe76:	f011 0f01 	tst.w	r1, #1
 800fe7a:	d01f      	beq.n	800febc <ull_setleds+0x4c>
 800fe7c:	460d      	mov	r5, r1
 800fe7e:	f44f 7310 	mov.w	r3, #576	; 0x240
 800fe82:	9300      	str	r3, [sp, #0]
 800fe84:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 800fe88:	2200      	movs	r2, #0
 800fe8a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800fe8e:	f7ff fab1 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 800fe92:	f44f 0304 	mov.w	r3, #8650752	; 0x840000
 800fe96:	9300      	str	r3, [sp, #0]
 800fe98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fe9c:	2200      	movs	r2, #0
 800fe9e:	4918      	ldr	r1, [pc, #96]	; (800ff00 <ull_setleds+0x90>)
 800fea0:	4620      	mov	r0, r4
 800fea2:	f7ff faa7 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 800fea6:	f015 0f02 	tst.w	r5, #2
 800feaa:	d11a      	bne.n	800fee2 <ull_setleds+0x72>
 800feac:	f44f 7388 	mov.w	r3, #272	; 0x110
 800feb0:	2200      	movs	r2, #0
 800feb2:	4914      	ldr	r1, [pc, #80]	; (800ff04 <ull_setleds+0x94>)
 800feb4:	4620      	mov	r0, r4
 800feb6:	f7fe fd97 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800feba:	e010      	b.n	800fede <ull_setleds+0x6e>
 800febc:	2500      	movs	r5, #0
 800febe:	9500      	str	r5, [sp, #0]
 800fec0:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 800fec4:	462a      	mov	r2, r5
 800fec6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800feca:	f7ff fa93 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 800fece:	9500      	str	r5, [sp, #0]
 800fed0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800fed4:	462a      	mov	r2, r5
 800fed6:	490b      	ldr	r1, [pc, #44]	; (800ff04 <ull_setleds+0x94>)
 800fed8:	4620      	mov	r0, r4
 800feda:	f7ff ff8b 	bl	800fdf4 <dwt_modify16bitoffsetreg>
 800fede:	b003      	add	sp, #12
 800fee0:	bd30      	pop	{r4, r5, pc}
 800fee2:	4d08      	ldr	r5, [pc, #32]	; (800ff04 <ull_setleds+0x94>)
 800fee4:	4b08      	ldr	r3, [pc, #32]	; (800ff08 <ull_setleds+0x98>)
 800fee6:	2200      	movs	r2, #0
 800fee8:	4629      	mov	r1, r5
 800feea:	4620      	mov	r0, r4
 800feec:	f7fe fd7c 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800fef0:	f44f 7388 	mov.w	r3, #272	; 0x110
 800fef4:	2200      	movs	r2, #0
 800fef6:	4629      	mov	r1, r5
 800fef8:	4620      	mov	r0, r4
 800fefa:	f7fe fd75 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800fefe:	e7ee      	b.n	800fede <ull_setleds+0x6e>
 800ff00:	00110004 	.word	0x00110004
 800ff04:	00110018 	.word	0x00110018
 800ff08:	000f0110 	.word	0x000f0110

0800ff0c <ull_pgf_cal>:
 800ff0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff0e:	b083      	sub	sp, #12
 800ff10:	4604      	mov	r4, r0
 800ff12:	2901      	cmp	r1, #1
 800ff14:	d009      	beq.n	800ff2a <ull_pgf_cal+0x1e>
 800ff16:	2014      	movs	r0, #20
 800ff18:	f7f1 fb1b 	bl	8001552 <deca_usleep>
 800ff1c:	4620      	mov	r0, r4
 800ff1e:	f7ff fe8b 	bl	800fc38 <ull_run_pgfcal>
 800ff22:	4605      	mov	r5, r0
 800ff24:	4628      	mov	r0, r5
 800ff26:	b003      	add	sp, #12
 800ff28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff2a:	4e0f      	ldr	r6, [pc, #60]	; (800ff68 <ull_pgf_cal+0x5c>)
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	4631      	mov	r1, r6
 800ff30:	f7fe f891 	bl	800e056 <dwt_read16bitoffsetreg>
 800ff34:	4607      	mov	r7, r0
 800ff36:	f240 1307 	movw	r3, #263	; 0x107
 800ff3a:	9300      	str	r3, [sp, #0]
 800ff3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ff40:	2200      	movs	r2, #0
 800ff42:	4631      	mov	r1, r6
 800ff44:	4620      	mov	r0, r4
 800ff46:	f7ff ff55 	bl	800fdf4 <dwt_modify16bitoffsetreg>
 800ff4a:	2014      	movs	r0, #20
 800ff4c:	f7f1 fb01 	bl	8001552 <deca_usleep>
 800ff50:	4620      	mov	r0, r4
 800ff52:	f7ff fe71 	bl	800fc38 <ull_run_pgfcal>
 800ff56:	4605      	mov	r5, r0
 800ff58:	2200      	movs	r2, #0
 800ff5a:	9200      	str	r2, [sp, #0]
 800ff5c:	463b      	mov	r3, r7
 800ff5e:	4631      	mov	r1, r6
 800ff60:	4620      	mov	r0, r4
 800ff62:	f7ff ff47 	bl	800fdf4 <dwt_modify16bitoffsetreg>
 800ff66:	e7dd      	b.n	800ff24 <ull_pgf_cal+0x18>
 800ff68:	00070048 	.word	0x00070048

0800ff6c <ull_setgpiovalue>:
 800ff6c:	b500      	push	{lr}
 800ff6e:	b083      	sub	sp, #12
 800ff70:	2a01      	cmp	r2, #1
 800ff72:	d009      	beq.n	800ff88 <ull_setgpiovalue+0x1c>
 800ff74:	43cb      	mvns	r3, r1
 800ff76:	2200      	movs	r2, #0
 800ff78:	9200      	str	r2, [sp, #0]
 800ff7a:	b29b      	uxth	r3, r3
 800ff7c:	4906      	ldr	r1, [pc, #24]	; (800ff98 <ull_setgpiovalue+0x2c>)
 800ff7e:	f7ff ff39 	bl	800fdf4 <dwt_modify16bitoffsetreg>
 800ff82:	b003      	add	sp, #12
 800ff84:	f85d fb04 	ldr.w	pc, [sp], #4
 800ff88:	9100      	str	r1, [sp, #0]
 800ff8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ff8e:	2200      	movs	r2, #0
 800ff90:	4901      	ldr	r1, [pc, #4]	; (800ff98 <ull_setgpiovalue+0x2c>)
 800ff92:	f7ff ff2f 	bl	800fdf4 <dwt_modify16bitoffsetreg>
 800ff96:	e7f4      	b.n	800ff82 <ull_setgpiovalue+0x16>
 800ff98:	0005000c 	.word	0x0005000c

0800ff9c <ull_readaccdata>:
 800ff9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff9e:	b083      	sub	sp, #12
 800ffa0:	4604      	mov	r4, r0
 800ffa2:	460f      	mov	r7, r1
 800ffa4:	4616      	mov	r6, r2
 800ffa6:	461d      	mov	r5, r3
 800ffa8:	f248 0340 	movw	r3, #32832	; 0x8040
 800ffac:	9300      	str	r3, [sp, #0]
 800ffae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	4918      	ldr	r1, [pc, #96]	; (8010018 <ull_readaccdata+0x7c>)
 800ffb6:	f7ff ff1d 	bl	800fdf4 <dwt_modify16bitoffsetreg>
 800ffba:	19aa      	adds	r2, r5, r6
 800ffbc:	f243 0301 	movw	r3, #12289	; 0x3001
 800ffc0:	429a      	cmp	r2, r3
 800ffc2:	dc15      	bgt.n	800fff0 <ull_readaccdata+0x54>
 800ffc4:	2d7f      	cmp	r5, #127	; 0x7f
 800ffc6:	d91d      	bls.n	8010004 <ull_readaccdata+0x68>
 800ffc8:	2315      	movs	r3, #21
 800ffca:	2200      	movs	r2, #0
 800ffcc:	4913      	ldr	r1, [pc, #76]	; (801001c <ull_readaccdata+0x80>)
 800ffce:	4620      	mov	r0, r4
 800ffd0:	f7fe fd0a 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800ffd4:	462b      	mov	r3, r5
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	4911      	ldr	r1, [pc, #68]	; (8010020 <ull_readaccdata+0x84>)
 800ffda:	4620      	mov	r0, r4
 800ffdc:	f7fe fd04 	bl	800e9e8 <dwt_write32bitoffsetreg>
 800ffe0:	9700      	str	r7, [sp, #0]
 800ffe2:	4633      	mov	r3, r6
 800ffe4:	2200      	movs	r2, #0
 800ffe6:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800ffea:	4620      	mov	r0, r4
 800ffec:	f7fe f813 	bl	800e016 <dwt_readfromdevice>
 800fff0:	2200      	movs	r2, #0
 800fff2:	9200      	str	r2, [sp, #0]
 800fff4:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 800fff8:	4907      	ldr	r1, [pc, #28]	; (8010018 <ull_readaccdata+0x7c>)
 800fffa:	4620      	mov	r0, r4
 800fffc:	f7ff fefa 	bl	800fdf4 <dwt_modify16bitoffsetreg>
 8010000:	b003      	add	sp, #12
 8010002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010004:	9700      	str	r7, [sp, #0]
 8010006:	4633      	mov	r3, r6
 8010008:	462a      	mov	r2, r5
 801000a:	f44f 11a8 	mov.w	r1, #1376256	; 0x150000
 801000e:	4620      	mov	r0, r4
 8010010:	f7fe f801 	bl	800e016 <dwt_readfromdevice>
 8010014:	e7ec      	b.n	800fff0 <ull_readaccdata+0x54>
 8010016:	bf00      	nop
 8010018:	00110004 	.word	0x00110004
 801001c:	001f0004 	.word	0x001f0004
 8010020:	001f0008 	.word	0x001f0008

08010024 <ull_configure>:
 8010024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010028:	b083      	sub	sp, #12
 801002a:	4604      	mov	r4, r0
 801002c:	460d      	mov	r5, r1
 801002e:	f891 9000 	ldrb.w	r9, [r1]
 8010032:	790b      	ldrb	r3, [r1, #4]
 8010034:	2b18      	cmp	r3, #24
 8010036:	d814      	bhi.n	8010062 <ull_configure+0x3e>
 8010038:	78cf      	ldrb	r7, [r1, #3]
 801003a:	2f18      	cmp	r7, #24
 801003c:	bf94      	ite	ls
 801003e:	2700      	movls	r7, #0
 8010040:	2701      	movhi	r7, #1
 8010042:	b2ff      	uxtb	r7, r7
 8010044:	79eb      	ldrb	r3, [r5, #7]
 8010046:	2b01      	cmp	r3, #1
 8010048:	bf0c      	ite	eq
 801004a:	2110      	moveq	r1, #16
 801004c:	2100      	movne	r1, #0
 801004e:	786b      	ldrb	r3, [r5, #1]
 8010050:	3b01      	subs	r3, #1
 8010052:	2b06      	cmp	r3, #6
 8010054:	d810      	bhi.n	8010078 <ull_configure+0x54>
 8010056:	e8df f003 	tbb	[pc, r3]
 801005a:	0f06      	.short	0x0f06
 801005c:	0f0c120f 	.word	0x0f0c120f
 8010060:	09          	.byte	0x09
 8010061:	00          	.byte	0x00
 8010062:	2701      	movs	r7, #1
 8010064:	e7ed      	b.n	8010042 <ull_configure+0x1e>
 8010066:	f04f 0a40 	mov.w	sl, #64	; 0x40
 801006a:	e00a      	b.n	8010082 <ull_configure+0x5e>
 801006c:	f04f 0a48 	mov.w	sl, #72	; 0x48
 8010070:	e007      	b.n	8010082 <ull_configure+0x5e>
 8010072:	f04f 0a80 	mov.w	sl, #128	; 0x80
 8010076:	e004      	b.n	8010082 <ull_configure+0x5e>
 8010078:	f44f 7a80 	mov.w	sl, #256	; 0x100
 801007c:	e001      	b.n	8010082 <ull_configure+0x5e>
 801007e:	f04f 0a20 	mov.w	sl, #32
 8010082:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8010084:	8a13      	ldrh	r3, [r2, #16]
 8010086:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 801008a:	8213      	strh	r3, [r2, #16]
 801008c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801008e:	79ea      	ldrb	r2, [r5, #7]
 8010090:	72da      	strb	r2, [r3, #11]
 8010092:	7b2e      	ldrb	r6, [r5, #12]
 8010094:	1cb3      	adds	r3, r6, #2
 8010096:	2601      	movs	r6, #1
 8010098:	409e      	lsls	r6, r3
 801009a:	fa1f f886 	uxth.w	r8, r6
 801009e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80100a0:	4bca      	ldr	r3, [pc, #808]	; (80103cc <ull_configure+0x3a8>)
 80100a2:	fb03 f308 	mul.w	r3, r3, r8
 80100a6:	0bdb      	lsrs	r3, r3, #15
 80100a8:	8253      	strh	r3, [r2, #18]
 80100aa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80100ac:	7aea      	ldrb	r2, [r5, #11]
 80100ae:	755a      	strb	r2, [r3, #21]
 80100b0:	7a2b      	ldrb	r3, [r5, #8]
 80100b2:	015b      	lsls	r3, r3, #5
 80100b4:	f003 0320 	and.w	r3, r3, #32
 80100b8:	7b6a      	ldrb	r2, [r5, #13]
 80100ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80100be:	7aea      	ldrb	r2, [r5, #11]
 80100c0:	0312      	lsls	r2, r2, #12
 80100c2:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 80100c6:	4313      	orrs	r3, r2
 80100c8:	430b      	orrs	r3, r1
 80100ca:	9300      	str	r3, [sp, #0]
 80100cc:	4bc0      	ldr	r3, [pc, #768]	; (80103d0 <ull_configure+0x3ac>)
 80100ce:	2200      	movs	r2, #0
 80100d0:	2110      	movs	r1, #16
 80100d2:	4620      	mov	r0, r4
 80100d4:	f7ff f98e 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 80100d8:	2f00      	cmp	r7, #0
 80100da:	f040 80fe 	bne.w	80102da <ull_configure+0x2b6>
 80100de:	7aeb      	ldrb	r3, [r5, #11]
 80100e0:	b1bb      	cbz	r3, 8010112 <ull_configure+0xee>
 80100e2:	7b6b      	ldrb	r3, [r5, #13]
 80100e4:	2b01      	cmp	r3, #1
 80100e6:	7b28      	ldrb	r0, [r5, #12]
 80100e8:	bf94      	ite	ls
 80100ea:	2203      	movls	r2, #3
 80100ec:	2204      	movhi	r2, #4
 80100ee:	2110      	movs	r1, #16
 80100f0:	4bb8      	ldr	r3, [pc, #736]	; (80103d4 <ull_configure+0x3b0>)
 80100f2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80100f6:	f7fd fef3 	bl	800dee0 <get_sts_mnth>
 80100fa:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
 80100fe:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8010102:	9000      	str	r0, [sp, #0]
 8010104:	f64f 7380 	movw	r3, #65408	; 0xff80
 8010108:	2202      	movs	r2, #2
 801010a:	49b3      	ldr	r1, [pc, #716]	; (80103d8 <ull_configure+0x3b4>)
 801010c:	4620      	mov	r0, r4
 801010e:	f7ff fe71 	bl	800fdf4 <dwt_modify16bitoffsetreg>
 8010112:	2394      	movs	r3, #148	; 0x94
 8010114:	9300      	str	r3, [sp, #0]
 8010116:	4bb1      	ldr	r3, [pc, #708]	; (80103dc <ull_configure+0x3b8>)
 8010118:	2200      	movs	r2, #0
 801011a:	49b1      	ldr	r1, [pc, #708]	; (80103e0 <ull_configure+0x3bc>)
 801011c:	4620      	mov	r0, r4
 801011e:	f7ff f969 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 8010122:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8010126:	f340 8103 	ble.w	8010330 <ull_configure+0x30c>
 801012a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801012c:	8a13      	ldrh	r3, [r2, #16]
 801012e:	f043 0320 	orr.w	r3, r3, #32
 8010132:	8213      	strh	r3, [r2, #16]
 8010134:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010138:	9300      	str	r3, [sp, #0]
 801013a:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 801013e:	2200      	movs	r2, #0
 8010140:	49a8      	ldr	r1, [pc, #672]	; (80103e4 <ull_configure+0x3c0>)
 8010142:	4620      	mov	r0, r4
 8010144:	f7ff fe56 	bl	800fdf4 <dwt_modify16bitoffsetreg>
 8010148:	7b6b      	ldrb	r3, [r5, #13]
 801014a:	2b01      	cmp	r3, #1
 801014c:	f000 80fb 	beq.w	8010346 <ull_configure+0x322>
 8010150:	78ab      	ldrb	r3, [r5, #2]
 8010152:	f043 0310 	orr.w	r3, r3, #16
 8010156:	9300      	str	r3, [sp, #0]
 8010158:	23fc      	movs	r3, #252	; 0xfc
 801015a:	2200      	movs	r2, #0
 801015c:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8010160:	4620      	mov	r0, r4
 8010162:	f7ff fab7 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 8010166:	1e73      	subs	r3, r6, #1
 8010168:	b2db      	uxtb	r3, r3
 801016a:	2200      	movs	r2, #0
 801016c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8010170:	4620      	mov	r0, r4
 8010172:	f7fe fe1d 	bl	800edb0 <dwt_write8bitoffsetreg>
 8010176:	786b      	ldrb	r3, [r5, #1]
 8010178:	2b07      	cmp	r3, #7
 801017a:	bf0c      	ite	eq
 801017c:	2108      	moveq	r1, #8
 801017e:	2100      	movne	r1, #0
 8010180:	4620      	mov	r0, r4
 8010182:	f7fe ff1b 	bl	800efbc <ull_setplenfine>
 8010186:	7aeb      	ldrb	r3, [r5, #11]
 8010188:	f003 0303 	and.w	r3, r3, #3
 801018c:	2b03      	cmp	r3, #3
 801018e:	bf0c      	ite	eq
 8010190:	4b95      	ldreq	r3, [pc, #596]	; (80103e8 <ull_configure+0x3c4>)
 8010192:	4b96      	ldrne	r3, [pc, #600]	; (80103ec <ull_configure+0x3c8>)
 8010194:	2200      	movs	r2, #0
 8010196:	4996      	ldr	r1, [pc, #600]	; (80103f0 <ull_configure+0x3cc>)
 8010198:	4620      	mov	r0, r4
 801019a:	f7fe fc25 	bl	800e9e8 <dwt_write32bitoffsetreg>
 801019e:	2200      	movs	r2, #0
 80101a0:	4994      	ldr	r1, [pc, #592]	; (80103f4 <ull_configure+0x3d0>)
 80101a2:	4620      	mov	r0, r4
 80101a4:	f7fd ff41 	bl	800e02a <dwt_read32bitoffsetreg>
 80101a8:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 80101ac:	f020 001f 	bic.w	r0, r0, #31
 80101b0:	f1b9 0f09 	cmp.w	r9, #9
 80101b4:	bf08      	it	eq
 80101b6:	f040 0001 	orreq.w	r0, r0, #1
 80101ba:	792a      	ldrb	r2, [r5, #4]
 80101bc:	0212      	lsls	r2, r2, #8
 80101be:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 80101c2:	78eb      	ldrb	r3, [r5, #3]
 80101c4:	00db      	lsls	r3, r3, #3
 80101c6:	b2db      	uxtb	r3, r3
 80101c8:	431a      	orrs	r2, r3
 80101ca:	796b      	ldrb	r3, [r5, #5]
 80101cc:	005b      	lsls	r3, r3, #1
 80101ce:	f003 0306 	and.w	r3, r3, #6
 80101d2:	4313      	orrs	r3, r2
 80101d4:	4303      	orrs	r3, r0
 80101d6:	2200      	movs	r2, #0
 80101d8:	4986      	ldr	r1, [pc, #536]	; (80103f4 <ull_configure+0x3d0>)
 80101da:	4620      	mov	r0, r4
 80101dc:	f7fe fc04 	bl	800e9e8 <dwt_write32bitoffsetreg>
 80101e0:	79aa      	ldrb	r2, [r5, #6]
 80101e2:	786b      	ldrb	r3, [r5, #1]
 80101e4:	031b      	lsls	r3, r3, #12
 80101e6:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 80101ea:	9300      	str	r3, [sp, #0]
 80101ec:	f46f 4374 	mvn.w	r3, #62464	; 0xf400
 80101f0:	2200      	movs	r2, #0
 80101f2:	2120      	movs	r1, #32
 80101f4:	4620      	mov	r0, r4
 80101f6:	f7ff f8fd 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 80101fa:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 80101fe:	b923      	cbnz	r3, 801020a <ull_configure+0x1e6>
 8010200:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8010204:	726b      	strb	r3, [r5, #9]
 8010206:	2300      	movs	r3, #0
 8010208:	72ab      	strb	r3, [r5, #10]
 801020a:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 801020e:	2202      	movs	r2, #2
 8010210:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8010214:	4620      	mov	r0, r4
 8010216:	f7fe fb7c 	bl	800e912 <dwt_write16bitoffsetreg>
 801021a:	2202      	movs	r2, #2
 801021c:	4976      	ldr	r1, [pc, #472]	; (80103f8 <ull_configure+0x3d4>)
 801021e:	4620      	mov	r0, r4
 8010220:	f7fd ff58 	bl	800e0d4 <dwt_read8bitoffsetreg>
 8010224:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010226:	7bdb      	ldrb	r3, [r3, #15]
 8010228:	454b      	cmp	r3, r9
 801022a:	f000 8096 	beq.w	801035a <ull_configure+0x336>
 801022e:	2803      	cmp	r0, #3
 8010230:	f000 8097 	beq.w	8010362 <ull_configure+0x33e>
 8010234:	f1b9 0f09 	cmp.w	r9, #9
 8010238:	f000 8098 	beq.w	801036c <ull_configure+0x348>
 801023c:	4b6f      	ldr	r3, [pc, #444]	; (80103fc <ull_configure+0x3d8>)
 801023e:	9300      	str	r3, [sp, #0]
 8010240:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010244:	2200      	movs	r2, #0
 8010246:	496e      	ldr	r1, [pc, #440]	; (8010400 <ull_configure+0x3dc>)
 8010248:	4620      	mov	r0, r4
 801024a:	f7ff f8d3 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 801024e:	f641 733c 	movw	r3, #7996	; 0x1f3c
 8010252:	2200      	movs	r2, #0
 8010254:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 8010258:	4620      	mov	r0, r4
 801025a:	f7fe fb5a 	bl	800e912 <dwt_write16bitoffsetreg>
 801025e:	2314      	movs	r3, #20
 8010260:	2201      	movs	r2, #1
 8010262:	4968      	ldr	r1, [pc, #416]	; (8010404 <ull_configure+0x3e0>)
 8010264:	4620      	mov	r0, r4
 8010266:	f7fe fda3 	bl	800edb0 <dwt_write8bitoffsetreg>
 801026a:	230e      	movs	r3, #14
 801026c:	2202      	movs	r2, #2
 801026e:	4966      	ldr	r1, [pc, #408]	; (8010408 <ull_configure+0x3e4>)
 8010270:	4620      	mov	r0, r4
 8010272:	f7fe fd9d 	bl	800edb0 <dwt_write8bitoffsetreg>
 8010276:	2381      	movs	r3, #129	; 0x81
 8010278:	2200      	movs	r2, #0
 801027a:	4964      	ldr	r1, [pc, #400]	; (801040c <ull_configure+0x3e8>)
 801027c:	4620      	mov	r0, r4
 801027e:	f7fe fd97 	bl	800edb0 <dwt_write8bitoffsetreg>
 8010282:	2600      	movs	r6, #0
 8010284:	9600      	str	r6, [sp, #0]
 8010286:	23fc      	movs	r3, #252	; 0xfc
 8010288:	2203      	movs	r2, #3
 801028a:	4961      	ldr	r1, [pc, #388]	; (8010410 <ull_configure+0x3ec>)
 801028c:	4620      	mov	r0, r4
 801028e:	f7ff fa21 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 8010292:	2302      	movs	r3, #2
 8010294:	4632      	mov	r2, r6
 8010296:	2144      	movs	r1, #68	; 0x44
 8010298:	4620      	mov	r0, r4
 801029a:	f7fe fd89 	bl	800edb0 <dwt_write8bitoffsetreg>
 801029e:	2101      	movs	r1, #1
 80102a0:	4620      	mov	r0, r4
 80102a2:	f7ff fc47 	bl	800fb34 <ull_setdwstate>
 80102a6:	f04f 0b32 	mov.w	fp, #50	; 0x32
 80102aa:	f04f 0814 	mov.w	r8, #20
 80102ae:	4637      	mov	r7, r6
 80102b0:	2644      	movs	r6, #68	; 0x44
 80102b2:	4640      	mov	r0, r8
 80102b4:	f7f1 f94d 	bl	8001552 <deca_usleep>
 80102b8:	463a      	mov	r2, r7
 80102ba:	4631      	mov	r1, r6
 80102bc:	4620      	mov	r0, r4
 80102be:	f7fd ff09 	bl	800e0d4 <dwt_read8bitoffsetreg>
 80102c2:	f010 0f02 	tst.w	r0, #2
 80102c6:	f040 80af 	bne.w	8010428 <ull_configure+0x404>
 80102ca:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80102ce:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 80102d2:	d1ee      	bne.n	80102b2 <ull_configure+0x28e>
 80102d4:	f06f 0001 	mvn.w	r0, #1
 80102d8:	e0e6      	b.n	80104a8 <ull_configure+0x484>
 80102da:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80102dc:	8a13      	ldrh	r3, [r2, #16]
 80102de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80102e2:	8213      	strh	r3, [r2, #16]
 80102e4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80102e8:	9300      	str	r3, [sp, #0]
 80102ea:	f46f 5340 	mvn.w	r3, #12288	; 0x3000
 80102ee:	2200      	movs	r2, #0
 80102f0:	493c      	ldr	r1, [pc, #240]	; (80103e4 <ull_configure+0x3c0>)
 80102f2:	4620      	mov	r0, r4
 80102f4:	f7ff f87e 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 80102f8:	f240 3306 	movw	r3, #774	; 0x306
 80102fc:	2200      	movs	r2, #0
 80102fe:	4945      	ldr	r1, [pc, #276]	; (8010414 <ull_configure+0x3f0>)
 8010300:	4620      	mov	r0, r4
 8010302:	f7fe fb71 	bl	800e9e8 <dwt_write32bitoffsetreg>
 8010306:	2300      	movs	r3, #0
 8010308:	461a      	mov	r2, r3
 801030a:	4943      	ldr	r1, [pc, #268]	; (8010418 <ull_configure+0x3f4>)
 801030c:	4620      	mov	r0, r4
 801030e:	f7fe fb6b 	bl	800e9e8 <dwt_write32bitoffsetreg>
 8010312:	4b42      	ldr	r3, [pc, #264]	; (801041c <ull_configure+0x3f8>)
 8010314:	2200      	movs	r2, #0
 8010316:	4930      	ldr	r1, [pc, #192]	; (80103d8 <ull_configure+0x3b4>)
 8010318:	4620      	mov	r0, r4
 801031a:	f7fe fb65 	bl	800e9e8 <dwt_write32bitoffsetreg>
 801031e:	239d      	movs	r3, #157	; 0x9d
 8010320:	9300      	str	r3, [sp, #0]
 8010322:	4b2e      	ldr	r3, [pc, #184]	; (80103dc <ull_configure+0x3b8>)
 8010324:	2200      	movs	r2, #0
 8010326:	492e      	ldr	r1, [pc, #184]	; (80103e0 <ull_configure+0x3bc>)
 8010328:	4620      	mov	r0, r4
 801032a:	f7ff f863 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 801032e:	e70b      	b.n	8010148 <ull_configure+0x124>
 8010330:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8010334:	9300      	str	r3, [sp, #0]
 8010336:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 801033a:	2200      	movs	r2, #0
 801033c:	4929      	ldr	r1, [pc, #164]	; (80103e4 <ull_configure+0x3c0>)
 801033e:	4620      	mov	r0, r4
 8010340:	f7ff fd58 	bl	800fdf4 <dwt_modify16bitoffsetreg>
 8010344:	e700      	b.n	8010148 <ull_configure+0x124>
 8010346:	78ab      	ldrb	r3, [r5, #2]
 8010348:	9300      	str	r3, [sp, #0]
 801034a:	23ec      	movs	r3, #236	; 0xec
 801034c:	2200      	movs	r2, #0
 801034e:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8010352:	4620      	mov	r0, r4
 8010354:	f7ff f9be 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 8010358:	e705      	b.n	8010166 <ull_configure+0x142>
 801035a:	2803      	cmp	r0, #3
 801035c:	f47f af6a 	bne.w	8010234 <ull_configure+0x210>
 8010360:	e065      	b.n	801042e <ull_configure+0x40a>
 8010362:	2102      	movs	r1, #2
 8010364:	4620      	mov	r0, r4
 8010366:	f7ff fbe5 	bl	800fb34 <ull_setdwstate>
 801036a:	e763      	b.n	8010234 <ull_configure+0x210>
 801036c:	4b2c      	ldr	r3, [pc, #176]	; (8010420 <ull_configure+0x3fc>)
 801036e:	9300      	str	r3, [sp, #0]
 8010370:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010374:	2200      	movs	r2, #0
 8010376:	4922      	ldr	r1, [pc, #136]	; (8010400 <ull_configure+0x3dc>)
 8010378:	4620      	mov	r0, r4
 801037a:	f7ff f83b 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 801037e:	f640 733c 	movw	r3, #3900	; 0xf3c
 8010382:	2200      	movs	r2, #0
 8010384:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 8010388:	4620      	mov	r0, r4
 801038a:	f7fe fac2 	bl	800e912 <dwt_write16bitoffsetreg>
 801038e:	e766      	b.n	801025e <ull_configure+0x23a>
 8010390:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010394:	9300      	str	r3, [sp, #0]
 8010396:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801039a:	2200      	movs	r2, #0
 801039c:	4911      	ldr	r1, [pc, #68]	; (80103e4 <ull_configure+0x3c0>)
 801039e:	4620      	mov	r0, r4
 80103a0:	f7ff fd28 	bl	800fdf4 <dwt_modify16bitoffsetreg>
 80103a4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80103a6:	8a13      	ldrh	r3, [r2, #16]
 80103a8:	f043 0308 	orr.w	r3, r3, #8
 80103ac:	8213      	strh	r3, [r2, #16]
 80103ae:	e050      	b.n	8010452 <ull_configure+0x42e>
 80103b0:	2200      	movs	r2, #0
 80103b2:	9200      	str	r2, [sp, #0]
 80103b4:	23fe      	movs	r3, #254	; 0xfe
 80103b6:	491b      	ldr	r1, [pc, #108]	; (8010424 <ull_configure+0x400>)
 80103b8:	4620      	mov	r0, r4
 80103ba:	f7ff f98b 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 80103be:	e052      	b.n	8010466 <ull_configure+0x442>
 80103c0:	2101      	movs	r1, #1
 80103c2:	4620      	mov	r0, r4
 80103c4:	f7ff fda2 	bl	800ff0c <ull_pgf_cal>
 80103c8:	e06b      	b.n	80104a2 <ull_configure+0x47e>
 80103ca:	bf00      	nop
 80103cc:	00026668 	.word	0x00026668
 80103d0:	fffc4fcf 	.word	0xfffc4fcf
 80103d4:	08016090 	.word	0x08016090
 80103d8:	000e0014 	.word	0x000e0014
 80103dc:	bfffff00 	.word	0xbfffff00
 80103e0:	000e0018 	.word	0x000e0018
 80103e4:	000b0008 	.word	0x000b0008
 80103e8:	af5f35cc 	.word	0xaf5f35cc
 80103ec:	af5f584c 	.word	0xaf5f584c
 80103f0:	0006000c 	.word	0x0006000c
 80103f4:	00010008 	.word	0x00010008
 80103f8:	000f0030 	.word	0x000f0030
 80103fc:	1c071134 	.word	0x1c071134
 8010400:	0007001c 	.word	0x0007001c
 8010404:	00070050 	.word	0x00070050
 8010408:	00070018 	.word	0x00070018
 801040c:	00090008 	.word	0x00090008
 8010410:	00090004 	.word	0x00090004
 8010414:	000e000c 	.word	0x000e000c
 8010418:	000e0010 	.word	0x000e0010
 801041c:	000c5a0a 	.word	0x000c5a0a
 8010420:	1c010034 	.word	0x1c010034
 8010424:	00030018 	.word	0x00030018
 8010428:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801042a:	f883 900f 	strb.w	r9, [r3, #15]
 801042e:	792b      	ldrb	r3, [r5, #4]
 8010430:	3b09      	subs	r3, #9
 8010432:	b2db      	uxtb	r3, r3
 8010434:	2b0f      	cmp	r3, #15
 8010436:	d8bb      	bhi.n	80103b0 <ull_configure+0x38c>
 8010438:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801043a:	7a1b      	ldrb	r3, [r3, #8]
 801043c:	2b01      	cmp	r3, #1
 801043e:	d0a7      	beq.n	8010390 <ull_configure+0x36c>
 8010440:	4649      	mov	r1, r9
 8010442:	4620      	mov	r0, r4
 8010444:	f7fe fb9c 	bl	800eb80 <ull_configmrxlut>
 8010448:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801044a:	8a13      	ldrh	r3, [r2, #16]
 801044c:	f023 0308 	bic.w	r3, r3, #8
 8010450:	8213      	strh	r3, [r2, #16]
 8010452:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8010456:	9300      	str	r3, [sp, #0]
 8010458:	f248 13ff 	movw	r3, #33279	; 0x81ff
 801045c:	2200      	movs	r2, #0
 801045e:	4914      	ldr	r1, [pc, #80]	; (80104b0 <ull_configure+0x48c>)
 8010460:	4620      	mov	r0, r4
 8010462:	f7ff fcc7 	bl	800fdf4 <dwt_modify16bitoffsetreg>
 8010466:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 801046a:	bfcc      	ite	gt
 801046c:	f04f 5300 	movgt.w	r3, #536870912	; 0x20000000
 8010470:	f04f 53a0 	movle.w	r3, #335544320	; 0x14000000
 8010474:	9300      	str	r3, [sp, #0]
 8010476:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801047a:	2200      	movs	r2, #0
 801047c:	490d      	ldr	r1, [pc, #52]	; (80104b4 <ull_configure+0x490>)
 801047e:	4620      	mov	r0, r4
 8010480:	f7fe ffb8 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 8010484:	2301      	movs	r3, #1
 8010486:	9300      	str	r3, [sp, #0]
 8010488:	23ff      	movs	r3, #255	; 0xff
 801048a:	2202      	movs	r2, #2
 801048c:	490a      	ldr	r1, [pc, #40]	; (80104b8 <ull_configure+0x494>)
 801048e:	4620      	mov	r0, r4
 8010490:	f7ff f920 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 8010494:	2200      	movs	r2, #0
 8010496:	4909      	ldr	r1, [pc, #36]	; (80104bc <ull_configure+0x498>)
 8010498:	4620      	mov	r0, r4
 801049a:	f7fd fdc6 	bl	800e02a <dwt_read32bitoffsetreg>
 801049e:	2800      	cmp	r0, #0
 80104a0:	d08e      	beq.n	80103c0 <ull_configure+0x39c>
 80104a2:	4620      	mov	r0, r4
 80104a4:	f7ff f98a 	bl	800f7bc <ull_adcoffsetscalibration>
 80104a8:	b003      	add	sp, #12
 80104aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104ae:	bf00      	nop
 80104b0:	00030018 	.word	0x00030018
 80104b4:	00060010 	.word	0x00060010
 80104b8:	0004000c 	.word	0x0004000c
 80104bc:	00040014 	.word	0x00040014

080104c0 <ull_initialise>:
 80104c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104c4:	b082      	sub	sp, #8
 80104c6:	4605      	mov	r5, r0
 80104c8:	460e      	mov	r6, r1
 80104ca:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d05b      	beq.n	8010588 <ull_initialise+0xc8>
 80104d0:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 80104d2:	2300      	movs	r3, #0
 80104d4:	73a3      	strb	r3, [r4, #14]
 80104d6:	2202      	movs	r2, #2
 80104d8:	8222      	strh	r2, [r4, #16]
 80104da:	7523      	strb	r3, [r4, #20]
 80104dc:	7563      	strb	r3, [r4, #21]
 80104de:	73e3      	strb	r3, [r4, #15]
 80104e0:	7263      	strb	r3, [r4, #9]
 80104e2:	72a3      	strb	r3, [r4, #10]
 80104e4:	2104      	movs	r1, #4
 80104e6:	4628      	mov	r0, r5
 80104e8:	f7fe fa5c 	bl	800e9a4 <_dwt_otpread>
 80104ec:	4607      	mov	r7, r0
 80104ee:	2105      	movs	r1, #5
 80104f0:	4628      	mov	r0, r5
 80104f2:	f7fe fa57 	bl	800e9a4 <_dwt_otpread>
 80104f6:	4680      	mov	r8, r0
 80104f8:	210a      	movs	r1, #10
 80104fa:	4628      	mov	r0, r5
 80104fc:	f7fe fa52 	bl	800e9a4 <_dwt_otpread>
 8010500:	b12f      	cbz	r7, 801050e <ull_initialise+0x4e>
 8010502:	f1b8 0f00 	cmp.w	r8, #0
 8010506:	d002      	beq.n	801050e <ull_initialise+0x4e>
 8010508:	b280      	uxth	r0, r0
 801050a:	2800      	cmp	r0, #0
 801050c:	d141      	bne.n	8010592 <ull_initialise+0xd2>
 801050e:	2120      	movs	r1, #32
 8010510:	4628      	mov	r0, r5
 8010512:	f7fe fa47 	bl	800e9a4 <_dwt_otpread>
 8010516:	f5b0 7f10 	cmp.w	r0, #576	; 0x240
 801051a:	bf0c      	ite	eq
 801051c:	2301      	moveq	r3, #1
 801051e:	2300      	movne	r3, #0
 8010520:	7223      	strb	r3, [r4, #8]
 8010522:	f016 0f10 	tst.w	r6, #16
 8010526:	d143      	bne.n	80105b0 <ull_initialise+0xf0>
 8010528:	f016 0f20 	tst.w	r6, #32
 801052c:	d146      	bne.n	80105bc <ull_initialise+0xfc>
 801052e:	f016 0f40 	tst.w	r6, #64	; 0x40
 8010532:	d149      	bne.n	80105c8 <ull_initialise+0x108>
 8010534:	f016 0f80 	tst.w	r6, #128	; 0x80
 8010538:	d14d      	bne.n	80105d6 <ull_initialise+0x116>
 801053a:	7aa3      	ldrb	r3, [r4, #10]
 801053c:	b90b      	cbnz	r3, 8010542 <ull_initialise+0x82>
 801053e:	2385      	movs	r3, #133	; 0x85
 8010540:	72a3      	strb	r3, [r4, #10]
 8010542:	7a63      	ldrb	r3, [r4, #9]
 8010544:	b90b      	cbnz	r3, 801054a <ull_initialise+0x8a>
 8010546:	2374      	movs	r3, #116	; 0x74
 8010548:	7263      	strb	r3, [r4, #9]
 801054a:	211f      	movs	r1, #31
 801054c:	4628      	mov	r0, r5
 801054e:	f7fe fa29 	bl	800e9a4 <_dwt_otpread>
 8010552:	7320      	strb	r0, [r4, #12]
 8010554:	211e      	movs	r1, #30
 8010556:	4628      	mov	r0, r5
 8010558:	f7fe fa24 	bl	800e9a4 <_dwt_otpread>
 801055c:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
 8010560:	bf12      	itee	ne
 8010562:	7360      	strbne	r0, [r4, #13]
 8010564:	232e      	moveq	r3, #46	; 0x2e
 8010566:	7363      	strbeq	r3, [r4, #13]
 8010568:	7b63      	ldrb	r3, [r4, #13]
 801056a:	2200      	movs	r2, #0
 801056c:	4920      	ldr	r1, [pc, #128]	; (80105f0 <ull_initialise+0x130>)
 801056e:	4628      	mov	r0, r5
 8010570:	f7fe fc1e 	bl	800edb0 <dwt_write8bitoffsetreg>
 8010574:	2135      	movs	r1, #53	; 0x35
 8010576:	4628      	mov	r0, r5
 8010578:	f7fe fa14 	bl	800e9a4 <_dwt_otpread>
 801057c:	4603      	mov	r3, r0
 801057e:	bb80      	cbnz	r0, 80105e2 <ull_initialise+0x122>
 8010580:	2000      	movs	r0, #0
 8010582:	b002      	add	sp, #8
 8010584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010588:	2028      	movs	r0, #40	; 0x28
 801058a:	f003 fb81 	bl	8013c90 <malloc>
 801058e:	6528      	str	r0, [r5, #80]	; 0x50
 8010590:	e79e      	b.n	80104d0 <ull_initialise+0x10>
 8010592:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8010596:	9300      	str	r3, [sp, #0]
 8010598:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801059c:	2200      	movs	r2, #0
 801059e:	4915      	ldr	r1, [pc, #84]	; (80105f4 <ull_initialise+0x134>)
 80105a0:	4628      	mov	r0, r5
 80105a2:	f7ff fc27 	bl	800fdf4 <dwt_modify16bitoffsetreg>
 80105a6:	8a23      	ldrh	r3, [r4, #16]
 80105a8:	f043 0314 	orr.w	r3, r3, #20
 80105ac:	8223      	strh	r3, [r4, #16]
 80105ae:	e7ae      	b.n	801050e <ull_initialise+0x4e>
 80105b0:	2106      	movs	r1, #6
 80105b2:	4628      	mov	r0, r5
 80105b4:	f7fe f9f6 	bl	800e9a4 <_dwt_otpread>
 80105b8:	6020      	str	r0, [r4, #0]
 80105ba:	e7b5      	b.n	8010528 <ull_initialise+0x68>
 80105bc:	2107      	movs	r1, #7
 80105be:	4628      	mov	r0, r5
 80105c0:	f7fe f9f0 	bl	800e9a4 <_dwt_otpread>
 80105c4:	6060      	str	r0, [r4, #4]
 80105c6:	e7b2      	b.n	801052e <ull_initialise+0x6e>
 80105c8:	2108      	movs	r1, #8
 80105ca:	4628      	mov	r0, r5
 80105cc:	f7fe f9ea 	bl	800e9a4 <_dwt_otpread>
 80105d0:	0c00      	lsrs	r0, r0, #16
 80105d2:	7260      	strb	r0, [r4, #9]
 80105d4:	e7ae      	b.n	8010534 <ull_initialise+0x74>
 80105d6:	2109      	movs	r1, #9
 80105d8:	4628      	mov	r0, r5
 80105da:	f7fe f9e3 	bl	800e9a4 <_dwt_otpread>
 80105de:	72a0      	strb	r0, [r4, #10]
 80105e0:	e7ab      	b.n	801053a <ull_initialise+0x7a>
 80105e2:	2200      	movs	r2, #0
 80105e4:	4904      	ldr	r1, [pc, #16]	; (80105f8 <ull_initialise+0x138>)
 80105e6:	4628      	mov	r0, r5
 80105e8:	f7fe f9fe 	bl	800e9e8 <dwt_write32bitoffsetreg>
 80105ec:	e7c8      	b.n	8010580 <ull_initialise+0xc0>
 80105ee:	bf00      	nop
 80105f0:	00090014 	.word	0x00090014
 80105f4:	000b0008 	.word	0x000b0008
 80105f8:	00090004 	.word	0x00090004

080105fc <ull_rxenable>:
 80105fc:	b530      	push	{r4, r5, lr}
 80105fe:	b083      	sub	sp, #12
 8010600:	4605      	mov	r5, r0
 8010602:	460c      	mov	r4, r1
 8010604:	b171      	cbz	r1, 8010624 <ull_rxenable+0x28>
 8010606:	f021 0302 	bic.w	r3, r1, #2
 801060a:	3b01      	subs	r3, #1
 801060c:	2b0f      	cmp	r3, #15
 801060e:	d862      	bhi.n	80106d6 <ull_rxenable+0xda>
 8010610:	e8df f003 	tbb	[pc, r3]
 8010614:	24616111 	.word	0x24616111
 8010618:	2d616161 	.word	0x2d616161
 801061c:	61616161 	.word	0x61616161
 8010620:	3a616161 	.word	0x3a616161
 8010624:	2102      	movs	r1, #2
 8010626:	9101      	str	r1, [sp, #4]
 8010628:	2200      	movs	r2, #0
 801062a:	9200      	str	r2, [sp, #0]
 801062c:	4613      	mov	r3, r2
 801062e:	f7fd fc74 	bl	800df1a <dwt_xfer3xxx>
 8010632:	4620      	mov	r0, r4
 8010634:	e010      	b.n	8010658 <ull_rxenable+0x5c>
 8010636:	2302      	movs	r3, #2
 8010638:	9301      	str	r3, [sp, #4]
 801063a:	2200      	movs	r2, #0
 801063c:	9200      	str	r2, [sp, #0]
 801063e:	4613      	mov	r3, r2
 8010640:	2104      	movs	r1, #4
 8010642:	f7fd fc6a 	bl	800df1a <dwt_xfer3xxx>
 8010646:	2203      	movs	r2, #3
 8010648:	2144      	movs	r1, #68	; 0x44
 801064a:	4628      	mov	r0, r5
 801064c:	f7fd fd42 	bl	800e0d4 <dwt_read8bitoffsetreg>
 8010650:	f010 0f08 	tst.w	r0, #8
 8010654:	d125      	bne.n	80106a2 <ull_rxenable+0xa6>
 8010656:	2000      	movs	r0, #0
 8010658:	b003      	add	sp, #12
 801065a:	bd30      	pop	{r4, r5, pc}
 801065c:	2302      	movs	r3, #2
 801065e:	9301      	str	r3, [sp, #4]
 8010660:	2200      	movs	r2, #0
 8010662:	9200      	str	r2, [sp, #0]
 8010664:	4613      	mov	r3, r2
 8010666:	210a      	movs	r1, #10
 8010668:	f7fd fc57 	bl	800df1a <dwt_xfer3xxx>
 801066c:	e7eb      	b.n	8010646 <ull_rxenable+0x4a>
 801066e:	2100      	movs	r1, #0
 8010670:	f7fe f9cf 	bl	800ea12 <_dwt_adjust_delaytime>
 8010674:	2302      	movs	r3, #2
 8010676:	9301      	str	r3, [sp, #4]
 8010678:	2200      	movs	r2, #0
 801067a:	9200      	str	r2, [sp, #0]
 801067c:	4613      	mov	r3, r2
 801067e:	2108      	movs	r1, #8
 8010680:	4628      	mov	r0, r5
 8010682:	f7fd fc4a 	bl	800df1a <dwt_xfer3xxx>
 8010686:	e7de      	b.n	8010646 <ull_rxenable+0x4a>
 8010688:	2101      	movs	r1, #1
 801068a:	f7fe f9c2 	bl	800ea12 <_dwt_adjust_delaytime>
 801068e:	2302      	movs	r3, #2
 8010690:	9301      	str	r3, [sp, #4]
 8010692:	2200      	movs	r2, #0
 8010694:	9200      	str	r2, [sp, #0]
 8010696:	4613      	mov	r3, r2
 8010698:	2106      	movs	r1, #6
 801069a:	4628      	mov	r0, r5
 801069c:	f7fd fc3d 	bl	800df1a <dwt_xfer3xxx>
 80106a0:	e7d1      	b.n	8010646 <ull_rxenable+0x4a>
 80106a2:	2302      	movs	r3, #2
 80106a4:	9301      	str	r3, [sp, #4]
 80106a6:	2100      	movs	r1, #0
 80106a8:	9100      	str	r1, [sp, #0]
 80106aa:	460b      	mov	r3, r1
 80106ac:	460a      	mov	r2, r1
 80106ae:	4628      	mov	r0, r5
 80106b0:	f7fd fc33 	bl	800df1a <dwt_xfer3xxx>
 80106b4:	f014 0f02 	tst.w	r4, #2
 80106b8:	d002      	beq.n	80106c0 <ull_rxenable+0xc4>
 80106ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80106be:	e7cb      	b.n	8010658 <ull_rxenable+0x5c>
 80106c0:	2102      	movs	r1, #2
 80106c2:	9101      	str	r1, [sp, #4]
 80106c4:	2200      	movs	r2, #0
 80106c6:	9200      	str	r2, [sp, #0]
 80106c8:	4613      	mov	r3, r2
 80106ca:	4628      	mov	r0, r5
 80106cc:	f7fd fc25 	bl	800df1a <dwt_xfer3xxx>
 80106d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80106d4:	e7c0      	b.n	8010658 <ull_rxenable+0x5c>
 80106d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80106da:	e7bd      	b.n	8010658 <ull_rxenable+0x5c>

080106dc <ull_softreset_no_sema_fcmd>:
 80106dc:	b570      	push	{r4, r5, r6, lr}
 80106de:	b082      	sub	sp, #8
 80106e0:	4606      	mov	r6, r0
 80106e2:	2502      	movs	r5, #2
 80106e4:	9501      	str	r5, [sp, #4]
 80106e6:	2400      	movs	r4, #0
 80106e8:	9400      	str	r4, [sp, #0]
 80106ea:	4623      	mov	r3, r4
 80106ec:	4622      	mov	r2, r4
 80106ee:	2119      	movs	r1, #25
 80106f0:	f7fd fc13 	bl	800df1a <dwt_xfer3xxx>
 80106f4:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80106f6:	739c      	strb	r4, [r3, #14]
 80106f8:	821d      	strh	r5, [r3, #16]
 80106fa:	751c      	strb	r4, [r3, #20]
 80106fc:	755c      	strb	r4, [r3, #21]
 80106fe:	73dc      	strb	r4, [r3, #15]
 8010700:	b002      	add	sp, #8
 8010702:	bd70      	pop	{r4, r5, r6, pc}

08010704 <ull_softreset_fcmd>:
 8010704:	b570      	push	{r4, r5, r6, lr}
 8010706:	b082      	sub	sp, #8
 8010708:	4606      	mov	r6, r0
 801070a:	2502      	movs	r5, #2
 801070c:	9501      	str	r5, [sp, #4]
 801070e:	2400      	movs	r4, #0
 8010710:	9400      	str	r4, [sp, #0]
 8010712:	4623      	mov	r3, r4
 8010714:	4622      	mov	r2, r4
 8010716:	2118      	movs	r1, #24
 8010718:	f7fd fbff 	bl	800df1a <dwt_xfer3xxx>
 801071c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801071e:	739c      	strb	r4, [r3, #14]
 8010720:	821d      	strh	r5, [r3, #16]
 8010722:	751c      	strb	r4, [r3, #20]
 8010724:	755c      	strb	r4, [r3, #21]
 8010726:	73dc      	strb	r4, [r3, #15]
 8010728:	b002      	add	sp, #8
 801072a:	bd70      	pop	{r4, r5, r6, pc}

0801072c <dwt_ioctl>:
 801072c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010730:	b08d      	sub	sp, #52	; 0x34
 8010732:	4606      	mov	r6, r0
 8010734:	4615      	mov	r5, r2
 8010736:	461c      	mov	r4, r3
 8010738:	299c      	cmp	r1, #156	; 0x9c
 801073a:	f200 809f 	bhi.w	801087c <dwt_ioctl+0x150>
 801073e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8010742:	09b9      	.short	0x09b9
 8010744:	00a109c4 	.word	0x00a109c4
 8010748:	00c100a6 	.word	0x00c100a6
 801074c:	019d0151 	.word	0x019d0151
 8010750:	015c0176 	.word	0x015c0176
 8010754:	01b301ae 	.word	0x01b301ae
 8010758:	01c501bc 	.word	0x01c501bc
 801075c:	01d701ce 	.word	0x01d701ce
 8010760:	01e501e0 	.word	0x01e501e0
 8010764:	027201ee 	.word	0x027201ee
 8010768:	027e0278 	.word	0x027e0278
 801076c:	028f0289 	.word	0x028f0289
 8010770:	029a0295 	.word	0x029a0295
 8010774:	02a502a0 	.word	0x02a502a0
 8010778:	02b702ae 	.word	0x02b702ae
 801077c:	02c902c0 	.word	0x02c902c0
 8010780:	02f90304 	.word	0x02f90304
 8010784:	02d202ee 	.word	0x02d202ee
 8010788:	031e02e0 	.word	0x031e02e0
 801078c:	021a01f8 	.word	0x021a01f8
 8010790:	02420239 	.word	0x02420239
 8010794:	08ba0258 	.word	0x08ba0258
 8010798:	031508bf 	.word	0x031508bf
 801079c:	032c0327 	.word	0x032c0327
 80107a0:	033c0336 	.word	0x033c0336
 80107a4:	03520347 	.word	0x03520347
 80107a8:	0386035b 	.word	0x0386035b
 80107ac:	03a9039d 	.word	0x03a9039d
 80107b0:	03b5030a 	.word	0x03b5030a
 80107b4:	03d203bf 	.word	0x03d203bf
 80107b8:	040b03f9 	.word	0x040b03f9
 80107bc:	0457044d 	.word	0x0457044d
 80107c0:	048c047d 	.word	0x048c047d
 80107c4:	049504a7 	.word	0x049504a7
 80107c8:	04f704b1 	.word	0x04f704b1
 80107cc:	052f050f 	.word	0x052f050f
 80107d0:	05580544 	.word	0x05580544
 80107d4:	057d0561 	.word	0x057d0561
 80107d8:	0692056a 	.word	0x0692056a
 80107dc:	071106c1 	.word	0x071106c1
 80107e0:	07220717 	.word	0x07220717
 80107e4:	075b073b 	.word	0x075b073b
 80107e8:	078f0765 	.word	0x078f0765
 80107ec:	07c607bd 	.word	0x07c607bd
 80107f0:	07d507cc 	.word	0x07d507cc
 80107f4:	07ef07e2 	.word	0x07ef07e2
 80107f8:	080207f9 	.word	0x080207f9
 80107fc:	0816080b 	.word	0x0816080b
 8010800:	08270821 	.word	0x08270821
 8010804:	0855084a 	.word	0x0855084a
 8010808:	086b0860 	.word	0x086b0860
 801080c:	0898088d 	.word	0x0898088d
 8010810:	08c508b1 	.word	0x08c508b1
 8010814:	0959094f 	.word	0x0959094f
 8010818:	09cc0964 	.word	0x09cc0964
 801081c:	09ae096e 	.word	0x09ae096e
 8010820:	090306b3 	.word	0x090306b3
 8010824:	0a3a0924 	.word	0x0a3a0924
 8010828:	09d90a2f 	.word	0x09d90a2f
 801082c:	09ef09e4 	.word	0x09ef09e4
 8010830:	0a0509fa 	.word	0x0a0509fa
 8010834:	0a1b0a10 	.word	0x0a1b0a10
 8010838:	0c320a24 	.word	0x0c320a24
 801083c:	0ca30c69 	.word	0x0ca30c69
 8010840:	0e2d0cc5 	.word	0x0e2d0cc5
 8010844:	0a4a0e41 	.word	0x0a4a0e41
 8010848:	0b890b57 	.word	0x0b890b57
 801084c:	0b970b93 	.word	0x0b970b93
 8010850:	0ba50b9b 	.word	0x0ba50b9b
 8010854:	0bc10bb7 	.word	0x0bc10bb7
 8010858:	0be80bd4 	.word	0x0be80bd4
 801085c:	0cdb0c22 	.word	0x0cdb0c22
 8010860:	0cfd0ce5 	.word	0x0cfd0ce5
 8010864:	0d2d0d18 	.word	0x0d2d0d18
 8010868:	0d890d4d 	.word	0x0d890d4d
 801086c:	0db70da1 	.word	0x0db70da1
 8010870:	0efc0dc7 	.word	0x0efc0dc7
 8010874:	0dec0df6 	.word	0x0dec0df6
 8010878:	0e000e08 	.word	0x0e000e08
 801087c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8010880:	f001 be5c 	b.w	801253c <dwt_ioctl+0x1e10>
 8010884:	f7fd fb28 	bl	800ded8 <ull_wakeup_ic>
 8010888:	2500      	movs	r5, #0
 801088a:	f001 be57 	b.w	801253c <dwt_ioctl+0x1e10>
 801088e:	2202      	movs	r2, #2
 8010890:	49c0      	ldr	r1, [pc, #768]	; (8010b94 <dwt_ioctl+0x468>)
 8010892:	f7fd fc1f 	bl	800e0d4 <dwt_read8bitoffsetreg>
 8010896:	2803      	cmp	r0, #3
 8010898:	d802      	bhi.n	80108a0 <dwt_ioctl+0x174>
 801089a:	2500      	movs	r5, #0
 801089c:	f001 be4e 	b.w	801253c <dwt_ioctl+0x1e10>
 80108a0:	f7f0 fe2e 	bl	8001500 <decamutexon>
 80108a4:	4604      	mov	r4, r0
 80108a6:	2302      	movs	r3, #2
 80108a8:	9301      	str	r3, [sp, #4]
 80108aa:	2500      	movs	r5, #0
 80108ac:	9500      	str	r5, [sp, #0]
 80108ae:	462b      	mov	r3, r5
 80108b0:	462a      	mov	r2, r5
 80108b2:	4629      	mov	r1, r5
 80108b4:	4630      	mov	r0, r6
 80108b6:	f7fd fb30 	bl	800df1a <dwt_xfer3xxx>
 80108ba:	4620      	mov	r0, r4
 80108bc:	f7f0 fe31 	bl	8001522 <decamutexoff>
 80108c0:	f001 be3c 	b.w	801253c <dwt_ioctl+0x1e10>
 80108c4:	2c00      	cmp	r4, #0
 80108c6:	f001 863d 	beq.w	8012544 <dwt_ioctl+0x1e18>
 80108ca:	7824      	ldrb	r4, [r4, #0]
 80108cc:	f014 0f1d 	tst.w	r4, #29
 80108d0:	d063      	beq.n	801099a <dwt_ioctl+0x26e>
 80108d2:	f014 0f01 	tst.w	r4, #1
 80108d6:	d025      	beq.n	8010924 <dwt_ioctl+0x1f8>
 80108d8:	f014 0f02 	tst.w	r4, #2
 80108dc:	f04f 0302 	mov.w	r3, #2
 80108e0:	9301      	str	r3, [sp, #4]
 80108e2:	f04f 0200 	mov.w	r2, #0
 80108e6:	9200      	str	r2, [sp, #0]
 80108e8:	4613      	mov	r3, r2
 80108ea:	bf14      	ite	ne
 80108ec:	210d      	movne	r1, #13
 80108ee:	2103      	moveq	r1, #3
 80108f0:	f7fd fb13 	bl	800df1a <dwt_xfer3xxx>
 80108f4:	2203      	movs	r2, #3
 80108f6:	2144      	movs	r1, #68	; 0x44
 80108f8:	4630      	mov	r0, r6
 80108fa:	f7fd fbeb 	bl	800e0d4 <dwt_read8bitoffsetreg>
 80108fe:	f010 0f08 	tst.w	r0, #8
 8010902:	bf08      	it	eq
 8010904:	2500      	moveq	r5, #0
 8010906:	f001 8619 	beq.w	801253c <dwt_ioctl+0x1e10>
 801090a:	2302      	movs	r3, #2
 801090c:	9301      	str	r3, [sp, #4]
 801090e:	2100      	movs	r1, #0
 8010910:	9100      	str	r1, [sp, #0]
 8010912:	460b      	mov	r3, r1
 8010914:	460a      	mov	r2, r1
 8010916:	4630      	mov	r0, r6
 8010918:	f7fd faff 	bl	800df1a <dwt_xfer3xxx>
 801091c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8010920:	f001 be0c 	b.w	801253c <dwt_ioctl+0x1e10>
 8010924:	f014 0f08 	tst.w	r4, #8
 8010928:	d111      	bne.n	801094e <dwt_ioctl+0x222>
 801092a:	f014 0f10 	tst.w	r4, #16
 801092e:	d121      	bne.n	8010974 <dwt_ioctl+0x248>
 8010930:	f014 0f02 	tst.w	r4, #2
 8010934:	f04f 0302 	mov.w	r3, #2
 8010938:	9301      	str	r3, [sp, #4]
 801093a:	f04f 0200 	mov.w	r2, #0
 801093e:	9200      	str	r2, [sp, #0]
 8010940:	4613      	mov	r3, r2
 8010942:	bf14      	ite	ne
 8010944:	2110      	movne	r1, #16
 8010946:	2109      	moveq	r1, #9
 8010948:	f7fd fae7 	bl	800df1a <dwt_xfer3xxx>
 801094c:	e7d2      	b.n	80108f4 <dwt_ioctl+0x1c8>
 801094e:	2100      	movs	r1, #0
 8010950:	f7fe f85f 	bl	800ea12 <_dwt_adjust_delaytime>
 8010954:	f014 0f02 	tst.w	r4, #2
 8010958:	f04f 0302 	mov.w	r3, #2
 801095c:	9301      	str	r3, [sp, #4]
 801095e:	f04f 0200 	mov.w	r2, #0
 8010962:	9200      	str	r2, [sp, #0]
 8010964:	4613      	mov	r3, r2
 8010966:	bf14      	ite	ne
 8010968:	210f      	movne	r1, #15
 801096a:	2107      	moveq	r1, #7
 801096c:	4630      	mov	r0, r6
 801096e:	f7fd fad4 	bl	800df1a <dwt_xfer3xxx>
 8010972:	e7bf      	b.n	80108f4 <dwt_ioctl+0x1c8>
 8010974:	2101      	movs	r1, #1
 8010976:	f7fe f84c 	bl	800ea12 <_dwt_adjust_delaytime>
 801097a:	f014 0f02 	tst.w	r4, #2
 801097e:	f04f 0302 	mov.w	r3, #2
 8010982:	9301      	str	r3, [sp, #4]
 8010984:	f04f 0200 	mov.w	r2, #0
 8010988:	9200      	str	r2, [sp, #0]
 801098a:	4613      	mov	r3, r2
 801098c:	bf14      	ite	ne
 801098e:	210e      	movne	r1, #14
 8010990:	2105      	moveq	r1, #5
 8010992:	4630      	mov	r0, r6
 8010994:	f7fd fac1 	bl	800df1a <dwt_xfer3xxx>
 8010998:	e7ac      	b.n	80108f4 <dwt_ioctl+0x1c8>
 801099a:	f014 0f20 	tst.w	r4, #32
 801099e:	d010      	beq.n	80109c2 <dwt_ioctl+0x296>
 80109a0:	f014 0f02 	tst.w	r4, #2
 80109a4:	f04f 0302 	mov.w	r3, #2
 80109a8:	9301      	str	r3, [sp, #4]
 80109aa:	f04f 0500 	mov.w	r5, #0
 80109ae:	9500      	str	r5, [sp, #0]
 80109b0:	462b      	mov	r3, r5
 80109b2:	462a      	mov	r2, r5
 80109b4:	bf14      	ite	ne
 80109b6:	2111      	movne	r1, #17
 80109b8:	210b      	moveq	r1, #11
 80109ba:	f7fd faae 	bl	800df1a <dwt_xfer3xxx>
 80109be:	f001 bdbd 	b.w	801253c <dwt_ioctl+0x1e10>
 80109c2:	f014 0f02 	tst.w	r4, #2
 80109c6:	f04f 0302 	mov.w	r3, #2
 80109ca:	9301      	str	r3, [sp, #4]
 80109cc:	f04f 0500 	mov.w	r5, #0
 80109d0:	9500      	str	r5, [sp, #0]
 80109d2:	462b      	mov	r3, r5
 80109d4:	462a      	mov	r2, r5
 80109d6:	bf14      	ite	ne
 80109d8:	210c      	movne	r1, #12
 80109da:	2101      	moveq	r1, #1
 80109dc:	f7fd fa9d 	bl	800df1a <dwt_xfer3xxx>
 80109e0:	f001 bdac 	b.w	801253c <dwt_ioctl+0x1e10>
 80109e4:	2c00      	cmp	r4, #0
 80109e6:	f001 85af 	beq.w	8012548 <dwt_ioctl+0x1e1c>
 80109ea:	6823      	ldr	r3, [r4, #0]
 80109ec:	2200      	movs	r2, #0
 80109ee:	2128      	movs	r1, #40	; 0x28
 80109f0:	f7fd fffa 	bl	800e9e8 <dwt_write32bitoffsetreg>
 80109f4:	2500      	movs	r5, #0
 80109f6:	f001 bda1 	b.w	801253c <dwt_ioctl+0x1e10>
 80109fa:	6823      	ldr	r3, [r4, #0]
 80109fc:	2200      	movs	r2, #0
 80109fe:	4966      	ldr	r1, [pc, #408]	; (8010b98 <dwt_ioctl+0x46c>)
 8010a00:	f7fd fff2 	bl	800e9e8 <dwt_write32bitoffsetreg>
 8010a04:	6863      	ldr	r3, [r4, #4]
 8010a06:	2200      	movs	r2, #0
 8010a08:	4964      	ldr	r1, [pc, #400]	; (8010b9c <dwt_ioctl+0x470>)
 8010a0a:	4630      	mov	r0, r6
 8010a0c:	f7fd ffec 	bl	800e9e8 <dwt_write32bitoffsetreg>
 8010a10:	68a3      	ldr	r3, [r4, #8]
 8010a12:	2200      	movs	r2, #0
 8010a14:	4962      	ldr	r1, [pc, #392]	; (8010ba0 <dwt_ioctl+0x474>)
 8010a16:	4630      	mov	r0, r6
 8010a18:	f7fd ffe6 	bl	800e9e8 <dwt_write32bitoffsetreg>
 8010a1c:	68e3      	ldr	r3, [r4, #12]
 8010a1e:	2200      	movs	r2, #0
 8010a20:	4960      	ldr	r1, [pc, #384]	; (8010ba4 <dwt_ioctl+0x478>)
 8010a22:	4630      	mov	r0, r6
 8010a24:	f7fd ffe0 	bl	800e9e8 <dwt_write32bitoffsetreg>
 8010a28:	2500      	movs	r5, #0
 8010a2a:	f001 bd87 	b.w	801253c <dwt_ioctl+0x1e10>
 8010a2e:	2c00      	cmp	r4, #0
 8010a30:	f001 858c 	beq.w	801254c <dwt_ioctl+0x1e20>
 8010a34:	8823      	ldrh	r3, [r4, #0]
 8010a36:	6865      	ldr	r5, [r4, #4]
 8010a38:	2d03      	cmp	r5, #3
 8010a3a:	f201 8589 	bhi.w	8012550 <dwt_ioctl+0x1e24>
 8010a3e:	e8df f005 	tbb	[pc, r5]
 8010a42:	0802      	.short	0x0802
 8010a44:	160f      	.short	0x160f
 8010a46:	2200      	movs	r2, #0
 8010a48:	4957      	ldr	r1, [pc, #348]	; (8010ba8 <dwt_ioctl+0x47c>)
 8010a4a:	f7fd ff62 	bl	800e912 <dwt_write16bitoffsetreg>
 8010a4e:	f001 bd75 	b.w	801253c <dwt_ioctl+0x1e10>
 8010a52:	2202      	movs	r2, #2
 8010a54:	4954      	ldr	r1, [pc, #336]	; (8010ba8 <dwt_ioctl+0x47c>)
 8010a56:	f7fd ff5c 	bl	800e912 <dwt_write16bitoffsetreg>
 8010a5a:	2500      	movs	r5, #0
 8010a5c:	f001 bd6e 	b.w	801253c <dwt_ioctl+0x1e10>
 8010a60:	2200      	movs	r2, #0
 8010a62:	4952      	ldr	r1, [pc, #328]	; (8010bac <dwt_ioctl+0x480>)
 8010a64:	f7fd ff55 	bl	800e912 <dwt_write16bitoffsetreg>
 8010a68:	2500      	movs	r5, #0
 8010a6a:	f001 bd67 	b.w	801253c <dwt_ioctl+0x1e10>
 8010a6e:	2202      	movs	r2, #2
 8010a70:	494e      	ldr	r1, [pc, #312]	; (8010bac <dwt_ioctl+0x480>)
 8010a72:	f7fd ff4e 	bl	800e912 <dwt_write16bitoffsetreg>
 8010a76:	2500      	movs	r5, #0
 8010a78:	f001 bd60 	b.w	801253c <dwt_ioctl+0x1e10>
 8010a7c:	2c00      	cmp	r4, #0
 8010a7e:	f001 8569 	beq.w	8012554 <dwt_ioctl+0x1e28>
 8010a82:	7823      	ldrb	r3, [r4, #0]
 8010a84:	005b      	lsls	r3, r3, #1
 8010a86:	f003 0306 	and.w	r3, r3, #6
 8010a8a:	9300      	str	r3, [sp, #0]
 8010a8c:	f06f 0306 	mvn.w	r3, #6
 8010a90:	2200      	movs	r2, #0
 8010a92:	4947      	ldr	r1, [pc, #284]	; (8010bb0 <dwt_ioctl+0x484>)
 8010a94:	f7fe fcae 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 8010a98:	2500      	movs	r5, #0
 8010a9a:	f001 bd4f 	b.w	801253c <dwt_ioctl+0x1e10>
 8010a9e:	f7fe fccd 	bl	800f43c <ull_enablegpioclocks>
 8010aa2:	2500      	movs	r5, #0
 8010aa4:	f001 bd4a 	b.w	801253c <dwt_ioctl+0x1e10>
 8010aa8:	2c00      	cmp	r4, #0
 8010aaa:	f001 8555 	beq.w	8012558 <dwt_ioctl+0x1e2c>
 8010aae:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010ab0:	7b1b      	ldrb	r3, [r3, #12]
 8010ab2:	7023      	strb	r3, [r4, #0]
 8010ab4:	2500      	movs	r5, #0
 8010ab6:	f001 bd41 	b.w	801253c <dwt_ioctl+0x1e10>
 8010aba:	2c00      	cmp	r4, #0
 8010abc:	f001 854e 	beq.w	801255c <dwt_ioctl+0x1e30>
 8010ac0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010ac2:	7a5b      	ldrb	r3, [r3, #9]
 8010ac4:	7023      	strb	r3, [r4, #0]
 8010ac6:	2500      	movs	r5, #0
 8010ac8:	f001 bd38 	b.w	801253c <dwt_ioctl+0x1e10>
 8010acc:	2c00      	cmp	r4, #0
 8010ace:	f001 8547 	beq.w	8012560 <dwt_ioctl+0x1e34>
 8010ad2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010ad4:	7a9b      	ldrb	r3, [r3, #10]
 8010ad6:	7023      	strb	r3, [r4, #0]
 8010ad8:	2500      	movs	r5, #0
 8010ada:	f001 bd2f 	b.w	801253c <dwt_ioctl+0x1e10>
 8010ade:	2c00      	cmp	r4, #0
 8010ae0:	f001 8540 	beq.w	8012564 <dwt_ioctl+0x1e38>
 8010ae4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	6023      	str	r3, [r4, #0]
 8010aea:	2500      	movs	r5, #0
 8010aec:	f001 bd26 	b.w	801253c <dwt_ioctl+0x1e10>
 8010af0:	2c00      	cmp	r4, #0
 8010af2:	f001 8539 	beq.w	8012568 <dwt_ioctl+0x1e3c>
 8010af6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010af8:	685b      	ldr	r3, [r3, #4]
 8010afa:	6023      	str	r3, [r4, #0]
 8010afc:	2500      	movs	r5, #0
 8010afe:	f001 bd1d 	b.w	801253c <dwt_ioctl+0x1e10>
 8010b02:	f7fe fae1 	bl	800f0c8 <ull_signal_rx_buff_free>
 8010b06:	2500      	movs	r5, #0
 8010b08:	f001 bd18 	b.w	801253c <dwt_ioctl+0x1e10>
 8010b0c:	2c00      	cmp	r4, #0
 8010b0e:	f001 852d 	beq.w	801256c <dwt_ioctl+0x1e40>
 8010b12:	6821      	ldr	r1, [r4, #0]
 8010b14:	f7fd ffa3 	bl	800ea5e <ull_setrxaftertxdelay>
 8010b18:	2500      	movs	r5, #0
 8010b1a:	f001 bd0f 	b.w	801253c <dwt_ioctl+0x1e10>
 8010b1e:	2c00      	cmp	r4, #0
 8010b20:	f001 8526 	beq.w	8012570 <dwt_ioctl+0x1e44>
 8010b24:	6862      	ldr	r2, [r4, #4]
 8010b26:	7821      	ldrb	r1, [r4, #0]
 8010b28:	f7fe fde8 	bl	800f6fc <ull_enablespicrccheck>
 8010b2c:	2500      	movs	r5, #0
 8010b2e:	f001 bd05 	b.w	801253c <dwt_ioctl+0x1e10>
 8010b32:	2c00      	cmp	r4, #0
 8010b34:	f001 851e 	beq.w	8012574 <dwt_ioctl+0x1e48>
 8010b38:	6865      	ldr	r5, [r4, #4]
 8010b3a:	7823      	ldrb	r3, [r4, #0]
 8010b3c:	2203      	movs	r2, #3
 8010b3e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8010b42:	f7fe f935 	bl	800edb0 <dwt_write8bitoffsetreg>
 8010b46:	b94d      	cbnz	r5, 8010b5c <dwt_ioctl+0x430>
 8010b48:	2200      	movs	r2, #0
 8010b4a:	9200      	str	r2, [sp, #0]
 8010b4c:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8010b50:	2110      	movs	r1, #16
 8010b52:	4630      	mov	r0, r6
 8010b54:	f7ff f94e 	bl	800fdf4 <dwt_modify16bitoffsetreg>
 8010b58:	f001 bcf0 	b.w	801253c <dwt_ioctl+0x1e10>
 8010b5c:	f44f 2381 	mov.w	r3, #264192	; 0x40800
 8010b60:	9300      	str	r3, [sp, #0]
 8010b62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010b66:	2200      	movs	r2, #0
 8010b68:	2110      	movs	r1, #16
 8010b6a:	4630      	mov	r0, r6
 8010b6c:	f7fe fc42 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 8010b70:	2500      	movs	r5, #0
 8010b72:	f001 bce3 	b.w	801253c <dwt_ioctl+0x1e10>
 8010b76:	2200      	movs	r2, #0
 8010b78:	4611      	mov	r1, r2
 8010b7a:	f7fd fa56 	bl	800e02a <dwt_read32bitoffsetreg>
 8010b7e:	68b2      	ldr	r2, [r6, #8]
 8010b80:	6813      	ldr	r3, [r2, #0]
 8010b82:	4043      	eors	r3, r0
 8010b84:	6852      	ldr	r2, [r2, #4]
 8010b86:	4213      	tst	r3, r2
 8010b88:	bf14      	ite	ne
 8010b8a:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8010b8e:	2500      	moveq	r5, #0
 8010b90:	f001 bcd4 	b.w	801253c <dwt_ioctl+0x1e10>
 8010b94:	000f0030 	.word	0x000f0030
 8010b98:	00010054 	.word	0x00010054
 8010b9c:	00010058 	.word	0x00010058
 8010ba0:	0001005c 	.word	0x0001005c
 8010ba4:	00010060 	.word	0x00010060
 8010ba8:	0001000c 	.word	0x0001000c
 8010bac:	00010010 	.word	0x00010010
 8010bb0:	00010008 	.word	0x00010008
 8010bb4:	2c00      	cmp	r4, #0
 8010bb6:	f001 84df 	beq.w	8012578 <dwt_ioctl+0x1e4c>
 8010bba:	7821      	ldrb	r1, [r4, #0]
 8010bbc:	f7fe fdba 	bl	800f734 <ull_configciadiag>
 8010bc0:	2500      	movs	r5, #0
 8010bc2:	f001 bcbb 	b.w	801253c <dwt_ioctl+0x1e10>
 8010bc6:	b942      	cbnz	r2, 8010bda <dwt_ioctl+0x4ae>
 8010bc8:	2200      	movs	r2, #0
 8010bca:	9200      	str	r2, [sp, #0]
 8010bcc:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8010bd0:	49d2      	ldr	r1, [pc, #840]	; (8010f1c <dwt_ioctl+0x7f0>)
 8010bd2:	f7ff f90f 	bl	800fdf4 <dwt_modify16bitoffsetreg>
 8010bd6:	f001 bcb1 	b.w	801253c <dwt_ioctl+0x1e10>
 8010bda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010bde:	9300      	str	r3, [sp, #0]
 8010be0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010be4:	2200      	movs	r2, #0
 8010be6:	49cd      	ldr	r1, [pc, #820]	; (8010f1c <dwt_ioctl+0x7f0>)
 8010be8:	f7ff f904 	bl	800fdf4 <dwt_modify16bitoffsetreg>
 8010bec:	2500      	movs	r5, #0
 8010bee:	f001 bca5 	b.w	801253c <dwt_ioctl+0x1e10>
 8010bf2:	f002 0201 	and.w	r2, r2, #1
 8010bf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010bfa:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8010bfe:	2a00      	cmp	r2, #0
 8010c00:	bf08      	it	eq
 8010c02:	460b      	moveq	r3, r1
 8010c04:	02d2      	lsls	r2, r2, #11
 8010c06:	f015 0f02 	tst.w	r5, #2
 8010c0a:	bf12      	itee	ne
 8010c0c:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8010c10:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010c14:	b29b      	uxtheq	r3, r3
 8010c16:	9200      	str	r2, [sp, #0]
 8010c18:	2200      	movs	r2, #0
 8010c1a:	49c0      	ldr	r1, [pc, #768]	; (8010f1c <dwt_ioctl+0x7f0>)
 8010c1c:	f7ff f8ea 	bl	800fdf4 <dwt_modify16bitoffsetreg>
 8010c20:	2500      	movs	r5, #0
 8010c22:	f001 bc8b 	b.w	801253c <dwt_ioctl+0x1e10>
 8010c26:	4611      	mov	r1, r2
 8010c28:	f7fd ff2e 	bl	800ea88 <ull_setfinegraintxseq>
 8010c2c:	2500      	movs	r5, #0
 8010c2e:	f001 bc85 	b.w	801253c <dwt_ioctl+0x1e10>
 8010c32:	4611      	mov	r1, r2
 8010c34:	f7fd ff3c 	bl	800eab0 <ull_setlnapamode>
 8010c38:	2500      	movs	r5, #0
 8010c3a:	f001 bc7f 	b.w	801253c <dwt_ioctl+0x1e10>
 8010c3e:	2c00      	cmp	r4, #0
 8010c40:	f001 849c 	beq.w	801257c <dwt_ioctl+0x1e50>
 8010c44:	2200      	movs	r2, #0
 8010c46:	49b6      	ldr	r1, [pc, #728]	; (8010f20 <dwt_ioctl+0x7f4>)
 8010c48:	f7fd fa44 	bl	800e0d4 <dwt_read8bitoffsetreg>
 8010c4c:	7020      	strb	r0, [r4, #0]
 8010c4e:	2500      	movs	r5, #0
 8010c50:	f001 bc74 	b.w	801253c <dwt_ioctl+0x1e10>
 8010c54:	4621      	mov	r1, r4
 8010c56:	f7fd ff4b 	bl	800eaf0 <ull_configurestskey>
 8010c5a:	2500      	movs	r5, #0
 8010c5c:	f001 bc6e 	b.w	801253c <dwt_ioctl+0x1e10>
 8010c60:	4621      	mov	r1, r4
 8010c62:	f7fd ff69 	bl	800eb38 <ull_configurestsiv>
 8010c66:	2500      	movs	r5, #0
 8010c68:	f001 bc68 	b.w	801253c <dwt_ioctl+0x1e10>
 8010c6c:	f7fe fd98 	bl	800f7a0 <ull_configurestsloadiv>
 8010c70:	2500      	movs	r5, #0
 8010c72:	f001 bc63 	b.w	801253c <dwt_ioctl+0x1e10>
 8010c76:	4611      	mov	r1, r2
 8010c78:	f7fd ff82 	bl	800eb80 <ull_configmrxlut>
 8010c7c:	2500      	movs	r5, #0
 8010c7e:	f001 bc5d 	b.w	801253c <dwt_ioctl+0x1e10>
 8010c82:	f7fe feb3 	bl	800f9ec <ull_restoreconfig>
 8010c86:	2500      	movs	r5, #0
 8010c88:	f001 bc58 	b.w	801253c <dwt_ioctl+0x1e10>
 8010c8c:	2c00      	cmp	r4, #0
 8010c8e:	f001 8477 	beq.w	8012580 <dwt_ioctl+0x1e54>
 8010c92:	7821      	ldrb	r1, [r4, #0]
 8010c94:	f7ff f8c8 	bl	800fe28 <ull_configurestsmode>
 8010c98:	2500      	movs	r5, #0
 8010c9a:	f001 bc4f 	b.w	801253c <dwt_ioctl+0x1e10>
 8010c9e:	2c00      	cmp	r4, #0
 8010ca0:	f001 8470 	beq.w	8012584 <dwt_ioctl+0x1e58>
 8010ca4:	8821      	ldrh	r1, [r4, #0]
 8010ca6:	f7fd fe44 	bl	800e932 <ull_setrxantennadelay>
 8010caa:	2500      	movs	r5, #0
 8010cac:	f001 bc46 	b.w	801253c <dwt_ioctl+0x1e10>
 8010cb0:	2c00      	cmp	r4, #0
 8010cb2:	f001 8469 	beq.w	8012588 <dwt_ioctl+0x1e5c>
 8010cb6:	f7fd f9e0 	bl	800e07a <ull_getrxantennadelay>
 8010cba:	8020      	strh	r0, [r4, #0]
 8010cbc:	2500      	movs	r5, #0
 8010cbe:	f001 bc3d 	b.w	801253c <dwt_ioctl+0x1e10>
 8010cc2:	2c00      	cmp	r4, #0
 8010cc4:	f001 8462 	beq.w	801258c <dwt_ioctl+0x1e60>
 8010cc8:	8821      	ldrh	r1, [r4, #0]
 8010cca:	f7fd fe3a 	bl	800e942 <ull_settxantennadelay>
 8010cce:	2500      	movs	r5, #0
 8010cd0:	f001 bc34 	b.w	801253c <dwt_ioctl+0x1e10>
 8010cd4:	2c00      	cmp	r4, #0
 8010cd6:	f001 845b 	beq.w	8012590 <dwt_ioctl+0x1e64>
 8010cda:	f7fd f9d5 	bl	800e088 <ull_gettxantennadelay>
 8010cde:	8020      	strh	r0, [r4, #0]
 8010ce0:	2500      	movs	r5, #0
 8010ce2:	f001 bc2b 	b.w	801253c <dwt_ioctl+0x1e10>
 8010ce6:	2c00      	cmp	r4, #0
 8010ce8:	f001 8454 	beq.w	8012594 <dwt_ioctl+0x1e68>
 8010cec:	88a3      	ldrh	r3, [r4, #4]
 8010cee:	88e2      	ldrh	r2, [r4, #6]
 8010cf0:	6821      	ldr	r1, [r4, #0]
 8010cf2:	9100      	str	r1, [sp, #0]
 8010cf4:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 8010cf8:	f7fd fe00 	bl	800e8fc <dwt_writetodevice>
 8010cfc:	2500      	movs	r5, #0
 8010cfe:	f001 bc1d 	b.w	801253c <dwt_ioctl+0x1e10>
 8010d02:	2c00      	cmp	r4, #0
 8010d04:	f001 8448 	beq.w	8012598 <dwt_ioctl+0x1e6c>
 8010d08:	88a3      	ldrh	r3, [r4, #4]
 8010d0a:	88e2      	ldrh	r2, [r4, #6]
 8010d0c:	6821      	ldr	r1, [r4, #0]
 8010d0e:	9100      	str	r1, [sp, #0]
 8010d10:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 8010d14:	f7fd f97f 	bl	800e016 <dwt_readfromdevice>
 8010d18:	2500      	movs	r5, #0
 8010d1a:	f001 bc0f 	b.w	801253c <dwt_ioctl+0x1e10>
 8010d1e:	2c00      	cmp	r4, #0
 8010d20:	f001 843c 	beq.w	801259c <dwt_ioctl+0x1e70>
 8010d24:	88e3      	ldrh	r3, [r4, #6]
 8010d26:	88a2      	ldrh	r2, [r4, #4]
 8010d28:	6821      	ldr	r1, [r4, #0]
 8010d2a:	f7fe f80b 	bl	800ed44 <ull_readrxdata>
 8010d2e:	2500      	movs	r5, #0
 8010d30:	f001 bc04 	b.w	801253c <dwt_ioctl+0x1e10>
 8010d34:	2c00      	cmp	r4, #0
 8010d36:	f001 8433 	beq.w	80125a0 <dwt_ioctl+0x1e74>
 8010d3a:	88e3      	ldrh	r3, [r4, #6]
 8010d3c:	6822      	ldr	r2, [r4, #0]
 8010d3e:	88a1      	ldrh	r1, [r4, #4]
 8010d40:	f7fe f990 	bl	800f064 <ull_writetxdata>
 8010d44:	2500      	movs	r5, #0
 8010d46:	f001 bbf9 	b.w	801253c <dwt_ioctl+0x1e10>
 8010d4a:	4611      	mov	r1, r2
 8010d4c:	f7ff fc56 	bl	80105fc <ull_rxenable>
 8010d50:	2500      	movs	r5, #0
 8010d52:	f001 bbf3 	b.w	801253c <dwt_ioctl+0x1e10>
 8010d56:	2c00      	cmp	r4, #0
 8010d58:	f001 8424 	beq.w	80125a4 <dwt_ioctl+0x1e78>
 8010d5c:	7923      	ldrb	r3, [r4, #4]
 8010d5e:	8862      	ldrh	r2, [r4, #2]
 8010d60:	8821      	ldrh	r1, [r4, #0]
 8010d62:	f7fe fc97 	bl	800f694 <ull_writetxfctrl>
 8010d66:	2500      	movs	r5, #0
 8010d68:	f001 bbe8 	b.w	801253c <dwt_ioctl+0x1e10>
 8010d6c:	2c00      	cmp	r4, #0
 8010d6e:	f001 841b 	beq.w	80125a8 <dwt_ioctl+0x1e7c>
 8010d72:	f7fd f98f 	bl	800e094 <ull_readclockoffset>
 8010d76:	8020      	strh	r0, [r4, #0]
 8010d78:	2500      	movs	r5, #0
 8010d7a:	f001 bbdf 	b.w	801253c <dwt_ioctl+0x1e10>
 8010d7e:	2c00      	cmp	r4, #0
 8010d80:	f001 8414 	beq.w	80125ac <dwt_ioctl+0x1e80>
 8010d84:	f7fd f9b4 	bl	800e0f0 <ull_readcarrierintegrator>
 8010d88:	6020      	str	r0, [r4, #0]
 8010d8a:	2500      	movs	r5, #0
 8010d8c:	f001 bbd6 	b.w	801253c <dwt_ioctl+0x1e10>
 8010d90:	f7fe f866 	bl	800ee60 <ull_clearaonconfig>
 8010d94:	2500      	movs	r5, #0
 8010d96:	f001 bbd1 	b.w	801253c <dwt_ioctl+0x1e10>
 8010d9a:	2c00      	cmp	r4, #0
 8010d9c:	f001 8408 	beq.w	80125b0 <dwt_ioctl+0x1e84>
 8010da0:	8861      	ldrh	r1, [r4, #2]
 8010da2:	f7fe fe53 	bl	800fa4c <ull_calcbandwidthadj>
 8010da6:	7020      	strb	r0, [r4, #0]
 8010da8:	2500      	movs	r5, #0
 8010daa:	f001 bbc7 	b.w	801253c <dwt_ioctl+0x1e10>
 8010dae:	4621      	mov	r1, r4
 8010db0:	f7fd f9be 	bl	800e130 <ull_readdiagnostics>
 8010db4:	2500      	movs	r5, #0
 8010db6:	f001 bbc1 	b.w	801253c <dwt_ioctl+0x1e10>
 8010dba:	2c00      	cmp	r4, #0
 8010dbc:	f001 83fa 	beq.w	80125b4 <dwt_ioctl+0x1e88>
 8010dc0:	2201      	movs	r2, #1
 8010dc2:	2170      	movs	r1, #112	; 0x70
 8010dc4:	f7fd f931 	bl	800e02a <dwt_read32bitoffsetreg>
 8010dc8:	6020      	str	r0, [r4, #0]
 8010dca:	2500      	movs	r5, #0
 8010dcc:	f001 bbb6 	b.w	801253c <dwt_ioctl+0x1e10>
 8010dd0:	2c00      	cmp	r4, #0
 8010dd2:	f001 83f1 	beq.w	80125b8 <dwt_ioctl+0x1e8c>
 8010dd6:	2200      	movs	r2, #0
 8010dd8:	2170      	movs	r1, #112	; 0x70
 8010dda:	f7fd f926 	bl	800e02a <dwt_read32bitoffsetreg>
 8010dde:	6020      	str	r0, [r4, #0]
 8010de0:	2500      	movs	r5, #0
 8010de2:	f001 bbab 	b.w	801253c <dwt_ioctl+0x1e10>
 8010de6:	9400      	str	r4, [sp, #0]
 8010de8:	2305      	movs	r3, #5
 8010dea:	2200      	movs	r2, #0
 8010dec:	2170      	movs	r1, #112	; 0x70
 8010dee:	f7fd f912 	bl	800e016 <dwt_readfromdevice>
 8010df2:	2500      	movs	r5, #0
 8010df4:	f001 bba2 	b.w	801253c <dwt_ioctl+0x1e10>
 8010df8:	2c00      	cmp	r4, #0
 8010dfa:	f001 83df 	beq.w	80125bc <dwt_ioctl+0x1e90>
 8010dfe:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010e00:	7b9b      	ldrb	r3, [r3, #14]
 8010e02:	2b01      	cmp	r3, #1
 8010e04:	d015      	beq.n	8010e32 <dwt_ioctl+0x706>
 8010e06:	2b03      	cmp	r3, #3
 8010e08:	d11a      	bne.n	8010e40 <dwt_ioctl+0x714>
 8010e0a:	2216      	movs	r2, #22
 8010e0c:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8010e10:	f7fd f921 	bl	800e056 <dwt_read16bitoffsetreg>
 8010e14:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8010e18:	b283      	uxth	r3, r0
 8010e1a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8010e1e:	d004      	beq.n	8010e2a <dwt_ioctl+0x6fe>
 8010e20:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8010e24:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8010e28:	b218      	sxth	r0, r3
 8010e2a:	8020      	strh	r0, [r4, #0]
 8010e2c:	2500      	movs	r5, #0
 8010e2e:	f001 bb85 	b.w	801253c <dwt_ioctl+0x1e10>
 8010e32:	2202      	movs	r2, #2
 8010e34:	493b      	ldr	r1, [pc, #236]	; (8010f24 <dwt_ioctl+0x7f8>)
 8010e36:	f7fd f90e 	bl	800e056 <dwt_read16bitoffsetreg>
 8010e3a:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8010e3e:	e7eb      	b.n	8010e18 <dwt_ioctl+0x6ec>
 8010e40:	2202      	movs	r2, #2
 8010e42:	4939      	ldr	r1, [pc, #228]	; (8010f28 <dwt_ioctl+0x7fc>)
 8010e44:	f7fd f907 	bl	800e056 <dwt_read16bitoffsetreg>
 8010e48:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8010e4c:	e7e4      	b.n	8010e18 <dwt_ioctl+0x6ec>
 8010e4e:	9400      	str	r4, [sp, #0]
 8010e50:	2306      	movs	r3, #6
 8010e52:	2200      	movs	r2, #0
 8010e54:	4935      	ldr	r1, [pc, #212]	; (8010f2c <dwt_ioctl+0x800>)
 8010e56:	f7fd f8de 	bl	800e016 <dwt_readfromdevice>
 8010e5a:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	db06      	blt.n	8010e70 <dwt_ioctl+0x744>
 8010e62:	7963      	ldrb	r3, [r4, #5]
 8010e64:	f003 0301 	and.w	r3, r3, #1
 8010e68:	7163      	strb	r3, [r4, #5]
 8010e6a:	2500      	movs	r5, #0
 8010e6c:	f001 bb66 	b.w	801253c <dwt_ioctl+0x1e10>
 8010e70:	23ff      	movs	r3, #255	; 0xff
 8010e72:	70a3      	strb	r3, [r4, #2]
 8010e74:	70e3      	strb	r3, [r4, #3]
 8010e76:	7123      	strb	r3, [r4, #4]
 8010e78:	7163      	strb	r3, [r4, #5]
 8010e7a:	e7f2      	b.n	8010e62 <dwt_ioctl+0x736>
 8010e7c:	2c00      	cmp	r4, #0
 8010e7e:	f001 839f 	beq.w	80125c0 <dwt_ioctl+0x1e94>
 8010e82:	2201      	movs	r2, #1
 8010e84:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8010e88:	f7fd f924 	bl	800e0d4 <dwt_read8bitoffsetreg>
 8010e8c:	7020      	strb	r0, [r4, #0]
 8010e8e:	2500      	movs	r5, #0
 8010e90:	f001 bb54 	b.w	801253c <dwt_ioctl+0x1e10>
 8010e94:	2c00      	cmp	r4, #0
 8010e96:	f001 8395 	beq.w	80125c4 <dwt_ioctl+0x1e98>
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8010ea0:	f7fd f918 	bl	800e0d4 <dwt_read8bitoffsetreg>
 8010ea4:	7020      	strb	r0, [r4, #0]
 8010ea6:	2500      	movs	r5, #0
 8010ea8:	f001 bb48 	b.w	801253c <dwt_ioctl+0x1e10>
 8010eac:	2c00      	cmp	r4, #0
 8010eae:	f001 838b 	beq.w	80125c8 <dwt_ioctl+0x1e9c>
 8010eb2:	88a2      	ldrh	r2, [r4, #4]
 8010eb4:	6821      	ldr	r1, [r4, #0]
 8010eb6:	f7fe fb17 	bl	800f4e8 <_dwt_otpprogword32>
 8010eba:	2500      	movs	r5, #0
 8010ebc:	f001 bb3e 	b.w	801253c <dwt_ioctl+0x1e10>
 8010ec0:	2c00      	cmp	r4, #0
 8010ec2:	f001 8383 	beq.w	80125cc <dwt_ioctl+0x1ea0>
 8010ec6:	6825      	ldr	r5, [r4, #0]
 8010ec8:	88a4      	ldrh	r4, [r4, #4]
 8010eca:	4622      	mov	r2, r4
 8010ecc:	4629      	mov	r1, r5
 8010ece:	f7fe fb0b 	bl	800f4e8 <_dwt_otpprogword32>
 8010ed2:	4621      	mov	r1, r4
 8010ed4:	4630      	mov	r0, r6
 8010ed6:	f7fd fd65 	bl	800e9a4 <_dwt_otpread>
 8010eda:	1a2d      	subs	r5, r5, r0
 8010edc:	bf18      	it	ne
 8010ede:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8010ee2:	f001 bb2b 	b.w	801253c <dwt_ioctl+0x1e10>
 8010ee6:	2a02      	cmp	r2, #2
 8010ee8:	d00f      	beq.n	8010f0a <dwt_ioctl+0x7de>
 8010eea:	4c11      	ldr	r4, [pc, #68]	; (8010f30 <dwt_ioctl+0x804>)
 8010eec:	2300      	movs	r3, #0
 8010eee:	461a      	mov	r2, r3
 8010ef0:	4621      	mov	r1, r4
 8010ef2:	4630      	mov	r0, r6
 8010ef4:	f7fd ff5c 	bl	800edb0 <dwt_write8bitoffsetreg>
 8010ef8:	2302      	movs	r3, #2
 8010efa:	2200      	movs	r2, #0
 8010efc:	4621      	mov	r1, r4
 8010efe:	4630      	mov	r0, r6
 8010f00:	f7fd ff56 	bl	800edb0 <dwt_write8bitoffsetreg>
 8010f04:	2500      	movs	r5, #0
 8010f06:	f001 bb19 	b.w	801253c <dwt_ioctl+0x1e10>
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	9300      	str	r3, [sp, #0]
 8010f0e:	23fe      	movs	r3, #254	; 0xfe
 8010f10:	2201      	movs	r2, #1
 8010f12:	4902      	ldr	r1, [pc, #8]	; (8010f1c <dwt_ioctl+0x7f0>)
 8010f14:	f7fe fbde 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 8010f18:	e7e7      	b.n	8010eea <dwt_ioctl+0x7be>
 8010f1a:	bf00      	nop
 8010f1c:	00110008 	.word	0x00110008
 8010f20:	0007001c 	.word	0x0007001c
 8010f24:	00180014 	.word	0x00180014
 8010f28:	000c001c 	.word	0x000c001c
 8010f2c:	000c0018 	.word	0x000c0018
 8010f30:	000a0004 	.word	0x000a0004
 8010f34:	2c00      	cmp	r4, #0
 8010f36:	f001 834b 	beq.w	80125d0 <dwt_ioctl+0x1ea4>
 8010f3a:	8824      	ldrh	r4, [r4, #0]
 8010f3c:	b2e2      	uxtb	r2, r4
 8010f3e:	f44f 7181 	mov.w	r1, #258	; 0x102
 8010f42:	f7fd ffe1 	bl	800ef08 <ull_aon_write>
 8010f46:	0a22      	lsrs	r2, r4, #8
 8010f48:	f240 1103 	movw	r1, #259	; 0x103
 8010f4c:	4630      	mov	r0, r6
 8010f4e:	f7fd ffdb 	bl	800ef08 <ull_aon_write>
 8010f52:	2500      	movs	r5, #0
 8010f54:	f001 baf2 	b.w	801253c <dwt_ioctl+0x1e10>
 8010f58:	2c00      	cmp	r4, #0
 8010f5a:	f001 833b 	beq.w	80125d4 <dwt_ioctl+0x1ea8>
 8010f5e:	f8df 8370 	ldr.w	r8, [pc, #880]	; 80112d0 <dwt_ioctl+0xba4>
 8010f62:	2310      	movs	r3, #16
 8010f64:	9300      	str	r3, [sp, #0]
 8010f66:	23ff      	movs	r3, #255	; 0xff
 8010f68:	2200      	movs	r2, #0
 8010f6a:	4641      	mov	r1, r8
 8010f6c:	f7fe fbb2 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 8010f70:	f44f 7182 	mov.w	r1, #260	; 0x104
 8010f74:	4630      	mov	r0, r6
 8010f76:	f7fd ffa7 	bl	800eec8 <ull_aon_read>
 8010f7a:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 8010f7e:	462a      	mov	r2, r5
 8010f80:	f44f 7182 	mov.w	r1, #260	; 0x104
 8010f84:	4630      	mov	r0, r6
 8010f86:	f7fd ffbf 	bl	800ef08 <ull_aon_write>
 8010f8a:	f045 0204 	orr.w	r2, r5, #4
 8010f8e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8010f92:	4630      	mov	r0, r6
 8010f94:	f7fd ffb8 	bl	800ef08 <ull_aon_write>
 8010f98:	2002      	movs	r0, #2
 8010f9a:	f7f0 facf 	bl	800153c <deca_sleep>
 8010f9e:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8010fa2:	4630      	mov	r0, r6
 8010fa4:	f7fd ff90 	bl	800eec8 <ull_aon_read>
 8010fa8:	4607      	mov	r7, r0
 8010faa:	f240 110f 	movw	r1, #271	; 0x10f
 8010fae:	4630      	mov	r0, r6
 8010fb0:	f7fd ff8a 	bl	800eec8 <ull_aon_read>
 8010fb4:	4681      	mov	r9, r0
 8010fb6:	462a      	mov	r2, r5
 8010fb8:	f44f 7182 	mov.w	r1, #260	; 0x104
 8010fbc:	4630      	mov	r0, r6
 8010fbe:	f7fd ffa3 	bl	800ef08 <ull_aon_write>
 8010fc2:	2500      	movs	r5, #0
 8010fc4:	9500      	str	r5, [sp, #0]
 8010fc6:	23ef      	movs	r3, #239	; 0xef
 8010fc8:	462a      	mov	r2, r5
 8010fca:	4641      	mov	r1, r8
 8010fcc:	4630      	mov	r0, r6
 8010fce:	f7fe fb81 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 8010fd2:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 8010fd6:	8027      	strh	r7, [r4, #0]
 8010fd8:	f001 bab0 	b.w	801253c <dwt_ioctl+0x1e10>
 8010fdc:	2c00      	cmp	r4, #0
 8010fde:	f001 82fb 	beq.w	80125d8 <dwt_ioctl+0x1eac>
 8010fe2:	78a2      	ldrb	r2, [r4, #2]
 8010fe4:	8821      	ldrh	r1, [r4, #0]
 8010fe6:	f7fd ffb7 	bl	800ef58 <ull_configuresleep>
 8010fea:	2500      	movs	r5, #0
 8010fec:	f001 baa6 	b.w	801253c <dwt_ioctl+0x1e10>
 8010ff0:	2c00      	cmp	r4, #0
 8010ff2:	f001 82f3 	beq.w	80125dc <dwt_ioctl+0x1eb0>
 8010ff6:	6824      	ldr	r4, [r4, #0]
 8010ff8:	f7fd ff32 	bl	800ee60 <ull_clearaonconfig>
 8010ffc:	2001      	movs	r0, #1
 8010ffe:	f7f0 fa9d 	bl	800153c <deca_sleep>
 8011002:	2303      	movs	r3, #3
 8011004:	9300      	str	r3, [sp, #0]
 8011006:	23ff      	movs	r3, #255	; 0xff
 8011008:	2200      	movs	r2, #0
 801100a:	49af      	ldr	r1, [pc, #700]	; (80112c8 <dwt_ioctl+0xb9c>)
 801100c:	4630      	mov	r0, r6
 801100e:	f7fe fb61 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 8011012:	b97c      	cbnz	r4, 8011034 <dwt_ioctl+0x908>
 8011014:	4630      	mov	r0, r6
 8011016:	f7ff fb61 	bl	80106dc <ull_softreset_no_sema_fcmd>
 801101a:	2001      	movs	r0, #1
 801101c:	f7f0 fa8e 	bl	800153c <deca_sleep>
 8011020:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8011022:	2500      	movs	r5, #0
 8011024:	739d      	strb	r5, [r3, #14]
 8011026:	2202      	movs	r2, #2
 8011028:	821a      	strh	r2, [r3, #16]
 801102a:	751d      	strb	r5, [r3, #20]
 801102c:	755d      	strb	r5, [r3, #21]
 801102e:	73dd      	strb	r5, [r3, #15]
 8011030:	f001 ba84 	b.w	801253c <dwt_ioctl+0x1e10>
 8011034:	4630      	mov	r0, r6
 8011036:	f7ff fb65 	bl	8010704 <ull_softreset_fcmd>
 801103a:	e7ee      	b.n	801101a <dwt_ioctl+0x8ee>
 801103c:	2c00      	cmp	r4, #0
 801103e:	f001 82cf 	beq.w	80125e0 <dwt_ioctl+0x1eb4>
 8011042:	7823      	ldrb	r3, [r4, #0]
 8011044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011048:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801104a:	7353      	strb	r3, [r2, #13]
 801104c:	2200      	movs	r2, #0
 801104e:	499f      	ldr	r1, [pc, #636]	; (80112cc <dwt_ioctl+0xba0>)
 8011050:	f7fd feae 	bl	800edb0 <dwt_write8bitoffsetreg>
 8011054:	2500      	movs	r5, #0
 8011056:	f001 ba71 	b.w	801253c <dwt_ioctl+0x1e10>
 801105a:	2c00      	cmp	r4, #0
 801105c:	f001 82c2 	beq.w	80125e4 <dwt_ioctl+0x1eb8>
 8011060:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011062:	7b5b      	ldrb	r3, [r3, #13]
 8011064:	7023      	strb	r3, [r4, #0]
 8011066:	2500      	movs	r5, #0
 8011068:	f001 ba68 	b.w	801253c <dwt_ioctl+0x1e10>
 801106c:	2101      	movs	r1, #1
 801106e:	f7fe f9f5 	bl	800f45c <ull_enable_rf_tx>
 8011072:	4630      	mov	r0, r6
 8011074:	f7fe fa26 	bl	800f4c4 <ull_enable_rftx_blocks>
 8011078:	2101      	movs	r1, #1
 801107a:	4630      	mov	r0, r6
 801107c:	f7fd fc68 	bl	800e950 <ull_force_clocks>
 8011080:	220f      	movs	r2, #15
 8011082:	2101      	movs	r1, #1
 8011084:	4630      	mov	r0, r6
 8011086:	f7fd fe39 	bl	800ecfc <ull_repeated_cw>
 801108a:	2500      	movs	r5, #0
 801108c:	f001 ba56 	b.w	801253c <dwt_ioctl+0x1e10>
 8011090:	2c00      	cmp	r4, #0
 8011092:	f001 82a9 	beq.w	80125e8 <dwt_ioctl+0x1ebc>
 8011096:	6862      	ldr	r2, [r4, #4]
 8011098:	6821      	ldr	r1, [r4, #0]
 801109a:	f7fd fe2f 	bl	800ecfc <ull_repeated_cw>
 801109e:	2500      	movs	r5, #0
 80110a0:	f001 ba4c 	b.w	801253c <dwt_ioctl+0x1e10>
 80110a4:	2c00      	cmp	r4, #0
 80110a6:	f001 82a1 	beq.w	80125ec <dwt_ioctl+0x1ec0>
 80110aa:	4d89      	ldr	r5, [pc, #548]	; (80112d0 <dwt_ioctl+0xba4>)
 80110ac:	2200      	movs	r2, #0
 80110ae:	4629      	mov	r1, r5
 80110b0:	f7fd f810 	bl	800e0d4 <dwt_read8bitoffsetreg>
 80110b4:	4680      	mov	r8, r0
 80110b6:	2302      	movs	r3, #2
 80110b8:	9300      	str	r3, [sp, #0]
 80110ba:	23ff      	movs	r3, #255	; 0xff
 80110bc:	2200      	movs	r2, #0
 80110be:	4629      	mov	r1, r5
 80110c0:	4630      	mov	r0, r6
 80110c2:	f7fe fb07 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 80110c6:	2304      	movs	r3, #4
 80110c8:	2200      	movs	r2, #0
 80110ca:	4982      	ldr	r1, [pc, #520]	; (80112d4 <dwt_ioctl+0xba8>)
 80110cc:	4630      	mov	r0, r6
 80110ce:	f7fd fe6f 	bl	800edb0 <dwt_write8bitoffsetreg>
 80110d2:	2301      	movs	r3, #1
 80110d4:	2200      	movs	r2, #0
 80110d6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80110da:	4630      	mov	r0, r6
 80110dc:	f7fd fe68 	bl	800edb0 <dwt_write8bitoffsetreg>
 80110e0:	4f7d      	ldr	r7, [pc, #500]	; (80112d8 <dwt_ioctl+0xbac>)
 80110e2:	2500      	movs	r5, #0
 80110e4:	462a      	mov	r2, r5
 80110e6:	4639      	mov	r1, r7
 80110e8:	4630      	mov	r0, r6
 80110ea:	f7fc fff3 	bl	800e0d4 <dwt_read8bitoffsetreg>
 80110ee:	f010 0f01 	tst.w	r0, #1
 80110f2:	d0f7      	beq.n	80110e4 <dwt_ioctl+0x9b8>
 80110f4:	2200      	movs	r2, #0
 80110f6:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 80110fa:	4630      	mov	r0, r6
 80110fc:	f7fc ffab 	bl	800e056 <dwt_read16bitoffsetreg>
 8011100:	4605      	mov	r5, r0
 8011102:	2300      	movs	r3, #0
 8011104:	461a      	mov	r2, r3
 8011106:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801110a:	4630      	mov	r0, r6
 801110c:	f7fd fe50 	bl	800edb0 <dwt_write8bitoffsetreg>
 8011110:	2300      	movs	r3, #0
 8011112:	461a      	mov	r2, r3
 8011114:	496f      	ldr	r1, [pc, #444]	; (80112d4 <dwt_ioctl+0xba8>)
 8011116:	4630      	mov	r0, r6
 8011118:	f7fd fe4a 	bl	800edb0 <dwt_write8bitoffsetreg>
 801111c:	4643      	mov	r3, r8
 801111e:	2200      	movs	r2, #0
 8011120:	496b      	ldr	r1, [pc, #428]	; (80112d0 <dwt_ioctl+0xba4>)
 8011122:	4630      	mov	r0, r6
 8011124:	f7fd fe44 	bl	800edb0 <dwt_write8bitoffsetreg>
 8011128:	8025      	strh	r5, [r4, #0]
 801112a:	2500      	movs	r5, #0
 801112c:	f001 ba06 	b.w	801253c <dwt_ioctl+0x1e10>
 8011130:	2c00      	cmp	r4, #0
 8011132:	f001 825d 	beq.w	80125f0 <dwt_ioctl+0x1ec4>
 8011136:	7923      	ldrb	r3, [r4, #4]
 8011138:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801113a:	7a92      	ldrb	r2, [r2, #10]
 801113c:	1a9b      	subs	r3, r3, r2
 801113e:	ee07 3a90 	vmov	s15, r3
 8011142:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011146:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80112dc <dwt_ioctl+0xbb0>
 801114a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801114e:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8011152:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011156:	edc4 7a00 	vstr	s15, [r4]
 801115a:	2500      	movs	r5, #0
 801115c:	f001 b9ee 	b.w	801253c <dwt_ioctl+0x1e10>
 8011160:	2c00      	cmp	r4, #0
 8011162:	f001 8247 	beq.w	80125f4 <dwt_ioctl+0x1ec8>
 8011166:	7923      	ldrb	r3, [r4, #4]
 8011168:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801116a:	7a52      	ldrb	r2, [r2, #9]
 801116c:	1a9b      	subs	r3, r3, r2
 801116e:	ee07 3a90 	vmov	s15, r3
 8011172:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011176:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80112e0 <dwt_ioctl+0xbb4>
 801117a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801117e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8011182:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011186:	eddf 6a57 	vldr	s13, [pc, #348]	; 80112e4 <dwt_ioctl+0xbb8>
 801118a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801118e:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8011192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011196:	edc4 7a00 	vstr	s15, [r4]
 801119a:	2500      	movs	r5, #0
 801119c:	f001 b9ce 	b.w	801253c <dwt_ioctl+0x1e10>
 80111a0:	2c00      	cmp	r4, #0
 80111a2:	f001 8229 	beq.w	80125f8 <dwt_ioctl+0x1ecc>
 80111a6:	6824      	ldr	r4, [r4, #0]
 80111a8:	2101      	movs	r1, #1
 80111aa:	f7fe f957 	bl	800f45c <ull_enable_rf_tx>
 80111ae:	4630      	mov	r0, r6
 80111b0:	f7fe f988 	bl	800f4c4 <ull_enable_rftx_blocks>
 80111b4:	2101      	movs	r1, #1
 80111b6:	4630      	mov	r0, r6
 80111b8:	f7fd fbca 	bl	800e950 <ull_force_clocks>
 80111bc:	4621      	mov	r1, r4
 80111be:	4630      	mov	r0, r6
 80111c0:	f7fe fca0 	bl	800fb04 <ull_repeated_frames>
 80111c4:	2500      	movs	r5, #0
 80111c6:	f001 b9b9 	b.w	801253c <dwt_ioctl+0x1e10>
 80111ca:	2500      	movs	r5, #0
 80111cc:	9500      	str	r5, [sp, #0]
 80111ce:	23ef      	movs	r3, #239	; 0xef
 80111d0:	462a      	mov	r2, r5
 80111d2:	4945      	ldr	r1, [pc, #276]	; (80112e8 <dwt_ioctl+0xbbc>)
 80111d4:	f7fe fa7e 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 80111d8:	2105      	movs	r1, #5
 80111da:	4630      	mov	r0, r6
 80111dc:	f7fd fbb8 	bl	800e950 <ull_force_clocks>
 80111e0:	2101      	movs	r1, #1
 80111e2:	4630      	mov	r0, r6
 80111e4:	f7fd fd6c 	bl	800ecc0 <ull_disable_rf_tx>
 80111e8:	4630      	mov	r0, r6
 80111ea:	f7fd fd5f 	bl	800ecac <ull_disable_rftx_blocks>
 80111ee:	f001 b9a5 	b.w	801253c <dwt_ioctl+0x1e10>
 80111f2:	2500      	movs	r5, #0
 80111f4:	9500      	str	r5, [sp, #0]
 80111f6:	23ef      	movs	r3, #239	; 0xef
 80111f8:	462a      	mov	r2, r5
 80111fa:	493b      	ldr	r1, [pc, #236]	; (80112e8 <dwt_ioctl+0xbbc>)
 80111fc:	f7fe fa6a 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 8011200:	f001 b99c 	b.w	801253c <dwt_ioctl+0x1e10>
 8011204:	2c00      	cmp	r4, #0
 8011206:	f001 81f9 	beq.w	80125fc <dwt_ioctl+0x1ed0>
 801120a:	6821      	ldr	r1, [r4, #0]
 801120c:	f7fe fc7a 	bl	800fb04 <ull_repeated_frames>
 8011210:	2500      	movs	r5, #0
 8011212:	f001 b993 	b.w	801253c <dwt_ioctl+0x1e10>
 8011216:	2200      	movs	r2, #0
 8011218:	4934      	ldr	r1, [pc, #208]	; (80112ec <dwt_ioctl+0xbc0>)
 801121a:	f7fc ff1c 	bl	800e056 <dwt_read16bitoffsetreg>
 801121e:	f3c0 050b 	ubfx	r5, r0, #0, #12
 8011222:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8011226:	bf18      	it	ne
 8011228:	f445 4570 	orrne.w	r5, r5, #61440	; 0xf000
 801122c:	b22d      	sxth	r5, r5
 801122e:	8025      	strh	r5, [r4, #0]
 8011230:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8011232:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8011236:	1aed      	subs	r5, r5, r3
 8011238:	f001 b980 	b.w	801253c <dwt_ioctl+0x1e10>
 801123c:	2c00      	cmp	r4, #0
 801123e:	f001 81df 	beq.w	8012600 <dwt_ioctl+0x1ed4>
 8011242:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8011246:	7a23      	ldrb	r3, [r4, #8]
 8011248:	f899 2013 	ldrb.w	r2, [r9, #19]
 801124c:	2aff      	cmp	r2, #255	; 0xff
 801124e:	f000 80fe 	beq.w	801144e <dwt_ioctl+0xd22>
 8011252:	bb93      	cbnz	r3, 80112ba <dwt_ioctl+0xb8e>
 8011254:	f8d9 1000 	ldr.w	r1, [r9]
 8011258:	f7fd feb8 	bl	800efcc <ull_update_nonce_GCM>
 801125c:	f899 300c 	ldrb.w	r3, [r9, #12]
 8011260:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 8011264:	18d1      	adds	r1, r2, r3
 8011266:	f899 2012 	ldrb.w	r2, [r9, #18]
 801126a:	2a00      	cmp	r2, #0
 801126c:	d140      	bne.n	80112f0 <dwt_ioctl+0xbc4>
 801126e:	f899 0010 	ldrb.w	r0, [r9, #16]
 8011272:	2800      	cmp	r0, #0
 8011274:	bf0b      	itete	eq
 8011276:	227f      	moveq	r2, #127	; 0x7f
 8011278:	f44f 6280 	movne.w	r2, #1024	; 0x400
 801127c:	f44f 15b0 	moveq.w	r5, #1441792	; 0x160000
 8011280:	f44f 15a0 	movne.w	r5, #1310720	; 0x140000
 8011284:	f899 0013 	ldrb.w	r0, [r9, #19]
 8011288:	1a12      	subs	r2, r2, r0
 801128a:	3a02      	subs	r2, #2
 801128c:	4291      	cmp	r1, r2
 801128e:	f200 80e7 	bhi.w	8011460 <dwt_ioctl+0xd34>
 8011292:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8011296:	9200      	str	r2, [sp, #0]
 8011298:	2200      	movs	r2, #0
 801129a:	4629      	mov	r1, r5
 801129c:	4630      	mov	r0, r6
 801129e:	f7fd fb2d 	bl	800e8fc <dwt_writetodevice>
 80112a2:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 80112a6:	f899 200c 	ldrb.w	r2, [r9, #12]
 80112aa:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80112ae:	9100      	str	r1, [sp, #0]
 80112b0:	4629      	mov	r1, r5
 80112b2:	4630      	mov	r0, r6
 80112b4:	f7fd fb22 	bl	800e8fc <dwt_writetodevice>
 80112b8:	e02b      	b.n	8011312 <dwt_ioctl+0xbe6>
 80112ba:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 80112be:	f8d9 1000 	ldr.w	r1, [r9]
 80112c2:	f7fd fe91 	bl	800efe8 <ull_update_nonce_CCM>
 80112c6:	e7c9      	b.n	801125c <dwt_ioctl+0xb30>
 80112c8:	00110004 	.word	0x00110004
 80112cc:	00090014 	.word	0x00090014
 80112d0:	00070048 	.word	0x00070048
 80112d4:	00070034 	.word	0x00070034
 80112d8:	00080004 	.word	0x00080004
 80112dc:	3f866666 	.word	0x3f866666
 80112e0:	3ecccccd 	.word	0x3ecccccd
 80112e4:	437f0000 	.word	0x437f0000
 80112e8:	000f0028 	.word	0x000f0028
 80112ec:	00020008 	.word	0x00020008
 80112f0:	2a01      	cmp	r2, #1
 80112f2:	f040 80af 	bne.w	8011454 <dwt_ioctl+0xd28>
 80112f6:	f899 3011 	ldrb.w	r3, [r9, #17]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8011300:	bf08      	it	eq
 8011302:	237f      	moveq	r3, #127	; 0x7f
 8011304:	f899 2013 	ldrb.w	r2, [r9, #19]
 8011308:	1a9b      	subs	r3, r3, r2
 801130a:	3b02      	subs	r3, #2
 801130c:	4299      	cmp	r1, r3
 801130e:	f200 80a4 	bhi.w	801145a <dwt_ioctl+0xd2e>
 8011312:	f899 2010 	ldrb.w	r2, [r9, #16]
 8011316:	1e53      	subs	r3, r2, #1
 8011318:	b2db      	uxtb	r3, r3
 801131a:	2b01      	cmp	r3, #1
 801131c:	d940      	bls.n	80113a0 <dwt_ioctl+0xc74>
 801131e:	f899 3011 	ldrb.w	r3, [r9, #17]
 8011322:	1e59      	subs	r1, r3, #1
 8011324:	b2c9      	uxtb	r1, r1
 8011326:	2901      	cmp	r1, #1
 8011328:	d947      	bls.n	80113ba <dwt_ioctl+0xc8e>
 801132a:	2b04      	cmp	r3, #4
 801132c:	d04c      	beq.n	80113c8 <dwt_ioctl+0xc9c>
 801132e:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 8011332:	2200      	movs	r2, #0
 8011334:	49ba      	ldr	r1, [pc, #744]	; (8011620 <dwt_ioctl+0xef4>)
 8011336:	4630      	mov	r0, r6
 8011338:	f7fd fb56 	bl	800e9e8 <dwt_write32bitoffsetreg>
 801133c:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8011340:	4ab8      	ldr	r2, [pc, #736]	; (8011624 <dwt_ioctl+0xef8>)
 8011342:	ea02 12c3 	and.w	r2, r2, r3, lsl #7
 8011346:	f899 300c 	ldrb.w	r3, [r9, #12]
 801134a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801134e:	4313      	orrs	r3, r2
 8011350:	2200      	movs	r2, #0
 8011352:	49b5      	ldr	r1, [pc, #724]	; (8011628 <dwt_ioctl+0xefc>)
 8011354:	4630      	mov	r0, r6
 8011356:	f7fd fb47 	bl	800e9e8 <dwt_write32bitoffsetreg>
 801135a:	2301      	movs	r3, #1
 801135c:	2200      	movs	r2, #0
 801135e:	49b3      	ldr	r1, [pc, #716]	; (801162c <dwt_ioctl+0xf00>)
 8011360:	4630      	mov	r0, r6
 8011362:	f7fd fd25 	bl	800edb0 <dwt_write8bitoffsetreg>
 8011366:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 8011630 <dwt_ioctl+0xf04>
 801136a:	2700      	movs	r7, #0
 801136c:	463a      	mov	r2, r7
 801136e:	4641      	mov	r1, r8
 8011370:	4630      	mov	r0, r6
 8011372:	f7fc feaf 	bl	800e0d4 <dwt_read8bitoffsetreg>
 8011376:	f010 0f05 	tst.w	r0, #5
 801137a:	d0f7      	beq.n	801136c <dwt_ioctl+0xc40>
 801137c:	4605      	mov	r5, r0
 801137e:	4603      	mov	r3, r0
 8011380:	2200      	movs	r2, #0
 8011382:	49ab      	ldr	r1, [pc, #684]	; (8011630 <dwt_ioctl+0xf04>)
 8011384:	4630      	mov	r0, r6
 8011386:	f7fd fd13 	bl	800edb0 <dwt_write8bitoffsetreg>
 801138a:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 801138e:	f025 0330 	bic.w	r3, r5, #48	; 0x30
 8011392:	2b01      	cmp	r3, #1
 8011394:	d025      	beq.n	80113e2 <dwt_ioctl+0xcb6>
 8011396:	b26b      	sxtb	r3, r5
 8011398:	7023      	strb	r3, [r4, #0]
 801139a:	2500      	movs	r5, #0
 801139c:	f001 b8ce 	b.w	801253c <dwt_ioctl+0x1e10>
 80113a0:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80113a2:	7b9b      	ldrb	r3, [r3, #14]
 80113a4:	2b03      	cmp	r3, #3
 80113a6:	f001 81af 	beq.w	8012708 <dwt_ioctl+0x1fdc>
 80113aa:	f899 3011 	ldrb.w	r3, [r9, #17]
 80113ae:	1e5a      	subs	r2, r3, #1
 80113b0:	b2d2      	uxtb	r2, r2
 80113b2:	2a01      	cmp	r2, #1
 80113b4:	d912      	bls.n	80113dc <dwt_ioctl+0xcb0>
 80113b6:	2201      	movs	r2, #1
 80113b8:	e7b7      	b.n	801132a <dwt_ioctl+0xbfe>
 80113ba:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80113bc:	7b9b      	ldrb	r3, [r3, #14]
 80113be:	2b03      	cmp	r3, #3
 80113c0:	bf0c      	ite	eq
 80113c2:	2302      	moveq	r3, #2
 80113c4:	2301      	movne	r3, #1
 80113c6:	e7b2      	b.n	801132e <dwt_ioctl+0xc02>
 80113c8:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 80113cc:	2910      	cmp	r1, #16
 80113ce:	d9ae      	bls.n	801132e <dwt_ioctl+0xc02>
 80113d0:	f06f 0303 	mvn.w	r3, #3
 80113d4:	e7e0      	b.n	8011398 <dwt_ioctl+0xc6c>
 80113d6:	2202      	movs	r2, #2
 80113d8:	4613      	mov	r3, r2
 80113da:	e7a8      	b.n	801132e <dwt_ioctl+0xc02>
 80113dc:	2201      	movs	r2, #1
 80113de:	4613      	mov	r3, r2
 80113e0:	e7a5      	b.n	801132e <dwt_ioctl+0xc02>
 80113e2:	f899 3012 	ldrb.w	r3, [r9, #18]
 80113e6:	2b01      	cmp	r3, #1
 80113e8:	d1d5      	bne.n	8011396 <dwt_ioctl+0xc6a>
 80113ea:	f899 2011 	ldrb.w	r2, [r9, #17]
 80113ee:	1e53      	subs	r3, r2, #1
 80113f0:	b2db      	uxtb	r3, r3
 80113f2:	2b01      	cmp	r3, #1
 80113f4:	d91b      	bls.n	801142e <dwt_ioctl+0xd02>
 80113f6:	2a03      	cmp	r2, #3
 80113f8:	bf0c      	ite	eq
 80113fa:	f44f 17a0 	moveq.w	r7, #1310720	; 0x140000
 80113fe:	f44f 17b0 	movne.w	r7, #1441792	; 0x160000
 8011402:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8011406:	b112      	cbz	r2, 801140e <dwt_ioctl+0xce2>
 8011408:	f899 300c 	ldrb.w	r3, [r9, #12]
 801140c:	b9c3      	cbnz	r3, 8011440 <dwt_ioctl+0xd14>
 801140e:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8011412:	2900      	cmp	r1, #0
 8011414:	d0bf      	beq.n	8011396 <dwt_ioctl+0xc6a>
 8011416:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d0bb      	beq.n	8011396 <dwt_ioctl+0xc6a>
 801141e:	f899 200c 	ldrb.w	r2, [r9, #12]
 8011422:	9100      	str	r1, [sp, #0]
 8011424:	4639      	mov	r1, r7
 8011426:	4630      	mov	r0, r6
 8011428:	f7fc fdf5 	bl	800e016 <dwt_readfromdevice>
 801142c:	e7b3      	b.n	8011396 <dwt_ioctl+0xc6a>
 801142e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8011430:	7b9b      	ldrb	r3, [r3, #14]
 8011432:	2b03      	cmp	r3, #3
 8011434:	bf0c      	ite	eq
 8011436:	f44f 1798 	moveq.w	r7, #1245184	; 0x130000
 801143a:	f44f 1790 	movne.w	r7, #1179648	; 0x120000
 801143e:	e7e0      	b.n	8011402 <dwt_ioctl+0xcd6>
 8011440:	9200      	str	r2, [sp, #0]
 8011442:	2200      	movs	r2, #0
 8011444:	4639      	mov	r1, r7
 8011446:	4630      	mov	r0, r6
 8011448:	f7fc fde5 	bl	800e016 <dwt_readfromdevice>
 801144c:	e7df      	b.n	801140e <dwt_ioctl+0xce2>
 801144e:	f06f 0302 	mvn.w	r3, #2
 8011452:	e7a1      	b.n	8011398 <dwt_ioctl+0xc6c>
 8011454:	f06f 0301 	mvn.w	r3, #1
 8011458:	e79e      	b.n	8011398 <dwt_ioctl+0xc6c>
 801145a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801145e:	e79b      	b.n	8011398 <dwt_ioctl+0xc6c>
 8011460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011464:	e798      	b.n	8011398 <dwt_ioctl+0xc6c>
 8011466:	7a23      	ldrb	r3, [r4, #8]
 8011468:	79e1      	ldrb	r1, [r4, #7]
 801146a:	79a2      	ldrb	r2, [r4, #6]
 801146c:	00d2      	lsls	r2, r2, #3
 801146e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8011472:	4313      	orrs	r3, r2
 8011474:	7962      	ldrb	r2, [r4, #5]
 8011476:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 801147a:	7922      	ldrb	r2, [r4, #4]
 801147c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8011480:	78e2      	ldrb	r2, [r4, #3]
 8011482:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011486:	78a2      	ldrb	r2, [r4, #2]
 8011488:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 801148c:	7862      	ldrb	r2, [r4, #1]
 801148e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8011492:	7822      	ldrb	r2, [r4, #0]
 8011494:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8011498:	b29b      	uxth	r3, r3
 801149a:	2200      	movs	r2, #0
 801149c:	4965      	ldr	r1, [pc, #404]	; (8011634 <dwt_ioctl+0xf08>)
 801149e:	f7fd fa38 	bl	800e912 <dwt_write16bitoffsetreg>
 80114a2:	2500      	movs	r5, #0
 80114a4:	f001 b84a 	b.w	801253c <dwt_ioctl+0x1e10>
 80114a8:	2c00      	cmp	r4, #0
 80114aa:	f001 80ab 	beq.w	8012604 <dwt_ioctl+0x1ed8>
 80114ae:	7863      	ldrb	r3, [r4, #1]
 80114b0:	b133      	cbz	r3, 80114c0 <dwt_ioctl+0xd94>
 80114b2:	085b      	lsrs	r3, r3, #1
 80114b4:	3b01      	subs	r3, #1
 80114b6:	b2db      	uxtb	r3, r3
 80114b8:	7023      	strb	r3, [r4, #0]
 80114ba:	2500      	movs	r5, #0
 80114bc:	f001 b83e 	b.w	801253c <dwt_ioctl+0x1e10>
 80114c0:	2300      	movs	r3, #0
 80114c2:	e7f9      	b.n	80114b8 <dwt_ioctl+0xd8c>
 80114c4:	2200      	movs	r2, #0
 80114c6:	495c      	ldr	r1, [pc, #368]	; (8011638 <dwt_ioctl+0xf0c>)
 80114c8:	f7fc fdaf 	bl	800e02a <dwt_read32bitoffsetreg>
 80114cc:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80114d0:	8023      	strh	r3, [r4, #0]
 80114d2:	f3c0 400b 	ubfx	r0, r0, #16, #12
 80114d6:	8060      	strh	r0, [r4, #2]
 80114d8:	2200      	movs	r2, #0
 80114da:	4958      	ldr	r1, [pc, #352]	; (801163c <dwt_ioctl+0xf10>)
 80114dc:	4630      	mov	r0, r6
 80114de:	f7fc fda4 	bl	800e02a <dwt_read32bitoffsetreg>
 80114e2:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80114e6:	80a3      	strh	r3, [r4, #4]
 80114e8:	f3c0 400b 	ubfx	r0, r0, #16, #12
 80114ec:	80e0      	strh	r0, [r4, #6]
 80114ee:	2200      	movs	r2, #0
 80114f0:	4953      	ldr	r1, [pc, #332]	; (8011640 <dwt_ioctl+0xf14>)
 80114f2:	4630      	mov	r0, r6
 80114f4:	f7fc fd99 	bl	800e02a <dwt_read32bitoffsetreg>
 80114f8:	7220      	strb	r0, [r4, #8]
 80114fa:	0c00      	lsrs	r0, r0, #16
 80114fc:	7260      	strb	r0, [r4, #9]
 80114fe:	2200      	movs	r2, #0
 8011500:	4950      	ldr	r1, [pc, #320]	; (8011644 <dwt_ioctl+0xf18>)
 8011502:	4630      	mov	r0, r6
 8011504:	f7fc fd91 	bl	800e02a <dwt_read32bitoffsetreg>
 8011508:	f3c0 430b 	ubfx	r3, r0, #16, #12
 801150c:	81a3      	strh	r3, [r4, #12]
 801150e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8011512:	8160      	strh	r0, [r4, #10]
 8011514:	2200      	movs	r2, #0
 8011516:	494c      	ldr	r1, [pc, #304]	; (8011648 <dwt_ioctl+0xf1c>)
 8011518:	4630      	mov	r0, r6
 801151a:	f7fc fd86 	bl	800e02a <dwt_read32bitoffsetreg>
 801151e:	f3c0 430b 	ubfx	r3, r0, #16, #12
 8011522:	f8a4 300f 	strh.w	r3, [r4, #15]
 8011526:	73a0      	strb	r0, [r4, #14]
 8011528:	2200      	movs	r2, #0
 801152a:	4948      	ldr	r1, [pc, #288]	; (801164c <dwt_ioctl+0xf20>)
 801152c:	4630      	mov	r0, r6
 801152e:	f7fc fd7c 	bl	800e02a <dwt_read32bitoffsetreg>
 8011532:	7460      	strb	r0, [r4, #17]
 8011534:	0c00      	lsrs	r0, r0, #16
 8011536:	74a0      	strb	r0, [r4, #18]
 8011538:	2200      	movs	r2, #0
 801153a:	4945      	ldr	r1, [pc, #276]	; (8011650 <dwt_ioctl+0xf24>)
 801153c:	4630      	mov	r0, r6
 801153e:	f7fc fd74 	bl	800e02a <dwt_read32bitoffsetreg>
 8011542:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8011546:	f8a4 3013 	strh.w	r3, [r4, #19]
 801154a:	f3c0 400b 	ubfx	r0, r0, #16, #12
 801154e:	f8a4 0015 	strh.w	r0, [r4, #21]
 8011552:	2200      	movs	r2, #0
 8011554:	493f      	ldr	r1, [pc, #252]	; (8011654 <dwt_ioctl+0xf28>)
 8011556:	4630      	mov	r0, r6
 8011558:	f7fc fdbc 	bl	800e0d4 <dwt_read8bitoffsetreg>
 801155c:	75e0      	strb	r0, [r4, #23]
 801155e:	2500      	movs	r5, #0
 8011560:	f000 bfec 	b.w	801253c <dwt_ioctl+0x1e10>
 8011564:	4611      	mov	r1, r2
 8011566:	f7fd fc9b 	bl	800eea0 <ull_configeventcounters>
 801156a:	2500      	movs	r5, #0
 801156c:	f000 bfe6 	b.w	801253c <dwt_ioctl+0x1e10>
 8011570:	2c00      	cmp	r4, #0
 8011572:	f001 8049 	beq.w	8012608 <dwt_ioctl+0x1edc>
 8011576:	8823      	ldrh	r3, [r4, #0]
 8011578:	2200      	movs	r2, #0
 801157a:	4937      	ldr	r1, [pc, #220]	; (8011658 <dwt_ioctl+0xf2c>)
 801157c:	f7fd f9c9 	bl	800e912 <dwt_write16bitoffsetreg>
 8011580:	2500      	movs	r5, #0
 8011582:	f000 bfdb 	b.w	801253c <dwt_ioctl+0x1e10>
 8011586:	2c00      	cmp	r4, #0
 8011588:	f001 8040 	beq.w	801260c <dwt_ioctl+0x1ee0>
 801158c:	6825      	ldr	r5, [r4, #0]
 801158e:	b935      	cbnz	r5, 801159e <dwt_ioctl+0xe72>
 8011590:	2300      	movs	r3, #0
 8011592:	461a      	mov	r2, r3
 8011594:	4931      	ldr	r1, [pc, #196]	; (801165c <dwt_ioctl+0xf30>)
 8011596:	f7fd f9bc 	bl	800e912 <dwt_write16bitoffsetreg>
 801159a:	f000 bfcf 	b.w	801253c <dwt_ioctl+0x1e10>
 801159e:	7962      	ldrb	r2, [r4, #5]
 80115a0:	7923      	ldrb	r3, [r4, #4]
 80115a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80115a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80115aa:	2200      	movs	r2, #0
 80115ac:	492b      	ldr	r1, [pc, #172]	; (801165c <dwt_ioctl+0xf30>)
 80115ae:	f7fd f9b0 	bl	800e912 <dwt_write16bitoffsetreg>
 80115b2:	2500      	movs	r5, #0
 80115b4:	f000 bfc2 	b.w	801253c <dwt_ioctl+0x1e10>
 80115b8:	2c00      	cmp	r4, #0
 80115ba:	f001 8029 	beq.w	8012610 <dwt_ioctl+0x1ee4>
 80115be:	6823      	ldr	r3, [r4, #0]
 80115c0:	b94b      	cbnz	r3, 80115d6 <dwt_ioctl+0xeaa>
 80115c2:	2500      	movs	r5, #0
 80115c4:	9500      	str	r5, [sp, #0]
 80115c6:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 80115ca:	462a      	mov	r2, r5
 80115cc:	2110      	movs	r1, #16
 80115ce:	f7fe fc11 	bl	800fdf4 <dwt_modify16bitoffsetreg>
 80115d2:	f000 bfb3 	b.w	801253c <dwt_ioctl+0x1e10>
 80115d6:	2200      	movs	r2, #0
 80115d8:	2134      	movs	r1, #52	; 0x34
 80115da:	f7fd fa05 	bl	800e9e8 <dwt_write32bitoffsetreg>
 80115de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80115e2:	9300      	str	r3, [sp, #0]
 80115e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80115e8:	2200      	movs	r2, #0
 80115ea:	2110      	movs	r1, #16
 80115ec:	4630      	mov	r0, r6
 80115ee:	f7fe fc01 	bl	800fdf4 <dwt_modify16bitoffsetreg>
 80115f2:	2500      	movs	r5, #0
 80115f4:	f000 bfa2 	b.w	801253c <dwt_ioctl+0x1e10>
 80115f8:	2c00      	cmp	r4, #0
 80115fa:	f001 800b 	beq.w	8012614 <dwt_ioctl+0x1ee8>
 80115fe:	8861      	ldrh	r1, [r4, #2]
 8011600:	f7fd fc62 	bl	800eec8 <ull_aon_read>
 8011604:	7020      	strb	r0, [r4, #0]
 8011606:	2500      	movs	r5, #0
 8011608:	f000 bf98 	b.w	801253c <dwt_ioctl+0x1e10>
 801160c:	2c00      	cmp	r4, #0
 801160e:	f001 8003 	beq.w	8012618 <dwt_ioctl+0x1eec>
 8011612:	78a2      	ldrb	r2, [r4, #2]
 8011614:	8821      	ldrh	r1, [r4, #0]
 8011616:	f7fd fc77 	bl	800ef08 <ull_aon_write>
 801161a:	2500      	movs	r5, #0
 801161c:	f000 bf8e 	b.w	801253c <dwt_ioctl+0x1e10>
 8011620:	00010044 	.word	0x00010044
 8011624:	0001ff80 	.word	0x0001ff80
 8011628:	00010048 	.word	0x00010048
 801162c:	0001004c 	.word	0x0001004c
 8011630:	00010050 	.word	0x00010050
 8011634:	00010030 	.word	0x00010030
 8011638:	000f0004 	.word	0x000f0004
 801163c:	000f0008 	.word	0x000f0008
 8011640:	000f000c 	.word	0x000f000c
 8011644:	000f0010 	.word	0x000f0010
 8011648:	000f0014 	.word	0x000f0014
 801164c:	000f0018 	.word	0x000f0018
 8011650:	000f001c 	.word	0x000f001c
 8011654:	000f0020 	.word	0x000f0020
 8011658:	00060004 	.word	0x00060004
 801165c:	0011001c 	.word	0x0011001c
 8011660:	4bd5      	ldr	r3, [pc, #852]	; (80119b8 <dwt_ioctl+0x128c>)
 8011662:	4ad6      	ldr	r2, [pc, #856]	; (80119bc <dwt_ioctl+0x1290>)
 8011664:	2d01      	cmp	r5, #1
 8011666:	bf18      	it	ne
 8011668:	4613      	movne	r3, r2
 801166a:	2d01      	cmp	r5, #1
 801166c:	49d4      	ldr	r1, [pc, #848]	; (80119c0 <dwt_ioctl+0x1294>)
 801166e:	bf18      	it	ne
 8011670:	f04f 110c 	movne.w	r1, #786444	; 0xc000c
 8011674:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8011676:	7b92      	ldrb	r2, [r2, #14]
 8011678:	2a01      	cmp	r2, #1
 801167a:	d012      	beq.n	80116a2 <dwt_ioctl+0xf76>
 801167c:	2a03      	cmp	r2, #3
 801167e:	d117      	bne.n	80116b0 <dwt_ioctl+0xf84>
 8011680:	f5a2 12c0 	sub.w	r2, r2, #1572864	; 0x180000
 8011684:	3a01      	subs	r2, #1
 8011686:	441a      	add	r2, r3
 8011688:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 801168c:	f7fc fce3 	bl	800e056 <dwt_read16bitoffsetreg>
 8011690:	09c0      	lsrs	r0, r0, #7
 8011692:	8020      	strh	r0, [r4, #0]
 8011694:	8825      	ldrh	r5, [r4, #0]
 8011696:	3500      	adds	r5, #0
 8011698:	bf18      	it	ne
 801169a:	2501      	movne	r5, #1
 801169c:	426d      	negs	r5, r5
 801169e:	f000 bf4d 	b.w	801253c <dwt_ioctl+0x1e10>
 80116a2:	2202      	movs	r2, #2
 80116a4:	4619      	mov	r1, r3
 80116a6:	f7fc fcd6 	bl	800e056 <dwt_read16bitoffsetreg>
 80116aa:	09c0      	lsrs	r0, r0, #7
 80116ac:	8020      	strh	r0, [r4, #0]
 80116ae:	e7f1      	b.n	8011694 <dwt_ioctl+0xf68>
 80116b0:	2202      	movs	r2, #2
 80116b2:	f7fc fcd0 	bl	800e056 <dwt_read16bitoffsetreg>
 80116b6:	09c0      	lsrs	r0, r0, #7
 80116b8:	8020      	strh	r0, [r4, #0]
 80116ba:	e7eb      	b.n	8011694 <dwt_ioctl+0xf68>
 80116bc:	2c00      	cmp	r4, #0
 80116be:	f000 87ad 	beq.w	801261c <dwt_ioctl+0x1ef0>
 80116c2:	7821      	ldrb	r1, [r4, #0]
 80116c4:	f7fe fbd4 	bl	800fe70 <ull_setleds>
 80116c8:	2500      	movs	r5, #0
 80116ca:	f000 bf37 	b.w	801253c <dwt_ioctl+0x1e10>
 80116ce:	4611      	mov	r1, r2
 80116d0:	f7fe fa30 	bl	800fb34 <ull_setdwstate>
 80116d4:	2500      	movs	r5, #0
 80116d6:	f000 bf31 	b.w	801253c <dwt_ioctl+0x1e10>
 80116da:	9400      	str	r4, [sp, #0]
 80116dc:	2304      	movs	r3, #4
 80116de:	2200      	movs	r2, #0
 80116e0:	211c      	movs	r1, #28
 80116e2:	f7fc fc98 	bl	800e016 <dwt_readfromdevice>
 80116e6:	2500      	movs	r5, #0
 80116e8:	f000 bf28 	b.w	801253c <dwt_ioctl+0x1e10>
 80116ec:	2c00      	cmp	r4, #0
 80116ee:	f000 8797 	beq.w	8012620 <dwt_ioctl+0x1ef4>
 80116f2:	2202      	movs	r2, #2
 80116f4:	2144      	movs	r1, #68	; 0x44
 80116f6:	f7fc fcae 	bl	800e056 <dwt_read16bitoffsetreg>
 80116fa:	f3c0 2000 	ubfx	r0, r0, #8, #1
 80116fe:	7020      	strb	r0, [r4, #0]
 8011700:	2500      	movs	r5, #0
 8011702:	f000 bf1b 	b.w	801253c <dwt_ioctl+0x1e10>
 8011706:	2c00      	cmp	r4, #0
 8011708:	f000 878c 	beq.w	8012624 <dwt_ioctl+0x1ef8>
 801170c:	2200      	movs	r2, #0
 801170e:	2144      	movs	r1, #68	; 0x44
 8011710:	f7fc fce0 	bl	800e0d4 <dwt_read8bitoffsetreg>
 8011714:	f000 0001 	and.w	r0, r0, #1
 8011718:	7020      	strb	r0, [r4, #0]
 801171a:	2500      	movs	r5, #0
 801171c:	f000 bf0e 	b.w	801253c <dwt_ioctl+0x1e10>
 8011720:	2c00      	cmp	r4, #0
 8011722:	f000 8781 	beq.w	8012628 <dwt_ioctl+0x1efc>
 8011726:	8862      	ldrh	r2, [r4, #2]
 8011728:	8821      	ldrh	r1, [r4, #0]
 801172a:	f7fe fa61 	bl	800fbf0 <ull_configureframefilter>
 801172e:	2500      	movs	r5, #0
 8011730:	f000 bf04 	b.w	801253c <dwt_ioctl+0x1e10>
 8011734:	9400      	str	r4, [sp, #0]
 8011736:	2308      	movs	r3, #8
 8011738:	2200      	movs	r2, #0
 801173a:	2104      	movs	r1, #4
 801173c:	f7fd f8de 	bl	800e8fc <dwt_writetodevice>
 8011740:	2500      	movs	r5, #0
 8011742:	f000 befb 	b.w	801253c <dwt_ioctl+0x1e10>
 8011746:	9400      	str	r4, [sp, #0]
 8011748:	2308      	movs	r3, #8
 801174a:	2200      	movs	r2, #0
 801174c:	2104      	movs	r1, #4
 801174e:	f7fc fc62 	bl	800e016 <dwt_readfromdevice>
 8011752:	2500      	movs	r5, #0
 8011754:	f000 bef2 	b.w	801253c <dwt_ioctl+0x1e10>
 8011758:	2c00      	cmp	r4, #0
 801175a:	f000 8767 	beq.w	801262c <dwt_ioctl+0x1f00>
 801175e:	8823      	ldrh	r3, [r4, #0]
 8011760:	2202      	movs	r2, #2
 8011762:	210c      	movs	r1, #12
 8011764:	f7fd f8d5 	bl	800e912 <dwt_write16bitoffsetreg>
 8011768:	2500      	movs	r5, #0
 801176a:	f000 bee7 	b.w	801253c <dwt_ioctl+0x1e10>
 801176e:	2c00      	cmp	r4, #0
 8011770:	f000 875e 	beq.w	8012630 <dwt_ioctl+0x1f04>
 8011774:	8823      	ldrh	r3, [r4, #0]
 8011776:	2200      	movs	r2, #0
 8011778:	210c      	movs	r1, #12
 801177a:	f7fd f8ca 	bl	800e912 <dwt_write16bitoffsetreg>
 801177e:	2500      	movs	r5, #0
 8011780:	f000 bedc 	b.w	801253c <dwt_ioctl+0x1e10>
 8011784:	4621      	mov	r1, r4
 8011786:	f7fd f897 	bl	800e8b8 <ull_readrxtimestamp>
 801178a:	2500      	movs	r5, #0
 801178c:	f000 bed6 	b.w	801253c <dwt_ioctl+0x1e10>
 8011790:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011792:	7b9b      	ldrb	r3, [r3, #14]
 8011794:	2b01      	cmp	r3, #1
 8011796:	d00b      	beq.n	80117b0 <dwt_ioctl+0x1084>
 8011798:	2b03      	cmp	r3, #3
 801179a:	d112      	bne.n	80117c2 <dwt_ioctl+0x1096>
 801179c:	9400      	str	r4, [sp, #0]
 801179e:	2305      	movs	r3, #5
 80117a0:	2220      	movs	r2, #32
 80117a2:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80117a6:	f7fc fc36 	bl	800e016 <dwt_readfromdevice>
 80117aa:	2500      	movs	r5, #0
 80117ac:	f000 bec6 	b.w	801253c <dwt_ioctl+0x1e10>
 80117b0:	9400      	str	r4, [sp, #0]
 80117b2:	2305      	movs	r3, #5
 80117b4:	2200      	movs	r2, #0
 80117b6:	4983      	ldr	r1, [pc, #524]	; (80119c4 <dwt_ioctl+0x1298>)
 80117b8:	f7fc fc2d 	bl	800e016 <dwt_readfromdevice>
 80117bc:	2500      	movs	r5, #0
 80117be:	f000 bebd 	b.w	801253c <dwt_ioctl+0x1e10>
 80117c2:	9400      	str	r4, [sp, #0]
 80117c4:	2305      	movs	r3, #5
 80117c6:	2200      	movs	r2, #0
 80117c8:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 80117cc:	f7fc fc23 	bl	800e016 <dwt_readfromdevice>
 80117d0:	2500      	movs	r5, #0
 80117d2:	f000 beb3 	b.w	801253c <dwt_ioctl+0x1e10>
 80117d6:	2500      	movs	r5, #0
 80117d8:	f804 5b01 	strb.w	r5, [r4], #1
 80117dc:	9400      	str	r4, [sp, #0]
 80117de:	2304      	movs	r3, #4
 80117e0:	462a      	mov	r2, r5
 80117e2:	216c      	movs	r1, #108	; 0x6c
 80117e4:	f7fc fc17 	bl	800e016 <dwt_readfromdevice>
 80117e8:	f000 bea8 	b.w	801253c <dwt_ioctl+0x1e10>
 80117ec:	2c00      	cmp	r4, #0
 80117ee:	f000 8721 	beq.w	8012634 <dwt_ioctl+0x1f08>
 80117f2:	2201      	movs	r2, #1
 80117f4:	2160      	movs	r1, #96	; 0x60
 80117f6:	f7fc fc18 	bl	800e02a <dwt_read32bitoffsetreg>
 80117fa:	6020      	str	r0, [r4, #0]
 80117fc:	2500      	movs	r5, #0
 80117fe:	f000 be9d 	b.w	801253c <dwt_ioctl+0x1e10>
 8011802:	2c00      	cmp	r4, #0
 8011804:	f000 8718 	beq.w	8012638 <dwt_ioctl+0x1f0c>
 8011808:	2200      	movs	r2, #0
 801180a:	2160      	movs	r1, #96	; 0x60
 801180c:	f7fc fc0d 	bl	800e02a <dwt_read32bitoffsetreg>
 8011810:	6020      	str	r0, [r4, #0]
 8011812:	2500      	movs	r5, #0
 8011814:	f000 be92 	b.w	801253c <dwt_ioctl+0x1e10>
 8011818:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801181a:	7b9b      	ldrb	r3, [r3, #14]
 801181c:	2b01      	cmp	r3, #1
 801181e:	d00b      	beq.n	8011838 <dwt_ioctl+0x110c>
 8011820:	2b03      	cmp	r3, #3
 8011822:	d112      	bne.n	801184a <dwt_ioctl+0x111e>
 8011824:	9400      	str	r4, [sp, #0]
 8011826:	2305      	movs	r3, #5
 8011828:	2228      	movs	r2, #40	; 0x28
 801182a:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 801182e:	f7fc fbf2 	bl	800e016 <dwt_readfromdevice>
 8011832:	2500      	movs	r5, #0
 8011834:	f000 be82 	b.w	801253c <dwt_ioctl+0x1e10>
 8011838:	9400      	str	r4, [sp, #0]
 801183a:	2305      	movs	r3, #5
 801183c:	2200      	movs	r2, #0
 801183e:	4962      	ldr	r1, [pc, #392]	; (80119c8 <dwt_ioctl+0x129c>)
 8011840:	f7fc fbe9 	bl	800e016 <dwt_readfromdevice>
 8011844:	2500      	movs	r5, #0
 8011846:	f000 be79 	b.w	801253c <dwt_ioctl+0x1e10>
 801184a:	9400      	str	r4, [sp, #0]
 801184c:	2305      	movs	r3, #5
 801184e:	2200      	movs	r2, #0
 8011850:	495e      	ldr	r1, [pc, #376]	; (80119cc <dwt_ioctl+0x12a0>)
 8011852:	f7fc fbe0 	bl	800e016 <dwt_readfromdevice>
 8011856:	2500      	movs	r5, #0
 8011858:	f000 be70 	b.w	801253c <dwt_ioctl+0x1e10>
 801185c:	2c00      	cmp	r4, #0
 801185e:	f000 86ed 	beq.w	801263c <dwt_ioctl+0x1f10>
 8011862:	2200      	movs	r2, #0
 8011864:	211c      	movs	r1, #28
 8011866:	f7fc fbe0 	bl	800e02a <dwt_read32bitoffsetreg>
 801186a:	6020      	str	r0, [r4, #0]
 801186c:	2500      	movs	r5, #0
 801186e:	f000 be65 	b.w	801253c <dwt_ioctl+0x1e10>
 8011872:	2c00      	cmp	r4, #0
 8011874:	f000 86e4 	beq.w	8012640 <dwt_ioctl+0x1f14>
 8011878:	8825      	ldrh	r5, [r4, #0]
 801187a:	6867      	ldr	r7, [r4, #4]
 801187c:	7a23      	ldrb	r3, [r4, #8]
 801187e:	2b00      	cmp	r3, #0
 8011880:	f000 86e0 	beq.w	8012644 <dwt_ioctl+0x1f18>
 8011884:	463c      	mov	r4, r7
 8011886:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 801188a:	4629      	mov	r1, r5
 801188c:	4630      	mov	r0, r6
 801188e:	f7fd f889 	bl	800e9a4 <_dwt_otpread>
 8011892:	f844 0b04 	str.w	r0, [r4], #4
 8011896:	3501      	adds	r5, #1
 8011898:	b2ad      	uxth	r5, r5
 801189a:	42bc      	cmp	r4, r7
 801189c:	d1f5      	bne.n	801188a <dwt_ioctl+0x115e>
 801189e:	2500      	movs	r5, #0
 80118a0:	f000 be4c 	b.w	801253c <dwt_ioctl+0x1e10>
 80118a4:	2c00      	cmp	r4, #0
 80118a6:	f000 86cf 	beq.w	8012648 <dwt_ioctl+0x1f1c>
 80118aa:	7821      	ldrb	r1, [r4, #0]
 80118ac:	f7fd fb86 	bl	800efbc <ull_setplenfine>
 80118b0:	2500      	movs	r5, #0
 80118b2:	f000 be43 	b.w	801253c <dwt_ioctl+0x1e10>
 80118b6:	f7fe f9bf 	bl	800fc38 <ull_run_pgfcal>
 80118ba:	4605      	mov	r5, r0
 80118bc:	f000 be3e 	b.w	801253c <dwt_ioctl+0x1e10>
 80118c0:	4611      	mov	r1, r2
 80118c2:	f7fe fb23 	bl	800ff0c <ull_pgf_cal>
 80118c6:	4605      	mov	r5, r0
 80118c8:	f000 be38 	b.w	801253c <dwt_ioctl+0x1e10>
 80118cc:	2c00      	cmp	r4, #0
 80118ce:	f000 86bd 	beq.w	801264c <dwt_ioctl+0x1f20>
 80118d2:	78a5      	ldrb	r5, [r4, #2]
 80118d4:	2101      	movs	r1, #1
 80118d6:	f7fd f83b 	bl	800e950 <ull_force_clocks>
 80118da:	2100      	movs	r1, #0
 80118dc:	4630      	mov	r0, r6
 80118de:	f7fd fdbd 	bl	800f45c <ull_enable_rf_tx>
 80118e2:	4630      	mov	r0, r6
 80118e4:	f7fd fdee 	bl	800f4c4 <ull_enable_rftx_blocks>
 80118e8:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 80118ec:	2200      	movs	r2, #0
 80118ee:	4938      	ldr	r1, [pc, #224]	; (80119d0 <dwt_ioctl+0x12a4>)
 80118f0:	4630      	mov	r0, r6
 80118f2:	f7fd fa5d 	bl	800edb0 <dwt_write8bitoffsetreg>
 80118f6:	2301      	movs	r3, #1
 80118f8:	9300      	str	r3, [sp, #0]
 80118fa:	23ff      	movs	r3, #255	; 0xff
 80118fc:	2200      	movs	r2, #0
 80118fe:	4935      	ldr	r1, [pc, #212]	; (80119d4 <dwt_ioctl+0x12a8>)
 8011900:	4630      	mov	r0, r6
 8011902:	f7fd fee7 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 8011906:	4f33      	ldr	r7, [pc, #204]	; (80119d4 <dwt_ioctl+0x12a8>)
 8011908:	2500      	movs	r5, #0
 801190a:	462a      	mov	r2, r5
 801190c:	4639      	mov	r1, r7
 801190e:	4630      	mov	r0, r6
 8011910:	f7fc fbe0 	bl	800e0d4 <dwt_read8bitoffsetreg>
 8011914:	f010 0f01 	tst.w	r0, #1
 8011918:	d1f7      	bne.n	801190a <dwt_ioctl+0x11de>
 801191a:	2200      	movs	r2, #0
 801191c:	492e      	ldr	r1, [pc, #184]	; (80119d8 <dwt_ioctl+0x12ac>)
 801191e:	4630      	mov	r0, r6
 8011920:	f7fc fb99 	bl	800e056 <dwt_read16bitoffsetreg>
 8011924:	4605      	mov	r5, r0
 8011926:	4630      	mov	r0, r6
 8011928:	f7fd f9c0 	bl	800ecac <ull_disable_rftx_blocks>
 801192c:	2100      	movs	r1, #0
 801192e:	4630      	mov	r0, r6
 8011930:	f7fd f9c6 	bl	800ecc0 <ull_disable_rf_tx>
 8011934:	2105      	movs	r1, #5
 8011936:	4630      	mov	r0, r6
 8011938:	f7fd f80a 	bl	800e950 <ull_force_clocks>
 801193c:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8011940:	8025      	strh	r5, [r4, #0]
 8011942:	2500      	movs	r5, #0
 8011944:	f000 bdfa 	b.w	801253c <dwt_ioctl+0x1e10>
 8011948:	2102      	movs	r1, #2
 801194a:	f7fe f8f3 	bl	800fb34 <ull_setdwstate>
 801194e:	2101      	movs	r1, #1
 8011950:	4630      	mov	r0, r6
 8011952:	f7fe f8ef 	bl	800fb34 <ull_setdwstate>
 8011956:	2432      	movs	r4, #50	; 0x32
 8011958:	f04f 0814 	mov.w	r8, #20
 801195c:	2700      	movs	r7, #0
 801195e:	2544      	movs	r5, #68	; 0x44
 8011960:	4640      	mov	r0, r8
 8011962:	f7ef fdf6 	bl	8001552 <deca_usleep>
 8011966:	463a      	mov	r2, r7
 8011968:	4629      	mov	r1, r5
 801196a:	4630      	mov	r0, r6
 801196c:	f7fc fbb2 	bl	800e0d4 <dwt_read8bitoffsetreg>
 8011970:	f010 0f02 	tst.w	r0, #2
 8011974:	d105      	bne.n	8011982 <dwt_ioctl+0x1256>
 8011976:	1e63      	subs	r3, r4, #1
 8011978:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 801197c:	d1f0      	bne.n	8011960 <dwt_ioctl+0x1234>
 801197e:	2501      	movs	r5, #1
 8011980:	e000      	b.n	8011984 <dwt_ioctl+0x1258>
 8011982:	2500      	movs	r5, #0
 8011984:	426d      	negs	r5, r5
 8011986:	f000 bdd9 	b.w	801253c <dwt_ioctl+0x1e10>
 801198a:	2c00      	cmp	r4, #0
 801198c:	f000 8660 	beq.w	8012650 <dwt_ioctl+0x1f24>
 8011990:	7823      	ldrb	r3, [r4, #0]
 8011992:	031b      	lsls	r3, r3, #12
 8011994:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8011998:	7862      	ldrb	r2, [r4, #1]
 801199a:	2a01      	cmp	r2, #1
 801199c:	bf08      	it	eq
 801199e:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 80119a2:	9300      	str	r3, [sp, #0]
 80119a4:	f46f 43e2 	mvn.w	r3, #28928	; 0x7100
 80119a8:	2200      	movs	r2, #0
 80119aa:	490c      	ldr	r1, [pc, #48]	; (80119dc <dwt_ioctl+0x12b0>)
 80119ac:	f7fd fd22 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 80119b0:	2500      	movs	r5, #0
 80119b2:	f000 bdc3 	b.w	801253c <dwt_ioctl+0x1e10>
 80119b6:	bf00      	nop
 80119b8:	00180034 	.word	0x00180034
 80119bc:	0018002c 	.word	0x0018002c
 80119c0:	000c0014 	.word	0x000c0014
 80119c4:	00180020 	.word	0x00180020
 80119c8:	00180028 	.word	0x00180028
 80119cc:	000c0008 	.word	0x000c0008
 80119d0:	0007001c 	.word	0x0007001c
 80119d4:	00080010 	.word	0x00080010
 80119d8:	00080014 	.word	0x00080014
 80119dc:	00070014 	.word	0x00070014
 80119e0:	2c00      	cmp	r4, #0
 80119e2:	f000 8637 	beq.w	8012654 <dwt_ioctl+0x1f28>
 80119e6:	6862      	ldr	r2, [r4, #4]
 80119e8:	6821      	ldr	r1, [r4, #0]
 80119ea:	f7fd fe35 	bl	800f658 <ull_setgpiomode>
 80119ee:	2500      	movs	r5, #0
 80119f0:	f000 bda4 	b.w	801253c <dwt_ioctl+0x1e10>
 80119f4:	2c00      	cmp	r4, #0
 80119f6:	f000 862f 	beq.w	8012658 <dwt_ioctl+0x1f2c>
 80119fa:	8823      	ldrh	r3, [r4, #0]
 80119fc:	2200      	movs	r2, #0
 80119fe:	49c4      	ldr	r1, [pc, #784]	; (8011d10 <dwt_ioctl+0x15e4>)
 8011a00:	f7fc ff87 	bl	800e912 <dwt_write16bitoffsetreg>
 8011a04:	2500      	movs	r5, #0
 8011a06:	f000 bd99 	b.w	801253c <dwt_ioctl+0x1e10>
 8011a0a:	2c00      	cmp	r4, #0
 8011a0c:	f000 8626 	beq.w	801265c <dwt_ioctl+0x1f30>
 8011a10:	6862      	ldr	r2, [r4, #4]
 8011a12:	8821      	ldrh	r1, [r4, #0]
 8011a14:	f7fe faaa 	bl	800ff6c <ull_setgpiovalue>
 8011a18:	2500      	movs	r5, #0
 8011a1a:	f000 bd8f 	b.w	801253c <dwt_ioctl+0x1e10>
 8011a1e:	2c00      	cmp	r4, #0
 8011a20:	f000 861e 	beq.w	8012660 <dwt_ioctl+0x1f34>
 8011a24:	7865      	ldrb	r5, [r4, #1]
 8011a26:	7823      	ldrb	r3, [r4, #0]
 8011a28:	b18b      	cbz	r3, 8011a4e <dwt_ioctl+0x1322>
 8011a2a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011a2c:	2200      	movs	r2, #0
 8011a2e:	739a      	strb	r2, [r3, #14]
 8011a30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a34:	2208      	movs	r2, #8
 8011a36:	b37d      	cbz	r5, 8011a98 <dwt_ioctl+0x136c>
 8011a38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011a3c:	9200      	str	r2, [sp, #0]
 8011a3e:	2200      	movs	r2, #0
 8011a40:	2110      	movs	r1, #16
 8011a42:	4630      	mov	r0, r6
 8011a44:	f7fd fcd6 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 8011a48:	2500      	movs	r5, #0
 8011a4a:	f000 bd77 	b.w	801253c <dwt_ioctl+0x1e10>
 8011a4e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011a50:	2201      	movs	r2, #1
 8011a52:	739a      	strb	r2, [r3, #14]
 8011a54:	2318      	movs	r3, #24
 8011a56:	2200      	movs	r2, #0
 8011a58:	49ae      	ldr	r1, [pc, #696]	; (8011d14 <dwt_ioctl+0x15e8>)
 8011a5a:	f7fc ffc5 	bl	800e9e8 <dwt_write32bitoffsetreg>
 8011a5e:	23e8      	movs	r3, #232	; 0xe8
 8011a60:	2200      	movs	r2, #0
 8011a62:	49ad      	ldr	r1, [pc, #692]	; (8011d18 <dwt_ioctl+0x15ec>)
 8011a64:	4630      	mov	r0, r6
 8011a66:	f7fc ffbf 	bl	800e9e8 <dwt_write32bitoffsetreg>
 8011a6a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8011a6c:	7d9b      	ldrb	r3, [r3, #22]
 8011a6e:	085b      	lsrs	r3, r3, #1
 8011a70:	d003      	beq.n	8011a7a <dwt_ioctl+0x134e>
 8011a72:	f06f 0308 	mvn.w	r3, #8
 8011a76:	2200      	movs	r2, #0
 8011a78:	e7dd      	b.n	8011a36 <dwt_ioctl+0x130a>
 8011a7a:	2301      	movs	r3, #1
 8011a7c:	2200      	movs	r2, #0
 8011a7e:	49a7      	ldr	r1, [pc, #668]	; (8011d1c <dwt_ioctl+0x15f0>)
 8011a80:	4630      	mov	r0, r6
 8011a82:	f7fd f995 	bl	800edb0 <dwt_write8bitoffsetreg>
 8011a86:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8011a88:	7d93      	ldrb	r3, [r2, #22]
 8011a8a:	f043 0302 	orr.w	r3, r3, #2
 8011a8e:	7593      	strb	r3, [r2, #22]
 8011a90:	f06f 0308 	mvn.w	r3, #8
 8011a94:	2200      	movs	r2, #0
 8011a96:	e7ce      	b.n	8011a36 <dwt_ioctl+0x130a>
 8011a98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011a9c:	e7ce      	b.n	8011a3c <dwt_ioctl+0x1310>
 8011a9e:	2c00      	cmp	r4, #0
 8011aa0:	f000 85e0 	beq.w	8012664 <dwt_ioctl+0x1f38>
 8011aa4:	6823      	ldr	r3, [r4, #0]
 8011aa6:	2200      	movs	r2, #0
 8011aa8:	2130      	movs	r1, #48	; 0x30
 8011aaa:	f7fc ff9d 	bl	800e9e8 <dwt_write32bitoffsetreg>
 8011aae:	2500      	movs	r5, #0
 8011ab0:	f000 bd44 	b.w	801253c <dwt_ioctl+0x1e10>
 8011ab4:	2c00      	cmp	r4, #0
 8011ab6:	f000 85d7 	beq.w	8012668 <dwt_ioctl+0x1f3c>
 8011aba:	2200      	movs	r2, #0
 8011abc:	4629      	mov	r1, r5
 8011abe:	f7fc fab4 	bl	800e02a <dwt_read32bitoffsetreg>
 8011ac2:	6020      	str	r0, [r4, #0]
 8011ac4:	2500      	movs	r5, #0
 8011ac6:	f000 bd39 	b.w	801253c <dwt_ioctl+0x1e10>
 8011aca:	4623      	mov	r3, r4
 8011acc:	2200      	movs	r2, #0
 8011ace:	4629      	mov	r1, r5
 8011ad0:	f7fc ff8a 	bl	800e9e8 <dwt_write32bitoffsetreg>
 8011ad4:	2500      	movs	r5, #0
 8011ad6:	f000 bd31 	b.w	801253c <dwt_ioctl+0x1e10>
 8011ada:	2c00      	cmp	r4, #0
 8011adc:	f000 85c6 	beq.w	801266c <dwt_ioctl+0x1f40>
 8011ae0:	2203      	movs	r2, #3
 8011ae2:	498f      	ldr	r1, [pc, #572]	; (8011d20 <dwt_ioctl+0x15f4>)
 8011ae4:	f7fc faf6 	bl	800e0d4 <dwt_read8bitoffsetreg>
 8011ae8:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8011aec:	7020      	strb	r0, [r4, #0]
 8011aee:	2500      	movs	r5, #0
 8011af0:	f000 bd24 	b.w	801253c <dwt_ioctl+0x1e10>
 8011af4:	2c00      	cmp	r4, #0
 8011af6:	f000 85bb 	beq.w	8012670 <dwt_ioctl+0x1f44>
 8011afa:	6823      	ldr	r3, [r4, #0]
 8011afc:	2200      	movs	r2, #0
 8011afe:	2144      	movs	r1, #68	; 0x44
 8011b00:	f7fc ff72 	bl	800e9e8 <dwt_write32bitoffsetreg>
 8011b04:	2500      	movs	r5, #0
 8011b06:	f000 bd19 	b.w	801253c <dwt_ioctl+0x1e10>
 8011b0a:	2c00      	cmp	r4, #0
 8011b0c:	f000 85b2 	beq.w	8012674 <dwt_ioctl+0x1f48>
 8011b10:	8823      	ldrh	r3, [r4, #0]
 8011b12:	2200      	movs	r2, #0
 8011b14:	2148      	movs	r1, #72	; 0x48
 8011b16:	f7fc fefc 	bl	800e912 <dwt_write16bitoffsetreg>
 8011b1a:	2500      	movs	r5, #0
 8011b1c:	f000 bd0e 	b.w	801253c <dwt_ioctl+0x1e10>
 8011b20:	2c00      	cmp	r4, #0
 8011b22:	f000 85a9 	beq.w	8012678 <dwt_ioctl+0x1f4c>
 8011b26:	2200      	movs	r2, #0
 8011b28:	2144      	movs	r1, #68	; 0x44
 8011b2a:	f7fc fa7e 	bl	800e02a <dwt_read32bitoffsetreg>
 8011b2e:	6020      	str	r0, [r4, #0]
 8011b30:	2500      	movs	r5, #0
 8011b32:	f000 bd03 	b.w	801253c <dwt_ioctl+0x1e10>
 8011b36:	2c00      	cmp	r4, #0
 8011b38:	f000 85a0 	beq.w	801267c <dwt_ioctl+0x1f50>
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	2148      	movs	r1, #72	; 0x48
 8011b40:	f7fc fa89 	bl	800e056 <dwt_read16bitoffsetreg>
 8011b44:	6020      	str	r0, [r4, #0]
 8011b46:	2500      	movs	r5, #0
 8011b48:	f000 bcf8 	b.w	801253c <dwt_ioctl+0x1e10>
 8011b4c:	2c00      	cmp	r4, #0
 8011b4e:	f000 8597 	beq.w	8012680 <dwt_ioctl+0x1f54>
 8011b52:	7823      	ldrb	r3, [r4, #0]
 8011b54:	2200      	movs	r2, #0
 8011b56:	4973      	ldr	r1, [pc, #460]	; (8011d24 <dwt_ioctl+0x15f8>)
 8011b58:	f7fd f92a 	bl	800edb0 <dwt_write8bitoffsetreg>
 8011b5c:	2500      	movs	r5, #0
 8011b5e:	f000 bced 	b.w	801253c <dwt_ioctl+0x1e10>
 8011b62:	2c00      	cmp	r4, #0
 8011b64:	f000 858e 	beq.w	8012684 <dwt_ioctl+0x1f58>
 8011b68:	2200      	movs	r2, #0
 8011b6a:	2144      	movs	r1, #68	; 0x44
 8011b6c:	f7fc fab2 	bl	800e0d4 <dwt_read8bitoffsetreg>
 8011b70:	7020      	strb	r0, [r4, #0]
 8011b72:	2500      	movs	r5, #0
 8011b74:	f000 bce2 	b.w	801253c <dwt_ioctl+0x1e10>
 8011b78:	2c00      	cmp	r4, #0
 8011b7a:	f000 8585 	beq.w	8012688 <dwt_ioctl+0x1f5c>
 8011b7e:	f7fd f923 	bl	800edc8 <ull_getframelength>
 8011b82:	6020      	str	r0, [r4, #0]
 8011b84:	2500      	movs	r5, #0
 8011b86:	f000 bcd9 	b.w	801253c <dwt_ioctl+0x1e10>
 8011b8a:	2c00      	cmp	r4, #0
 8011b8c:	f000 857e 	beq.w	801268c <dwt_ioctl+0x1f60>
 8011b90:	2200      	movs	r2, #0
 8011b92:	4965      	ldr	r1, [pc, #404]	; (8011d28 <dwt_ioctl+0x15fc>)
 8011b94:	f7fc fa5f 	bl	800e056 <dwt_read16bitoffsetreg>
 8011b98:	8020      	strh	r0, [r4, #0]
 8011b9a:	2500      	movs	r5, #0
 8011b9c:	f000 bcce 	b.w	801253c <dwt_ioctl+0x1e10>
 8011ba0:	2c00      	cmp	r4, #0
 8011ba2:	f000 8575 	beq.w	8012690 <dwt_ioctl+0x1f64>
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	4960      	ldr	r1, [pc, #384]	; (8011d2c <dwt_ioctl+0x1600>)
 8011baa:	f7fc fa3e 	bl	800e02a <dwt_read32bitoffsetreg>
 8011bae:	6020      	str	r0, [r4, #0]
 8011bb0:	2500      	movs	r5, #0
 8011bb2:	f000 bcc3 	b.w	801253c <dwt_ioctl+0x1e10>
 8011bb6:	2c00      	cmp	r4, #0
 8011bb8:	f000 856c 	beq.w	8012694 <dwt_ioctl+0x1f68>
 8011bbc:	8823      	ldrh	r3, [r4, #0]
 8011bbe:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011bc2:	9300      	str	r3, [sp, #0]
 8011bc4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8011bc8:	2200      	movs	r2, #0
 8011bca:	4958      	ldr	r1, [pc, #352]	; (8011d2c <dwt_ioctl+0x1600>)
 8011bcc:	f7fe f912 	bl	800fdf4 <dwt_modify16bitoffsetreg>
 8011bd0:	2500      	movs	r5, #0
 8011bd2:	f000 bcb3 	b.w	801253c <dwt_ioctl+0x1e10>
 8011bd6:	2c00      	cmp	r4, #0
 8011bd8:	f000 855e 	beq.w	8012698 <dwt_ioctl+0x1f6c>
 8011bdc:	88a7      	ldrh	r7, [r4, #4]
 8011bde:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8011be2:	7b23      	ldrb	r3, [r4, #12]
 8011be4:	9306      	str	r3, [sp, #24]
 8011be6:	6922      	ldr	r2, [r4, #16]
 8011be8:	9204      	str	r2, [sp, #16]
 8011bea:	6962      	ldr	r2, [r4, #20]
 8011bec:	9205      	str	r2, [sp, #20]
 8011bee:	f00b 0203 	and.w	r2, fp, #3
 8011bf2:	f3cb 0585 	ubfx	r5, fp, #2, #6
 8011bf6:	2b05      	cmp	r3, #5
 8011bf8:	d147      	bne.n	8011c8a <dwt_ioctl+0x155e>
 8011bfa:	f5b7 7fb1 	cmp.w	r7, #354	; 0x162
 8011bfe:	bf28      	it	cs
 8011c00:	f44f 77b1 	movcs.w	r7, #354	; 0x162
 8011c04:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8011d34 <dwt_ioctl+0x1608>
 8011c08:	2f04      	cmp	r7, #4
 8011c0a:	d805      	bhi.n	8011c18 <dwt_ioctl+0x14ec>
 8011c0c:	eb09 0305 	add.w	r3, r9, r5
 8011c10:	785b      	ldrb	r3, [r3, #1]
 8011c12:	3b05      	subs	r3, #5
 8011c14:	429f      	cmp	r7, r3
 8011c16:	db40      	blt.n	8011c9a <dwt_ioctl+0x156e>
 8011c18:	2a01      	cmp	r2, #1
 8011c1a:	f200 80c8 	bhi.w	8011dae <dwt_ioctl+0x1682>
 8011c1e:	4b44      	ldr	r3, [pc, #272]	; (8011d30 <dwt_ioctl+0x1604>)
 8011c20:	5c99      	ldrb	r1, [r3, r2]
 8011c22:	463e      	mov	r6, r7
 8011c24:	42b9      	cmp	r1, r7
 8011c26:	f280 80c4 	bge.w	8011db2 <dwt_ioctl+0x1686>
 8011c2a:	1c50      	adds	r0, r2, #1
 8011c2c:	fa53 f080 	uxtab	r0, r3, r0
 8011c30:	2300      	movs	r3, #0
 8011c32:	440b      	add	r3, r1
 8011c34:	b29b      	uxth	r3, r3
 8011c36:	3201      	adds	r2, #1
 8011c38:	b2d2      	uxtb	r2, r2
 8011c3a:	2a02      	cmp	r2, #2
 8011c3c:	d005      	beq.n	8011c4a <dwt_ioctl+0x151e>
 8011c3e:	f810 1b01 	ldrb.w	r1, [r0], #1
 8011c42:	eba6 0c03 	sub.w	ip, r6, r3
 8011c46:	4561      	cmp	r1, ip
 8011c48:	dbf3      	blt.n	8011c32 <dwt_ioctl+0x1506>
 8011c4a:	429f      	cmp	r7, r3
 8011c4c:	bf08      	it	eq
 8011c4e:	9503      	streq	r5, [sp, #12]
 8011c50:	f000 80b4 	beq.w	8011dbc <dwt_ioctl+0x1690>
 8011c54:	f107 0c05 	add.w	ip, r7, #5
 8011c58:	fa1f fc8c 	uxth.w	ip, ip
 8011c5c:	2680      	movs	r6, #128	; 0x80
 8011c5e:	2100      	movs	r1, #0
 8011c60:	9107      	str	r1, [sp, #28]
 8011c62:	9103      	str	r1, [sp, #12]
 8011c64:	9108      	str	r1, [sp, #32]
 8011c66:	2005      	movs	r0, #5
 8011c68:	46b8      	mov	r8, r7
 8011c6a:	4287      	cmp	r7, r0
 8011c6c:	bf38      	it	cc
 8011c6e:	4680      	movcc	r8, r0
 8011c70:	f1a8 0805 	sub.w	r8, r8, #5
 8011c74:	fa1f f888 	uxth.w	r8, r8
 8011c78:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 8011d30 <dwt_ioctl+0x1604>
 8011c7c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8011c80:	4683      	mov	fp, r0
 8011c82:	4620      	mov	r0, r4
 8011c84:	460c      	mov	r4, r1
 8011c86:	4686      	mov	lr, r0
 8011c88:	e031      	b.n	8011cee <dwt_ioctl+0x15c2>
 8011c8a:	f240 1331 	movw	r3, #305	; 0x131
 8011c8e:	429f      	cmp	r7, r3
 8011c90:	bf28      	it	cs
 8011c92:	461f      	movcs	r7, r3
 8011c94:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8011d38 <dwt_ioctl+0x160c>
 8011c98:	e7b6      	b.n	8011c08 <dwt_ioctl+0x14dc>
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	9a05      	ldr	r2, [sp, #20]
 8011c9e:	8013      	strh	r3, [r2, #0]
 8011ca0:	9a04      	ldr	r2, [sp, #16]
 8011ca2:	f8c2 b000 	str.w	fp, [r2]
 8011ca6:	e098      	b.n	8011dda <dwt_ioctl+0x16ae>
 8011ca8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8011cac:	4674      	mov	r4, lr
 8011cae:	2300      	movs	r3, #0
 8011cb0:	9a05      	ldr	r2, [sp, #20]
 8011cb2:	8013      	strh	r3, [r2, #0]
 8011cb4:	9b04      	ldr	r3, [sp, #16]
 8011cb6:	f8c3 b000 	str.w	fp, [r3]
 8011cba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011cbe:	e08c      	b.n	8011dda <dwt_ioctl+0x16ae>
 8011cc0:	fa1f fb80 	uxth.w	fp, r0
 8011cc4:	9207      	str	r2, [sp, #28]
 8011cc6:	9503      	str	r5, [sp, #12]
 8011cc8:	9308      	str	r3, [sp, #32]
 8011cca:	2401      	movs	r4, #1
 8011ccc:	2d3f      	cmp	r5, #63	; 0x3f
 8011cce:	d050      	beq.n	8011d72 <dwt_ioctl+0x1646>
 8011cd0:	2900      	cmp	r1, #0
 8011cd2:	d139      	bne.n	8011d48 <dwt_ioctl+0x161c>
 8011cd4:	3501      	adds	r5, #1
 8011cd6:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8011cda:	f819 0005 	ldrb.w	r0, [r9, r5]
 8011cde:	4403      	add	r3, r0
 8011ce0:	b29b      	uxth	r3, r3
 8011ce2:	429f      	cmp	r7, r3
 8011ce4:	d067      	beq.n	8011db6 <dwt_ioctl+0x168a>
 8011ce6:	3e01      	subs	r6, #1
 8011ce8:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8011cec:	d0dc      	beq.n	8011ca8 <dwt_ioctl+0x157c>
 8011cee:	4543      	cmp	r3, r8
 8011cf0:	d924      	bls.n	8011d3c <dwt_ioctl+0x1610>
 8011cf2:	4563      	cmp	r3, ip
 8011cf4:	d222      	bcs.n	8011d3c <dwt_ioctl+0x1610>
 8011cf6:	1af8      	subs	r0, r7, r3
 8011cf8:	b200      	sxth	r0, r0
 8011cfa:	2800      	cmp	r0, #0
 8011cfc:	bfb8      	it	lt
 8011cfe:	4240      	neglt	r0, r0
 8011d00:	4558      	cmp	r0, fp
 8011d02:	dddd      	ble.n	8011cc0 <dwt_ioctl+0x1594>
 8011d04:	2c00      	cmp	r4, #0
 8011d06:	d0e1      	beq.n	8011ccc <dwt_ioctl+0x15a0>
 8011d08:	4674      	mov	r4, lr
 8011d0a:	9a07      	ldr	r2, [sp, #28]
 8011d0c:	9b08      	ldr	r3, [sp, #32]
 8011d0e:	e055      	b.n	8011dbc <dwt_ioctl+0x1690>
 8011d10:	00050008 	.word	0x00050008
 8011d14:	001f000c 	.word	0x001f000c
 8011d18:	001f0010 	.word	0x001f0010
 8011d1c:	00010020 	.word	0x00010020
 8011d20:	00030054 	.word	0x00030054
 8011d24:	00010018 	.word	0x00010018
 8011d28:	0005002c 	.word	0x0005002c
 8011d2c:	000e001c 	.word	0x000e001c
 8011d30:	08016084 	.word	0x08016084
 8011d34:	08016004 	.word	0x08016004
 8011d38:	08016044 	.word	0x08016044
 8011d3c:	b984      	cbnz	r4, 8011d60 <dwt_ioctl+0x1634>
 8011d3e:	4563      	cmp	r3, ip
 8011d40:	d3c4      	bcc.n	8011ccc <dwt_ioctl+0x15a0>
 8011d42:	b199      	cbz	r1, 8011d6c <dwt_ioctl+0x1640>
 8011d44:	2d3f      	cmp	r5, #63	; 0x3f
 8011d46:	d014      	beq.n	8011d72 <dwt_ioctl+0x1646>
 8011d48:	f819 1005 	ldrb.w	r1, [r9, r5]
 8011d4c:	1a5b      	subs	r3, r3, r1
 8011d4e:	b29b      	uxth	r3, r3
 8011d50:	1e69      	subs	r1, r5, #1
 8011d52:	f001 053f 	and.w	r5, r1, #63	; 0x3f
 8011d56:	f011 013f 	ands.w	r1, r1, #63	; 0x3f
 8011d5a:	bf18      	it	ne
 8011d5c:	2101      	movne	r1, #1
 8011d5e:	e7c0      	b.n	8011ce2 <dwt_ioctl+0x15b6>
 8011d60:	4674      	mov	r4, lr
 8011d62:	f819 1005 	ldrb.w	r1, [r9, r5]
 8011d66:	1a5b      	subs	r3, r3, r1
 8011d68:	b29b      	uxth	r3, r3
 8011d6a:	e027      	b.n	8011dbc <dwt_ioctl+0x1690>
 8011d6c:	4674      	mov	r4, lr
 8011d6e:	9503      	str	r5, [sp, #12]
 8011d70:	e024      	b.n	8011dbc <dwt_ioctl+0x1690>
 8011d72:	2c00      	cmp	r4, #0
 8011d74:	d134      	bne.n	8011de0 <dwt_ioctl+0x16b4>
 8011d76:	2a03      	cmp	r2, #3
 8011d78:	d036      	beq.n	8011de8 <dwt_ioctl+0x16bc>
 8011d7a:	2a02      	cmp	r2, #2
 8011d7c:	d009      	beq.n	8011d92 <dwt_ioctl+0x1666>
 8011d7e:	f81a 1002 	ldrb.w	r1, [sl, r2]
 8011d82:	1858      	adds	r0, r3, r1
 8011d84:	42b8      	cmp	r0, r7
 8011d86:	dd0b      	ble.n	8011da0 <dwt_ioctl+0x1674>
 8011d88:	440b      	add	r3, r1
 8011d8a:	b29b      	uxth	r3, r3
 8011d8c:	3201      	adds	r2, #1
 8011d8e:	b2d2      	uxtb	r2, r2
 8011d90:	e7da      	b.n	8011d48 <dwt_ioctl+0x161c>
 8011d92:	9906      	ldr	r1, [sp, #24]
 8011d94:	2909      	cmp	r1, #9
 8011d96:	d1f2      	bne.n	8011d7e <dwt_ioctl+0x1652>
 8011d98:	4674      	mov	r4, lr
 8011d9a:	213f      	movs	r1, #63	; 0x3f
 8011d9c:	9103      	str	r1, [sp, #12]
 8011d9e:	e00d      	b.n	8011dbc <dwt_ioctl+0x1690>
 8011da0:	4674      	mov	r4, lr
 8011da2:	b283      	uxth	r3, r0
 8011da4:	3201      	adds	r2, #1
 8011da6:	b2d2      	uxtb	r2, r2
 8011da8:	213f      	movs	r1, #63	; 0x3f
 8011daa:	9103      	str	r1, [sp, #12]
 8011dac:	e006      	b.n	8011dbc <dwt_ioctl+0x1690>
 8011dae:	2300      	movs	r3, #0
 8011db0:	e74b      	b.n	8011c4a <dwt_ioctl+0x151e>
 8011db2:	2300      	movs	r3, #0
 8011db4:	e749      	b.n	8011c4a <dwt_ioctl+0x151e>
 8011db6:	4674      	mov	r4, lr
 8011db8:	9503      	str	r5, [sp, #12]
 8011dba:	463b      	mov	r3, r7
 8011dbc:	9905      	ldr	r1, [sp, #20]
 8011dbe:	800b      	strh	r3, [r1, #0]
 8011dc0:	9b03      	ldr	r3, [sp, #12]
 8011dc2:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
 8011dc6:	b2db      	uxtb	r3, r3
 8011dc8:	041a      	lsls	r2, r3, #16
 8011dca:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8011dce:	431a      	orrs	r2, r3
 8011dd0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8011dd4:	9a04      	ldr	r2, [sp, #16]
 8011dd6:	6013      	str	r3, [r2, #0]
 8011dd8:	2300      	movs	r3, #0
 8011dda:	6023      	str	r3, [r4, #0]
 8011ddc:	2500      	movs	r5, #0
 8011dde:	e3ad      	b.n	801253c <dwt_ioctl+0x1e10>
 8011de0:	4674      	mov	r4, lr
 8011de2:	9a07      	ldr	r2, [sp, #28]
 8011de4:	9b08      	ldr	r3, [sp, #32]
 8011de6:	e7e9      	b.n	8011dbc <dwt_ioctl+0x1690>
 8011de8:	4674      	mov	r4, lr
 8011dea:	213f      	movs	r1, #63	; 0x3f
 8011dec:	9103      	str	r1, [sp, #12]
 8011dee:	e7e5      	b.n	8011dbc <dwt_ioctl+0x1690>
 8011df0:	2c00      	cmp	r4, #0
 8011df2:	f000 8453 	beq.w	801269c <dwt_ioctl+0x1f70>
 8011df6:	7827      	ldrb	r7, [r4, #0]
 8011df8:	7864      	ldrb	r4, [r4, #1]
 8011dfa:	f7ef fb81 	bl	8001500 <decamutexon>
 8011dfe:	4605      	mov	r5, r0
 8011e00:	2c02      	cmp	r4, #2
 8011e02:	d00e      	beq.n	8011e22 <dwt_ioctl+0x16f6>
 8011e04:	2c04      	cmp	r4, #4
 8011e06:	d00c      	beq.n	8011e22 <dwt_ioctl+0x16f6>
 8011e08:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
 8011e0c:	2c01      	cmp	r4, #1
 8011e0e:	d019      	beq.n	8011e44 <dwt_ioctl+0x1718>
 8011e10:	43fb      	mvns	r3, r7
 8011e12:	2200      	movs	r2, #0
 8011e14:	9200      	str	r2, [sp, #0]
 8011e16:	b2db      	uxtb	r3, r3
 8011e18:	49c1      	ldr	r1, [pc, #772]	; (8012120 <dwt_ioctl+0x19f4>)
 8011e1a:	4630      	mov	r0, r6
 8011e1c:	f7fd fc5a 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 8011e20:	e005      	b.n	8011e2e <dwt_ioctl+0x1702>
 8011e22:	463b      	mov	r3, r7
 8011e24:	2200      	movs	r2, #0
 8011e26:	49be      	ldr	r1, [pc, #760]	; (8012120 <dwt_ioctl+0x19f4>)
 8011e28:	4630      	mov	r0, r6
 8011e2a:	f7fc ffc1 	bl	800edb0 <dwt_write8bitoffsetreg>
 8011e2e:	463b      	mov	r3, r7
 8011e30:	2200      	movs	r2, #0
 8011e32:	49bc      	ldr	r1, [pc, #752]	; (8012124 <dwt_ioctl+0x19f8>)
 8011e34:	4630      	mov	r0, r6
 8011e36:	f7fc fdd7 	bl	800e9e8 <dwt_write32bitoffsetreg>
 8011e3a:	4628      	mov	r0, r5
 8011e3c:	f7ef fb71 	bl	8001522 <decamutexoff>
 8011e40:	2500      	movs	r5, #0
 8011e42:	e37b      	b.n	801253c <dwt_ioctl+0x1e10>
 8011e44:	9700      	str	r7, [sp, #0]
 8011e46:	23ff      	movs	r3, #255	; 0xff
 8011e48:	2200      	movs	r2, #0
 8011e4a:	49b5      	ldr	r1, [pc, #724]	; (8012120 <dwt_ioctl+0x19f4>)
 8011e4c:	4630      	mov	r0, r6
 8011e4e:	f7fd fc41 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 8011e52:	e7ec      	b.n	8011e2e <dwt_ioctl+0x1702>
 8011e54:	2302      	movs	r3, #2
 8011e56:	9301      	str	r3, [sp, #4]
 8011e58:	2500      	movs	r5, #0
 8011e5a:	9500      	str	r5, [sp, #0]
 8011e5c:	462b      	mov	r3, r5
 8011e5e:	462a      	mov	r2, r5
 8011e60:	211a      	movs	r1, #26
 8011e62:	f7fc f85a 	bl	800df1a <dwt_xfer3xxx>
 8011e66:	e369      	b.n	801253c <dwt_ioctl+0x1e10>
 8011e68:	f7fe fc4c 	bl	8010704 <ull_softreset_fcmd>
 8011e6c:	2500      	movs	r5, #0
 8011e6e:	e365      	b.n	801253c <dwt_ioctl+0x1e10>
 8011e70:	f7fe fc34 	bl	80106dc <ull_softreset_no_sema_fcmd>
 8011e74:	2500      	movs	r5, #0
 8011e76:	e361      	b.n	801253c <dwt_ioctl+0x1e10>
 8011e78:	2302      	movs	r3, #2
 8011e7a:	9301      	str	r3, [sp, #4]
 8011e7c:	2500      	movs	r5, #0
 8011e7e:	9500      	str	r5, [sp, #0]
 8011e80:	462b      	mov	r3, r5
 8011e82:	462a      	mov	r2, r5
 8011e84:	2114      	movs	r1, #20
 8011e86:	f7fc f848 	bl	800df1a <dwt_xfer3xxx>
 8011e8a:	e357      	b.n	801253c <dwt_ioctl+0x1e10>
 8011e8c:	2402      	movs	r4, #2
 8011e8e:	9401      	str	r4, [sp, #4]
 8011e90:	2500      	movs	r5, #0
 8011e92:	9500      	str	r5, [sp, #0]
 8011e94:	462b      	mov	r3, r5
 8011e96:	462a      	mov	r2, r5
 8011e98:	2115      	movs	r1, #21
 8011e9a:	f7fc f83e 	bl	800df1a <dwt_xfer3xxx>
 8011e9e:	9401      	str	r4, [sp, #4]
 8011ea0:	9500      	str	r5, [sp, #0]
 8011ea2:	462b      	mov	r3, r5
 8011ea4:	462a      	mov	r2, r5
 8011ea6:	2115      	movs	r1, #21
 8011ea8:	4630      	mov	r0, r6
 8011eaa:	f7fc f836 	bl	800df1a <dwt_xfer3xxx>
 8011eae:	e345      	b.n	801253c <dwt_ioctl+0x1e10>
 8011eb0:	2302      	movs	r3, #2
 8011eb2:	9301      	str	r3, [sp, #4]
 8011eb4:	2500      	movs	r5, #0
 8011eb6:	9500      	str	r5, [sp, #0]
 8011eb8:	462b      	mov	r3, r5
 8011eba:	462a      	mov	r2, r5
 8011ebc:	2116      	movs	r1, #22
 8011ebe:	f7fc f82c 	bl	800df1a <dwt_xfer3xxx>
 8011ec2:	e33b      	b.n	801253c <dwt_ioctl+0x1e10>
 8011ec4:	2c00      	cmp	r4, #0
 8011ec6:	f000 83eb 	beq.w	80126a0 <dwt_ioctl+0x1f74>
 8011eca:	b932      	cbnz	r2, 8011eda <dwt_ioctl+0x17ae>
 8011ecc:	2200      	movs	r2, #0
 8011ece:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8011ed2:	f7fc f8ff 	bl	800e0d4 <dwt_read8bitoffsetreg>
 8011ed6:	7020      	strb	r0, [r4, #0]
 8011ed8:	e330      	b.n	801253c <dwt_ioctl+0x1e10>
 8011eda:	2201      	movs	r2, #1
 8011edc:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8011ee0:	f7fc f8f8 	bl	800e0d4 <dwt_read8bitoffsetreg>
 8011ee4:	7020      	strb	r0, [r4, #0]
 8011ee6:	2500      	movs	r5, #0
 8011ee8:	e328      	b.n	801253c <dwt_ioctl+0x1e10>
 8011eea:	2c00      	cmp	r4, #0
 8011eec:	f000 83da 	beq.w	80126a4 <dwt_ioctl+0x1f78>
 8011ef0:	7824      	ldrb	r4, [r4, #0]
 8011ef2:	2200      	movs	r2, #0
 8011ef4:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8011ef8:	f7fc f8ec 	bl	800e0d4 <dwt_read8bitoffsetreg>
 8011efc:	f000 039f 	and.w	r3, r0, #159	; 0x9f
 8011f00:	4323      	orrs	r3, r4
 8011f02:	2200      	movs	r2, #0
 8011f04:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8011f08:	4630      	mov	r0, r6
 8011f0a:	f7fc ff51 	bl	800edb0 <dwt_write8bitoffsetreg>
 8011f0e:	2500      	movs	r5, #0
 8011f10:	e314      	b.n	801253c <dwt_ioctl+0x1e10>
 8011f12:	2c00      	cmp	r4, #0
 8011f14:	f000 83c8 	beq.w	80126a8 <dwt_ioctl+0x1f7c>
 8011f18:	7824      	ldrb	r4, [r4, #0]
 8011f1a:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
 8011f1e:	d01d      	beq.n	8011f5c <dwt_ioctl+0x1830>
 8011f20:	2d01      	cmp	r5, #1
 8011f22:	f040 83c3 	bne.w	80126ac <dwt_ioctl+0x1f80>
 8011f26:	2502      	movs	r5, #2
 8011f28:	2201      	movs	r2, #1
 8011f2a:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8011f2e:	4630      	mov	r0, r6
 8011f30:	f7fc f8d0 	bl	800e0d4 <dwt_read8bitoffsetreg>
 8011f34:	b9a4      	cbnz	r4, 8011f60 <dwt_ioctl+0x1834>
 8011f36:	ea20 0305 	bic.w	r3, r0, r5
 8011f3a:	b2db      	uxtb	r3, r3
 8011f3c:	2201      	movs	r2, #1
 8011f3e:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8011f42:	4630      	mov	r0, r6
 8011f44:	f7fc ff34 	bl	800edb0 <dwt_write8bitoffsetreg>
 8011f48:	2200      	movs	r2, #0
 8011f4a:	2110      	movs	r1, #16
 8011f4c:	4630      	mov	r0, r6
 8011f4e:	f7fc f86c 	bl	800e02a <dwt_read32bitoffsetreg>
 8011f52:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8011f56:	d00a      	beq.n	8011f6e <dwt_ioctl+0x1842>
 8011f58:	2500      	movs	r5, #0
 8011f5a:	e2ef      	b.n	801253c <dwt_ioctl+0x1e10>
 8011f5c:	2504      	movs	r5, #4
 8011f5e:	e7e3      	b.n	8011f28 <dwt_ioctl+0x17fc>
 8011f60:	2c01      	cmp	r4, #1
 8011f62:	f040 83a6 	bne.w	80126b2 <dwt_ioctl+0x1f86>
 8011f66:	ea40 0305 	orr.w	r3, r0, r5
 8011f6a:	b2db      	uxtb	r3, r3
 8011f6c:	e7e6      	b.n	8011f3c <dwt_ioctl+0x1810>
 8011f6e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011f72:	9300      	str	r3, [sp, #0]
 8011f74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011f78:	2200      	movs	r2, #0
 8011f7a:	2110      	movs	r1, #16
 8011f7c:	4630      	mov	r0, r6
 8011f7e:	f7fd fa39 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 8011f82:	2500      	movs	r5, #0
 8011f84:	e2da      	b.n	801253c <dwt_ioctl+0x1e10>
 8011f86:	2c00      	cmp	r4, #0
 8011f88:	f000 8396 	beq.w	80126b8 <dwt_ioctl+0x1f8c>
 8011f8c:	7823      	ldrb	r3, [r4, #0]
 8011f8e:	035b      	lsls	r3, r3, #13
 8011f90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011f94:	9300      	str	r3, [sp, #0]
 8011f96:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	4962      	ldr	r1, [pc, #392]	; (8012128 <dwt_ioctl+0x19fc>)
 8011f9e:	f7fd ff29 	bl	800fdf4 <dwt_modify16bitoffsetreg>
 8011fa2:	2500      	movs	r5, #0
 8011fa4:	e2ca      	b.n	801253c <dwt_ioctl+0x1e10>
 8011fa6:	2c00      	cmp	r4, #0
 8011fa8:	f000 8388 	beq.w	80126bc <dwt_ioctl+0x1f90>
 8011fac:	7825      	ldrb	r5, [r4, #0]
 8011fae:	6862      	ldr	r2, [r4, #4]
 8011fb0:	2a01      	cmp	r2, #1
 8011fb2:	bf15      	itete	ne
 8011fb4:	f46f 3360 	mvnne.w	r3, #229376	; 0x38000
 8011fb8:	f46f 43e0 	mvneq.w	r3, #28672	; 0x7000
 8011fbc:	27df      	movne	r7, #223	; 0xdf
 8011fbe:	27ef      	moveq	r7, #239	; 0xef
 8011fc0:	bf14      	ite	ne
 8011fc2:	f04f 0820 	movne.w	r8, #32
 8011fc6:	f04f 0810 	moveq.w	r8, #16
 8011fca:	2400      	movs	r4, #0
 8011fcc:	9400      	str	r4, [sp, #0]
 8011fce:	4622      	mov	r2, r4
 8011fd0:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8011fd4:	f7fd fa0e 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 8011fd8:	9400      	str	r4, [sp, #0]
 8011fda:	463b      	mov	r3, r7
 8011fdc:	4622      	mov	r2, r4
 8011fde:	4953      	ldr	r1, [pc, #332]	; (801212c <dwt_ioctl+0x1a00>)
 8011fe0:	4630      	mov	r0, r6
 8011fe2:	f7fd fb77 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 8011fe6:	2d01      	cmp	r5, #1
 8011fe8:	d002      	beq.n	8011ff0 <dwt_ioctl+0x18c4>
 8011fea:	b155      	cbz	r5, 8012002 <dwt_ioctl+0x18d6>
 8011fec:	2500      	movs	r5, #0
 8011fee:	e2a5      	b.n	801253c <dwt_ioctl+0x1e10>
 8011ff0:	4625      	mov	r5, r4
 8011ff2:	9400      	str	r4, [sp, #0]
 8011ff4:	463b      	mov	r3, r7
 8011ff6:	4622      	mov	r2, r4
 8011ff8:	494d      	ldr	r1, [pc, #308]	; (8012130 <dwt_ioctl+0x1a04>)
 8011ffa:	4630      	mov	r0, r6
 8011ffc:	f7fd fb6a 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 8012000:	e29c      	b.n	801253c <dwt_ioctl+0x1e10>
 8012002:	f8cd 8000 	str.w	r8, [sp]
 8012006:	23ff      	movs	r3, #255	; 0xff
 8012008:	2200      	movs	r2, #0
 801200a:	4949      	ldr	r1, [pc, #292]	; (8012130 <dwt_ioctl+0x1a04>)
 801200c:	4630      	mov	r0, r6
 801200e:	f7fd fb61 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 8012012:	e293      	b.n	801253c <dwt_ioctl+0x1e10>
 8012014:	2c00      	cmp	r4, #0
 8012016:	f000 8353 	beq.w	80126c0 <dwt_ioctl+0x1f94>
 801201a:	7822      	ldrb	r2, [r4, #0]
 801201c:	f012 0f01 	tst.w	r2, #1
 8012020:	d02c      	beq.n	801207c <dwt_ioctl+0x1950>
 8012022:	0157      	lsls	r7, r2, #5
 8012024:	f007 0740 	and.w	r7, r7, #64	; 0x40
 8012028:	2440      	movs	r4, #64	; 0x40
 801202a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 801202e:	f012 0f04 	tst.w	r2, #4
 8012032:	d027      	beq.n	8012084 <dwt_ioctl+0x1958>
 8012034:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 8012038:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 801203c:	0112      	lsls	r2, r2, #4
 801203e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8012042:	4317      	orrs	r7, r2
 8012044:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8012048:	9200      	str	r2, [sp, #0]
 801204a:	43db      	mvns	r3, r3
 801204c:	2200      	movs	r2, #0
 801204e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8012052:	4630      	mov	r0, r6
 8012054:	f7fd f9ce 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 8012058:	43e4      	mvns	r4, r4
 801205a:	b2a4      	uxth	r4, r4
 801205c:	2500      	movs	r5, #0
 801205e:	9500      	str	r5, [sp, #0]
 8012060:	4623      	mov	r3, r4
 8012062:	462a      	mov	r2, r5
 8012064:	4931      	ldr	r1, [pc, #196]	; (801212c <dwt_ioctl+0x1a00>)
 8012066:	4630      	mov	r0, r6
 8012068:	f7fd fec4 	bl	800fdf4 <dwt_modify16bitoffsetreg>
 801206c:	9700      	str	r7, [sp, #0]
 801206e:	4623      	mov	r3, r4
 8012070:	462a      	mov	r2, r5
 8012072:	492f      	ldr	r1, [pc, #188]	; (8012130 <dwt_ioctl+0x1a04>)
 8012074:	4630      	mov	r0, r6
 8012076:	f7fd febd 	bl	800fdf4 <dwt_modify16bitoffsetreg>
 801207a:	e25f      	b.n	801253c <dwt_ioctl+0x1e10>
 801207c:	2700      	movs	r7, #0
 801207e:	463c      	mov	r4, r7
 8012080:	463b      	mov	r3, r7
 8012082:	e7d4      	b.n	801202e <dwt_ioctl+0x1902>
 8012084:	2200      	movs	r2, #0
 8012086:	e7df      	b.n	8012048 <dwt_ioctl+0x191c>
 8012088:	2308      	movs	r3, #8
 801208a:	9300      	str	r3, [sp, #0]
 801208c:	23ff      	movs	r3, #255	; 0xff
 801208e:	2201      	movs	r2, #1
 8012090:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8012094:	f7fd fb1e 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 8012098:	4c26      	ldr	r4, [pc, #152]	; (8012134 <dwt_ioctl+0x1a08>)
 801209a:	2302      	movs	r3, #2
 801209c:	9300      	str	r3, [sp, #0]
 801209e:	23ff      	movs	r3, #255	; 0xff
 80120a0:	2203      	movs	r2, #3
 80120a2:	4621      	mov	r1, r4
 80120a4:	4630      	mov	r0, r6
 80120a6:	f7fd fb15 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 80120aa:	2500      	movs	r5, #0
 80120ac:	9500      	str	r5, [sp, #0]
 80120ae:	23f7      	movs	r3, #247	; 0xf7
 80120b0:	2201      	movs	r2, #1
 80120b2:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80120b6:	4630      	mov	r0, r6
 80120b8:	f7fd fb0c 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 80120bc:	9500      	str	r5, [sp, #0]
 80120be:	23fd      	movs	r3, #253	; 0xfd
 80120c0:	2203      	movs	r2, #3
 80120c2:	4621      	mov	r1, r4
 80120c4:	4630      	mov	r0, r6
 80120c6:	f7fd fb05 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 80120ca:	e237      	b.n	801253c <dwt_ioctl+0x1e10>
 80120cc:	2c00      	cmp	r4, #0
 80120ce:	f000 82f9 	beq.w	80126c4 <dwt_ioctl+0x1f98>
 80120d2:	8863      	ldrh	r3, [r4, #2]
 80120d4:	00db      	lsls	r3, r3, #3
 80120d6:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80120da:	7822      	ldrb	r2, [r4, #0]
 80120dc:	b10a      	cbz	r2, 80120e2 <dwt_ioctl+0x19b6>
 80120de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80120e2:	9300      	str	r3, [sp, #0]
 80120e4:	f24f 0307 	movw	r3, #61447	; 0xf007
 80120e8:	2200      	movs	r2, #0
 80120ea:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80120ee:	4630      	mov	r0, r6
 80120f0:	f7fd fe80 	bl	800fdf4 <dwt_modify16bitoffsetreg>
 80120f4:	2500      	movs	r5, #0
 80120f6:	e221      	b.n	801253c <dwt_ioctl+0x1e10>
 80120f8:	2500      	movs	r5, #0
 80120fa:	9500      	str	r5, [sp, #0]
 80120fc:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8012100:	462a      	mov	r2, r5
 8012102:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
 8012106:	f7fd fe75 	bl	800fdf4 <dwt_modify16bitoffsetreg>
 801210a:	e217      	b.n	801253c <dwt_ioctl+0x1e10>
 801210c:	2c00      	cmp	r4, #0
 801210e:	f000 82db 	beq.w	80126c8 <dwt_ioctl+0x1f9c>
 8012112:	2200      	movs	r2, #0
 8012114:	4908      	ldr	r1, [pc, #32]	; (8012138 <dwt_ioctl+0x1a0c>)
 8012116:	f7fb ff9e 	bl	800e056 <dwt_read16bitoffsetreg>
 801211a:	8020      	strh	r0, [r4, #0]
 801211c:	2500      	movs	r5, #0
 801211e:	e20d      	b.n	801253c <dwt_ioctl+0x1e10>
 8012120:	0001001c 	.word	0x0001001c
 8012124:	00010018 	.word	0x00010018
 8012128:	000e000c 	.word	0x000e000c
 801212c:	00050008 	.word	0x00050008
 8012130:	0005000c 	.word	0x0005000c
 8012134:	00110008 	.word	0x00110008
 8012138:	00110048 	.word	0x00110048
 801213c:	2c00      	cmp	r4, #0
 801213e:	f000 82c5 	beq.w	80126cc <dwt_ioctl+0x1fa0>
 8012142:	7823      	ldrb	r3, [r4, #0]
 8012144:	2b01      	cmp	r3, #1
 8012146:	7862      	ldrb	r2, [r4, #1]
 8012148:	78a3      	ldrb	r3, [r4, #2]
 801214a:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 801214e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8012152:	78e2      	ldrb	r2, [r4, #3]
 8012154:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8012158:	7922      	ldrb	r2, [r4, #4]
 801215a:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
 801215e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8012162:	bf0c      	ite	eq
 8012164:	2202      	moveq	r2, #2
 8012166:	2200      	movne	r2, #0
 8012168:	49b6      	ldr	r1, [pc, #728]	; (8012444 <dwt_ioctl+0x1d18>)
 801216a:	f7fc fbd2 	bl	800e912 <dwt_write16bitoffsetreg>
 801216e:	2500      	movs	r5, #0
 8012170:	e1e4      	b.n	801253c <dwt_ioctl+0x1e10>
 8012172:	2c00      	cmp	r4, #0
 8012174:	f000 82ac 	beq.w	80126d0 <dwt_ioctl+0x1fa4>
 8012178:	6863      	ldr	r3, [r4, #4]
 801217a:	7822      	ldrb	r2, [r4, #0]
 801217c:	b13a      	cbz	r2, 801218e <dwt_ioctl+0x1a62>
 801217e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012182:	2200      	movs	r2, #0
 8012184:	49b0      	ldr	r1, [pc, #704]	; (8012448 <dwt_ioctl+0x1d1c>)
 8012186:	f7fc fc2f 	bl	800e9e8 <dwt_write32bitoffsetreg>
 801218a:	2500      	movs	r5, #0
 801218c:	e1d6      	b.n	801253c <dwt_ioctl+0x1e10>
 801218e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012192:	49ae      	ldr	r1, [pc, #696]	; (801244c <dwt_ioctl+0x1d20>)
 8012194:	f7fc fc28 	bl	800e9e8 <dwt_write32bitoffsetreg>
 8012198:	2500      	movs	r5, #0
 801219a:	e1cf      	b.n	801253c <dwt_ioctl+0x1e10>
 801219c:	2c00      	cmp	r4, #0
 801219e:	f000 8299 	beq.w	80126d4 <dwt_ioctl+0x1fa8>
 80121a2:	7823      	ldrb	r3, [r4, #0]
 80121a4:	2401      	movs	r4, #1
 80121a6:	409c      	lsls	r4, r3
 80121a8:	b2e4      	uxtb	r4, r4
 80121aa:	2310      	movs	r3, #16
 80121ac:	9300      	str	r3, [sp, #0]
 80121ae:	23ff      	movs	r3, #255	; 0xff
 80121b0:	2200      	movs	r2, #0
 80121b2:	49a7      	ldr	r1, [pc, #668]	; (8012450 <dwt_ioctl+0x1d24>)
 80121b4:	f7fd fa8e 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 80121b8:	43e3      	mvns	r3, r4
 80121ba:	4fa2      	ldr	r7, [pc, #648]	; (8012444 <dwt_ioctl+0x1d18>)
 80121bc:	2500      	movs	r5, #0
 80121be:	9500      	str	r5, [sp, #0]
 80121c0:	b2db      	uxtb	r3, r3
 80121c2:	462a      	mov	r2, r5
 80121c4:	4639      	mov	r1, r7
 80121c6:	4630      	mov	r0, r6
 80121c8:	f7fd fa84 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 80121cc:	9400      	str	r4, [sp, #0]
 80121ce:	23ff      	movs	r3, #255	; 0xff
 80121d0:	462a      	mov	r2, r5
 80121d2:	4639      	mov	r1, r7
 80121d4:	4630      	mov	r0, r6
 80121d6:	f7fd fa7d 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 80121da:	e1af      	b.n	801253c <dwt_ioctl+0x1e10>
 80121dc:	2c00      	cmp	r4, #0
 80121de:	f000 827b 	beq.w	80126d8 <dwt_ioctl+0x1fac>
 80121e2:	7822      	ldrb	r2, [r4, #0]
 80121e4:	7863      	ldrb	r3, [r4, #1]
 80121e6:	b19b      	cbz	r3, 8012210 <dwt_ioctl+0x1ae4>
 80121e8:	2a00      	cmp	r2, #0
 80121ea:	f040 8297 	bne.w	801271c <dwt_ioctl+0x1ff0>
 80121ee:	2400      	movs	r4, #0
 80121f0:	9400      	str	r4, [sp, #0]
 80121f2:	f06f 73c0 	mvn.w	r3, #25165824	; 0x1800000
 80121f6:	4622      	mov	r2, r4
 80121f8:	2110      	movs	r1, #16
 80121fa:	f7fd f8fb 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 80121fe:	9400      	str	r4, [sp, #0]
 8012200:	4b94      	ldr	r3, [pc, #592]	; (8012454 <dwt_ioctl+0x1d28>)
 8012202:	4622      	mov	r2, r4
 8012204:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8012208:	4630      	mov	r0, r6
 801220a:	f7fd f8f3 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 801220e:	e017      	b.n	8012240 <dwt_ioctl+0x1b14>
 8012210:	2a00      	cmp	r2, #0
 8012212:	f000 8285 	beq.w	8012720 <dwt_ioctl+0x1ff4>
 8012216:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 801221a:	2400      	movs	r4, #0
 801221c:	9400      	str	r4, [sp, #0]
 801221e:	f06f 73c0 	mvn.w	r3, #25165824	; 0x1800000
 8012222:	4622      	mov	r2, r4
 8012224:	2110      	movs	r1, #16
 8012226:	4630      	mov	r0, r6
 8012228:	f7fd f8e4 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 801222c:	9500      	str	r5, [sp, #0]
 801222e:	4b89      	ldr	r3, [pc, #548]	; (8012454 <dwt_ioctl+0x1d28>)
 8012230:	4622      	mov	r2, r4
 8012232:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8012236:	4630      	mov	r0, r6
 8012238:	f7fd f8dc 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 801223c:	f04f 74c0 	mov.w	r4, #25165824	; 0x1800000
 8012240:	9400      	str	r4, [sp, #0]
 8012242:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012246:	2200      	movs	r2, #0
 8012248:	2110      	movs	r1, #16
 801224a:	4630      	mov	r0, r6
 801224c:	f7fd f8d2 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 8012250:	2500      	movs	r5, #0
 8012252:	e173      	b.n	801253c <dwt_ioctl+0x1e10>
 8012254:	2c00      	cmp	r4, #0
 8012256:	f000 8241 	beq.w	80126dc <dwt_ioctl+0x1fb0>
 801225a:	7823      	ldrb	r3, [r4, #0]
 801225c:	b93b      	cbnz	r3, 801226e <dwt_ioctl+0x1b42>
 801225e:	2500      	movs	r5, #0
 8012260:	9500      	str	r5, [sp, #0]
 8012262:	23df      	movs	r3, #223	; 0xdf
 8012264:	2203      	movs	r2, #3
 8012266:	497c      	ldr	r1, [pc, #496]	; (8012458 <dwt_ioctl+0x1d2c>)
 8012268:	f7fd fa34 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 801226c:	e166      	b.n	801253c <dwt_ioctl+0x1e10>
 801226e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8012272:	9300      	str	r3, [sp, #0]
 8012274:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012278:	2200      	movs	r2, #0
 801227a:	4977      	ldr	r1, [pc, #476]	; (8012458 <dwt_ioctl+0x1d2c>)
 801227c:	f7fd f8ba 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 8012280:	2500      	movs	r5, #0
 8012282:	e15b      	b.n	801253c <dwt_ioctl+0x1e10>
 8012284:	2c00      	cmp	r4, #0
 8012286:	f000 822b 	beq.w	80126e0 <dwt_ioctl+0x1fb4>
 801228a:	7823      	ldrb	r3, [r4, #0]
 801228c:	b93b      	cbnz	r3, 801229e <dwt_ioctl+0x1b72>
 801228e:	2500      	movs	r5, #0
 8012290:	9500      	str	r5, [sp, #0]
 8012292:	237f      	movs	r3, #127	; 0x7f
 8012294:	2203      	movs	r2, #3
 8012296:	4971      	ldr	r1, [pc, #452]	; (801245c <dwt_ioctl+0x1d30>)
 8012298:	f7fd fa1c 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 801229c:	e14e      	b.n	801253c <dwt_ioctl+0x1e10>
 801229e:	2380      	movs	r3, #128	; 0x80
 80122a0:	9300      	str	r3, [sp, #0]
 80122a2:	23ff      	movs	r3, #255	; 0xff
 80122a4:	2203      	movs	r2, #3
 80122a6:	496d      	ldr	r1, [pc, #436]	; (801245c <dwt_ioctl+0x1d30>)
 80122a8:	f7fd fa14 	bl	800f6d4 <dwt_modify8bitoffsetreg>
 80122ac:	2500      	movs	r5, #0
 80122ae:	e145      	b.n	801253c <dwt_ioctl+0x1e10>
 80122b0:	2c00      	cmp	r4, #0
 80122b2:	f000 8217 	beq.w	80126e4 <dwt_ioctl+0x1fb8>
 80122b6:	b2e3      	uxtb	r3, r4
 80122b8:	1c9a      	adds	r2, r3, #2
 80122ba:	2301      	movs	r3, #1
 80122bc:	4093      	lsls	r3, r2
 80122be:	3b01      	subs	r3, #1
 80122c0:	b2db      	uxtb	r3, r3
 80122c2:	2200      	movs	r2, #0
 80122c4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80122c8:	f7fc fd72 	bl	800edb0 <dwt_write8bitoffsetreg>
 80122cc:	2500      	movs	r5, #0
 80122ce:	e135      	b.n	801253c <dwt_ioctl+0x1e10>
 80122d0:	2c00      	cmp	r4, #0
 80122d2:	f000 8209 	beq.w	80126e8 <dwt_ioctl+0x1fbc>
 80122d6:	7ae3      	ldrb	r3, [r4, #11]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	f000 8207 	beq.w	80126ec <dwt_ioctl+0x1fc0>
 80122de:	7b63      	ldrb	r3, [r4, #13]
 80122e0:	2b01      	cmp	r3, #1
 80122e2:	7b20      	ldrb	r0, [r4, #12]
 80122e4:	bf94      	ite	ls
 80122e6:	2203      	movls	r2, #3
 80122e8:	2204      	movhi	r2, #4
 80122ea:	2110      	movs	r1, #16
 80122ec:	4b5c      	ldr	r3, [pc, #368]	; (8012460 <dwt_ioctl+0x1d34>)
 80122ee:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80122f2:	f7fb fdf5 	bl	800dee0 <get_sts_mnth>
 80122f6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80122fa:	9000      	str	r0, [sp, #0]
 80122fc:	f64f 7380 	movw	r3, #65408	; 0xff80
 8012300:	2202      	movs	r2, #2
 8012302:	4958      	ldr	r1, [pc, #352]	; (8012464 <dwt_ioctl+0x1d38>)
 8012304:	4630      	mov	r0, r6
 8012306:	f7fd fd75 	bl	800fdf4 <dwt_modify16bitoffsetreg>
 801230a:	2394      	movs	r3, #148	; 0x94
 801230c:	2200      	movs	r2, #0
 801230e:	4956      	ldr	r1, [pc, #344]	; (8012468 <dwt_ioctl+0x1d3c>)
 8012310:	4630      	mov	r0, r6
 8012312:	f7fc fd4d 	bl	800edb0 <dwt_write8bitoffsetreg>
 8012316:	2500      	movs	r5, #0
 8012318:	e110      	b.n	801253c <dwt_ioctl+0x1e10>
 801231a:	2c00      	cmp	r4, #0
 801231c:	f000 81e8 	beq.w	80126f0 <dwt_ioctl+0x1fc4>
 8012320:	2200      	movs	r2, #0
 8012322:	4952      	ldr	r1, [pc, #328]	; (801246c <dwt_ioctl+0x1d40>)
 8012324:	f7fb fe81 	bl	800e02a <dwt_read32bitoffsetreg>
 8012328:	6020      	str	r0, [r4, #0]
 801232a:	2500      	movs	r5, #0
 801232c:	e106      	b.n	801253c <dwt_ioctl+0x1e10>
 801232e:	2c00      	cmp	r4, #0
 8012330:	f000 81e0 	beq.w	80126f4 <dwt_ioctl+0x1fc8>
 8012334:	2200      	movs	r2, #0
 8012336:	494e      	ldr	r1, [pc, #312]	; (8012470 <dwt_ioctl+0x1d44>)
 8012338:	f7fb fe77 	bl	800e02a <dwt_read32bitoffsetreg>
 801233c:	6020      	str	r0, [r4, #0]
 801233e:	2500      	movs	r5, #0
 8012340:	e0fc      	b.n	801253c <dwt_ioctl+0x1e10>
 8012342:	2c00      	cmp	r4, #0
 8012344:	f000 81d8 	beq.w	80126f8 <dwt_ioctl+0x1fcc>
 8012348:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 801234c:	6023      	str	r3, [r4, #0]
 801234e:	2500      	movs	r5, #0
 8012350:	e0f4      	b.n	801253c <dwt_ioctl+0x1e10>
 8012352:	2c00      	cmp	r4, #0
 8012354:	f000 81d2 	beq.w	80126fc <dwt_ioctl+0x1fd0>
 8012358:	2500      	movs	r5, #0
 801235a:	950a      	str	r5, [sp, #40]	; 0x28
 801235c:	af0c      	add	r7, sp, #48	; 0x30
 801235e:	2319      	movs	r3, #25
 8012360:	f847 3d04 	str.w	r3, [r7, #-4]!
 8012364:	9700      	str	r7, [sp, #0]
 8012366:	2304      	movs	r3, #4
 8012368:	462a      	mov	r2, r5
 801236a:	4942      	ldr	r1, [pc, #264]	; (8012474 <dwt_ioctl+0x1d48>)
 801236c:	f7fc fac6 	bl	800e8fc <dwt_writetodevice>
 8012370:	f641 7348 	movw	r3, #8008	; 0x1f48
 8012374:	930b      	str	r3, [sp, #44]	; 0x2c
 8012376:	9700      	str	r7, [sp, #0]
 8012378:	2304      	movs	r3, #4
 801237a:	462a      	mov	r2, r5
 801237c:	493e      	ldr	r1, [pc, #248]	; (8012478 <dwt_ioctl+0x1d4c>)
 801237e:	4630      	mov	r0, r6
 8012380:	f7fc fabc 	bl	800e8fc <dwt_writetodevice>
 8012384:	ab0a      	add	r3, sp, #40	; 0x28
 8012386:	9300      	str	r3, [sp, #0]
 8012388:	2304      	movs	r3, #4
 801238a:	462a      	mov	r2, r5
 801238c:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8012390:	4630      	mov	r0, r6
 8012392:	f7fb fe40 	bl	800e016 <dwt_readfromdevice>
 8012396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012398:	6023      	str	r3, [r4, #0]
 801239a:	e0cf      	b.n	801253c <dwt_ioctl+0x1e10>
 801239c:	2c00      	cmp	r4, #0
 801239e:	f000 81af 	beq.w	8012700 <dwt_ioctl+0x1fd4>
 80123a2:	2200      	movs	r2, #0
 80123a4:	4935      	ldr	r1, [pc, #212]	; (801247c <dwt_ioctl+0x1d50>)
 80123a6:	f7fb fe40 	bl	800e02a <dwt_read32bitoffsetreg>
 80123aa:	b280      	uxth	r0, r0
 80123ac:	6020      	str	r0, [r4, #0]
 80123ae:	2200      	movs	r2, #0
 80123b0:	4933      	ldr	r1, [pc, #204]	; (8012480 <dwt_ioctl+0x1d54>)
 80123b2:	4630      	mov	r0, r6
 80123b4:	f7fb fe39 	bl	800e02a <dwt_read32bitoffsetreg>
 80123b8:	0d43      	lsrs	r3, r0, #21
 80123ba:	019b      	lsls	r3, r3, #6
 80123bc:	b29b      	uxth	r3, r3
 80123be:	6063      	str	r3, [r4, #4]
 80123c0:	2500      	movs	r5, #0
 80123c2:	e0bb      	b.n	801253c <dwt_ioctl+0x1e10>
 80123c4:	2c00      	cmp	r4, #0
 80123c6:	f000 819d 	beq.w	8012704 <dwt_ioctl+0x1fd8>
 80123ca:	7d63      	ldrb	r3, [r4, #21]
 80123cc:	b133      	cbz	r3, 80123dc <dwt_ioctl+0x1cb0>
 80123ce:	2b01      	cmp	r3, #1
 80123d0:	d062      	beq.n	8012498 <dwt_ioctl+0x1d6c>
 80123d2:	2b02      	cmp	r3, #2
 80123d4:	f000 8089 	beq.w	80124ea <dwt_ioctl+0x1dbe>
 80123d8:	23ff      	movs	r3, #255	; 0xff
 80123da:	e02f      	b.n	801243c <dwt_ioctl+0x1d10>
 80123dc:	2200      	movs	r2, #0
 80123de:	4929      	ldr	r1, [pc, #164]	; (8012484 <dwt_ioctl+0x1d58>)
 80123e0:	f7fb fe23 	bl	800e02a <dwt_read32bitoffsetreg>
 80123e4:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80123e8:	6020      	str	r0, [r4, #0]
 80123ea:	2200      	movs	r2, #0
 80123ec:	4926      	ldr	r1, [pc, #152]	; (8012488 <dwt_ioctl+0x1d5c>)
 80123ee:	4630      	mov	r0, r6
 80123f0:	f7fb fe1b 	bl	800e02a <dwt_read32bitoffsetreg>
 80123f4:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80123f8:	6060      	str	r0, [r4, #4]
 80123fa:	2200      	movs	r2, #0
 80123fc:	4923      	ldr	r1, [pc, #140]	; (801248c <dwt_ioctl+0x1d60>)
 80123fe:	4630      	mov	r0, r6
 8012400:	f7fb fe13 	bl	800e02a <dwt_read32bitoffsetreg>
 8012404:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8012408:	60a0      	str	r0, [r4, #8]
 801240a:	2200      	movs	r2, #0
 801240c:	4920      	ldr	r1, [pc, #128]	; (8012490 <dwt_ioctl+0x1d64>)
 801240e:	4630      	mov	r0, r6
 8012410:	f7fb fe0b 	bl	800e02a <dwt_read32bitoffsetreg>
 8012414:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8012418:	60e0      	str	r0, [r4, #12]
 801241a:	2200      	movs	r2, #0
 801241c:	491d      	ldr	r1, [pc, #116]	; (8012494 <dwt_ioctl+0x1d68>)
 801241e:	4630      	mov	r0, r6
 8012420:	f7fb fe03 	bl	800e02a <dwt_read32bitoffsetreg>
 8012424:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8012428:	6120      	str	r0, [r4, #16]
 801242a:	2203      	movs	r2, #3
 801242c:	490f      	ldr	r1, [pc, #60]	; (801246c <dwt_ioctl+0x1d40>)
 801242e:	4630      	mov	r0, r6
 8012430:	f7fb fe50 	bl	800e0d4 <dwt_read8bitoffsetreg>
 8012434:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8012438:	7520      	strb	r0, [r4, #20]
 801243a:	2300      	movs	r3, #0
 801243c:	75a3      	strb	r3, [r4, #22]
 801243e:	2500      	movs	r5, #0
 8012440:	e07c      	b.n	801253c <dwt_ioctl+0x1e10>
 8012442:	bf00      	nop
 8012444:	0011003c 	.word	0x0011003c
 8012448:	00110044 	.word	0x00110044
 801244c:	00110040 	.word	0x00110040
 8012450:	00070048 	.word	0x00070048
 8012454:	f7fc0fff 	.word	0xf7fc0fff
 8012458:	000f0028 	.word	0x000f0028
 801245c:	0007001c 	.word	0x0007001c
 8012460:	08016090 	.word	0x08016090
 8012464:	000e0014 	.word	0x000e0014
 8012468:	000e0018 	.word	0x000e0018
 801246c:	00030054 	.word	0x00030054
 8012470:	000f004c 	.word	0x000f004c
 8012474:	001f0004 	.word	0x001f0004
 8012478:	001f0008 	.word	0x001f0008
 801247c:	000c0048 	.word	0x000c0048
 8012480:	000c0028 	.word	0x000c0028
 8012484:	000c0058 	.word	0x000c0058
 8012488:	000c0030 	.word	0x000c0030
 801248c:	000c0034 	.word	0x000c0034
 8012490:	000c0038 	.word	0x000c0038
 8012494:	000c002c 	.word	0x000c002c
 8012498:	2200      	movs	r2, #0
 801249a:	49aa      	ldr	r1, [pc, #680]	; (8012744 <dwt_ioctl+0x2018>)
 801249c:	f7fb fdc5 	bl	800e02a <dwt_read32bitoffsetreg>
 80124a0:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80124a4:	6020      	str	r0, [r4, #0]
 80124a6:	2200      	movs	r2, #0
 80124a8:	49a7      	ldr	r1, [pc, #668]	; (8012748 <dwt_ioctl+0x201c>)
 80124aa:	4630      	mov	r0, r6
 80124ac:	f7fb fdbd 	bl	800e02a <dwt_read32bitoffsetreg>
 80124b0:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80124b4:	6060      	str	r0, [r4, #4]
 80124b6:	2200      	movs	r2, #0
 80124b8:	49a4      	ldr	r1, [pc, #656]	; (801274c <dwt_ioctl+0x2020>)
 80124ba:	4630      	mov	r0, r6
 80124bc:	f7fb fdb5 	bl	800e02a <dwt_read32bitoffsetreg>
 80124c0:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80124c4:	60a0      	str	r0, [r4, #8]
 80124c6:	2200      	movs	r2, #0
 80124c8:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 80124cc:	4630      	mov	r0, r6
 80124ce:	f7fb fdac 	bl	800e02a <dwt_read32bitoffsetreg>
 80124d2:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80124d6:	60e0      	str	r0, [r4, #12]
 80124d8:	2200      	movs	r2, #0
 80124da:	499d      	ldr	r1, [pc, #628]	; (8012750 <dwt_ioctl+0x2024>)
 80124dc:	4630      	mov	r0, r6
 80124de:	f7fb fda4 	bl	800e02a <dwt_read32bitoffsetreg>
 80124e2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 80124e6:	6120      	str	r0, [r4, #16]
 80124e8:	e79f      	b.n	801242a <dwt_ioctl+0x1cfe>
 80124ea:	2200      	movs	r2, #0
 80124ec:	4999      	ldr	r1, [pc, #612]	; (8012754 <dwt_ioctl+0x2028>)
 80124ee:	f7fb fd9c 	bl	800e02a <dwt_read32bitoffsetreg>
 80124f2:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80124f6:	6020      	str	r0, [r4, #0]
 80124f8:	2200      	movs	r2, #0
 80124fa:	4997      	ldr	r1, [pc, #604]	; (8012758 <dwt_ioctl+0x202c>)
 80124fc:	4630      	mov	r0, r6
 80124fe:	f7fb fd94 	bl	800e02a <dwt_read32bitoffsetreg>
 8012502:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8012506:	6060      	str	r0, [r4, #4]
 8012508:	2200      	movs	r2, #0
 801250a:	4994      	ldr	r1, [pc, #592]	; (801275c <dwt_ioctl+0x2030>)
 801250c:	4630      	mov	r0, r6
 801250e:	f7fb fd8c 	bl	800e02a <dwt_read32bitoffsetreg>
 8012512:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8012516:	60a0      	str	r0, [r4, #8]
 8012518:	2200      	movs	r2, #0
 801251a:	4991      	ldr	r1, [pc, #580]	; (8012760 <dwt_ioctl+0x2034>)
 801251c:	4630      	mov	r0, r6
 801251e:	f7fb fd84 	bl	800e02a <dwt_read32bitoffsetreg>
 8012522:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8012526:	60e0      	str	r0, [r4, #12]
 8012528:	2200      	movs	r2, #0
 801252a:	498e      	ldr	r1, [pc, #568]	; (8012764 <dwt_ioctl+0x2038>)
 801252c:	4630      	mov	r0, r6
 801252e:	f7fb fd7c 	bl	800e02a <dwt_read32bitoffsetreg>
 8012532:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8012536:	6120      	str	r0, [r4, #16]
 8012538:	e777      	b.n	801242a <dwt_ioctl+0x1cfe>
 801253a:	2500      	movs	r5, #0
 801253c:	4628      	mov	r0, r5
 801253e:	b00d      	add	sp, #52	; 0x34
 8012540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012544:	2500      	movs	r5, #0
 8012546:	e7f9      	b.n	801253c <dwt_ioctl+0x1e10>
 8012548:	2500      	movs	r5, #0
 801254a:	e7f7      	b.n	801253c <dwt_ioctl+0x1e10>
 801254c:	2500      	movs	r5, #0
 801254e:	e7f5      	b.n	801253c <dwt_ioctl+0x1e10>
 8012550:	2500      	movs	r5, #0
 8012552:	e7f3      	b.n	801253c <dwt_ioctl+0x1e10>
 8012554:	2500      	movs	r5, #0
 8012556:	e7f1      	b.n	801253c <dwt_ioctl+0x1e10>
 8012558:	2500      	movs	r5, #0
 801255a:	e7ef      	b.n	801253c <dwt_ioctl+0x1e10>
 801255c:	2500      	movs	r5, #0
 801255e:	e7ed      	b.n	801253c <dwt_ioctl+0x1e10>
 8012560:	2500      	movs	r5, #0
 8012562:	e7eb      	b.n	801253c <dwt_ioctl+0x1e10>
 8012564:	2500      	movs	r5, #0
 8012566:	e7e9      	b.n	801253c <dwt_ioctl+0x1e10>
 8012568:	2500      	movs	r5, #0
 801256a:	e7e7      	b.n	801253c <dwt_ioctl+0x1e10>
 801256c:	2500      	movs	r5, #0
 801256e:	e7e5      	b.n	801253c <dwt_ioctl+0x1e10>
 8012570:	2500      	movs	r5, #0
 8012572:	e7e3      	b.n	801253c <dwt_ioctl+0x1e10>
 8012574:	2500      	movs	r5, #0
 8012576:	e7e1      	b.n	801253c <dwt_ioctl+0x1e10>
 8012578:	2500      	movs	r5, #0
 801257a:	e7df      	b.n	801253c <dwt_ioctl+0x1e10>
 801257c:	2500      	movs	r5, #0
 801257e:	e7dd      	b.n	801253c <dwt_ioctl+0x1e10>
 8012580:	2500      	movs	r5, #0
 8012582:	e7db      	b.n	801253c <dwt_ioctl+0x1e10>
 8012584:	2500      	movs	r5, #0
 8012586:	e7d9      	b.n	801253c <dwt_ioctl+0x1e10>
 8012588:	2500      	movs	r5, #0
 801258a:	e7d7      	b.n	801253c <dwt_ioctl+0x1e10>
 801258c:	2500      	movs	r5, #0
 801258e:	e7d5      	b.n	801253c <dwt_ioctl+0x1e10>
 8012590:	2500      	movs	r5, #0
 8012592:	e7d3      	b.n	801253c <dwt_ioctl+0x1e10>
 8012594:	2500      	movs	r5, #0
 8012596:	e7d1      	b.n	801253c <dwt_ioctl+0x1e10>
 8012598:	2500      	movs	r5, #0
 801259a:	e7cf      	b.n	801253c <dwt_ioctl+0x1e10>
 801259c:	2500      	movs	r5, #0
 801259e:	e7cd      	b.n	801253c <dwt_ioctl+0x1e10>
 80125a0:	2500      	movs	r5, #0
 80125a2:	e7cb      	b.n	801253c <dwt_ioctl+0x1e10>
 80125a4:	2500      	movs	r5, #0
 80125a6:	e7c9      	b.n	801253c <dwt_ioctl+0x1e10>
 80125a8:	2500      	movs	r5, #0
 80125aa:	e7c7      	b.n	801253c <dwt_ioctl+0x1e10>
 80125ac:	2500      	movs	r5, #0
 80125ae:	e7c5      	b.n	801253c <dwt_ioctl+0x1e10>
 80125b0:	2500      	movs	r5, #0
 80125b2:	e7c3      	b.n	801253c <dwt_ioctl+0x1e10>
 80125b4:	2500      	movs	r5, #0
 80125b6:	e7c1      	b.n	801253c <dwt_ioctl+0x1e10>
 80125b8:	2500      	movs	r5, #0
 80125ba:	e7bf      	b.n	801253c <dwt_ioctl+0x1e10>
 80125bc:	2500      	movs	r5, #0
 80125be:	e7bd      	b.n	801253c <dwt_ioctl+0x1e10>
 80125c0:	2500      	movs	r5, #0
 80125c2:	e7bb      	b.n	801253c <dwt_ioctl+0x1e10>
 80125c4:	2500      	movs	r5, #0
 80125c6:	e7b9      	b.n	801253c <dwt_ioctl+0x1e10>
 80125c8:	2500      	movs	r5, #0
 80125ca:	e7b7      	b.n	801253c <dwt_ioctl+0x1e10>
 80125cc:	2500      	movs	r5, #0
 80125ce:	e7b5      	b.n	801253c <dwt_ioctl+0x1e10>
 80125d0:	2500      	movs	r5, #0
 80125d2:	e7b3      	b.n	801253c <dwt_ioctl+0x1e10>
 80125d4:	2500      	movs	r5, #0
 80125d6:	e7b1      	b.n	801253c <dwt_ioctl+0x1e10>
 80125d8:	2500      	movs	r5, #0
 80125da:	e7af      	b.n	801253c <dwt_ioctl+0x1e10>
 80125dc:	2500      	movs	r5, #0
 80125de:	e7ad      	b.n	801253c <dwt_ioctl+0x1e10>
 80125e0:	2500      	movs	r5, #0
 80125e2:	e7ab      	b.n	801253c <dwt_ioctl+0x1e10>
 80125e4:	2500      	movs	r5, #0
 80125e6:	e7a9      	b.n	801253c <dwt_ioctl+0x1e10>
 80125e8:	2500      	movs	r5, #0
 80125ea:	e7a7      	b.n	801253c <dwt_ioctl+0x1e10>
 80125ec:	2500      	movs	r5, #0
 80125ee:	e7a5      	b.n	801253c <dwt_ioctl+0x1e10>
 80125f0:	2500      	movs	r5, #0
 80125f2:	e7a3      	b.n	801253c <dwt_ioctl+0x1e10>
 80125f4:	2500      	movs	r5, #0
 80125f6:	e7a1      	b.n	801253c <dwt_ioctl+0x1e10>
 80125f8:	2500      	movs	r5, #0
 80125fa:	e79f      	b.n	801253c <dwt_ioctl+0x1e10>
 80125fc:	2500      	movs	r5, #0
 80125fe:	e79d      	b.n	801253c <dwt_ioctl+0x1e10>
 8012600:	2500      	movs	r5, #0
 8012602:	e79b      	b.n	801253c <dwt_ioctl+0x1e10>
 8012604:	2500      	movs	r5, #0
 8012606:	e799      	b.n	801253c <dwt_ioctl+0x1e10>
 8012608:	2500      	movs	r5, #0
 801260a:	e797      	b.n	801253c <dwt_ioctl+0x1e10>
 801260c:	2500      	movs	r5, #0
 801260e:	e795      	b.n	801253c <dwt_ioctl+0x1e10>
 8012610:	2500      	movs	r5, #0
 8012612:	e793      	b.n	801253c <dwt_ioctl+0x1e10>
 8012614:	2500      	movs	r5, #0
 8012616:	e791      	b.n	801253c <dwt_ioctl+0x1e10>
 8012618:	2500      	movs	r5, #0
 801261a:	e78f      	b.n	801253c <dwt_ioctl+0x1e10>
 801261c:	2500      	movs	r5, #0
 801261e:	e78d      	b.n	801253c <dwt_ioctl+0x1e10>
 8012620:	2500      	movs	r5, #0
 8012622:	e78b      	b.n	801253c <dwt_ioctl+0x1e10>
 8012624:	2500      	movs	r5, #0
 8012626:	e789      	b.n	801253c <dwt_ioctl+0x1e10>
 8012628:	2500      	movs	r5, #0
 801262a:	e787      	b.n	801253c <dwt_ioctl+0x1e10>
 801262c:	2500      	movs	r5, #0
 801262e:	e785      	b.n	801253c <dwt_ioctl+0x1e10>
 8012630:	2500      	movs	r5, #0
 8012632:	e783      	b.n	801253c <dwt_ioctl+0x1e10>
 8012634:	2500      	movs	r5, #0
 8012636:	e781      	b.n	801253c <dwt_ioctl+0x1e10>
 8012638:	2500      	movs	r5, #0
 801263a:	e77f      	b.n	801253c <dwt_ioctl+0x1e10>
 801263c:	2500      	movs	r5, #0
 801263e:	e77d      	b.n	801253c <dwt_ioctl+0x1e10>
 8012640:	2500      	movs	r5, #0
 8012642:	e77b      	b.n	801253c <dwt_ioctl+0x1e10>
 8012644:	2500      	movs	r5, #0
 8012646:	e779      	b.n	801253c <dwt_ioctl+0x1e10>
 8012648:	2500      	movs	r5, #0
 801264a:	e777      	b.n	801253c <dwt_ioctl+0x1e10>
 801264c:	2500      	movs	r5, #0
 801264e:	e775      	b.n	801253c <dwt_ioctl+0x1e10>
 8012650:	2500      	movs	r5, #0
 8012652:	e773      	b.n	801253c <dwt_ioctl+0x1e10>
 8012654:	2500      	movs	r5, #0
 8012656:	e771      	b.n	801253c <dwt_ioctl+0x1e10>
 8012658:	2500      	movs	r5, #0
 801265a:	e76f      	b.n	801253c <dwt_ioctl+0x1e10>
 801265c:	2500      	movs	r5, #0
 801265e:	e76d      	b.n	801253c <dwt_ioctl+0x1e10>
 8012660:	2500      	movs	r5, #0
 8012662:	e76b      	b.n	801253c <dwt_ioctl+0x1e10>
 8012664:	2500      	movs	r5, #0
 8012666:	e769      	b.n	801253c <dwt_ioctl+0x1e10>
 8012668:	2500      	movs	r5, #0
 801266a:	e767      	b.n	801253c <dwt_ioctl+0x1e10>
 801266c:	2500      	movs	r5, #0
 801266e:	e765      	b.n	801253c <dwt_ioctl+0x1e10>
 8012670:	2500      	movs	r5, #0
 8012672:	e763      	b.n	801253c <dwt_ioctl+0x1e10>
 8012674:	2500      	movs	r5, #0
 8012676:	e761      	b.n	801253c <dwt_ioctl+0x1e10>
 8012678:	2500      	movs	r5, #0
 801267a:	e75f      	b.n	801253c <dwt_ioctl+0x1e10>
 801267c:	2500      	movs	r5, #0
 801267e:	e75d      	b.n	801253c <dwt_ioctl+0x1e10>
 8012680:	2500      	movs	r5, #0
 8012682:	e75b      	b.n	801253c <dwt_ioctl+0x1e10>
 8012684:	2500      	movs	r5, #0
 8012686:	e759      	b.n	801253c <dwt_ioctl+0x1e10>
 8012688:	2500      	movs	r5, #0
 801268a:	e757      	b.n	801253c <dwt_ioctl+0x1e10>
 801268c:	2500      	movs	r5, #0
 801268e:	e755      	b.n	801253c <dwt_ioctl+0x1e10>
 8012690:	2500      	movs	r5, #0
 8012692:	e753      	b.n	801253c <dwt_ioctl+0x1e10>
 8012694:	2500      	movs	r5, #0
 8012696:	e751      	b.n	801253c <dwt_ioctl+0x1e10>
 8012698:	2500      	movs	r5, #0
 801269a:	e74f      	b.n	801253c <dwt_ioctl+0x1e10>
 801269c:	2500      	movs	r5, #0
 801269e:	e74d      	b.n	801253c <dwt_ioctl+0x1e10>
 80126a0:	2500      	movs	r5, #0
 80126a2:	e74b      	b.n	801253c <dwt_ioctl+0x1e10>
 80126a4:	2500      	movs	r5, #0
 80126a6:	e749      	b.n	801253c <dwt_ioctl+0x1e10>
 80126a8:	2500      	movs	r5, #0
 80126aa:	e747      	b.n	801253c <dwt_ioctl+0x1e10>
 80126ac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80126b0:	e744      	b.n	801253c <dwt_ioctl+0x1e10>
 80126b2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80126b6:	e741      	b.n	801253c <dwt_ioctl+0x1e10>
 80126b8:	2500      	movs	r5, #0
 80126ba:	e73f      	b.n	801253c <dwt_ioctl+0x1e10>
 80126bc:	2500      	movs	r5, #0
 80126be:	e73d      	b.n	801253c <dwt_ioctl+0x1e10>
 80126c0:	2500      	movs	r5, #0
 80126c2:	e73b      	b.n	801253c <dwt_ioctl+0x1e10>
 80126c4:	2500      	movs	r5, #0
 80126c6:	e739      	b.n	801253c <dwt_ioctl+0x1e10>
 80126c8:	2500      	movs	r5, #0
 80126ca:	e737      	b.n	801253c <dwt_ioctl+0x1e10>
 80126cc:	2500      	movs	r5, #0
 80126ce:	e735      	b.n	801253c <dwt_ioctl+0x1e10>
 80126d0:	2500      	movs	r5, #0
 80126d2:	e733      	b.n	801253c <dwt_ioctl+0x1e10>
 80126d4:	2500      	movs	r5, #0
 80126d6:	e731      	b.n	801253c <dwt_ioctl+0x1e10>
 80126d8:	2500      	movs	r5, #0
 80126da:	e72f      	b.n	801253c <dwt_ioctl+0x1e10>
 80126dc:	2500      	movs	r5, #0
 80126de:	e72d      	b.n	801253c <dwt_ioctl+0x1e10>
 80126e0:	2500      	movs	r5, #0
 80126e2:	e72b      	b.n	801253c <dwt_ioctl+0x1e10>
 80126e4:	2500      	movs	r5, #0
 80126e6:	e729      	b.n	801253c <dwt_ioctl+0x1e10>
 80126e8:	2500      	movs	r5, #0
 80126ea:	e727      	b.n	801253c <dwt_ioctl+0x1e10>
 80126ec:	2500      	movs	r5, #0
 80126ee:	e725      	b.n	801253c <dwt_ioctl+0x1e10>
 80126f0:	2500      	movs	r5, #0
 80126f2:	e723      	b.n	801253c <dwt_ioctl+0x1e10>
 80126f4:	2500      	movs	r5, #0
 80126f6:	e721      	b.n	801253c <dwt_ioctl+0x1e10>
 80126f8:	2500      	movs	r5, #0
 80126fa:	e71f      	b.n	801253c <dwt_ioctl+0x1e10>
 80126fc:	2500      	movs	r5, #0
 80126fe:	e71d      	b.n	801253c <dwt_ioctl+0x1e10>
 8012700:	2500      	movs	r5, #0
 8012702:	e71b      	b.n	801253c <dwt_ioctl+0x1e10>
 8012704:	2500      	movs	r5, #0
 8012706:	e719      	b.n	801253c <dwt_ioctl+0x1e10>
 8012708:	f899 3011 	ldrb.w	r3, [r9, #17]
 801270c:	1e5a      	subs	r2, r3, #1
 801270e:	b2d2      	uxtb	r2, r2
 8012710:	2a01      	cmp	r2, #1
 8012712:	f67e ae60 	bls.w	80113d6 <dwt_ioctl+0xcaa>
 8012716:	2202      	movs	r2, #2
 8012718:	f7fe be07 	b.w	801132a <dwt_ioctl+0xbfe>
 801271c:	4d12      	ldr	r5, [pc, #72]	; (8012768 <dwt_ioctl+0x203c>)
 801271e:	e57c      	b.n	801221a <dwt_ioctl+0x1aee>
 8012720:	2400      	movs	r4, #0
 8012722:	9400      	str	r4, [sp, #0]
 8012724:	f06f 73c0 	mvn.w	r3, #25165824	; 0x1800000
 8012728:	4622      	mov	r2, r4
 801272a:	2110      	movs	r1, #16
 801272c:	f7fc fe62 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 8012730:	9400      	str	r4, [sp, #0]
 8012732:	4b0e      	ldr	r3, [pc, #56]	; (801276c <dwt_ioctl+0x2040>)
 8012734:	4622      	mov	r2, r4
 8012736:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801273a:	4630      	mov	r0, r6
 801273c:	f7fc fe5a 	bl	800f3f4 <dwt_modify32bitoffsetreg>
 8012740:	e57e      	b.n	8012240 <dwt_ioctl+0x1b14>
 8012742:	bf00      	nop
 8012744:	000d0020 	.word	0x000d0020
 8012748:	000c0064 	.word	0x000c0064
 801274c:	000c0068 	.word	0x000c0068
 8012750:	000c0060 	.word	0x000c0060
 8012754:	000d0068 	.word	0x000d0068
 8012758:	000d0040 	.word	0x000d0040
 801275c:	000d0044 	.word	0x000d0044
 8012760:	000d0048 	.word	0x000d0048
 8012764:	000d003c 	.word	0x000d003c
 8012768:	08001000 	.word	0x08001000
 801276c:	f7fc0fff 	.word	0xf7fc0fff

08012770 <_init>:
 8012770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012772:	b085      	sub	sp, #20
 8012774:	4604      	mov	r4, r0
 8012776:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012778:	6819      	ldr	r1, [r3, #0]
 801277a:	f7fd fea1 	bl	80104c0 <ull_initialise>
 801277e:	4606      	mov	r6, r0
 8012780:	6823      	ldr	r3, [r4, #0]
 8012782:	691b      	ldr	r3, [r3, #16]
 8012784:	4798      	blx	r3
 8012786:	ab03      	add	r3, sp, #12
 8012788:	2200      	movs	r2, #0
 801278a:	4611      	mov	r1, r2
 801278c:	4620      	mov	r0, r4
 801278e:	f7fd ffcd 	bl	801072c <dwt_ioctl>
 8012792:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012796:	6819      	ldr	r1, [r3, #0]
 8012798:	4620      	mov	r0, r4
 801279a:	f7fd fc43 	bl	8010024 <ull_configure>
 801279e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80127a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127a2:	6859      	ldr	r1, [r3, #4]
 80127a4:	4620      	mov	r0, r4
 80127a6:	f7fd f993 	bl	800fad0 <ull_configuretxrf>
 80127aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80127ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127ae:	89d9      	ldrh	r1, [r3, #14]
 80127b0:	4620      	mov	r0, r4
 80127b2:	f7fc f8be 	bl	800e932 <ull_setrxantennadelay>
 80127b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80127b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127ba:	8999      	ldrh	r1, [r3, #12]
 80127bc:	4620      	mov	r0, r4
 80127be:	f7fc f8c0 	bl	800e942 <ull_settxantennadelay>
 80127c2:	2100      	movs	r1, #0
 80127c4:	4620      	mov	r0, r4
 80127c6:	f7fc f94a 	bl	800ea5e <ull_setrxaftertxdelay>
 80127ca:	2500      	movs	r5, #0
 80127cc:	9500      	str	r5, [sp, #0]
 80127ce:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 80127d2:	462a      	mov	r2, r5
 80127d4:	2110      	movs	r1, #16
 80127d6:	4620      	mov	r0, r4
 80127d8:	f7fd fb0c 	bl	800fdf4 <dwt_modify16bitoffsetreg>
 80127dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80127de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127e0:	895a      	ldrh	r2, [r3, #10]
 80127e2:	8919      	ldrh	r1, [r3, #8]
 80127e4:	4620      	mov	r0, r4
 80127e6:	f7fd fa03 	bl	800fbf0 <ull_configureframefilter>
 80127ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80127ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127ee:	8a1b      	ldrh	r3, [r3, #16]
 80127f0:	2202      	movs	r2, #2
 80127f2:	210c      	movs	r1, #12
 80127f4:	4620      	mov	r0, r4
 80127f6:	f7fc f88c 	bl	800e912 <dwt_write16bitoffsetreg>
 80127fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80127fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127fe:	8a5b      	ldrh	r3, [r3, #18]
 8012800:	462a      	mov	r2, r5
 8012802:	210c      	movs	r1, #12
 8012804:	4620      	mov	r0, r4
 8012806:	f7fc f884 	bl	800e912 <dwt_write16bitoffsetreg>
 801280a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801280c:	7a19      	ldrb	r1, [r3, #8]
 801280e:	4620      	mov	r0, r4
 8012810:	f7fd fb2e 	bl	800fe70 <ull_setleds>
 8012814:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012816:	68d9      	ldr	r1, [r3, #12]
 8012818:	4620      	mov	r0, r4
 801281a:	f7fc f949 	bl	800eab0 <ull_setlnapamode>
 801281e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012820:	7e0b      	ldrb	r3, [r1, #24]
 8012822:	694a      	ldr	r2, [r1, #20]
 8012824:	6909      	ldr	r1, [r1, #16]
 8012826:	4620      	mov	r0, r4
 8012828:	f7fd fa68 	bl	800fcfc <ull_setinterrupt>
 801282c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801282e:	7f9a      	ldrb	r2, [r3, #30]
 8012830:	8b99      	ldrh	r1, [r3, #28]
 8012832:	4620      	mov	r0, r4
 8012834:	f7fc fb90 	bl	800ef58 <ull_configuresleep>
 8012838:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801283a:	7b53      	ldrb	r3, [r2, #13]
 801283c:	2b2e      	cmp	r3, #46	; 0x2e
 801283e:	d005      	beq.n	801284c <_init+0xdc>
 8012840:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012842:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012846:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 801284a:	d00a      	beq.n	8012862 <_init+0xf2>
 801284c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801284e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012852:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012856:	7353      	strb	r3, [r2, #13]
 8012858:	2200      	movs	r2, #0
 801285a:	4928      	ldr	r1, [pc, #160]	; (80128fc <_init+0x18c>)
 801285c:	4620      	mov	r0, r4
 801285e:	f7fc faa7 	bl	800edb0 <dwt_write8bitoffsetreg>
 8012862:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012864:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 8012868:	4620      	mov	r0, r4
 801286a:	f7fc ff63 	bl	800f734 <ull_configciadiag>
 801286e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012870:	6a19      	ldr	r1, [r3, #32]
 8012872:	4620      	mov	r0, r4
 8012874:	f7fc f93c 	bl	800eaf0 <ull_configurestskey>
 8012878:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801287a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801287c:	4620      	mov	r0, r4
 801287e:	f7fc f95b 	bl	800eb38 <ull_configurestsiv>
 8012882:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012884:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8012888:	bb9b      	cbnz	r3, 80128f2 <_init+0x182>
 801288a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801288c:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8012890:	4620      	mov	r0, r4
 8012892:	f7fc fb05 	bl	800eea0 <ull_configeventcounters>
 8012896:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
 801289a:	2d00      	cmp	r5, #0
 801289c:	db26      	blt.n	80128ec <_init+0x17c>
 801289e:	2301      	movs	r3, #1
 80128a0:	fa03 f505 	lsl.w	r5, r3, r5
 80128a4:	b2af      	uxth	r7, r5
 80128a6:	4a16      	ldr	r2, [pc, #88]	; (8012900 <_init+0x190>)
 80128a8:	4639      	mov	r1, r7
 80128aa:	4620      	mov	r0, r4
 80128ac:	f7fc fed4 	bl	800f658 <ull_setgpiomode>
 80128b0:	f10d 030a 	add.w	r3, sp, #10
 80128b4:	9300      	str	r3, [sp, #0]
 80128b6:	2302      	movs	r3, #2
 80128b8:	2200      	movs	r2, #0
 80128ba:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80128be:	4620      	mov	r0, r4
 80128c0:	f7fb fba9 	bl	800e016 <dwt_readfromdevice>
 80128c4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80128c8:	ea23 0305 	bic.w	r3, r3, r5
 80128cc:	f8ad 300a 	strh.w	r3, [sp, #10]
 80128d0:	2200      	movs	r2, #0
 80128d2:	490c      	ldr	r1, [pc, #48]	; (8012904 <_init+0x194>)
 80128d4:	4620      	mov	r0, r4
 80128d6:	f7fc f81c 	bl	800e912 <dwt_write16bitoffsetreg>
 80128da:	f994 204d 	ldrsb.w	r2, [r4, #77]	; 0x4d
 80128de:	fab2 f282 	clz	r2, r2
 80128e2:	0952      	lsrs	r2, r2, #5
 80128e4:	4639      	mov	r1, r7
 80128e6:	4620      	mov	r0, r4
 80128e8:	f7fd fb40 	bl	800ff6c <ull_setgpiovalue>
 80128ec:	4630      	mov	r0, r6
 80128ee:	b005      	add	sp, #20
 80128f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128f2:	4620      	mov	r0, r4
 80128f4:	f7fc ff54 	bl	800f7a0 <ull_configurestsloadiv>
 80128f8:	e7c7      	b.n	801288a <_init+0x11a>
 80128fa:	bf00      	nop
 80128fc:	00090014 	.word	0x00090014
 8012900:	01200492 	.word	0x01200492
 8012904:	00050008 	.word	0x00050008

08012908 <__register_exitproc>:
 8012908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801290c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80129c8 <__register_exitproc+0xc0>
 8012910:	4606      	mov	r6, r0
 8012912:	f8d8 0000 	ldr.w	r0, [r8]
 8012916:	461f      	mov	r7, r3
 8012918:	460d      	mov	r5, r1
 801291a:	4691      	mov	r9, r2
 801291c:	f001 f93d 	bl	8013b9a <__retarget_lock_acquire_recursive>
 8012920:	4b25      	ldr	r3, [pc, #148]	; (80129b8 <__register_exitproc+0xb0>)
 8012922:	681c      	ldr	r4, [r3, #0]
 8012924:	b934      	cbnz	r4, 8012934 <__register_exitproc+0x2c>
 8012926:	4c25      	ldr	r4, [pc, #148]	; (80129bc <__register_exitproc+0xb4>)
 8012928:	601c      	str	r4, [r3, #0]
 801292a:	4b25      	ldr	r3, [pc, #148]	; (80129c0 <__register_exitproc+0xb8>)
 801292c:	b113      	cbz	r3, 8012934 <__register_exitproc+0x2c>
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8012934:	6863      	ldr	r3, [r4, #4]
 8012936:	2b1f      	cmp	r3, #31
 8012938:	dd07      	ble.n	801294a <__register_exitproc+0x42>
 801293a:	f8d8 0000 	ldr.w	r0, [r8]
 801293e:	f001 f92e 	bl	8013b9e <__retarget_lock_release_recursive>
 8012942:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801294a:	b34e      	cbz	r6, 80129a0 <__register_exitproc+0x98>
 801294c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8012950:	b988      	cbnz	r0, 8012976 <__register_exitproc+0x6e>
 8012952:	4b1c      	ldr	r3, [pc, #112]	; (80129c4 <__register_exitproc+0xbc>)
 8012954:	b923      	cbnz	r3, 8012960 <__register_exitproc+0x58>
 8012956:	f8d8 0000 	ldr.w	r0, [r8]
 801295a:	f001 f91f 	bl	8013b9c <__retarget_lock_release>
 801295e:	e7f0      	b.n	8012942 <__register_exitproc+0x3a>
 8012960:	f44f 7084 	mov.w	r0, #264	; 0x108
 8012964:	f001 f994 	bl	8013c90 <malloc>
 8012968:	2800      	cmp	r0, #0
 801296a:	d0f4      	beq.n	8012956 <__register_exitproc+0x4e>
 801296c:	2300      	movs	r3, #0
 801296e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8012972:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8012976:	6863      	ldr	r3, [r4, #4]
 8012978:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801297c:	2201      	movs	r2, #1
 801297e:	409a      	lsls	r2, r3
 8012980:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8012984:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8012988:	4313      	orrs	r3, r2
 801298a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801298e:	2e02      	cmp	r6, #2
 8012990:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8012994:	bf02      	ittt	eq
 8012996:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801299a:	4313      	orreq	r3, r2
 801299c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80129a0:	6863      	ldr	r3, [r4, #4]
 80129a2:	f8d8 0000 	ldr.w	r0, [r8]
 80129a6:	1c5a      	adds	r2, r3, #1
 80129a8:	3302      	adds	r3, #2
 80129aa:	6062      	str	r2, [r4, #4]
 80129ac:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80129b0:	f001 f8f5 	bl	8013b9e <__retarget_lock_release_recursive>
 80129b4:	2000      	movs	r0, #0
 80129b6:	e7c6      	b.n	8012946 <__register_exitproc+0x3e>
 80129b8:	200004f0 	.word	0x200004f0
 80129bc:	20000464 	.word	0x20000464
 80129c0:	08016480 	.word	0x08016480
 80129c4:	08013c91 	.word	0x08013c91
 80129c8:	2000005c 	.word	0x2000005c

080129cc <abort>:
 80129cc:	b508      	push	{r3, lr}
 80129ce:	2006      	movs	r0, #6
 80129d0:	f002 fdde 	bl	8015590 <raise>
 80129d4:	2001      	movs	r0, #1
 80129d6:	f7ef fca3 	bl	8002320 <_exit>
	...

080129dc <__assert_func>:
 80129dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80129de:	4614      	mov	r4, r2
 80129e0:	461a      	mov	r2, r3
 80129e2:	4b09      	ldr	r3, [pc, #36]	; (8012a08 <__assert_func+0x2c>)
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	4605      	mov	r5, r0
 80129e8:	68d8      	ldr	r0, [r3, #12]
 80129ea:	b14c      	cbz	r4, 8012a00 <__assert_func+0x24>
 80129ec:	4b07      	ldr	r3, [pc, #28]	; (8012a0c <__assert_func+0x30>)
 80129ee:	9100      	str	r1, [sp, #0]
 80129f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80129f4:	4906      	ldr	r1, [pc, #24]	; (8012a10 <__assert_func+0x34>)
 80129f6:	462b      	mov	r3, r5
 80129f8:	f001 f852 	bl	8013aa0 <fiprintf>
 80129fc:	f7ff ffe6 	bl	80129cc <abort>
 8012a00:	4b04      	ldr	r3, [pc, #16]	; (8012a14 <__assert_func+0x38>)
 8012a02:	461c      	mov	r4, r3
 8012a04:	e7f3      	b.n	80129ee <__assert_func+0x12>
 8012a06:	bf00      	nop
 8012a08:	20000060 	.word	0x20000060
 8012a0c:	0801609e 	.word	0x0801609e
 8012a10:	080160ab 	.word	0x080160ab
 8012a14:	080160d9 	.word	0x080160d9

08012a18 <atexit>:
 8012a18:	2300      	movs	r3, #0
 8012a1a:	4601      	mov	r1, r0
 8012a1c:	461a      	mov	r2, r3
 8012a1e:	4618      	mov	r0, r3
 8012a20:	f7ff bf72 	b.w	8012908 <__register_exitproc>

08012a24 <_close_r>:
 8012a24:	b538      	push	{r3, r4, r5, lr}
 8012a26:	4d06      	ldr	r5, [pc, #24]	; (8012a40 <_close_r+0x1c>)
 8012a28:	2300      	movs	r3, #0
 8012a2a:	4604      	mov	r4, r0
 8012a2c:	4608      	mov	r0, r1
 8012a2e:	602b      	str	r3, [r5, #0]
 8012a30:	f7ef fc80 	bl	8002334 <_close>
 8012a34:	1c43      	adds	r3, r0, #1
 8012a36:	d102      	bne.n	8012a3e <_close_r+0x1a>
 8012a38:	682b      	ldr	r3, [r5, #0]
 8012a3a:	b103      	cbz	r3, 8012a3e <_close_r+0x1a>
 8012a3c:	6023      	str	r3, [r4, #0]
 8012a3e:	bd38      	pop	{r3, r4, r5, pc}
 8012a40:	20000608 	.word	0x20000608

08012a44 <quorem>:
 8012a44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a48:	6903      	ldr	r3, [r0, #16]
 8012a4a:	690c      	ldr	r4, [r1, #16]
 8012a4c:	42a3      	cmp	r3, r4
 8012a4e:	4607      	mov	r7, r0
 8012a50:	f2c0 8081 	blt.w	8012b56 <quorem+0x112>
 8012a54:	3c01      	subs	r4, #1
 8012a56:	f101 0814 	add.w	r8, r1, #20
 8012a5a:	f100 0514 	add.w	r5, r0, #20
 8012a5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012a62:	9301      	str	r3, [sp, #4]
 8012a64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012a68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012a6c:	3301      	adds	r3, #1
 8012a6e:	429a      	cmp	r2, r3
 8012a70:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012a74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012a78:	fbb2 f6f3 	udiv	r6, r2, r3
 8012a7c:	d331      	bcc.n	8012ae2 <quorem+0x9e>
 8012a7e:	f04f 0e00 	mov.w	lr, #0
 8012a82:	4640      	mov	r0, r8
 8012a84:	46ac      	mov	ip, r5
 8012a86:	46f2      	mov	sl, lr
 8012a88:	f850 2b04 	ldr.w	r2, [r0], #4
 8012a8c:	b293      	uxth	r3, r2
 8012a8e:	fb06 e303 	mla	r3, r6, r3, lr
 8012a92:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012a96:	b29b      	uxth	r3, r3
 8012a98:	ebaa 0303 	sub.w	r3, sl, r3
 8012a9c:	f8dc a000 	ldr.w	sl, [ip]
 8012aa0:	0c12      	lsrs	r2, r2, #16
 8012aa2:	fa13 f38a 	uxtah	r3, r3, sl
 8012aa6:	fb06 e202 	mla	r2, r6, r2, lr
 8012aaa:	9300      	str	r3, [sp, #0]
 8012aac:	9b00      	ldr	r3, [sp, #0]
 8012aae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012ab2:	b292      	uxth	r2, r2
 8012ab4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012ab8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012abc:	f8bd 3000 	ldrh.w	r3, [sp]
 8012ac0:	4581      	cmp	r9, r0
 8012ac2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012ac6:	f84c 3b04 	str.w	r3, [ip], #4
 8012aca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012ace:	d2db      	bcs.n	8012a88 <quorem+0x44>
 8012ad0:	f855 300b 	ldr.w	r3, [r5, fp]
 8012ad4:	b92b      	cbnz	r3, 8012ae2 <quorem+0x9e>
 8012ad6:	9b01      	ldr	r3, [sp, #4]
 8012ad8:	3b04      	subs	r3, #4
 8012ada:	429d      	cmp	r5, r3
 8012adc:	461a      	mov	r2, r3
 8012ade:	d32e      	bcc.n	8012b3e <quorem+0xfa>
 8012ae0:	613c      	str	r4, [r7, #16]
 8012ae2:	4638      	mov	r0, r7
 8012ae4:	f001 fbbc 	bl	8014260 <__mcmp>
 8012ae8:	2800      	cmp	r0, #0
 8012aea:	db24      	blt.n	8012b36 <quorem+0xf2>
 8012aec:	3601      	adds	r6, #1
 8012aee:	4628      	mov	r0, r5
 8012af0:	f04f 0c00 	mov.w	ip, #0
 8012af4:	f858 2b04 	ldr.w	r2, [r8], #4
 8012af8:	f8d0 e000 	ldr.w	lr, [r0]
 8012afc:	b293      	uxth	r3, r2
 8012afe:	ebac 0303 	sub.w	r3, ip, r3
 8012b02:	0c12      	lsrs	r2, r2, #16
 8012b04:	fa13 f38e 	uxtah	r3, r3, lr
 8012b08:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012b0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012b10:	b29b      	uxth	r3, r3
 8012b12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012b16:	45c1      	cmp	r9, r8
 8012b18:	f840 3b04 	str.w	r3, [r0], #4
 8012b1c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012b20:	d2e8      	bcs.n	8012af4 <quorem+0xb0>
 8012b22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012b26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012b2a:	b922      	cbnz	r2, 8012b36 <quorem+0xf2>
 8012b2c:	3b04      	subs	r3, #4
 8012b2e:	429d      	cmp	r5, r3
 8012b30:	461a      	mov	r2, r3
 8012b32:	d30a      	bcc.n	8012b4a <quorem+0x106>
 8012b34:	613c      	str	r4, [r7, #16]
 8012b36:	4630      	mov	r0, r6
 8012b38:	b003      	add	sp, #12
 8012b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b3e:	6812      	ldr	r2, [r2, #0]
 8012b40:	3b04      	subs	r3, #4
 8012b42:	2a00      	cmp	r2, #0
 8012b44:	d1cc      	bne.n	8012ae0 <quorem+0x9c>
 8012b46:	3c01      	subs	r4, #1
 8012b48:	e7c7      	b.n	8012ada <quorem+0x96>
 8012b4a:	6812      	ldr	r2, [r2, #0]
 8012b4c:	3b04      	subs	r3, #4
 8012b4e:	2a00      	cmp	r2, #0
 8012b50:	d1f0      	bne.n	8012b34 <quorem+0xf0>
 8012b52:	3c01      	subs	r4, #1
 8012b54:	e7eb      	b.n	8012b2e <quorem+0xea>
 8012b56:	2000      	movs	r0, #0
 8012b58:	e7ee      	b.n	8012b38 <quorem+0xf4>
 8012b5a:	0000      	movs	r0, r0
 8012b5c:	0000      	movs	r0, r0
	...

08012b60 <_dtoa_r>:
 8012b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b64:	ed2d 8b04 	vpush	{d8-d9}
 8012b68:	ec57 6b10 	vmov	r6, r7, d0
 8012b6c:	b093      	sub	sp, #76	; 0x4c
 8012b6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012b70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012b74:	9106      	str	r1, [sp, #24]
 8012b76:	ee10 aa10 	vmov	sl, s0
 8012b7a:	4604      	mov	r4, r0
 8012b7c:	9209      	str	r2, [sp, #36]	; 0x24
 8012b7e:	930c      	str	r3, [sp, #48]	; 0x30
 8012b80:	46bb      	mov	fp, r7
 8012b82:	b975      	cbnz	r5, 8012ba2 <_dtoa_r+0x42>
 8012b84:	2010      	movs	r0, #16
 8012b86:	f001 f883 	bl	8013c90 <malloc>
 8012b8a:	4602      	mov	r2, r0
 8012b8c:	6260      	str	r0, [r4, #36]	; 0x24
 8012b8e:	b920      	cbnz	r0, 8012b9a <_dtoa_r+0x3a>
 8012b90:	4ba7      	ldr	r3, [pc, #668]	; (8012e30 <_dtoa_r+0x2d0>)
 8012b92:	21ea      	movs	r1, #234	; 0xea
 8012b94:	48a7      	ldr	r0, [pc, #668]	; (8012e34 <_dtoa_r+0x2d4>)
 8012b96:	f7ff ff21 	bl	80129dc <__assert_func>
 8012b9a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012b9e:	6005      	str	r5, [r0, #0]
 8012ba0:	60c5      	str	r5, [r0, #12]
 8012ba2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012ba4:	6819      	ldr	r1, [r3, #0]
 8012ba6:	b151      	cbz	r1, 8012bbe <_dtoa_r+0x5e>
 8012ba8:	685a      	ldr	r2, [r3, #4]
 8012baa:	604a      	str	r2, [r1, #4]
 8012bac:	2301      	movs	r3, #1
 8012bae:	4093      	lsls	r3, r2
 8012bb0:	608b      	str	r3, [r1, #8]
 8012bb2:	4620      	mov	r0, r4
 8012bb4:	f001 f912 	bl	8013ddc <_Bfree>
 8012bb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012bba:	2200      	movs	r2, #0
 8012bbc:	601a      	str	r2, [r3, #0]
 8012bbe:	1e3b      	subs	r3, r7, #0
 8012bc0:	bfaa      	itet	ge
 8012bc2:	2300      	movge	r3, #0
 8012bc4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8012bc8:	f8c8 3000 	strge.w	r3, [r8]
 8012bcc:	4b9a      	ldr	r3, [pc, #616]	; (8012e38 <_dtoa_r+0x2d8>)
 8012bce:	bfbc      	itt	lt
 8012bd0:	2201      	movlt	r2, #1
 8012bd2:	f8c8 2000 	strlt.w	r2, [r8]
 8012bd6:	ea33 030b 	bics.w	r3, r3, fp
 8012bda:	d11b      	bne.n	8012c14 <_dtoa_r+0xb4>
 8012bdc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012bde:	f242 730f 	movw	r3, #9999	; 0x270f
 8012be2:	6013      	str	r3, [r2, #0]
 8012be4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012be8:	4333      	orrs	r3, r6
 8012bea:	f000 8592 	beq.w	8013712 <_dtoa_r+0xbb2>
 8012bee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012bf0:	b963      	cbnz	r3, 8012c0c <_dtoa_r+0xac>
 8012bf2:	4b92      	ldr	r3, [pc, #584]	; (8012e3c <_dtoa_r+0x2dc>)
 8012bf4:	e022      	b.n	8012c3c <_dtoa_r+0xdc>
 8012bf6:	4b92      	ldr	r3, [pc, #584]	; (8012e40 <_dtoa_r+0x2e0>)
 8012bf8:	9301      	str	r3, [sp, #4]
 8012bfa:	3308      	adds	r3, #8
 8012bfc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012bfe:	6013      	str	r3, [r2, #0]
 8012c00:	9801      	ldr	r0, [sp, #4]
 8012c02:	b013      	add	sp, #76	; 0x4c
 8012c04:	ecbd 8b04 	vpop	{d8-d9}
 8012c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c0c:	4b8b      	ldr	r3, [pc, #556]	; (8012e3c <_dtoa_r+0x2dc>)
 8012c0e:	9301      	str	r3, [sp, #4]
 8012c10:	3303      	adds	r3, #3
 8012c12:	e7f3      	b.n	8012bfc <_dtoa_r+0x9c>
 8012c14:	2200      	movs	r2, #0
 8012c16:	2300      	movs	r3, #0
 8012c18:	4650      	mov	r0, sl
 8012c1a:	4659      	mov	r1, fp
 8012c1c:	f7ed ff8e 	bl	8000b3c <__aeabi_dcmpeq>
 8012c20:	ec4b ab19 	vmov	d9, sl, fp
 8012c24:	4680      	mov	r8, r0
 8012c26:	b158      	cbz	r0, 8012c40 <_dtoa_r+0xe0>
 8012c28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012c2a:	2301      	movs	r3, #1
 8012c2c:	6013      	str	r3, [r2, #0]
 8012c2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	f000 856b 	beq.w	801370c <_dtoa_r+0xbac>
 8012c36:	4883      	ldr	r0, [pc, #524]	; (8012e44 <_dtoa_r+0x2e4>)
 8012c38:	6018      	str	r0, [r3, #0]
 8012c3a:	1e43      	subs	r3, r0, #1
 8012c3c:	9301      	str	r3, [sp, #4]
 8012c3e:	e7df      	b.n	8012c00 <_dtoa_r+0xa0>
 8012c40:	ec4b ab10 	vmov	d0, sl, fp
 8012c44:	aa10      	add	r2, sp, #64	; 0x40
 8012c46:	a911      	add	r1, sp, #68	; 0x44
 8012c48:	4620      	mov	r0, r4
 8012c4a:	f001 fbaf 	bl	80143ac <__d2b>
 8012c4e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8012c52:	ee08 0a10 	vmov	s16, r0
 8012c56:	2d00      	cmp	r5, #0
 8012c58:	f000 8084 	beq.w	8012d64 <_dtoa_r+0x204>
 8012c5c:	ee19 3a90 	vmov	r3, s19
 8012c60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012c64:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012c68:	4656      	mov	r6, sl
 8012c6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8012c6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012c72:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8012c76:	4b74      	ldr	r3, [pc, #464]	; (8012e48 <_dtoa_r+0x2e8>)
 8012c78:	2200      	movs	r2, #0
 8012c7a:	4630      	mov	r0, r6
 8012c7c:	4639      	mov	r1, r7
 8012c7e:	f7ed fb3d 	bl	80002fc <__aeabi_dsub>
 8012c82:	a365      	add	r3, pc, #404	; (adr r3, 8012e18 <_dtoa_r+0x2b8>)
 8012c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c88:	f7ed fcf0 	bl	800066c <__aeabi_dmul>
 8012c8c:	a364      	add	r3, pc, #400	; (adr r3, 8012e20 <_dtoa_r+0x2c0>)
 8012c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c92:	f7ed fb35 	bl	8000300 <__adddf3>
 8012c96:	4606      	mov	r6, r0
 8012c98:	4628      	mov	r0, r5
 8012c9a:	460f      	mov	r7, r1
 8012c9c:	f7ed fc7c 	bl	8000598 <__aeabi_i2d>
 8012ca0:	a361      	add	r3, pc, #388	; (adr r3, 8012e28 <_dtoa_r+0x2c8>)
 8012ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ca6:	f7ed fce1 	bl	800066c <__aeabi_dmul>
 8012caa:	4602      	mov	r2, r0
 8012cac:	460b      	mov	r3, r1
 8012cae:	4630      	mov	r0, r6
 8012cb0:	4639      	mov	r1, r7
 8012cb2:	f7ed fb25 	bl	8000300 <__adddf3>
 8012cb6:	4606      	mov	r6, r0
 8012cb8:	460f      	mov	r7, r1
 8012cba:	f7ed ff87 	bl	8000bcc <__aeabi_d2iz>
 8012cbe:	2200      	movs	r2, #0
 8012cc0:	9000      	str	r0, [sp, #0]
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	4630      	mov	r0, r6
 8012cc6:	4639      	mov	r1, r7
 8012cc8:	f7ed ff42 	bl	8000b50 <__aeabi_dcmplt>
 8012ccc:	b150      	cbz	r0, 8012ce4 <_dtoa_r+0x184>
 8012cce:	9800      	ldr	r0, [sp, #0]
 8012cd0:	f7ed fc62 	bl	8000598 <__aeabi_i2d>
 8012cd4:	4632      	mov	r2, r6
 8012cd6:	463b      	mov	r3, r7
 8012cd8:	f7ed ff30 	bl	8000b3c <__aeabi_dcmpeq>
 8012cdc:	b910      	cbnz	r0, 8012ce4 <_dtoa_r+0x184>
 8012cde:	9b00      	ldr	r3, [sp, #0]
 8012ce0:	3b01      	subs	r3, #1
 8012ce2:	9300      	str	r3, [sp, #0]
 8012ce4:	9b00      	ldr	r3, [sp, #0]
 8012ce6:	2b16      	cmp	r3, #22
 8012ce8:	d85a      	bhi.n	8012da0 <_dtoa_r+0x240>
 8012cea:	9a00      	ldr	r2, [sp, #0]
 8012cec:	4b57      	ldr	r3, [pc, #348]	; (8012e4c <_dtoa_r+0x2ec>)
 8012cee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cf6:	ec51 0b19 	vmov	r0, r1, d9
 8012cfa:	f7ed ff29 	bl	8000b50 <__aeabi_dcmplt>
 8012cfe:	2800      	cmp	r0, #0
 8012d00:	d050      	beq.n	8012da4 <_dtoa_r+0x244>
 8012d02:	9b00      	ldr	r3, [sp, #0]
 8012d04:	3b01      	subs	r3, #1
 8012d06:	9300      	str	r3, [sp, #0]
 8012d08:	2300      	movs	r3, #0
 8012d0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8012d0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012d0e:	1b5d      	subs	r5, r3, r5
 8012d10:	1e6b      	subs	r3, r5, #1
 8012d12:	9305      	str	r3, [sp, #20]
 8012d14:	bf45      	ittet	mi
 8012d16:	f1c5 0301 	rsbmi	r3, r5, #1
 8012d1a:	9304      	strmi	r3, [sp, #16]
 8012d1c:	2300      	movpl	r3, #0
 8012d1e:	2300      	movmi	r3, #0
 8012d20:	bf4c      	ite	mi
 8012d22:	9305      	strmi	r3, [sp, #20]
 8012d24:	9304      	strpl	r3, [sp, #16]
 8012d26:	9b00      	ldr	r3, [sp, #0]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	db3d      	blt.n	8012da8 <_dtoa_r+0x248>
 8012d2c:	9b05      	ldr	r3, [sp, #20]
 8012d2e:	9a00      	ldr	r2, [sp, #0]
 8012d30:	920a      	str	r2, [sp, #40]	; 0x28
 8012d32:	4413      	add	r3, r2
 8012d34:	9305      	str	r3, [sp, #20]
 8012d36:	2300      	movs	r3, #0
 8012d38:	9307      	str	r3, [sp, #28]
 8012d3a:	9b06      	ldr	r3, [sp, #24]
 8012d3c:	2b09      	cmp	r3, #9
 8012d3e:	f200 8089 	bhi.w	8012e54 <_dtoa_r+0x2f4>
 8012d42:	2b05      	cmp	r3, #5
 8012d44:	bfc4      	itt	gt
 8012d46:	3b04      	subgt	r3, #4
 8012d48:	9306      	strgt	r3, [sp, #24]
 8012d4a:	9b06      	ldr	r3, [sp, #24]
 8012d4c:	f1a3 0302 	sub.w	r3, r3, #2
 8012d50:	bfcc      	ite	gt
 8012d52:	2500      	movgt	r5, #0
 8012d54:	2501      	movle	r5, #1
 8012d56:	2b03      	cmp	r3, #3
 8012d58:	f200 8087 	bhi.w	8012e6a <_dtoa_r+0x30a>
 8012d5c:	e8df f003 	tbb	[pc, r3]
 8012d60:	59383a2d 	.word	0x59383a2d
 8012d64:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012d68:	441d      	add	r5, r3
 8012d6a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012d6e:	2b20      	cmp	r3, #32
 8012d70:	bfc1      	itttt	gt
 8012d72:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012d76:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012d7a:	fa0b f303 	lslgt.w	r3, fp, r3
 8012d7e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012d82:	bfda      	itte	le
 8012d84:	f1c3 0320 	rsble	r3, r3, #32
 8012d88:	fa06 f003 	lslle.w	r0, r6, r3
 8012d8c:	4318      	orrgt	r0, r3
 8012d8e:	f7ed fbf3 	bl	8000578 <__aeabi_ui2d>
 8012d92:	2301      	movs	r3, #1
 8012d94:	4606      	mov	r6, r0
 8012d96:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012d9a:	3d01      	subs	r5, #1
 8012d9c:	930e      	str	r3, [sp, #56]	; 0x38
 8012d9e:	e76a      	b.n	8012c76 <_dtoa_r+0x116>
 8012da0:	2301      	movs	r3, #1
 8012da2:	e7b2      	b.n	8012d0a <_dtoa_r+0x1aa>
 8012da4:	900b      	str	r0, [sp, #44]	; 0x2c
 8012da6:	e7b1      	b.n	8012d0c <_dtoa_r+0x1ac>
 8012da8:	9b04      	ldr	r3, [sp, #16]
 8012daa:	9a00      	ldr	r2, [sp, #0]
 8012dac:	1a9b      	subs	r3, r3, r2
 8012dae:	9304      	str	r3, [sp, #16]
 8012db0:	4253      	negs	r3, r2
 8012db2:	9307      	str	r3, [sp, #28]
 8012db4:	2300      	movs	r3, #0
 8012db6:	930a      	str	r3, [sp, #40]	; 0x28
 8012db8:	e7bf      	b.n	8012d3a <_dtoa_r+0x1da>
 8012dba:	2300      	movs	r3, #0
 8012dbc:	9308      	str	r3, [sp, #32]
 8012dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	dc55      	bgt.n	8012e70 <_dtoa_r+0x310>
 8012dc4:	2301      	movs	r3, #1
 8012dc6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012dca:	461a      	mov	r2, r3
 8012dcc:	9209      	str	r2, [sp, #36]	; 0x24
 8012dce:	e00c      	b.n	8012dea <_dtoa_r+0x28a>
 8012dd0:	2301      	movs	r3, #1
 8012dd2:	e7f3      	b.n	8012dbc <_dtoa_r+0x25c>
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012dd8:	9308      	str	r3, [sp, #32]
 8012dda:	9b00      	ldr	r3, [sp, #0]
 8012ddc:	4413      	add	r3, r2
 8012dde:	9302      	str	r3, [sp, #8]
 8012de0:	3301      	adds	r3, #1
 8012de2:	2b01      	cmp	r3, #1
 8012de4:	9303      	str	r3, [sp, #12]
 8012de6:	bfb8      	it	lt
 8012de8:	2301      	movlt	r3, #1
 8012dea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012dec:	2200      	movs	r2, #0
 8012dee:	6042      	str	r2, [r0, #4]
 8012df0:	2204      	movs	r2, #4
 8012df2:	f102 0614 	add.w	r6, r2, #20
 8012df6:	429e      	cmp	r6, r3
 8012df8:	6841      	ldr	r1, [r0, #4]
 8012dfa:	d93d      	bls.n	8012e78 <_dtoa_r+0x318>
 8012dfc:	4620      	mov	r0, r4
 8012dfe:	f000 ffad 	bl	8013d5c <_Balloc>
 8012e02:	9001      	str	r0, [sp, #4]
 8012e04:	2800      	cmp	r0, #0
 8012e06:	d13b      	bne.n	8012e80 <_dtoa_r+0x320>
 8012e08:	4b11      	ldr	r3, [pc, #68]	; (8012e50 <_dtoa_r+0x2f0>)
 8012e0a:	4602      	mov	r2, r0
 8012e0c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012e10:	e6c0      	b.n	8012b94 <_dtoa_r+0x34>
 8012e12:	2301      	movs	r3, #1
 8012e14:	e7df      	b.n	8012dd6 <_dtoa_r+0x276>
 8012e16:	bf00      	nop
 8012e18:	636f4361 	.word	0x636f4361
 8012e1c:	3fd287a7 	.word	0x3fd287a7
 8012e20:	8b60c8b3 	.word	0x8b60c8b3
 8012e24:	3fc68a28 	.word	0x3fc68a28
 8012e28:	509f79fb 	.word	0x509f79fb
 8012e2c:	3fd34413 	.word	0x3fd34413
 8012e30:	080161ea 	.word	0x080161ea
 8012e34:	08016201 	.word	0x08016201
 8012e38:	7ff00000 	.word	0x7ff00000
 8012e3c:	080161e4 	.word	0x080161e4
 8012e40:	080161db 	.word	0x080161db
 8012e44:	080161e9 	.word	0x080161e9
 8012e48:	3ff80000 	.word	0x3ff80000
 8012e4c:	08016368 	.word	0x08016368
 8012e50:	0801625c 	.word	0x0801625c
 8012e54:	2501      	movs	r5, #1
 8012e56:	2300      	movs	r3, #0
 8012e58:	9306      	str	r3, [sp, #24]
 8012e5a:	9508      	str	r5, [sp, #32]
 8012e5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012e64:	2200      	movs	r2, #0
 8012e66:	2312      	movs	r3, #18
 8012e68:	e7b0      	b.n	8012dcc <_dtoa_r+0x26c>
 8012e6a:	2301      	movs	r3, #1
 8012e6c:	9308      	str	r3, [sp, #32]
 8012e6e:	e7f5      	b.n	8012e5c <_dtoa_r+0x2fc>
 8012e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e72:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012e76:	e7b8      	b.n	8012dea <_dtoa_r+0x28a>
 8012e78:	3101      	adds	r1, #1
 8012e7a:	6041      	str	r1, [r0, #4]
 8012e7c:	0052      	lsls	r2, r2, #1
 8012e7e:	e7b8      	b.n	8012df2 <_dtoa_r+0x292>
 8012e80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012e82:	9a01      	ldr	r2, [sp, #4]
 8012e84:	601a      	str	r2, [r3, #0]
 8012e86:	9b03      	ldr	r3, [sp, #12]
 8012e88:	2b0e      	cmp	r3, #14
 8012e8a:	f200 809d 	bhi.w	8012fc8 <_dtoa_r+0x468>
 8012e8e:	2d00      	cmp	r5, #0
 8012e90:	f000 809a 	beq.w	8012fc8 <_dtoa_r+0x468>
 8012e94:	9b00      	ldr	r3, [sp, #0]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	dd32      	ble.n	8012f00 <_dtoa_r+0x3a0>
 8012e9a:	4ab7      	ldr	r2, [pc, #732]	; (8013178 <_dtoa_r+0x618>)
 8012e9c:	f003 030f 	and.w	r3, r3, #15
 8012ea0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012ea4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012ea8:	9b00      	ldr	r3, [sp, #0]
 8012eaa:	05d8      	lsls	r0, r3, #23
 8012eac:	ea4f 1723 	mov.w	r7, r3, asr #4
 8012eb0:	d516      	bpl.n	8012ee0 <_dtoa_r+0x380>
 8012eb2:	4bb2      	ldr	r3, [pc, #712]	; (801317c <_dtoa_r+0x61c>)
 8012eb4:	ec51 0b19 	vmov	r0, r1, d9
 8012eb8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012ebc:	f7ed fd00 	bl	80008c0 <__aeabi_ddiv>
 8012ec0:	f007 070f 	and.w	r7, r7, #15
 8012ec4:	4682      	mov	sl, r0
 8012ec6:	468b      	mov	fp, r1
 8012ec8:	2503      	movs	r5, #3
 8012eca:	4eac      	ldr	r6, [pc, #688]	; (801317c <_dtoa_r+0x61c>)
 8012ecc:	b957      	cbnz	r7, 8012ee4 <_dtoa_r+0x384>
 8012ece:	4642      	mov	r2, r8
 8012ed0:	464b      	mov	r3, r9
 8012ed2:	4650      	mov	r0, sl
 8012ed4:	4659      	mov	r1, fp
 8012ed6:	f7ed fcf3 	bl	80008c0 <__aeabi_ddiv>
 8012eda:	4682      	mov	sl, r0
 8012edc:	468b      	mov	fp, r1
 8012ede:	e028      	b.n	8012f32 <_dtoa_r+0x3d2>
 8012ee0:	2502      	movs	r5, #2
 8012ee2:	e7f2      	b.n	8012eca <_dtoa_r+0x36a>
 8012ee4:	07f9      	lsls	r1, r7, #31
 8012ee6:	d508      	bpl.n	8012efa <_dtoa_r+0x39a>
 8012ee8:	4640      	mov	r0, r8
 8012eea:	4649      	mov	r1, r9
 8012eec:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012ef0:	f7ed fbbc 	bl	800066c <__aeabi_dmul>
 8012ef4:	3501      	adds	r5, #1
 8012ef6:	4680      	mov	r8, r0
 8012ef8:	4689      	mov	r9, r1
 8012efa:	107f      	asrs	r7, r7, #1
 8012efc:	3608      	adds	r6, #8
 8012efe:	e7e5      	b.n	8012ecc <_dtoa_r+0x36c>
 8012f00:	f000 809b 	beq.w	801303a <_dtoa_r+0x4da>
 8012f04:	9b00      	ldr	r3, [sp, #0]
 8012f06:	4f9d      	ldr	r7, [pc, #628]	; (801317c <_dtoa_r+0x61c>)
 8012f08:	425e      	negs	r6, r3
 8012f0a:	4b9b      	ldr	r3, [pc, #620]	; (8013178 <_dtoa_r+0x618>)
 8012f0c:	f006 020f 	and.w	r2, r6, #15
 8012f10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f18:	ec51 0b19 	vmov	r0, r1, d9
 8012f1c:	f7ed fba6 	bl	800066c <__aeabi_dmul>
 8012f20:	1136      	asrs	r6, r6, #4
 8012f22:	4682      	mov	sl, r0
 8012f24:	468b      	mov	fp, r1
 8012f26:	2300      	movs	r3, #0
 8012f28:	2502      	movs	r5, #2
 8012f2a:	2e00      	cmp	r6, #0
 8012f2c:	d17a      	bne.n	8013024 <_dtoa_r+0x4c4>
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d1d3      	bne.n	8012eda <_dtoa_r+0x37a>
 8012f32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	f000 8082 	beq.w	801303e <_dtoa_r+0x4de>
 8012f3a:	4b91      	ldr	r3, [pc, #580]	; (8013180 <_dtoa_r+0x620>)
 8012f3c:	2200      	movs	r2, #0
 8012f3e:	4650      	mov	r0, sl
 8012f40:	4659      	mov	r1, fp
 8012f42:	f7ed fe05 	bl	8000b50 <__aeabi_dcmplt>
 8012f46:	2800      	cmp	r0, #0
 8012f48:	d079      	beq.n	801303e <_dtoa_r+0x4de>
 8012f4a:	9b03      	ldr	r3, [sp, #12]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d076      	beq.n	801303e <_dtoa_r+0x4de>
 8012f50:	9b02      	ldr	r3, [sp, #8]
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	dd36      	ble.n	8012fc4 <_dtoa_r+0x464>
 8012f56:	9b00      	ldr	r3, [sp, #0]
 8012f58:	4650      	mov	r0, sl
 8012f5a:	4659      	mov	r1, fp
 8012f5c:	1e5f      	subs	r7, r3, #1
 8012f5e:	2200      	movs	r2, #0
 8012f60:	4b88      	ldr	r3, [pc, #544]	; (8013184 <_dtoa_r+0x624>)
 8012f62:	f7ed fb83 	bl	800066c <__aeabi_dmul>
 8012f66:	9e02      	ldr	r6, [sp, #8]
 8012f68:	4682      	mov	sl, r0
 8012f6a:	468b      	mov	fp, r1
 8012f6c:	3501      	adds	r5, #1
 8012f6e:	4628      	mov	r0, r5
 8012f70:	f7ed fb12 	bl	8000598 <__aeabi_i2d>
 8012f74:	4652      	mov	r2, sl
 8012f76:	465b      	mov	r3, fp
 8012f78:	f7ed fb78 	bl	800066c <__aeabi_dmul>
 8012f7c:	4b82      	ldr	r3, [pc, #520]	; (8013188 <_dtoa_r+0x628>)
 8012f7e:	2200      	movs	r2, #0
 8012f80:	f7ed f9be 	bl	8000300 <__adddf3>
 8012f84:	46d0      	mov	r8, sl
 8012f86:	46d9      	mov	r9, fp
 8012f88:	4682      	mov	sl, r0
 8012f8a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8012f8e:	2e00      	cmp	r6, #0
 8012f90:	d158      	bne.n	8013044 <_dtoa_r+0x4e4>
 8012f92:	4b7e      	ldr	r3, [pc, #504]	; (801318c <_dtoa_r+0x62c>)
 8012f94:	2200      	movs	r2, #0
 8012f96:	4640      	mov	r0, r8
 8012f98:	4649      	mov	r1, r9
 8012f9a:	f7ed f9af 	bl	80002fc <__aeabi_dsub>
 8012f9e:	4652      	mov	r2, sl
 8012fa0:	465b      	mov	r3, fp
 8012fa2:	4680      	mov	r8, r0
 8012fa4:	4689      	mov	r9, r1
 8012fa6:	f7ed fdf1 	bl	8000b8c <__aeabi_dcmpgt>
 8012faa:	2800      	cmp	r0, #0
 8012fac:	f040 8295 	bne.w	80134da <_dtoa_r+0x97a>
 8012fb0:	4652      	mov	r2, sl
 8012fb2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012fb6:	4640      	mov	r0, r8
 8012fb8:	4649      	mov	r1, r9
 8012fba:	f7ed fdc9 	bl	8000b50 <__aeabi_dcmplt>
 8012fbe:	2800      	cmp	r0, #0
 8012fc0:	f040 8289 	bne.w	80134d6 <_dtoa_r+0x976>
 8012fc4:	ec5b ab19 	vmov	sl, fp, d9
 8012fc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	f2c0 8148 	blt.w	8013260 <_dtoa_r+0x700>
 8012fd0:	9a00      	ldr	r2, [sp, #0]
 8012fd2:	2a0e      	cmp	r2, #14
 8012fd4:	f300 8144 	bgt.w	8013260 <_dtoa_r+0x700>
 8012fd8:	4b67      	ldr	r3, [pc, #412]	; (8013178 <_dtoa_r+0x618>)
 8012fda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012fde:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	f280 80d5 	bge.w	8013194 <_dtoa_r+0x634>
 8012fea:	9b03      	ldr	r3, [sp, #12]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	f300 80d1 	bgt.w	8013194 <_dtoa_r+0x634>
 8012ff2:	f040 826f 	bne.w	80134d4 <_dtoa_r+0x974>
 8012ff6:	4b65      	ldr	r3, [pc, #404]	; (801318c <_dtoa_r+0x62c>)
 8012ff8:	2200      	movs	r2, #0
 8012ffa:	4640      	mov	r0, r8
 8012ffc:	4649      	mov	r1, r9
 8012ffe:	f7ed fb35 	bl	800066c <__aeabi_dmul>
 8013002:	4652      	mov	r2, sl
 8013004:	465b      	mov	r3, fp
 8013006:	f7ed fdb7 	bl	8000b78 <__aeabi_dcmpge>
 801300a:	9e03      	ldr	r6, [sp, #12]
 801300c:	4637      	mov	r7, r6
 801300e:	2800      	cmp	r0, #0
 8013010:	f040 8245 	bne.w	801349e <_dtoa_r+0x93e>
 8013014:	9d01      	ldr	r5, [sp, #4]
 8013016:	2331      	movs	r3, #49	; 0x31
 8013018:	f805 3b01 	strb.w	r3, [r5], #1
 801301c:	9b00      	ldr	r3, [sp, #0]
 801301e:	3301      	adds	r3, #1
 8013020:	9300      	str	r3, [sp, #0]
 8013022:	e240      	b.n	80134a6 <_dtoa_r+0x946>
 8013024:	07f2      	lsls	r2, r6, #31
 8013026:	d505      	bpl.n	8013034 <_dtoa_r+0x4d4>
 8013028:	e9d7 2300 	ldrd	r2, r3, [r7]
 801302c:	f7ed fb1e 	bl	800066c <__aeabi_dmul>
 8013030:	3501      	adds	r5, #1
 8013032:	2301      	movs	r3, #1
 8013034:	1076      	asrs	r6, r6, #1
 8013036:	3708      	adds	r7, #8
 8013038:	e777      	b.n	8012f2a <_dtoa_r+0x3ca>
 801303a:	2502      	movs	r5, #2
 801303c:	e779      	b.n	8012f32 <_dtoa_r+0x3d2>
 801303e:	9f00      	ldr	r7, [sp, #0]
 8013040:	9e03      	ldr	r6, [sp, #12]
 8013042:	e794      	b.n	8012f6e <_dtoa_r+0x40e>
 8013044:	9901      	ldr	r1, [sp, #4]
 8013046:	4b4c      	ldr	r3, [pc, #304]	; (8013178 <_dtoa_r+0x618>)
 8013048:	4431      	add	r1, r6
 801304a:	910d      	str	r1, [sp, #52]	; 0x34
 801304c:	9908      	ldr	r1, [sp, #32]
 801304e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8013052:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013056:	2900      	cmp	r1, #0
 8013058:	d043      	beq.n	80130e2 <_dtoa_r+0x582>
 801305a:	494d      	ldr	r1, [pc, #308]	; (8013190 <_dtoa_r+0x630>)
 801305c:	2000      	movs	r0, #0
 801305e:	f7ed fc2f 	bl	80008c0 <__aeabi_ddiv>
 8013062:	4652      	mov	r2, sl
 8013064:	465b      	mov	r3, fp
 8013066:	f7ed f949 	bl	80002fc <__aeabi_dsub>
 801306a:	9d01      	ldr	r5, [sp, #4]
 801306c:	4682      	mov	sl, r0
 801306e:	468b      	mov	fp, r1
 8013070:	4649      	mov	r1, r9
 8013072:	4640      	mov	r0, r8
 8013074:	f7ed fdaa 	bl	8000bcc <__aeabi_d2iz>
 8013078:	4606      	mov	r6, r0
 801307a:	f7ed fa8d 	bl	8000598 <__aeabi_i2d>
 801307e:	4602      	mov	r2, r0
 8013080:	460b      	mov	r3, r1
 8013082:	4640      	mov	r0, r8
 8013084:	4649      	mov	r1, r9
 8013086:	f7ed f939 	bl	80002fc <__aeabi_dsub>
 801308a:	3630      	adds	r6, #48	; 0x30
 801308c:	f805 6b01 	strb.w	r6, [r5], #1
 8013090:	4652      	mov	r2, sl
 8013092:	465b      	mov	r3, fp
 8013094:	4680      	mov	r8, r0
 8013096:	4689      	mov	r9, r1
 8013098:	f7ed fd5a 	bl	8000b50 <__aeabi_dcmplt>
 801309c:	2800      	cmp	r0, #0
 801309e:	d163      	bne.n	8013168 <_dtoa_r+0x608>
 80130a0:	4642      	mov	r2, r8
 80130a2:	464b      	mov	r3, r9
 80130a4:	4936      	ldr	r1, [pc, #216]	; (8013180 <_dtoa_r+0x620>)
 80130a6:	2000      	movs	r0, #0
 80130a8:	f7ed f928 	bl	80002fc <__aeabi_dsub>
 80130ac:	4652      	mov	r2, sl
 80130ae:	465b      	mov	r3, fp
 80130b0:	f7ed fd4e 	bl	8000b50 <__aeabi_dcmplt>
 80130b4:	2800      	cmp	r0, #0
 80130b6:	f040 80b5 	bne.w	8013224 <_dtoa_r+0x6c4>
 80130ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80130bc:	429d      	cmp	r5, r3
 80130be:	d081      	beq.n	8012fc4 <_dtoa_r+0x464>
 80130c0:	4b30      	ldr	r3, [pc, #192]	; (8013184 <_dtoa_r+0x624>)
 80130c2:	2200      	movs	r2, #0
 80130c4:	4650      	mov	r0, sl
 80130c6:	4659      	mov	r1, fp
 80130c8:	f7ed fad0 	bl	800066c <__aeabi_dmul>
 80130cc:	4b2d      	ldr	r3, [pc, #180]	; (8013184 <_dtoa_r+0x624>)
 80130ce:	4682      	mov	sl, r0
 80130d0:	468b      	mov	fp, r1
 80130d2:	4640      	mov	r0, r8
 80130d4:	4649      	mov	r1, r9
 80130d6:	2200      	movs	r2, #0
 80130d8:	f7ed fac8 	bl	800066c <__aeabi_dmul>
 80130dc:	4680      	mov	r8, r0
 80130de:	4689      	mov	r9, r1
 80130e0:	e7c6      	b.n	8013070 <_dtoa_r+0x510>
 80130e2:	4650      	mov	r0, sl
 80130e4:	4659      	mov	r1, fp
 80130e6:	f7ed fac1 	bl	800066c <__aeabi_dmul>
 80130ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80130ec:	9d01      	ldr	r5, [sp, #4]
 80130ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80130f0:	4682      	mov	sl, r0
 80130f2:	468b      	mov	fp, r1
 80130f4:	4649      	mov	r1, r9
 80130f6:	4640      	mov	r0, r8
 80130f8:	f7ed fd68 	bl	8000bcc <__aeabi_d2iz>
 80130fc:	4606      	mov	r6, r0
 80130fe:	f7ed fa4b 	bl	8000598 <__aeabi_i2d>
 8013102:	3630      	adds	r6, #48	; 0x30
 8013104:	4602      	mov	r2, r0
 8013106:	460b      	mov	r3, r1
 8013108:	4640      	mov	r0, r8
 801310a:	4649      	mov	r1, r9
 801310c:	f7ed f8f6 	bl	80002fc <__aeabi_dsub>
 8013110:	f805 6b01 	strb.w	r6, [r5], #1
 8013114:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013116:	429d      	cmp	r5, r3
 8013118:	4680      	mov	r8, r0
 801311a:	4689      	mov	r9, r1
 801311c:	f04f 0200 	mov.w	r2, #0
 8013120:	d124      	bne.n	801316c <_dtoa_r+0x60c>
 8013122:	4b1b      	ldr	r3, [pc, #108]	; (8013190 <_dtoa_r+0x630>)
 8013124:	4650      	mov	r0, sl
 8013126:	4659      	mov	r1, fp
 8013128:	f7ed f8ea 	bl	8000300 <__adddf3>
 801312c:	4602      	mov	r2, r0
 801312e:	460b      	mov	r3, r1
 8013130:	4640      	mov	r0, r8
 8013132:	4649      	mov	r1, r9
 8013134:	f7ed fd2a 	bl	8000b8c <__aeabi_dcmpgt>
 8013138:	2800      	cmp	r0, #0
 801313a:	d173      	bne.n	8013224 <_dtoa_r+0x6c4>
 801313c:	4652      	mov	r2, sl
 801313e:	465b      	mov	r3, fp
 8013140:	4913      	ldr	r1, [pc, #76]	; (8013190 <_dtoa_r+0x630>)
 8013142:	2000      	movs	r0, #0
 8013144:	f7ed f8da 	bl	80002fc <__aeabi_dsub>
 8013148:	4602      	mov	r2, r0
 801314a:	460b      	mov	r3, r1
 801314c:	4640      	mov	r0, r8
 801314e:	4649      	mov	r1, r9
 8013150:	f7ed fcfe 	bl	8000b50 <__aeabi_dcmplt>
 8013154:	2800      	cmp	r0, #0
 8013156:	f43f af35 	beq.w	8012fc4 <_dtoa_r+0x464>
 801315a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801315c:	1e6b      	subs	r3, r5, #1
 801315e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013160:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013164:	2b30      	cmp	r3, #48	; 0x30
 8013166:	d0f8      	beq.n	801315a <_dtoa_r+0x5fa>
 8013168:	9700      	str	r7, [sp, #0]
 801316a:	e049      	b.n	8013200 <_dtoa_r+0x6a0>
 801316c:	4b05      	ldr	r3, [pc, #20]	; (8013184 <_dtoa_r+0x624>)
 801316e:	f7ed fa7d 	bl	800066c <__aeabi_dmul>
 8013172:	4680      	mov	r8, r0
 8013174:	4689      	mov	r9, r1
 8013176:	e7bd      	b.n	80130f4 <_dtoa_r+0x594>
 8013178:	08016368 	.word	0x08016368
 801317c:	08016340 	.word	0x08016340
 8013180:	3ff00000 	.word	0x3ff00000
 8013184:	40240000 	.word	0x40240000
 8013188:	401c0000 	.word	0x401c0000
 801318c:	40140000 	.word	0x40140000
 8013190:	3fe00000 	.word	0x3fe00000
 8013194:	9d01      	ldr	r5, [sp, #4]
 8013196:	4656      	mov	r6, sl
 8013198:	465f      	mov	r7, fp
 801319a:	4642      	mov	r2, r8
 801319c:	464b      	mov	r3, r9
 801319e:	4630      	mov	r0, r6
 80131a0:	4639      	mov	r1, r7
 80131a2:	f7ed fb8d 	bl	80008c0 <__aeabi_ddiv>
 80131a6:	f7ed fd11 	bl	8000bcc <__aeabi_d2iz>
 80131aa:	4682      	mov	sl, r0
 80131ac:	f7ed f9f4 	bl	8000598 <__aeabi_i2d>
 80131b0:	4642      	mov	r2, r8
 80131b2:	464b      	mov	r3, r9
 80131b4:	f7ed fa5a 	bl	800066c <__aeabi_dmul>
 80131b8:	4602      	mov	r2, r0
 80131ba:	460b      	mov	r3, r1
 80131bc:	4630      	mov	r0, r6
 80131be:	4639      	mov	r1, r7
 80131c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80131c4:	f7ed f89a 	bl	80002fc <__aeabi_dsub>
 80131c8:	f805 6b01 	strb.w	r6, [r5], #1
 80131cc:	9e01      	ldr	r6, [sp, #4]
 80131ce:	9f03      	ldr	r7, [sp, #12]
 80131d0:	1bae      	subs	r6, r5, r6
 80131d2:	42b7      	cmp	r7, r6
 80131d4:	4602      	mov	r2, r0
 80131d6:	460b      	mov	r3, r1
 80131d8:	d135      	bne.n	8013246 <_dtoa_r+0x6e6>
 80131da:	f7ed f891 	bl	8000300 <__adddf3>
 80131de:	4642      	mov	r2, r8
 80131e0:	464b      	mov	r3, r9
 80131e2:	4606      	mov	r6, r0
 80131e4:	460f      	mov	r7, r1
 80131e6:	f7ed fcd1 	bl	8000b8c <__aeabi_dcmpgt>
 80131ea:	b9d0      	cbnz	r0, 8013222 <_dtoa_r+0x6c2>
 80131ec:	4642      	mov	r2, r8
 80131ee:	464b      	mov	r3, r9
 80131f0:	4630      	mov	r0, r6
 80131f2:	4639      	mov	r1, r7
 80131f4:	f7ed fca2 	bl	8000b3c <__aeabi_dcmpeq>
 80131f8:	b110      	cbz	r0, 8013200 <_dtoa_r+0x6a0>
 80131fa:	f01a 0f01 	tst.w	sl, #1
 80131fe:	d110      	bne.n	8013222 <_dtoa_r+0x6c2>
 8013200:	4620      	mov	r0, r4
 8013202:	ee18 1a10 	vmov	r1, s16
 8013206:	f000 fde9 	bl	8013ddc <_Bfree>
 801320a:	2300      	movs	r3, #0
 801320c:	9800      	ldr	r0, [sp, #0]
 801320e:	702b      	strb	r3, [r5, #0]
 8013210:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013212:	3001      	adds	r0, #1
 8013214:	6018      	str	r0, [r3, #0]
 8013216:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013218:	2b00      	cmp	r3, #0
 801321a:	f43f acf1 	beq.w	8012c00 <_dtoa_r+0xa0>
 801321e:	601d      	str	r5, [r3, #0]
 8013220:	e4ee      	b.n	8012c00 <_dtoa_r+0xa0>
 8013222:	9f00      	ldr	r7, [sp, #0]
 8013224:	462b      	mov	r3, r5
 8013226:	461d      	mov	r5, r3
 8013228:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801322c:	2a39      	cmp	r2, #57	; 0x39
 801322e:	d106      	bne.n	801323e <_dtoa_r+0x6de>
 8013230:	9a01      	ldr	r2, [sp, #4]
 8013232:	429a      	cmp	r2, r3
 8013234:	d1f7      	bne.n	8013226 <_dtoa_r+0x6c6>
 8013236:	9901      	ldr	r1, [sp, #4]
 8013238:	2230      	movs	r2, #48	; 0x30
 801323a:	3701      	adds	r7, #1
 801323c:	700a      	strb	r2, [r1, #0]
 801323e:	781a      	ldrb	r2, [r3, #0]
 8013240:	3201      	adds	r2, #1
 8013242:	701a      	strb	r2, [r3, #0]
 8013244:	e790      	b.n	8013168 <_dtoa_r+0x608>
 8013246:	4ba6      	ldr	r3, [pc, #664]	; (80134e0 <_dtoa_r+0x980>)
 8013248:	2200      	movs	r2, #0
 801324a:	f7ed fa0f 	bl	800066c <__aeabi_dmul>
 801324e:	2200      	movs	r2, #0
 8013250:	2300      	movs	r3, #0
 8013252:	4606      	mov	r6, r0
 8013254:	460f      	mov	r7, r1
 8013256:	f7ed fc71 	bl	8000b3c <__aeabi_dcmpeq>
 801325a:	2800      	cmp	r0, #0
 801325c:	d09d      	beq.n	801319a <_dtoa_r+0x63a>
 801325e:	e7cf      	b.n	8013200 <_dtoa_r+0x6a0>
 8013260:	9a08      	ldr	r2, [sp, #32]
 8013262:	2a00      	cmp	r2, #0
 8013264:	f000 80d7 	beq.w	8013416 <_dtoa_r+0x8b6>
 8013268:	9a06      	ldr	r2, [sp, #24]
 801326a:	2a01      	cmp	r2, #1
 801326c:	f300 80ba 	bgt.w	80133e4 <_dtoa_r+0x884>
 8013270:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013272:	2a00      	cmp	r2, #0
 8013274:	f000 80b2 	beq.w	80133dc <_dtoa_r+0x87c>
 8013278:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801327c:	9e07      	ldr	r6, [sp, #28]
 801327e:	9d04      	ldr	r5, [sp, #16]
 8013280:	9a04      	ldr	r2, [sp, #16]
 8013282:	441a      	add	r2, r3
 8013284:	9204      	str	r2, [sp, #16]
 8013286:	9a05      	ldr	r2, [sp, #20]
 8013288:	2101      	movs	r1, #1
 801328a:	441a      	add	r2, r3
 801328c:	4620      	mov	r0, r4
 801328e:	9205      	str	r2, [sp, #20]
 8013290:	f000 fe5c 	bl	8013f4c <__i2b>
 8013294:	4607      	mov	r7, r0
 8013296:	2d00      	cmp	r5, #0
 8013298:	dd0c      	ble.n	80132b4 <_dtoa_r+0x754>
 801329a:	9b05      	ldr	r3, [sp, #20]
 801329c:	2b00      	cmp	r3, #0
 801329e:	dd09      	ble.n	80132b4 <_dtoa_r+0x754>
 80132a0:	42ab      	cmp	r3, r5
 80132a2:	9a04      	ldr	r2, [sp, #16]
 80132a4:	bfa8      	it	ge
 80132a6:	462b      	movge	r3, r5
 80132a8:	1ad2      	subs	r2, r2, r3
 80132aa:	9204      	str	r2, [sp, #16]
 80132ac:	9a05      	ldr	r2, [sp, #20]
 80132ae:	1aed      	subs	r5, r5, r3
 80132b0:	1ad3      	subs	r3, r2, r3
 80132b2:	9305      	str	r3, [sp, #20]
 80132b4:	9b07      	ldr	r3, [sp, #28]
 80132b6:	b31b      	cbz	r3, 8013300 <_dtoa_r+0x7a0>
 80132b8:	9b08      	ldr	r3, [sp, #32]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	f000 80af 	beq.w	801341e <_dtoa_r+0x8be>
 80132c0:	2e00      	cmp	r6, #0
 80132c2:	dd13      	ble.n	80132ec <_dtoa_r+0x78c>
 80132c4:	4639      	mov	r1, r7
 80132c6:	4632      	mov	r2, r6
 80132c8:	4620      	mov	r0, r4
 80132ca:	f000 feff 	bl	80140cc <__pow5mult>
 80132ce:	ee18 2a10 	vmov	r2, s16
 80132d2:	4601      	mov	r1, r0
 80132d4:	4607      	mov	r7, r0
 80132d6:	4620      	mov	r0, r4
 80132d8:	f000 fe4e 	bl	8013f78 <__multiply>
 80132dc:	ee18 1a10 	vmov	r1, s16
 80132e0:	4680      	mov	r8, r0
 80132e2:	4620      	mov	r0, r4
 80132e4:	f000 fd7a 	bl	8013ddc <_Bfree>
 80132e8:	ee08 8a10 	vmov	s16, r8
 80132ec:	9b07      	ldr	r3, [sp, #28]
 80132ee:	1b9a      	subs	r2, r3, r6
 80132f0:	d006      	beq.n	8013300 <_dtoa_r+0x7a0>
 80132f2:	ee18 1a10 	vmov	r1, s16
 80132f6:	4620      	mov	r0, r4
 80132f8:	f000 fee8 	bl	80140cc <__pow5mult>
 80132fc:	ee08 0a10 	vmov	s16, r0
 8013300:	2101      	movs	r1, #1
 8013302:	4620      	mov	r0, r4
 8013304:	f000 fe22 	bl	8013f4c <__i2b>
 8013308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801330a:	2b00      	cmp	r3, #0
 801330c:	4606      	mov	r6, r0
 801330e:	f340 8088 	ble.w	8013422 <_dtoa_r+0x8c2>
 8013312:	461a      	mov	r2, r3
 8013314:	4601      	mov	r1, r0
 8013316:	4620      	mov	r0, r4
 8013318:	f000 fed8 	bl	80140cc <__pow5mult>
 801331c:	9b06      	ldr	r3, [sp, #24]
 801331e:	2b01      	cmp	r3, #1
 8013320:	4606      	mov	r6, r0
 8013322:	f340 8081 	ble.w	8013428 <_dtoa_r+0x8c8>
 8013326:	f04f 0800 	mov.w	r8, #0
 801332a:	6933      	ldr	r3, [r6, #16]
 801332c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013330:	6918      	ldr	r0, [r3, #16]
 8013332:	f000 fdbb 	bl	8013eac <__hi0bits>
 8013336:	f1c0 0020 	rsb	r0, r0, #32
 801333a:	9b05      	ldr	r3, [sp, #20]
 801333c:	4418      	add	r0, r3
 801333e:	f010 001f 	ands.w	r0, r0, #31
 8013342:	f000 8092 	beq.w	801346a <_dtoa_r+0x90a>
 8013346:	f1c0 0320 	rsb	r3, r0, #32
 801334a:	2b04      	cmp	r3, #4
 801334c:	f340 808a 	ble.w	8013464 <_dtoa_r+0x904>
 8013350:	f1c0 001c 	rsb	r0, r0, #28
 8013354:	9b04      	ldr	r3, [sp, #16]
 8013356:	4403      	add	r3, r0
 8013358:	9304      	str	r3, [sp, #16]
 801335a:	9b05      	ldr	r3, [sp, #20]
 801335c:	4403      	add	r3, r0
 801335e:	4405      	add	r5, r0
 8013360:	9305      	str	r3, [sp, #20]
 8013362:	9b04      	ldr	r3, [sp, #16]
 8013364:	2b00      	cmp	r3, #0
 8013366:	dd07      	ble.n	8013378 <_dtoa_r+0x818>
 8013368:	ee18 1a10 	vmov	r1, s16
 801336c:	461a      	mov	r2, r3
 801336e:	4620      	mov	r0, r4
 8013370:	f000 ff06 	bl	8014180 <__lshift>
 8013374:	ee08 0a10 	vmov	s16, r0
 8013378:	9b05      	ldr	r3, [sp, #20]
 801337a:	2b00      	cmp	r3, #0
 801337c:	dd05      	ble.n	801338a <_dtoa_r+0x82a>
 801337e:	4631      	mov	r1, r6
 8013380:	461a      	mov	r2, r3
 8013382:	4620      	mov	r0, r4
 8013384:	f000 fefc 	bl	8014180 <__lshift>
 8013388:	4606      	mov	r6, r0
 801338a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801338c:	2b00      	cmp	r3, #0
 801338e:	d06e      	beq.n	801346e <_dtoa_r+0x90e>
 8013390:	ee18 0a10 	vmov	r0, s16
 8013394:	4631      	mov	r1, r6
 8013396:	f000 ff63 	bl	8014260 <__mcmp>
 801339a:	2800      	cmp	r0, #0
 801339c:	da67      	bge.n	801346e <_dtoa_r+0x90e>
 801339e:	9b00      	ldr	r3, [sp, #0]
 80133a0:	3b01      	subs	r3, #1
 80133a2:	ee18 1a10 	vmov	r1, s16
 80133a6:	9300      	str	r3, [sp, #0]
 80133a8:	220a      	movs	r2, #10
 80133aa:	2300      	movs	r3, #0
 80133ac:	4620      	mov	r0, r4
 80133ae:	f000 fd37 	bl	8013e20 <__multadd>
 80133b2:	9b08      	ldr	r3, [sp, #32]
 80133b4:	ee08 0a10 	vmov	s16, r0
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	f000 81b1 	beq.w	8013720 <_dtoa_r+0xbc0>
 80133be:	2300      	movs	r3, #0
 80133c0:	4639      	mov	r1, r7
 80133c2:	220a      	movs	r2, #10
 80133c4:	4620      	mov	r0, r4
 80133c6:	f000 fd2b 	bl	8013e20 <__multadd>
 80133ca:	9b02      	ldr	r3, [sp, #8]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	4607      	mov	r7, r0
 80133d0:	f300 808e 	bgt.w	80134f0 <_dtoa_r+0x990>
 80133d4:	9b06      	ldr	r3, [sp, #24]
 80133d6:	2b02      	cmp	r3, #2
 80133d8:	dc51      	bgt.n	801347e <_dtoa_r+0x91e>
 80133da:	e089      	b.n	80134f0 <_dtoa_r+0x990>
 80133dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80133de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80133e2:	e74b      	b.n	801327c <_dtoa_r+0x71c>
 80133e4:	9b03      	ldr	r3, [sp, #12]
 80133e6:	1e5e      	subs	r6, r3, #1
 80133e8:	9b07      	ldr	r3, [sp, #28]
 80133ea:	42b3      	cmp	r3, r6
 80133ec:	bfbf      	itttt	lt
 80133ee:	9b07      	ldrlt	r3, [sp, #28]
 80133f0:	9607      	strlt	r6, [sp, #28]
 80133f2:	1af2      	sublt	r2, r6, r3
 80133f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80133f6:	bfb6      	itet	lt
 80133f8:	189b      	addlt	r3, r3, r2
 80133fa:	1b9e      	subge	r6, r3, r6
 80133fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80133fe:	9b03      	ldr	r3, [sp, #12]
 8013400:	bfb8      	it	lt
 8013402:	2600      	movlt	r6, #0
 8013404:	2b00      	cmp	r3, #0
 8013406:	bfb7      	itett	lt
 8013408:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801340c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8013410:	1a9d      	sublt	r5, r3, r2
 8013412:	2300      	movlt	r3, #0
 8013414:	e734      	b.n	8013280 <_dtoa_r+0x720>
 8013416:	9e07      	ldr	r6, [sp, #28]
 8013418:	9d04      	ldr	r5, [sp, #16]
 801341a:	9f08      	ldr	r7, [sp, #32]
 801341c:	e73b      	b.n	8013296 <_dtoa_r+0x736>
 801341e:	9a07      	ldr	r2, [sp, #28]
 8013420:	e767      	b.n	80132f2 <_dtoa_r+0x792>
 8013422:	9b06      	ldr	r3, [sp, #24]
 8013424:	2b01      	cmp	r3, #1
 8013426:	dc18      	bgt.n	801345a <_dtoa_r+0x8fa>
 8013428:	f1ba 0f00 	cmp.w	sl, #0
 801342c:	d115      	bne.n	801345a <_dtoa_r+0x8fa>
 801342e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013432:	b993      	cbnz	r3, 801345a <_dtoa_r+0x8fa>
 8013434:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013438:	0d1b      	lsrs	r3, r3, #20
 801343a:	051b      	lsls	r3, r3, #20
 801343c:	b183      	cbz	r3, 8013460 <_dtoa_r+0x900>
 801343e:	9b04      	ldr	r3, [sp, #16]
 8013440:	3301      	adds	r3, #1
 8013442:	9304      	str	r3, [sp, #16]
 8013444:	9b05      	ldr	r3, [sp, #20]
 8013446:	3301      	adds	r3, #1
 8013448:	9305      	str	r3, [sp, #20]
 801344a:	f04f 0801 	mov.w	r8, #1
 801344e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013450:	2b00      	cmp	r3, #0
 8013452:	f47f af6a 	bne.w	801332a <_dtoa_r+0x7ca>
 8013456:	2001      	movs	r0, #1
 8013458:	e76f      	b.n	801333a <_dtoa_r+0x7da>
 801345a:	f04f 0800 	mov.w	r8, #0
 801345e:	e7f6      	b.n	801344e <_dtoa_r+0x8ee>
 8013460:	4698      	mov	r8, r3
 8013462:	e7f4      	b.n	801344e <_dtoa_r+0x8ee>
 8013464:	f43f af7d 	beq.w	8013362 <_dtoa_r+0x802>
 8013468:	4618      	mov	r0, r3
 801346a:	301c      	adds	r0, #28
 801346c:	e772      	b.n	8013354 <_dtoa_r+0x7f4>
 801346e:	9b03      	ldr	r3, [sp, #12]
 8013470:	2b00      	cmp	r3, #0
 8013472:	dc37      	bgt.n	80134e4 <_dtoa_r+0x984>
 8013474:	9b06      	ldr	r3, [sp, #24]
 8013476:	2b02      	cmp	r3, #2
 8013478:	dd34      	ble.n	80134e4 <_dtoa_r+0x984>
 801347a:	9b03      	ldr	r3, [sp, #12]
 801347c:	9302      	str	r3, [sp, #8]
 801347e:	9b02      	ldr	r3, [sp, #8]
 8013480:	b96b      	cbnz	r3, 801349e <_dtoa_r+0x93e>
 8013482:	4631      	mov	r1, r6
 8013484:	2205      	movs	r2, #5
 8013486:	4620      	mov	r0, r4
 8013488:	f000 fcca 	bl	8013e20 <__multadd>
 801348c:	4601      	mov	r1, r0
 801348e:	4606      	mov	r6, r0
 8013490:	ee18 0a10 	vmov	r0, s16
 8013494:	f000 fee4 	bl	8014260 <__mcmp>
 8013498:	2800      	cmp	r0, #0
 801349a:	f73f adbb 	bgt.w	8013014 <_dtoa_r+0x4b4>
 801349e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134a0:	9d01      	ldr	r5, [sp, #4]
 80134a2:	43db      	mvns	r3, r3
 80134a4:	9300      	str	r3, [sp, #0]
 80134a6:	f04f 0800 	mov.w	r8, #0
 80134aa:	4631      	mov	r1, r6
 80134ac:	4620      	mov	r0, r4
 80134ae:	f000 fc95 	bl	8013ddc <_Bfree>
 80134b2:	2f00      	cmp	r7, #0
 80134b4:	f43f aea4 	beq.w	8013200 <_dtoa_r+0x6a0>
 80134b8:	f1b8 0f00 	cmp.w	r8, #0
 80134bc:	d005      	beq.n	80134ca <_dtoa_r+0x96a>
 80134be:	45b8      	cmp	r8, r7
 80134c0:	d003      	beq.n	80134ca <_dtoa_r+0x96a>
 80134c2:	4641      	mov	r1, r8
 80134c4:	4620      	mov	r0, r4
 80134c6:	f000 fc89 	bl	8013ddc <_Bfree>
 80134ca:	4639      	mov	r1, r7
 80134cc:	4620      	mov	r0, r4
 80134ce:	f000 fc85 	bl	8013ddc <_Bfree>
 80134d2:	e695      	b.n	8013200 <_dtoa_r+0x6a0>
 80134d4:	2600      	movs	r6, #0
 80134d6:	4637      	mov	r7, r6
 80134d8:	e7e1      	b.n	801349e <_dtoa_r+0x93e>
 80134da:	9700      	str	r7, [sp, #0]
 80134dc:	4637      	mov	r7, r6
 80134de:	e599      	b.n	8013014 <_dtoa_r+0x4b4>
 80134e0:	40240000 	.word	0x40240000
 80134e4:	9b08      	ldr	r3, [sp, #32]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	f000 80ca 	beq.w	8013680 <_dtoa_r+0xb20>
 80134ec:	9b03      	ldr	r3, [sp, #12]
 80134ee:	9302      	str	r3, [sp, #8]
 80134f0:	2d00      	cmp	r5, #0
 80134f2:	dd05      	ble.n	8013500 <_dtoa_r+0x9a0>
 80134f4:	4639      	mov	r1, r7
 80134f6:	462a      	mov	r2, r5
 80134f8:	4620      	mov	r0, r4
 80134fa:	f000 fe41 	bl	8014180 <__lshift>
 80134fe:	4607      	mov	r7, r0
 8013500:	f1b8 0f00 	cmp.w	r8, #0
 8013504:	d05b      	beq.n	80135be <_dtoa_r+0xa5e>
 8013506:	6879      	ldr	r1, [r7, #4]
 8013508:	4620      	mov	r0, r4
 801350a:	f000 fc27 	bl	8013d5c <_Balloc>
 801350e:	4605      	mov	r5, r0
 8013510:	b928      	cbnz	r0, 801351e <_dtoa_r+0x9be>
 8013512:	4b87      	ldr	r3, [pc, #540]	; (8013730 <_dtoa_r+0xbd0>)
 8013514:	4602      	mov	r2, r0
 8013516:	f240 21ea 	movw	r1, #746	; 0x2ea
 801351a:	f7ff bb3b 	b.w	8012b94 <_dtoa_r+0x34>
 801351e:	693a      	ldr	r2, [r7, #16]
 8013520:	3202      	adds	r2, #2
 8013522:	0092      	lsls	r2, r2, #2
 8013524:	f107 010c 	add.w	r1, r7, #12
 8013528:	300c      	adds	r0, #12
 801352a:	f000 fbdb 	bl	8013ce4 <memcpy>
 801352e:	2201      	movs	r2, #1
 8013530:	4629      	mov	r1, r5
 8013532:	4620      	mov	r0, r4
 8013534:	f000 fe24 	bl	8014180 <__lshift>
 8013538:	9b01      	ldr	r3, [sp, #4]
 801353a:	f103 0901 	add.w	r9, r3, #1
 801353e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8013542:	4413      	add	r3, r2
 8013544:	9305      	str	r3, [sp, #20]
 8013546:	f00a 0301 	and.w	r3, sl, #1
 801354a:	46b8      	mov	r8, r7
 801354c:	9304      	str	r3, [sp, #16]
 801354e:	4607      	mov	r7, r0
 8013550:	4631      	mov	r1, r6
 8013552:	ee18 0a10 	vmov	r0, s16
 8013556:	f7ff fa75 	bl	8012a44 <quorem>
 801355a:	4641      	mov	r1, r8
 801355c:	9002      	str	r0, [sp, #8]
 801355e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8013562:	ee18 0a10 	vmov	r0, s16
 8013566:	f000 fe7b 	bl	8014260 <__mcmp>
 801356a:	463a      	mov	r2, r7
 801356c:	9003      	str	r0, [sp, #12]
 801356e:	4631      	mov	r1, r6
 8013570:	4620      	mov	r0, r4
 8013572:	f000 fe91 	bl	8014298 <__mdiff>
 8013576:	68c2      	ldr	r2, [r0, #12]
 8013578:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 801357c:	4605      	mov	r5, r0
 801357e:	bb02      	cbnz	r2, 80135c2 <_dtoa_r+0xa62>
 8013580:	4601      	mov	r1, r0
 8013582:	ee18 0a10 	vmov	r0, s16
 8013586:	f000 fe6b 	bl	8014260 <__mcmp>
 801358a:	4602      	mov	r2, r0
 801358c:	4629      	mov	r1, r5
 801358e:	4620      	mov	r0, r4
 8013590:	9207      	str	r2, [sp, #28]
 8013592:	f000 fc23 	bl	8013ddc <_Bfree>
 8013596:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801359a:	ea43 0102 	orr.w	r1, r3, r2
 801359e:	9b04      	ldr	r3, [sp, #16]
 80135a0:	430b      	orrs	r3, r1
 80135a2:	464d      	mov	r5, r9
 80135a4:	d10f      	bne.n	80135c6 <_dtoa_r+0xa66>
 80135a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80135aa:	d02a      	beq.n	8013602 <_dtoa_r+0xaa2>
 80135ac:	9b03      	ldr	r3, [sp, #12]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	dd02      	ble.n	80135b8 <_dtoa_r+0xa58>
 80135b2:	9b02      	ldr	r3, [sp, #8]
 80135b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80135b8:	f88b a000 	strb.w	sl, [fp]
 80135bc:	e775      	b.n	80134aa <_dtoa_r+0x94a>
 80135be:	4638      	mov	r0, r7
 80135c0:	e7ba      	b.n	8013538 <_dtoa_r+0x9d8>
 80135c2:	2201      	movs	r2, #1
 80135c4:	e7e2      	b.n	801358c <_dtoa_r+0xa2c>
 80135c6:	9b03      	ldr	r3, [sp, #12]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	db04      	blt.n	80135d6 <_dtoa_r+0xa76>
 80135cc:	9906      	ldr	r1, [sp, #24]
 80135ce:	430b      	orrs	r3, r1
 80135d0:	9904      	ldr	r1, [sp, #16]
 80135d2:	430b      	orrs	r3, r1
 80135d4:	d122      	bne.n	801361c <_dtoa_r+0xabc>
 80135d6:	2a00      	cmp	r2, #0
 80135d8:	ddee      	ble.n	80135b8 <_dtoa_r+0xa58>
 80135da:	ee18 1a10 	vmov	r1, s16
 80135de:	2201      	movs	r2, #1
 80135e0:	4620      	mov	r0, r4
 80135e2:	f000 fdcd 	bl	8014180 <__lshift>
 80135e6:	4631      	mov	r1, r6
 80135e8:	ee08 0a10 	vmov	s16, r0
 80135ec:	f000 fe38 	bl	8014260 <__mcmp>
 80135f0:	2800      	cmp	r0, #0
 80135f2:	dc03      	bgt.n	80135fc <_dtoa_r+0xa9c>
 80135f4:	d1e0      	bne.n	80135b8 <_dtoa_r+0xa58>
 80135f6:	f01a 0f01 	tst.w	sl, #1
 80135fa:	d0dd      	beq.n	80135b8 <_dtoa_r+0xa58>
 80135fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013600:	d1d7      	bne.n	80135b2 <_dtoa_r+0xa52>
 8013602:	2339      	movs	r3, #57	; 0x39
 8013604:	f88b 3000 	strb.w	r3, [fp]
 8013608:	462b      	mov	r3, r5
 801360a:	461d      	mov	r5, r3
 801360c:	3b01      	subs	r3, #1
 801360e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013612:	2a39      	cmp	r2, #57	; 0x39
 8013614:	d071      	beq.n	80136fa <_dtoa_r+0xb9a>
 8013616:	3201      	adds	r2, #1
 8013618:	701a      	strb	r2, [r3, #0]
 801361a:	e746      	b.n	80134aa <_dtoa_r+0x94a>
 801361c:	2a00      	cmp	r2, #0
 801361e:	dd07      	ble.n	8013630 <_dtoa_r+0xad0>
 8013620:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013624:	d0ed      	beq.n	8013602 <_dtoa_r+0xaa2>
 8013626:	f10a 0301 	add.w	r3, sl, #1
 801362a:	f88b 3000 	strb.w	r3, [fp]
 801362e:	e73c      	b.n	80134aa <_dtoa_r+0x94a>
 8013630:	9b05      	ldr	r3, [sp, #20]
 8013632:	f809 ac01 	strb.w	sl, [r9, #-1]
 8013636:	4599      	cmp	r9, r3
 8013638:	d047      	beq.n	80136ca <_dtoa_r+0xb6a>
 801363a:	ee18 1a10 	vmov	r1, s16
 801363e:	2300      	movs	r3, #0
 8013640:	220a      	movs	r2, #10
 8013642:	4620      	mov	r0, r4
 8013644:	f000 fbec 	bl	8013e20 <__multadd>
 8013648:	45b8      	cmp	r8, r7
 801364a:	ee08 0a10 	vmov	s16, r0
 801364e:	f04f 0300 	mov.w	r3, #0
 8013652:	f04f 020a 	mov.w	r2, #10
 8013656:	4641      	mov	r1, r8
 8013658:	4620      	mov	r0, r4
 801365a:	d106      	bne.n	801366a <_dtoa_r+0xb0a>
 801365c:	f000 fbe0 	bl	8013e20 <__multadd>
 8013660:	4680      	mov	r8, r0
 8013662:	4607      	mov	r7, r0
 8013664:	f109 0901 	add.w	r9, r9, #1
 8013668:	e772      	b.n	8013550 <_dtoa_r+0x9f0>
 801366a:	f000 fbd9 	bl	8013e20 <__multadd>
 801366e:	4639      	mov	r1, r7
 8013670:	4680      	mov	r8, r0
 8013672:	2300      	movs	r3, #0
 8013674:	220a      	movs	r2, #10
 8013676:	4620      	mov	r0, r4
 8013678:	f000 fbd2 	bl	8013e20 <__multadd>
 801367c:	4607      	mov	r7, r0
 801367e:	e7f1      	b.n	8013664 <_dtoa_r+0xb04>
 8013680:	9b03      	ldr	r3, [sp, #12]
 8013682:	9302      	str	r3, [sp, #8]
 8013684:	9d01      	ldr	r5, [sp, #4]
 8013686:	ee18 0a10 	vmov	r0, s16
 801368a:	4631      	mov	r1, r6
 801368c:	f7ff f9da 	bl	8012a44 <quorem>
 8013690:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8013694:	9b01      	ldr	r3, [sp, #4]
 8013696:	f805 ab01 	strb.w	sl, [r5], #1
 801369a:	1aea      	subs	r2, r5, r3
 801369c:	9b02      	ldr	r3, [sp, #8]
 801369e:	4293      	cmp	r3, r2
 80136a0:	dd09      	ble.n	80136b6 <_dtoa_r+0xb56>
 80136a2:	ee18 1a10 	vmov	r1, s16
 80136a6:	2300      	movs	r3, #0
 80136a8:	220a      	movs	r2, #10
 80136aa:	4620      	mov	r0, r4
 80136ac:	f000 fbb8 	bl	8013e20 <__multadd>
 80136b0:	ee08 0a10 	vmov	s16, r0
 80136b4:	e7e7      	b.n	8013686 <_dtoa_r+0xb26>
 80136b6:	9b02      	ldr	r3, [sp, #8]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	bfc8      	it	gt
 80136bc:	461d      	movgt	r5, r3
 80136be:	9b01      	ldr	r3, [sp, #4]
 80136c0:	bfd8      	it	le
 80136c2:	2501      	movle	r5, #1
 80136c4:	441d      	add	r5, r3
 80136c6:	f04f 0800 	mov.w	r8, #0
 80136ca:	ee18 1a10 	vmov	r1, s16
 80136ce:	2201      	movs	r2, #1
 80136d0:	4620      	mov	r0, r4
 80136d2:	f000 fd55 	bl	8014180 <__lshift>
 80136d6:	4631      	mov	r1, r6
 80136d8:	ee08 0a10 	vmov	s16, r0
 80136dc:	f000 fdc0 	bl	8014260 <__mcmp>
 80136e0:	2800      	cmp	r0, #0
 80136e2:	dc91      	bgt.n	8013608 <_dtoa_r+0xaa8>
 80136e4:	d102      	bne.n	80136ec <_dtoa_r+0xb8c>
 80136e6:	f01a 0f01 	tst.w	sl, #1
 80136ea:	d18d      	bne.n	8013608 <_dtoa_r+0xaa8>
 80136ec:	462b      	mov	r3, r5
 80136ee:	461d      	mov	r5, r3
 80136f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80136f4:	2a30      	cmp	r2, #48	; 0x30
 80136f6:	d0fa      	beq.n	80136ee <_dtoa_r+0xb8e>
 80136f8:	e6d7      	b.n	80134aa <_dtoa_r+0x94a>
 80136fa:	9a01      	ldr	r2, [sp, #4]
 80136fc:	429a      	cmp	r2, r3
 80136fe:	d184      	bne.n	801360a <_dtoa_r+0xaaa>
 8013700:	9b00      	ldr	r3, [sp, #0]
 8013702:	3301      	adds	r3, #1
 8013704:	9300      	str	r3, [sp, #0]
 8013706:	2331      	movs	r3, #49	; 0x31
 8013708:	7013      	strb	r3, [r2, #0]
 801370a:	e6ce      	b.n	80134aa <_dtoa_r+0x94a>
 801370c:	4b09      	ldr	r3, [pc, #36]	; (8013734 <_dtoa_r+0xbd4>)
 801370e:	f7ff ba95 	b.w	8012c3c <_dtoa_r+0xdc>
 8013712:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013714:	2b00      	cmp	r3, #0
 8013716:	f47f aa6e 	bne.w	8012bf6 <_dtoa_r+0x96>
 801371a:	4b07      	ldr	r3, [pc, #28]	; (8013738 <_dtoa_r+0xbd8>)
 801371c:	f7ff ba8e 	b.w	8012c3c <_dtoa_r+0xdc>
 8013720:	9b02      	ldr	r3, [sp, #8]
 8013722:	2b00      	cmp	r3, #0
 8013724:	dcae      	bgt.n	8013684 <_dtoa_r+0xb24>
 8013726:	9b06      	ldr	r3, [sp, #24]
 8013728:	2b02      	cmp	r3, #2
 801372a:	f73f aea8 	bgt.w	801347e <_dtoa_r+0x91e>
 801372e:	e7a9      	b.n	8013684 <_dtoa_r+0xb24>
 8013730:	0801625c 	.word	0x0801625c
 8013734:	080161e8 	.word	0x080161e8
 8013738:	080161db 	.word	0x080161db

0801373c <__errno>:
 801373c:	4b01      	ldr	r3, [pc, #4]	; (8013744 <__errno+0x8>)
 801373e:	6818      	ldr	r0, [r3, #0]
 8013740:	4770      	bx	lr
 8013742:	bf00      	nop
 8013744:	20000060 	.word	0x20000060

08013748 <__sflush_r>:
 8013748:	898a      	ldrh	r2, [r1, #12]
 801374a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801374e:	4605      	mov	r5, r0
 8013750:	0710      	lsls	r0, r2, #28
 8013752:	460c      	mov	r4, r1
 8013754:	d458      	bmi.n	8013808 <__sflush_r+0xc0>
 8013756:	684b      	ldr	r3, [r1, #4]
 8013758:	2b00      	cmp	r3, #0
 801375a:	dc05      	bgt.n	8013768 <__sflush_r+0x20>
 801375c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801375e:	2b00      	cmp	r3, #0
 8013760:	dc02      	bgt.n	8013768 <__sflush_r+0x20>
 8013762:	2000      	movs	r0, #0
 8013764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013768:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801376a:	2e00      	cmp	r6, #0
 801376c:	d0f9      	beq.n	8013762 <__sflush_r+0x1a>
 801376e:	2300      	movs	r3, #0
 8013770:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013774:	682f      	ldr	r7, [r5, #0]
 8013776:	602b      	str	r3, [r5, #0]
 8013778:	d032      	beq.n	80137e0 <__sflush_r+0x98>
 801377a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801377c:	89a3      	ldrh	r3, [r4, #12]
 801377e:	075a      	lsls	r2, r3, #29
 8013780:	d505      	bpl.n	801378e <__sflush_r+0x46>
 8013782:	6863      	ldr	r3, [r4, #4]
 8013784:	1ac0      	subs	r0, r0, r3
 8013786:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013788:	b10b      	cbz	r3, 801378e <__sflush_r+0x46>
 801378a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801378c:	1ac0      	subs	r0, r0, r3
 801378e:	2300      	movs	r3, #0
 8013790:	4602      	mov	r2, r0
 8013792:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013794:	6a21      	ldr	r1, [r4, #32]
 8013796:	4628      	mov	r0, r5
 8013798:	47b0      	blx	r6
 801379a:	1c43      	adds	r3, r0, #1
 801379c:	89a3      	ldrh	r3, [r4, #12]
 801379e:	d106      	bne.n	80137ae <__sflush_r+0x66>
 80137a0:	6829      	ldr	r1, [r5, #0]
 80137a2:	291d      	cmp	r1, #29
 80137a4:	d82c      	bhi.n	8013800 <__sflush_r+0xb8>
 80137a6:	4a2a      	ldr	r2, [pc, #168]	; (8013850 <__sflush_r+0x108>)
 80137a8:	40ca      	lsrs	r2, r1
 80137aa:	07d6      	lsls	r6, r2, #31
 80137ac:	d528      	bpl.n	8013800 <__sflush_r+0xb8>
 80137ae:	2200      	movs	r2, #0
 80137b0:	6062      	str	r2, [r4, #4]
 80137b2:	04d9      	lsls	r1, r3, #19
 80137b4:	6922      	ldr	r2, [r4, #16]
 80137b6:	6022      	str	r2, [r4, #0]
 80137b8:	d504      	bpl.n	80137c4 <__sflush_r+0x7c>
 80137ba:	1c42      	adds	r2, r0, #1
 80137bc:	d101      	bne.n	80137c2 <__sflush_r+0x7a>
 80137be:	682b      	ldr	r3, [r5, #0]
 80137c0:	b903      	cbnz	r3, 80137c4 <__sflush_r+0x7c>
 80137c2:	6560      	str	r0, [r4, #84]	; 0x54
 80137c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80137c6:	602f      	str	r7, [r5, #0]
 80137c8:	2900      	cmp	r1, #0
 80137ca:	d0ca      	beq.n	8013762 <__sflush_r+0x1a>
 80137cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80137d0:	4299      	cmp	r1, r3
 80137d2:	d002      	beq.n	80137da <__sflush_r+0x92>
 80137d4:	4628      	mov	r0, r5
 80137d6:	f000 fe5b 	bl	8014490 <_free_r>
 80137da:	2000      	movs	r0, #0
 80137dc:	6360      	str	r0, [r4, #52]	; 0x34
 80137de:	e7c1      	b.n	8013764 <__sflush_r+0x1c>
 80137e0:	6a21      	ldr	r1, [r4, #32]
 80137e2:	2301      	movs	r3, #1
 80137e4:	4628      	mov	r0, r5
 80137e6:	47b0      	blx	r6
 80137e8:	1c41      	adds	r1, r0, #1
 80137ea:	d1c7      	bne.n	801377c <__sflush_r+0x34>
 80137ec:	682b      	ldr	r3, [r5, #0]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d0c4      	beq.n	801377c <__sflush_r+0x34>
 80137f2:	2b1d      	cmp	r3, #29
 80137f4:	d001      	beq.n	80137fa <__sflush_r+0xb2>
 80137f6:	2b16      	cmp	r3, #22
 80137f8:	d101      	bne.n	80137fe <__sflush_r+0xb6>
 80137fa:	602f      	str	r7, [r5, #0]
 80137fc:	e7b1      	b.n	8013762 <__sflush_r+0x1a>
 80137fe:	89a3      	ldrh	r3, [r4, #12]
 8013800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013804:	81a3      	strh	r3, [r4, #12]
 8013806:	e7ad      	b.n	8013764 <__sflush_r+0x1c>
 8013808:	690f      	ldr	r7, [r1, #16]
 801380a:	2f00      	cmp	r7, #0
 801380c:	d0a9      	beq.n	8013762 <__sflush_r+0x1a>
 801380e:	0793      	lsls	r3, r2, #30
 8013810:	680e      	ldr	r6, [r1, #0]
 8013812:	bf08      	it	eq
 8013814:	694b      	ldreq	r3, [r1, #20]
 8013816:	600f      	str	r7, [r1, #0]
 8013818:	bf18      	it	ne
 801381a:	2300      	movne	r3, #0
 801381c:	eba6 0807 	sub.w	r8, r6, r7
 8013820:	608b      	str	r3, [r1, #8]
 8013822:	f1b8 0f00 	cmp.w	r8, #0
 8013826:	dd9c      	ble.n	8013762 <__sflush_r+0x1a>
 8013828:	6a21      	ldr	r1, [r4, #32]
 801382a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801382c:	4643      	mov	r3, r8
 801382e:	463a      	mov	r2, r7
 8013830:	4628      	mov	r0, r5
 8013832:	47b0      	blx	r6
 8013834:	2800      	cmp	r0, #0
 8013836:	dc06      	bgt.n	8013846 <__sflush_r+0xfe>
 8013838:	89a3      	ldrh	r3, [r4, #12]
 801383a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801383e:	81a3      	strh	r3, [r4, #12]
 8013840:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013844:	e78e      	b.n	8013764 <__sflush_r+0x1c>
 8013846:	4407      	add	r7, r0
 8013848:	eba8 0800 	sub.w	r8, r8, r0
 801384c:	e7e9      	b.n	8013822 <__sflush_r+0xda>
 801384e:	bf00      	nop
 8013850:	20400001 	.word	0x20400001

08013854 <_fflush_r>:
 8013854:	b538      	push	{r3, r4, r5, lr}
 8013856:	690b      	ldr	r3, [r1, #16]
 8013858:	4605      	mov	r5, r0
 801385a:	460c      	mov	r4, r1
 801385c:	b913      	cbnz	r3, 8013864 <_fflush_r+0x10>
 801385e:	2500      	movs	r5, #0
 8013860:	4628      	mov	r0, r5
 8013862:	bd38      	pop	{r3, r4, r5, pc}
 8013864:	b118      	cbz	r0, 801386e <_fflush_r+0x1a>
 8013866:	6983      	ldr	r3, [r0, #24]
 8013868:	b90b      	cbnz	r3, 801386e <_fflush_r+0x1a>
 801386a:	f000 f887 	bl	801397c <__sinit>
 801386e:	4b14      	ldr	r3, [pc, #80]	; (80138c0 <_fflush_r+0x6c>)
 8013870:	429c      	cmp	r4, r3
 8013872:	d11b      	bne.n	80138ac <_fflush_r+0x58>
 8013874:	686c      	ldr	r4, [r5, #4]
 8013876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d0ef      	beq.n	801385e <_fflush_r+0xa>
 801387e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013880:	07d0      	lsls	r0, r2, #31
 8013882:	d404      	bmi.n	801388e <_fflush_r+0x3a>
 8013884:	0599      	lsls	r1, r3, #22
 8013886:	d402      	bmi.n	801388e <_fflush_r+0x3a>
 8013888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801388a:	f000 f986 	bl	8013b9a <__retarget_lock_acquire_recursive>
 801388e:	4628      	mov	r0, r5
 8013890:	4621      	mov	r1, r4
 8013892:	f7ff ff59 	bl	8013748 <__sflush_r>
 8013896:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013898:	07da      	lsls	r2, r3, #31
 801389a:	4605      	mov	r5, r0
 801389c:	d4e0      	bmi.n	8013860 <_fflush_r+0xc>
 801389e:	89a3      	ldrh	r3, [r4, #12]
 80138a0:	059b      	lsls	r3, r3, #22
 80138a2:	d4dd      	bmi.n	8013860 <_fflush_r+0xc>
 80138a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80138a6:	f000 f97a 	bl	8013b9e <__retarget_lock_release_recursive>
 80138aa:	e7d9      	b.n	8013860 <_fflush_r+0xc>
 80138ac:	4b05      	ldr	r3, [pc, #20]	; (80138c4 <_fflush_r+0x70>)
 80138ae:	429c      	cmp	r4, r3
 80138b0:	d101      	bne.n	80138b6 <_fflush_r+0x62>
 80138b2:	68ac      	ldr	r4, [r5, #8]
 80138b4:	e7df      	b.n	8013876 <_fflush_r+0x22>
 80138b6:	4b04      	ldr	r3, [pc, #16]	; (80138c8 <_fflush_r+0x74>)
 80138b8:	429c      	cmp	r4, r3
 80138ba:	bf08      	it	eq
 80138bc:	68ec      	ldreq	r4, [r5, #12]
 80138be:	e7da      	b.n	8013876 <_fflush_r+0x22>
 80138c0:	08016290 	.word	0x08016290
 80138c4:	080162b0 	.word	0x080162b0
 80138c8:	08016270 	.word	0x08016270

080138cc <std>:
 80138cc:	2300      	movs	r3, #0
 80138ce:	b510      	push	{r4, lr}
 80138d0:	4604      	mov	r4, r0
 80138d2:	e9c0 3300 	strd	r3, r3, [r0]
 80138d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80138da:	6083      	str	r3, [r0, #8]
 80138dc:	8181      	strh	r1, [r0, #12]
 80138de:	6643      	str	r3, [r0, #100]	; 0x64
 80138e0:	81c2      	strh	r2, [r0, #14]
 80138e2:	6183      	str	r3, [r0, #24]
 80138e4:	4619      	mov	r1, r3
 80138e6:	2208      	movs	r2, #8
 80138e8:	305c      	adds	r0, #92	; 0x5c
 80138ea:	f000 fa23 	bl	8013d34 <memset>
 80138ee:	4b05      	ldr	r3, [pc, #20]	; (8013904 <std+0x38>)
 80138f0:	6263      	str	r3, [r4, #36]	; 0x24
 80138f2:	4b05      	ldr	r3, [pc, #20]	; (8013908 <std+0x3c>)
 80138f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80138f6:	4b05      	ldr	r3, [pc, #20]	; (801390c <std+0x40>)
 80138f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80138fa:	4b05      	ldr	r3, [pc, #20]	; (8013910 <std+0x44>)
 80138fc:	6224      	str	r4, [r4, #32]
 80138fe:	6323      	str	r3, [r4, #48]	; 0x30
 8013900:	bd10      	pop	{r4, pc}
 8013902:	bf00      	nop
 8013904:	0801561d 	.word	0x0801561d
 8013908:	0801563f 	.word	0x0801563f
 801390c:	08015677 	.word	0x08015677
 8013910:	0801569b 	.word	0x0801569b

08013914 <_cleanup_r>:
 8013914:	4901      	ldr	r1, [pc, #4]	; (801391c <_cleanup_r+0x8>)
 8013916:	f000 b8e7 	b.w	8013ae8 <_fwalk_reent>
 801391a:	bf00      	nop
 801391c:	08013855 	.word	0x08013855

08013920 <__sfmoreglue>:
 8013920:	b570      	push	{r4, r5, r6, lr}
 8013922:	2268      	movs	r2, #104	; 0x68
 8013924:	1e4d      	subs	r5, r1, #1
 8013926:	4355      	muls	r5, r2
 8013928:	460e      	mov	r6, r1
 801392a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801392e:	f000 fe1b 	bl	8014568 <_malloc_r>
 8013932:	4604      	mov	r4, r0
 8013934:	b140      	cbz	r0, 8013948 <__sfmoreglue+0x28>
 8013936:	2100      	movs	r1, #0
 8013938:	e9c0 1600 	strd	r1, r6, [r0]
 801393c:	300c      	adds	r0, #12
 801393e:	60a0      	str	r0, [r4, #8]
 8013940:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013944:	f000 f9f6 	bl	8013d34 <memset>
 8013948:	4620      	mov	r0, r4
 801394a:	bd70      	pop	{r4, r5, r6, pc}

0801394c <__sfp_lock_acquire>:
 801394c:	4801      	ldr	r0, [pc, #4]	; (8013954 <__sfp_lock_acquire+0x8>)
 801394e:	f000 b924 	b.w	8013b9a <__retarget_lock_acquire_recursive>
 8013952:	bf00      	nop
 8013954:	200004f6 	.word	0x200004f6

08013958 <__sfp_lock_release>:
 8013958:	4801      	ldr	r0, [pc, #4]	; (8013960 <__sfp_lock_release+0x8>)
 801395a:	f000 b920 	b.w	8013b9e <__retarget_lock_release_recursive>
 801395e:	bf00      	nop
 8013960:	200004f6 	.word	0x200004f6

08013964 <__sinit_lock_acquire>:
 8013964:	4801      	ldr	r0, [pc, #4]	; (801396c <__sinit_lock_acquire+0x8>)
 8013966:	f000 b918 	b.w	8013b9a <__retarget_lock_acquire_recursive>
 801396a:	bf00      	nop
 801396c:	200004f7 	.word	0x200004f7

08013970 <__sinit_lock_release>:
 8013970:	4801      	ldr	r0, [pc, #4]	; (8013978 <__sinit_lock_release+0x8>)
 8013972:	f000 b914 	b.w	8013b9e <__retarget_lock_release_recursive>
 8013976:	bf00      	nop
 8013978:	200004f7 	.word	0x200004f7

0801397c <__sinit>:
 801397c:	b510      	push	{r4, lr}
 801397e:	4604      	mov	r4, r0
 8013980:	f7ff fff0 	bl	8013964 <__sinit_lock_acquire>
 8013984:	69a3      	ldr	r3, [r4, #24]
 8013986:	b11b      	cbz	r3, 8013990 <__sinit+0x14>
 8013988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801398c:	f7ff bff0 	b.w	8013970 <__sinit_lock_release>
 8013990:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013994:	6523      	str	r3, [r4, #80]	; 0x50
 8013996:	4b13      	ldr	r3, [pc, #76]	; (80139e4 <__sinit+0x68>)
 8013998:	4a13      	ldr	r2, [pc, #76]	; (80139e8 <__sinit+0x6c>)
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	62a2      	str	r2, [r4, #40]	; 0x28
 801399e:	42a3      	cmp	r3, r4
 80139a0:	bf04      	itt	eq
 80139a2:	2301      	moveq	r3, #1
 80139a4:	61a3      	streq	r3, [r4, #24]
 80139a6:	4620      	mov	r0, r4
 80139a8:	f000 f820 	bl	80139ec <__sfp>
 80139ac:	6060      	str	r0, [r4, #4]
 80139ae:	4620      	mov	r0, r4
 80139b0:	f000 f81c 	bl	80139ec <__sfp>
 80139b4:	60a0      	str	r0, [r4, #8]
 80139b6:	4620      	mov	r0, r4
 80139b8:	f000 f818 	bl	80139ec <__sfp>
 80139bc:	2200      	movs	r2, #0
 80139be:	60e0      	str	r0, [r4, #12]
 80139c0:	2104      	movs	r1, #4
 80139c2:	6860      	ldr	r0, [r4, #4]
 80139c4:	f7ff ff82 	bl	80138cc <std>
 80139c8:	68a0      	ldr	r0, [r4, #8]
 80139ca:	2201      	movs	r2, #1
 80139cc:	2109      	movs	r1, #9
 80139ce:	f7ff ff7d 	bl	80138cc <std>
 80139d2:	68e0      	ldr	r0, [r4, #12]
 80139d4:	2202      	movs	r2, #2
 80139d6:	2112      	movs	r1, #18
 80139d8:	f7ff ff78 	bl	80138cc <std>
 80139dc:	2301      	movs	r3, #1
 80139de:	61a3      	str	r3, [r4, #24]
 80139e0:	e7d2      	b.n	8013988 <__sinit+0xc>
 80139e2:	bf00      	nop
 80139e4:	080162d0 	.word	0x080162d0
 80139e8:	08013915 	.word	0x08013915

080139ec <__sfp>:
 80139ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139ee:	4607      	mov	r7, r0
 80139f0:	f7ff ffac 	bl	801394c <__sfp_lock_acquire>
 80139f4:	4b1e      	ldr	r3, [pc, #120]	; (8013a70 <__sfp+0x84>)
 80139f6:	681e      	ldr	r6, [r3, #0]
 80139f8:	69b3      	ldr	r3, [r6, #24]
 80139fa:	b913      	cbnz	r3, 8013a02 <__sfp+0x16>
 80139fc:	4630      	mov	r0, r6
 80139fe:	f7ff ffbd 	bl	801397c <__sinit>
 8013a02:	3648      	adds	r6, #72	; 0x48
 8013a04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013a08:	3b01      	subs	r3, #1
 8013a0a:	d503      	bpl.n	8013a14 <__sfp+0x28>
 8013a0c:	6833      	ldr	r3, [r6, #0]
 8013a0e:	b30b      	cbz	r3, 8013a54 <__sfp+0x68>
 8013a10:	6836      	ldr	r6, [r6, #0]
 8013a12:	e7f7      	b.n	8013a04 <__sfp+0x18>
 8013a14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013a18:	b9d5      	cbnz	r5, 8013a50 <__sfp+0x64>
 8013a1a:	4b16      	ldr	r3, [pc, #88]	; (8013a74 <__sfp+0x88>)
 8013a1c:	60e3      	str	r3, [r4, #12]
 8013a1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013a22:	6665      	str	r5, [r4, #100]	; 0x64
 8013a24:	f000 f8b8 	bl	8013b98 <__retarget_lock_init_recursive>
 8013a28:	f7ff ff96 	bl	8013958 <__sfp_lock_release>
 8013a2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013a30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013a34:	6025      	str	r5, [r4, #0]
 8013a36:	61a5      	str	r5, [r4, #24]
 8013a38:	2208      	movs	r2, #8
 8013a3a:	4629      	mov	r1, r5
 8013a3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013a40:	f000 f978 	bl	8013d34 <memset>
 8013a44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013a48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013a4c:	4620      	mov	r0, r4
 8013a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a50:	3468      	adds	r4, #104	; 0x68
 8013a52:	e7d9      	b.n	8013a08 <__sfp+0x1c>
 8013a54:	2104      	movs	r1, #4
 8013a56:	4638      	mov	r0, r7
 8013a58:	f7ff ff62 	bl	8013920 <__sfmoreglue>
 8013a5c:	4604      	mov	r4, r0
 8013a5e:	6030      	str	r0, [r6, #0]
 8013a60:	2800      	cmp	r0, #0
 8013a62:	d1d5      	bne.n	8013a10 <__sfp+0x24>
 8013a64:	f7ff ff78 	bl	8013958 <__sfp_lock_release>
 8013a68:	230c      	movs	r3, #12
 8013a6a:	603b      	str	r3, [r7, #0]
 8013a6c:	e7ee      	b.n	8013a4c <__sfp+0x60>
 8013a6e:	bf00      	nop
 8013a70:	080162d0 	.word	0x080162d0
 8013a74:	ffff0001 	.word	0xffff0001

08013a78 <__libc_fini_array>:
 8013a78:	b538      	push	{r3, r4, r5, lr}
 8013a7a:	4d07      	ldr	r5, [pc, #28]	; (8013a98 <__libc_fini_array+0x20>)
 8013a7c:	4c07      	ldr	r4, [pc, #28]	; (8013a9c <__libc_fini_array+0x24>)
 8013a7e:	1b64      	subs	r4, r4, r5
 8013a80:	10a4      	asrs	r4, r4, #2
 8013a82:	b91c      	cbnz	r4, 8013a8c <__libc_fini_array+0x14>
 8013a84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013a88:	f002 b84c 	b.w	8015b24 <_fini>
 8013a8c:	3c01      	subs	r4, #1
 8013a8e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8013a92:	4798      	blx	r3
 8013a94:	e7f5      	b.n	8013a82 <__libc_fini_array+0xa>
 8013a96:	bf00      	nop
 8013a98:	080164b8 	.word	0x080164b8
 8013a9c:	080164bc 	.word	0x080164bc

08013aa0 <fiprintf>:
 8013aa0:	b40e      	push	{r1, r2, r3}
 8013aa2:	b503      	push	{r0, r1, lr}
 8013aa4:	4601      	mov	r1, r0
 8013aa6:	ab03      	add	r3, sp, #12
 8013aa8:	4805      	ldr	r0, [pc, #20]	; (8013ac0 <fiprintf+0x20>)
 8013aaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8013aae:	6800      	ldr	r0, [r0, #0]
 8013ab0:	9301      	str	r3, [sp, #4]
 8013ab2:	f000 ff89 	bl	80149c8 <_vfiprintf_r>
 8013ab6:	b002      	add	sp, #8
 8013ab8:	f85d eb04 	ldr.w	lr, [sp], #4
 8013abc:	b003      	add	sp, #12
 8013abe:	4770      	bx	lr
 8013ac0:	20000060 	.word	0x20000060

08013ac4 <_fstat_r>:
 8013ac4:	b538      	push	{r3, r4, r5, lr}
 8013ac6:	4d07      	ldr	r5, [pc, #28]	; (8013ae4 <_fstat_r+0x20>)
 8013ac8:	2300      	movs	r3, #0
 8013aca:	4604      	mov	r4, r0
 8013acc:	4608      	mov	r0, r1
 8013ace:	4611      	mov	r1, r2
 8013ad0:	602b      	str	r3, [r5, #0]
 8013ad2:	f7ee fc3b 	bl	800234c <_fstat>
 8013ad6:	1c43      	adds	r3, r0, #1
 8013ad8:	d102      	bne.n	8013ae0 <_fstat_r+0x1c>
 8013ada:	682b      	ldr	r3, [r5, #0]
 8013adc:	b103      	cbz	r3, 8013ae0 <_fstat_r+0x1c>
 8013ade:	6023      	str	r3, [r4, #0]
 8013ae0:	bd38      	pop	{r3, r4, r5, pc}
 8013ae2:	bf00      	nop
 8013ae4:	20000608 	.word	0x20000608

08013ae8 <_fwalk_reent>:
 8013ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013aec:	4606      	mov	r6, r0
 8013aee:	4688      	mov	r8, r1
 8013af0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013af4:	2700      	movs	r7, #0
 8013af6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013afa:	f1b9 0901 	subs.w	r9, r9, #1
 8013afe:	d505      	bpl.n	8013b0c <_fwalk_reent+0x24>
 8013b00:	6824      	ldr	r4, [r4, #0]
 8013b02:	2c00      	cmp	r4, #0
 8013b04:	d1f7      	bne.n	8013af6 <_fwalk_reent+0xe>
 8013b06:	4638      	mov	r0, r7
 8013b08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b0c:	89ab      	ldrh	r3, [r5, #12]
 8013b0e:	2b01      	cmp	r3, #1
 8013b10:	d907      	bls.n	8013b22 <_fwalk_reent+0x3a>
 8013b12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013b16:	3301      	adds	r3, #1
 8013b18:	d003      	beq.n	8013b22 <_fwalk_reent+0x3a>
 8013b1a:	4629      	mov	r1, r5
 8013b1c:	4630      	mov	r0, r6
 8013b1e:	47c0      	blx	r8
 8013b20:	4307      	orrs	r7, r0
 8013b22:	3568      	adds	r5, #104	; 0x68
 8013b24:	e7e9      	b.n	8013afa <_fwalk_reent+0x12>
	...

08013b28 <__libc_init_array>:
 8013b28:	b570      	push	{r4, r5, r6, lr}
 8013b2a:	4d0d      	ldr	r5, [pc, #52]	; (8013b60 <__libc_init_array+0x38>)
 8013b2c:	4c0d      	ldr	r4, [pc, #52]	; (8013b64 <__libc_init_array+0x3c>)
 8013b2e:	1b64      	subs	r4, r4, r5
 8013b30:	10a4      	asrs	r4, r4, #2
 8013b32:	2600      	movs	r6, #0
 8013b34:	42a6      	cmp	r6, r4
 8013b36:	d109      	bne.n	8013b4c <__libc_init_array+0x24>
 8013b38:	4d0b      	ldr	r5, [pc, #44]	; (8013b68 <__libc_init_array+0x40>)
 8013b3a:	4c0c      	ldr	r4, [pc, #48]	; (8013b6c <__libc_init_array+0x44>)
 8013b3c:	f001 ffec 	bl	8015b18 <_init>
 8013b40:	1b64      	subs	r4, r4, r5
 8013b42:	10a4      	asrs	r4, r4, #2
 8013b44:	2600      	movs	r6, #0
 8013b46:	42a6      	cmp	r6, r4
 8013b48:	d105      	bne.n	8013b56 <__libc_init_array+0x2e>
 8013b4a:	bd70      	pop	{r4, r5, r6, pc}
 8013b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013b50:	4798      	blx	r3
 8013b52:	3601      	adds	r6, #1
 8013b54:	e7ee      	b.n	8013b34 <__libc_init_array+0xc>
 8013b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8013b5a:	4798      	blx	r3
 8013b5c:	3601      	adds	r6, #1
 8013b5e:	e7f2      	b.n	8013b46 <__libc_init_array+0x1e>
 8013b60:	080164a0 	.word	0x080164a0
 8013b64:	080164a0 	.word	0x080164a0
 8013b68:	080164a0 	.word	0x080164a0
 8013b6c:	080164b8 	.word	0x080164b8

08013b70 <_isatty_r>:
 8013b70:	b538      	push	{r3, r4, r5, lr}
 8013b72:	4d06      	ldr	r5, [pc, #24]	; (8013b8c <_isatty_r+0x1c>)
 8013b74:	2300      	movs	r3, #0
 8013b76:	4604      	mov	r4, r0
 8013b78:	4608      	mov	r0, r1
 8013b7a:	602b      	str	r3, [r5, #0]
 8013b7c:	f7ee fbf6 	bl	800236c <_isatty>
 8013b80:	1c43      	adds	r3, r0, #1
 8013b82:	d102      	bne.n	8013b8a <_isatty_r+0x1a>
 8013b84:	682b      	ldr	r3, [r5, #0]
 8013b86:	b103      	cbz	r3, 8013b8a <_isatty_r+0x1a>
 8013b88:	6023      	str	r3, [r4, #0]
 8013b8a:	bd38      	pop	{r3, r4, r5, pc}
 8013b8c:	20000608 	.word	0x20000608

08013b90 <_localeconv_r>:
 8013b90:	4800      	ldr	r0, [pc, #0]	; (8013b94 <_localeconv_r+0x4>)
 8013b92:	4770      	bx	lr
 8013b94:	200001b4 	.word	0x200001b4

08013b98 <__retarget_lock_init_recursive>:
 8013b98:	4770      	bx	lr

08013b9a <__retarget_lock_acquire_recursive>:
 8013b9a:	4770      	bx	lr

08013b9c <__retarget_lock_release>:
 8013b9c:	4770      	bx	lr

08013b9e <__retarget_lock_release_recursive>:
 8013b9e:	4770      	bx	lr

08013ba0 <_lseek_r>:
 8013ba0:	b538      	push	{r3, r4, r5, lr}
 8013ba2:	4d07      	ldr	r5, [pc, #28]	; (8013bc0 <_lseek_r+0x20>)
 8013ba4:	4604      	mov	r4, r0
 8013ba6:	4608      	mov	r0, r1
 8013ba8:	4611      	mov	r1, r2
 8013baa:	2200      	movs	r2, #0
 8013bac:	602a      	str	r2, [r5, #0]
 8013bae:	461a      	mov	r2, r3
 8013bb0:	f7ee fbe7 	bl	8002382 <_lseek>
 8013bb4:	1c43      	adds	r3, r0, #1
 8013bb6:	d102      	bne.n	8013bbe <_lseek_r+0x1e>
 8013bb8:	682b      	ldr	r3, [r5, #0]
 8013bba:	b103      	cbz	r3, 8013bbe <_lseek_r+0x1e>
 8013bbc:	6023      	str	r3, [r4, #0]
 8013bbe:	bd38      	pop	{r3, r4, r5, pc}
 8013bc0:	20000608 	.word	0x20000608

08013bc4 <__swhatbuf_r>:
 8013bc4:	b570      	push	{r4, r5, r6, lr}
 8013bc6:	460e      	mov	r6, r1
 8013bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bcc:	2900      	cmp	r1, #0
 8013bce:	b096      	sub	sp, #88	; 0x58
 8013bd0:	4614      	mov	r4, r2
 8013bd2:	461d      	mov	r5, r3
 8013bd4:	da08      	bge.n	8013be8 <__swhatbuf_r+0x24>
 8013bd6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013bda:	2200      	movs	r2, #0
 8013bdc:	602a      	str	r2, [r5, #0]
 8013bde:	061a      	lsls	r2, r3, #24
 8013be0:	d410      	bmi.n	8013c04 <__swhatbuf_r+0x40>
 8013be2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013be6:	e00e      	b.n	8013c06 <__swhatbuf_r+0x42>
 8013be8:	466a      	mov	r2, sp
 8013bea:	f7ff ff6b 	bl	8013ac4 <_fstat_r>
 8013bee:	2800      	cmp	r0, #0
 8013bf0:	dbf1      	blt.n	8013bd6 <__swhatbuf_r+0x12>
 8013bf2:	9a01      	ldr	r2, [sp, #4]
 8013bf4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013bf8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013bfc:	425a      	negs	r2, r3
 8013bfe:	415a      	adcs	r2, r3
 8013c00:	602a      	str	r2, [r5, #0]
 8013c02:	e7ee      	b.n	8013be2 <__swhatbuf_r+0x1e>
 8013c04:	2340      	movs	r3, #64	; 0x40
 8013c06:	2000      	movs	r0, #0
 8013c08:	6023      	str	r3, [r4, #0]
 8013c0a:	b016      	add	sp, #88	; 0x58
 8013c0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08013c10 <__smakebuf_r>:
 8013c10:	898b      	ldrh	r3, [r1, #12]
 8013c12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013c14:	079d      	lsls	r5, r3, #30
 8013c16:	4606      	mov	r6, r0
 8013c18:	460c      	mov	r4, r1
 8013c1a:	d507      	bpl.n	8013c2c <__smakebuf_r+0x1c>
 8013c1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013c20:	6023      	str	r3, [r4, #0]
 8013c22:	6123      	str	r3, [r4, #16]
 8013c24:	2301      	movs	r3, #1
 8013c26:	6163      	str	r3, [r4, #20]
 8013c28:	b002      	add	sp, #8
 8013c2a:	bd70      	pop	{r4, r5, r6, pc}
 8013c2c:	ab01      	add	r3, sp, #4
 8013c2e:	466a      	mov	r2, sp
 8013c30:	f7ff ffc8 	bl	8013bc4 <__swhatbuf_r>
 8013c34:	9900      	ldr	r1, [sp, #0]
 8013c36:	4605      	mov	r5, r0
 8013c38:	4630      	mov	r0, r6
 8013c3a:	f000 fc95 	bl	8014568 <_malloc_r>
 8013c3e:	b948      	cbnz	r0, 8013c54 <__smakebuf_r+0x44>
 8013c40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c44:	059a      	lsls	r2, r3, #22
 8013c46:	d4ef      	bmi.n	8013c28 <__smakebuf_r+0x18>
 8013c48:	f023 0303 	bic.w	r3, r3, #3
 8013c4c:	f043 0302 	orr.w	r3, r3, #2
 8013c50:	81a3      	strh	r3, [r4, #12]
 8013c52:	e7e3      	b.n	8013c1c <__smakebuf_r+0xc>
 8013c54:	4b0d      	ldr	r3, [pc, #52]	; (8013c8c <__smakebuf_r+0x7c>)
 8013c56:	62b3      	str	r3, [r6, #40]	; 0x28
 8013c58:	89a3      	ldrh	r3, [r4, #12]
 8013c5a:	6020      	str	r0, [r4, #0]
 8013c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013c60:	81a3      	strh	r3, [r4, #12]
 8013c62:	9b00      	ldr	r3, [sp, #0]
 8013c64:	6163      	str	r3, [r4, #20]
 8013c66:	9b01      	ldr	r3, [sp, #4]
 8013c68:	6120      	str	r0, [r4, #16]
 8013c6a:	b15b      	cbz	r3, 8013c84 <__smakebuf_r+0x74>
 8013c6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013c70:	4630      	mov	r0, r6
 8013c72:	f7ff ff7d 	bl	8013b70 <_isatty_r>
 8013c76:	b128      	cbz	r0, 8013c84 <__smakebuf_r+0x74>
 8013c78:	89a3      	ldrh	r3, [r4, #12]
 8013c7a:	f023 0303 	bic.w	r3, r3, #3
 8013c7e:	f043 0301 	orr.w	r3, r3, #1
 8013c82:	81a3      	strh	r3, [r4, #12]
 8013c84:	89a0      	ldrh	r0, [r4, #12]
 8013c86:	4305      	orrs	r5, r0
 8013c88:	81a5      	strh	r5, [r4, #12]
 8013c8a:	e7cd      	b.n	8013c28 <__smakebuf_r+0x18>
 8013c8c:	08013915 	.word	0x08013915

08013c90 <malloc>:
 8013c90:	4b02      	ldr	r3, [pc, #8]	; (8013c9c <malloc+0xc>)
 8013c92:	4601      	mov	r1, r0
 8013c94:	6818      	ldr	r0, [r3, #0]
 8013c96:	f000 bc67 	b.w	8014568 <_malloc_r>
 8013c9a:	bf00      	nop
 8013c9c:	20000060 	.word	0x20000060

08013ca0 <__ascii_mbtowc>:
 8013ca0:	b082      	sub	sp, #8
 8013ca2:	b901      	cbnz	r1, 8013ca6 <__ascii_mbtowc+0x6>
 8013ca4:	a901      	add	r1, sp, #4
 8013ca6:	b142      	cbz	r2, 8013cba <__ascii_mbtowc+0x1a>
 8013ca8:	b14b      	cbz	r3, 8013cbe <__ascii_mbtowc+0x1e>
 8013caa:	7813      	ldrb	r3, [r2, #0]
 8013cac:	600b      	str	r3, [r1, #0]
 8013cae:	7812      	ldrb	r2, [r2, #0]
 8013cb0:	1e10      	subs	r0, r2, #0
 8013cb2:	bf18      	it	ne
 8013cb4:	2001      	movne	r0, #1
 8013cb6:	b002      	add	sp, #8
 8013cb8:	4770      	bx	lr
 8013cba:	4610      	mov	r0, r2
 8013cbc:	e7fb      	b.n	8013cb6 <__ascii_mbtowc+0x16>
 8013cbe:	f06f 0001 	mvn.w	r0, #1
 8013cc2:	e7f8      	b.n	8013cb6 <__ascii_mbtowc+0x16>

08013cc4 <memcmp>:
 8013cc4:	b510      	push	{r4, lr}
 8013cc6:	3901      	subs	r1, #1
 8013cc8:	4402      	add	r2, r0
 8013cca:	4290      	cmp	r0, r2
 8013ccc:	d101      	bne.n	8013cd2 <memcmp+0xe>
 8013cce:	2000      	movs	r0, #0
 8013cd0:	e005      	b.n	8013cde <memcmp+0x1a>
 8013cd2:	7803      	ldrb	r3, [r0, #0]
 8013cd4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013cd8:	42a3      	cmp	r3, r4
 8013cda:	d001      	beq.n	8013ce0 <memcmp+0x1c>
 8013cdc:	1b18      	subs	r0, r3, r4
 8013cde:	bd10      	pop	{r4, pc}
 8013ce0:	3001      	adds	r0, #1
 8013ce2:	e7f2      	b.n	8013cca <memcmp+0x6>

08013ce4 <memcpy>:
 8013ce4:	440a      	add	r2, r1
 8013ce6:	4291      	cmp	r1, r2
 8013ce8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8013cec:	d100      	bne.n	8013cf0 <memcpy+0xc>
 8013cee:	4770      	bx	lr
 8013cf0:	b510      	push	{r4, lr}
 8013cf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013cf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013cfa:	4291      	cmp	r1, r2
 8013cfc:	d1f9      	bne.n	8013cf2 <memcpy+0xe>
 8013cfe:	bd10      	pop	{r4, pc}

08013d00 <memmove>:
 8013d00:	4288      	cmp	r0, r1
 8013d02:	b510      	push	{r4, lr}
 8013d04:	eb01 0402 	add.w	r4, r1, r2
 8013d08:	d902      	bls.n	8013d10 <memmove+0x10>
 8013d0a:	4284      	cmp	r4, r0
 8013d0c:	4623      	mov	r3, r4
 8013d0e:	d807      	bhi.n	8013d20 <memmove+0x20>
 8013d10:	1e43      	subs	r3, r0, #1
 8013d12:	42a1      	cmp	r1, r4
 8013d14:	d008      	beq.n	8013d28 <memmove+0x28>
 8013d16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013d1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013d1e:	e7f8      	b.n	8013d12 <memmove+0x12>
 8013d20:	4402      	add	r2, r0
 8013d22:	4601      	mov	r1, r0
 8013d24:	428a      	cmp	r2, r1
 8013d26:	d100      	bne.n	8013d2a <memmove+0x2a>
 8013d28:	bd10      	pop	{r4, pc}
 8013d2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013d2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013d32:	e7f7      	b.n	8013d24 <memmove+0x24>

08013d34 <memset>:
 8013d34:	4402      	add	r2, r0
 8013d36:	4603      	mov	r3, r0
 8013d38:	4293      	cmp	r3, r2
 8013d3a:	d100      	bne.n	8013d3e <memset+0xa>
 8013d3c:	4770      	bx	lr
 8013d3e:	f803 1b01 	strb.w	r1, [r3], #1
 8013d42:	e7f9      	b.n	8013d38 <memset+0x4>

08013d44 <__malloc_lock>:
 8013d44:	4801      	ldr	r0, [pc, #4]	; (8013d4c <__malloc_lock+0x8>)
 8013d46:	f7ff bf28 	b.w	8013b9a <__retarget_lock_acquire_recursive>
 8013d4a:	bf00      	nop
 8013d4c:	200004f5 	.word	0x200004f5

08013d50 <__malloc_unlock>:
 8013d50:	4801      	ldr	r0, [pc, #4]	; (8013d58 <__malloc_unlock+0x8>)
 8013d52:	f7ff bf24 	b.w	8013b9e <__retarget_lock_release_recursive>
 8013d56:	bf00      	nop
 8013d58:	200004f5 	.word	0x200004f5

08013d5c <_Balloc>:
 8013d5c:	b570      	push	{r4, r5, r6, lr}
 8013d5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013d60:	4604      	mov	r4, r0
 8013d62:	460d      	mov	r5, r1
 8013d64:	b976      	cbnz	r6, 8013d84 <_Balloc+0x28>
 8013d66:	2010      	movs	r0, #16
 8013d68:	f7ff ff92 	bl	8013c90 <malloc>
 8013d6c:	4602      	mov	r2, r0
 8013d6e:	6260      	str	r0, [r4, #36]	; 0x24
 8013d70:	b920      	cbnz	r0, 8013d7c <_Balloc+0x20>
 8013d72:	4b18      	ldr	r3, [pc, #96]	; (8013dd4 <_Balloc+0x78>)
 8013d74:	4818      	ldr	r0, [pc, #96]	; (8013dd8 <_Balloc+0x7c>)
 8013d76:	2166      	movs	r1, #102	; 0x66
 8013d78:	f7fe fe30 	bl	80129dc <__assert_func>
 8013d7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013d80:	6006      	str	r6, [r0, #0]
 8013d82:	60c6      	str	r6, [r0, #12]
 8013d84:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013d86:	68f3      	ldr	r3, [r6, #12]
 8013d88:	b183      	cbz	r3, 8013dac <_Balloc+0x50>
 8013d8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013d8c:	68db      	ldr	r3, [r3, #12]
 8013d8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013d92:	b9b8      	cbnz	r0, 8013dc4 <_Balloc+0x68>
 8013d94:	2101      	movs	r1, #1
 8013d96:	fa01 f605 	lsl.w	r6, r1, r5
 8013d9a:	1d72      	adds	r2, r6, #5
 8013d9c:	0092      	lsls	r2, r2, #2
 8013d9e:	4620      	mov	r0, r4
 8013da0:	f000 fb60 	bl	8014464 <_calloc_r>
 8013da4:	b160      	cbz	r0, 8013dc0 <_Balloc+0x64>
 8013da6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013daa:	e00e      	b.n	8013dca <_Balloc+0x6e>
 8013dac:	2221      	movs	r2, #33	; 0x21
 8013dae:	2104      	movs	r1, #4
 8013db0:	4620      	mov	r0, r4
 8013db2:	f000 fb57 	bl	8014464 <_calloc_r>
 8013db6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013db8:	60f0      	str	r0, [r6, #12]
 8013dba:	68db      	ldr	r3, [r3, #12]
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d1e4      	bne.n	8013d8a <_Balloc+0x2e>
 8013dc0:	2000      	movs	r0, #0
 8013dc2:	bd70      	pop	{r4, r5, r6, pc}
 8013dc4:	6802      	ldr	r2, [r0, #0]
 8013dc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013dca:	2300      	movs	r3, #0
 8013dcc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013dd0:	e7f7      	b.n	8013dc2 <_Balloc+0x66>
 8013dd2:	bf00      	nop
 8013dd4:	080161ea 	.word	0x080161ea
 8013dd8:	080162de 	.word	0x080162de

08013ddc <_Bfree>:
 8013ddc:	b570      	push	{r4, r5, r6, lr}
 8013dde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013de0:	4605      	mov	r5, r0
 8013de2:	460c      	mov	r4, r1
 8013de4:	b976      	cbnz	r6, 8013e04 <_Bfree+0x28>
 8013de6:	2010      	movs	r0, #16
 8013de8:	f7ff ff52 	bl	8013c90 <malloc>
 8013dec:	4602      	mov	r2, r0
 8013dee:	6268      	str	r0, [r5, #36]	; 0x24
 8013df0:	b920      	cbnz	r0, 8013dfc <_Bfree+0x20>
 8013df2:	4b09      	ldr	r3, [pc, #36]	; (8013e18 <_Bfree+0x3c>)
 8013df4:	4809      	ldr	r0, [pc, #36]	; (8013e1c <_Bfree+0x40>)
 8013df6:	218a      	movs	r1, #138	; 0x8a
 8013df8:	f7fe fdf0 	bl	80129dc <__assert_func>
 8013dfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013e00:	6006      	str	r6, [r0, #0]
 8013e02:	60c6      	str	r6, [r0, #12]
 8013e04:	b13c      	cbz	r4, 8013e16 <_Bfree+0x3a>
 8013e06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013e08:	6862      	ldr	r2, [r4, #4]
 8013e0a:	68db      	ldr	r3, [r3, #12]
 8013e0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013e10:	6021      	str	r1, [r4, #0]
 8013e12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013e16:	bd70      	pop	{r4, r5, r6, pc}
 8013e18:	080161ea 	.word	0x080161ea
 8013e1c:	080162de 	.word	0x080162de

08013e20 <__multadd>:
 8013e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e24:	690d      	ldr	r5, [r1, #16]
 8013e26:	4607      	mov	r7, r0
 8013e28:	460c      	mov	r4, r1
 8013e2a:	461e      	mov	r6, r3
 8013e2c:	f101 0c14 	add.w	ip, r1, #20
 8013e30:	2000      	movs	r0, #0
 8013e32:	f8dc 3000 	ldr.w	r3, [ip]
 8013e36:	b299      	uxth	r1, r3
 8013e38:	fb02 6101 	mla	r1, r2, r1, r6
 8013e3c:	0c1e      	lsrs	r6, r3, #16
 8013e3e:	0c0b      	lsrs	r3, r1, #16
 8013e40:	fb02 3306 	mla	r3, r2, r6, r3
 8013e44:	b289      	uxth	r1, r1
 8013e46:	3001      	adds	r0, #1
 8013e48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013e4c:	4285      	cmp	r5, r0
 8013e4e:	f84c 1b04 	str.w	r1, [ip], #4
 8013e52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013e56:	dcec      	bgt.n	8013e32 <__multadd+0x12>
 8013e58:	b30e      	cbz	r6, 8013e9e <__multadd+0x7e>
 8013e5a:	68a3      	ldr	r3, [r4, #8]
 8013e5c:	42ab      	cmp	r3, r5
 8013e5e:	dc19      	bgt.n	8013e94 <__multadd+0x74>
 8013e60:	6861      	ldr	r1, [r4, #4]
 8013e62:	4638      	mov	r0, r7
 8013e64:	3101      	adds	r1, #1
 8013e66:	f7ff ff79 	bl	8013d5c <_Balloc>
 8013e6a:	4680      	mov	r8, r0
 8013e6c:	b928      	cbnz	r0, 8013e7a <__multadd+0x5a>
 8013e6e:	4602      	mov	r2, r0
 8013e70:	4b0c      	ldr	r3, [pc, #48]	; (8013ea4 <__multadd+0x84>)
 8013e72:	480d      	ldr	r0, [pc, #52]	; (8013ea8 <__multadd+0x88>)
 8013e74:	21b5      	movs	r1, #181	; 0xb5
 8013e76:	f7fe fdb1 	bl	80129dc <__assert_func>
 8013e7a:	6922      	ldr	r2, [r4, #16]
 8013e7c:	3202      	adds	r2, #2
 8013e7e:	f104 010c 	add.w	r1, r4, #12
 8013e82:	0092      	lsls	r2, r2, #2
 8013e84:	300c      	adds	r0, #12
 8013e86:	f7ff ff2d 	bl	8013ce4 <memcpy>
 8013e8a:	4621      	mov	r1, r4
 8013e8c:	4638      	mov	r0, r7
 8013e8e:	f7ff ffa5 	bl	8013ddc <_Bfree>
 8013e92:	4644      	mov	r4, r8
 8013e94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013e98:	3501      	adds	r5, #1
 8013e9a:	615e      	str	r6, [r3, #20]
 8013e9c:	6125      	str	r5, [r4, #16]
 8013e9e:	4620      	mov	r0, r4
 8013ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ea4:	0801625c 	.word	0x0801625c
 8013ea8:	080162de 	.word	0x080162de

08013eac <__hi0bits>:
 8013eac:	0c03      	lsrs	r3, r0, #16
 8013eae:	041b      	lsls	r3, r3, #16
 8013eb0:	b9d3      	cbnz	r3, 8013ee8 <__hi0bits+0x3c>
 8013eb2:	0400      	lsls	r0, r0, #16
 8013eb4:	2310      	movs	r3, #16
 8013eb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013eba:	bf04      	itt	eq
 8013ebc:	0200      	lsleq	r0, r0, #8
 8013ebe:	3308      	addeq	r3, #8
 8013ec0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013ec4:	bf04      	itt	eq
 8013ec6:	0100      	lsleq	r0, r0, #4
 8013ec8:	3304      	addeq	r3, #4
 8013eca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013ece:	bf04      	itt	eq
 8013ed0:	0080      	lsleq	r0, r0, #2
 8013ed2:	3302      	addeq	r3, #2
 8013ed4:	2800      	cmp	r0, #0
 8013ed6:	db05      	blt.n	8013ee4 <__hi0bits+0x38>
 8013ed8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013edc:	f103 0301 	add.w	r3, r3, #1
 8013ee0:	bf08      	it	eq
 8013ee2:	2320      	moveq	r3, #32
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	4770      	bx	lr
 8013ee8:	2300      	movs	r3, #0
 8013eea:	e7e4      	b.n	8013eb6 <__hi0bits+0xa>

08013eec <__lo0bits>:
 8013eec:	6803      	ldr	r3, [r0, #0]
 8013eee:	f013 0207 	ands.w	r2, r3, #7
 8013ef2:	4601      	mov	r1, r0
 8013ef4:	d00b      	beq.n	8013f0e <__lo0bits+0x22>
 8013ef6:	07da      	lsls	r2, r3, #31
 8013ef8:	d423      	bmi.n	8013f42 <__lo0bits+0x56>
 8013efa:	0798      	lsls	r0, r3, #30
 8013efc:	bf49      	itett	mi
 8013efe:	085b      	lsrmi	r3, r3, #1
 8013f00:	089b      	lsrpl	r3, r3, #2
 8013f02:	2001      	movmi	r0, #1
 8013f04:	600b      	strmi	r3, [r1, #0]
 8013f06:	bf5c      	itt	pl
 8013f08:	600b      	strpl	r3, [r1, #0]
 8013f0a:	2002      	movpl	r0, #2
 8013f0c:	4770      	bx	lr
 8013f0e:	b298      	uxth	r0, r3
 8013f10:	b9a8      	cbnz	r0, 8013f3e <__lo0bits+0x52>
 8013f12:	0c1b      	lsrs	r3, r3, #16
 8013f14:	2010      	movs	r0, #16
 8013f16:	b2da      	uxtb	r2, r3
 8013f18:	b90a      	cbnz	r2, 8013f1e <__lo0bits+0x32>
 8013f1a:	3008      	adds	r0, #8
 8013f1c:	0a1b      	lsrs	r3, r3, #8
 8013f1e:	071a      	lsls	r2, r3, #28
 8013f20:	bf04      	itt	eq
 8013f22:	091b      	lsreq	r3, r3, #4
 8013f24:	3004      	addeq	r0, #4
 8013f26:	079a      	lsls	r2, r3, #30
 8013f28:	bf04      	itt	eq
 8013f2a:	089b      	lsreq	r3, r3, #2
 8013f2c:	3002      	addeq	r0, #2
 8013f2e:	07da      	lsls	r2, r3, #31
 8013f30:	d403      	bmi.n	8013f3a <__lo0bits+0x4e>
 8013f32:	085b      	lsrs	r3, r3, #1
 8013f34:	f100 0001 	add.w	r0, r0, #1
 8013f38:	d005      	beq.n	8013f46 <__lo0bits+0x5a>
 8013f3a:	600b      	str	r3, [r1, #0]
 8013f3c:	4770      	bx	lr
 8013f3e:	4610      	mov	r0, r2
 8013f40:	e7e9      	b.n	8013f16 <__lo0bits+0x2a>
 8013f42:	2000      	movs	r0, #0
 8013f44:	4770      	bx	lr
 8013f46:	2020      	movs	r0, #32
 8013f48:	4770      	bx	lr
	...

08013f4c <__i2b>:
 8013f4c:	b510      	push	{r4, lr}
 8013f4e:	460c      	mov	r4, r1
 8013f50:	2101      	movs	r1, #1
 8013f52:	f7ff ff03 	bl	8013d5c <_Balloc>
 8013f56:	4602      	mov	r2, r0
 8013f58:	b928      	cbnz	r0, 8013f66 <__i2b+0x1a>
 8013f5a:	4b05      	ldr	r3, [pc, #20]	; (8013f70 <__i2b+0x24>)
 8013f5c:	4805      	ldr	r0, [pc, #20]	; (8013f74 <__i2b+0x28>)
 8013f5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013f62:	f7fe fd3b 	bl	80129dc <__assert_func>
 8013f66:	2301      	movs	r3, #1
 8013f68:	6144      	str	r4, [r0, #20]
 8013f6a:	6103      	str	r3, [r0, #16]
 8013f6c:	bd10      	pop	{r4, pc}
 8013f6e:	bf00      	nop
 8013f70:	0801625c 	.word	0x0801625c
 8013f74:	080162de 	.word	0x080162de

08013f78 <__multiply>:
 8013f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f7c:	4691      	mov	r9, r2
 8013f7e:	690a      	ldr	r2, [r1, #16]
 8013f80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013f84:	429a      	cmp	r2, r3
 8013f86:	bfb8      	it	lt
 8013f88:	460b      	movlt	r3, r1
 8013f8a:	460c      	mov	r4, r1
 8013f8c:	bfbc      	itt	lt
 8013f8e:	464c      	movlt	r4, r9
 8013f90:	4699      	movlt	r9, r3
 8013f92:	6927      	ldr	r7, [r4, #16]
 8013f94:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013f98:	68a3      	ldr	r3, [r4, #8]
 8013f9a:	6861      	ldr	r1, [r4, #4]
 8013f9c:	eb07 060a 	add.w	r6, r7, sl
 8013fa0:	42b3      	cmp	r3, r6
 8013fa2:	b085      	sub	sp, #20
 8013fa4:	bfb8      	it	lt
 8013fa6:	3101      	addlt	r1, #1
 8013fa8:	f7ff fed8 	bl	8013d5c <_Balloc>
 8013fac:	b930      	cbnz	r0, 8013fbc <__multiply+0x44>
 8013fae:	4602      	mov	r2, r0
 8013fb0:	4b44      	ldr	r3, [pc, #272]	; (80140c4 <__multiply+0x14c>)
 8013fb2:	4845      	ldr	r0, [pc, #276]	; (80140c8 <__multiply+0x150>)
 8013fb4:	f240 115d 	movw	r1, #349	; 0x15d
 8013fb8:	f7fe fd10 	bl	80129dc <__assert_func>
 8013fbc:	f100 0514 	add.w	r5, r0, #20
 8013fc0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013fc4:	462b      	mov	r3, r5
 8013fc6:	2200      	movs	r2, #0
 8013fc8:	4543      	cmp	r3, r8
 8013fca:	d321      	bcc.n	8014010 <__multiply+0x98>
 8013fcc:	f104 0314 	add.w	r3, r4, #20
 8013fd0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013fd4:	f109 0314 	add.w	r3, r9, #20
 8013fd8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013fdc:	9202      	str	r2, [sp, #8]
 8013fde:	1b3a      	subs	r2, r7, r4
 8013fe0:	3a15      	subs	r2, #21
 8013fe2:	f022 0203 	bic.w	r2, r2, #3
 8013fe6:	3204      	adds	r2, #4
 8013fe8:	f104 0115 	add.w	r1, r4, #21
 8013fec:	428f      	cmp	r7, r1
 8013fee:	bf38      	it	cc
 8013ff0:	2204      	movcc	r2, #4
 8013ff2:	9201      	str	r2, [sp, #4]
 8013ff4:	9a02      	ldr	r2, [sp, #8]
 8013ff6:	9303      	str	r3, [sp, #12]
 8013ff8:	429a      	cmp	r2, r3
 8013ffa:	d80c      	bhi.n	8014016 <__multiply+0x9e>
 8013ffc:	2e00      	cmp	r6, #0
 8013ffe:	dd03      	ble.n	8014008 <__multiply+0x90>
 8014000:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014004:	2b00      	cmp	r3, #0
 8014006:	d05a      	beq.n	80140be <__multiply+0x146>
 8014008:	6106      	str	r6, [r0, #16]
 801400a:	b005      	add	sp, #20
 801400c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014010:	f843 2b04 	str.w	r2, [r3], #4
 8014014:	e7d8      	b.n	8013fc8 <__multiply+0x50>
 8014016:	f8b3 a000 	ldrh.w	sl, [r3]
 801401a:	f1ba 0f00 	cmp.w	sl, #0
 801401e:	d024      	beq.n	801406a <__multiply+0xf2>
 8014020:	f104 0e14 	add.w	lr, r4, #20
 8014024:	46a9      	mov	r9, r5
 8014026:	f04f 0c00 	mov.w	ip, #0
 801402a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801402e:	f8d9 1000 	ldr.w	r1, [r9]
 8014032:	fa1f fb82 	uxth.w	fp, r2
 8014036:	b289      	uxth	r1, r1
 8014038:	fb0a 110b 	mla	r1, sl, fp, r1
 801403c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8014040:	f8d9 2000 	ldr.w	r2, [r9]
 8014044:	4461      	add	r1, ip
 8014046:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801404a:	fb0a c20b 	mla	r2, sl, fp, ip
 801404e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014052:	b289      	uxth	r1, r1
 8014054:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014058:	4577      	cmp	r7, lr
 801405a:	f849 1b04 	str.w	r1, [r9], #4
 801405e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014062:	d8e2      	bhi.n	801402a <__multiply+0xb2>
 8014064:	9a01      	ldr	r2, [sp, #4]
 8014066:	f845 c002 	str.w	ip, [r5, r2]
 801406a:	9a03      	ldr	r2, [sp, #12]
 801406c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014070:	3304      	adds	r3, #4
 8014072:	f1b9 0f00 	cmp.w	r9, #0
 8014076:	d020      	beq.n	80140ba <__multiply+0x142>
 8014078:	6829      	ldr	r1, [r5, #0]
 801407a:	f104 0c14 	add.w	ip, r4, #20
 801407e:	46ae      	mov	lr, r5
 8014080:	f04f 0a00 	mov.w	sl, #0
 8014084:	f8bc b000 	ldrh.w	fp, [ip]
 8014088:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801408c:	fb09 220b 	mla	r2, r9, fp, r2
 8014090:	4492      	add	sl, r2
 8014092:	b289      	uxth	r1, r1
 8014094:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8014098:	f84e 1b04 	str.w	r1, [lr], #4
 801409c:	f85c 2b04 	ldr.w	r2, [ip], #4
 80140a0:	f8be 1000 	ldrh.w	r1, [lr]
 80140a4:	0c12      	lsrs	r2, r2, #16
 80140a6:	fb09 1102 	mla	r1, r9, r2, r1
 80140aa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80140ae:	4567      	cmp	r7, ip
 80140b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80140b4:	d8e6      	bhi.n	8014084 <__multiply+0x10c>
 80140b6:	9a01      	ldr	r2, [sp, #4]
 80140b8:	50a9      	str	r1, [r5, r2]
 80140ba:	3504      	adds	r5, #4
 80140bc:	e79a      	b.n	8013ff4 <__multiply+0x7c>
 80140be:	3e01      	subs	r6, #1
 80140c0:	e79c      	b.n	8013ffc <__multiply+0x84>
 80140c2:	bf00      	nop
 80140c4:	0801625c 	.word	0x0801625c
 80140c8:	080162de 	.word	0x080162de

080140cc <__pow5mult>:
 80140cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80140d0:	4615      	mov	r5, r2
 80140d2:	f012 0203 	ands.w	r2, r2, #3
 80140d6:	4606      	mov	r6, r0
 80140d8:	460f      	mov	r7, r1
 80140da:	d007      	beq.n	80140ec <__pow5mult+0x20>
 80140dc:	4c25      	ldr	r4, [pc, #148]	; (8014174 <__pow5mult+0xa8>)
 80140de:	3a01      	subs	r2, #1
 80140e0:	2300      	movs	r3, #0
 80140e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80140e6:	f7ff fe9b 	bl	8013e20 <__multadd>
 80140ea:	4607      	mov	r7, r0
 80140ec:	10ad      	asrs	r5, r5, #2
 80140ee:	d03d      	beq.n	801416c <__pow5mult+0xa0>
 80140f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80140f2:	b97c      	cbnz	r4, 8014114 <__pow5mult+0x48>
 80140f4:	2010      	movs	r0, #16
 80140f6:	f7ff fdcb 	bl	8013c90 <malloc>
 80140fa:	4602      	mov	r2, r0
 80140fc:	6270      	str	r0, [r6, #36]	; 0x24
 80140fe:	b928      	cbnz	r0, 801410c <__pow5mult+0x40>
 8014100:	4b1d      	ldr	r3, [pc, #116]	; (8014178 <__pow5mult+0xac>)
 8014102:	481e      	ldr	r0, [pc, #120]	; (801417c <__pow5mult+0xb0>)
 8014104:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014108:	f7fe fc68 	bl	80129dc <__assert_func>
 801410c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014110:	6004      	str	r4, [r0, #0]
 8014112:	60c4      	str	r4, [r0, #12]
 8014114:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014118:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801411c:	b94c      	cbnz	r4, 8014132 <__pow5mult+0x66>
 801411e:	f240 2171 	movw	r1, #625	; 0x271
 8014122:	4630      	mov	r0, r6
 8014124:	f7ff ff12 	bl	8013f4c <__i2b>
 8014128:	2300      	movs	r3, #0
 801412a:	f8c8 0008 	str.w	r0, [r8, #8]
 801412e:	4604      	mov	r4, r0
 8014130:	6003      	str	r3, [r0, #0]
 8014132:	f04f 0900 	mov.w	r9, #0
 8014136:	07eb      	lsls	r3, r5, #31
 8014138:	d50a      	bpl.n	8014150 <__pow5mult+0x84>
 801413a:	4639      	mov	r1, r7
 801413c:	4622      	mov	r2, r4
 801413e:	4630      	mov	r0, r6
 8014140:	f7ff ff1a 	bl	8013f78 <__multiply>
 8014144:	4639      	mov	r1, r7
 8014146:	4680      	mov	r8, r0
 8014148:	4630      	mov	r0, r6
 801414a:	f7ff fe47 	bl	8013ddc <_Bfree>
 801414e:	4647      	mov	r7, r8
 8014150:	106d      	asrs	r5, r5, #1
 8014152:	d00b      	beq.n	801416c <__pow5mult+0xa0>
 8014154:	6820      	ldr	r0, [r4, #0]
 8014156:	b938      	cbnz	r0, 8014168 <__pow5mult+0x9c>
 8014158:	4622      	mov	r2, r4
 801415a:	4621      	mov	r1, r4
 801415c:	4630      	mov	r0, r6
 801415e:	f7ff ff0b 	bl	8013f78 <__multiply>
 8014162:	6020      	str	r0, [r4, #0]
 8014164:	f8c0 9000 	str.w	r9, [r0]
 8014168:	4604      	mov	r4, r0
 801416a:	e7e4      	b.n	8014136 <__pow5mult+0x6a>
 801416c:	4638      	mov	r0, r7
 801416e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014172:	bf00      	nop
 8014174:	08016430 	.word	0x08016430
 8014178:	080161ea 	.word	0x080161ea
 801417c:	080162de 	.word	0x080162de

08014180 <__lshift>:
 8014180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014184:	460c      	mov	r4, r1
 8014186:	6849      	ldr	r1, [r1, #4]
 8014188:	6923      	ldr	r3, [r4, #16]
 801418a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801418e:	68a3      	ldr	r3, [r4, #8]
 8014190:	4607      	mov	r7, r0
 8014192:	4691      	mov	r9, r2
 8014194:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014198:	f108 0601 	add.w	r6, r8, #1
 801419c:	42b3      	cmp	r3, r6
 801419e:	db0b      	blt.n	80141b8 <__lshift+0x38>
 80141a0:	4638      	mov	r0, r7
 80141a2:	f7ff fddb 	bl	8013d5c <_Balloc>
 80141a6:	4605      	mov	r5, r0
 80141a8:	b948      	cbnz	r0, 80141be <__lshift+0x3e>
 80141aa:	4602      	mov	r2, r0
 80141ac:	4b2a      	ldr	r3, [pc, #168]	; (8014258 <__lshift+0xd8>)
 80141ae:	482b      	ldr	r0, [pc, #172]	; (801425c <__lshift+0xdc>)
 80141b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80141b4:	f7fe fc12 	bl	80129dc <__assert_func>
 80141b8:	3101      	adds	r1, #1
 80141ba:	005b      	lsls	r3, r3, #1
 80141bc:	e7ee      	b.n	801419c <__lshift+0x1c>
 80141be:	2300      	movs	r3, #0
 80141c0:	f100 0114 	add.w	r1, r0, #20
 80141c4:	f100 0210 	add.w	r2, r0, #16
 80141c8:	4618      	mov	r0, r3
 80141ca:	4553      	cmp	r3, sl
 80141cc:	db37      	blt.n	801423e <__lshift+0xbe>
 80141ce:	6920      	ldr	r0, [r4, #16]
 80141d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80141d4:	f104 0314 	add.w	r3, r4, #20
 80141d8:	f019 091f 	ands.w	r9, r9, #31
 80141dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80141e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80141e4:	d02f      	beq.n	8014246 <__lshift+0xc6>
 80141e6:	f1c9 0e20 	rsb	lr, r9, #32
 80141ea:	468a      	mov	sl, r1
 80141ec:	f04f 0c00 	mov.w	ip, #0
 80141f0:	681a      	ldr	r2, [r3, #0]
 80141f2:	fa02 f209 	lsl.w	r2, r2, r9
 80141f6:	ea42 020c 	orr.w	r2, r2, ip
 80141fa:	f84a 2b04 	str.w	r2, [sl], #4
 80141fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8014202:	4298      	cmp	r0, r3
 8014204:	fa22 fc0e 	lsr.w	ip, r2, lr
 8014208:	d8f2      	bhi.n	80141f0 <__lshift+0x70>
 801420a:	1b03      	subs	r3, r0, r4
 801420c:	3b15      	subs	r3, #21
 801420e:	f023 0303 	bic.w	r3, r3, #3
 8014212:	3304      	adds	r3, #4
 8014214:	f104 0215 	add.w	r2, r4, #21
 8014218:	4290      	cmp	r0, r2
 801421a:	bf38      	it	cc
 801421c:	2304      	movcc	r3, #4
 801421e:	f841 c003 	str.w	ip, [r1, r3]
 8014222:	f1bc 0f00 	cmp.w	ip, #0
 8014226:	d001      	beq.n	801422c <__lshift+0xac>
 8014228:	f108 0602 	add.w	r6, r8, #2
 801422c:	3e01      	subs	r6, #1
 801422e:	4638      	mov	r0, r7
 8014230:	612e      	str	r6, [r5, #16]
 8014232:	4621      	mov	r1, r4
 8014234:	f7ff fdd2 	bl	8013ddc <_Bfree>
 8014238:	4628      	mov	r0, r5
 801423a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801423e:	f842 0f04 	str.w	r0, [r2, #4]!
 8014242:	3301      	adds	r3, #1
 8014244:	e7c1      	b.n	80141ca <__lshift+0x4a>
 8014246:	3904      	subs	r1, #4
 8014248:	f853 2b04 	ldr.w	r2, [r3], #4
 801424c:	f841 2f04 	str.w	r2, [r1, #4]!
 8014250:	4298      	cmp	r0, r3
 8014252:	d8f9      	bhi.n	8014248 <__lshift+0xc8>
 8014254:	e7ea      	b.n	801422c <__lshift+0xac>
 8014256:	bf00      	nop
 8014258:	0801625c 	.word	0x0801625c
 801425c:	080162de 	.word	0x080162de

08014260 <__mcmp>:
 8014260:	b530      	push	{r4, r5, lr}
 8014262:	6902      	ldr	r2, [r0, #16]
 8014264:	690c      	ldr	r4, [r1, #16]
 8014266:	1b12      	subs	r2, r2, r4
 8014268:	d10e      	bne.n	8014288 <__mcmp+0x28>
 801426a:	f100 0314 	add.w	r3, r0, #20
 801426e:	3114      	adds	r1, #20
 8014270:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014274:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014278:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801427c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014280:	42a5      	cmp	r5, r4
 8014282:	d003      	beq.n	801428c <__mcmp+0x2c>
 8014284:	d305      	bcc.n	8014292 <__mcmp+0x32>
 8014286:	2201      	movs	r2, #1
 8014288:	4610      	mov	r0, r2
 801428a:	bd30      	pop	{r4, r5, pc}
 801428c:	4283      	cmp	r3, r0
 801428e:	d3f3      	bcc.n	8014278 <__mcmp+0x18>
 8014290:	e7fa      	b.n	8014288 <__mcmp+0x28>
 8014292:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014296:	e7f7      	b.n	8014288 <__mcmp+0x28>

08014298 <__mdiff>:
 8014298:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801429c:	460c      	mov	r4, r1
 801429e:	4606      	mov	r6, r0
 80142a0:	4611      	mov	r1, r2
 80142a2:	4620      	mov	r0, r4
 80142a4:	4690      	mov	r8, r2
 80142a6:	f7ff ffdb 	bl	8014260 <__mcmp>
 80142aa:	1e05      	subs	r5, r0, #0
 80142ac:	d110      	bne.n	80142d0 <__mdiff+0x38>
 80142ae:	4629      	mov	r1, r5
 80142b0:	4630      	mov	r0, r6
 80142b2:	f7ff fd53 	bl	8013d5c <_Balloc>
 80142b6:	b930      	cbnz	r0, 80142c6 <__mdiff+0x2e>
 80142b8:	4b3a      	ldr	r3, [pc, #232]	; (80143a4 <__mdiff+0x10c>)
 80142ba:	4602      	mov	r2, r0
 80142bc:	f240 2132 	movw	r1, #562	; 0x232
 80142c0:	4839      	ldr	r0, [pc, #228]	; (80143a8 <__mdiff+0x110>)
 80142c2:	f7fe fb8b 	bl	80129dc <__assert_func>
 80142c6:	2301      	movs	r3, #1
 80142c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80142cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142d0:	bfa4      	itt	ge
 80142d2:	4643      	movge	r3, r8
 80142d4:	46a0      	movge	r8, r4
 80142d6:	4630      	mov	r0, r6
 80142d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80142dc:	bfa6      	itte	ge
 80142de:	461c      	movge	r4, r3
 80142e0:	2500      	movge	r5, #0
 80142e2:	2501      	movlt	r5, #1
 80142e4:	f7ff fd3a 	bl	8013d5c <_Balloc>
 80142e8:	b920      	cbnz	r0, 80142f4 <__mdiff+0x5c>
 80142ea:	4b2e      	ldr	r3, [pc, #184]	; (80143a4 <__mdiff+0x10c>)
 80142ec:	4602      	mov	r2, r0
 80142ee:	f44f 7110 	mov.w	r1, #576	; 0x240
 80142f2:	e7e5      	b.n	80142c0 <__mdiff+0x28>
 80142f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80142f8:	6926      	ldr	r6, [r4, #16]
 80142fa:	60c5      	str	r5, [r0, #12]
 80142fc:	f104 0914 	add.w	r9, r4, #20
 8014300:	f108 0514 	add.w	r5, r8, #20
 8014304:	f100 0e14 	add.w	lr, r0, #20
 8014308:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801430c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014310:	f108 0210 	add.w	r2, r8, #16
 8014314:	46f2      	mov	sl, lr
 8014316:	2100      	movs	r1, #0
 8014318:	f859 3b04 	ldr.w	r3, [r9], #4
 801431c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014320:	fa1f f883 	uxth.w	r8, r3
 8014324:	fa11 f18b 	uxtah	r1, r1, fp
 8014328:	0c1b      	lsrs	r3, r3, #16
 801432a:	eba1 0808 	sub.w	r8, r1, r8
 801432e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014332:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014336:	fa1f f888 	uxth.w	r8, r8
 801433a:	1419      	asrs	r1, r3, #16
 801433c:	454e      	cmp	r6, r9
 801433e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014342:	f84a 3b04 	str.w	r3, [sl], #4
 8014346:	d8e7      	bhi.n	8014318 <__mdiff+0x80>
 8014348:	1b33      	subs	r3, r6, r4
 801434a:	3b15      	subs	r3, #21
 801434c:	f023 0303 	bic.w	r3, r3, #3
 8014350:	3304      	adds	r3, #4
 8014352:	3415      	adds	r4, #21
 8014354:	42a6      	cmp	r6, r4
 8014356:	bf38      	it	cc
 8014358:	2304      	movcc	r3, #4
 801435a:	441d      	add	r5, r3
 801435c:	4473      	add	r3, lr
 801435e:	469e      	mov	lr, r3
 8014360:	462e      	mov	r6, r5
 8014362:	4566      	cmp	r6, ip
 8014364:	d30e      	bcc.n	8014384 <__mdiff+0xec>
 8014366:	f10c 0203 	add.w	r2, ip, #3
 801436a:	1b52      	subs	r2, r2, r5
 801436c:	f022 0203 	bic.w	r2, r2, #3
 8014370:	3d03      	subs	r5, #3
 8014372:	45ac      	cmp	ip, r5
 8014374:	bf38      	it	cc
 8014376:	2200      	movcc	r2, #0
 8014378:	441a      	add	r2, r3
 801437a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801437e:	b17b      	cbz	r3, 80143a0 <__mdiff+0x108>
 8014380:	6107      	str	r7, [r0, #16]
 8014382:	e7a3      	b.n	80142cc <__mdiff+0x34>
 8014384:	f856 8b04 	ldr.w	r8, [r6], #4
 8014388:	fa11 f288 	uxtah	r2, r1, r8
 801438c:	1414      	asrs	r4, r2, #16
 801438e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014392:	b292      	uxth	r2, r2
 8014394:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8014398:	f84e 2b04 	str.w	r2, [lr], #4
 801439c:	1421      	asrs	r1, r4, #16
 801439e:	e7e0      	b.n	8014362 <__mdiff+0xca>
 80143a0:	3f01      	subs	r7, #1
 80143a2:	e7ea      	b.n	801437a <__mdiff+0xe2>
 80143a4:	0801625c 	.word	0x0801625c
 80143a8:	080162de 	.word	0x080162de

080143ac <__d2b>:
 80143ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80143b0:	4689      	mov	r9, r1
 80143b2:	2101      	movs	r1, #1
 80143b4:	ec57 6b10 	vmov	r6, r7, d0
 80143b8:	4690      	mov	r8, r2
 80143ba:	f7ff fccf 	bl	8013d5c <_Balloc>
 80143be:	4604      	mov	r4, r0
 80143c0:	b930      	cbnz	r0, 80143d0 <__d2b+0x24>
 80143c2:	4602      	mov	r2, r0
 80143c4:	4b25      	ldr	r3, [pc, #148]	; (801445c <__d2b+0xb0>)
 80143c6:	4826      	ldr	r0, [pc, #152]	; (8014460 <__d2b+0xb4>)
 80143c8:	f240 310a 	movw	r1, #778	; 0x30a
 80143cc:	f7fe fb06 	bl	80129dc <__assert_func>
 80143d0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80143d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80143d8:	bb35      	cbnz	r5, 8014428 <__d2b+0x7c>
 80143da:	2e00      	cmp	r6, #0
 80143dc:	9301      	str	r3, [sp, #4]
 80143de:	d028      	beq.n	8014432 <__d2b+0x86>
 80143e0:	4668      	mov	r0, sp
 80143e2:	9600      	str	r6, [sp, #0]
 80143e4:	f7ff fd82 	bl	8013eec <__lo0bits>
 80143e8:	9900      	ldr	r1, [sp, #0]
 80143ea:	b300      	cbz	r0, 801442e <__d2b+0x82>
 80143ec:	9a01      	ldr	r2, [sp, #4]
 80143ee:	f1c0 0320 	rsb	r3, r0, #32
 80143f2:	fa02 f303 	lsl.w	r3, r2, r3
 80143f6:	430b      	orrs	r3, r1
 80143f8:	40c2      	lsrs	r2, r0
 80143fa:	6163      	str	r3, [r4, #20]
 80143fc:	9201      	str	r2, [sp, #4]
 80143fe:	9b01      	ldr	r3, [sp, #4]
 8014400:	61a3      	str	r3, [r4, #24]
 8014402:	2b00      	cmp	r3, #0
 8014404:	bf14      	ite	ne
 8014406:	2202      	movne	r2, #2
 8014408:	2201      	moveq	r2, #1
 801440a:	6122      	str	r2, [r4, #16]
 801440c:	b1d5      	cbz	r5, 8014444 <__d2b+0x98>
 801440e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014412:	4405      	add	r5, r0
 8014414:	f8c9 5000 	str.w	r5, [r9]
 8014418:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801441c:	f8c8 0000 	str.w	r0, [r8]
 8014420:	4620      	mov	r0, r4
 8014422:	b003      	add	sp, #12
 8014424:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014428:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801442c:	e7d5      	b.n	80143da <__d2b+0x2e>
 801442e:	6161      	str	r1, [r4, #20]
 8014430:	e7e5      	b.n	80143fe <__d2b+0x52>
 8014432:	a801      	add	r0, sp, #4
 8014434:	f7ff fd5a 	bl	8013eec <__lo0bits>
 8014438:	9b01      	ldr	r3, [sp, #4]
 801443a:	6163      	str	r3, [r4, #20]
 801443c:	2201      	movs	r2, #1
 801443e:	6122      	str	r2, [r4, #16]
 8014440:	3020      	adds	r0, #32
 8014442:	e7e3      	b.n	801440c <__d2b+0x60>
 8014444:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014448:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801444c:	f8c9 0000 	str.w	r0, [r9]
 8014450:	6918      	ldr	r0, [r3, #16]
 8014452:	f7ff fd2b 	bl	8013eac <__hi0bits>
 8014456:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801445a:	e7df      	b.n	801441c <__d2b+0x70>
 801445c:	0801625c 	.word	0x0801625c
 8014460:	080162de 	.word	0x080162de

08014464 <_calloc_r>:
 8014464:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014466:	fba1 2402 	umull	r2, r4, r1, r2
 801446a:	b94c      	cbnz	r4, 8014480 <_calloc_r+0x1c>
 801446c:	4611      	mov	r1, r2
 801446e:	9201      	str	r2, [sp, #4]
 8014470:	f000 f87a 	bl	8014568 <_malloc_r>
 8014474:	9a01      	ldr	r2, [sp, #4]
 8014476:	4605      	mov	r5, r0
 8014478:	b930      	cbnz	r0, 8014488 <_calloc_r+0x24>
 801447a:	4628      	mov	r0, r5
 801447c:	b003      	add	sp, #12
 801447e:	bd30      	pop	{r4, r5, pc}
 8014480:	220c      	movs	r2, #12
 8014482:	6002      	str	r2, [r0, #0]
 8014484:	2500      	movs	r5, #0
 8014486:	e7f8      	b.n	801447a <_calloc_r+0x16>
 8014488:	4621      	mov	r1, r4
 801448a:	f7ff fc53 	bl	8013d34 <memset>
 801448e:	e7f4      	b.n	801447a <_calloc_r+0x16>

08014490 <_free_r>:
 8014490:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014492:	2900      	cmp	r1, #0
 8014494:	d044      	beq.n	8014520 <_free_r+0x90>
 8014496:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801449a:	9001      	str	r0, [sp, #4]
 801449c:	2b00      	cmp	r3, #0
 801449e:	f1a1 0404 	sub.w	r4, r1, #4
 80144a2:	bfb8      	it	lt
 80144a4:	18e4      	addlt	r4, r4, r3
 80144a6:	f7ff fc4d 	bl	8013d44 <__malloc_lock>
 80144aa:	4a1e      	ldr	r2, [pc, #120]	; (8014524 <_free_r+0x94>)
 80144ac:	9801      	ldr	r0, [sp, #4]
 80144ae:	6813      	ldr	r3, [r2, #0]
 80144b0:	b933      	cbnz	r3, 80144c0 <_free_r+0x30>
 80144b2:	6063      	str	r3, [r4, #4]
 80144b4:	6014      	str	r4, [r2, #0]
 80144b6:	b003      	add	sp, #12
 80144b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80144bc:	f7ff bc48 	b.w	8013d50 <__malloc_unlock>
 80144c0:	42a3      	cmp	r3, r4
 80144c2:	d908      	bls.n	80144d6 <_free_r+0x46>
 80144c4:	6825      	ldr	r5, [r4, #0]
 80144c6:	1961      	adds	r1, r4, r5
 80144c8:	428b      	cmp	r3, r1
 80144ca:	bf01      	itttt	eq
 80144cc:	6819      	ldreq	r1, [r3, #0]
 80144ce:	685b      	ldreq	r3, [r3, #4]
 80144d0:	1949      	addeq	r1, r1, r5
 80144d2:	6021      	streq	r1, [r4, #0]
 80144d4:	e7ed      	b.n	80144b2 <_free_r+0x22>
 80144d6:	461a      	mov	r2, r3
 80144d8:	685b      	ldr	r3, [r3, #4]
 80144da:	b10b      	cbz	r3, 80144e0 <_free_r+0x50>
 80144dc:	42a3      	cmp	r3, r4
 80144de:	d9fa      	bls.n	80144d6 <_free_r+0x46>
 80144e0:	6811      	ldr	r1, [r2, #0]
 80144e2:	1855      	adds	r5, r2, r1
 80144e4:	42a5      	cmp	r5, r4
 80144e6:	d10b      	bne.n	8014500 <_free_r+0x70>
 80144e8:	6824      	ldr	r4, [r4, #0]
 80144ea:	4421      	add	r1, r4
 80144ec:	1854      	adds	r4, r2, r1
 80144ee:	42a3      	cmp	r3, r4
 80144f0:	6011      	str	r1, [r2, #0]
 80144f2:	d1e0      	bne.n	80144b6 <_free_r+0x26>
 80144f4:	681c      	ldr	r4, [r3, #0]
 80144f6:	685b      	ldr	r3, [r3, #4]
 80144f8:	6053      	str	r3, [r2, #4]
 80144fa:	4421      	add	r1, r4
 80144fc:	6011      	str	r1, [r2, #0]
 80144fe:	e7da      	b.n	80144b6 <_free_r+0x26>
 8014500:	d902      	bls.n	8014508 <_free_r+0x78>
 8014502:	230c      	movs	r3, #12
 8014504:	6003      	str	r3, [r0, #0]
 8014506:	e7d6      	b.n	80144b6 <_free_r+0x26>
 8014508:	6825      	ldr	r5, [r4, #0]
 801450a:	1961      	adds	r1, r4, r5
 801450c:	428b      	cmp	r3, r1
 801450e:	bf04      	itt	eq
 8014510:	6819      	ldreq	r1, [r3, #0]
 8014512:	685b      	ldreq	r3, [r3, #4]
 8014514:	6063      	str	r3, [r4, #4]
 8014516:	bf04      	itt	eq
 8014518:	1949      	addeq	r1, r1, r5
 801451a:	6021      	streq	r1, [r4, #0]
 801451c:	6054      	str	r4, [r2, #4]
 801451e:	e7ca      	b.n	80144b6 <_free_r+0x26>
 8014520:	b003      	add	sp, #12
 8014522:	bd30      	pop	{r4, r5, pc}
 8014524:	200004f8 	.word	0x200004f8

08014528 <sbrk_aligned>:
 8014528:	b570      	push	{r4, r5, r6, lr}
 801452a:	4e0e      	ldr	r6, [pc, #56]	; (8014564 <sbrk_aligned+0x3c>)
 801452c:	460c      	mov	r4, r1
 801452e:	6831      	ldr	r1, [r6, #0]
 8014530:	4605      	mov	r5, r0
 8014532:	b911      	cbnz	r1, 801453a <sbrk_aligned+0x12>
 8014534:	f000 fff4 	bl	8015520 <_sbrk_r>
 8014538:	6030      	str	r0, [r6, #0]
 801453a:	4621      	mov	r1, r4
 801453c:	4628      	mov	r0, r5
 801453e:	f000 ffef 	bl	8015520 <_sbrk_r>
 8014542:	1c43      	adds	r3, r0, #1
 8014544:	d00a      	beq.n	801455c <sbrk_aligned+0x34>
 8014546:	1cc4      	adds	r4, r0, #3
 8014548:	f024 0403 	bic.w	r4, r4, #3
 801454c:	42a0      	cmp	r0, r4
 801454e:	d007      	beq.n	8014560 <sbrk_aligned+0x38>
 8014550:	1a21      	subs	r1, r4, r0
 8014552:	4628      	mov	r0, r5
 8014554:	f000 ffe4 	bl	8015520 <_sbrk_r>
 8014558:	3001      	adds	r0, #1
 801455a:	d101      	bne.n	8014560 <sbrk_aligned+0x38>
 801455c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014560:	4620      	mov	r0, r4
 8014562:	bd70      	pop	{r4, r5, r6, pc}
 8014564:	200004fc 	.word	0x200004fc

08014568 <_malloc_r>:
 8014568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801456c:	1ccd      	adds	r5, r1, #3
 801456e:	f025 0503 	bic.w	r5, r5, #3
 8014572:	3508      	adds	r5, #8
 8014574:	2d0c      	cmp	r5, #12
 8014576:	bf38      	it	cc
 8014578:	250c      	movcc	r5, #12
 801457a:	2d00      	cmp	r5, #0
 801457c:	4607      	mov	r7, r0
 801457e:	db01      	blt.n	8014584 <_malloc_r+0x1c>
 8014580:	42a9      	cmp	r1, r5
 8014582:	d905      	bls.n	8014590 <_malloc_r+0x28>
 8014584:	230c      	movs	r3, #12
 8014586:	603b      	str	r3, [r7, #0]
 8014588:	2600      	movs	r6, #0
 801458a:	4630      	mov	r0, r6
 801458c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014590:	4e2e      	ldr	r6, [pc, #184]	; (801464c <_malloc_r+0xe4>)
 8014592:	f7ff fbd7 	bl	8013d44 <__malloc_lock>
 8014596:	6833      	ldr	r3, [r6, #0]
 8014598:	461c      	mov	r4, r3
 801459a:	bb34      	cbnz	r4, 80145ea <_malloc_r+0x82>
 801459c:	4629      	mov	r1, r5
 801459e:	4638      	mov	r0, r7
 80145a0:	f7ff ffc2 	bl	8014528 <sbrk_aligned>
 80145a4:	1c43      	adds	r3, r0, #1
 80145a6:	4604      	mov	r4, r0
 80145a8:	d14d      	bne.n	8014646 <_malloc_r+0xde>
 80145aa:	6834      	ldr	r4, [r6, #0]
 80145ac:	4626      	mov	r6, r4
 80145ae:	2e00      	cmp	r6, #0
 80145b0:	d140      	bne.n	8014634 <_malloc_r+0xcc>
 80145b2:	6823      	ldr	r3, [r4, #0]
 80145b4:	4631      	mov	r1, r6
 80145b6:	4638      	mov	r0, r7
 80145b8:	eb04 0803 	add.w	r8, r4, r3
 80145bc:	f000 ffb0 	bl	8015520 <_sbrk_r>
 80145c0:	4580      	cmp	r8, r0
 80145c2:	d13a      	bne.n	801463a <_malloc_r+0xd2>
 80145c4:	6821      	ldr	r1, [r4, #0]
 80145c6:	3503      	adds	r5, #3
 80145c8:	1a6d      	subs	r5, r5, r1
 80145ca:	f025 0503 	bic.w	r5, r5, #3
 80145ce:	3508      	adds	r5, #8
 80145d0:	2d0c      	cmp	r5, #12
 80145d2:	bf38      	it	cc
 80145d4:	250c      	movcc	r5, #12
 80145d6:	4629      	mov	r1, r5
 80145d8:	4638      	mov	r0, r7
 80145da:	f7ff ffa5 	bl	8014528 <sbrk_aligned>
 80145de:	3001      	adds	r0, #1
 80145e0:	d02b      	beq.n	801463a <_malloc_r+0xd2>
 80145e2:	6823      	ldr	r3, [r4, #0]
 80145e4:	442b      	add	r3, r5
 80145e6:	6023      	str	r3, [r4, #0]
 80145e8:	e00e      	b.n	8014608 <_malloc_r+0xa0>
 80145ea:	6822      	ldr	r2, [r4, #0]
 80145ec:	1b52      	subs	r2, r2, r5
 80145ee:	d41e      	bmi.n	801462e <_malloc_r+0xc6>
 80145f0:	2a0b      	cmp	r2, #11
 80145f2:	d916      	bls.n	8014622 <_malloc_r+0xba>
 80145f4:	1961      	adds	r1, r4, r5
 80145f6:	42a3      	cmp	r3, r4
 80145f8:	6025      	str	r5, [r4, #0]
 80145fa:	bf18      	it	ne
 80145fc:	6059      	strne	r1, [r3, #4]
 80145fe:	6863      	ldr	r3, [r4, #4]
 8014600:	bf08      	it	eq
 8014602:	6031      	streq	r1, [r6, #0]
 8014604:	5162      	str	r2, [r4, r5]
 8014606:	604b      	str	r3, [r1, #4]
 8014608:	4638      	mov	r0, r7
 801460a:	f104 060b 	add.w	r6, r4, #11
 801460e:	f7ff fb9f 	bl	8013d50 <__malloc_unlock>
 8014612:	f026 0607 	bic.w	r6, r6, #7
 8014616:	1d23      	adds	r3, r4, #4
 8014618:	1af2      	subs	r2, r6, r3
 801461a:	d0b6      	beq.n	801458a <_malloc_r+0x22>
 801461c:	1b9b      	subs	r3, r3, r6
 801461e:	50a3      	str	r3, [r4, r2]
 8014620:	e7b3      	b.n	801458a <_malloc_r+0x22>
 8014622:	6862      	ldr	r2, [r4, #4]
 8014624:	42a3      	cmp	r3, r4
 8014626:	bf0c      	ite	eq
 8014628:	6032      	streq	r2, [r6, #0]
 801462a:	605a      	strne	r2, [r3, #4]
 801462c:	e7ec      	b.n	8014608 <_malloc_r+0xa0>
 801462e:	4623      	mov	r3, r4
 8014630:	6864      	ldr	r4, [r4, #4]
 8014632:	e7b2      	b.n	801459a <_malloc_r+0x32>
 8014634:	4634      	mov	r4, r6
 8014636:	6876      	ldr	r6, [r6, #4]
 8014638:	e7b9      	b.n	80145ae <_malloc_r+0x46>
 801463a:	230c      	movs	r3, #12
 801463c:	603b      	str	r3, [r7, #0]
 801463e:	4638      	mov	r0, r7
 8014640:	f7ff fb86 	bl	8013d50 <__malloc_unlock>
 8014644:	e7a1      	b.n	801458a <_malloc_r+0x22>
 8014646:	6025      	str	r5, [r4, #0]
 8014648:	e7de      	b.n	8014608 <_malloc_r+0xa0>
 801464a:	bf00      	nop
 801464c:	200004f8 	.word	0x200004f8

08014650 <_malloc_usable_size_r>:
 8014650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014654:	1f18      	subs	r0, r3, #4
 8014656:	2b00      	cmp	r3, #0
 8014658:	bfbc      	itt	lt
 801465a:	580b      	ldrlt	r3, [r1, r0]
 801465c:	18c0      	addlt	r0, r0, r3
 801465e:	4770      	bx	lr

08014660 <_realloc_r>:
 8014660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014664:	4680      	mov	r8, r0
 8014666:	4614      	mov	r4, r2
 8014668:	460e      	mov	r6, r1
 801466a:	b921      	cbnz	r1, 8014676 <_realloc_r+0x16>
 801466c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014670:	4611      	mov	r1, r2
 8014672:	f7ff bf79 	b.w	8014568 <_malloc_r>
 8014676:	b92a      	cbnz	r2, 8014684 <_realloc_r+0x24>
 8014678:	f7ff ff0a 	bl	8014490 <_free_r>
 801467c:	4625      	mov	r5, r4
 801467e:	4628      	mov	r0, r5
 8014680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014684:	f7ff ffe4 	bl	8014650 <_malloc_usable_size_r>
 8014688:	4284      	cmp	r4, r0
 801468a:	4607      	mov	r7, r0
 801468c:	d802      	bhi.n	8014694 <_realloc_r+0x34>
 801468e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014692:	d812      	bhi.n	80146ba <_realloc_r+0x5a>
 8014694:	4621      	mov	r1, r4
 8014696:	4640      	mov	r0, r8
 8014698:	f7ff ff66 	bl	8014568 <_malloc_r>
 801469c:	4605      	mov	r5, r0
 801469e:	2800      	cmp	r0, #0
 80146a0:	d0ed      	beq.n	801467e <_realloc_r+0x1e>
 80146a2:	42bc      	cmp	r4, r7
 80146a4:	4622      	mov	r2, r4
 80146a6:	4631      	mov	r1, r6
 80146a8:	bf28      	it	cs
 80146aa:	463a      	movcs	r2, r7
 80146ac:	f7ff fb1a 	bl	8013ce4 <memcpy>
 80146b0:	4631      	mov	r1, r6
 80146b2:	4640      	mov	r0, r8
 80146b4:	f7ff feec 	bl	8014490 <_free_r>
 80146b8:	e7e1      	b.n	801467e <_realloc_r+0x1e>
 80146ba:	4635      	mov	r5, r6
 80146bc:	e7df      	b.n	801467e <_realloc_r+0x1e>

080146be <__ssputs_r>:
 80146be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80146c2:	688e      	ldr	r6, [r1, #8]
 80146c4:	429e      	cmp	r6, r3
 80146c6:	4682      	mov	sl, r0
 80146c8:	460c      	mov	r4, r1
 80146ca:	4690      	mov	r8, r2
 80146cc:	461f      	mov	r7, r3
 80146ce:	d838      	bhi.n	8014742 <__ssputs_r+0x84>
 80146d0:	898a      	ldrh	r2, [r1, #12]
 80146d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80146d6:	d032      	beq.n	801473e <__ssputs_r+0x80>
 80146d8:	6825      	ldr	r5, [r4, #0]
 80146da:	6909      	ldr	r1, [r1, #16]
 80146dc:	eba5 0901 	sub.w	r9, r5, r1
 80146e0:	6965      	ldr	r5, [r4, #20]
 80146e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80146e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80146ea:	3301      	adds	r3, #1
 80146ec:	444b      	add	r3, r9
 80146ee:	106d      	asrs	r5, r5, #1
 80146f0:	429d      	cmp	r5, r3
 80146f2:	bf38      	it	cc
 80146f4:	461d      	movcc	r5, r3
 80146f6:	0553      	lsls	r3, r2, #21
 80146f8:	d531      	bpl.n	801475e <__ssputs_r+0xa0>
 80146fa:	4629      	mov	r1, r5
 80146fc:	f7ff ff34 	bl	8014568 <_malloc_r>
 8014700:	4606      	mov	r6, r0
 8014702:	b950      	cbnz	r0, 801471a <__ssputs_r+0x5c>
 8014704:	230c      	movs	r3, #12
 8014706:	f8ca 3000 	str.w	r3, [sl]
 801470a:	89a3      	ldrh	r3, [r4, #12]
 801470c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014710:	81a3      	strh	r3, [r4, #12]
 8014712:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801471a:	6921      	ldr	r1, [r4, #16]
 801471c:	464a      	mov	r2, r9
 801471e:	f7ff fae1 	bl	8013ce4 <memcpy>
 8014722:	89a3      	ldrh	r3, [r4, #12]
 8014724:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801472c:	81a3      	strh	r3, [r4, #12]
 801472e:	6126      	str	r6, [r4, #16]
 8014730:	6165      	str	r5, [r4, #20]
 8014732:	444e      	add	r6, r9
 8014734:	eba5 0509 	sub.w	r5, r5, r9
 8014738:	6026      	str	r6, [r4, #0]
 801473a:	60a5      	str	r5, [r4, #8]
 801473c:	463e      	mov	r6, r7
 801473e:	42be      	cmp	r6, r7
 8014740:	d900      	bls.n	8014744 <__ssputs_r+0x86>
 8014742:	463e      	mov	r6, r7
 8014744:	6820      	ldr	r0, [r4, #0]
 8014746:	4632      	mov	r2, r6
 8014748:	4641      	mov	r1, r8
 801474a:	f7ff fad9 	bl	8013d00 <memmove>
 801474e:	68a3      	ldr	r3, [r4, #8]
 8014750:	1b9b      	subs	r3, r3, r6
 8014752:	60a3      	str	r3, [r4, #8]
 8014754:	6823      	ldr	r3, [r4, #0]
 8014756:	4433      	add	r3, r6
 8014758:	6023      	str	r3, [r4, #0]
 801475a:	2000      	movs	r0, #0
 801475c:	e7db      	b.n	8014716 <__ssputs_r+0x58>
 801475e:	462a      	mov	r2, r5
 8014760:	f7ff ff7e 	bl	8014660 <_realloc_r>
 8014764:	4606      	mov	r6, r0
 8014766:	2800      	cmp	r0, #0
 8014768:	d1e1      	bne.n	801472e <__ssputs_r+0x70>
 801476a:	6921      	ldr	r1, [r4, #16]
 801476c:	4650      	mov	r0, sl
 801476e:	f7ff fe8f 	bl	8014490 <_free_r>
 8014772:	e7c7      	b.n	8014704 <__ssputs_r+0x46>

08014774 <_svfiprintf_r>:
 8014774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014778:	4698      	mov	r8, r3
 801477a:	898b      	ldrh	r3, [r1, #12]
 801477c:	061b      	lsls	r3, r3, #24
 801477e:	b09d      	sub	sp, #116	; 0x74
 8014780:	4607      	mov	r7, r0
 8014782:	460d      	mov	r5, r1
 8014784:	4614      	mov	r4, r2
 8014786:	d50e      	bpl.n	80147a6 <_svfiprintf_r+0x32>
 8014788:	690b      	ldr	r3, [r1, #16]
 801478a:	b963      	cbnz	r3, 80147a6 <_svfiprintf_r+0x32>
 801478c:	2140      	movs	r1, #64	; 0x40
 801478e:	f7ff feeb 	bl	8014568 <_malloc_r>
 8014792:	6028      	str	r0, [r5, #0]
 8014794:	6128      	str	r0, [r5, #16]
 8014796:	b920      	cbnz	r0, 80147a2 <_svfiprintf_r+0x2e>
 8014798:	230c      	movs	r3, #12
 801479a:	603b      	str	r3, [r7, #0]
 801479c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80147a0:	e0d1      	b.n	8014946 <_svfiprintf_r+0x1d2>
 80147a2:	2340      	movs	r3, #64	; 0x40
 80147a4:	616b      	str	r3, [r5, #20]
 80147a6:	2300      	movs	r3, #0
 80147a8:	9309      	str	r3, [sp, #36]	; 0x24
 80147aa:	2320      	movs	r3, #32
 80147ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80147b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80147b4:	2330      	movs	r3, #48	; 0x30
 80147b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014960 <_svfiprintf_r+0x1ec>
 80147ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80147be:	f04f 0901 	mov.w	r9, #1
 80147c2:	4623      	mov	r3, r4
 80147c4:	469a      	mov	sl, r3
 80147c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80147ca:	b10a      	cbz	r2, 80147d0 <_svfiprintf_r+0x5c>
 80147cc:	2a25      	cmp	r2, #37	; 0x25
 80147ce:	d1f9      	bne.n	80147c4 <_svfiprintf_r+0x50>
 80147d0:	ebba 0b04 	subs.w	fp, sl, r4
 80147d4:	d00b      	beq.n	80147ee <_svfiprintf_r+0x7a>
 80147d6:	465b      	mov	r3, fp
 80147d8:	4622      	mov	r2, r4
 80147da:	4629      	mov	r1, r5
 80147dc:	4638      	mov	r0, r7
 80147de:	f7ff ff6e 	bl	80146be <__ssputs_r>
 80147e2:	3001      	adds	r0, #1
 80147e4:	f000 80aa 	beq.w	801493c <_svfiprintf_r+0x1c8>
 80147e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80147ea:	445a      	add	r2, fp
 80147ec:	9209      	str	r2, [sp, #36]	; 0x24
 80147ee:	f89a 3000 	ldrb.w	r3, [sl]
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	f000 80a2 	beq.w	801493c <_svfiprintf_r+0x1c8>
 80147f8:	2300      	movs	r3, #0
 80147fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80147fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014802:	f10a 0a01 	add.w	sl, sl, #1
 8014806:	9304      	str	r3, [sp, #16]
 8014808:	9307      	str	r3, [sp, #28]
 801480a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801480e:	931a      	str	r3, [sp, #104]	; 0x68
 8014810:	4654      	mov	r4, sl
 8014812:	2205      	movs	r2, #5
 8014814:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014818:	4851      	ldr	r0, [pc, #324]	; (8014960 <_svfiprintf_r+0x1ec>)
 801481a:	f7eb fd11 	bl	8000240 <memchr>
 801481e:	9a04      	ldr	r2, [sp, #16]
 8014820:	b9d8      	cbnz	r0, 801485a <_svfiprintf_r+0xe6>
 8014822:	06d0      	lsls	r0, r2, #27
 8014824:	bf44      	itt	mi
 8014826:	2320      	movmi	r3, #32
 8014828:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801482c:	0711      	lsls	r1, r2, #28
 801482e:	bf44      	itt	mi
 8014830:	232b      	movmi	r3, #43	; 0x2b
 8014832:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014836:	f89a 3000 	ldrb.w	r3, [sl]
 801483a:	2b2a      	cmp	r3, #42	; 0x2a
 801483c:	d015      	beq.n	801486a <_svfiprintf_r+0xf6>
 801483e:	9a07      	ldr	r2, [sp, #28]
 8014840:	4654      	mov	r4, sl
 8014842:	2000      	movs	r0, #0
 8014844:	f04f 0c0a 	mov.w	ip, #10
 8014848:	4621      	mov	r1, r4
 801484a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801484e:	3b30      	subs	r3, #48	; 0x30
 8014850:	2b09      	cmp	r3, #9
 8014852:	d94e      	bls.n	80148f2 <_svfiprintf_r+0x17e>
 8014854:	b1b0      	cbz	r0, 8014884 <_svfiprintf_r+0x110>
 8014856:	9207      	str	r2, [sp, #28]
 8014858:	e014      	b.n	8014884 <_svfiprintf_r+0x110>
 801485a:	eba0 0308 	sub.w	r3, r0, r8
 801485e:	fa09 f303 	lsl.w	r3, r9, r3
 8014862:	4313      	orrs	r3, r2
 8014864:	9304      	str	r3, [sp, #16]
 8014866:	46a2      	mov	sl, r4
 8014868:	e7d2      	b.n	8014810 <_svfiprintf_r+0x9c>
 801486a:	9b03      	ldr	r3, [sp, #12]
 801486c:	1d19      	adds	r1, r3, #4
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	9103      	str	r1, [sp, #12]
 8014872:	2b00      	cmp	r3, #0
 8014874:	bfbb      	ittet	lt
 8014876:	425b      	neglt	r3, r3
 8014878:	f042 0202 	orrlt.w	r2, r2, #2
 801487c:	9307      	strge	r3, [sp, #28]
 801487e:	9307      	strlt	r3, [sp, #28]
 8014880:	bfb8      	it	lt
 8014882:	9204      	strlt	r2, [sp, #16]
 8014884:	7823      	ldrb	r3, [r4, #0]
 8014886:	2b2e      	cmp	r3, #46	; 0x2e
 8014888:	d10c      	bne.n	80148a4 <_svfiprintf_r+0x130>
 801488a:	7863      	ldrb	r3, [r4, #1]
 801488c:	2b2a      	cmp	r3, #42	; 0x2a
 801488e:	d135      	bne.n	80148fc <_svfiprintf_r+0x188>
 8014890:	9b03      	ldr	r3, [sp, #12]
 8014892:	1d1a      	adds	r2, r3, #4
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	9203      	str	r2, [sp, #12]
 8014898:	2b00      	cmp	r3, #0
 801489a:	bfb8      	it	lt
 801489c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80148a0:	3402      	adds	r4, #2
 80148a2:	9305      	str	r3, [sp, #20]
 80148a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014970 <_svfiprintf_r+0x1fc>
 80148a8:	7821      	ldrb	r1, [r4, #0]
 80148aa:	2203      	movs	r2, #3
 80148ac:	4650      	mov	r0, sl
 80148ae:	f7eb fcc7 	bl	8000240 <memchr>
 80148b2:	b140      	cbz	r0, 80148c6 <_svfiprintf_r+0x152>
 80148b4:	2340      	movs	r3, #64	; 0x40
 80148b6:	eba0 000a 	sub.w	r0, r0, sl
 80148ba:	fa03 f000 	lsl.w	r0, r3, r0
 80148be:	9b04      	ldr	r3, [sp, #16]
 80148c0:	4303      	orrs	r3, r0
 80148c2:	3401      	adds	r4, #1
 80148c4:	9304      	str	r3, [sp, #16]
 80148c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148ca:	4826      	ldr	r0, [pc, #152]	; (8014964 <_svfiprintf_r+0x1f0>)
 80148cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80148d0:	2206      	movs	r2, #6
 80148d2:	f7eb fcb5 	bl	8000240 <memchr>
 80148d6:	2800      	cmp	r0, #0
 80148d8:	d038      	beq.n	801494c <_svfiprintf_r+0x1d8>
 80148da:	4b23      	ldr	r3, [pc, #140]	; (8014968 <_svfiprintf_r+0x1f4>)
 80148dc:	bb1b      	cbnz	r3, 8014926 <_svfiprintf_r+0x1b2>
 80148de:	9b03      	ldr	r3, [sp, #12]
 80148e0:	3307      	adds	r3, #7
 80148e2:	f023 0307 	bic.w	r3, r3, #7
 80148e6:	3308      	adds	r3, #8
 80148e8:	9303      	str	r3, [sp, #12]
 80148ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148ec:	4433      	add	r3, r6
 80148ee:	9309      	str	r3, [sp, #36]	; 0x24
 80148f0:	e767      	b.n	80147c2 <_svfiprintf_r+0x4e>
 80148f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80148f6:	460c      	mov	r4, r1
 80148f8:	2001      	movs	r0, #1
 80148fa:	e7a5      	b.n	8014848 <_svfiprintf_r+0xd4>
 80148fc:	2300      	movs	r3, #0
 80148fe:	3401      	adds	r4, #1
 8014900:	9305      	str	r3, [sp, #20]
 8014902:	4619      	mov	r1, r3
 8014904:	f04f 0c0a 	mov.w	ip, #10
 8014908:	4620      	mov	r0, r4
 801490a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801490e:	3a30      	subs	r2, #48	; 0x30
 8014910:	2a09      	cmp	r2, #9
 8014912:	d903      	bls.n	801491c <_svfiprintf_r+0x1a8>
 8014914:	2b00      	cmp	r3, #0
 8014916:	d0c5      	beq.n	80148a4 <_svfiprintf_r+0x130>
 8014918:	9105      	str	r1, [sp, #20]
 801491a:	e7c3      	b.n	80148a4 <_svfiprintf_r+0x130>
 801491c:	fb0c 2101 	mla	r1, ip, r1, r2
 8014920:	4604      	mov	r4, r0
 8014922:	2301      	movs	r3, #1
 8014924:	e7f0      	b.n	8014908 <_svfiprintf_r+0x194>
 8014926:	ab03      	add	r3, sp, #12
 8014928:	9300      	str	r3, [sp, #0]
 801492a:	462a      	mov	r2, r5
 801492c:	4b0f      	ldr	r3, [pc, #60]	; (801496c <_svfiprintf_r+0x1f8>)
 801492e:	a904      	add	r1, sp, #16
 8014930:	4638      	mov	r0, r7
 8014932:	f000 fa19 	bl	8014d68 <_printf_float>
 8014936:	1c42      	adds	r2, r0, #1
 8014938:	4606      	mov	r6, r0
 801493a:	d1d6      	bne.n	80148ea <_svfiprintf_r+0x176>
 801493c:	89ab      	ldrh	r3, [r5, #12]
 801493e:	065b      	lsls	r3, r3, #25
 8014940:	f53f af2c 	bmi.w	801479c <_svfiprintf_r+0x28>
 8014944:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014946:	b01d      	add	sp, #116	; 0x74
 8014948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801494c:	ab03      	add	r3, sp, #12
 801494e:	9300      	str	r3, [sp, #0]
 8014950:	462a      	mov	r2, r5
 8014952:	4b06      	ldr	r3, [pc, #24]	; (801496c <_svfiprintf_r+0x1f8>)
 8014954:	a904      	add	r1, sp, #16
 8014956:	4638      	mov	r0, r7
 8014958:	f000 fcaa 	bl	80152b0 <_printf_i>
 801495c:	e7eb      	b.n	8014936 <_svfiprintf_r+0x1c2>
 801495e:	bf00      	nop
 8014960:	0801643c 	.word	0x0801643c
 8014964:	08016446 	.word	0x08016446
 8014968:	08014d69 	.word	0x08014d69
 801496c:	080146bf 	.word	0x080146bf
 8014970:	08016442 	.word	0x08016442

08014974 <__sfputc_r>:
 8014974:	6893      	ldr	r3, [r2, #8]
 8014976:	3b01      	subs	r3, #1
 8014978:	2b00      	cmp	r3, #0
 801497a:	b410      	push	{r4}
 801497c:	6093      	str	r3, [r2, #8]
 801497e:	da08      	bge.n	8014992 <__sfputc_r+0x1e>
 8014980:	6994      	ldr	r4, [r2, #24]
 8014982:	42a3      	cmp	r3, r4
 8014984:	db01      	blt.n	801498a <__sfputc_r+0x16>
 8014986:	290a      	cmp	r1, #10
 8014988:	d103      	bne.n	8014992 <__sfputc_r+0x1e>
 801498a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801498e:	f000 be89 	b.w	80156a4 <__swbuf_r>
 8014992:	6813      	ldr	r3, [r2, #0]
 8014994:	1c58      	adds	r0, r3, #1
 8014996:	6010      	str	r0, [r2, #0]
 8014998:	7019      	strb	r1, [r3, #0]
 801499a:	4608      	mov	r0, r1
 801499c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80149a0:	4770      	bx	lr

080149a2 <__sfputs_r>:
 80149a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149a4:	4606      	mov	r6, r0
 80149a6:	460f      	mov	r7, r1
 80149a8:	4614      	mov	r4, r2
 80149aa:	18d5      	adds	r5, r2, r3
 80149ac:	42ac      	cmp	r4, r5
 80149ae:	d101      	bne.n	80149b4 <__sfputs_r+0x12>
 80149b0:	2000      	movs	r0, #0
 80149b2:	e007      	b.n	80149c4 <__sfputs_r+0x22>
 80149b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80149b8:	463a      	mov	r2, r7
 80149ba:	4630      	mov	r0, r6
 80149bc:	f7ff ffda 	bl	8014974 <__sfputc_r>
 80149c0:	1c43      	adds	r3, r0, #1
 80149c2:	d1f3      	bne.n	80149ac <__sfputs_r+0xa>
 80149c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080149c8 <_vfiprintf_r>:
 80149c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149cc:	460d      	mov	r5, r1
 80149ce:	b09d      	sub	sp, #116	; 0x74
 80149d0:	4614      	mov	r4, r2
 80149d2:	4698      	mov	r8, r3
 80149d4:	4606      	mov	r6, r0
 80149d6:	b118      	cbz	r0, 80149e0 <_vfiprintf_r+0x18>
 80149d8:	6983      	ldr	r3, [r0, #24]
 80149da:	b90b      	cbnz	r3, 80149e0 <_vfiprintf_r+0x18>
 80149dc:	f7fe ffce 	bl	801397c <__sinit>
 80149e0:	4b89      	ldr	r3, [pc, #548]	; (8014c08 <_vfiprintf_r+0x240>)
 80149e2:	429d      	cmp	r5, r3
 80149e4:	d11b      	bne.n	8014a1e <_vfiprintf_r+0x56>
 80149e6:	6875      	ldr	r5, [r6, #4]
 80149e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80149ea:	07d9      	lsls	r1, r3, #31
 80149ec:	d405      	bmi.n	80149fa <_vfiprintf_r+0x32>
 80149ee:	89ab      	ldrh	r3, [r5, #12]
 80149f0:	059a      	lsls	r2, r3, #22
 80149f2:	d402      	bmi.n	80149fa <_vfiprintf_r+0x32>
 80149f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80149f6:	f7ff f8d0 	bl	8013b9a <__retarget_lock_acquire_recursive>
 80149fa:	89ab      	ldrh	r3, [r5, #12]
 80149fc:	071b      	lsls	r3, r3, #28
 80149fe:	d501      	bpl.n	8014a04 <_vfiprintf_r+0x3c>
 8014a00:	692b      	ldr	r3, [r5, #16]
 8014a02:	b9eb      	cbnz	r3, 8014a40 <_vfiprintf_r+0x78>
 8014a04:	4629      	mov	r1, r5
 8014a06:	4630      	mov	r0, r6
 8014a08:	f000 febe 	bl	8015788 <__swsetup_r>
 8014a0c:	b1c0      	cbz	r0, 8014a40 <_vfiprintf_r+0x78>
 8014a0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014a10:	07dc      	lsls	r4, r3, #31
 8014a12:	d50e      	bpl.n	8014a32 <_vfiprintf_r+0x6a>
 8014a14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014a18:	b01d      	add	sp, #116	; 0x74
 8014a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a1e:	4b7b      	ldr	r3, [pc, #492]	; (8014c0c <_vfiprintf_r+0x244>)
 8014a20:	429d      	cmp	r5, r3
 8014a22:	d101      	bne.n	8014a28 <_vfiprintf_r+0x60>
 8014a24:	68b5      	ldr	r5, [r6, #8]
 8014a26:	e7df      	b.n	80149e8 <_vfiprintf_r+0x20>
 8014a28:	4b79      	ldr	r3, [pc, #484]	; (8014c10 <_vfiprintf_r+0x248>)
 8014a2a:	429d      	cmp	r5, r3
 8014a2c:	bf08      	it	eq
 8014a2e:	68f5      	ldreq	r5, [r6, #12]
 8014a30:	e7da      	b.n	80149e8 <_vfiprintf_r+0x20>
 8014a32:	89ab      	ldrh	r3, [r5, #12]
 8014a34:	0598      	lsls	r0, r3, #22
 8014a36:	d4ed      	bmi.n	8014a14 <_vfiprintf_r+0x4c>
 8014a38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014a3a:	f7ff f8b0 	bl	8013b9e <__retarget_lock_release_recursive>
 8014a3e:	e7e9      	b.n	8014a14 <_vfiprintf_r+0x4c>
 8014a40:	2300      	movs	r3, #0
 8014a42:	9309      	str	r3, [sp, #36]	; 0x24
 8014a44:	2320      	movs	r3, #32
 8014a46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014a4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8014a4e:	2330      	movs	r3, #48	; 0x30
 8014a50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014c14 <_vfiprintf_r+0x24c>
 8014a54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014a58:	f04f 0901 	mov.w	r9, #1
 8014a5c:	4623      	mov	r3, r4
 8014a5e:	469a      	mov	sl, r3
 8014a60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a64:	b10a      	cbz	r2, 8014a6a <_vfiprintf_r+0xa2>
 8014a66:	2a25      	cmp	r2, #37	; 0x25
 8014a68:	d1f9      	bne.n	8014a5e <_vfiprintf_r+0x96>
 8014a6a:	ebba 0b04 	subs.w	fp, sl, r4
 8014a6e:	d00b      	beq.n	8014a88 <_vfiprintf_r+0xc0>
 8014a70:	465b      	mov	r3, fp
 8014a72:	4622      	mov	r2, r4
 8014a74:	4629      	mov	r1, r5
 8014a76:	4630      	mov	r0, r6
 8014a78:	f7ff ff93 	bl	80149a2 <__sfputs_r>
 8014a7c:	3001      	adds	r0, #1
 8014a7e:	f000 80aa 	beq.w	8014bd6 <_vfiprintf_r+0x20e>
 8014a82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014a84:	445a      	add	r2, fp
 8014a86:	9209      	str	r2, [sp, #36]	; 0x24
 8014a88:	f89a 3000 	ldrb.w	r3, [sl]
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	f000 80a2 	beq.w	8014bd6 <_vfiprintf_r+0x20e>
 8014a92:	2300      	movs	r3, #0
 8014a94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014a98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014a9c:	f10a 0a01 	add.w	sl, sl, #1
 8014aa0:	9304      	str	r3, [sp, #16]
 8014aa2:	9307      	str	r3, [sp, #28]
 8014aa4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014aa8:	931a      	str	r3, [sp, #104]	; 0x68
 8014aaa:	4654      	mov	r4, sl
 8014aac:	2205      	movs	r2, #5
 8014aae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ab2:	4858      	ldr	r0, [pc, #352]	; (8014c14 <_vfiprintf_r+0x24c>)
 8014ab4:	f7eb fbc4 	bl	8000240 <memchr>
 8014ab8:	9a04      	ldr	r2, [sp, #16]
 8014aba:	b9d8      	cbnz	r0, 8014af4 <_vfiprintf_r+0x12c>
 8014abc:	06d1      	lsls	r1, r2, #27
 8014abe:	bf44      	itt	mi
 8014ac0:	2320      	movmi	r3, #32
 8014ac2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014ac6:	0713      	lsls	r3, r2, #28
 8014ac8:	bf44      	itt	mi
 8014aca:	232b      	movmi	r3, #43	; 0x2b
 8014acc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014ad0:	f89a 3000 	ldrb.w	r3, [sl]
 8014ad4:	2b2a      	cmp	r3, #42	; 0x2a
 8014ad6:	d015      	beq.n	8014b04 <_vfiprintf_r+0x13c>
 8014ad8:	9a07      	ldr	r2, [sp, #28]
 8014ada:	4654      	mov	r4, sl
 8014adc:	2000      	movs	r0, #0
 8014ade:	f04f 0c0a 	mov.w	ip, #10
 8014ae2:	4621      	mov	r1, r4
 8014ae4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014ae8:	3b30      	subs	r3, #48	; 0x30
 8014aea:	2b09      	cmp	r3, #9
 8014aec:	d94e      	bls.n	8014b8c <_vfiprintf_r+0x1c4>
 8014aee:	b1b0      	cbz	r0, 8014b1e <_vfiprintf_r+0x156>
 8014af0:	9207      	str	r2, [sp, #28]
 8014af2:	e014      	b.n	8014b1e <_vfiprintf_r+0x156>
 8014af4:	eba0 0308 	sub.w	r3, r0, r8
 8014af8:	fa09 f303 	lsl.w	r3, r9, r3
 8014afc:	4313      	orrs	r3, r2
 8014afe:	9304      	str	r3, [sp, #16]
 8014b00:	46a2      	mov	sl, r4
 8014b02:	e7d2      	b.n	8014aaa <_vfiprintf_r+0xe2>
 8014b04:	9b03      	ldr	r3, [sp, #12]
 8014b06:	1d19      	adds	r1, r3, #4
 8014b08:	681b      	ldr	r3, [r3, #0]
 8014b0a:	9103      	str	r1, [sp, #12]
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	bfbb      	ittet	lt
 8014b10:	425b      	neglt	r3, r3
 8014b12:	f042 0202 	orrlt.w	r2, r2, #2
 8014b16:	9307      	strge	r3, [sp, #28]
 8014b18:	9307      	strlt	r3, [sp, #28]
 8014b1a:	bfb8      	it	lt
 8014b1c:	9204      	strlt	r2, [sp, #16]
 8014b1e:	7823      	ldrb	r3, [r4, #0]
 8014b20:	2b2e      	cmp	r3, #46	; 0x2e
 8014b22:	d10c      	bne.n	8014b3e <_vfiprintf_r+0x176>
 8014b24:	7863      	ldrb	r3, [r4, #1]
 8014b26:	2b2a      	cmp	r3, #42	; 0x2a
 8014b28:	d135      	bne.n	8014b96 <_vfiprintf_r+0x1ce>
 8014b2a:	9b03      	ldr	r3, [sp, #12]
 8014b2c:	1d1a      	adds	r2, r3, #4
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	9203      	str	r2, [sp, #12]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	bfb8      	it	lt
 8014b36:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014b3a:	3402      	adds	r4, #2
 8014b3c:	9305      	str	r3, [sp, #20]
 8014b3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014c24 <_vfiprintf_r+0x25c>
 8014b42:	7821      	ldrb	r1, [r4, #0]
 8014b44:	2203      	movs	r2, #3
 8014b46:	4650      	mov	r0, sl
 8014b48:	f7eb fb7a 	bl	8000240 <memchr>
 8014b4c:	b140      	cbz	r0, 8014b60 <_vfiprintf_r+0x198>
 8014b4e:	2340      	movs	r3, #64	; 0x40
 8014b50:	eba0 000a 	sub.w	r0, r0, sl
 8014b54:	fa03 f000 	lsl.w	r0, r3, r0
 8014b58:	9b04      	ldr	r3, [sp, #16]
 8014b5a:	4303      	orrs	r3, r0
 8014b5c:	3401      	adds	r4, #1
 8014b5e:	9304      	str	r3, [sp, #16]
 8014b60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b64:	482c      	ldr	r0, [pc, #176]	; (8014c18 <_vfiprintf_r+0x250>)
 8014b66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014b6a:	2206      	movs	r2, #6
 8014b6c:	f7eb fb68 	bl	8000240 <memchr>
 8014b70:	2800      	cmp	r0, #0
 8014b72:	d03f      	beq.n	8014bf4 <_vfiprintf_r+0x22c>
 8014b74:	4b29      	ldr	r3, [pc, #164]	; (8014c1c <_vfiprintf_r+0x254>)
 8014b76:	bb1b      	cbnz	r3, 8014bc0 <_vfiprintf_r+0x1f8>
 8014b78:	9b03      	ldr	r3, [sp, #12]
 8014b7a:	3307      	adds	r3, #7
 8014b7c:	f023 0307 	bic.w	r3, r3, #7
 8014b80:	3308      	adds	r3, #8
 8014b82:	9303      	str	r3, [sp, #12]
 8014b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b86:	443b      	add	r3, r7
 8014b88:	9309      	str	r3, [sp, #36]	; 0x24
 8014b8a:	e767      	b.n	8014a5c <_vfiprintf_r+0x94>
 8014b8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014b90:	460c      	mov	r4, r1
 8014b92:	2001      	movs	r0, #1
 8014b94:	e7a5      	b.n	8014ae2 <_vfiprintf_r+0x11a>
 8014b96:	2300      	movs	r3, #0
 8014b98:	3401      	adds	r4, #1
 8014b9a:	9305      	str	r3, [sp, #20]
 8014b9c:	4619      	mov	r1, r3
 8014b9e:	f04f 0c0a 	mov.w	ip, #10
 8014ba2:	4620      	mov	r0, r4
 8014ba4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014ba8:	3a30      	subs	r2, #48	; 0x30
 8014baa:	2a09      	cmp	r2, #9
 8014bac:	d903      	bls.n	8014bb6 <_vfiprintf_r+0x1ee>
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d0c5      	beq.n	8014b3e <_vfiprintf_r+0x176>
 8014bb2:	9105      	str	r1, [sp, #20]
 8014bb4:	e7c3      	b.n	8014b3e <_vfiprintf_r+0x176>
 8014bb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8014bba:	4604      	mov	r4, r0
 8014bbc:	2301      	movs	r3, #1
 8014bbe:	e7f0      	b.n	8014ba2 <_vfiprintf_r+0x1da>
 8014bc0:	ab03      	add	r3, sp, #12
 8014bc2:	9300      	str	r3, [sp, #0]
 8014bc4:	462a      	mov	r2, r5
 8014bc6:	4b16      	ldr	r3, [pc, #88]	; (8014c20 <_vfiprintf_r+0x258>)
 8014bc8:	a904      	add	r1, sp, #16
 8014bca:	4630      	mov	r0, r6
 8014bcc:	f000 f8cc 	bl	8014d68 <_printf_float>
 8014bd0:	4607      	mov	r7, r0
 8014bd2:	1c78      	adds	r0, r7, #1
 8014bd4:	d1d6      	bne.n	8014b84 <_vfiprintf_r+0x1bc>
 8014bd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014bd8:	07d9      	lsls	r1, r3, #31
 8014bda:	d405      	bmi.n	8014be8 <_vfiprintf_r+0x220>
 8014bdc:	89ab      	ldrh	r3, [r5, #12]
 8014bde:	059a      	lsls	r2, r3, #22
 8014be0:	d402      	bmi.n	8014be8 <_vfiprintf_r+0x220>
 8014be2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014be4:	f7fe ffdb 	bl	8013b9e <__retarget_lock_release_recursive>
 8014be8:	89ab      	ldrh	r3, [r5, #12]
 8014bea:	065b      	lsls	r3, r3, #25
 8014bec:	f53f af12 	bmi.w	8014a14 <_vfiprintf_r+0x4c>
 8014bf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014bf2:	e711      	b.n	8014a18 <_vfiprintf_r+0x50>
 8014bf4:	ab03      	add	r3, sp, #12
 8014bf6:	9300      	str	r3, [sp, #0]
 8014bf8:	462a      	mov	r2, r5
 8014bfa:	4b09      	ldr	r3, [pc, #36]	; (8014c20 <_vfiprintf_r+0x258>)
 8014bfc:	a904      	add	r1, sp, #16
 8014bfe:	4630      	mov	r0, r6
 8014c00:	f000 fb56 	bl	80152b0 <_printf_i>
 8014c04:	e7e4      	b.n	8014bd0 <_vfiprintf_r+0x208>
 8014c06:	bf00      	nop
 8014c08:	08016290 	.word	0x08016290
 8014c0c:	080162b0 	.word	0x080162b0
 8014c10:	08016270 	.word	0x08016270
 8014c14:	0801643c 	.word	0x0801643c
 8014c18:	08016446 	.word	0x08016446
 8014c1c:	08014d69 	.word	0x08014d69
 8014c20:	080149a3 	.word	0x080149a3
 8014c24:	08016442 	.word	0x08016442

08014c28 <__cvt>:
 8014c28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014c2c:	ec55 4b10 	vmov	r4, r5, d0
 8014c30:	2d00      	cmp	r5, #0
 8014c32:	460e      	mov	r6, r1
 8014c34:	4619      	mov	r1, r3
 8014c36:	462b      	mov	r3, r5
 8014c38:	bfbb      	ittet	lt
 8014c3a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8014c3e:	461d      	movlt	r5, r3
 8014c40:	2300      	movge	r3, #0
 8014c42:	232d      	movlt	r3, #45	; 0x2d
 8014c44:	700b      	strb	r3, [r1, #0]
 8014c46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014c48:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014c4c:	4691      	mov	r9, r2
 8014c4e:	f023 0820 	bic.w	r8, r3, #32
 8014c52:	bfbc      	itt	lt
 8014c54:	4622      	movlt	r2, r4
 8014c56:	4614      	movlt	r4, r2
 8014c58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014c5c:	d005      	beq.n	8014c6a <__cvt+0x42>
 8014c5e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8014c62:	d100      	bne.n	8014c66 <__cvt+0x3e>
 8014c64:	3601      	adds	r6, #1
 8014c66:	2102      	movs	r1, #2
 8014c68:	e000      	b.n	8014c6c <__cvt+0x44>
 8014c6a:	2103      	movs	r1, #3
 8014c6c:	ab03      	add	r3, sp, #12
 8014c6e:	9301      	str	r3, [sp, #4]
 8014c70:	ab02      	add	r3, sp, #8
 8014c72:	9300      	str	r3, [sp, #0]
 8014c74:	ec45 4b10 	vmov	d0, r4, r5
 8014c78:	4653      	mov	r3, sl
 8014c7a:	4632      	mov	r2, r6
 8014c7c:	f7fd ff70 	bl	8012b60 <_dtoa_r>
 8014c80:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8014c84:	4607      	mov	r7, r0
 8014c86:	d102      	bne.n	8014c8e <__cvt+0x66>
 8014c88:	f019 0f01 	tst.w	r9, #1
 8014c8c:	d022      	beq.n	8014cd4 <__cvt+0xac>
 8014c8e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014c92:	eb07 0906 	add.w	r9, r7, r6
 8014c96:	d110      	bne.n	8014cba <__cvt+0x92>
 8014c98:	783b      	ldrb	r3, [r7, #0]
 8014c9a:	2b30      	cmp	r3, #48	; 0x30
 8014c9c:	d10a      	bne.n	8014cb4 <__cvt+0x8c>
 8014c9e:	2200      	movs	r2, #0
 8014ca0:	2300      	movs	r3, #0
 8014ca2:	4620      	mov	r0, r4
 8014ca4:	4629      	mov	r1, r5
 8014ca6:	f7eb ff49 	bl	8000b3c <__aeabi_dcmpeq>
 8014caa:	b918      	cbnz	r0, 8014cb4 <__cvt+0x8c>
 8014cac:	f1c6 0601 	rsb	r6, r6, #1
 8014cb0:	f8ca 6000 	str.w	r6, [sl]
 8014cb4:	f8da 3000 	ldr.w	r3, [sl]
 8014cb8:	4499      	add	r9, r3
 8014cba:	2200      	movs	r2, #0
 8014cbc:	2300      	movs	r3, #0
 8014cbe:	4620      	mov	r0, r4
 8014cc0:	4629      	mov	r1, r5
 8014cc2:	f7eb ff3b 	bl	8000b3c <__aeabi_dcmpeq>
 8014cc6:	b108      	cbz	r0, 8014ccc <__cvt+0xa4>
 8014cc8:	f8cd 900c 	str.w	r9, [sp, #12]
 8014ccc:	2230      	movs	r2, #48	; 0x30
 8014cce:	9b03      	ldr	r3, [sp, #12]
 8014cd0:	454b      	cmp	r3, r9
 8014cd2:	d307      	bcc.n	8014ce4 <__cvt+0xbc>
 8014cd4:	9b03      	ldr	r3, [sp, #12]
 8014cd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014cd8:	1bdb      	subs	r3, r3, r7
 8014cda:	4638      	mov	r0, r7
 8014cdc:	6013      	str	r3, [r2, #0]
 8014cde:	b004      	add	sp, #16
 8014ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ce4:	1c59      	adds	r1, r3, #1
 8014ce6:	9103      	str	r1, [sp, #12]
 8014ce8:	701a      	strb	r2, [r3, #0]
 8014cea:	e7f0      	b.n	8014cce <__cvt+0xa6>

08014cec <__exponent>:
 8014cec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014cee:	4603      	mov	r3, r0
 8014cf0:	2900      	cmp	r1, #0
 8014cf2:	bfb8      	it	lt
 8014cf4:	4249      	neglt	r1, r1
 8014cf6:	f803 2b02 	strb.w	r2, [r3], #2
 8014cfa:	bfb4      	ite	lt
 8014cfc:	222d      	movlt	r2, #45	; 0x2d
 8014cfe:	222b      	movge	r2, #43	; 0x2b
 8014d00:	2909      	cmp	r1, #9
 8014d02:	7042      	strb	r2, [r0, #1]
 8014d04:	dd2a      	ble.n	8014d5c <__exponent+0x70>
 8014d06:	f10d 0407 	add.w	r4, sp, #7
 8014d0a:	46a4      	mov	ip, r4
 8014d0c:	270a      	movs	r7, #10
 8014d0e:	46a6      	mov	lr, r4
 8014d10:	460a      	mov	r2, r1
 8014d12:	fb91 f6f7 	sdiv	r6, r1, r7
 8014d16:	fb07 1516 	mls	r5, r7, r6, r1
 8014d1a:	3530      	adds	r5, #48	; 0x30
 8014d1c:	2a63      	cmp	r2, #99	; 0x63
 8014d1e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8014d22:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8014d26:	4631      	mov	r1, r6
 8014d28:	dcf1      	bgt.n	8014d0e <__exponent+0x22>
 8014d2a:	3130      	adds	r1, #48	; 0x30
 8014d2c:	f1ae 0502 	sub.w	r5, lr, #2
 8014d30:	f804 1c01 	strb.w	r1, [r4, #-1]
 8014d34:	1c44      	adds	r4, r0, #1
 8014d36:	4629      	mov	r1, r5
 8014d38:	4561      	cmp	r1, ip
 8014d3a:	d30a      	bcc.n	8014d52 <__exponent+0x66>
 8014d3c:	f10d 0209 	add.w	r2, sp, #9
 8014d40:	eba2 020e 	sub.w	r2, r2, lr
 8014d44:	4565      	cmp	r5, ip
 8014d46:	bf88      	it	hi
 8014d48:	2200      	movhi	r2, #0
 8014d4a:	4413      	add	r3, r2
 8014d4c:	1a18      	subs	r0, r3, r0
 8014d4e:	b003      	add	sp, #12
 8014d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014d56:	f804 2f01 	strb.w	r2, [r4, #1]!
 8014d5a:	e7ed      	b.n	8014d38 <__exponent+0x4c>
 8014d5c:	2330      	movs	r3, #48	; 0x30
 8014d5e:	3130      	adds	r1, #48	; 0x30
 8014d60:	7083      	strb	r3, [r0, #2]
 8014d62:	70c1      	strb	r1, [r0, #3]
 8014d64:	1d03      	adds	r3, r0, #4
 8014d66:	e7f1      	b.n	8014d4c <__exponent+0x60>

08014d68 <_printf_float>:
 8014d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d6c:	ed2d 8b02 	vpush	{d8}
 8014d70:	b08d      	sub	sp, #52	; 0x34
 8014d72:	460c      	mov	r4, r1
 8014d74:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014d78:	4616      	mov	r6, r2
 8014d7a:	461f      	mov	r7, r3
 8014d7c:	4605      	mov	r5, r0
 8014d7e:	f7fe ff07 	bl	8013b90 <_localeconv_r>
 8014d82:	f8d0 a000 	ldr.w	sl, [r0]
 8014d86:	4650      	mov	r0, sl
 8014d88:	f7eb faaa 	bl	80002e0 <strlen>
 8014d8c:	2300      	movs	r3, #0
 8014d8e:	930a      	str	r3, [sp, #40]	; 0x28
 8014d90:	6823      	ldr	r3, [r4, #0]
 8014d92:	9305      	str	r3, [sp, #20]
 8014d94:	f8d8 3000 	ldr.w	r3, [r8]
 8014d98:	f894 b018 	ldrb.w	fp, [r4, #24]
 8014d9c:	3307      	adds	r3, #7
 8014d9e:	f023 0307 	bic.w	r3, r3, #7
 8014da2:	f103 0208 	add.w	r2, r3, #8
 8014da6:	f8c8 2000 	str.w	r2, [r8]
 8014daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014db2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014db6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014dba:	9307      	str	r3, [sp, #28]
 8014dbc:	f8cd 8018 	str.w	r8, [sp, #24]
 8014dc0:	ee08 0a10 	vmov	s16, r0
 8014dc4:	4b9f      	ldr	r3, [pc, #636]	; (8015044 <_printf_float+0x2dc>)
 8014dc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014dca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014dce:	f7eb fee7 	bl	8000ba0 <__aeabi_dcmpun>
 8014dd2:	bb88      	cbnz	r0, 8014e38 <_printf_float+0xd0>
 8014dd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014dd8:	4b9a      	ldr	r3, [pc, #616]	; (8015044 <_printf_float+0x2dc>)
 8014dda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014dde:	f7eb fec1 	bl	8000b64 <__aeabi_dcmple>
 8014de2:	bb48      	cbnz	r0, 8014e38 <_printf_float+0xd0>
 8014de4:	2200      	movs	r2, #0
 8014de6:	2300      	movs	r3, #0
 8014de8:	4640      	mov	r0, r8
 8014dea:	4649      	mov	r1, r9
 8014dec:	f7eb feb0 	bl	8000b50 <__aeabi_dcmplt>
 8014df0:	b110      	cbz	r0, 8014df8 <_printf_float+0x90>
 8014df2:	232d      	movs	r3, #45	; 0x2d
 8014df4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014df8:	4b93      	ldr	r3, [pc, #588]	; (8015048 <_printf_float+0x2e0>)
 8014dfa:	4894      	ldr	r0, [pc, #592]	; (801504c <_printf_float+0x2e4>)
 8014dfc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8014e00:	bf94      	ite	ls
 8014e02:	4698      	movls	r8, r3
 8014e04:	4680      	movhi	r8, r0
 8014e06:	2303      	movs	r3, #3
 8014e08:	6123      	str	r3, [r4, #16]
 8014e0a:	9b05      	ldr	r3, [sp, #20]
 8014e0c:	f023 0204 	bic.w	r2, r3, #4
 8014e10:	6022      	str	r2, [r4, #0]
 8014e12:	f04f 0900 	mov.w	r9, #0
 8014e16:	9700      	str	r7, [sp, #0]
 8014e18:	4633      	mov	r3, r6
 8014e1a:	aa0b      	add	r2, sp, #44	; 0x2c
 8014e1c:	4621      	mov	r1, r4
 8014e1e:	4628      	mov	r0, r5
 8014e20:	f000 f9d8 	bl	80151d4 <_printf_common>
 8014e24:	3001      	adds	r0, #1
 8014e26:	f040 8090 	bne.w	8014f4a <_printf_float+0x1e2>
 8014e2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014e2e:	b00d      	add	sp, #52	; 0x34
 8014e30:	ecbd 8b02 	vpop	{d8}
 8014e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e38:	4642      	mov	r2, r8
 8014e3a:	464b      	mov	r3, r9
 8014e3c:	4640      	mov	r0, r8
 8014e3e:	4649      	mov	r1, r9
 8014e40:	f7eb feae 	bl	8000ba0 <__aeabi_dcmpun>
 8014e44:	b140      	cbz	r0, 8014e58 <_printf_float+0xf0>
 8014e46:	464b      	mov	r3, r9
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	bfbc      	itt	lt
 8014e4c:	232d      	movlt	r3, #45	; 0x2d
 8014e4e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014e52:	487f      	ldr	r0, [pc, #508]	; (8015050 <_printf_float+0x2e8>)
 8014e54:	4b7f      	ldr	r3, [pc, #508]	; (8015054 <_printf_float+0x2ec>)
 8014e56:	e7d1      	b.n	8014dfc <_printf_float+0x94>
 8014e58:	6863      	ldr	r3, [r4, #4]
 8014e5a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8014e5e:	9206      	str	r2, [sp, #24]
 8014e60:	1c5a      	adds	r2, r3, #1
 8014e62:	d13f      	bne.n	8014ee4 <_printf_float+0x17c>
 8014e64:	2306      	movs	r3, #6
 8014e66:	6063      	str	r3, [r4, #4]
 8014e68:	9b05      	ldr	r3, [sp, #20]
 8014e6a:	6861      	ldr	r1, [r4, #4]
 8014e6c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8014e70:	2300      	movs	r3, #0
 8014e72:	9303      	str	r3, [sp, #12]
 8014e74:	ab0a      	add	r3, sp, #40	; 0x28
 8014e76:	e9cd b301 	strd	fp, r3, [sp, #4]
 8014e7a:	ab09      	add	r3, sp, #36	; 0x24
 8014e7c:	ec49 8b10 	vmov	d0, r8, r9
 8014e80:	9300      	str	r3, [sp, #0]
 8014e82:	6022      	str	r2, [r4, #0]
 8014e84:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014e88:	4628      	mov	r0, r5
 8014e8a:	f7ff fecd 	bl	8014c28 <__cvt>
 8014e8e:	9b06      	ldr	r3, [sp, #24]
 8014e90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014e92:	2b47      	cmp	r3, #71	; 0x47
 8014e94:	4680      	mov	r8, r0
 8014e96:	d108      	bne.n	8014eaa <_printf_float+0x142>
 8014e98:	1cc8      	adds	r0, r1, #3
 8014e9a:	db02      	blt.n	8014ea2 <_printf_float+0x13a>
 8014e9c:	6863      	ldr	r3, [r4, #4]
 8014e9e:	4299      	cmp	r1, r3
 8014ea0:	dd41      	ble.n	8014f26 <_printf_float+0x1be>
 8014ea2:	f1ab 0b02 	sub.w	fp, fp, #2
 8014ea6:	fa5f fb8b 	uxtb.w	fp, fp
 8014eaa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014eae:	d820      	bhi.n	8014ef2 <_printf_float+0x18a>
 8014eb0:	3901      	subs	r1, #1
 8014eb2:	465a      	mov	r2, fp
 8014eb4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014eb8:	9109      	str	r1, [sp, #36]	; 0x24
 8014eba:	f7ff ff17 	bl	8014cec <__exponent>
 8014ebe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014ec0:	1813      	adds	r3, r2, r0
 8014ec2:	2a01      	cmp	r2, #1
 8014ec4:	4681      	mov	r9, r0
 8014ec6:	6123      	str	r3, [r4, #16]
 8014ec8:	dc02      	bgt.n	8014ed0 <_printf_float+0x168>
 8014eca:	6822      	ldr	r2, [r4, #0]
 8014ecc:	07d2      	lsls	r2, r2, #31
 8014ece:	d501      	bpl.n	8014ed4 <_printf_float+0x16c>
 8014ed0:	3301      	adds	r3, #1
 8014ed2:	6123      	str	r3, [r4, #16]
 8014ed4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d09c      	beq.n	8014e16 <_printf_float+0xae>
 8014edc:	232d      	movs	r3, #45	; 0x2d
 8014ede:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014ee2:	e798      	b.n	8014e16 <_printf_float+0xae>
 8014ee4:	9a06      	ldr	r2, [sp, #24]
 8014ee6:	2a47      	cmp	r2, #71	; 0x47
 8014ee8:	d1be      	bne.n	8014e68 <_printf_float+0x100>
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d1bc      	bne.n	8014e68 <_printf_float+0x100>
 8014eee:	2301      	movs	r3, #1
 8014ef0:	e7b9      	b.n	8014e66 <_printf_float+0xfe>
 8014ef2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8014ef6:	d118      	bne.n	8014f2a <_printf_float+0x1c2>
 8014ef8:	2900      	cmp	r1, #0
 8014efa:	6863      	ldr	r3, [r4, #4]
 8014efc:	dd0b      	ble.n	8014f16 <_printf_float+0x1ae>
 8014efe:	6121      	str	r1, [r4, #16]
 8014f00:	b913      	cbnz	r3, 8014f08 <_printf_float+0x1a0>
 8014f02:	6822      	ldr	r2, [r4, #0]
 8014f04:	07d0      	lsls	r0, r2, #31
 8014f06:	d502      	bpl.n	8014f0e <_printf_float+0x1a6>
 8014f08:	3301      	adds	r3, #1
 8014f0a:	440b      	add	r3, r1
 8014f0c:	6123      	str	r3, [r4, #16]
 8014f0e:	65a1      	str	r1, [r4, #88]	; 0x58
 8014f10:	f04f 0900 	mov.w	r9, #0
 8014f14:	e7de      	b.n	8014ed4 <_printf_float+0x16c>
 8014f16:	b913      	cbnz	r3, 8014f1e <_printf_float+0x1b6>
 8014f18:	6822      	ldr	r2, [r4, #0]
 8014f1a:	07d2      	lsls	r2, r2, #31
 8014f1c:	d501      	bpl.n	8014f22 <_printf_float+0x1ba>
 8014f1e:	3302      	adds	r3, #2
 8014f20:	e7f4      	b.n	8014f0c <_printf_float+0x1a4>
 8014f22:	2301      	movs	r3, #1
 8014f24:	e7f2      	b.n	8014f0c <_printf_float+0x1a4>
 8014f26:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8014f2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f2c:	4299      	cmp	r1, r3
 8014f2e:	db05      	blt.n	8014f3c <_printf_float+0x1d4>
 8014f30:	6823      	ldr	r3, [r4, #0]
 8014f32:	6121      	str	r1, [r4, #16]
 8014f34:	07d8      	lsls	r0, r3, #31
 8014f36:	d5ea      	bpl.n	8014f0e <_printf_float+0x1a6>
 8014f38:	1c4b      	adds	r3, r1, #1
 8014f3a:	e7e7      	b.n	8014f0c <_printf_float+0x1a4>
 8014f3c:	2900      	cmp	r1, #0
 8014f3e:	bfd4      	ite	le
 8014f40:	f1c1 0202 	rsble	r2, r1, #2
 8014f44:	2201      	movgt	r2, #1
 8014f46:	4413      	add	r3, r2
 8014f48:	e7e0      	b.n	8014f0c <_printf_float+0x1a4>
 8014f4a:	6823      	ldr	r3, [r4, #0]
 8014f4c:	055a      	lsls	r2, r3, #21
 8014f4e:	d407      	bmi.n	8014f60 <_printf_float+0x1f8>
 8014f50:	6923      	ldr	r3, [r4, #16]
 8014f52:	4642      	mov	r2, r8
 8014f54:	4631      	mov	r1, r6
 8014f56:	4628      	mov	r0, r5
 8014f58:	47b8      	blx	r7
 8014f5a:	3001      	adds	r0, #1
 8014f5c:	d12c      	bne.n	8014fb8 <_printf_float+0x250>
 8014f5e:	e764      	b.n	8014e2a <_printf_float+0xc2>
 8014f60:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014f64:	f240 80e0 	bls.w	8015128 <_printf_float+0x3c0>
 8014f68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014f6c:	2200      	movs	r2, #0
 8014f6e:	2300      	movs	r3, #0
 8014f70:	f7eb fde4 	bl	8000b3c <__aeabi_dcmpeq>
 8014f74:	2800      	cmp	r0, #0
 8014f76:	d034      	beq.n	8014fe2 <_printf_float+0x27a>
 8014f78:	4a37      	ldr	r2, [pc, #220]	; (8015058 <_printf_float+0x2f0>)
 8014f7a:	2301      	movs	r3, #1
 8014f7c:	4631      	mov	r1, r6
 8014f7e:	4628      	mov	r0, r5
 8014f80:	47b8      	blx	r7
 8014f82:	3001      	adds	r0, #1
 8014f84:	f43f af51 	beq.w	8014e2a <_printf_float+0xc2>
 8014f88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014f8c:	429a      	cmp	r2, r3
 8014f8e:	db02      	blt.n	8014f96 <_printf_float+0x22e>
 8014f90:	6823      	ldr	r3, [r4, #0]
 8014f92:	07d8      	lsls	r0, r3, #31
 8014f94:	d510      	bpl.n	8014fb8 <_printf_float+0x250>
 8014f96:	ee18 3a10 	vmov	r3, s16
 8014f9a:	4652      	mov	r2, sl
 8014f9c:	4631      	mov	r1, r6
 8014f9e:	4628      	mov	r0, r5
 8014fa0:	47b8      	blx	r7
 8014fa2:	3001      	adds	r0, #1
 8014fa4:	f43f af41 	beq.w	8014e2a <_printf_float+0xc2>
 8014fa8:	f04f 0800 	mov.w	r8, #0
 8014fac:	f104 091a 	add.w	r9, r4, #26
 8014fb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014fb2:	3b01      	subs	r3, #1
 8014fb4:	4543      	cmp	r3, r8
 8014fb6:	dc09      	bgt.n	8014fcc <_printf_float+0x264>
 8014fb8:	6823      	ldr	r3, [r4, #0]
 8014fba:	079b      	lsls	r3, r3, #30
 8014fbc:	f100 8105 	bmi.w	80151ca <_printf_float+0x462>
 8014fc0:	68e0      	ldr	r0, [r4, #12]
 8014fc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014fc4:	4298      	cmp	r0, r3
 8014fc6:	bfb8      	it	lt
 8014fc8:	4618      	movlt	r0, r3
 8014fca:	e730      	b.n	8014e2e <_printf_float+0xc6>
 8014fcc:	2301      	movs	r3, #1
 8014fce:	464a      	mov	r2, r9
 8014fd0:	4631      	mov	r1, r6
 8014fd2:	4628      	mov	r0, r5
 8014fd4:	47b8      	blx	r7
 8014fd6:	3001      	adds	r0, #1
 8014fd8:	f43f af27 	beq.w	8014e2a <_printf_float+0xc2>
 8014fdc:	f108 0801 	add.w	r8, r8, #1
 8014fe0:	e7e6      	b.n	8014fb0 <_printf_float+0x248>
 8014fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	dc39      	bgt.n	801505c <_printf_float+0x2f4>
 8014fe8:	4a1b      	ldr	r2, [pc, #108]	; (8015058 <_printf_float+0x2f0>)
 8014fea:	2301      	movs	r3, #1
 8014fec:	4631      	mov	r1, r6
 8014fee:	4628      	mov	r0, r5
 8014ff0:	47b8      	blx	r7
 8014ff2:	3001      	adds	r0, #1
 8014ff4:	f43f af19 	beq.w	8014e2a <_printf_float+0xc2>
 8014ff8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014ffc:	4313      	orrs	r3, r2
 8014ffe:	d102      	bne.n	8015006 <_printf_float+0x29e>
 8015000:	6823      	ldr	r3, [r4, #0]
 8015002:	07d9      	lsls	r1, r3, #31
 8015004:	d5d8      	bpl.n	8014fb8 <_printf_float+0x250>
 8015006:	ee18 3a10 	vmov	r3, s16
 801500a:	4652      	mov	r2, sl
 801500c:	4631      	mov	r1, r6
 801500e:	4628      	mov	r0, r5
 8015010:	47b8      	blx	r7
 8015012:	3001      	adds	r0, #1
 8015014:	f43f af09 	beq.w	8014e2a <_printf_float+0xc2>
 8015018:	f04f 0900 	mov.w	r9, #0
 801501c:	f104 0a1a 	add.w	sl, r4, #26
 8015020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015022:	425b      	negs	r3, r3
 8015024:	454b      	cmp	r3, r9
 8015026:	dc01      	bgt.n	801502c <_printf_float+0x2c4>
 8015028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801502a:	e792      	b.n	8014f52 <_printf_float+0x1ea>
 801502c:	2301      	movs	r3, #1
 801502e:	4652      	mov	r2, sl
 8015030:	4631      	mov	r1, r6
 8015032:	4628      	mov	r0, r5
 8015034:	47b8      	blx	r7
 8015036:	3001      	adds	r0, #1
 8015038:	f43f aef7 	beq.w	8014e2a <_printf_float+0xc2>
 801503c:	f109 0901 	add.w	r9, r9, #1
 8015040:	e7ee      	b.n	8015020 <_printf_float+0x2b8>
 8015042:	bf00      	nop
 8015044:	7fefffff 	.word	0x7fefffff
 8015048:	0801644d 	.word	0x0801644d
 801504c:	08016451 	.word	0x08016451
 8015050:	08016459 	.word	0x08016459
 8015054:	08016455 	.word	0x08016455
 8015058:	080161e8 	.word	0x080161e8
 801505c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801505e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015060:	429a      	cmp	r2, r3
 8015062:	bfa8      	it	ge
 8015064:	461a      	movge	r2, r3
 8015066:	2a00      	cmp	r2, #0
 8015068:	4691      	mov	r9, r2
 801506a:	dc37      	bgt.n	80150dc <_printf_float+0x374>
 801506c:	f04f 0b00 	mov.w	fp, #0
 8015070:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015074:	f104 021a 	add.w	r2, r4, #26
 8015078:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801507a:	9305      	str	r3, [sp, #20]
 801507c:	eba3 0309 	sub.w	r3, r3, r9
 8015080:	455b      	cmp	r3, fp
 8015082:	dc33      	bgt.n	80150ec <_printf_float+0x384>
 8015084:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015088:	429a      	cmp	r2, r3
 801508a:	db3b      	blt.n	8015104 <_printf_float+0x39c>
 801508c:	6823      	ldr	r3, [r4, #0]
 801508e:	07da      	lsls	r2, r3, #31
 8015090:	d438      	bmi.n	8015104 <_printf_float+0x39c>
 8015092:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015094:	9a05      	ldr	r2, [sp, #20]
 8015096:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015098:	1a9a      	subs	r2, r3, r2
 801509a:	eba3 0901 	sub.w	r9, r3, r1
 801509e:	4591      	cmp	r9, r2
 80150a0:	bfa8      	it	ge
 80150a2:	4691      	movge	r9, r2
 80150a4:	f1b9 0f00 	cmp.w	r9, #0
 80150a8:	dc35      	bgt.n	8015116 <_printf_float+0x3ae>
 80150aa:	f04f 0800 	mov.w	r8, #0
 80150ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80150b2:	f104 0a1a 	add.w	sl, r4, #26
 80150b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80150ba:	1a9b      	subs	r3, r3, r2
 80150bc:	eba3 0309 	sub.w	r3, r3, r9
 80150c0:	4543      	cmp	r3, r8
 80150c2:	f77f af79 	ble.w	8014fb8 <_printf_float+0x250>
 80150c6:	2301      	movs	r3, #1
 80150c8:	4652      	mov	r2, sl
 80150ca:	4631      	mov	r1, r6
 80150cc:	4628      	mov	r0, r5
 80150ce:	47b8      	blx	r7
 80150d0:	3001      	adds	r0, #1
 80150d2:	f43f aeaa 	beq.w	8014e2a <_printf_float+0xc2>
 80150d6:	f108 0801 	add.w	r8, r8, #1
 80150da:	e7ec      	b.n	80150b6 <_printf_float+0x34e>
 80150dc:	4613      	mov	r3, r2
 80150de:	4631      	mov	r1, r6
 80150e0:	4642      	mov	r2, r8
 80150e2:	4628      	mov	r0, r5
 80150e4:	47b8      	blx	r7
 80150e6:	3001      	adds	r0, #1
 80150e8:	d1c0      	bne.n	801506c <_printf_float+0x304>
 80150ea:	e69e      	b.n	8014e2a <_printf_float+0xc2>
 80150ec:	2301      	movs	r3, #1
 80150ee:	4631      	mov	r1, r6
 80150f0:	4628      	mov	r0, r5
 80150f2:	9205      	str	r2, [sp, #20]
 80150f4:	47b8      	blx	r7
 80150f6:	3001      	adds	r0, #1
 80150f8:	f43f ae97 	beq.w	8014e2a <_printf_float+0xc2>
 80150fc:	9a05      	ldr	r2, [sp, #20]
 80150fe:	f10b 0b01 	add.w	fp, fp, #1
 8015102:	e7b9      	b.n	8015078 <_printf_float+0x310>
 8015104:	ee18 3a10 	vmov	r3, s16
 8015108:	4652      	mov	r2, sl
 801510a:	4631      	mov	r1, r6
 801510c:	4628      	mov	r0, r5
 801510e:	47b8      	blx	r7
 8015110:	3001      	adds	r0, #1
 8015112:	d1be      	bne.n	8015092 <_printf_float+0x32a>
 8015114:	e689      	b.n	8014e2a <_printf_float+0xc2>
 8015116:	9a05      	ldr	r2, [sp, #20]
 8015118:	464b      	mov	r3, r9
 801511a:	4442      	add	r2, r8
 801511c:	4631      	mov	r1, r6
 801511e:	4628      	mov	r0, r5
 8015120:	47b8      	blx	r7
 8015122:	3001      	adds	r0, #1
 8015124:	d1c1      	bne.n	80150aa <_printf_float+0x342>
 8015126:	e680      	b.n	8014e2a <_printf_float+0xc2>
 8015128:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801512a:	2a01      	cmp	r2, #1
 801512c:	dc01      	bgt.n	8015132 <_printf_float+0x3ca>
 801512e:	07db      	lsls	r3, r3, #31
 8015130:	d538      	bpl.n	80151a4 <_printf_float+0x43c>
 8015132:	2301      	movs	r3, #1
 8015134:	4642      	mov	r2, r8
 8015136:	4631      	mov	r1, r6
 8015138:	4628      	mov	r0, r5
 801513a:	47b8      	blx	r7
 801513c:	3001      	adds	r0, #1
 801513e:	f43f ae74 	beq.w	8014e2a <_printf_float+0xc2>
 8015142:	ee18 3a10 	vmov	r3, s16
 8015146:	4652      	mov	r2, sl
 8015148:	4631      	mov	r1, r6
 801514a:	4628      	mov	r0, r5
 801514c:	47b8      	blx	r7
 801514e:	3001      	adds	r0, #1
 8015150:	f43f ae6b 	beq.w	8014e2a <_printf_float+0xc2>
 8015154:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015158:	2200      	movs	r2, #0
 801515a:	2300      	movs	r3, #0
 801515c:	f7eb fcee 	bl	8000b3c <__aeabi_dcmpeq>
 8015160:	b9d8      	cbnz	r0, 801519a <_printf_float+0x432>
 8015162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015164:	f108 0201 	add.w	r2, r8, #1
 8015168:	3b01      	subs	r3, #1
 801516a:	4631      	mov	r1, r6
 801516c:	4628      	mov	r0, r5
 801516e:	47b8      	blx	r7
 8015170:	3001      	adds	r0, #1
 8015172:	d10e      	bne.n	8015192 <_printf_float+0x42a>
 8015174:	e659      	b.n	8014e2a <_printf_float+0xc2>
 8015176:	2301      	movs	r3, #1
 8015178:	4652      	mov	r2, sl
 801517a:	4631      	mov	r1, r6
 801517c:	4628      	mov	r0, r5
 801517e:	47b8      	blx	r7
 8015180:	3001      	adds	r0, #1
 8015182:	f43f ae52 	beq.w	8014e2a <_printf_float+0xc2>
 8015186:	f108 0801 	add.w	r8, r8, #1
 801518a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801518c:	3b01      	subs	r3, #1
 801518e:	4543      	cmp	r3, r8
 8015190:	dcf1      	bgt.n	8015176 <_printf_float+0x40e>
 8015192:	464b      	mov	r3, r9
 8015194:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015198:	e6dc      	b.n	8014f54 <_printf_float+0x1ec>
 801519a:	f04f 0800 	mov.w	r8, #0
 801519e:	f104 0a1a 	add.w	sl, r4, #26
 80151a2:	e7f2      	b.n	801518a <_printf_float+0x422>
 80151a4:	2301      	movs	r3, #1
 80151a6:	4642      	mov	r2, r8
 80151a8:	e7df      	b.n	801516a <_printf_float+0x402>
 80151aa:	2301      	movs	r3, #1
 80151ac:	464a      	mov	r2, r9
 80151ae:	4631      	mov	r1, r6
 80151b0:	4628      	mov	r0, r5
 80151b2:	47b8      	blx	r7
 80151b4:	3001      	adds	r0, #1
 80151b6:	f43f ae38 	beq.w	8014e2a <_printf_float+0xc2>
 80151ba:	f108 0801 	add.w	r8, r8, #1
 80151be:	68e3      	ldr	r3, [r4, #12]
 80151c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80151c2:	1a5b      	subs	r3, r3, r1
 80151c4:	4543      	cmp	r3, r8
 80151c6:	dcf0      	bgt.n	80151aa <_printf_float+0x442>
 80151c8:	e6fa      	b.n	8014fc0 <_printf_float+0x258>
 80151ca:	f04f 0800 	mov.w	r8, #0
 80151ce:	f104 0919 	add.w	r9, r4, #25
 80151d2:	e7f4      	b.n	80151be <_printf_float+0x456>

080151d4 <_printf_common>:
 80151d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80151d8:	4616      	mov	r6, r2
 80151da:	4699      	mov	r9, r3
 80151dc:	688a      	ldr	r2, [r1, #8]
 80151de:	690b      	ldr	r3, [r1, #16]
 80151e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80151e4:	4293      	cmp	r3, r2
 80151e6:	bfb8      	it	lt
 80151e8:	4613      	movlt	r3, r2
 80151ea:	6033      	str	r3, [r6, #0]
 80151ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80151f0:	4607      	mov	r7, r0
 80151f2:	460c      	mov	r4, r1
 80151f4:	b10a      	cbz	r2, 80151fa <_printf_common+0x26>
 80151f6:	3301      	adds	r3, #1
 80151f8:	6033      	str	r3, [r6, #0]
 80151fa:	6823      	ldr	r3, [r4, #0]
 80151fc:	0699      	lsls	r1, r3, #26
 80151fe:	bf42      	ittt	mi
 8015200:	6833      	ldrmi	r3, [r6, #0]
 8015202:	3302      	addmi	r3, #2
 8015204:	6033      	strmi	r3, [r6, #0]
 8015206:	6825      	ldr	r5, [r4, #0]
 8015208:	f015 0506 	ands.w	r5, r5, #6
 801520c:	d106      	bne.n	801521c <_printf_common+0x48>
 801520e:	f104 0a19 	add.w	sl, r4, #25
 8015212:	68e3      	ldr	r3, [r4, #12]
 8015214:	6832      	ldr	r2, [r6, #0]
 8015216:	1a9b      	subs	r3, r3, r2
 8015218:	42ab      	cmp	r3, r5
 801521a:	dc26      	bgt.n	801526a <_printf_common+0x96>
 801521c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015220:	1e13      	subs	r3, r2, #0
 8015222:	6822      	ldr	r2, [r4, #0]
 8015224:	bf18      	it	ne
 8015226:	2301      	movne	r3, #1
 8015228:	0692      	lsls	r2, r2, #26
 801522a:	d42b      	bmi.n	8015284 <_printf_common+0xb0>
 801522c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015230:	4649      	mov	r1, r9
 8015232:	4638      	mov	r0, r7
 8015234:	47c0      	blx	r8
 8015236:	3001      	adds	r0, #1
 8015238:	d01e      	beq.n	8015278 <_printf_common+0xa4>
 801523a:	6823      	ldr	r3, [r4, #0]
 801523c:	68e5      	ldr	r5, [r4, #12]
 801523e:	6832      	ldr	r2, [r6, #0]
 8015240:	f003 0306 	and.w	r3, r3, #6
 8015244:	2b04      	cmp	r3, #4
 8015246:	bf08      	it	eq
 8015248:	1aad      	subeq	r5, r5, r2
 801524a:	68a3      	ldr	r3, [r4, #8]
 801524c:	6922      	ldr	r2, [r4, #16]
 801524e:	bf0c      	ite	eq
 8015250:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015254:	2500      	movne	r5, #0
 8015256:	4293      	cmp	r3, r2
 8015258:	bfc4      	itt	gt
 801525a:	1a9b      	subgt	r3, r3, r2
 801525c:	18ed      	addgt	r5, r5, r3
 801525e:	2600      	movs	r6, #0
 8015260:	341a      	adds	r4, #26
 8015262:	42b5      	cmp	r5, r6
 8015264:	d11a      	bne.n	801529c <_printf_common+0xc8>
 8015266:	2000      	movs	r0, #0
 8015268:	e008      	b.n	801527c <_printf_common+0xa8>
 801526a:	2301      	movs	r3, #1
 801526c:	4652      	mov	r2, sl
 801526e:	4649      	mov	r1, r9
 8015270:	4638      	mov	r0, r7
 8015272:	47c0      	blx	r8
 8015274:	3001      	adds	r0, #1
 8015276:	d103      	bne.n	8015280 <_printf_common+0xac>
 8015278:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801527c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015280:	3501      	adds	r5, #1
 8015282:	e7c6      	b.n	8015212 <_printf_common+0x3e>
 8015284:	18e1      	adds	r1, r4, r3
 8015286:	1c5a      	adds	r2, r3, #1
 8015288:	2030      	movs	r0, #48	; 0x30
 801528a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801528e:	4422      	add	r2, r4
 8015290:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015294:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015298:	3302      	adds	r3, #2
 801529a:	e7c7      	b.n	801522c <_printf_common+0x58>
 801529c:	2301      	movs	r3, #1
 801529e:	4622      	mov	r2, r4
 80152a0:	4649      	mov	r1, r9
 80152a2:	4638      	mov	r0, r7
 80152a4:	47c0      	blx	r8
 80152a6:	3001      	adds	r0, #1
 80152a8:	d0e6      	beq.n	8015278 <_printf_common+0xa4>
 80152aa:	3601      	adds	r6, #1
 80152ac:	e7d9      	b.n	8015262 <_printf_common+0x8e>
	...

080152b0 <_printf_i>:
 80152b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80152b4:	7e0f      	ldrb	r7, [r1, #24]
 80152b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80152b8:	2f78      	cmp	r7, #120	; 0x78
 80152ba:	4691      	mov	r9, r2
 80152bc:	4680      	mov	r8, r0
 80152be:	460c      	mov	r4, r1
 80152c0:	469a      	mov	sl, r3
 80152c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80152c6:	d807      	bhi.n	80152d8 <_printf_i+0x28>
 80152c8:	2f62      	cmp	r7, #98	; 0x62
 80152ca:	d80a      	bhi.n	80152e2 <_printf_i+0x32>
 80152cc:	2f00      	cmp	r7, #0
 80152ce:	f000 80d8 	beq.w	8015482 <_printf_i+0x1d2>
 80152d2:	2f58      	cmp	r7, #88	; 0x58
 80152d4:	f000 80a3 	beq.w	801541e <_printf_i+0x16e>
 80152d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80152dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80152e0:	e03a      	b.n	8015358 <_printf_i+0xa8>
 80152e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80152e6:	2b15      	cmp	r3, #21
 80152e8:	d8f6      	bhi.n	80152d8 <_printf_i+0x28>
 80152ea:	a101      	add	r1, pc, #4	; (adr r1, 80152f0 <_printf_i+0x40>)
 80152ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80152f0:	08015349 	.word	0x08015349
 80152f4:	0801535d 	.word	0x0801535d
 80152f8:	080152d9 	.word	0x080152d9
 80152fc:	080152d9 	.word	0x080152d9
 8015300:	080152d9 	.word	0x080152d9
 8015304:	080152d9 	.word	0x080152d9
 8015308:	0801535d 	.word	0x0801535d
 801530c:	080152d9 	.word	0x080152d9
 8015310:	080152d9 	.word	0x080152d9
 8015314:	080152d9 	.word	0x080152d9
 8015318:	080152d9 	.word	0x080152d9
 801531c:	08015469 	.word	0x08015469
 8015320:	0801538d 	.word	0x0801538d
 8015324:	0801544b 	.word	0x0801544b
 8015328:	080152d9 	.word	0x080152d9
 801532c:	080152d9 	.word	0x080152d9
 8015330:	0801548b 	.word	0x0801548b
 8015334:	080152d9 	.word	0x080152d9
 8015338:	0801538d 	.word	0x0801538d
 801533c:	080152d9 	.word	0x080152d9
 8015340:	080152d9 	.word	0x080152d9
 8015344:	08015453 	.word	0x08015453
 8015348:	682b      	ldr	r3, [r5, #0]
 801534a:	1d1a      	adds	r2, r3, #4
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	602a      	str	r2, [r5, #0]
 8015350:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015354:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015358:	2301      	movs	r3, #1
 801535a:	e0a3      	b.n	80154a4 <_printf_i+0x1f4>
 801535c:	6820      	ldr	r0, [r4, #0]
 801535e:	6829      	ldr	r1, [r5, #0]
 8015360:	0606      	lsls	r6, r0, #24
 8015362:	f101 0304 	add.w	r3, r1, #4
 8015366:	d50a      	bpl.n	801537e <_printf_i+0xce>
 8015368:	680e      	ldr	r6, [r1, #0]
 801536a:	602b      	str	r3, [r5, #0]
 801536c:	2e00      	cmp	r6, #0
 801536e:	da03      	bge.n	8015378 <_printf_i+0xc8>
 8015370:	232d      	movs	r3, #45	; 0x2d
 8015372:	4276      	negs	r6, r6
 8015374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015378:	485e      	ldr	r0, [pc, #376]	; (80154f4 <_printf_i+0x244>)
 801537a:	230a      	movs	r3, #10
 801537c:	e019      	b.n	80153b2 <_printf_i+0x102>
 801537e:	680e      	ldr	r6, [r1, #0]
 8015380:	602b      	str	r3, [r5, #0]
 8015382:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015386:	bf18      	it	ne
 8015388:	b236      	sxthne	r6, r6
 801538a:	e7ef      	b.n	801536c <_printf_i+0xbc>
 801538c:	682b      	ldr	r3, [r5, #0]
 801538e:	6820      	ldr	r0, [r4, #0]
 8015390:	1d19      	adds	r1, r3, #4
 8015392:	6029      	str	r1, [r5, #0]
 8015394:	0601      	lsls	r1, r0, #24
 8015396:	d501      	bpl.n	801539c <_printf_i+0xec>
 8015398:	681e      	ldr	r6, [r3, #0]
 801539a:	e002      	b.n	80153a2 <_printf_i+0xf2>
 801539c:	0646      	lsls	r6, r0, #25
 801539e:	d5fb      	bpl.n	8015398 <_printf_i+0xe8>
 80153a0:	881e      	ldrh	r6, [r3, #0]
 80153a2:	4854      	ldr	r0, [pc, #336]	; (80154f4 <_printf_i+0x244>)
 80153a4:	2f6f      	cmp	r7, #111	; 0x6f
 80153a6:	bf0c      	ite	eq
 80153a8:	2308      	moveq	r3, #8
 80153aa:	230a      	movne	r3, #10
 80153ac:	2100      	movs	r1, #0
 80153ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80153b2:	6865      	ldr	r5, [r4, #4]
 80153b4:	60a5      	str	r5, [r4, #8]
 80153b6:	2d00      	cmp	r5, #0
 80153b8:	bfa2      	ittt	ge
 80153ba:	6821      	ldrge	r1, [r4, #0]
 80153bc:	f021 0104 	bicge.w	r1, r1, #4
 80153c0:	6021      	strge	r1, [r4, #0]
 80153c2:	b90e      	cbnz	r6, 80153c8 <_printf_i+0x118>
 80153c4:	2d00      	cmp	r5, #0
 80153c6:	d04d      	beq.n	8015464 <_printf_i+0x1b4>
 80153c8:	4615      	mov	r5, r2
 80153ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80153ce:	fb03 6711 	mls	r7, r3, r1, r6
 80153d2:	5dc7      	ldrb	r7, [r0, r7]
 80153d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80153d8:	4637      	mov	r7, r6
 80153da:	42bb      	cmp	r3, r7
 80153dc:	460e      	mov	r6, r1
 80153de:	d9f4      	bls.n	80153ca <_printf_i+0x11a>
 80153e0:	2b08      	cmp	r3, #8
 80153e2:	d10b      	bne.n	80153fc <_printf_i+0x14c>
 80153e4:	6823      	ldr	r3, [r4, #0]
 80153e6:	07de      	lsls	r6, r3, #31
 80153e8:	d508      	bpl.n	80153fc <_printf_i+0x14c>
 80153ea:	6923      	ldr	r3, [r4, #16]
 80153ec:	6861      	ldr	r1, [r4, #4]
 80153ee:	4299      	cmp	r1, r3
 80153f0:	bfde      	ittt	le
 80153f2:	2330      	movle	r3, #48	; 0x30
 80153f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80153f8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80153fc:	1b52      	subs	r2, r2, r5
 80153fe:	6122      	str	r2, [r4, #16]
 8015400:	f8cd a000 	str.w	sl, [sp]
 8015404:	464b      	mov	r3, r9
 8015406:	aa03      	add	r2, sp, #12
 8015408:	4621      	mov	r1, r4
 801540a:	4640      	mov	r0, r8
 801540c:	f7ff fee2 	bl	80151d4 <_printf_common>
 8015410:	3001      	adds	r0, #1
 8015412:	d14c      	bne.n	80154ae <_printf_i+0x1fe>
 8015414:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015418:	b004      	add	sp, #16
 801541a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801541e:	4835      	ldr	r0, [pc, #212]	; (80154f4 <_printf_i+0x244>)
 8015420:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015424:	6829      	ldr	r1, [r5, #0]
 8015426:	6823      	ldr	r3, [r4, #0]
 8015428:	f851 6b04 	ldr.w	r6, [r1], #4
 801542c:	6029      	str	r1, [r5, #0]
 801542e:	061d      	lsls	r5, r3, #24
 8015430:	d514      	bpl.n	801545c <_printf_i+0x1ac>
 8015432:	07df      	lsls	r7, r3, #31
 8015434:	bf44      	itt	mi
 8015436:	f043 0320 	orrmi.w	r3, r3, #32
 801543a:	6023      	strmi	r3, [r4, #0]
 801543c:	b91e      	cbnz	r6, 8015446 <_printf_i+0x196>
 801543e:	6823      	ldr	r3, [r4, #0]
 8015440:	f023 0320 	bic.w	r3, r3, #32
 8015444:	6023      	str	r3, [r4, #0]
 8015446:	2310      	movs	r3, #16
 8015448:	e7b0      	b.n	80153ac <_printf_i+0xfc>
 801544a:	6823      	ldr	r3, [r4, #0]
 801544c:	f043 0320 	orr.w	r3, r3, #32
 8015450:	6023      	str	r3, [r4, #0]
 8015452:	2378      	movs	r3, #120	; 0x78
 8015454:	4828      	ldr	r0, [pc, #160]	; (80154f8 <_printf_i+0x248>)
 8015456:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801545a:	e7e3      	b.n	8015424 <_printf_i+0x174>
 801545c:	0659      	lsls	r1, r3, #25
 801545e:	bf48      	it	mi
 8015460:	b2b6      	uxthmi	r6, r6
 8015462:	e7e6      	b.n	8015432 <_printf_i+0x182>
 8015464:	4615      	mov	r5, r2
 8015466:	e7bb      	b.n	80153e0 <_printf_i+0x130>
 8015468:	682b      	ldr	r3, [r5, #0]
 801546a:	6826      	ldr	r6, [r4, #0]
 801546c:	6961      	ldr	r1, [r4, #20]
 801546e:	1d18      	adds	r0, r3, #4
 8015470:	6028      	str	r0, [r5, #0]
 8015472:	0635      	lsls	r5, r6, #24
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	d501      	bpl.n	801547c <_printf_i+0x1cc>
 8015478:	6019      	str	r1, [r3, #0]
 801547a:	e002      	b.n	8015482 <_printf_i+0x1d2>
 801547c:	0670      	lsls	r0, r6, #25
 801547e:	d5fb      	bpl.n	8015478 <_printf_i+0x1c8>
 8015480:	8019      	strh	r1, [r3, #0]
 8015482:	2300      	movs	r3, #0
 8015484:	6123      	str	r3, [r4, #16]
 8015486:	4615      	mov	r5, r2
 8015488:	e7ba      	b.n	8015400 <_printf_i+0x150>
 801548a:	682b      	ldr	r3, [r5, #0]
 801548c:	1d1a      	adds	r2, r3, #4
 801548e:	602a      	str	r2, [r5, #0]
 8015490:	681d      	ldr	r5, [r3, #0]
 8015492:	6862      	ldr	r2, [r4, #4]
 8015494:	2100      	movs	r1, #0
 8015496:	4628      	mov	r0, r5
 8015498:	f7ea fed2 	bl	8000240 <memchr>
 801549c:	b108      	cbz	r0, 80154a2 <_printf_i+0x1f2>
 801549e:	1b40      	subs	r0, r0, r5
 80154a0:	6060      	str	r0, [r4, #4]
 80154a2:	6863      	ldr	r3, [r4, #4]
 80154a4:	6123      	str	r3, [r4, #16]
 80154a6:	2300      	movs	r3, #0
 80154a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80154ac:	e7a8      	b.n	8015400 <_printf_i+0x150>
 80154ae:	6923      	ldr	r3, [r4, #16]
 80154b0:	462a      	mov	r2, r5
 80154b2:	4649      	mov	r1, r9
 80154b4:	4640      	mov	r0, r8
 80154b6:	47d0      	blx	sl
 80154b8:	3001      	adds	r0, #1
 80154ba:	d0ab      	beq.n	8015414 <_printf_i+0x164>
 80154bc:	6823      	ldr	r3, [r4, #0]
 80154be:	079b      	lsls	r3, r3, #30
 80154c0:	d413      	bmi.n	80154ea <_printf_i+0x23a>
 80154c2:	68e0      	ldr	r0, [r4, #12]
 80154c4:	9b03      	ldr	r3, [sp, #12]
 80154c6:	4298      	cmp	r0, r3
 80154c8:	bfb8      	it	lt
 80154ca:	4618      	movlt	r0, r3
 80154cc:	e7a4      	b.n	8015418 <_printf_i+0x168>
 80154ce:	2301      	movs	r3, #1
 80154d0:	4632      	mov	r2, r6
 80154d2:	4649      	mov	r1, r9
 80154d4:	4640      	mov	r0, r8
 80154d6:	47d0      	blx	sl
 80154d8:	3001      	adds	r0, #1
 80154da:	d09b      	beq.n	8015414 <_printf_i+0x164>
 80154dc:	3501      	adds	r5, #1
 80154de:	68e3      	ldr	r3, [r4, #12]
 80154e0:	9903      	ldr	r1, [sp, #12]
 80154e2:	1a5b      	subs	r3, r3, r1
 80154e4:	42ab      	cmp	r3, r5
 80154e6:	dcf2      	bgt.n	80154ce <_printf_i+0x21e>
 80154e8:	e7eb      	b.n	80154c2 <_printf_i+0x212>
 80154ea:	2500      	movs	r5, #0
 80154ec:	f104 0619 	add.w	r6, r4, #25
 80154f0:	e7f5      	b.n	80154de <_printf_i+0x22e>
 80154f2:	bf00      	nop
 80154f4:	0801645d 	.word	0x0801645d
 80154f8:	0801646e 	.word	0x0801646e

080154fc <_read_r>:
 80154fc:	b538      	push	{r3, r4, r5, lr}
 80154fe:	4d07      	ldr	r5, [pc, #28]	; (801551c <_read_r+0x20>)
 8015500:	4604      	mov	r4, r0
 8015502:	4608      	mov	r0, r1
 8015504:	4611      	mov	r1, r2
 8015506:	2200      	movs	r2, #0
 8015508:	602a      	str	r2, [r5, #0]
 801550a:	461a      	mov	r2, r3
 801550c:	f000 faea 	bl	8015ae4 <_read>
 8015510:	1c43      	adds	r3, r0, #1
 8015512:	d102      	bne.n	801551a <_read_r+0x1e>
 8015514:	682b      	ldr	r3, [r5, #0]
 8015516:	b103      	cbz	r3, 801551a <_read_r+0x1e>
 8015518:	6023      	str	r3, [r4, #0]
 801551a:	bd38      	pop	{r3, r4, r5, pc}
 801551c:	20000608 	.word	0x20000608

08015520 <_sbrk_r>:
 8015520:	b538      	push	{r3, r4, r5, lr}
 8015522:	4d06      	ldr	r5, [pc, #24]	; (801553c <_sbrk_r+0x1c>)
 8015524:	2300      	movs	r3, #0
 8015526:	4604      	mov	r4, r0
 8015528:	4608      	mov	r0, r1
 801552a:	602b      	str	r3, [r5, #0]
 801552c:	f7ec ff36 	bl	800239c <_sbrk>
 8015530:	1c43      	adds	r3, r0, #1
 8015532:	d102      	bne.n	801553a <_sbrk_r+0x1a>
 8015534:	682b      	ldr	r3, [r5, #0]
 8015536:	b103      	cbz	r3, 801553a <_sbrk_r+0x1a>
 8015538:	6023      	str	r3, [r4, #0]
 801553a:	bd38      	pop	{r3, r4, r5, pc}
 801553c:	20000608 	.word	0x20000608

08015540 <_raise_r>:
 8015540:	291f      	cmp	r1, #31
 8015542:	b538      	push	{r3, r4, r5, lr}
 8015544:	4604      	mov	r4, r0
 8015546:	460d      	mov	r5, r1
 8015548:	d904      	bls.n	8015554 <_raise_r+0x14>
 801554a:	2316      	movs	r3, #22
 801554c:	6003      	str	r3, [r0, #0]
 801554e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015552:	bd38      	pop	{r3, r4, r5, pc}
 8015554:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015556:	b112      	cbz	r2, 801555e <_raise_r+0x1e>
 8015558:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801555c:	b94b      	cbnz	r3, 8015572 <_raise_r+0x32>
 801555e:	4620      	mov	r0, r4
 8015560:	f000 f830 	bl	80155c4 <_getpid_r>
 8015564:	462a      	mov	r2, r5
 8015566:	4601      	mov	r1, r0
 8015568:	4620      	mov	r0, r4
 801556a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801556e:	f000 b817 	b.w	80155a0 <_kill_r>
 8015572:	2b01      	cmp	r3, #1
 8015574:	d00a      	beq.n	801558c <_raise_r+0x4c>
 8015576:	1c59      	adds	r1, r3, #1
 8015578:	d103      	bne.n	8015582 <_raise_r+0x42>
 801557a:	2316      	movs	r3, #22
 801557c:	6003      	str	r3, [r0, #0]
 801557e:	2001      	movs	r0, #1
 8015580:	e7e7      	b.n	8015552 <_raise_r+0x12>
 8015582:	2400      	movs	r4, #0
 8015584:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015588:	4628      	mov	r0, r5
 801558a:	4798      	blx	r3
 801558c:	2000      	movs	r0, #0
 801558e:	e7e0      	b.n	8015552 <_raise_r+0x12>

08015590 <raise>:
 8015590:	4b02      	ldr	r3, [pc, #8]	; (801559c <raise+0xc>)
 8015592:	4601      	mov	r1, r0
 8015594:	6818      	ldr	r0, [r3, #0]
 8015596:	f7ff bfd3 	b.w	8015540 <_raise_r>
 801559a:	bf00      	nop
 801559c:	20000060 	.word	0x20000060

080155a0 <_kill_r>:
 80155a0:	b538      	push	{r3, r4, r5, lr}
 80155a2:	4d07      	ldr	r5, [pc, #28]	; (80155c0 <_kill_r+0x20>)
 80155a4:	2300      	movs	r3, #0
 80155a6:	4604      	mov	r4, r0
 80155a8:	4608      	mov	r0, r1
 80155aa:	4611      	mov	r1, r2
 80155ac:	602b      	str	r3, [r5, #0]
 80155ae:	f7ec fea7 	bl	8002300 <_kill>
 80155b2:	1c43      	adds	r3, r0, #1
 80155b4:	d102      	bne.n	80155bc <_kill_r+0x1c>
 80155b6:	682b      	ldr	r3, [r5, #0]
 80155b8:	b103      	cbz	r3, 80155bc <_kill_r+0x1c>
 80155ba:	6023      	str	r3, [r4, #0]
 80155bc:	bd38      	pop	{r3, r4, r5, pc}
 80155be:	bf00      	nop
 80155c0:	20000608 	.word	0x20000608

080155c4 <_getpid_r>:
 80155c4:	f7ec be94 	b.w	80022f0 <_getpid>

080155c8 <siprintf>:
 80155c8:	b40e      	push	{r1, r2, r3}
 80155ca:	b500      	push	{lr}
 80155cc:	b09c      	sub	sp, #112	; 0x70
 80155ce:	ab1d      	add	r3, sp, #116	; 0x74
 80155d0:	9002      	str	r0, [sp, #8]
 80155d2:	9006      	str	r0, [sp, #24]
 80155d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80155d8:	4809      	ldr	r0, [pc, #36]	; (8015600 <siprintf+0x38>)
 80155da:	9107      	str	r1, [sp, #28]
 80155dc:	9104      	str	r1, [sp, #16]
 80155de:	4909      	ldr	r1, [pc, #36]	; (8015604 <siprintf+0x3c>)
 80155e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80155e4:	9105      	str	r1, [sp, #20]
 80155e6:	6800      	ldr	r0, [r0, #0]
 80155e8:	9301      	str	r3, [sp, #4]
 80155ea:	a902      	add	r1, sp, #8
 80155ec:	f7ff f8c2 	bl	8014774 <_svfiprintf_r>
 80155f0:	9b02      	ldr	r3, [sp, #8]
 80155f2:	2200      	movs	r2, #0
 80155f4:	701a      	strb	r2, [r3, #0]
 80155f6:	b01c      	add	sp, #112	; 0x70
 80155f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80155fc:	b003      	add	sp, #12
 80155fe:	4770      	bx	lr
 8015600:	20000060 	.word	0x20000060
 8015604:	ffff0208 	.word	0xffff0208

08015608 <__stack_chk_init>:
 8015608:	4b03      	ldr	r3, [pc, #12]	; (8015618 <__stack_chk_init+0x10>)
 801560a:	681a      	ldr	r2, [r3, #0]
 801560c:	b912      	cbnz	r2, 8015614 <__stack_chk_init+0xc>
 801560e:	f5a2 0276 	sub.w	r2, r2, #16121856	; 0xf60000
 8015612:	601a      	str	r2, [r3, #0]
 8015614:	4770      	bx	lr
 8015616:	bf00      	nop
 8015618:	2000060c 	.word	0x2000060c

0801561c <__sread>:
 801561c:	b510      	push	{r4, lr}
 801561e:	460c      	mov	r4, r1
 8015620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015624:	f7ff ff6a 	bl	80154fc <_read_r>
 8015628:	2800      	cmp	r0, #0
 801562a:	bfab      	itete	ge
 801562c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801562e:	89a3      	ldrhlt	r3, [r4, #12]
 8015630:	181b      	addge	r3, r3, r0
 8015632:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015636:	bfac      	ite	ge
 8015638:	6563      	strge	r3, [r4, #84]	; 0x54
 801563a:	81a3      	strhlt	r3, [r4, #12]
 801563c:	bd10      	pop	{r4, pc}

0801563e <__swrite>:
 801563e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015642:	461f      	mov	r7, r3
 8015644:	898b      	ldrh	r3, [r1, #12]
 8015646:	05db      	lsls	r3, r3, #23
 8015648:	4605      	mov	r5, r0
 801564a:	460c      	mov	r4, r1
 801564c:	4616      	mov	r6, r2
 801564e:	d505      	bpl.n	801565c <__swrite+0x1e>
 8015650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015654:	2302      	movs	r3, #2
 8015656:	2200      	movs	r2, #0
 8015658:	f7fe faa2 	bl	8013ba0 <_lseek_r>
 801565c:	89a3      	ldrh	r3, [r4, #12]
 801565e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015662:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015666:	81a3      	strh	r3, [r4, #12]
 8015668:	4632      	mov	r2, r6
 801566a:	463b      	mov	r3, r7
 801566c:	4628      	mov	r0, r5
 801566e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015672:	f000 b877 	b.w	8015764 <_write_r>

08015676 <__sseek>:
 8015676:	b510      	push	{r4, lr}
 8015678:	460c      	mov	r4, r1
 801567a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801567e:	f7fe fa8f 	bl	8013ba0 <_lseek_r>
 8015682:	1c43      	adds	r3, r0, #1
 8015684:	89a3      	ldrh	r3, [r4, #12]
 8015686:	bf15      	itete	ne
 8015688:	6560      	strne	r0, [r4, #84]	; 0x54
 801568a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801568e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015692:	81a3      	strheq	r3, [r4, #12]
 8015694:	bf18      	it	ne
 8015696:	81a3      	strhne	r3, [r4, #12]
 8015698:	bd10      	pop	{r4, pc}

0801569a <__sclose>:
 801569a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801569e:	f7fd b9c1 	b.w	8012a24 <_close_r>
	...

080156a4 <__swbuf_r>:
 80156a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156a6:	460e      	mov	r6, r1
 80156a8:	4614      	mov	r4, r2
 80156aa:	4605      	mov	r5, r0
 80156ac:	b118      	cbz	r0, 80156b6 <__swbuf_r+0x12>
 80156ae:	6983      	ldr	r3, [r0, #24]
 80156b0:	b90b      	cbnz	r3, 80156b6 <__swbuf_r+0x12>
 80156b2:	f7fe f963 	bl	801397c <__sinit>
 80156b6:	4b21      	ldr	r3, [pc, #132]	; (801573c <__swbuf_r+0x98>)
 80156b8:	429c      	cmp	r4, r3
 80156ba:	d12b      	bne.n	8015714 <__swbuf_r+0x70>
 80156bc:	686c      	ldr	r4, [r5, #4]
 80156be:	69a3      	ldr	r3, [r4, #24]
 80156c0:	60a3      	str	r3, [r4, #8]
 80156c2:	89a3      	ldrh	r3, [r4, #12]
 80156c4:	071a      	lsls	r2, r3, #28
 80156c6:	d52f      	bpl.n	8015728 <__swbuf_r+0x84>
 80156c8:	6923      	ldr	r3, [r4, #16]
 80156ca:	b36b      	cbz	r3, 8015728 <__swbuf_r+0x84>
 80156cc:	6923      	ldr	r3, [r4, #16]
 80156ce:	6820      	ldr	r0, [r4, #0]
 80156d0:	1ac0      	subs	r0, r0, r3
 80156d2:	6963      	ldr	r3, [r4, #20]
 80156d4:	b2f6      	uxtb	r6, r6
 80156d6:	4283      	cmp	r3, r0
 80156d8:	4637      	mov	r7, r6
 80156da:	dc04      	bgt.n	80156e6 <__swbuf_r+0x42>
 80156dc:	4621      	mov	r1, r4
 80156de:	4628      	mov	r0, r5
 80156e0:	f7fe f8b8 	bl	8013854 <_fflush_r>
 80156e4:	bb30      	cbnz	r0, 8015734 <__swbuf_r+0x90>
 80156e6:	68a3      	ldr	r3, [r4, #8]
 80156e8:	3b01      	subs	r3, #1
 80156ea:	60a3      	str	r3, [r4, #8]
 80156ec:	6823      	ldr	r3, [r4, #0]
 80156ee:	1c5a      	adds	r2, r3, #1
 80156f0:	6022      	str	r2, [r4, #0]
 80156f2:	701e      	strb	r6, [r3, #0]
 80156f4:	6963      	ldr	r3, [r4, #20]
 80156f6:	3001      	adds	r0, #1
 80156f8:	4283      	cmp	r3, r0
 80156fa:	d004      	beq.n	8015706 <__swbuf_r+0x62>
 80156fc:	89a3      	ldrh	r3, [r4, #12]
 80156fe:	07db      	lsls	r3, r3, #31
 8015700:	d506      	bpl.n	8015710 <__swbuf_r+0x6c>
 8015702:	2e0a      	cmp	r6, #10
 8015704:	d104      	bne.n	8015710 <__swbuf_r+0x6c>
 8015706:	4621      	mov	r1, r4
 8015708:	4628      	mov	r0, r5
 801570a:	f7fe f8a3 	bl	8013854 <_fflush_r>
 801570e:	b988      	cbnz	r0, 8015734 <__swbuf_r+0x90>
 8015710:	4638      	mov	r0, r7
 8015712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015714:	4b0a      	ldr	r3, [pc, #40]	; (8015740 <__swbuf_r+0x9c>)
 8015716:	429c      	cmp	r4, r3
 8015718:	d101      	bne.n	801571e <__swbuf_r+0x7a>
 801571a:	68ac      	ldr	r4, [r5, #8]
 801571c:	e7cf      	b.n	80156be <__swbuf_r+0x1a>
 801571e:	4b09      	ldr	r3, [pc, #36]	; (8015744 <__swbuf_r+0xa0>)
 8015720:	429c      	cmp	r4, r3
 8015722:	bf08      	it	eq
 8015724:	68ec      	ldreq	r4, [r5, #12]
 8015726:	e7ca      	b.n	80156be <__swbuf_r+0x1a>
 8015728:	4621      	mov	r1, r4
 801572a:	4628      	mov	r0, r5
 801572c:	f000 f82c 	bl	8015788 <__swsetup_r>
 8015730:	2800      	cmp	r0, #0
 8015732:	d0cb      	beq.n	80156cc <__swbuf_r+0x28>
 8015734:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015738:	e7ea      	b.n	8015710 <__swbuf_r+0x6c>
 801573a:	bf00      	nop
 801573c:	08016290 	.word	0x08016290
 8015740:	080162b0 	.word	0x080162b0
 8015744:	08016270 	.word	0x08016270

08015748 <__ascii_wctomb>:
 8015748:	b149      	cbz	r1, 801575e <__ascii_wctomb+0x16>
 801574a:	2aff      	cmp	r2, #255	; 0xff
 801574c:	bf85      	ittet	hi
 801574e:	238a      	movhi	r3, #138	; 0x8a
 8015750:	6003      	strhi	r3, [r0, #0]
 8015752:	700a      	strbls	r2, [r1, #0]
 8015754:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8015758:	bf98      	it	ls
 801575a:	2001      	movls	r0, #1
 801575c:	4770      	bx	lr
 801575e:	4608      	mov	r0, r1
 8015760:	4770      	bx	lr
	...

08015764 <_write_r>:
 8015764:	b538      	push	{r3, r4, r5, lr}
 8015766:	4d07      	ldr	r5, [pc, #28]	; (8015784 <_write_r+0x20>)
 8015768:	4604      	mov	r4, r0
 801576a:	4608      	mov	r0, r1
 801576c:	4611      	mov	r1, r2
 801576e:	2200      	movs	r2, #0
 8015770:	602a      	str	r2, [r5, #0]
 8015772:	461a      	mov	r2, r3
 8015774:	f000 f9be 	bl	8015af4 <_write>
 8015778:	1c43      	adds	r3, r0, #1
 801577a:	d102      	bne.n	8015782 <_write_r+0x1e>
 801577c:	682b      	ldr	r3, [r5, #0]
 801577e:	b103      	cbz	r3, 8015782 <_write_r+0x1e>
 8015780:	6023      	str	r3, [r4, #0]
 8015782:	bd38      	pop	{r3, r4, r5, pc}
 8015784:	20000608 	.word	0x20000608

08015788 <__swsetup_r>:
 8015788:	4b32      	ldr	r3, [pc, #200]	; (8015854 <__swsetup_r+0xcc>)
 801578a:	b570      	push	{r4, r5, r6, lr}
 801578c:	681d      	ldr	r5, [r3, #0]
 801578e:	4606      	mov	r6, r0
 8015790:	460c      	mov	r4, r1
 8015792:	b125      	cbz	r5, 801579e <__swsetup_r+0x16>
 8015794:	69ab      	ldr	r3, [r5, #24]
 8015796:	b913      	cbnz	r3, 801579e <__swsetup_r+0x16>
 8015798:	4628      	mov	r0, r5
 801579a:	f7fe f8ef 	bl	801397c <__sinit>
 801579e:	4b2e      	ldr	r3, [pc, #184]	; (8015858 <__swsetup_r+0xd0>)
 80157a0:	429c      	cmp	r4, r3
 80157a2:	d10f      	bne.n	80157c4 <__swsetup_r+0x3c>
 80157a4:	686c      	ldr	r4, [r5, #4]
 80157a6:	89a3      	ldrh	r3, [r4, #12]
 80157a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80157ac:	0719      	lsls	r1, r3, #28
 80157ae:	d42c      	bmi.n	801580a <__swsetup_r+0x82>
 80157b0:	06dd      	lsls	r5, r3, #27
 80157b2:	d411      	bmi.n	80157d8 <__swsetup_r+0x50>
 80157b4:	2309      	movs	r3, #9
 80157b6:	6033      	str	r3, [r6, #0]
 80157b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80157bc:	81a3      	strh	r3, [r4, #12]
 80157be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80157c2:	e03e      	b.n	8015842 <__swsetup_r+0xba>
 80157c4:	4b25      	ldr	r3, [pc, #148]	; (801585c <__swsetup_r+0xd4>)
 80157c6:	429c      	cmp	r4, r3
 80157c8:	d101      	bne.n	80157ce <__swsetup_r+0x46>
 80157ca:	68ac      	ldr	r4, [r5, #8]
 80157cc:	e7eb      	b.n	80157a6 <__swsetup_r+0x1e>
 80157ce:	4b24      	ldr	r3, [pc, #144]	; (8015860 <__swsetup_r+0xd8>)
 80157d0:	429c      	cmp	r4, r3
 80157d2:	bf08      	it	eq
 80157d4:	68ec      	ldreq	r4, [r5, #12]
 80157d6:	e7e6      	b.n	80157a6 <__swsetup_r+0x1e>
 80157d8:	0758      	lsls	r0, r3, #29
 80157da:	d512      	bpl.n	8015802 <__swsetup_r+0x7a>
 80157dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80157de:	b141      	cbz	r1, 80157f2 <__swsetup_r+0x6a>
 80157e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80157e4:	4299      	cmp	r1, r3
 80157e6:	d002      	beq.n	80157ee <__swsetup_r+0x66>
 80157e8:	4630      	mov	r0, r6
 80157ea:	f7fe fe51 	bl	8014490 <_free_r>
 80157ee:	2300      	movs	r3, #0
 80157f0:	6363      	str	r3, [r4, #52]	; 0x34
 80157f2:	89a3      	ldrh	r3, [r4, #12]
 80157f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80157f8:	81a3      	strh	r3, [r4, #12]
 80157fa:	2300      	movs	r3, #0
 80157fc:	6063      	str	r3, [r4, #4]
 80157fe:	6923      	ldr	r3, [r4, #16]
 8015800:	6023      	str	r3, [r4, #0]
 8015802:	89a3      	ldrh	r3, [r4, #12]
 8015804:	f043 0308 	orr.w	r3, r3, #8
 8015808:	81a3      	strh	r3, [r4, #12]
 801580a:	6923      	ldr	r3, [r4, #16]
 801580c:	b94b      	cbnz	r3, 8015822 <__swsetup_r+0x9a>
 801580e:	89a3      	ldrh	r3, [r4, #12]
 8015810:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015818:	d003      	beq.n	8015822 <__swsetup_r+0x9a>
 801581a:	4621      	mov	r1, r4
 801581c:	4630      	mov	r0, r6
 801581e:	f7fe f9f7 	bl	8013c10 <__smakebuf_r>
 8015822:	89a0      	ldrh	r0, [r4, #12]
 8015824:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015828:	f010 0301 	ands.w	r3, r0, #1
 801582c:	d00a      	beq.n	8015844 <__swsetup_r+0xbc>
 801582e:	2300      	movs	r3, #0
 8015830:	60a3      	str	r3, [r4, #8]
 8015832:	6963      	ldr	r3, [r4, #20]
 8015834:	425b      	negs	r3, r3
 8015836:	61a3      	str	r3, [r4, #24]
 8015838:	6923      	ldr	r3, [r4, #16]
 801583a:	b943      	cbnz	r3, 801584e <__swsetup_r+0xc6>
 801583c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015840:	d1ba      	bne.n	80157b8 <__swsetup_r+0x30>
 8015842:	bd70      	pop	{r4, r5, r6, pc}
 8015844:	0781      	lsls	r1, r0, #30
 8015846:	bf58      	it	pl
 8015848:	6963      	ldrpl	r3, [r4, #20]
 801584a:	60a3      	str	r3, [r4, #8]
 801584c:	e7f4      	b.n	8015838 <__swsetup_r+0xb0>
 801584e:	2000      	movs	r0, #0
 8015850:	e7f7      	b.n	8015842 <__swsetup_r+0xba>
 8015852:	bf00      	nop
 8015854:	20000060 	.word	0x20000060
 8015858:	08016290 	.word	0x08016290
 801585c:	080162b0 	.word	0x080162b0
 8015860:	08016270 	.word	0x08016270

08015864 <__ieee754_fmod>:
 8015864:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015868:	ec53 2b11 	vmov	r2, r3, d1
 801586c:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8015870:	ea5e 0402 	orrs.w	r4, lr, r2
 8015874:	ec51 0b10 	vmov	r0, r1, d0
 8015878:	ee11 7a10 	vmov	r7, s2
 801587c:	ee11 ca10 	vmov	ip, s2
 8015880:	461e      	mov	r6, r3
 8015882:	d00d      	beq.n	80158a0 <__ieee754_fmod+0x3c>
 8015884:	4c7a      	ldr	r4, [pc, #488]	; (8015a70 <__ieee754_fmod+0x20c>)
 8015886:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 801588a:	45a0      	cmp	r8, r4
 801588c:	4689      	mov	r9, r1
 801588e:	dc07      	bgt.n	80158a0 <__ieee754_fmod+0x3c>
 8015890:	4254      	negs	r4, r2
 8015892:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 8015a7c <__ieee754_fmod+0x218>
 8015896:	4314      	orrs	r4, r2
 8015898:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 801589c:	455c      	cmp	r4, fp
 801589e:	d909      	bls.n	80158b4 <__ieee754_fmod+0x50>
 80158a0:	f7ea fee4 	bl	800066c <__aeabi_dmul>
 80158a4:	4602      	mov	r2, r0
 80158a6:	460b      	mov	r3, r1
 80158a8:	f7eb f80a 	bl	80008c0 <__aeabi_ddiv>
 80158ac:	ec41 0b10 	vmov	d0, r0, r1
 80158b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158b4:	45f0      	cmp	r8, lr
 80158b6:	ee10 aa10 	vmov	sl, s0
 80158ba:	ee10 4a10 	vmov	r4, s0
 80158be:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80158c2:	dc09      	bgt.n	80158d8 <__ieee754_fmod+0x74>
 80158c4:	dbf2      	blt.n	80158ac <__ieee754_fmod+0x48>
 80158c6:	4290      	cmp	r0, r2
 80158c8:	d3f0      	bcc.n	80158ac <__ieee754_fmod+0x48>
 80158ca:	d105      	bne.n	80158d8 <__ieee754_fmod+0x74>
 80158cc:	4b69      	ldr	r3, [pc, #420]	; (8015a74 <__ieee754_fmod+0x210>)
 80158ce:	eb03 7515 	add.w	r5, r3, r5, lsr #28
 80158d2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80158d6:	e7e9      	b.n	80158ac <__ieee754_fmod+0x48>
 80158d8:	ea19 0f0b 	tst.w	r9, fp
 80158dc:	d14a      	bne.n	8015974 <__ieee754_fmod+0x110>
 80158de:	f1b8 0f00 	cmp.w	r8, #0
 80158e2:	d13f      	bne.n	8015964 <__ieee754_fmod+0x100>
 80158e4:	4964      	ldr	r1, [pc, #400]	; (8015a78 <__ieee754_fmod+0x214>)
 80158e6:	4653      	mov	r3, sl
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	dc38      	bgt.n	801595e <__ieee754_fmod+0xfa>
 80158ec:	4b63      	ldr	r3, [pc, #396]	; (8015a7c <__ieee754_fmod+0x218>)
 80158ee:	4033      	ands	r3, r6
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d14f      	bne.n	8015994 <__ieee754_fmod+0x130>
 80158f4:	f1be 0f00 	cmp.w	lr, #0
 80158f8:	d144      	bne.n	8015984 <__ieee754_fmod+0x120>
 80158fa:	4a5f      	ldr	r2, [pc, #380]	; (8015a78 <__ieee754_fmod+0x214>)
 80158fc:	463b      	mov	r3, r7
 80158fe:	2b00      	cmp	r3, #0
 8015900:	dc3d      	bgt.n	801597e <__ieee754_fmod+0x11a>
 8015902:	4b5f      	ldr	r3, [pc, #380]	; (8015a80 <__ieee754_fmod+0x21c>)
 8015904:	4299      	cmp	r1, r3
 8015906:	db4a      	blt.n	801599e <__ieee754_fmod+0x13a>
 8015908:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801590c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015910:	485b      	ldr	r0, [pc, #364]	; (8015a80 <__ieee754_fmod+0x21c>)
 8015912:	4282      	cmp	r2, r0
 8015914:	db57      	blt.n	80159c6 <__ieee754_fmod+0x162>
 8015916:	f3c6 0613 	ubfx	r6, r6, #0, #20
 801591a:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 801591e:	1a89      	subs	r1, r1, r2
 8015920:	1b98      	subs	r0, r3, r6
 8015922:	eba4 070c 	sub.w	r7, r4, ip
 8015926:	2900      	cmp	r1, #0
 8015928:	d164      	bne.n	80159f4 <__ieee754_fmod+0x190>
 801592a:	4564      	cmp	r4, ip
 801592c:	bf38      	it	cc
 801592e:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 8015932:	2800      	cmp	r0, #0
 8015934:	bfa4      	itt	ge
 8015936:	463c      	movge	r4, r7
 8015938:	4603      	movge	r3, r0
 801593a:	ea53 0104 	orrs.w	r1, r3, r4
 801593e:	d0c5      	beq.n	80158cc <__ieee754_fmod+0x68>
 8015940:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015944:	db6b      	blt.n	8015a1e <__ieee754_fmod+0x1ba>
 8015946:	494e      	ldr	r1, [pc, #312]	; (8015a80 <__ieee754_fmod+0x21c>)
 8015948:	428a      	cmp	r2, r1
 801594a:	db6e      	blt.n	8015a2a <__ieee754_fmod+0x1c6>
 801594c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015950:	431d      	orrs	r5, r3
 8015952:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8015956:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 801595a:	4620      	mov	r0, r4
 801595c:	e7a6      	b.n	80158ac <__ieee754_fmod+0x48>
 801595e:	3901      	subs	r1, #1
 8015960:	005b      	lsls	r3, r3, #1
 8015962:	e7c1      	b.n	80158e8 <__ieee754_fmod+0x84>
 8015964:	4946      	ldr	r1, [pc, #280]	; (8015a80 <__ieee754_fmod+0x21c>)
 8015966:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 801596a:	2b00      	cmp	r3, #0
 801596c:	ddbe      	ble.n	80158ec <__ieee754_fmod+0x88>
 801596e:	3901      	subs	r1, #1
 8015970:	005b      	lsls	r3, r3, #1
 8015972:	e7fa      	b.n	801596a <__ieee754_fmod+0x106>
 8015974:	ea4f 5128 	mov.w	r1, r8, asr #20
 8015978:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801597c:	e7b6      	b.n	80158ec <__ieee754_fmod+0x88>
 801597e:	3a01      	subs	r2, #1
 8015980:	005b      	lsls	r3, r3, #1
 8015982:	e7bc      	b.n	80158fe <__ieee754_fmod+0x9a>
 8015984:	4a3e      	ldr	r2, [pc, #248]	; (8015a80 <__ieee754_fmod+0x21c>)
 8015986:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 801598a:	2b00      	cmp	r3, #0
 801598c:	ddb9      	ble.n	8015902 <__ieee754_fmod+0x9e>
 801598e:	3a01      	subs	r2, #1
 8015990:	005b      	lsls	r3, r3, #1
 8015992:	e7fa      	b.n	801598a <__ieee754_fmod+0x126>
 8015994:	ea4f 522e 	mov.w	r2, lr, asr #20
 8015998:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801599c:	e7b1      	b.n	8015902 <__ieee754_fmod+0x9e>
 801599e:	1a5c      	subs	r4, r3, r1
 80159a0:	2c1f      	cmp	r4, #31
 80159a2:	dc0a      	bgt.n	80159ba <__ieee754_fmod+0x156>
 80159a4:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 80159a8:	fa08 f804 	lsl.w	r8, r8, r4
 80159ac:	fa2a f303 	lsr.w	r3, sl, r3
 80159b0:	ea43 0308 	orr.w	r3, r3, r8
 80159b4:	fa0a f404 	lsl.w	r4, sl, r4
 80159b8:	e7aa      	b.n	8015910 <__ieee754_fmod+0xac>
 80159ba:	4b32      	ldr	r3, [pc, #200]	; (8015a84 <__ieee754_fmod+0x220>)
 80159bc:	1a5b      	subs	r3, r3, r1
 80159be:	fa0a f303 	lsl.w	r3, sl, r3
 80159c2:	2400      	movs	r4, #0
 80159c4:	e7a4      	b.n	8015910 <__ieee754_fmod+0xac>
 80159c6:	eba0 0c02 	sub.w	ip, r0, r2
 80159ca:	f1bc 0f1f 	cmp.w	ip, #31
 80159ce:	dc0a      	bgt.n	80159e6 <__ieee754_fmod+0x182>
 80159d0:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 80159d4:	fa0e fe0c 	lsl.w	lr, lr, ip
 80159d8:	fa27 f606 	lsr.w	r6, r7, r6
 80159dc:	ea46 060e 	orr.w	r6, r6, lr
 80159e0:	fa07 fc0c 	lsl.w	ip, r7, ip
 80159e4:	e79b      	b.n	801591e <__ieee754_fmod+0xba>
 80159e6:	4e27      	ldr	r6, [pc, #156]	; (8015a84 <__ieee754_fmod+0x220>)
 80159e8:	1ab6      	subs	r6, r6, r2
 80159ea:	fa07 f606 	lsl.w	r6, r7, r6
 80159ee:	f04f 0c00 	mov.w	ip, #0
 80159f2:	e794      	b.n	801591e <__ieee754_fmod+0xba>
 80159f4:	4564      	cmp	r4, ip
 80159f6:	bf38      	it	cc
 80159f8:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 80159fc:	2800      	cmp	r0, #0
 80159fe:	da05      	bge.n	8015a0c <__ieee754_fmod+0x1a8>
 8015a00:	0fe0      	lsrs	r0, r4, #31
 8015a02:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8015a06:	0064      	lsls	r4, r4, #1
 8015a08:	3901      	subs	r1, #1
 8015a0a:	e789      	b.n	8015920 <__ieee754_fmod+0xbc>
 8015a0c:	ea50 0307 	orrs.w	r3, r0, r7
 8015a10:	f43f af5c 	beq.w	80158cc <__ieee754_fmod+0x68>
 8015a14:	0ffb      	lsrs	r3, r7, #31
 8015a16:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8015a1a:	007c      	lsls	r4, r7, #1
 8015a1c:	e7f4      	b.n	8015a08 <__ieee754_fmod+0x1a4>
 8015a1e:	0fe1      	lsrs	r1, r4, #31
 8015a20:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8015a24:	0064      	lsls	r4, r4, #1
 8015a26:	3a01      	subs	r2, #1
 8015a28:	e78a      	b.n	8015940 <__ieee754_fmod+0xdc>
 8015a2a:	1a89      	subs	r1, r1, r2
 8015a2c:	2914      	cmp	r1, #20
 8015a2e:	dc0a      	bgt.n	8015a46 <__ieee754_fmod+0x1e2>
 8015a30:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8015a34:	fa03 f202 	lsl.w	r2, r3, r2
 8015a38:	40cc      	lsrs	r4, r1
 8015a3a:	4322      	orrs	r2, r4
 8015a3c:	410b      	asrs	r3, r1
 8015a3e:	ea43 0105 	orr.w	r1, r3, r5
 8015a42:	4610      	mov	r0, r2
 8015a44:	e732      	b.n	80158ac <__ieee754_fmod+0x48>
 8015a46:	291f      	cmp	r1, #31
 8015a48:	dc07      	bgt.n	8015a5a <__ieee754_fmod+0x1f6>
 8015a4a:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8015a4e:	40cc      	lsrs	r4, r1
 8015a50:	fa03 f202 	lsl.w	r2, r3, r2
 8015a54:	4322      	orrs	r2, r4
 8015a56:	462b      	mov	r3, r5
 8015a58:	e7f1      	b.n	8015a3e <__ieee754_fmod+0x1da>
 8015a5a:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8015a5e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8015a62:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8015a66:	32e2      	adds	r2, #226	; 0xe2
 8015a68:	fa43 f202 	asr.w	r2, r3, r2
 8015a6c:	e7f3      	b.n	8015a56 <__ieee754_fmod+0x1f2>
 8015a6e:	bf00      	nop
 8015a70:	7fefffff 	.word	0x7fefffff
 8015a74:	08016488 	.word	0x08016488
 8015a78:	fffffbed 	.word	0xfffffbed
 8015a7c:	7ff00000 	.word	0x7ff00000
 8015a80:	fffffc02 	.word	0xfffffc02
 8015a84:	fffffbe2 	.word	0xfffffbe2

08015a88 <fmod>:
 8015a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a8a:	ed2d 8b02 	vpush	{d8}
 8015a8e:	ec57 6b10 	vmov	r6, r7, d0
 8015a92:	ec55 4b11 	vmov	r4, r5, d1
 8015a96:	f7ff fee5 	bl	8015864 <__ieee754_fmod>
 8015a9a:	4622      	mov	r2, r4
 8015a9c:	462b      	mov	r3, r5
 8015a9e:	4630      	mov	r0, r6
 8015aa0:	4639      	mov	r1, r7
 8015aa2:	eeb0 8a40 	vmov.f32	s16, s0
 8015aa6:	eef0 8a60 	vmov.f32	s17, s1
 8015aaa:	f7eb f879 	bl	8000ba0 <__aeabi_dcmpun>
 8015aae:	b990      	cbnz	r0, 8015ad6 <fmod+0x4e>
 8015ab0:	2200      	movs	r2, #0
 8015ab2:	2300      	movs	r3, #0
 8015ab4:	4620      	mov	r0, r4
 8015ab6:	4629      	mov	r1, r5
 8015ab8:	f7eb f840 	bl	8000b3c <__aeabi_dcmpeq>
 8015abc:	b158      	cbz	r0, 8015ad6 <fmod+0x4e>
 8015abe:	f7fd fe3d 	bl	801373c <__errno>
 8015ac2:	2321      	movs	r3, #33	; 0x21
 8015ac4:	6003      	str	r3, [r0, #0]
 8015ac6:	2200      	movs	r2, #0
 8015ac8:	2300      	movs	r3, #0
 8015aca:	4610      	mov	r0, r2
 8015acc:	4619      	mov	r1, r3
 8015ace:	f7ea fef7 	bl	80008c0 <__aeabi_ddiv>
 8015ad2:	ec41 0b18 	vmov	d8, r0, r1
 8015ad6:	eeb0 0a48 	vmov.f32	s0, s16
 8015ada:	eef0 0a68 	vmov.f32	s1, s17
 8015ade:	ecbd 8b02 	vpop	{d8}
 8015ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015ae4 <_read>:
 8015ae4:	4b02      	ldr	r3, [pc, #8]	; (8015af0 <_read+0xc>)
 8015ae6:	2258      	movs	r2, #88	; 0x58
 8015ae8:	601a      	str	r2, [r3, #0]
 8015aea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015aee:	4770      	bx	lr
 8015af0:	20000608 	.word	0x20000608

08015af4 <_write>:
 8015af4:	4b02      	ldr	r3, [pc, #8]	; (8015b00 <_write+0xc>)
 8015af6:	2258      	movs	r2, #88	; 0x58
 8015af8:	601a      	str	r2, [r3, #0]
 8015afa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015afe:	4770      	bx	lr
 8015b00:	20000608 	.word	0x20000608

08015b04 <register_fini>:
 8015b04:	4b02      	ldr	r3, [pc, #8]	; (8015b10 <register_fini+0xc>)
 8015b06:	b113      	cbz	r3, 8015b0e <register_fini+0xa>
 8015b08:	4802      	ldr	r0, [pc, #8]	; (8015b14 <register_fini+0x10>)
 8015b0a:	f7fc bf85 	b.w	8012a18 <atexit>
 8015b0e:	4770      	bx	lr
 8015b10:	00000000 	.word	0x00000000
 8015b14:	08013a79 	.word	0x08013a79

08015b18 <_init>:
 8015b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b1a:	bf00      	nop
 8015b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015b1e:	bc08      	pop	{r3}
 8015b20:	469e      	mov	lr, r3
 8015b22:	4770      	bx	lr

08015b24 <_fini>:
 8015b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b26:	bf00      	nop
 8015b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015b2a:	bc08      	pop	{r3}
 8015b2c:	469e      	mov	lr, r3
 8015b2e:	4770      	bx	lr
